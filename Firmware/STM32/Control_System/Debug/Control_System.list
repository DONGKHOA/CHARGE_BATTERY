
Control_System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002aac  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002c3c  08002c3c  00003c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c54  08002c54  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  08002c54  08002c54  00003c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002c5c  08002c5c  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c5c  08002c5c  00003c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002c60  08002c60  00003c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002c64  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000400c  2**0
                  CONTENTS
 10 .bss          000000fc  2000000c  2000000c  0000400c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000108  20000108  0000400c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ab75  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002358  00000000  00000000  0000ebb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c68  00000000  00000000  00010f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000936  00000000  00000000  00011b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006baa  00000000  00000000  000124ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001061e  00000000  00000000  00019058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f0634  00000000  00000000  00029676  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00119caa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000031f0  00000000  00000000  00119cf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  0011cee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000000c 	.word	0x2000000c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002c24 	.word	0x08002c24

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000010 	.word	0x20000010
 80001cc:	08002c24 	.word	0x08002c24

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <LL_ADC_REG_SetSequencerRanks>:
  *         (1) On STM32F4, parameter available only on ADC instance: ADC1.\n
  *         (2) On devices STM32F42x and STM32F43x, limitation: this internal channel is shared between temperature sensor and Vbat, only 1 measurement path must be enabled.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b089      	sub	sp, #36	@ 0x24
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	60f8      	str	r0, [r7, #12]
 80004c8:	60b9      	str	r1, [r7, #8]
 80004ca:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	332c      	adds	r3, #44	@ 0x2c
 80004d0:	4619      	mov	r1, r3
 80004d2:	68bb      	ldr	r3, [r7, #8]
 80004d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80004d8:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80004dc:	617a      	str	r2, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80004de:	697a      	ldr	r2, [r7, #20]
 80004e0:	fa92 f2a2 	rbit	r2, r2
 80004e4:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80004e6:	693a      	ldr	r2, [r7, #16]
 80004e8:	61ba      	str	r2, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80004ea:	69ba      	ldr	r2, [r7, #24]
 80004ec:	2a00      	cmp	r2, #0
 80004ee:	d101      	bne.n	80004f4 <LL_ADC_REG_SetSequencerRanks+0x34>
  {
    return 32U;
 80004f0:	2220      	movs	r2, #32
 80004f2:	e003      	b.n	80004fc <LL_ADC_REG_SetSequencerRanks+0x3c>
  }
  return __builtin_clz(value);
 80004f4:	69ba      	ldr	r2, [r7, #24]
 80004f6:	fab2 f282 	clz	r2, r2
 80004fa:	b2d2      	uxtb	r2, r2
 80004fc:	40d3      	lsrs	r3, r2
 80004fe:	009b      	lsls	r3, r3, #2
 8000500:	440b      	add	r3, r1
 8000502:	61fb      	str	r3, [r7, #28]

  MODIFY_REG(*preg,
 8000504:	69fb      	ldr	r3, [r7, #28]
 8000506:	681a      	ldr	r2, [r3, #0]
 8000508:	68bb      	ldr	r3, [r7, #8]
 800050a:	f003 031f 	and.w	r3, r3, #31
 800050e:	211f      	movs	r1, #31
 8000510:	fa01 f303 	lsl.w	r3, r1, r3
 8000514:	43db      	mvns	r3, r3
 8000516:	401a      	ands	r2, r3
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	f003 011f 	and.w	r1, r3, #31
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	f003 031f 	and.w	r3, r3, #31
 8000524:	fa01 f303 	lsl.w	r3, r1, r3
 8000528:	431a      	orrs	r2, r3
 800052a:	69fb      	ldr	r3, [r7, #28]
 800052c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800052e:	bf00      	nop
 8000530:	3724      	adds	r7, #36	@ 0x24
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr

0800053a <LL_ADC_REG_SetFlagEndOfConversion>:
  *         @arg @ref LL_ADC_REG_FLAG_EOC_SEQUENCE_CONV
  *         @arg @ref LL_ADC_REG_FLAG_EOC_UNITARY_CONV
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetFlagEndOfConversion(ADC_TypeDef *ADCx, uint32_t EocSelection)
{
 800053a:	b480      	push	{r7}
 800053c:	b083      	sub	sp, #12
 800053e:	af00      	add	r7, sp, #0
 8000540:	6078      	str	r0, [r7, #4]
 8000542:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_EOCS, EocSelection);
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	689b      	ldr	r3, [r3, #8]
 8000548:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800054c:	683b      	ldr	r3, [r7, #0]
 800054e:	431a      	orrs	r2, r3
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	609a      	str	r2, [r3, #8]
}
 8000554:	bf00      	nop
 8000556:	370c      	adds	r7, #12
 8000558:	46bd      	mov	sp, r7
 800055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055e:	4770      	bx	lr

08000560 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_144CYCLES
  *         @arg @ref LL_ADC_SAMPLINGTIME_480CYCLES
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000560:	b480      	push	{r7}
 8000562:	b08f      	sub	sp, #60	@ 0x3c
 8000564:	af00      	add	r7, sp, #0
 8000566:	60f8      	str	r0, [r7, #12]
 8000568:	60b9      	str	r1, [r7, #8]
 800056a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	330c      	adds	r3, #12
 8000570:	4619      	mov	r1, r3
 8000572:	68bb      	ldr	r3, [r7, #8]
 8000574:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000578:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800057c:	617a      	str	r2, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800057e:	697a      	ldr	r2, [r7, #20]
 8000580:	fa92 f2a2 	rbit	r2, r2
 8000584:	613a      	str	r2, [r7, #16]
  return result;
 8000586:	693a      	ldr	r2, [r7, #16]
 8000588:	61ba      	str	r2, [r7, #24]
  if (value == 0U)
 800058a:	69ba      	ldr	r2, [r7, #24]
 800058c:	2a00      	cmp	r2, #0
 800058e:	d101      	bne.n	8000594 <LL_ADC_SetChannelSamplingTime+0x34>
    return 32U;
 8000590:	2220      	movs	r2, #32
 8000592:	e003      	b.n	800059c <LL_ADC_SetChannelSamplingTime+0x3c>
  return __builtin_clz(value);
 8000594:	69ba      	ldr	r2, [r7, #24]
 8000596:	fab2 f282 	clz	r2, r2
 800059a:	b2d2      	uxtb	r2, r2
 800059c:	40d3      	lsrs	r3, r2
 800059e:	009b      	lsls	r3, r3, #2
 80005a0:	440b      	add	r3, r1
 80005a2:	637b      	str	r3, [r7, #52]	@ 0x34

  MODIFY_REG(*preg,
 80005a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80005a6:	681a      	ldr	r2, [r3, #0]
 80005a8:	68bb      	ldr	r3, [r7, #8]
 80005aa:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 80005ae:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 80005b2:	6239      	str	r1, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80005b4:	6a39      	ldr	r1, [r7, #32]
 80005b6:	fa91 f1a1 	rbit	r1, r1
 80005ba:	61f9      	str	r1, [r7, #28]
  return result;
 80005bc:	69f9      	ldr	r1, [r7, #28]
 80005be:	6279      	str	r1, [r7, #36]	@ 0x24
  if (value == 0U)
 80005c0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80005c2:	2900      	cmp	r1, #0
 80005c4:	d101      	bne.n	80005ca <LL_ADC_SetChannelSamplingTime+0x6a>
    return 32U;
 80005c6:	2120      	movs	r1, #32
 80005c8:	e003      	b.n	80005d2 <LL_ADC_SetChannelSamplingTime+0x72>
  return __builtin_clz(value);
 80005ca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80005cc:	fab1 f181 	clz	r1, r1
 80005d0:	b2c9      	uxtb	r1, r1
 80005d2:	40cb      	lsrs	r3, r1
 80005d4:	2107      	movs	r1, #7
 80005d6:	fa01 f303 	lsl.w	r3, r1, r3
 80005da:	43db      	mvns	r3, r3
 80005dc:	401a      	ands	r2, r3
 80005de:	68bb      	ldr	r3, [r7, #8]
 80005e0:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 80005e4:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 80005e8:	62f9      	str	r1, [r7, #44]	@ 0x2c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80005ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80005ec:	fa91 f1a1 	rbit	r1, r1
 80005f0:	62b9      	str	r1, [r7, #40]	@ 0x28
  return result;
 80005f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80005f4:	6339      	str	r1, [r7, #48]	@ 0x30
  if (value == 0U)
 80005f6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80005f8:	2900      	cmp	r1, #0
 80005fa:	d101      	bne.n	8000600 <LL_ADC_SetChannelSamplingTime+0xa0>
    return 32U;
 80005fc:	2120      	movs	r1, #32
 80005fe:	e003      	b.n	8000608 <LL_ADC_SetChannelSamplingTime+0xa8>
  return __builtin_clz(value);
 8000600:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000602:	fab1 f181 	clz	r1, r1
 8000606:	b2c9      	uxtb	r1, r1
 8000608:	40cb      	lsrs	r3, r1
 800060a:	6879      	ldr	r1, [r7, #4]
 800060c:	fa01 f303 	lsl.w	r3, r1, r3
 8000610:	431a      	orrs	r2, r3
 8000612:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000614:	601a      	str	r2, [r3, #0]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 8000616:	bf00      	nop
 8000618:	373c      	adds	r7, #60	@ 0x3c
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
	...

08000624 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000628:	4b05      	ldr	r3, [pc, #20]	@ (8000640 <LL_RCC_HSE_Enable+0x1c>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a04      	ldr	r2, [pc, #16]	@ (8000640 <LL_RCC_HSE_Enable+0x1c>)
 800062e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000632:	6013      	str	r3, [r2, #0]
}
 8000634:	bf00      	nop
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	40023800 	.word	0x40023800

08000644 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000648:	4b07      	ldr	r3, [pc, #28]	@ (8000668 <LL_RCC_HSE_IsReady+0x24>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000650:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8000654:	bf0c      	ite	eq
 8000656:	2301      	moveq	r3, #1
 8000658:	2300      	movne	r3, #0
 800065a:	b2db      	uxtb	r3, r3
}
 800065c:	4618      	mov	r0, r3
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	40023800 	.word	0x40023800

0800066c <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000674:	4b06      	ldr	r3, [pc, #24]	@ (8000690 <LL_RCC_SetSysClkSource+0x24>)
 8000676:	689b      	ldr	r3, [r3, #8]
 8000678:	f023 0203 	bic.w	r2, r3, #3
 800067c:	4904      	ldr	r1, [pc, #16]	@ (8000690 <LL_RCC_SetSysClkSource+0x24>)
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	4313      	orrs	r3, r2
 8000682:	608b      	str	r3, [r1, #8]
}
 8000684:	bf00      	nop
 8000686:	370c      	adds	r7, #12
 8000688:	46bd      	mov	sp, r7
 800068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068e:	4770      	bx	lr
 8000690:	40023800 	.word	0x40023800

08000694 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000698:	4b04      	ldr	r3, [pc, #16]	@ (80006ac <LL_RCC_GetSysClkSource+0x18>)
 800069a:	689b      	ldr	r3, [r3, #8]
 800069c:	f003 030c 	and.w	r3, r3, #12
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	40023800 	.word	0x40023800

080006b0 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80006b8:	4b06      	ldr	r3, [pc, #24]	@ (80006d4 <LL_RCC_SetAHBPrescaler+0x24>)
 80006ba:	689b      	ldr	r3, [r3, #8]
 80006bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80006c0:	4904      	ldr	r1, [pc, #16]	@ (80006d4 <LL_RCC_SetAHBPrescaler+0x24>)
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	4313      	orrs	r3, r2
 80006c6:	608b      	str	r3, [r1, #8]
}
 80006c8:	bf00      	nop
 80006ca:	370c      	adds	r7, #12
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	40023800 	.word	0x40023800

080006d8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80006e0:	4b06      	ldr	r3, [pc, #24]	@ (80006fc <LL_RCC_SetAPB1Prescaler+0x24>)
 80006e2:	689b      	ldr	r3, [r3, #8]
 80006e4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80006e8:	4904      	ldr	r1, [pc, #16]	@ (80006fc <LL_RCC_SetAPB1Prescaler+0x24>)
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	4313      	orrs	r3, r2
 80006ee:	608b      	str	r3, [r1, #8]
}
 80006f0:	bf00      	nop
 80006f2:	370c      	adds	r7, #12
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr
 80006fc:	40023800 	.word	0x40023800

08000700 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000708:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <LL_RCC_SetAPB2Prescaler+0x24>)
 800070a:	689b      	ldr	r3, [r3, #8]
 800070c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8000710:	4904      	ldr	r1, [pc, #16]	@ (8000724 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	4313      	orrs	r3, r2
 8000716:	608b      	str	r3, [r1, #8]
}
 8000718:	bf00      	nop
 800071a:	370c      	adds	r7, #12
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr
 8000724:	40023800 	.word	0x40023800

08000728 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800072c:	4b05      	ldr	r3, [pc, #20]	@ (8000744 <LL_RCC_PLL_Enable+0x1c>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a04      	ldr	r2, [pc, #16]	@ (8000744 <LL_RCC_PLL_Enable+0x1c>)
 8000732:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000736:	6013      	str	r3, [r2, #0]
}
 8000738:	bf00      	nop
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	40023800 	.word	0x40023800

08000748 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 800074c:	4b07      	ldr	r3, [pc, #28]	@ (800076c <LL_RCC_PLL_IsReady+0x24>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000754:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8000758:	bf0c      	ite	eq
 800075a:	2301      	moveq	r3, #1
 800075c:	2300      	movne	r3, #0
 800075e:	b2db      	uxtb	r3, r3
}
 8000760:	4618      	mov	r0, r3
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	40023800 	.word	0x40023800

08000770 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8000770:	b480      	push	{r7}
 8000772:	b085      	sub	sp, #20
 8000774:	af00      	add	r7, sp, #0
 8000776:	60f8      	str	r0, [r7, #12]
 8000778:	60b9      	str	r1, [r7, #8]
 800077a:	607a      	str	r2, [r7, #4]
 800077c:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 800077e:	4b0d      	ldr	r3, [pc, #52]	@ (80007b4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000780:	685a      	ldr	r2, [r3, #4]
 8000782:	4b0d      	ldr	r3, [pc, #52]	@ (80007b8 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8000784:	4013      	ands	r3, r2
 8000786:	68f9      	ldr	r1, [r7, #12]
 8000788:	68ba      	ldr	r2, [r7, #8]
 800078a:	4311      	orrs	r1, r2
 800078c:	687a      	ldr	r2, [r7, #4]
 800078e:	0192      	lsls	r2, r2, #6
 8000790:	430a      	orrs	r2, r1
 8000792:	4908      	ldr	r1, [pc, #32]	@ (80007b4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000794:	4313      	orrs	r3, r2
 8000796:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8000798:	4b06      	ldr	r3, [pc, #24]	@ (80007b4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800079a:	685b      	ldr	r3, [r3, #4]
 800079c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80007a0:	4904      	ldr	r1, [pc, #16]	@ (80007b4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	4313      	orrs	r3, r2
 80007a6:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 80007a8:	bf00      	nop
 80007aa:	3714      	adds	r7, #20
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr
 80007b4:	40023800 	.word	0x40023800
 80007b8:	ffbf8000 	.word	0xffbf8000

080007bc <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80007bc:	b480      	push	{r7}
 80007be:	b085      	sub	sp, #20
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80007c4:	4b08      	ldr	r3, [pc, #32]	@ (80007e8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80007c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80007c8:	4907      	ldr	r1, [pc, #28]	@ (80007e8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	4313      	orrs	r3, r2
 80007ce:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80007d0:	4b05      	ldr	r3, [pc, #20]	@ (80007e8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80007d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	4013      	ands	r3, r2
 80007d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007da:	68fb      	ldr	r3, [r7, #12]
}
 80007dc:	bf00      	nop
 80007de:	3714      	adds	r7, #20
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr
 80007e8:	40023800 	.word	0x40023800

080007ec <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b085      	sub	sp, #20
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80007f4:	4b08      	ldr	r3, [pc, #32]	@ (8000818 <LL_APB1_GRP1_EnableClock+0x2c>)
 80007f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80007f8:	4907      	ldr	r1, [pc, #28]	@ (8000818 <LL_APB1_GRP1_EnableClock+0x2c>)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	4313      	orrs	r3, r2
 80007fe:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000800:	4b05      	ldr	r3, [pc, #20]	@ (8000818 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000802:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	4013      	ands	r3, r2
 8000808:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800080a:	68fb      	ldr	r3, [r7, #12]
}
 800080c:	bf00      	nop
 800080e:	3714      	adds	r7, #20
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr
 8000818:	40023800 	.word	0x40023800

0800081c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800081c:	b480      	push	{r7}
 800081e:	b085      	sub	sp, #20
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000824:	4b08      	ldr	r3, [pc, #32]	@ (8000848 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000826:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000828:	4907      	ldr	r1, [pc, #28]	@ (8000848 <LL_APB2_GRP1_EnableClock+0x2c>)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	4313      	orrs	r3, r2
 800082e:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000830:	4b05      	ldr	r3, [pc, #20]	@ (8000848 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000832:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	4013      	ands	r3, r2
 8000838:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800083a:	68fb      	ldr	r3, [r7, #12]
}
 800083c:	bf00      	nop
 800083e:	3714      	adds	r7, #20
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr
 8000848:	40023800 	.word	0x40023800

0800084c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000854:	4b06      	ldr	r3, [pc, #24]	@ (8000870 <LL_FLASH_SetLatency+0x24>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	f023 0207 	bic.w	r2, r3, #7
 800085c:	4904      	ldr	r1, [pc, #16]	@ (8000870 <LL_FLASH_SetLatency+0x24>)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	4313      	orrs	r3, r2
 8000862:	600b      	str	r3, [r1, #0]
}
 8000864:	bf00      	nop
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr
 8000870:	40023c00 	.word	0x40023c00

08000874 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000878:	4b04      	ldr	r3, [pc, #16]	@ (800088c <LL_FLASH_GetLatency+0x18>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	f003 0307 	and.w	r3, r3, #7
}
 8000880:	4618      	mov	r0, r3
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	40023c00 	.word	0x40023c00

08000890 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000898:	4b06      	ldr	r3, [pc, #24]	@ (80008b4 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80008a0:	4904      	ldr	r1, [pc, #16]	@ (80008b4 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	4313      	orrs	r3, r2
 80008a6:	600b      	str	r3, [r1, #0]
}
 80008a8:	bf00      	nop
 80008aa:	370c      	adds	r7, #12
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr
 80008b4:	40007000 	.word	0x40007000

080008b8 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the Regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR   VOS       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 80008bc:	4b07      	ldr	r3, [pc, #28]	@ (80008dc <LL_PWR_IsActiveFlag_VOS+0x24>)
 80008be:	685b      	ldr	r3, [r3, #4]
 80008c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80008c8:	bf0c      	ite	eq
 80008ca:	2301      	moveq	r3, #1
 80008cc:	2300      	movne	r3, #0
 80008ce:	b2db      	uxtb	r3, r3
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	40007000 	.word	0x40007000

080008e0 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
 80008e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	685b      	ldr	r3, [r3, #4]
 80008ee:	f023 0210 	bic.w	r2, r3, #16
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	431a      	orrs	r2, r3
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	605a      	str	r2, [r3, #4]
}
 80008fa:	bf00      	nop
 80008fc:	370c      	adds	r7, #12
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr

08000906 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000906:	b480      	push	{r7}
 8000908:	b083      	sub	sp, #12
 800090a:	af00      	add	r7, sp, #0
 800090c:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	68db      	ldr	r3, [r3, #12]
 8000912:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	60da      	str	r2, [r3, #12]
}
 800091a:	bf00      	nop
 800091c:	370c      	adds	r7, #12
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr

08000926 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000926:	b480      	push	{r7}
 8000928:	b083      	sub	sp, #12
 800092a:	af00      	add	r7, sp, #0
 800092c:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	691b      	ldr	r3, [r3, #16]
 8000932:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	695b      	ldr	r3, [r3, #20]
 800093e:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	615a      	str	r2, [r3, #20]
}
 8000946:	bf00      	nop
 8000948:	370c      	adds	r7, #12
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr

08000952 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000952:	b480      	push	{r7}
 8000954:	b083      	sub	sp, #12
 8000956:	af00      	add	r7, sp, #0
 8000958:	6078      	str	r0, [r7, #4]
 800095a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	041a      	lsls	r2, r3, #16
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	619a      	str	r2, [r3, #24]
}
 8000964:	bf00      	nop
 8000966:	370c      	adds	r7, #12
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr

08000970 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000974:	f000 fc0e 	bl	8001194 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000978:	f000 f810 	bl	800099c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800097c:	f000 fa30 	bl	8000de0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000980:	f000 f85c 	bl	8000a3c <MX_ADC1_Init>
  MX_FSMC_Init();
 8000984:	f000 faca 	bl	8000f1c <MX_FSMC_Init>
  MX_SPI2_Init();
 8000988:	f000 f8cc 	bl	8000b24 <MX_SPI2_Init>
  MX_UART4_Init();
 800098c:	f000 f91e 	bl	8000bcc <MX_UART4_Init>
  MX_UART5_Init();
 8000990:	f000 f96e 	bl	8000c70 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8000994:	f000 f9d4 	bl	8000d40 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000998:	bf00      	nop
 800099a:	e7fd      	b.n	8000998 <main+0x28>

0800099c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_3);
 80009a0:	2003      	movs	r0, #3
 80009a2:	f7ff ff53 	bl	800084c <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_3)
 80009a6:	bf00      	nop
 80009a8:	f7ff ff64 	bl	8000874 <LL_FLASH_GetLatency>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b03      	cmp	r3, #3
 80009b0:	d1fa      	bne.n	80009a8 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 80009b2:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80009b6:	f7ff ff6b 	bl	8000890 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSE_Enable();
 80009ba:	f7ff fe33 	bl	8000624 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 80009be:	bf00      	nop
 80009c0:	f7ff fe40 	bl	8000644 <LL_RCC_HSE_IsReady>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b01      	cmp	r3, #1
 80009c8:	d1fa      	bne.n	80009c0 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_15, 144, LL_RCC_PLLP_DIV_2);
 80009ca:	2300      	movs	r3, #0
 80009cc:	2290      	movs	r2, #144	@ 0x90
 80009ce:	210f      	movs	r1, #15
 80009d0:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 80009d4:	f7ff fecc 	bl	8000770 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 80009d8:	f7ff fea6 	bl	8000728 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80009dc:	bf00      	nop
 80009de:	f7ff feb3 	bl	8000748 <LL_RCC_PLL_IsReady>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d1fa      	bne.n	80009de <SystemClock_Config+0x42>
  {

  }
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 80009e8:	bf00      	nop
 80009ea:	f7ff ff65 	bl	80008b8 <LL_PWR_IsActiveFlag_VOS>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d0fa      	beq.n	80009ea <SystemClock_Config+0x4e>
  {
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80009f4:	2000      	movs	r0, #0
 80009f6:	f7ff fe5b 	bl	80006b0 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 80009fa:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 80009fe:	f7ff fe6b 	bl	80006d8 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 8000a02:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000a06:	f7ff fe7b 	bl	8000700 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000a0a:	2002      	movs	r0, #2
 8000a0c:	f7ff fe2e 	bl	800066c <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000a10:	bf00      	nop
 8000a12:	f7ff fe3f 	bl	8000694 <LL_RCC_GetSysClkSource>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b08      	cmp	r3, #8
 8000a1a:	d1fa      	bne.n	8000a12 <SystemClock_Config+0x76>
  {

  }
  LL_SetSystemCoreClock(120000000);
 8000a1c:	4806      	ldr	r0, [pc, #24]	@ (8000a38 <SystemClock_Config+0x9c>)
 8000a1e:	f001 feed 	bl	80027fc <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8000a22:	200f      	movs	r0, #15
 8000a24:	f000 fbd8 	bl	80011d8 <HAL_InitTick>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000a2e:	f000 fad5 	bl	8000fdc <Error_Handler>
  }
}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	07270e00 	.word	0x07270e00

08000a3c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b092      	sub	sp, #72	@ 0x48
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8000a42:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	605a      	str	r2, [r3, #4]
 8000a4c:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8000a4e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	605a      	str	r2, [r3, #4]
 8000a58:	609a      	str	r2, [r3, #8]
 8000a5a:	60da      	str	r2, [r3, #12]
 8000a5c:	611a      	str	r2, [r3, #16]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8000a5e:	f107 0318 	add.w	r3, r7, #24
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	605a      	str	r2, [r3, #4]
 8000a68:	609a      	str	r2, [r3, #8]
 8000a6a:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6c:	463b      	mov	r3, r7
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	605a      	str	r2, [r3, #4]
 8000a74:	609a      	str	r2, [r3, #8]
 8000a76:	60da      	str	r2, [r3, #12]
 8000a78:	611a      	str	r2, [r3, #16]
 8000a7a:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8000a7c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000a80:	f7ff fecc 	bl	800081c <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000a84:	2001      	movs	r0, #1
 8000a86:	f7ff fe99 	bl	80007bc <LL_AHB1_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PA2   ------> ADC1_IN2
  PA3   ------> ADC1_IN3
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8000a8a:	230c      	movs	r3, #12
 8000a8c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000a8e:	2303      	movs	r3, #3
 8000a90:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a92:	2300      	movs	r3, #0
 8000a94:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a96:	463b      	mov	r3, r7
 8000a98:	4619      	mov	r1, r3
 8000a9a:	481e      	ldr	r0, [pc, #120]	@ (8000b14 <MX_ADC1_Init+0xd8>)
 8000a9c:	f001 f995 	bl	8001dca <LL_GPIO_Init>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	643b      	str	r3, [r7, #64]	@ 0x40
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_DISABLE;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	647b      	str	r3, [r7, #68]	@ 0x44
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8000aac:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4819      	ldr	r0, [pc, #100]	@ (8000b18 <MX_ADC1_Init+0xdc>)
 8000ab4:	f000 fef8 	bl	80018a8 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	62bb      	str	r3, [r7, #40]	@ 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8000abc:	2300      	movs	r3, #0
 8000abe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	633b      	str	r3, [r7, #48]	@ 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	637b      	str	r3, [r7, #52]	@ 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	63bb      	str	r3, [r7, #56]	@ 0x38
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8000acc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4811      	ldr	r0, [pc, #68]	@ (8000b18 <MX_ADC1_Init+0xdc>)
 8000ad4:	f000 ff14 	bl	8001900 <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC1, LL_ADC_REG_FLAG_EOC_UNITARY_CONV);
 8000ad8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000adc:	480e      	ldr	r0, [pc, #56]	@ (8000b18 <MX_ADC1_Init+0xdc>)
 8000ade:	f7ff fd2c 	bl	800053a <LL_ADC_REG_SetFlagEndOfConversion>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV2;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8000aea:	f107 0318 	add.w	r3, r7, #24
 8000aee:	4619      	mov	r1, r3
 8000af0:	480a      	ldr	r0, [pc, #40]	@ (8000b1c <MX_ADC1_Init+0xe0>)
 8000af2:	f000 fe91 	bl	8001818 <LL_ADC_CommonInit>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_2);
 8000af6:	4a0a      	ldr	r2, [pc, #40]	@ (8000b20 <MX_ADC1_Init+0xe4>)
 8000af8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000afc:	4806      	ldr	r0, [pc, #24]	@ (8000b18 <MX_ADC1_Init+0xdc>)
 8000afe:	f7ff fcdf 	bl	80004c0 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_3CYCLES);
 8000b02:	2200      	movs	r2, #0
 8000b04:	4906      	ldr	r1, [pc, #24]	@ (8000b20 <MX_ADC1_Init+0xe4>)
 8000b06:	4804      	ldr	r0, [pc, #16]	@ (8000b18 <MX_ADC1_Init+0xdc>)
 8000b08:	f7ff fd2a 	bl	8000560 <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b0c:	bf00      	nop
 8000b0e:	3748      	adds	r7, #72	@ 0x48
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	40020000 	.word	0x40020000
 8000b18:	40012000 	.word	0x40012000
 8000b1c:	40012300 	.word	0x40012300
 8000b20:	02600002 	.word	0x02600002

08000b24 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b090      	sub	sp, #64	@ 0x40
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8000b2a:	f107 0318 	add.w	r3, r7, #24
 8000b2e:	2228      	movs	r2, #40	@ 0x28
 8000b30:	2100      	movs	r1, #0
 8000b32:	4618      	mov	r0, r3
 8000b34:	f002 f84a 	bl	8002bcc <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b38:	463b      	mov	r3, r7
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	605a      	str	r2, [r3, #4]
 8000b40:	609a      	str	r2, [r3, #8]
 8000b42:	60da      	str	r2, [r3, #12]
 8000b44:	611a      	str	r2, [r3, #16]
 8000b46:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8000b48:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000b4c:	f7ff fe4e 	bl	80007ec <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000b50:	2002      	movs	r0, #2
 8000b52:	f7ff fe33 	bl	80007bc <LL_AHB1_GRP1_EnableClock>
  PB12   ------> SPI2_NSS
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12|LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 8000b56:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000b5a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000b60:	2303      	movs	r3, #3
 8000b62:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8000b6c:	2305      	movs	r3, #5
 8000b6e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b70:	463b      	mov	r3, r7
 8000b72:	4619      	mov	r1, r3
 8000b74:	4813      	ldr	r0, [pc, #76]	@ (8000bc4 <MX_SPI2_Init+0xa0>)
 8000b76:	f001 f928 	bl	8001dca <LL_GPIO_Init>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8000b7e:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8000b82:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8000b84:	2300      	movs	r3, #0
 8000b86:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_HARD_OUTPUT;
 8000b90:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8000b94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2;
 8000b96:	2300      	movs	r3, #0
 8000b98:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 8000ba2:	230a      	movs	r3, #10
 8000ba4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8000ba6:	f107 0318 	add.w	r3, r7, #24
 8000baa:	4619      	mov	r1, r3
 8000bac:	4806      	ldr	r0, [pc, #24]	@ (8000bc8 <MX_SPI2_Init+0xa4>)
 8000bae:	f001 faea 	bl	8002186 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	4804      	ldr	r0, [pc, #16]	@ (8000bc8 <MX_SPI2_Init+0xa4>)
 8000bb6:	f7ff fe93 	bl	80008e0 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000bba:	bf00      	nop
 8000bbc:	3740      	adds	r7, #64	@ 0x40
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40020400 	.word	0x40020400
 8000bc8:	40003800 	.word	0x40003800

08000bcc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b08e      	sub	sp, #56	@ 0x38
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART4_Init 0 */

  /* USER CODE END UART4_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000bd2:	f107 031c 	add.w	r3, r7, #28
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	601a      	str	r2, [r3, #0]
 8000bda:	605a      	str	r2, [r3, #4]
 8000bdc:	609a      	str	r2, [r3, #8]
 8000bde:	60da      	str	r2, [r3, #12]
 8000be0:	611a      	str	r2, [r3, #16]
 8000be2:	615a      	str	r2, [r3, #20]
 8000be4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be6:	1d3b      	adds	r3, r7, #4
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	609a      	str	r2, [r3, #8]
 8000bf0:	60da      	str	r2, [r3, #12]
 8000bf2:	611a      	str	r2, [r3, #16]
 8000bf4:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 8000bf6:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8000bfa:	f7ff fdf7 	bl	80007ec <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000bfe:	2004      	movs	r0, #4
 8000c00:	f7ff fddc 	bl	80007bc <LL_AHB1_GRP1_EnableClock>
  /**UART4 GPIO Configuration
  PC10   ------> UART4_TX
  PC11   ------> UART4_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11;
 8000c04:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000c08:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000c0e:	2303      	movs	r3, #3
 8000c10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c16:	2300      	movs	r3, #0
 8000c18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8000c1a:	2308      	movs	r3, #8
 8000c1c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c1e:	1d3b      	adds	r3, r7, #4
 8000c20:	4619      	mov	r1, r3
 8000c22:	4811      	ldr	r0, [pc, #68]	@ (8000c68 <MX_UART4_Init+0x9c>)
 8000c24:	f001 f8d1 	bl	8001dca <LL_GPIO_Init>

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000c28:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000c2c:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000c32:	2300      	movs	r3, #0
 8000c34:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000c36:	2300      	movs	r3, #0
 8000c38:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000c3a:	230c      	movs	r3, #12
 8000c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000c42:	2300      	movs	r3, #0
 8000c44:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(UART4, &USART_InitStruct);
 8000c46:	f107 031c 	add.w	r3, r7, #28
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4807      	ldr	r0, [pc, #28]	@ (8000c6c <MX_UART4_Init+0xa0>)
 8000c4e:	f001 fd55 	bl	80026fc <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART4);
 8000c52:	4806      	ldr	r0, [pc, #24]	@ (8000c6c <MX_UART4_Init+0xa0>)
 8000c54:	f7ff fe67 	bl	8000926 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART4);
 8000c58:	4804      	ldr	r0, [pc, #16]	@ (8000c6c <MX_UART4_Init+0xa0>)
 8000c5a:	f7ff fe54 	bl	8000906 <LL_USART_Enable>
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000c5e:	bf00      	nop
 8000c60:	3738      	adds	r7, #56	@ 0x38
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40020800 	.word	0x40020800
 8000c6c:	40004c00 	.word	0x40004c00

08000c70 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b08e      	sub	sp, #56	@ 0x38
 8000c74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART5_Init 0 */

  /* USER CODE END UART5_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000c76:	f107 031c 	add.w	r3, r7, #28
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	605a      	str	r2, [r3, #4]
 8000c80:	609a      	str	r2, [r3, #8]
 8000c82:	60da      	str	r2, [r3, #12]
 8000c84:	611a      	str	r2, [r3, #16]
 8000c86:	615a      	str	r2, [r3, #20]
 8000c88:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8a:	1d3b      	adds	r3, r7, #4
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
 8000c96:	611a      	str	r2, [r3, #16]
 8000c98:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART5);
 8000c9a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000c9e:	f7ff fda5 	bl	80007ec <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000ca2:	2004      	movs	r0, #4
 8000ca4:	f7ff fd8a 	bl	80007bc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8000ca8:	2008      	movs	r0, #8
 8000caa:	f7ff fd87 	bl	80007bc <LL_AHB1_GRP1_EnableClock>
  /**UART5 GPIO Configuration
  PC12   ------> UART5_TX
  PD2   ------> UART5_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 8000cae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cb2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb8:	2303      	movs	r3, #3
 8000cba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8000cc4:	2308      	movs	r3, #8
 8000cc6:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cc8:	1d3b      	adds	r3, r7, #4
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4819      	ldr	r0, [pc, #100]	@ (8000d34 <MX_UART5_Init+0xc4>)
 8000cce:	f001 f87c 	bl	8001dca <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8000cd2:	2304      	movs	r3, #4
 8000cd4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000cda:	2303      	movs	r3, #3
 8000cdc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8000ce6:	2308      	movs	r3, #8
 8000ce8:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cea:	1d3b      	adds	r3, r7, #4
 8000cec:	4619      	mov	r1, r3
 8000cee:	4812      	ldr	r0, [pc, #72]	@ (8000d38 <MX_UART5_Init+0xc8>)
 8000cf0:	f001 f86b 	bl	8001dca <LL_GPIO_Init>

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000cf4:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000cf8:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000d02:	2300      	movs	r3, #0
 8000d04:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000d06:	230c      	movs	r3, #12
 8000d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(UART5, &USART_InitStruct);
 8000d12:	f107 031c 	add.w	r3, r7, #28
 8000d16:	4619      	mov	r1, r3
 8000d18:	4808      	ldr	r0, [pc, #32]	@ (8000d3c <MX_UART5_Init+0xcc>)
 8000d1a:	f001 fcef 	bl	80026fc <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART5);
 8000d1e:	4807      	ldr	r0, [pc, #28]	@ (8000d3c <MX_UART5_Init+0xcc>)
 8000d20:	f7ff fe01 	bl	8000926 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART5);
 8000d24:	4805      	ldr	r0, [pc, #20]	@ (8000d3c <MX_UART5_Init+0xcc>)
 8000d26:	f7ff fdee 	bl	8000906 <LL_USART_Enable>
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000d2a:	bf00      	nop
 8000d2c:	3738      	adds	r7, #56	@ 0x38
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40020800 	.word	0x40020800
 8000d38:	40020c00 	.word	0x40020c00
 8000d3c:	40005000 	.word	0x40005000

08000d40 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b08e      	sub	sp, #56	@ 0x38
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000d46:	f107 031c 	add.w	r3, r7, #28
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	605a      	str	r2, [r3, #4]
 8000d50:	609a      	str	r2, [r3, #8]
 8000d52:	60da      	str	r2, [r3, #12]
 8000d54:	611a      	str	r2, [r3, #16]
 8000d56:	615a      	str	r2, [r3, #20]
 8000d58:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5a:	1d3b      	adds	r3, r7, #4
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
 8000d68:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8000d6a:	2010      	movs	r0, #16
 8000d6c:	f7ff fd56 	bl	800081c <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000d70:	2001      	movs	r0, #1
 8000d72:	f7ff fd23 	bl	80007bc <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8000d76:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000d7a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000d80:	2303      	movs	r3, #3
 8000d82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000d8c:	2307      	movs	r3, #7
 8000d8e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d90:	1d3b      	adds	r3, r7, #4
 8000d92:	4619      	mov	r1, r3
 8000d94:	4810      	ldr	r0, [pc, #64]	@ (8000dd8 <MX_USART1_UART_Init+0x98>)
 8000d96:	f001 f818 	bl	8001dca <LL_GPIO_Init>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000d9a:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000d9e:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000da0:	2300      	movs	r3, #0
 8000da2:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000da4:	2300      	movs	r3, #0
 8000da6:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000da8:	2300      	movs	r3, #0
 8000daa:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000dac:	230c      	movs	r3, #12
 8000dae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000db0:	2300      	movs	r3, #0
 8000db2:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000db4:	2300      	movs	r3, #0
 8000db6:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 8000db8:	f107 031c 	add.w	r3, r7, #28
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4807      	ldr	r0, [pc, #28]	@ (8000ddc <MX_USART1_UART_Init+0x9c>)
 8000dc0:	f001 fc9c 	bl	80026fc <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8000dc4:	4805      	ldr	r0, [pc, #20]	@ (8000ddc <MX_USART1_UART_Init+0x9c>)
 8000dc6:	f7ff fdae 	bl	8000926 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8000dca:	4804      	ldr	r0, [pc, #16]	@ (8000ddc <MX_USART1_UART_Init+0x9c>)
 8000dcc:	f7ff fd9b 	bl	8000906 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000dd0:	bf00      	nop
 8000dd2:	3738      	adds	r7, #56	@ 0x38
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40020000 	.word	0x40020000
 8000ddc:	40011000 	.word	0x40011000

08000de0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de6:	463b      	mov	r3, r7
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]
 8000df2:	611a      	str	r2, [r3, #16]
 8000df4:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 8000df6:	2010      	movs	r0, #16
 8000df8:	f7ff fce0 	bl	80007bc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000dfc:	2004      	movs	r0, #4
 8000dfe:	f7ff fcdd 	bl	80007bc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8000e02:	2080      	movs	r0, #128	@ 0x80
 8000e04:	f7ff fcda 	bl	80007bc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000e08:	2001      	movs	r0, #1
 8000e0a:	f7ff fcd7 	bl	80007bc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000e0e:	2002      	movs	r0, #2
 8000e10:	f7ff fcd4 	bl	80007bc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8000e14:	2008      	movs	r0, #8
 8000e16:	f7ff fcd1 	bl	80007bc <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOE, ADC1_IN2_S2_Pin|ADC1_IN2_S1_Pin|ADC1_IN2_S0_Pin|ADC1_IN1_S3_Pin
 8000e1a:	217f      	movs	r1, #127	@ 0x7f
 8000e1c:	483a      	ldr	r0, [pc, #232]	@ (8000f08 <MX_GPIO_Init+0x128>)
 8000e1e:	f7ff fd98 	bl	8000952 <LL_GPIO_ResetOutputPin>
                          |ADC1_IN1_S2_Pin|BAL_1_Pin|ADC1_IN2_S3_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, ADC1_IN1_S1_Pin|ADC1_IN1_S0_Pin|LED_TEST_Pin|LED_STATUS_Pin
 8000e22:	f246 31cf 	movw	r1, #25551	@ 0x63cf
 8000e26:	4839      	ldr	r0, [pc, #228]	@ (8000f0c <MX_GPIO_Init+0x12c>)
 8000e28:	f7ff fd93 	bl	8000952 <LL_GPIO_ResetOutputPin>
                          |DISCHARGE_Pin|CHARGE_Pin|BAL_16_Pin|BAL_15_Pin
                          |BAL_14_Pin|BAL_13_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOD, CONTROL_BACKLIGHT_Pin|BAL_9_Pin);
 8000e2c:	f242 0108 	movw	r1, #8200	@ 0x2008
 8000e30:	4837      	ldr	r0, [pc, #220]	@ (8000f10 <MX_GPIO_Init+0x130>)
 8000e32:	f7ff fd8e 	bl	8000952 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, BAL_12_Pin|BAL_11_Pin|BAL_10_Pin|RS485_CONTROL_Pin);
 8000e36:	f44f 4119 	mov.w	r1, #39168	@ 0x9900
 8000e3a:	4836      	ldr	r0, [pc, #216]	@ (8000f14 <MX_GPIO_Init+0x134>)
 8000e3c:	f7ff fd89 	bl	8000952 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, BAL_8_Pin|BAL_7_Pin|BAL_6_Pin|BAL_5_Pin
 8000e40:	f44f 717e 	mov.w	r1, #1016	@ 0x3f8
 8000e44:	4834      	ldr	r0, [pc, #208]	@ (8000f18 <MX_GPIO_Init+0x138>)
 8000e46:	f7ff fd84 	bl	8000952 <LL_GPIO_ResetOutputPin>
                          |BAL_4_Pin|BAL_3_Pin|BAL_2_Pin);

  /**/
  GPIO_InitStruct.Pin = ADC1_IN2_S2_Pin|ADC1_IN2_S1_Pin|ADC1_IN2_S0_Pin|ADC1_IN1_S3_Pin
 8000e4a:	237f      	movs	r3, #127	@ 0x7f
 8000e4c:	603b      	str	r3, [r7, #0]
                          |ADC1_IN1_S2_Pin|BAL_1_Pin|ADC1_IN2_S3_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e52:	2300      	movs	r3, #0
 8000e54:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e5e:	463b      	mov	r3, r7
 8000e60:	4619      	mov	r1, r3
 8000e62:	4829      	ldr	r0, [pc, #164]	@ (8000f08 <MX_GPIO_Init+0x128>)
 8000e64:	f000 ffb1 	bl	8001dca <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ADC1_IN1_S1_Pin|ADC1_IN1_S0_Pin|LED_TEST_Pin|LED_STATUS_Pin
 8000e68:	f246 33cf 	movw	r3, #25551	@ 0x63cf
 8000e6c:	603b      	str	r3, [r7, #0]
                          |DISCHARGE_Pin|CHARGE_Pin|BAL_16_Pin|BAL_15_Pin
                          |BAL_14_Pin|BAL_13_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e72:	2300      	movs	r3, #0
 8000e74:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e7e:	463b      	mov	r3, r7
 8000e80:	4619      	mov	r1, r3
 8000e82:	4822      	ldr	r0, [pc, #136]	@ (8000f0c <MX_GPIO_Init+0x12c>)
 8000e84:	f000 ffa1 	bl	8001dca <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 8000e88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e8c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e92:	2300      	movs	r3, #0
 8000e94:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000e96:	463b      	mov	r3, r7
 8000e98:	4619      	mov	r1, r3
 8000e9a:	481d      	ldr	r0, [pc, #116]	@ (8000f10 <MX_GPIO_Init+0x130>)
 8000e9c:	f000 ff95 	bl	8001dca <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CONTROL_BACKLIGHT_Pin|BAL_9_Pin;
 8000ea0:	f242 0308 	movw	r3, #8200	@ 0x2008
 8000ea4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eb6:	463b      	mov	r3, r7
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4815      	ldr	r0, [pc, #84]	@ (8000f10 <MX_GPIO_Init+0x130>)
 8000ebc:	f000 ff85 	bl	8001dca <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BAL_12_Pin|BAL_11_Pin|BAL_10_Pin|RS485_CONTROL_Pin;
 8000ec0:	f44f 4319 	mov.w	r3, #39168	@ 0x9900
 8000ec4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed6:	463b      	mov	r3, r7
 8000ed8:	4619      	mov	r1, r3
 8000eda:	480e      	ldr	r0, [pc, #56]	@ (8000f14 <MX_GPIO_Init+0x134>)
 8000edc:	f000 ff75 	bl	8001dca <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BAL_8_Pin|BAL_7_Pin|BAL_6_Pin|BAL_5_Pin
 8000ee0:	f44f 737e 	mov.w	r3, #1016	@ 0x3f8
 8000ee4:	603b      	str	r3, [r7, #0]
                          |BAL_4_Pin|BAL_3_Pin|BAL_2_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000eea:	2300      	movs	r3, #0
 8000eec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef6:	463b      	mov	r3, r7
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4807      	ldr	r0, [pc, #28]	@ (8000f18 <MX_GPIO_Init+0x138>)
 8000efc:	f000 ff65 	bl	8001dca <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f00:	bf00      	nop
 8000f02:	3718      	adds	r7, #24
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40021000 	.word	0x40021000
 8000f0c:	40020800 	.word	0x40020800
 8000f10:	40020c00 	.word	0x40020c00
 8000f14:	40020000 	.word	0x40020000
 8000f18:	40020400 	.word	0x40020400

08000f1c <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b088      	sub	sp, #32
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000f22:	1d3b      	adds	r3, r7, #4
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	611a      	str	r2, [r3, #16]
 8000f30:	615a      	str	r2, [r3, #20]
 8000f32:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000f34:	4b27      	ldr	r3, [pc, #156]	@ (8000fd4 <MX_FSMC_Init+0xb8>)
 8000f36:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 8000f3a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000f3c:	4b25      	ldr	r3, [pc, #148]	@ (8000fd4 <MX_FSMC_Init+0xb8>)
 8000f3e:	4a26      	ldr	r2, [pc, #152]	@ (8000fd8 <MX_FSMC_Init+0xbc>)
 8000f40:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000f42:	4b24      	ldr	r3, [pc, #144]	@ (8000fd4 <MX_FSMC_Init+0xb8>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000f48:	4b22      	ldr	r3, [pc, #136]	@ (8000fd4 <MX_FSMC_Init+0xb8>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000f4e:	4b21      	ldr	r3, [pc, #132]	@ (8000fd4 <MX_FSMC_Init+0xb8>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000f54:	4b1f      	ldr	r3, [pc, #124]	@ (8000fd4 <MX_FSMC_Init+0xb8>)
 8000f56:	2210      	movs	r2, #16
 8000f58:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000f5a:	4b1e      	ldr	r3, [pc, #120]	@ (8000fd4 <MX_FSMC_Init+0xb8>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000f60:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd4 <MX_FSMC_Init+0xb8>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000f66:	4b1b      	ldr	r3, [pc, #108]	@ (8000fd4 <MX_FSMC_Init+0xb8>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000f6c:	4b19      	ldr	r3, [pc, #100]	@ (8000fd4 <MX_FSMC_Init+0xb8>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000f72:	4b18      	ldr	r3, [pc, #96]	@ (8000fd4 <MX_FSMC_Init+0xb8>)
 8000f74:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000f78:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000f7a:	4b16      	ldr	r3, [pc, #88]	@ (8000fd4 <MX_FSMC_Init+0xb8>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000f80:	4b14      	ldr	r3, [pc, #80]	@ (8000fd4 <MX_FSMC_Init+0xb8>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000f86:	4b13      	ldr	r3, [pc, #76]	@ (8000fd4 <MX_FSMC_Init+0xb8>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000f8c:	4b11      	ldr	r3, [pc, #68]	@ (8000fd4 <MX_FSMC_Init+0xb8>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000f92:	4b10      	ldr	r3, [pc, #64]	@ (8000fd4 <MX_FSMC_Init+0xb8>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 0;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8000f9c:	230f      	movs	r3, #15
 8000f9e:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 1;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 0;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000fa8:	2310      	movs	r3, #16
 8000faa:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000fac:	2311      	movs	r3, #17
 8000fae:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000fb4:	1d3b      	adds	r3, r7, #4
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4806      	ldr	r0, [pc, #24]	@ (8000fd4 <MX_FSMC_Init+0xb8>)
 8000fbc:	f000 fbbe 	bl	800173c <HAL_SRAM_Init>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 8000fc6:	f000 f809 	bl	8000fdc <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000fca:	bf00      	nop
 8000fcc:	3720      	adds	r7, #32
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000028 	.word	0x20000028
 8000fd8:	a0000104 	.word	0xa0000104

08000fdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fe0:	b672      	cpsid	i
}
 8000fe2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fe4:	bf00      	nop
 8000fe6:	e7fd      	b.n	8000fe4 <Error_Handler+0x8>

08000fe8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	607b      	str	r3, [r7, #4]
 8000ff2:	4b10      	ldr	r3, [pc, #64]	@ (8001034 <HAL_MspInit+0x4c>)
 8000ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ff6:	4a0f      	ldr	r2, [pc, #60]	@ (8001034 <HAL_MspInit+0x4c>)
 8000ff8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ffc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ffe:	4b0d      	ldr	r3, [pc, #52]	@ (8001034 <HAL_MspInit+0x4c>)
 8001000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001002:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001006:	607b      	str	r3, [r7, #4]
 8001008:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	603b      	str	r3, [r7, #0]
 800100e:	4b09      	ldr	r3, [pc, #36]	@ (8001034 <HAL_MspInit+0x4c>)
 8001010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001012:	4a08      	ldr	r2, [pc, #32]	@ (8001034 <HAL_MspInit+0x4c>)
 8001014:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001018:	6413      	str	r3, [r2, #64]	@ 0x40
 800101a:	4b06      	ldr	r3, [pc, #24]	@ (8001034 <HAL_MspInit+0x4c>)
 800101c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800101e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001022:	603b      	str	r3, [r7, #0]
 8001024:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001026:	bf00      	nop
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	40023800 	.word	0x40023800

08001038 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800103e:	1d3b      	adds	r3, r7, #4
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 800104c:	4b1c      	ldr	r3, [pc, #112]	@ (80010c0 <HAL_FSMC_MspInit+0x88>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d131      	bne.n	80010b8 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8001054:	4b1a      	ldr	r3, [pc, #104]	@ (80010c0 <HAL_FSMC_MspInit+0x88>)
 8001056:	2201      	movs	r2, #1
 8001058:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	603b      	str	r3, [r7, #0]
 800105e:	4b19      	ldr	r3, [pc, #100]	@ (80010c4 <HAL_FSMC_MspInit+0x8c>)
 8001060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001062:	4a18      	ldr	r2, [pc, #96]	@ (80010c4 <HAL_FSMC_MspInit+0x8c>)
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	6393      	str	r3, [r2, #56]	@ 0x38
 800106a:	4b16      	ldr	r3, [pc, #88]	@ (80010c4 <HAL_FSMC_MspInit+0x8c>)
 800106c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	603b      	str	r3, [r7, #0]
 8001074:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001076:	f64f 7380 	movw	r3, #65408	@ 0xff80
 800107a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107c:	2302      	movs	r3, #2
 800107e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	2300      	movs	r3, #0
 8001082:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001084:	2303      	movs	r3, #3
 8001086:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001088:	230c      	movs	r3, #12
 800108a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800108c:	1d3b      	adds	r3, r7, #4
 800108e:	4619      	mov	r1, r3
 8001090:	480d      	ldr	r0, [pc, #52]	@ (80010c8 <HAL_FSMC_MspInit+0x90>)
 8001092:	f000 f9b7 	bl	8001404 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001096:	f64c 73b3 	movw	r3, #53171	@ 0xcfb3
 800109a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109c:	2302      	movs	r3, #2
 800109e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a4:	2303      	movs	r3, #3
 80010a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80010a8:	230c      	movs	r3, #12
 80010aa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010ac:	1d3b      	adds	r3, r7, #4
 80010ae:	4619      	mov	r1, r3
 80010b0:	4806      	ldr	r0, [pc, #24]	@ (80010cc <HAL_FSMC_MspInit+0x94>)
 80010b2:	f000 f9a7 	bl	8001404 <HAL_GPIO_Init>
 80010b6:	e000      	b.n	80010ba <HAL_FSMC_MspInit+0x82>
    return;
 80010b8:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80010ba:	3718      	adds	r7, #24
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20000078 	.word	0x20000078
 80010c4:	40023800 	.word	0x40023800
 80010c8:	40021000 	.word	0x40021000
 80010cc:	40020c00 	.word	0x40020c00

080010d0 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80010d8:	f7ff ffae 	bl	8001038 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80010dc:	bf00      	nop
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010e8:	bf00      	nop
 80010ea:	e7fd      	b.n	80010e8 <NMI_Handler+0x4>

080010ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010f0:	bf00      	nop
 80010f2:	e7fd      	b.n	80010f0 <HardFault_Handler+0x4>

080010f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010f8:	bf00      	nop
 80010fa:	e7fd      	b.n	80010f8 <MemManage_Handler+0x4>

080010fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001100:	bf00      	nop
 8001102:	e7fd      	b.n	8001100 <BusFault_Handler+0x4>

08001104 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001108:	bf00      	nop
 800110a:	e7fd      	b.n	8001108 <UsageFault_Handler+0x4>

0800110c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
	...

0800111c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001120:	4b06      	ldr	r3, [pc, #24]	@ (800113c <SystemInit+0x20>)
 8001122:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001126:	4a05      	ldr	r2, [pc, #20]	@ (800113c <SystemInit+0x20>)
 8001128:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800112c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001140:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001178 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001144:	f7ff ffea 	bl	800111c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001148:	480c      	ldr	r0, [pc, #48]	@ (800117c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800114a:	490d      	ldr	r1, [pc, #52]	@ (8001180 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800114c:	4a0d      	ldr	r2, [pc, #52]	@ (8001184 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800114e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001150:	e002      	b.n	8001158 <LoopCopyDataInit>

08001152 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001152:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001154:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001156:	3304      	adds	r3, #4

08001158 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001158:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800115a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800115c:	d3f9      	bcc.n	8001152 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800115e:	4a0a      	ldr	r2, [pc, #40]	@ (8001188 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001160:	4c0a      	ldr	r4, [pc, #40]	@ (800118c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001162:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001164:	e001      	b.n	800116a <LoopFillZerobss>

08001166 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001166:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001168:	3204      	adds	r2, #4

0800116a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800116a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800116c:	d3fb      	bcc.n	8001166 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800116e:	f001 fd35 	bl	8002bdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001172:	f7ff fbfd 	bl	8000970 <main>
  bx  lr    
 8001176:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001178:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800117c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001180:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001184:	08002c64 	.word	0x08002c64
  ldr r2, =_sbss
 8001188:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800118c:	20000108 	.word	0x20000108

08001190 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001190:	e7fe      	b.n	8001190 <ADC_IRQHandler>
	...

08001194 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001198:	4b0e      	ldr	r3, [pc, #56]	@ (80011d4 <HAL_Init+0x40>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a0d      	ldr	r2, [pc, #52]	@ (80011d4 <HAL_Init+0x40>)
 800119e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011a4:	4b0b      	ldr	r3, [pc, #44]	@ (80011d4 <HAL_Init+0x40>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a0a      	ldr	r2, [pc, #40]	@ (80011d4 <HAL_Init+0x40>)
 80011aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011b0:	4b08      	ldr	r3, [pc, #32]	@ (80011d4 <HAL_Init+0x40>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a07      	ldr	r2, [pc, #28]	@ (80011d4 <HAL_Init+0x40>)
 80011b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011bc:	2003      	movs	r0, #3
 80011be:	f000 f8ed 	bl	800139c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011c2:	200f      	movs	r0, #15
 80011c4:	f000 f808 	bl	80011d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011c8:	f7ff ff0e 	bl	8000fe8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011cc:	2300      	movs	r3, #0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40023c00 	.word	0x40023c00

080011d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011e0:	4b12      	ldr	r3, [pc, #72]	@ (800122c <HAL_InitTick+0x54>)
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	4b12      	ldr	r3, [pc, #72]	@ (8001230 <HAL_InitTick+0x58>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	4619      	mov	r1, r3
 80011ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80011f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011f6:	4618      	mov	r0, r3
 80011f8:	f000 f8f7 	bl	80013ea <HAL_SYSTICK_Config>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e00e      	b.n	8001224 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2b0f      	cmp	r3, #15
 800120a:	d80a      	bhi.n	8001222 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800120c:	2200      	movs	r2, #0
 800120e:	6879      	ldr	r1, [r7, #4]
 8001210:	f04f 30ff 	mov.w	r0, #4294967295
 8001214:	f000 f8cd 	bl	80013b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001218:	4a06      	ldr	r2, [pc, #24]	@ (8001234 <HAL_InitTick+0x5c>)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800121e:	2300      	movs	r3, #0
 8001220:	e000      	b.n	8001224 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
}
 8001224:	4618      	mov	r0, r3
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	20000000 	.word	0x20000000
 8001230:	20000008 	.word	0x20000008
 8001234:	20000004 	.word	0x20000004

08001238 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001238:	b480      	push	{r7}
 800123a:	b085      	sub	sp, #20
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f003 0307 	and.w	r3, r3, #7
 8001246:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001248:	4b0c      	ldr	r3, [pc, #48]	@ (800127c <__NVIC_SetPriorityGrouping+0x44>)
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800124e:	68ba      	ldr	r2, [r7, #8]
 8001250:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001254:	4013      	ands	r3, r2
 8001256:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001260:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001264:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001268:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800126a:	4a04      	ldr	r2, [pc, #16]	@ (800127c <__NVIC_SetPriorityGrouping+0x44>)
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	60d3      	str	r3, [r2, #12]
}
 8001270:	bf00      	nop
 8001272:	3714      	adds	r7, #20
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001284:	4b04      	ldr	r3, [pc, #16]	@ (8001298 <__NVIC_GetPriorityGrouping+0x18>)
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	0a1b      	lsrs	r3, r3, #8
 800128a:	f003 0307 	and.w	r3, r3, #7
}
 800128e:	4618      	mov	r0, r3
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr
 8001298:	e000ed00 	.word	0xe000ed00

0800129c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	6039      	str	r1, [r7, #0]
 80012a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	db0a      	blt.n	80012c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	b2da      	uxtb	r2, r3
 80012b4:	490c      	ldr	r1, [pc, #48]	@ (80012e8 <__NVIC_SetPriority+0x4c>)
 80012b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ba:	0112      	lsls	r2, r2, #4
 80012bc:	b2d2      	uxtb	r2, r2
 80012be:	440b      	add	r3, r1
 80012c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012c4:	e00a      	b.n	80012dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	b2da      	uxtb	r2, r3
 80012ca:	4908      	ldr	r1, [pc, #32]	@ (80012ec <__NVIC_SetPriority+0x50>)
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	f003 030f 	and.w	r3, r3, #15
 80012d2:	3b04      	subs	r3, #4
 80012d4:	0112      	lsls	r2, r2, #4
 80012d6:	b2d2      	uxtb	r2, r2
 80012d8:	440b      	add	r3, r1
 80012da:	761a      	strb	r2, [r3, #24]
}
 80012dc:	bf00      	nop
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	e000e100 	.word	0xe000e100
 80012ec:	e000ed00 	.word	0xe000ed00

080012f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b089      	sub	sp, #36	@ 0x24
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	f003 0307 	and.w	r3, r3, #7
 8001302:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	f1c3 0307 	rsb	r3, r3, #7
 800130a:	2b04      	cmp	r3, #4
 800130c:	bf28      	it	cs
 800130e:	2304      	movcs	r3, #4
 8001310:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	3304      	adds	r3, #4
 8001316:	2b06      	cmp	r3, #6
 8001318:	d902      	bls.n	8001320 <NVIC_EncodePriority+0x30>
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	3b03      	subs	r3, #3
 800131e:	e000      	b.n	8001322 <NVIC_EncodePriority+0x32>
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001324:	f04f 32ff 	mov.w	r2, #4294967295
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	43da      	mvns	r2, r3
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	401a      	ands	r2, r3
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001338:	f04f 31ff 	mov.w	r1, #4294967295
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	fa01 f303 	lsl.w	r3, r1, r3
 8001342:	43d9      	mvns	r1, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001348:	4313      	orrs	r3, r2
         );
}
 800134a:	4618      	mov	r0, r3
 800134c:	3724      	adds	r7, #36	@ 0x24
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
	...

08001358 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	3b01      	subs	r3, #1
 8001364:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001368:	d301      	bcc.n	800136e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800136a:	2301      	movs	r3, #1
 800136c:	e00f      	b.n	800138e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800136e:	4a0a      	ldr	r2, [pc, #40]	@ (8001398 <SysTick_Config+0x40>)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	3b01      	subs	r3, #1
 8001374:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001376:	210f      	movs	r1, #15
 8001378:	f04f 30ff 	mov.w	r0, #4294967295
 800137c:	f7ff ff8e 	bl	800129c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001380:	4b05      	ldr	r3, [pc, #20]	@ (8001398 <SysTick_Config+0x40>)
 8001382:	2200      	movs	r2, #0
 8001384:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001386:	4b04      	ldr	r3, [pc, #16]	@ (8001398 <SysTick_Config+0x40>)
 8001388:	2207      	movs	r2, #7
 800138a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	e000e010 	.word	0xe000e010

0800139c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f7ff ff47 	bl	8001238 <__NVIC_SetPriorityGrouping>
}
 80013aa:	bf00      	nop
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b086      	sub	sp, #24
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	4603      	mov	r3, r0
 80013ba:	60b9      	str	r1, [r7, #8]
 80013bc:	607a      	str	r2, [r7, #4]
 80013be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013c0:	2300      	movs	r3, #0
 80013c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013c4:	f7ff ff5c 	bl	8001280 <__NVIC_GetPriorityGrouping>
 80013c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	68b9      	ldr	r1, [r7, #8]
 80013ce:	6978      	ldr	r0, [r7, #20]
 80013d0:	f7ff ff8e 	bl	80012f0 <NVIC_EncodePriority>
 80013d4:	4602      	mov	r2, r0
 80013d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013da:	4611      	mov	r1, r2
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff ff5d 	bl	800129c <__NVIC_SetPriority>
}
 80013e2:	bf00      	nop
 80013e4:	3718      	adds	r7, #24
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b082      	sub	sp, #8
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f7ff ffb0 	bl	8001358 <SysTick_Config>
 80013f8:	4603      	mov	r3, r0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
	...

08001404 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001404:	b480      	push	{r7}
 8001406:	b089      	sub	sp, #36	@ 0x24
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800140e:	2300      	movs	r3, #0
 8001410:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001412:	2300      	movs	r3, #0
 8001414:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001416:	2300      	movs	r3, #0
 8001418:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800141a:	2300      	movs	r3, #0
 800141c:	61fb      	str	r3, [r7, #28]
 800141e:	e16b      	b.n	80016f8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001420:	2201      	movs	r2, #1
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	697a      	ldr	r2, [r7, #20]
 8001430:	4013      	ands	r3, r2
 8001432:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	429a      	cmp	r2, r3
 800143a:	f040 815a 	bne.w	80016f2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f003 0303 	and.w	r3, r3, #3
 8001446:	2b01      	cmp	r3, #1
 8001448:	d005      	beq.n	8001456 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001452:	2b02      	cmp	r3, #2
 8001454:	d130      	bne.n	80014b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	2203      	movs	r2, #3
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	43db      	mvns	r3, r3
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	4013      	ands	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	68da      	ldr	r2, [r3, #12]
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	4313      	orrs	r3, r2
 800147e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800148c:	2201      	movs	r2, #1
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	43db      	mvns	r3, r3
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	4013      	ands	r3, r2
 800149a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	091b      	lsrs	r3, r3, #4
 80014a2:	f003 0201 	and.w	r2, r3, #1
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f003 0303 	and.w	r3, r3, #3
 80014c0:	2b03      	cmp	r3, #3
 80014c2:	d017      	beq.n	80014f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	2203      	movs	r2, #3
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	43db      	mvns	r3, r3
 80014d6:	69ba      	ldr	r2, [r7, #24]
 80014d8:	4013      	ands	r3, r2
 80014da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	689a      	ldr	r2, [r3, #8]
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f003 0303 	and.w	r3, r3, #3
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d123      	bne.n	8001548 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	08da      	lsrs	r2, r3, #3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	3208      	adds	r2, #8
 8001508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800150c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	f003 0307 	and.w	r3, r3, #7
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	220f      	movs	r2, #15
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	43db      	mvns	r3, r3
 800151e:	69ba      	ldr	r2, [r7, #24]
 8001520:	4013      	ands	r3, r2
 8001522:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	691a      	ldr	r2, [r3, #16]
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	f003 0307 	and.w	r3, r3, #7
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	4313      	orrs	r3, r2
 8001538:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	08da      	lsrs	r2, r3, #3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	3208      	adds	r2, #8
 8001542:	69b9      	ldr	r1, [r7, #24]
 8001544:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	2203      	movs	r2, #3
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	43db      	mvns	r3, r3
 800155a:	69ba      	ldr	r2, [r7, #24]
 800155c:	4013      	ands	r3, r2
 800155e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f003 0203 	and.w	r2, r3, #3
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	4313      	orrs	r3, r2
 8001574:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001584:	2b00      	cmp	r3, #0
 8001586:	f000 80b4 	beq.w	80016f2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	4b60      	ldr	r3, [pc, #384]	@ (8001710 <HAL_GPIO_Init+0x30c>)
 8001590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001592:	4a5f      	ldr	r2, [pc, #380]	@ (8001710 <HAL_GPIO_Init+0x30c>)
 8001594:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001598:	6453      	str	r3, [r2, #68]	@ 0x44
 800159a:	4b5d      	ldr	r3, [pc, #372]	@ (8001710 <HAL_GPIO_Init+0x30c>)
 800159c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800159e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015a6:	4a5b      	ldr	r2, [pc, #364]	@ (8001714 <HAL_GPIO_Init+0x310>)
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	089b      	lsrs	r3, r3, #2
 80015ac:	3302      	adds	r3, #2
 80015ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	f003 0303 	and.w	r3, r3, #3
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	220f      	movs	r2, #15
 80015be:	fa02 f303 	lsl.w	r3, r2, r3
 80015c2:	43db      	mvns	r3, r3
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	4013      	ands	r3, r2
 80015c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a52      	ldr	r2, [pc, #328]	@ (8001718 <HAL_GPIO_Init+0x314>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d02b      	beq.n	800162a <HAL_GPIO_Init+0x226>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a51      	ldr	r2, [pc, #324]	@ (800171c <HAL_GPIO_Init+0x318>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d025      	beq.n	8001626 <HAL_GPIO_Init+0x222>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a50      	ldr	r2, [pc, #320]	@ (8001720 <HAL_GPIO_Init+0x31c>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d01f      	beq.n	8001622 <HAL_GPIO_Init+0x21e>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a4f      	ldr	r2, [pc, #316]	@ (8001724 <HAL_GPIO_Init+0x320>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d019      	beq.n	800161e <HAL_GPIO_Init+0x21a>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a4e      	ldr	r2, [pc, #312]	@ (8001728 <HAL_GPIO_Init+0x324>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d013      	beq.n	800161a <HAL_GPIO_Init+0x216>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a4d      	ldr	r2, [pc, #308]	@ (800172c <HAL_GPIO_Init+0x328>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d00d      	beq.n	8001616 <HAL_GPIO_Init+0x212>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a4c      	ldr	r2, [pc, #304]	@ (8001730 <HAL_GPIO_Init+0x32c>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d007      	beq.n	8001612 <HAL_GPIO_Init+0x20e>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4a4b      	ldr	r2, [pc, #300]	@ (8001734 <HAL_GPIO_Init+0x330>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d101      	bne.n	800160e <HAL_GPIO_Init+0x20a>
 800160a:	2307      	movs	r3, #7
 800160c:	e00e      	b.n	800162c <HAL_GPIO_Init+0x228>
 800160e:	2308      	movs	r3, #8
 8001610:	e00c      	b.n	800162c <HAL_GPIO_Init+0x228>
 8001612:	2306      	movs	r3, #6
 8001614:	e00a      	b.n	800162c <HAL_GPIO_Init+0x228>
 8001616:	2305      	movs	r3, #5
 8001618:	e008      	b.n	800162c <HAL_GPIO_Init+0x228>
 800161a:	2304      	movs	r3, #4
 800161c:	e006      	b.n	800162c <HAL_GPIO_Init+0x228>
 800161e:	2303      	movs	r3, #3
 8001620:	e004      	b.n	800162c <HAL_GPIO_Init+0x228>
 8001622:	2302      	movs	r3, #2
 8001624:	e002      	b.n	800162c <HAL_GPIO_Init+0x228>
 8001626:	2301      	movs	r3, #1
 8001628:	e000      	b.n	800162c <HAL_GPIO_Init+0x228>
 800162a:	2300      	movs	r3, #0
 800162c:	69fa      	ldr	r2, [r7, #28]
 800162e:	f002 0203 	and.w	r2, r2, #3
 8001632:	0092      	lsls	r2, r2, #2
 8001634:	4093      	lsls	r3, r2
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	4313      	orrs	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800163c:	4935      	ldr	r1, [pc, #212]	@ (8001714 <HAL_GPIO_Init+0x310>)
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	089b      	lsrs	r3, r3, #2
 8001642:	3302      	adds	r3, #2
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800164a:	4b3b      	ldr	r3, [pc, #236]	@ (8001738 <HAL_GPIO_Init+0x334>)
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	43db      	mvns	r3, r3
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	4013      	ands	r3, r2
 8001658:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d003      	beq.n	800166e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	4313      	orrs	r3, r2
 800166c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800166e:	4a32      	ldr	r2, [pc, #200]	@ (8001738 <HAL_GPIO_Init+0x334>)
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001674:	4b30      	ldr	r3, [pc, #192]	@ (8001738 <HAL_GPIO_Init+0x334>)
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	43db      	mvns	r3, r3
 800167e:	69ba      	ldr	r2, [r7, #24]
 8001680:	4013      	ands	r3, r2
 8001682:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d003      	beq.n	8001698 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	4313      	orrs	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001698:	4a27      	ldr	r2, [pc, #156]	@ (8001738 <HAL_GPIO_Init+0x334>)
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800169e:	4b26      	ldr	r3, [pc, #152]	@ (8001738 <HAL_GPIO_Init+0x334>)
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	43db      	mvns	r3, r3
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	4013      	ands	r3, r2
 80016ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d003      	beq.n	80016c2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	4313      	orrs	r3, r2
 80016c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016c2:	4a1d      	ldr	r2, [pc, #116]	@ (8001738 <HAL_GPIO_Init+0x334>)
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001738 <HAL_GPIO_Init+0x334>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	43db      	mvns	r3, r3
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	4013      	ands	r3, r2
 80016d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d003      	beq.n	80016ec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016ec:	4a12      	ldr	r2, [pc, #72]	@ (8001738 <HAL_GPIO_Init+0x334>)
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	3301      	adds	r3, #1
 80016f6:	61fb      	str	r3, [r7, #28]
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	2b0f      	cmp	r3, #15
 80016fc:	f67f ae90 	bls.w	8001420 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001700:	bf00      	nop
 8001702:	bf00      	nop
 8001704:	3724      	adds	r7, #36	@ 0x24
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	40023800 	.word	0x40023800
 8001714:	40013800 	.word	0x40013800
 8001718:	40020000 	.word	0x40020000
 800171c:	40020400 	.word	0x40020400
 8001720:	40020800 	.word	0x40020800
 8001724:	40020c00 	.word	0x40020c00
 8001728:	40021000 	.word	0x40021000
 800172c:	40021400 	.word	0x40021400
 8001730:	40021800 	.word	0x40021800
 8001734:	40021c00 	.word	0x40021c00
 8001738:	40013c00 	.word	0x40013c00

0800173c <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d101      	bne.n	8001752 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e038      	b.n	80017c4 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8001758:	b2db      	uxtb	r3, r3
 800175a:	2b00      	cmp	r3, #0
 800175c:	d106      	bne.n	800176c <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	2200      	movs	r2, #0
 8001762:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8001766:	68f8      	ldr	r0, [r7, #12]
 8001768:	f7ff fcb2 	bl	80010d0 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	3308      	adds	r3, #8
 8001774:	4619      	mov	r1, r3
 8001776:	4610      	mov	r0, r2
 8001778:	f000 f904 	bl	8001984 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	6818      	ldr	r0, [r3, #0]
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	461a      	mov	r2, r3
 8001786:	68b9      	ldr	r1, [r7, #8]
 8001788:	f000 f966 	bl	8001a58 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	6858      	ldr	r0, [r3, #4]
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	689a      	ldr	r2, [r3, #8]
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001798:	6879      	ldr	r1, [r7, #4]
 800179a:	f000 f993 	bl	8001ac4 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	68fa      	ldr	r2, [r7, #12]
 80017a4:	6892      	ldr	r2, [r2, #8]
 80017a6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	68fa      	ldr	r2, [r7, #12]
 80017b0:	6892      	ldr	r2, [r2, #8]
 80017b2:	f041 0101 	orr.w	r1, r1, #1
 80017b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	2201      	movs	r2, #1
 80017be:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 80017c2:	2300      	movs	r3, #0
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3710      	adds	r7, #16
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <LL_ADC_REG_SetSequencerLength>:
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017da:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	431a      	orrs	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80017e6:	bf00      	nop
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr

080017f2 <LL_ADC_IsEnabled>:
  * @rmtoll CR2      ADON           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80017f2:	b480      	push	{r7}
 80017f4:	b083      	sub	sp, #12
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	2b01      	cmp	r3, #1
 8001804:	bf0c      	ite	eq
 8001806:	2301      	moveq	r3, #1
 8001808:	2300      	movne	r3, #0
 800180a:	b2db      	uxtb	r3, r3
}
 800180c:	4618      	mov	r0, r3
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8001818:	b590      	push	{r4, r7, lr}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8001822:	2300      	movs	r3, #0
 8001824:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 8001826:	481c      	ldr	r0, [pc, #112]	@ (8001898 <LL_ADC_CommonInit+0x80>)
 8001828:	f7ff ffe3 	bl	80017f2 <LL_ADC_IsEnabled>
 800182c:	4604      	mov	r4, r0
 800182e:	481b      	ldr	r0, [pc, #108]	@ (800189c <LL_ADC_CommonInit+0x84>)
 8001830:	f7ff ffdf 	bl	80017f2 <LL_ADC_IsEnabled>
 8001834:	4603      	mov	r3, r0
 8001836:	431c      	orrs	r4, r3
 8001838:	4819      	ldr	r0, [pc, #100]	@ (80018a0 <LL_ADC_CommonInit+0x88>)
 800183a:	f7ff ffda 	bl	80017f2 <LL_ADC_IsEnabled>
 800183e:	4603      	mov	r3, r0
 8001840:	4323      	orrs	r3, r4
 8001842:	2b00      	cmp	r3, #0
 8001844:	d120      	bne.n	8001888 <LL_ADC_CommonInit+0x70>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if (ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d012      	beq.n	8001874 <LL_ADC_CommonInit+0x5c>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685a      	ldr	r2, [r3, #4]
 8001852:	4b14      	ldr	r3, [pc, #80]	@ (80018a4 <LL_ADC_CommonInit+0x8c>)
 8001854:	4013      	ands	r3, r2
 8001856:	683a      	ldr	r2, [r7, #0]
 8001858:	6811      	ldr	r1, [r2, #0]
 800185a:	683a      	ldr	r2, [r7, #0]
 800185c:	6852      	ldr	r2, [r2, #4]
 800185e:	4311      	orrs	r1, r2
 8001860:	683a      	ldr	r2, [r7, #0]
 8001862:	6892      	ldr	r2, [r2, #8]
 8001864:	4311      	orrs	r1, r2
 8001866:	683a      	ldr	r2, [r7, #0]
 8001868:	68d2      	ldr	r2, [r2, #12]
 800186a:	430a      	orrs	r2, r1
 800186c:	431a      	orrs	r2, r3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	e00b      	b.n	800188c <LL_ADC_CommonInit+0x74>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685a      	ldr	r2, [r3, #4]
 8001878:	4b0a      	ldr	r3, [pc, #40]	@ (80018a4 <LL_ADC_CommonInit+0x8c>)
 800187a:	4013      	ands	r3, r2
 800187c:	683a      	ldr	r2, [r7, #0]
 800187e:	6812      	ldr	r2, [r2, #0]
 8001880:	431a      	orrs	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	605a      	str	r2, [r3, #4]
 8001886:	e001      	b.n	800188c <LL_ADC_CommonInit+0x74>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800188c:	7bfb      	ldrb	r3, [r7, #15]
}
 800188e:	4618      	mov	r0, r3
 8001890:	3714      	adds	r7, #20
 8001892:	46bd      	mov	sp, r7
 8001894:	bd90      	pop	{r4, r7, pc}
 8001896:	bf00      	nop
 8001898:	40012000 	.word	0x40012000
 800189c:	40012100 	.word	0x40012100
 80018a0:	40012200 	.word	0x40012200
 80018a4:	fffc10e0 	.word	0xfffc10e0

080018a8 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80018b2:	2300      	movs	r3, #0
 80018b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f7ff ff9b 	bl	80017f2 <LL_ADC_IsEnabled>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d117      	bne.n	80018f2 <LL_ADC_Init+0x4a>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 80018ca:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80018ce:	683a      	ldr	r2, [r7, #0]
 80018d0:	6811      	ldr	r1, [r2, #0]
 80018d2:	683a      	ldr	r2, [r7, #0]
 80018d4:	6892      	ldr	r2, [r2, #8]
 80018d6:	430a      	orrs	r2, r1
 80018d8:	431a      	orrs	r2, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	605a      	str	r2, [r3, #4]
               ,
               ADC_InitStruct->Resolution
               | ADC_InitStruct->SequencersScanMode
              );

    MODIFY_REG(ADCx->CR2,
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	431a      	orrs	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	609a      	str	r2, [r3, #8]
 80018f0:	e001      	b.n	80018f6 <LL_ADC_Init+0x4e>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80018f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3710      	adds	r7, #16
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}

08001900 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800190a:	2300      	movs	r3, #0
 800190c:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f7ff ff6f 	bl	80017f2 <LL_ADC_IsEnabled>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d12b      	bne.n	8001972 <LL_ADC_REG_Init+0x72>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 series, ADC trigger edge is set when starting      */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if (ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d009      	beq.n	8001936 <LL_ADC_REG_Init+0x36>
    {
      MODIFY_REG(ADCx->CR1,
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	431a      	orrs	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	605a      	str	r2, [r3, #4]
 8001934:	e005      	b.n	8001942 <LL_ADC_REG_Init+0x42>
                 ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	605a      	str	r2, [r3, #4]
                 ,
                 LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }

    MODIFY_REG(ADCx->CR2,
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	689a      	ldr	r2, [r3, #8]
 8001946:	4b0e      	ldr	r3, [pc, #56]	@ (8001980 <LL_ADC_REG_Init+0x80>)
 8001948:	4013      	ands	r3, r2
 800194a:	683a      	ldr	r2, [r7, #0]
 800194c:	6812      	ldr	r2, [r2, #0]
 800194e:	f002 6170 	and.w	r1, r2, #251658240	@ 0xf000000
 8001952:	683a      	ldr	r2, [r7, #0]
 8001954:	68d2      	ldr	r2, [r2, #12]
 8001956:	4311      	orrs	r1, r2
 8001958:	683a      	ldr	r2, [r7, #0]
 800195a:	6912      	ldr	r2, [r2, #16]
 800195c:	430a      	orrs	r2, r1
 800195e:	431a      	orrs	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	4619      	mov	r1, r3
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f7ff ff2e 	bl	80017cc <LL_ADC_REG_SetSequencerLength>
 8001970:	e001      	b.n	8001976 <LL_ADC_REG_Init+0x76>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8001976:	7bfb      	ldrb	r3, [r7, #15]
}
 8001978:	4618      	mov	r0, r3
 800197a:	3710      	adds	r7, #16
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	c0fffcfd 	.word	0xc0fffcfd

08001984 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8001984:	b480      	push	{r7}
 8001986:	b087      	sub	sp, #28
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001998:	683a      	ldr	r2, [r7, #0]
 800199a:	6812      	ldr	r2, [r2, #0]
 800199c:	f023 0101 	bic.w	r1, r3, #1
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	2b08      	cmp	r3, #8
 80019ac:	d102      	bne.n	80019b4 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80019ae:	2340      	movs	r3, #64	@ 0x40
 80019b0:	617b      	str	r3, [r7, #20]
 80019b2:	e001      	b.n	80019b8 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80019b4:	2300      	movs	r3, #0
 80019b6:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80019c4:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80019ca:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80019d0:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80019d6:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 80019dc:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 80019e2:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 80019e8:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 80019ee:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 80019f4:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 80019fa:	4313      	orrs	r3, r2
 80019fc:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	699b      	ldr	r3, [r3, #24]
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a0c:	693a      	ldr	r2, [r7, #16]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8001a12:	4b10      	ldr	r3, [pc, #64]	@ (8001a54 <FSMC_NORSRAM_Init+0xd0>)
 8001a14:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a1c:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8001a24:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	43db      	mvns	r3, r3
 8001a34:	ea02 0103 	and.w	r1, r2, r3
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	4319      	orrs	r1, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8001a46:	2300      	movs	r3, #0
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	371c      	adds	r7, #28
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	0008fb7f 	.word	0x0008fb7f

08001a58 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	1c5a      	adds	r2, r3, #1
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a6e:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	011b      	lsls	r3, r3, #4
 8001a7c:	431a      	orrs	r2, r3
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	021b      	lsls	r3, r3, #8
 8001a84:	431a      	orrs	r2, r3
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	041b      	lsls	r3, r3, #16
 8001a8c:	431a      	orrs	r2, r3
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	691b      	ldr	r3, [r3, #16]
 8001a92:	3b01      	subs	r3, #1
 8001a94:	051b      	lsls	r3, r3, #20
 8001a96:	431a      	orrs	r2, r3
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	695b      	ldr	r3, [r3, #20]
 8001a9c:	3b02      	subs	r3, #2
 8001a9e:	061b      	lsls	r3, r3, #24
 8001aa0:	431a      	orrs	r2, r3
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	699b      	ldr	r3, [r3, #24]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	3201      	adds	r2, #1
 8001aac:	4319      	orrs	r1, r3
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3714      	adds	r7, #20
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
	...

08001ac4 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	607a      	str	r2, [r7, #4]
 8001ad0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001ad8:	d11d      	bne.n	8001b16 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001ae2:	4b13      	ldr	r3, [pc, #76]	@ (8001b30 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	68ba      	ldr	r2, [r7, #8]
 8001ae8:	6811      	ldr	r1, [r2, #0]
 8001aea:	68ba      	ldr	r2, [r7, #8]
 8001aec:	6852      	ldr	r2, [r2, #4]
 8001aee:	0112      	lsls	r2, r2, #4
 8001af0:	4311      	orrs	r1, r2
 8001af2:	68ba      	ldr	r2, [r7, #8]
 8001af4:	6892      	ldr	r2, [r2, #8]
 8001af6:	0212      	lsls	r2, r2, #8
 8001af8:	4311      	orrs	r1, r2
 8001afa:	68ba      	ldr	r2, [r7, #8]
 8001afc:	6992      	ldr	r2, [r2, #24]
 8001afe:	4311      	orrs	r1, r2
 8001b00:	68ba      	ldr	r2, [r7, #8]
 8001b02:	68d2      	ldr	r2, [r2, #12]
 8001b04:	0412      	lsls	r2, r2, #16
 8001b06:	430a      	orrs	r2, r1
 8001b08:	ea43 0102 	orr.w	r1, r3, r2
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001b14:	e005      	b.n	8001b22 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8001b1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8001b22:	2300      	movs	r3, #0
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3714      	adds	r7, #20
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr
 8001b30:	cff00000 	.word	0xcff00000

08001b34 <LL_GPIO_SetPinMode>:
{
 8001b34:	b480      	push	{r7}
 8001b36:	b08b      	sub	sp, #44	@ 0x2c
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	60b9      	str	r1, [r7, #8]
 8001b3e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	fa93 f3a3 	rbit	r3, r3
 8001b4e:	613b      	str	r3, [r7, #16]
  return result;
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d101      	bne.n	8001b5e <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8001b5a:	2320      	movs	r3, #32
 8001b5c:	e003      	b.n	8001b66 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	fab3 f383 	clz	r3, r3
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	2103      	movs	r1, #3
 8001b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b6e:	43db      	mvns	r3, r3
 8001b70:	401a      	ands	r2, r3
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b76:	6a3b      	ldr	r3, [r7, #32]
 8001b78:	fa93 f3a3 	rbit	r3, r3
 8001b7c:	61fb      	str	r3, [r7, #28]
  return result;
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d101      	bne.n	8001b8c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8001b88:	2320      	movs	r3, #32
 8001b8a:	e003      	b.n	8001b94 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8001b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b8e:	fab3 f383 	clz	r3, r3
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	6879      	ldr	r1, [r7, #4]
 8001b98:	fa01 f303 	lsl.w	r3, r1, r3
 8001b9c:	431a      	orrs	r2, r3
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	601a      	str	r2, [r3, #0]
}
 8001ba2:	bf00      	nop
 8001ba4:	372c      	adds	r7, #44	@ 0x2c
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr

08001bae <LL_GPIO_SetPinOutputType>:
{
 8001bae:	b480      	push	{r7}
 8001bb0:	b085      	sub	sp, #20
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	60f8      	str	r0, [r7, #12]
 8001bb6:	60b9      	str	r1, [r7, #8]
 8001bb8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	685a      	ldr	r2, [r3, #4]
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	401a      	ands	r2, r3
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	6879      	ldr	r1, [r7, #4]
 8001bc8:	fb01 f303 	mul.w	r3, r1, r3
 8001bcc:	431a      	orrs	r2, r3
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	605a      	str	r2, [r3, #4]
}
 8001bd2:	bf00      	nop
 8001bd4:	3714      	adds	r7, #20
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr

08001bde <LL_GPIO_SetPinSpeed>:
{
 8001bde:	b480      	push	{r7}
 8001be0:	b08b      	sub	sp, #44	@ 0x2c
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	60f8      	str	r0, [r7, #12]
 8001be6:	60b9      	str	r1, [r7, #8]
 8001be8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	689a      	ldr	r2, [r3, #8]
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	fa93 f3a3 	rbit	r3, r3
 8001bf8:	613b      	str	r3, [r7, #16]
  return result;
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d101      	bne.n	8001c08 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8001c04:	2320      	movs	r3, #32
 8001c06:	e003      	b.n	8001c10 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	fab3 f383 	clz	r3, r3
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	2103      	movs	r1, #3
 8001c14:	fa01 f303 	lsl.w	r3, r1, r3
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	401a      	ands	r2, r3
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c20:	6a3b      	ldr	r3, [r7, #32]
 8001c22:	fa93 f3a3 	rbit	r3, r3
 8001c26:	61fb      	str	r3, [r7, #28]
  return result;
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d101      	bne.n	8001c36 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8001c32:	2320      	movs	r3, #32
 8001c34:	e003      	b.n	8001c3e <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8001c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c38:	fab3 f383 	clz	r3, r3
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	6879      	ldr	r1, [r7, #4]
 8001c42:	fa01 f303 	lsl.w	r3, r1, r3
 8001c46:	431a      	orrs	r2, r3
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	609a      	str	r2, [r3, #8]
}
 8001c4c:	bf00      	nop
 8001c4e:	372c      	adds	r7, #44	@ 0x2c
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <LL_GPIO_SetPinPull>:
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b08b      	sub	sp, #44	@ 0x2c
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	68da      	ldr	r2, [r3, #12]
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	fa93 f3a3 	rbit	r3, r3
 8001c72:	613b      	str	r3, [r7, #16]
  return result;
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d101      	bne.n	8001c82 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8001c7e:	2320      	movs	r3, #32
 8001c80:	e003      	b.n	8001c8a <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	fab3 f383 	clz	r3, r3
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	2103      	movs	r1, #3
 8001c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c92:	43db      	mvns	r3, r3
 8001c94:	401a      	ands	r2, r3
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9a:	6a3b      	ldr	r3, [r7, #32]
 8001c9c:	fa93 f3a3 	rbit	r3, r3
 8001ca0:	61fb      	str	r3, [r7, #28]
  return result;
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d101      	bne.n	8001cb0 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8001cac:	2320      	movs	r3, #32
 8001cae:	e003      	b.n	8001cb8 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8001cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb2:	fab3 f383 	clz	r3, r3
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	6879      	ldr	r1, [r7, #4]
 8001cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc0:	431a      	orrs	r2, r3
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	60da      	str	r2, [r3, #12]
}
 8001cc6:	bf00      	nop
 8001cc8:	372c      	adds	r7, #44	@ 0x2c
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr

08001cd2 <LL_GPIO_SetAFPin_0_7>:
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	b08b      	sub	sp, #44	@ 0x2c
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	60f8      	str	r0, [r7, #12]
 8001cda:	60b9      	str	r1, [r7, #8]
 8001cdc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	6a1a      	ldr	r2, [r3, #32]
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	fa93 f3a3 	rbit	r3, r3
 8001cec:	613b      	str	r3, [r7, #16]
  return result;
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d101      	bne.n	8001cfc <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8001cf8:	2320      	movs	r3, #32
 8001cfa:	e003      	b.n	8001d04 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	fab3 f383 	clz	r3, r3
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	210f      	movs	r1, #15
 8001d08:	fa01 f303 	lsl.w	r3, r1, r3
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	401a      	ands	r2, r3
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d14:	6a3b      	ldr	r3, [r7, #32]
 8001d16:	fa93 f3a3 	rbit	r3, r3
 8001d1a:	61fb      	str	r3, [r7, #28]
  return result;
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d101      	bne.n	8001d2a <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8001d26:	2320      	movs	r3, #32
 8001d28:	e003      	b.n	8001d32 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8001d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d2c:	fab3 f383 	clz	r3, r3
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	6879      	ldr	r1, [r7, #4]
 8001d36:	fa01 f303 	lsl.w	r3, r1, r3
 8001d3a:	431a      	orrs	r2, r3
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	621a      	str	r2, [r3, #32]
}
 8001d40:	bf00      	nop
 8001d42:	372c      	adds	r7, #44	@ 0x2c
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <LL_GPIO_SetAFPin_8_15>:
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b08b      	sub	sp, #44	@ 0x2c
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	0a1b      	lsrs	r3, r3, #8
 8001d60:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	fa93 f3a3 	rbit	r3, r3
 8001d68:	613b      	str	r3, [r7, #16]
  return result;
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d101      	bne.n	8001d78 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8001d74:	2320      	movs	r3, #32
 8001d76:	e003      	b.n	8001d80 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	fab3 f383 	clz	r3, r3
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	210f      	movs	r1, #15
 8001d84:	fa01 f303 	lsl.w	r3, r1, r3
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	401a      	ands	r2, r3
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	0a1b      	lsrs	r3, r3, #8
 8001d90:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d92:	6a3b      	ldr	r3, [r7, #32]
 8001d94:	fa93 f3a3 	rbit	r3, r3
 8001d98:	61fb      	str	r3, [r7, #28]
  return result;
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d101      	bne.n	8001da8 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8001da4:	2320      	movs	r3, #32
 8001da6:	e003      	b.n	8001db0 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8001da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001daa:	fab3 f383 	clz	r3, r3
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	6879      	ldr	r1, [r7, #4]
 8001db4:	fa01 f303 	lsl.w	r3, r1, r3
 8001db8:	431a      	orrs	r2, r3
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001dbe:	bf00      	nop
 8001dc0:	372c      	adds	r7, #44	@ 0x2c
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr

08001dca <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b08a      	sub	sp, #40	@ 0x28
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
 8001dd2:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	fa93 f3a3 	rbit	r3, r3
 8001de8:	617b      	str	r3, [r7, #20]
  return result;
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d101      	bne.n	8001df8 <LL_GPIO_Init+0x2e>
    return 32U;
 8001df4:	2320      	movs	r3, #32
 8001df6:	e003      	b.n	8001e00 <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	fab3 f383 	clz	r3, r3
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001e02:	e057      	b.n	8001eb4 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	2101      	movs	r1, #1
 8001e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e10:	4013      	ands	r3, r2
 8001e12:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 8001e14:	6a3b      	ldr	r3, [r7, #32]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d049      	beq.n	8001eae <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d003      	beq.n	8001e2a <LL_GPIO_Init+0x60>
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d10d      	bne.n	8001e46 <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	461a      	mov	r2, r3
 8001e30:	6a39      	ldr	r1, [r7, #32]
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f7ff fed3 	bl	8001bde <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	6a39      	ldr	r1, [r7, #32]
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f7ff feb4 	bl	8001bae <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	6a39      	ldr	r1, [r7, #32]
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f7ff ff02 	bl	8001c58 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d121      	bne.n	8001ea0 <LL_GPIO_Init+0xd6>
 8001e5c:	6a3b      	ldr	r3, [r7, #32]
 8001e5e:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	fa93 f3a3 	rbit	r3, r3
 8001e66:	60bb      	str	r3, [r7, #8]
  return result;
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <LL_GPIO_Init+0xac>
    return 32U;
 8001e72:	2320      	movs	r3, #32
 8001e74:	e003      	b.n	8001e7e <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	fab3 f383 	clz	r3, r3
 8001e7c:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8001e7e:	2b07      	cmp	r3, #7
 8001e80:	d807      	bhi.n	8001e92 <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	695b      	ldr	r3, [r3, #20]
 8001e86:	461a      	mov	r2, r3
 8001e88:	6a39      	ldr	r1, [r7, #32]
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f7ff ff21 	bl	8001cd2 <LL_GPIO_SetAFPin_0_7>
 8001e90:	e006      	b.n	8001ea0 <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	695b      	ldr	r3, [r3, #20]
 8001e96:	461a      	mov	r2, r3
 8001e98:	6a39      	ldr	r1, [r7, #32]
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f7ff ff56 	bl	8001d4c <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	6a39      	ldr	r1, [r7, #32]
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f7ff fe43 	bl	8001b34 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eba:	fa22 f303 	lsr.w	r3, r2, r3
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d1a0      	bne.n	8001e04 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3728      	adds	r7, #40	@ 0x28
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <LL_RCC_GetSysClkSource>:
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001ed0:	4b04      	ldr	r3, [pc, #16]	@ (8001ee4 <LL_RCC_GetSysClkSource+0x18>)
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f003 030c 	and.w	r3, r3, #12
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	40023800 	.word	0x40023800

08001ee8 <LL_RCC_GetAHBPrescaler>:
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001eec:	4b04      	ldr	r3, [pc, #16]	@ (8001f00 <LL_RCC_GetAHBPrescaler+0x18>)
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	40023800 	.word	0x40023800

08001f04 <LL_RCC_GetAPB1Prescaler>:
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001f08:	4b04      	ldr	r3, [pc, #16]	@ (8001f1c <LL_RCC_GetAPB1Prescaler+0x18>)
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	40023800 	.word	0x40023800

08001f20 <LL_RCC_GetAPB2Prescaler>:
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001f24:	4b04      	ldr	r3, [pc, #16]	@ (8001f38 <LL_RCC_GetAPB2Prescaler+0x18>)
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	40023800 	.word	0x40023800

08001f3c <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001f40:	4b04      	ldr	r3, [pc, #16]	@ (8001f54 <LL_RCC_PLL_GetMainSource+0x18>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	40023800 	.word	0x40023800

08001f58 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001f5c:	4b04      	ldr	r3, [pc, #16]	@ (8001f70 <LL_RCC_PLL_GetN+0x18>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	099b      	lsrs	r3, r3, #6
 8001f62:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr
 8001f70:	40023800 	.word	0x40023800

08001f74 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8001f78:	4b04      	ldr	r3, [pc, #16]	@ (8001f8c <LL_RCC_PLL_GetP+0x18>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	40023800 	.word	0x40023800

08001f90 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001f94:	4b04      	ldr	r3, [pc, #16]	@ (8001fa8 <LL_RCC_PLL_GetDivider+0x18>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	40023800 	.word	0x40023800

08001fac <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8001fb4:	f000 f820 	bl	8001ff8 <RCC_GetSystemClockFreq>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f000 f840 	bl	8002048 <RCC_GetHCLKClockFreq>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f000 f84e 	bl	8002074 <RCC_GetPCLK1ClockFreq>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f000 f85a 	bl	800209c <RCC_GetPCLK2ClockFreq>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	60da      	str	r2, [r3, #12]
}
 8001fee:	bf00      	nop
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
	...

08001ff8 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8001ffe:	2300      	movs	r3, #0
 8002000:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002002:	f7ff ff63 	bl	8001ecc <LL_RCC_GetSysClkSource>
 8002006:	4603      	mov	r3, r0
 8002008:	2b08      	cmp	r3, #8
 800200a:	d00c      	beq.n	8002026 <RCC_GetSystemClockFreq+0x2e>
 800200c:	2b08      	cmp	r3, #8
 800200e:	d80f      	bhi.n	8002030 <RCC_GetSystemClockFreq+0x38>
 8002010:	2b00      	cmp	r3, #0
 8002012:	d002      	beq.n	800201a <RCC_GetSystemClockFreq+0x22>
 8002014:	2b04      	cmp	r3, #4
 8002016:	d003      	beq.n	8002020 <RCC_GetSystemClockFreq+0x28>
 8002018:	e00a      	b.n	8002030 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800201a:	4b09      	ldr	r3, [pc, #36]	@ (8002040 <RCC_GetSystemClockFreq+0x48>)
 800201c:	607b      	str	r3, [r7, #4]
      break;
 800201e:	e00a      	b.n	8002036 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002020:	4b08      	ldr	r3, [pc, #32]	@ (8002044 <RCC_GetSystemClockFreq+0x4c>)
 8002022:	607b      	str	r3, [r7, #4]
      break;
 8002024:	e007      	b.n	8002036 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8002026:	2008      	movs	r0, #8
 8002028:	f000 f84c 	bl	80020c4 <RCC_PLL_GetFreqDomain_SYS>
 800202c:	6078      	str	r0, [r7, #4]
      break;
 800202e:	e002      	b.n	8002036 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8002030:	4b03      	ldr	r3, [pc, #12]	@ (8002040 <RCC_GetSystemClockFreq+0x48>)
 8002032:	607b      	str	r3, [r7, #4]
      break;
 8002034:	bf00      	nop
  }

  return frequency;
 8002036:	687b      	ldr	r3, [r7, #4]
}
 8002038:	4618      	mov	r0, r3
 800203a:	3708      	adds	r7, #8
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	00f42400 	.word	0x00f42400
 8002044:	017d7840 	.word	0x017d7840

08002048 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002050:	f7ff ff4a 	bl	8001ee8 <LL_RCC_GetAHBPrescaler>
 8002054:	4603      	mov	r3, r0
 8002056:	091b      	lsrs	r3, r3, #4
 8002058:	f003 030f 	and.w	r3, r3, #15
 800205c:	4a04      	ldr	r2, [pc, #16]	@ (8002070 <RCC_GetHCLKClockFreq+0x28>)
 800205e:	5cd3      	ldrb	r3, [r2, r3]
 8002060:	461a      	mov	r2, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	40d3      	lsrs	r3, r2
}
 8002066:	4618      	mov	r0, r3
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	08002c3c 	.word	0x08002c3c

08002074 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800207c:	f7ff ff42 	bl	8001f04 <LL_RCC_GetAPB1Prescaler>
 8002080:	4603      	mov	r3, r0
 8002082:	0a9b      	lsrs	r3, r3, #10
 8002084:	4a04      	ldr	r2, [pc, #16]	@ (8002098 <RCC_GetPCLK1ClockFreq+0x24>)
 8002086:	5cd3      	ldrb	r3, [r2, r3]
 8002088:	461a      	mov	r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	40d3      	lsrs	r3, r2
}
 800208e:	4618      	mov	r0, r3
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	08002c4c 	.word	0x08002c4c

0800209c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80020a4:	f7ff ff3c 	bl	8001f20 <LL_RCC_GetAPB2Prescaler>
 80020a8:	4603      	mov	r3, r0
 80020aa:	0b5b      	lsrs	r3, r3, #13
 80020ac:	4a04      	ldr	r2, [pc, #16]	@ (80020c0 <RCC_GetPCLK2ClockFreq+0x24>)
 80020ae:	5cd3      	ldrb	r3, [r2, r3]
 80020b0:	461a      	mov	r2, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	40d3      	lsrs	r3, r2
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	08002c4c 	.word	0x08002c4c

080020c4 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 80020c4:	b590      	push	{r4, r7, lr}
 80020c6:	b087      	sub	sp, #28
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 80020cc:	2300      	movs	r3, #0
 80020ce:	617b      	str	r3, [r7, #20]
 80020d0:	2300      	movs	r3, #0
 80020d2:	60fb      	str	r3, [r7, #12]
 80020d4:	2300      	movs	r3, #0
 80020d6:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80020d8:	f7ff ff30 	bl	8001f3c <LL_RCC_PLL_GetMainSource>
 80020dc:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d004      	beq.n	80020ee <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80020ea:	d003      	beq.n	80020f4 <RCC_PLL_GetFreqDomain_SYS+0x30>
 80020ec:	e005      	b.n	80020fa <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80020ee:	4b12      	ldr	r3, [pc, #72]	@ (8002138 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80020f0:	617b      	str	r3, [r7, #20]
      break;
 80020f2:	e005      	b.n	8002100 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80020f4:	4b11      	ldr	r3, [pc, #68]	@ (800213c <RCC_PLL_GetFreqDomain_SYS+0x78>)
 80020f6:	617b      	str	r3, [r7, #20]
      break;
 80020f8:	e002      	b.n	8002100 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 80020fa:	4b0f      	ldr	r3, [pc, #60]	@ (8002138 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80020fc:	617b      	str	r3, [r7, #20]
      break;
 80020fe:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2b08      	cmp	r3, #8
 8002104:	d113      	bne.n	800212e <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002106:	f7ff ff43 	bl	8001f90 <LL_RCC_PLL_GetDivider>
 800210a:	4602      	mov	r2, r0
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	fbb3 f4f2 	udiv	r4, r3, r2
 8002112:	f7ff ff21 	bl	8001f58 <LL_RCC_PLL_GetN>
 8002116:	4603      	mov	r3, r0
 8002118:	fb03 f404 	mul.w	r4, r3, r4
 800211c:	f7ff ff2a 	bl	8001f74 <LL_RCC_PLL_GetP>
 8002120:	4603      	mov	r3, r0
 8002122:	0c1b      	lsrs	r3, r3, #16
 8002124:	3301      	adds	r3, #1
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	fbb4 f3f3 	udiv	r3, r4, r3
 800212c:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 800212e:	693b      	ldr	r3, [r7, #16]
}
 8002130:	4618      	mov	r0, r3
 8002132:	371c      	adds	r7, #28
 8002134:	46bd      	mov	sp, r7
 8002136:	bd90      	pop	{r4, r7, pc}
 8002138:	00f42400 	.word	0x00f42400
 800213c:	017d7840 	.word	0x017d7840

08002140 <LL_SPI_IsEnabled>:
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002150:	2b40      	cmp	r3, #64	@ 0x40
 8002152:	d101      	bne.n	8002158 <LL_SPI_IsEnabled+0x18>
 8002154:	2301      	movs	r3, #1
 8002156:	e000      	b.n	800215a <LL_SPI_IsEnabled+0x1a>
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr

08002166 <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 8002166:	b480      	push	{r7}
 8002168:	b083      	sub	sp, #12
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
 800216e:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	b29b      	uxth	r3, r3
 8002174:	461a      	mov	r2, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	611a      	str	r2, [r3, #16]
}
 800217a:	bf00      	nop
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b084      	sub	sp, #16
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
 800218e:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f7ff ffd3 	bl	8002140 <LL_SPI_IsEnabled>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d139      	bne.n	8002214 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80021a8:	f023 03bf 	bic.w	r3, r3, #191	@ 0xbf
 80021ac:	683a      	ldr	r2, [r7, #0]
 80021ae:	6811      	ldr	r1, [r2, #0]
 80021b0:	683a      	ldr	r2, [r7, #0]
 80021b2:	6852      	ldr	r2, [r2, #4]
 80021b4:	4311      	orrs	r1, r2
 80021b6:	683a      	ldr	r2, [r7, #0]
 80021b8:	6892      	ldr	r2, [r2, #8]
 80021ba:	4311      	orrs	r1, r2
 80021bc:	683a      	ldr	r2, [r7, #0]
 80021be:	68d2      	ldr	r2, [r2, #12]
 80021c0:	4311      	orrs	r1, r2
 80021c2:	683a      	ldr	r2, [r7, #0]
 80021c4:	6912      	ldr	r2, [r2, #16]
 80021c6:	4311      	orrs	r1, r2
 80021c8:	683a      	ldr	r2, [r7, #0]
 80021ca:	6952      	ldr	r2, [r2, #20]
 80021cc:	4311      	orrs	r1, r2
 80021ce:	683a      	ldr	r2, [r7, #0]
 80021d0:	6992      	ldr	r2, [r2, #24]
 80021d2:	4311      	orrs	r1, r2
 80021d4:	683a      	ldr	r2, [r7, #0]
 80021d6:	69d2      	ldr	r2, [r2, #28]
 80021d8:	4311      	orrs	r1, r2
 80021da:	683a      	ldr	r2, [r7, #0]
 80021dc:	6a12      	ldr	r2, [r2, #32]
 80021de:	430a      	orrs	r2, r1
 80021e0:	431a      	orrs	r2, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f023 0204 	bic.w	r2, r3, #4
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	695b      	ldr	r3, [r3, #20]
 80021f2:	0c1b      	lsrs	r3, r3, #16
 80021f4:	431a      	orrs	r2, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	6a1b      	ldr	r3, [r3, #32]
 80021fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002202:	d105      	bne.n	8002210 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002208:	4619      	mov	r1, r3
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f7ff ffab 	bl	8002166 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8002210:	2300      	movs	r3, #0
 8002212:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	69db      	ldr	r3, [r3, #28]
 8002218:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	61da      	str	r2, [r3, #28]
  return status;
 8002220:	7bfb      	ldrb	r3, [r7, #15]
}
 8002222:	4618      	mov	r0, r3
 8002224:	3710      	adds	r7, #16
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <LL_USART_IsEnabled>:
{
 800222a:	b480      	push	{r7}
 800222c:	b083      	sub	sp, #12
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800223a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800223e:	bf0c      	ite	eq
 8002240:	2301      	moveq	r3, #1
 8002242:	2300      	movne	r3, #0
 8002244:	b2db      	uxtb	r3, r3
}
 8002246:	4618      	mov	r0, r3
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr

08002252 <LL_USART_SetStopBitsLength>:
{
 8002252:	b480      	push	{r7}
 8002254:	b083      	sub	sp, #12
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
 800225a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	691b      	ldr	r3, [r3, #16]
 8002260:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	431a      	orrs	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	611a      	str	r2, [r3, #16]
}
 800226c:	bf00      	nop
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <LL_USART_SetHWFlowCtrl>:
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	695b      	ldr	r3, [r3, #20]
 8002286:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	431a      	orrs	r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	615a      	str	r2, [r3, #20]
}
 8002292:	bf00      	nop
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
	...

080022a0 <LL_USART_SetBaudRate>:
{
 80022a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022a4:	b0c0      	sub	sp, #256	@ 0x100
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80022ac:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 80022b0:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 80022b4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80022b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80022c0:	f040 810c 	bne.w	80024dc <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80022c4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80022c8:	2200      	movs	r2, #0
 80022ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80022ce:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80022d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80022d6:	4622      	mov	r2, r4
 80022d8:	462b      	mov	r3, r5
 80022da:	1891      	adds	r1, r2, r2
 80022dc:	6639      	str	r1, [r7, #96]	@ 0x60
 80022de:	415b      	adcs	r3, r3
 80022e0:	667b      	str	r3, [r7, #100]	@ 0x64
 80022e2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80022e6:	4621      	mov	r1, r4
 80022e8:	eb12 0801 	adds.w	r8, r2, r1
 80022ec:	4629      	mov	r1, r5
 80022ee:	eb43 0901 	adc.w	r9, r3, r1
 80022f2:	f04f 0200 	mov.w	r2, #0
 80022f6:	f04f 0300 	mov.w	r3, #0
 80022fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80022fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002302:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002306:	4690      	mov	r8, r2
 8002308:	4699      	mov	r9, r3
 800230a:	4623      	mov	r3, r4
 800230c:	eb18 0303 	adds.w	r3, r8, r3
 8002310:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002314:	462b      	mov	r3, r5
 8002316:	eb49 0303 	adc.w	r3, r9, r3
 800231a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800231e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8002322:	2200      	movs	r2, #0
 8002324:	469a      	mov	sl, r3
 8002326:	4693      	mov	fp, r2
 8002328:	eb1a 030a 	adds.w	r3, sl, sl
 800232c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800232e:	eb4b 030b 	adc.w	r3, fp, fp
 8002332:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002334:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002338:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800233c:	f7fd ff48 	bl	80001d0 <__aeabi_uldivmod>
 8002340:	4602      	mov	r2, r0
 8002342:	460b      	mov	r3, r1
 8002344:	4b64      	ldr	r3, [pc, #400]	@ (80024d8 <LL_USART_SetBaudRate+0x238>)
 8002346:	fba3 2302 	umull	r2, r3, r3, r2
 800234a:	095b      	lsrs	r3, r3, #5
 800234c:	b29b      	uxth	r3, r3
 800234e:	011b      	lsls	r3, r3, #4
 8002350:	b29c      	uxth	r4, r3
 8002352:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002356:	2200      	movs	r2, #0
 8002358:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800235c:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002360:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8002364:	4642      	mov	r2, r8
 8002366:	464b      	mov	r3, r9
 8002368:	1891      	adds	r1, r2, r2
 800236a:	6539      	str	r1, [r7, #80]	@ 0x50
 800236c:	415b      	adcs	r3, r3
 800236e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002370:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002374:	4641      	mov	r1, r8
 8002376:	1851      	adds	r1, r2, r1
 8002378:	64b9      	str	r1, [r7, #72]	@ 0x48
 800237a:	4649      	mov	r1, r9
 800237c:	414b      	adcs	r3, r1
 800237e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002380:	f04f 0200 	mov.w	r2, #0
 8002384:	f04f 0300 	mov.w	r3, #0
 8002388:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 800238c:	4659      	mov	r1, fp
 800238e:	00cb      	lsls	r3, r1, #3
 8002390:	4651      	mov	r1, sl
 8002392:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002396:	4651      	mov	r1, sl
 8002398:	00ca      	lsls	r2, r1, #3
 800239a:	4610      	mov	r0, r2
 800239c:	4619      	mov	r1, r3
 800239e:	4603      	mov	r3, r0
 80023a0:	4642      	mov	r2, r8
 80023a2:	189b      	adds	r3, r3, r2
 80023a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80023a8:	464b      	mov	r3, r9
 80023aa:	460a      	mov	r2, r1
 80023ac:	eb42 0303 	adc.w	r3, r2, r3
 80023b0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80023b4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80023b8:	2200      	movs	r2, #0
 80023ba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80023be:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80023c2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80023c6:	460b      	mov	r3, r1
 80023c8:	18db      	adds	r3, r3, r3
 80023ca:	643b      	str	r3, [r7, #64]	@ 0x40
 80023cc:	4613      	mov	r3, r2
 80023ce:	eb42 0303 	adc.w	r3, r2, r3
 80023d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80023d4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80023d8:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 80023dc:	f7fd fef8 	bl	80001d0 <__aeabi_uldivmod>
 80023e0:	4602      	mov	r2, r0
 80023e2:	460b      	mov	r3, r1
 80023e4:	4611      	mov	r1, r2
 80023e6:	4b3c      	ldr	r3, [pc, #240]	@ (80024d8 <LL_USART_SetBaudRate+0x238>)
 80023e8:	fba3 2301 	umull	r2, r3, r3, r1
 80023ec:	095b      	lsrs	r3, r3, #5
 80023ee:	2264      	movs	r2, #100	@ 0x64
 80023f0:	fb02 f303 	mul.w	r3, r2, r3
 80023f4:	1acb      	subs	r3, r1, r3
 80023f6:	00db      	lsls	r3, r3, #3
 80023f8:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80023fc:	4b36      	ldr	r3, [pc, #216]	@ (80024d8 <LL_USART_SetBaudRate+0x238>)
 80023fe:	fba3 2302 	umull	r2, r3, r3, r2
 8002402:	095b      	lsrs	r3, r3, #5
 8002404:	b29b      	uxth	r3, r3
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	b29b      	uxth	r3, r3
 800240a:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800240e:	b29b      	uxth	r3, r3
 8002410:	4423      	add	r3, r4
 8002412:	b29c      	uxth	r4, r3
 8002414:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002418:	2200      	movs	r2, #0
 800241a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800241e:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002422:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 8002426:	4642      	mov	r2, r8
 8002428:	464b      	mov	r3, r9
 800242a:	1891      	adds	r1, r2, r2
 800242c:	63b9      	str	r1, [r7, #56]	@ 0x38
 800242e:	415b      	adcs	r3, r3
 8002430:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002432:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002436:	4641      	mov	r1, r8
 8002438:	1851      	adds	r1, r2, r1
 800243a:	6339      	str	r1, [r7, #48]	@ 0x30
 800243c:	4649      	mov	r1, r9
 800243e:	414b      	adcs	r3, r1
 8002440:	637b      	str	r3, [r7, #52]	@ 0x34
 8002442:	f04f 0200 	mov.w	r2, #0
 8002446:	f04f 0300 	mov.w	r3, #0
 800244a:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800244e:	4659      	mov	r1, fp
 8002450:	00cb      	lsls	r3, r1, #3
 8002452:	4651      	mov	r1, sl
 8002454:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002458:	4651      	mov	r1, sl
 800245a:	00ca      	lsls	r2, r1, #3
 800245c:	4610      	mov	r0, r2
 800245e:	4619      	mov	r1, r3
 8002460:	4603      	mov	r3, r0
 8002462:	4642      	mov	r2, r8
 8002464:	189b      	adds	r3, r3, r2
 8002466:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800246a:	464b      	mov	r3, r9
 800246c:	460a      	mov	r2, r1
 800246e:	eb42 0303 	adc.w	r3, r2, r3
 8002472:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002476:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800247a:	2200      	movs	r2, #0
 800247c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002480:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8002484:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8002488:	460b      	mov	r3, r1
 800248a:	18db      	adds	r3, r3, r3
 800248c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800248e:	4613      	mov	r3, r2
 8002490:	eb42 0303 	adc.w	r3, r2, r3
 8002494:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002496:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800249a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800249e:	f7fd fe97 	bl	80001d0 <__aeabi_uldivmod>
 80024a2:	4602      	mov	r2, r0
 80024a4:	460b      	mov	r3, r1
 80024a6:	4b0c      	ldr	r3, [pc, #48]	@ (80024d8 <LL_USART_SetBaudRate+0x238>)
 80024a8:	fba3 1302 	umull	r1, r3, r3, r2
 80024ac:	095b      	lsrs	r3, r3, #5
 80024ae:	2164      	movs	r1, #100	@ 0x64
 80024b0:	fb01 f303 	mul.w	r3, r1, r3
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	00db      	lsls	r3, r3, #3
 80024b8:	3332      	adds	r3, #50	@ 0x32
 80024ba:	4a07      	ldr	r2, [pc, #28]	@ (80024d8 <LL_USART_SetBaudRate+0x238>)
 80024bc:	fba2 2303 	umull	r2, r3, r2, r3
 80024c0:	095b      	lsrs	r3, r3, #5
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	f003 0307 	and.w	r3, r3, #7
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	4423      	add	r3, r4
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	461a      	mov	r2, r3
 80024d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80024d4:	609a      	str	r2, [r3, #8]
}
 80024d6:	e108      	b.n	80026ea <LL_USART_SetBaudRate+0x44a>
 80024d8:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80024dc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80024e0:	2200      	movs	r2, #0
 80024e2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80024e6:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80024ea:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 80024ee:	4642      	mov	r2, r8
 80024f0:	464b      	mov	r3, r9
 80024f2:	1891      	adds	r1, r2, r2
 80024f4:	6239      	str	r1, [r7, #32]
 80024f6:	415b      	adcs	r3, r3
 80024f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80024fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80024fe:	4641      	mov	r1, r8
 8002500:	1854      	adds	r4, r2, r1
 8002502:	4649      	mov	r1, r9
 8002504:	eb43 0501 	adc.w	r5, r3, r1
 8002508:	f04f 0200 	mov.w	r2, #0
 800250c:	f04f 0300 	mov.w	r3, #0
 8002510:	00eb      	lsls	r3, r5, #3
 8002512:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002516:	00e2      	lsls	r2, r4, #3
 8002518:	4614      	mov	r4, r2
 800251a:	461d      	mov	r5, r3
 800251c:	4643      	mov	r3, r8
 800251e:	18e3      	adds	r3, r4, r3
 8002520:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002524:	464b      	mov	r3, r9
 8002526:	eb45 0303 	adc.w	r3, r5, r3
 800252a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800252e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8002532:	2200      	movs	r2, #0
 8002534:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002538:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800253c:	f04f 0200 	mov.w	r2, #0
 8002540:	f04f 0300 	mov.w	r3, #0
 8002544:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8002548:	4629      	mov	r1, r5
 800254a:	008b      	lsls	r3, r1, #2
 800254c:	4621      	mov	r1, r4
 800254e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002552:	4621      	mov	r1, r4
 8002554:	008a      	lsls	r2, r1, #2
 8002556:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800255a:	f7fd fe39 	bl	80001d0 <__aeabi_uldivmod>
 800255e:	4602      	mov	r2, r0
 8002560:	460b      	mov	r3, r1
 8002562:	4b65      	ldr	r3, [pc, #404]	@ (80026f8 <LL_USART_SetBaudRate+0x458>)
 8002564:	fba3 2302 	umull	r2, r3, r3, r2
 8002568:	095b      	lsrs	r3, r3, #5
 800256a:	b29b      	uxth	r3, r3
 800256c:	011b      	lsls	r3, r3, #4
 800256e:	b29c      	uxth	r4, r3
 8002570:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002574:	2200      	movs	r2, #0
 8002576:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800257a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800257e:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8002582:	4642      	mov	r2, r8
 8002584:	464b      	mov	r3, r9
 8002586:	1891      	adds	r1, r2, r2
 8002588:	61b9      	str	r1, [r7, #24]
 800258a:	415b      	adcs	r3, r3
 800258c:	61fb      	str	r3, [r7, #28]
 800258e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002592:	4641      	mov	r1, r8
 8002594:	1851      	adds	r1, r2, r1
 8002596:	6139      	str	r1, [r7, #16]
 8002598:	4649      	mov	r1, r9
 800259a:	414b      	adcs	r3, r1
 800259c:	617b      	str	r3, [r7, #20]
 800259e:	f04f 0200 	mov.w	r2, #0
 80025a2:	f04f 0300 	mov.w	r3, #0
 80025a6:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80025aa:	4659      	mov	r1, fp
 80025ac:	00cb      	lsls	r3, r1, #3
 80025ae:	4651      	mov	r1, sl
 80025b0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80025b4:	4651      	mov	r1, sl
 80025b6:	00ca      	lsls	r2, r1, #3
 80025b8:	4610      	mov	r0, r2
 80025ba:	4619      	mov	r1, r3
 80025bc:	4603      	mov	r3, r0
 80025be:	4642      	mov	r2, r8
 80025c0:	189b      	adds	r3, r3, r2
 80025c2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80025c6:	464b      	mov	r3, r9
 80025c8:	460a      	mov	r2, r1
 80025ca:	eb42 0303 	adc.w	r3, r2, r3
 80025ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80025d2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80025d6:	2200      	movs	r2, #0
 80025d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80025dc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80025e0:	f04f 0200 	mov.w	r2, #0
 80025e4:	f04f 0300 	mov.w	r3, #0
 80025e8:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 80025ec:	4649      	mov	r1, r9
 80025ee:	008b      	lsls	r3, r1, #2
 80025f0:	4641      	mov	r1, r8
 80025f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80025f6:	4641      	mov	r1, r8
 80025f8:	008a      	lsls	r2, r1, #2
 80025fa:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 80025fe:	f7fd fde7 	bl	80001d0 <__aeabi_uldivmod>
 8002602:	4602      	mov	r2, r0
 8002604:	460b      	mov	r3, r1
 8002606:	4611      	mov	r1, r2
 8002608:	4b3b      	ldr	r3, [pc, #236]	@ (80026f8 <LL_USART_SetBaudRate+0x458>)
 800260a:	fba3 2301 	umull	r2, r3, r3, r1
 800260e:	095b      	lsrs	r3, r3, #5
 8002610:	2264      	movs	r2, #100	@ 0x64
 8002612:	fb02 f303 	mul.w	r3, r2, r3
 8002616:	1acb      	subs	r3, r1, r3
 8002618:	011b      	lsls	r3, r3, #4
 800261a:	3332      	adds	r3, #50	@ 0x32
 800261c:	4a36      	ldr	r2, [pc, #216]	@ (80026f8 <LL_USART_SetBaudRate+0x458>)
 800261e:	fba2 2303 	umull	r2, r3, r2, r3
 8002622:	095b      	lsrs	r3, r3, #5
 8002624:	b29b      	uxth	r3, r3
 8002626:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800262a:	b29b      	uxth	r3, r3
 800262c:	4423      	add	r3, r4
 800262e:	b29c      	uxth	r4, r3
 8002630:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002634:	2200      	movs	r2, #0
 8002636:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002638:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800263a:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800263e:	4642      	mov	r2, r8
 8002640:	464b      	mov	r3, r9
 8002642:	1891      	adds	r1, r2, r2
 8002644:	60b9      	str	r1, [r7, #8]
 8002646:	415b      	adcs	r3, r3
 8002648:	60fb      	str	r3, [r7, #12]
 800264a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800264e:	4641      	mov	r1, r8
 8002650:	1851      	adds	r1, r2, r1
 8002652:	6039      	str	r1, [r7, #0]
 8002654:	4649      	mov	r1, r9
 8002656:	414b      	adcs	r3, r1
 8002658:	607b      	str	r3, [r7, #4]
 800265a:	f04f 0200 	mov.w	r2, #0
 800265e:	f04f 0300 	mov.w	r3, #0
 8002662:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002666:	4659      	mov	r1, fp
 8002668:	00cb      	lsls	r3, r1, #3
 800266a:	4651      	mov	r1, sl
 800266c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002670:	4651      	mov	r1, sl
 8002672:	00ca      	lsls	r2, r1, #3
 8002674:	4610      	mov	r0, r2
 8002676:	4619      	mov	r1, r3
 8002678:	4603      	mov	r3, r0
 800267a:	4642      	mov	r2, r8
 800267c:	189b      	adds	r3, r3, r2
 800267e:	673b      	str	r3, [r7, #112]	@ 0x70
 8002680:	464b      	mov	r3, r9
 8002682:	460a      	mov	r2, r1
 8002684:	eb42 0303 	adc.w	r3, r2, r3
 8002688:	677b      	str	r3, [r7, #116]	@ 0x74
 800268a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800268e:	2200      	movs	r2, #0
 8002690:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002692:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002694:	f04f 0200 	mov.w	r2, #0
 8002698:	f04f 0300 	mov.w	r3, #0
 800269c:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 80026a0:	4649      	mov	r1, r9
 80026a2:	008b      	lsls	r3, r1, #2
 80026a4:	4641      	mov	r1, r8
 80026a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80026aa:	4641      	mov	r1, r8
 80026ac:	008a      	lsls	r2, r1, #2
 80026ae:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80026b2:	f7fd fd8d 	bl	80001d0 <__aeabi_uldivmod>
 80026b6:	4602      	mov	r2, r0
 80026b8:	460b      	mov	r3, r1
 80026ba:	4b0f      	ldr	r3, [pc, #60]	@ (80026f8 <LL_USART_SetBaudRate+0x458>)
 80026bc:	fba3 1302 	umull	r1, r3, r3, r2
 80026c0:	095b      	lsrs	r3, r3, #5
 80026c2:	2164      	movs	r1, #100	@ 0x64
 80026c4:	fb01 f303 	mul.w	r3, r1, r3
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	011b      	lsls	r3, r3, #4
 80026cc:	3332      	adds	r3, #50	@ 0x32
 80026ce:	4a0a      	ldr	r2, [pc, #40]	@ (80026f8 <LL_USART_SetBaudRate+0x458>)
 80026d0:	fba2 2303 	umull	r2, r3, r2, r3
 80026d4:	095b      	lsrs	r3, r3, #5
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	f003 030f 	and.w	r3, r3, #15
 80026dc:	b29b      	uxth	r3, r3
 80026de:	4423      	add	r3, r4
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	461a      	mov	r2, r3
 80026e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80026e8:	609a      	str	r2, [r3, #8]
}
 80026ea:	bf00      	nop
 80026ec:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80026f0:	46bd      	mov	sp, r7
 80026f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026f6:	bf00      	nop
 80026f8:	51eb851f 	.word	0x51eb851f

080026fc <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b088      	sub	sp, #32
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800270a:	2300      	movs	r3, #0
 800270c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f7ff fd8b 	bl	800222a <LL_USART_IsEnabled>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d15e      	bne.n	80027d8 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8002722:	f023 030c 	bic.w	r3, r3, #12
 8002726:	683a      	ldr	r2, [r7, #0]
 8002728:	6851      	ldr	r1, [r2, #4]
 800272a:	683a      	ldr	r2, [r7, #0]
 800272c:	68d2      	ldr	r2, [r2, #12]
 800272e:	4311      	orrs	r1, r2
 8002730:	683a      	ldr	r2, [r7, #0]
 8002732:	6912      	ldr	r2, [r2, #16]
 8002734:	4311      	orrs	r1, r2
 8002736:	683a      	ldr	r2, [r7, #0]
 8002738:	6992      	ldr	r2, [r2, #24]
 800273a:	430a      	orrs	r2, r1
 800273c:	431a      	orrs	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	4619      	mov	r1, r3
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f7ff fd82 	bl	8002252 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	695b      	ldr	r3, [r3, #20]
 8002752:	4619      	mov	r1, r3
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f7ff fd8f 	bl	8002278 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800275a:	f107 0308 	add.w	r3, r7, #8
 800275e:	4618      	mov	r0, r3
 8002760:	f7ff fc24 	bl	8001fac <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	4a1f      	ldr	r2, [pc, #124]	@ (80027e4 <LL_USART_Init+0xe8>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d102      	bne.n	8002772 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	61bb      	str	r3, [r7, #24]
 8002770:	e021      	b.n	80027b6 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a1c      	ldr	r2, [pc, #112]	@ (80027e8 <LL_USART_Init+0xec>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d102      	bne.n	8002780 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	61bb      	str	r3, [r7, #24]
 800277e:	e01a      	b.n	80027b6 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4a1a      	ldr	r2, [pc, #104]	@ (80027ec <LL_USART_Init+0xf0>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d102      	bne.n	800278e <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	61bb      	str	r3, [r7, #24]
 800278c:	e013      	b.n	80027b6 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a17      	ldr	r2, [pc, #92]	@ (80027f0 <LL_USART_Init+0xf4>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d102      	bne.n	800279c <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	61bb      	str	r3, [r7, #24]
 800279a:	e00c      	b.n	80027b6 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4a15      	ldr	r2, [pc, #84]	@ (80027f4 <LL_USART_Init+0xf8>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d102      	bne.n	80027aa <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	61bb      	str	r3, [r7, #24]
 80027a8:	e005      	b.n	80027b6 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a12      	ldr	r2, [pc, #72]	@ (80027f8 <LL_USART_Init+0xfc>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d101      	bne.n	80027b6 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d00d      	beq.n	80027d8 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d009      	beq.n	80027d8 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 80027c4:	2300      	movs	r3, #0
 80027c6:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 80027d0:	69b9      	ldr	r1, [r7, #24]
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f7ff fd64 	bl	80022a0 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80027d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3720      	adds	r7, #32
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	40011000 	.word	0x40011000
 80027e8:	40004400 	.word	0x40004400
 80027ec:	40004800 	.word	0x40004800
 80027f0:	40011400 	.word	0x40011400
 80027f4:	40004c00 	.word	0x40004c00
 80027f8:	40005000 	.word	0x40005000

080027fc <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002804:	4a04      	ldr	r2, [pc, #16]	@ (8002818 <LL_SetSystemCoreClock+0x1c>)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6013      	str	r3, [r2, #0]
}
 800280a:	bf00      	nop
 800280c:	370c      	adds	r7, #12
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	20000000 	.word	0x20000000

0800281c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b088      	sub	sp, #32
 8002820:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002822:	2300      	movs	r3, #0
 8002824:	61fb      	str	r3, [r7, #28]

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8002826:	4b75      	ldr	r3, [pc, #468]	@ (80029fc <xTaskIncrementTick+0x1e0>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2b00      	cmp	r3, #0
 800282c:	f040 80dc 	bne.w	80029e8 <xTaskIncrementTick+0x1cc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002830:	4b73      	ldr	r3, [pc, #460]	@ (8002a00 <xTaskIncrementTick+0x1e4>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	3301      	adds	r3, #1
 8002836:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002838:	4a71      	ldr	r2, [pc, #452]	@ (8002a00 <xTaskIncrementTick+0x1e4>)
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d110      	bne.n	8002866 <xTaskIncrementTick+0x4a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002844:	4b6f      	ldr	r3, [pc, #444]	@ (8002a04 <xTaskIncrementTick+0x1e8>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	617b      	str	r3, [r7, #20]
 800284a:	4b6f      	ldr	r3, [pc, #444]	@ (8002a08 <xTaskIncrementTick+0x1ec>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a6d      	ldr	r2, [pc, #436]	@ (8002a04 <xTaskIncrementTick+0x1e8>)
 8002850:	6013      	str	r3, [r2, #0]
 8002852:	4a6d      	ldr	r2, [pc, #436]	@ (8002a08 <xTaskIncrementTick+0x1ec>)
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	6013      	str	r3, [r2, #0]
 8002858:	4b6c      	ldr	r3, [pc, #432]	@ (8002a0c <xTaskIncrementTick+0x1f0>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	3301      	adds	r3, #1
 800285e:	4a6b      	ldr	r2, [pc, #428]	@ (8002a0c <xTaskIncrementTick+0x1f0>)
 8002860:	6013      	str	r3, [r2, #0]
 8002862:	f000 f929 	bl	8002ab8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002866:	4b6a      	ldr	r3, [pc, #424]	@ (8002a10 <xTaskIncrementTick+0x1f4>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	429a      	cmp	r2, r3
 800286e:	f0c0 80a6 	bcc.w	80029be <xTaskIncrementTick+0x1a2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002872:	4b64      	ldr	r3, [pc, #400]	@ (8002a04 <xTaskIncrementTick+0x1e8>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d104      	bne.n	8002886 <xTaskIncrementTick+0x6a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 800287c:	4b64      	ldr	r3, [pc, #400]	@ (8002a10 <xTaskIncrementTick+0x1f4>)
 800287e:	f04f 32ff 	mov.w	r2, #4294967295
 8002882:	601a      	str	r2, [r3, #0]
                    break;
 8002884:	e09b      	b.n	80029be <xTaskIncrementTick+0x1a2>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002886:	4b5f      	ldr	r3, [pc, #380]	@ (8002a04 <xTaskIncrementTick+0x1e8>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	429a      	cmp	r2, r3
 800289c:	d203      	bcs.n	80028a6 <xTaskIncrementTick+0x8a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800289e:	4a5c      	ldr	r2, [pc, #368]	@ (8002a10 <xTaskIncrementTick+0x1f4>)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6013      	str	r3, [r2, #0]
                        break;
 80028a4:	e08b      	b.n	80029be <xTaskIncrementTick+0x1a2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	695b      	ldr	r3, [r3, #20]
 80028aa:	60bb      	str	r3, [r7, #8]
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	693a      	ldr	r2, [r7, #16]
 80028b2:	68d2      	ldr	r2, [r2, #12]
 80028b4:	609a      	str	r2, [r3, #8]
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	693a      	ldr	r2, [r7, #16]
 80028bc:	6892      	ldr	r2, [r2, #8]
 80028be:	605a      	str	r2, [r3, #4]
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	685a      	ldr	r2, [r3, #4]
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	3304      	adds	r3, #4
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d103      	bne.n	80028d4 <xTaskIncrementTick+0xb8>
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	68da      	ldr	r2, [r3, #12]
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	605a      	str	r2, [r3, #4]
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	2200      	movs	r2, #0
 80028d8:	615a      	str	r2, [r3, #20]
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	1e5a      	subs	r2, r3, #1
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d01e      	beq.n	800292a <xTaskIncrementTick+0x10e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028f0:	607b      	str	r3, [r7, #4]
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	69db      	ldr	r3, [r3, #28]
 80028f6:	693a      	ldr	r2, [r7, #16]
 80028f8:	6a12      	ldr	r2, [r2, #32]
 80028fa:	609a      	str	r2, [r3, #8]
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	6a1b      	ldr	r3, [r3, #32]
 8002900:	693a      	ldr	r2, [r7, #16]
 8002902:	69d2      	ldr	r2, [r2, #28]
 8002904:	605a      	str	r2, [r3, #4]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685a      	ldr	r2, [r3, #4]
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	3318      	adds	r3, #24
 800290e:	429a      	cmp	r2, r3
 8002910:	d103      	bne.n	800291a <xTaskIncrementTick+0xfe>
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	6a1a      	ldr	r2, [r3, #32]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	605a      	str	r2, [r3, #4]
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	2200      	movs	r2, #0
 800291e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	1e5a      	subs	r2, r3, #1
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800292e:	2201      	movs	r2, #1
 8002930:	409a      	lsls	r2, r3
 8002932:	4b38      	ldr	r3, [pc, #224]	@ (8002a14 <xTaskIncrementTick+0x1f8>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4313      	orrs	r3, r2
 8002938:	4a36      	ldr	r2, [pc, #216]	@ (8002a14 <xTaskIncrementTick+0x1f8>)
 800293a:	6013      	str	r3, [r2, #0]
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002940:	4935      	ldr	r1, [pc, #212]	@ (8002a18 <xTaskIncrementTick+0x1fc>)
 8002942:	4613      	mov	r3, r2
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	4413      	add	r3, r2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	440b      	add	r3, r1
 800294c:	3304      	adds	r3, #4
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	603b      	str	r3, [r7, #0]
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	683a      	ldr	r2, [r7, #0]
 8002956:	609a      	str	r2, [r3, #8]
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	689a      	ldr	r2, [r3, #8]
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	60da      	str	r2, [r3, #12]
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	693a      	ldr	r2, [r7, #16]
 8002966:	3204      	adds	r2, #4
 8002968:	605a      	str	r2, [r3, #4]
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	1d1a      	adds	r2, r3, #4
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	609a      	str	r2, [r3, #8]
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002976:	4613      	mov	r3, r2
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	4413      	add	r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	4a26      	ldr	r2, [pc, #152]	@ (8002a18 <xTaskIncrementTick+0x1fc>)
 8002980:	441a      	add	r2, r3
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	615a      	str	r2, [r3, #20]
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800298a:	4923      	ldr	r1, [pc, #140]	@ (8002a18 <xTaskIncrementTick+0x1fc>)
 800298c:	4613      	mov	r3, r2
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	4413      	add	r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	440b      	add	r3, r1
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	1c59      	adds	r1, r3, #1
 800299a:	481f      	ldr	r0, [pc, #124]	@ (8002a18 <xTaskIncrementTick+0x1fc>)
 800299c:	4613      	mov	r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	4413      	add	r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	4403      	add	r3, r0
 80029a6:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029ac:	4b1b      	ldr	r3, [pc, #108]	@ (8002a1c <xTaskIncrementTick+0x200>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b2:	429a      	cmp	r2, r3
 80029b4:	f67f af5d 	bls.w	8002872 <xTaskIncrementTick+0x56>
                            {
                                xSwitchRequired = pdTRUE;
 80029b8:	2301      	movs	r3, #1
 80029ba:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80029bc:	e759      	b.n	8002872 <xTaskIncrementTick+0x56>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 80029be:	4b17      	ldr	r3, [pc, #92]	@ (8002a1c <xTaskIncrementTick+0x200>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029c4:	4914      	ldr	r1, [pc, #80]	@ (8002a18 <xTaskIncrementTick+0x1fc>)
 80029c6:	4613      	mov	r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	4413      	add	r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	440b      	add	r3, r1
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d901      	bls.n	80029da <xTaskIncrementTick+0x1be>
                {
                    xSwitchRequired = pdTRUE;
 80029d6:	2301      	movs	r3, #1
 80029d8:	61fb      	str	r3, [r7, #28]
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 80029da:	4b11      	ldr	r3, [pc, #68]	@ (8002a20 <xTaskIncrementTick+0x204>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d007      	beq.n	80029f2 <xTaskIncrementTick+0x1d6>
                {
                    xSwitchRequired = pdTRUE;
 80029e2:	2301      	movs	r3, #1
 80029e4:	61fb      	str	r3, [r7, #28]
 80029e6:	e004      	b.n	80029f2 <xTaskIncrementTick+0x1d6>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        ++xPendedTicks;
 80029e8:	4b0e      	ldr	r3, [pc, #56]	@ (8002a24 <xTaskIncrementTick+0x208>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	3301      	adds	r3, #1
 80029ee:	4a0d      	ldr	r2, [pc, #52]	@ (8002a24 <xTaskIncrementTick+0x208>)
 80029f0:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 80029f2:	69fb      	ldr	r3, [r7, #28]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3720      	adds	r7, #32
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	20000104 	.word	0x20000104
 8002a00:	200000ec 	.word	0x200000ec
 8002a04:	200000e4 	.word	0x200000e4
 8002a08:	200000e8 	.word	0x200000e8
 8002a0c:	200000fc 	.word	0x200000fc
 8002a10:	20000100 	.word	0x20000100
 8002a14:	200000f0 	.word	0x200000f0
 8002a18:	20000080 	.word	0x20000080
 8002a1c:	2000007c 	.word	0x2000007c
 8002a20:	200000f8 	.word	0x200000f8
 8002a24:	200000f4 	.word	0x200000f4

08002a28 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8002a28:	b480      	push	{r7}
 8002a2a:	b085      	sub	sp, #20
 8002a2c:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8002a2e:	4b1d      	ldr	r3, [pc, #116]	@ (8002aa4 <vTaskSwitchContext+0x7c>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d003      	beq.n	8002a3e <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8002a36:	4b1c      	ldr	r3, [pc, #112]	@ (8002aa8 <vTaskSwitchContext+0x80>)
 8002a38:	2201      	movs	r2, #1
 8002a3a:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8002a3c:	e02b      	b.n	8002a96 <vTaskSwitchContext+0x6e>
            xYieldPendings[ 0 ] = pdFALSE;
 8002a3e:	4b1a      	ldr	r3, [pc, #104]	@ (8002aa8 <vTaskSwitchContext+0x80>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8002a44:	4b19      	ldr	r3, [pc, #100]	@ (8002aac <vTaskSwitchContext+0x84>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	607b      	str	r3, [r7, #4]
/* Generic helper function. */
    __attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
    {
        uint8_t ucReturn;

        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	fab3 f383 	clz	r3, r3
 8002a50:	70fb      	strb	r3, [r7, #3]

        return ucReturn;
 8002a52:	78fb      	ldrb	r3, [r7, #3]
 8002a54:	f1c3 031f 	rsb	r3, r3, #31
 8002a58:	60fb      	str	r3, [r7, #12]
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	4413      	add	r3, r2
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	4a12      	ldr	r2, [pc, #72]	@ (8002ab0 <vTaskSwitchContext+0x88>)
 8002a66:	4413      	add	r3, r2
 8002a68:	60bb      	str	r3, [r7, #8]
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	685a      	ldr	r2, [r3, #4]
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	605a      	str	r2, [r3, #4]
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	685a      	ldr	r2, [r3, #4]
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	3308      	adds	r3, #8
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d103      	bne.n	8002a88 <vTaskSwitchContext+0x60>
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	68da      	ldr	r2, [r3, #12]
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	605a      	str	r2, [r3, #4]
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	4a09      	ldr	r2, [pc, #36]	@ (8002ab4 <vTaskSwitchContext+0x8c>)
 8002a90:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8002a92:	4b08      	ldr	r3, [pc, #32]	@ (8002ab4 <vTaskSwitchContext+0x8c>)
 8002a94:	681b      	ldr	r3, [r3, #0]
    }
 8002a96:	bf00      	nop
 8002a98:	3714      	adds	r7, #20
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	20000104 	.word	0x20000104
 8002aa8:	200000f8 	.word	0x200000f8
 8002aac:	200000f0 	.word	0x200000f0
 8002ab0:	20000080 	.word	0x20000080
 8002ab4:	2000007c 	.word	0x2000007c

08002ab8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002abc:	4b0a      	ldr	r3, [pc, #40]	@ (8002ae8 <prvResetNextTaskUnblockTime+0x30>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d104      	bne.n	8002ad0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002ac6:	4b09      	ldr	r3, [pc, #36]	@ (8002aec <prvResetNextTaskUnblockTime+0x34>)
 8002ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8002acc:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002ace:	e005      	b.n	8002adc <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002ad0:	4b05      	ldr	r3, [pc, #20]	@ (8002ae8 <prvResetNextTaskUnblockTime+0x30>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a04      	ldr	r2, [pc, #16]	@ (8002aec <prvResetNextTaskUnblockTime+0x34>)
 8002ada:	6013      	str	r3, [r2, #0]
}
 8002adc:	bf00      	nop
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	200000e4 	.word	0x200000e4
 8002aec:	20000100 	.word	0x20000100

08002af0 <vPortSVCHandler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002af0:	4b07      	ldr	r3, [pc, #28]	@ (8002b10 <pxCurrentTCBConst2>)
 8002af2:	6819      	ldr	r1, [r3, #0]
 8002af4:	6808      	ldr	r0, [r1, #0]
 8002af6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002afa:	f380 8809 	msr	PSP, r0
 8002afe:	f3bf 8f6f 	isb	sy
 8002b02:	f04f 0000 	mov.w	r0, #0
 8002b06:	f380 8811 	msr	BASEPRI, r0
 8002b0a:	4770      	bx	lr
 8002b0c:	f3af 8000 	nop.w

08002b10 <pxCurrentTCBConst2>:
 8002b10:	2000007c 	.word	0x2000007c
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8002b14:	bf00      	nop
 8002b16:	bf00      	nop
	...

08002b20 <xPortPendSVHandler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002b20:	f3ef 8009 	mrs	r0, PSP
 8002b24:	f3bf 8f6f 	isb	sy
 8002b28:	4b15      	ldr	r3, [pc, #84]	@ (8002b80 <pxCurrentTCBConst>)
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	f01e 0f10 	tst.w	lr, #16
 8002b30:	bf08      	it	eq
 8002b32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002b36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b3a:	6010      	str	r0, [r2, #0]
 8002b3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002b40:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8002b44:	f380 8811 	msr	BASEPRI, r0
 8002b48:	f3bf 8f4f 	dsb	sy
 8002b4c:	f3bf 8f6f 	isb	sy
 8002b50:	f7ff ff6a 	bl	8002a28 <vTaskSwitchContext>
 8002b54:	f04f 0000 	mov.w	r0, #0
 8002b58:	f380 8811 	msr	BASEPRI, r0
 8002b5c:	bc09      	pop	{r0, r3}
 8002b5e:	6819      	ldr	r1, [r3, #0]
 8002b60:	6808      	ldr	r0, [r1, #0]
 8002b62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b66:	f01e 0f10 	tst.w	lr, #16
 8002b6a:	bf08      	it	eq
 8002b6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002b70:	f380 8809 	msr	PSP, r0
 8002b74:	f3bf 8f6f 	isb	sy
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	f3af 8000 	nop.w

08002b80 <pxCurrentTCBConst>:
 8002b80:	2000007c 	.word	0x2000007c
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002b84:	bf00      	nop
 8002b86:	bf00      	nop

08002b88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 8002b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b92:	f383 8811 	msr	BASEPRI, r3
 8002b96:	f3bf 8f6f 	isb	sy
 8002b9a:	f3bf 8f4f 	dsb	sy
 8002b9e:	607b      	str	r3, [r7, #4]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 8002ba0:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002ba2:	f7ff fe3b 	bl	800281c <xTaskIncrementTick>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d003      	beq.n	8002bb4 <xPortSysTickHandler+0x2c>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002bac:	4b06      	ldr	r3, [pc, #24]	@ (8002bc8 <xPortSysTickHandler+0x40>)
 8002bae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002bb2:	601a      	str	r2, [r3, #0]
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 8002bbe:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 8002bc0:	bf00      	nop
 8002bc2:	3708      	adds	r7, #8
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	e000ed04 	.word	0xe000ed04

08002bcc <memset>:
 8002bcc:	4402      	add	r2, r0
 8002bce:	4603      	mov	r3, r0
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d100      	bne.n	8002bd6 <memset+0xa>
 8002bd4:	4770      	bx	lr
 8002bd6:	f803 1b01 	strb.w	r1, [r3], #1
 8002bda:	e7f9      	b.n	8002bd0 <memset+0x4>

08002bdc <__libc_init_array>:
 8002bdc:	b570      	push	{r4, r5, r6, lr}
 8002bde:	4d0d      	ldr	r5, [pc, #52]	@ (8002c14 <__libc_init_array+0x38>)
 8002be0:	4c0d      	ldr	r4, [pc, #52]	@ (8002c18 <__libc_init_array+0x3c>)
 8002be2:	1b64      	subs	r4, r4, r5
 8002be4:	10a4      	asrs	r4, r4, #2
 8002be6:	2600      	movs	r6, #0
 8002be8:	42a6      	cmp	r6, r4
 8002bea:	d109      	bne.n	8002c00 <__libc_init_array+0x24>
 8002bec:	4d0b      	ldr	r5, [pc, #44]	@ (8002c1c <__libc_init_array+0x40>)
 8002bee:	4c0c      	ldr	r4, [pc, #48]	@ (8002c20 <__libc_init_array+0x44>)
 8002bf0:	f000 f818 	bl	8002c24 <_init>
 8002bf4:	1b64      	subs	r4, r4, r5
 8002bf6:	10a4      	asrs	r4, r4, #2
 8002bf8:	2600      	movs	r6, #0
 8002bfa:	42a6      	cmp	r6, r4
 8002bfc:	d105      	bne.n	8002c0a <__libc_init_array+0x2e>
 8002bfe:	bd70      	pop	{r4, r5, r6, pc}
 8002c00:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c04:	4798      	blx	r3
 8002c06:	3601      	adds	r6, #1
 8002c08:	e7ee      	b.n	8002be8 <__libc_init_array+0xc>
 8002c0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c0e:	4798      	blx	r3
 8002c10:	3601      	adds	r6, #1
 8002c12:	e7f2      	b.n	8002bfa <__libc_init_array+0x1e>
 8002c14:	08002c5c 	.word	0x08002c5c
 8002c18:	08002c5c 	.word	0x08002c5c
 8002c1c:	08002c5c 	.word	0x08002c5c
 8002c20:	08002c60 	.word	0x08002c60

08002c24 <_init>:
 8002c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c26:	bf00      	nop
 8002c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c2a:	bc08      	pop	{r3}
 8002c2c:	469e      	mov	lr, r3
 8002c2e:	4770      	bx	lr

08002c30 <_fini>:
 8002c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c32:	bf00      	nop
 8002c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c36:	bc08      	pop	{r3}
 8002c38:	469e      	mov	lr, r3
 8002c3a:	4770      	bx	lr
