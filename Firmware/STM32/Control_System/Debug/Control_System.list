
Control_System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036bc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800384c  0800384c  0000484c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800386c  0800386c  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  0800386c  0800386c  0000486c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003874  08003874  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003874  08003874  00004874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003878  08003878  00004878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800387c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          0000018c  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000198  20000198  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010484  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002bf7  00000000  00000000  000154c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010c8  00000000  00000000  000180b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cb9  00000000  00000000  00019180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028974  00000000  00000000  00019e39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018463  00000000  00000000  000427ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fa247  00000000  00000000  0005ac10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00154e57  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004580  00000000  00000000  00154e9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  0015941c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000000c 	.word	0x2000000c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003834 	.word	0x08003834

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000010 	.word	0x20000010
 80001cc:	08003834 	.word	0x08003834

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80004c4:	4b04      	ldr	r3, [pc, #16]	@ (80004d8 <__NVIC_GetPriorityGrouping+0x18>)
 80004c6:	68db      	ldr	r3, [r3, #12]
 80004c8:	0a1b      	lsrs	r3, r3, #8
 80004ca:	f003 0307 	and.w	r3, r3, #7
}
 80004ce:	4618      	mov	r0, r3
 80004d0:	46bd      	mov	sp, r7
 80004d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d6:	4770      	bx	lr
 80004d8:	e000ed00 	.word	0xe000ed00

080004dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	4603      	mov	r3, r0
 80004e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	db0b      	blt.n	8000506 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004ee:	79fb      	ldrb	r3, [r7, #7]
 80004f0:	f003 021f 	and.w	r2, r3, #31
 80004f4:	4907      	ldr	r1, [pc, #28]	@ (8000514 <__NVIC_EnableIRQ+0x38>)
 80004f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004fa:	095b      	lsrs	r3, r3, #5
 80004fc:	2001      	movs	r0, #1
 80004fe:	fa00 f202 	lsl.w	r2, r0, r2
 8000502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000506:	bf00      	nop
 8000508:	370c      	adds	r7, #12
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop
 8000514:	e000e100 	.word	0xe000e100

08000518 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000518:	b480      	push	{r7}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	4603      	mov	r3, r0
 8000520:	6039      	str	r1, [r7, #0]
 8000522:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000528:	2b00      	cmp	r3, #0
 800052a:	db0a      	blt.n	8000542 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	b2da      	uxtb	r2, r3
 8000530:	490c      	ldr	r1, [pc, #48]	@ (8000564 <__NVIC_SetPriority+0x4c>)
 8000532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000536:	0112      	lsls	r2, r2, #4
 8000538:	b2d2      	uxtb	r2, r2
 800053a:	440b      	add	r3, r1
 800053c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000540:	e00a      	b.n	8000558 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000542:	683b      	ldr	r3, [r7, #0]
 8000544:	b2da      	uxtb	r2, r3
 8000546:	4908      	ldr	r1, [pc, #32]	@ (8000568 <__NVIC_SetPriority+0x50>)
 8000548:	79fb      	ldrb	r3, [r7, #7]
 800054a:	f003 030f 	and.w	r3, r3, #15
 800054e:	3b04      	subs	r3, #4
 8000550:	0112      	lsls	r2, r2, #4
 8000552:	b2d2      	uxtb	r2, r2
 8000554:	440b      	add	r3, r1
 8000556:	761a      	strb	r2, [r3, #24]
}
 8000558:	bf00      	nop
 800055a:	370c      	adds	r7, #12
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr
 8000564:	e000e100 	.word	0xe000e100
 8000568:	e000ed00 	.word	0xe000ed00

0800056c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800056c:	b480      	push	{r7}
 800056e:	b089      	sub	sp, #36	@ 0x24
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	60b9      	str	r1, [r7, #8]
 8000576:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	f003 0307 	and.w	r3, r3, #7
 800057e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000580:	69fb      	ldr	r3, [r7, #28]
 8000582:	f1c3 0307 	rsb	r3, r3, #7
 8000586:	2b04      	cmp	r3, #4
 8000588:	bf28      	it	cs
 800058a:	2304      	movcs	r3, #4
 800058c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800058e:	69fb      	ldr	r3, [r7, #28]
 8000590:	3304      	adds	r3, #4
 8000592:	2b06      	cmp	r3, #6
 8000594:	d902      	bls.n	800059c <NVIC_EncodePriority+0x30>
 8000596:	69fb      	ldr	r3, [r7, #28]
 8000598:	3b03      	subs	r3, #3
 800059a:	e000      	b.n	800059e <NVIC_EncodePriority+0x32>
 800059c:	2300      	movs	r3, #0
 800059e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005a0:	f04f 32ff 	mov.w	r2, #4294967295
 80005a4:	69bb      	ldr	r3, [r7, #24]
 80005a6:	fa02 f303 	lsl.w	r3, r2, r3
 80005aa:	43da      	mvns	r2, r3
 80005ac:	68bb      	ldr	r3, [r7, #8]
 80005ae:	401a      	ands	r2, r3
 80005b0:	697b      	ldr	r3, [r7, #20]
 80005b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005b4:	f04f 31ff 	mov.w	r1, #4294967295
 80005b8:	697b      	ldr	r3, [r7, #20]
 80005ba:	fa01 f303 	lsl.w	r3, r1, r3
 80005be:	43d9      	mvns	r1, r3
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005c4:	4313      	orrs	r3, r2
         );
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	3724      	adds	r7, #36	@ 0x24
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr

080005d2 <LL_ADC_REG_SetSequencerRanks>:
  *         (1) On STM32F4, parameter available only on ADC instance: ADC1.\n
  *         (2) On devices STM32F42x and STM32F43x, limitation: this internal channel is shared between temperature sensor and Vbat, only 1 measurement path must be enabled.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80005d2:	b480      	push	{r7}
 80005d4:	b089      	sub	sp, #36	@ 0x24
 80005d6:	af00      	add	r7, sp, #0
 80005d8:	60f8      	str	r0, [r7, #12]
 80005da:	60b9      	str	r1, [r7, #8]
 80005dc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	332c      	adds	r3, #44	@ 0x2c
 80005e2:	4619      	mov	r1, r3
 80005e4:	68bb      	ldr	r3, [r7, #8]
 80005e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80005ea:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80005ee:	617a      	str	r2, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80005f0:	697a      	ldr	r2, [r7, #20]
 80005f2:	fa92 f2a2 	rbit	r2, r2
 80005f6:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80005f8:	693a      	ldr	r2, [r7, #16]
 80005fa:	61ba      	str	r2, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80005fc:	69ba      	ldr	r2, [r7, #24]
 80005fe:	2a00      	cmp	r2, #0
 8000600:	d101      	bne.n	8000606 <LL_ADC_REG_SetSequencerRanks+0x34>
  {
    return 32U;
 8000602:	2220      	movs	r2, #32
 8000604:	e003      	b.n	800060e <LL_ADC_REG_SetSequencerRanks+0x3c>
  }
  return __builtin_clz(value);
 8000606:	69ba      	ldr	r2, [r7, #24]
 8000608:	fab2 f282 	clz	r2, r2
 800060c:	b2d2      	uxtb	r2, r2
 800060e:	40d3      	lsrs	r3, r2
 8000610:	009b      	lsls	r3, r3, #2
 8000612:	440b      	add	r3, r1
 8000614:	61fb      	str	r3, [r7, #28]

  MODIFY_REG(*preg,
 8000616:	69fb      	ldr	r3, [r7, #28]
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	68bb      	ldr	r3, [r7, #8]
 800061c:	f003 031f 	and.w	r3, r3, #31
 8000620:	211f      	movs	r1, #31
 8000622:	fa01 f303 	lsl.w	r3, r1, r3
 8000626:	43db      	mvns	r3, r3
 8000628:	401a      	ands	r2, r3
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	f003 011f 	and.w	r1, r3, #31
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	f003 031f 	and.w	r3, r3, #31
 8000636:	fa01 f303 	lsl.w	r3, r1, r3
 800063a:	431a      	orrs	r2, r3
 800063c:	69fb      	ldr	r3, [r7, #28]
 800063e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000640:	bf00      	nop
 8000642:	3724      	adds	r7, #36	@ 0x24
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr

0800064c <LL_ADC_REG_SetFlagEndOfConversion>:
  *         @arg @ref LL_ADC_REG_FLAG_EOC_SEQUENCE_CONV
  *         @arg @ref LL_ADC_REG_FLAG_EOC_UNITARY_CONV
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetFlagEndOfConversion(ADC_TypeDef *ADCx, uint32_t EocSelection)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_EOCS, EocSelection);
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	689b      	ldr	r3, [r3, #8]
 800065a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800065e:	683b      	ldr	r3, [r7, #0]
 8000660:	431a      	orrs	r2, r3
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	609a      	str	r2, [r3, #8]
}
 8000666:	bf00      	nop
 8000668:	370c      	adds	r7, #12
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr

08000672 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_144CYCLES
  *         @arg @ref LL_ADC_SAMPLINGTIME_480CYCLES
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000672:	b480      	push	{r7}
 8000674:	b08f      	sub	sp, #60	@ 0x3c
 8000676:	af00      	add	r7, sp, #0
 8000678:	60f8      	str	r0, [r7, #12]
 800067a:	60b9      	str	r1, [r7, #8]
 800067c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	330c      	adds	r3, #12
 8000682:	4619      	mov	r1, r3
 8000684:	68bb      	ldr	r3, [r7, #8]
 8000686:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800068a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800068e:	617a      	str	r2, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000690:	697a      	ldr	r2, [r7, #20]
 8000692:	fa92 f2a2 	rbit	r2, r2
 8000696:	613a      	str	r2, [r7, #16]
  return result;
 8000698:	693a      	ldr	r2, [r7, #16]
 800069a:	61ba      	str	r2, [r7, #24]
  if (value == 0U)
 800069c:	69ba      	ldr	r2, [r7, #24]
 800069e:	2a00      	cmp	r2, #0
 80006a0:	d101      	bne.n	80006a6 <LL_ADC_SetChannelSamplingTime+0x34>
    return 32U;
 80006a2:	2220      	movs	r2, #32
 80006a4:	e003      	b.n	80006ae <LL_ADC_SetChannelSamplingTime+0x3c>
  return __builtin_clz(value);
 80006a6:	69ba      	ldr	r2, [r7, #24]
 80006a8:	fab2 f282 	clz	r2, r2
 80006ac:	b2d2      	uxtb	r2, r2
 80006ae:	40d3      	lsrs	r3, r2
 80006b0:	009b      	lsls	r3, r3, #2
 80006b2:	440b      	add	r3, r1
 80006b4:	637b      	str	r3, [r7, #52]	@ 0x34

  MODIFY_REG(*preg,
 80006b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80006b8:	681a      	ldr	r2, [r3, #0]
 80006ba:	68bb      	ldr	r3, [r7, #8]
 80006bc:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 80006c0:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 80006c4:	6239      	str	r1, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006c6:	6a39      	ldr	r1, [r7, #32]
 80006c8:	fa91 f1a1 	rbit	r1, r1
 80006cc:	61f9      	str	r1, [r7, #28]
  return result;
 80006ce:	69f9      	ldr	r1, [r7, #28]
 80006d0:	6279      	str	r1, [r7, #36]	@ 0x24
  if (value == 0U)
 80006d2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80006d4:	2900      	cmp	r1, #0
 80006d6:	d101      	bne.n	80006dc <LL_ADC_SetChannelSamplingTime+0x6a>
    return 32U;
 80006d8:	2120      	movs	r1, #32
 80006da:	e003      	b.n	80006e4 <LL_ADC_SetChannelSamplingTime+0x72>
  return __builtin_clz(value);
 80006dc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80006de:	fab1 f181 	clz	r1, r1
 80006e2:	b2c9      	uxtb	r1, r1
 80006e4:	40cb      	lsrs	r3, r1
 80006e6:	2107      	movs	r1, #7
 80006e8:	fa01 f303 	lsl.w	r3, r1, r3
 80006ec:	43db      	mvns	r3, r3
 80006ee:	401a      	ands	r2, r3
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 80006f6:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 80006fa:	62f9      	str	r1, [r7, #44]	@ 0x2c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006fc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80006fe:	fa91 f1a1 	rbit	r1, r1
 8000702:	62b9      	str	r1, [r7, #40]	@ 0x28
  return result;
 8000704:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000706:	6339      	str	r1, [r7, #48]	@ 0x30
  if (value == 0U)
 8000708:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800070a:	2900      	cmp	r1, #0
 800070c:	d101      	bne.n	8000712 <LL_ADC_SetChannelSamplingTime+0xa0>
    return 32U;
 800070e:	2120      	movs	r1, #32
 8000710:	e003      	b.n	800071a <LL_ADC_SetChannelSamplingTime+0xa8>
  return __builtin_clz(value);
 8000712:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000714:	fab1 f181 	clz	r1, r1
 8000718:	b2c9      	uxtb	r1, r1
 800071a:	40cb      	lsrs	r3, r1
 800071c:	6879      	ldr	r1, [r7, #4]
 800071e:	fa01 f303 	lsl.w	r3, r1, r3
 8000722:	431a      	orrs	r2, r3
 8000724:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000726:	601a      	str	r2, [r3, #0]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 8000728:	bf00      	nop
 800072a:	373c      	adds	r7, #60	@ 0x3c
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr

08000734 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Direction)
{
 8000734:	b480      	push	{r7}
 8000736:	b085      	sub	sp, #20
 8000738:	af00      	add	r7, sp, #0
 800073a:	60f8      	str	r0, [r7, #12]
 800073c:	60b9      	str	r1, [r7, #8]
 800073e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 8000740:	4a0d      	ldr	r2, [pc, #52]	@ (8000778 <LL_DMA_SetDataTransferDirection+0x44>)
 8000742:	68bb      	ldr	r3, [r7, #8]
 8000744:	4413      	add	r3, r2
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	461a      	mov	r2, r3
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	4413      	add	r3, r2
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8000754:	4908      	ldr	r1, [pc, #32]	@ (8000778 <LL_DMA_SetDataTransferDirection+0x44>)
 8000756:	68bb      	ldr	r3, [r7, #8]
 8000758:	440b      	add	r3, r1
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	4619      	mov	r1, r3
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	440b      	add	r3, r1
 8000762:	4619      	mov	r1, r3
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	4313      	orrs	r3, r2
 8000768:	600b      	str	r3, [r1, #0]
}
 800076a:	bf00      	nop
 800076c:	3714      	adds	r7, #20
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	0800384c 	.word	0x0800384c

0800077c <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  *         @arg @ref LL_DMA_MODE_PFCTRL
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Mode)
{
 800077c:	b480      	push	{r7}
 800077e:	b085      	sub	sp, #20
 8000780:	af00      	add	r7, sp, #0
 8000782:	60f8      	str	r0, [r7, #12]
 8000784:	60b9      	str	r1, [r7, #8]
 8000786:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8000788:	4a0d      	ldr	r2, [pc, #52]	@ (80007c0 <LL_DMA_SetMode+0x44>)
 800078a:	68bb      	ldr	r3, [r7, #8]
 800078c:	4413      	add	r3, r2
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	461a      	mov	r2, r3
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	4413      	add	r3, r2
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f423 7290 	bic.w	r2, r3, #288	@ 0x120
 800079c:	4908      	ldr	r1, [pc, #32]	@ (80007c0 <LL_DMA_SetMode+0x44>)
 800079e:	68bb      	ldr	r3, [r7, #8]
 80007a0:	440b      	add	r3, r1
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	4619      	mov	r1, r3
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	440b      	add	r3, r1
 80007aa:	4619      	mov	r1, r3
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	4313      	orrs	r3, r2
 80007b0:	600b      	str	r3, [r1, #0]
}
 80007b2:	bf00      	nop
 80007b4:	3714      	adds	r7, #20
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	0800384c 	.word	0x0800384c

080007c4 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b085      	sub	sp, #20
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	60f8      	str	r0, [r7, #12]
 80007cc:	60b9      	str	r1, [r7, #8]
 80007ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 80007d0:	4a0d      	ldr	r2, [pc, #52]	@ (8000808 <LL_DMA_SetPeriphIncMode+0x44>)
 80007d2:	68bb      	ldr	r3, [r7, #8]
 80007d4:	4413      	add	r3, r2
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	461a      	mov	r2, r3
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	4413      	add	r3, r2
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80007e4:	4908      	ldr	r1, [pc, #32]	@ (8000808 <LL_DMA_SetPeriphIncMode+0x44>)
 80007e6:	68bb      	ldr	r3, [r7, #8]
 80007e8:	440b      	add	r3, r1
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	4619      	mov	r1, r3
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	440b      	add	r3, r1
 80007f2:	4619      	mov	r1, r3
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	4313      	orrs	r3, r2
 80007f8:	600b      	str	r3, [r1, #0]
}
 80007fa:	bf00      	nop
 80007fc:	3714      	adds	r7, #20
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	0800384c 	.word	0x0800384c

0800080c <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 800080c:	b480      	push	{r7}
 800080e:	b085      	sub	sp, #20
 8000810:	af00      	add	r7, sp, #0
 8000812:	60f8      	str	r0, [r7, #12]
 8000814:	60b9      	str	r1, [r7, #8]
 8000816:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 8000818:	4a0d      	ldr	r2, [pc, #52]	@ (8000850 <LL_DMA_SetMemoryIncMode+0x44>)
 800081a:	68bb      	ldr	r3, [r7, #8]
 800081c:	4413      	add	r3, r2
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	461a      	mov	r2, r3
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	4413      	add	r3, r2
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800082c:	4908      	ldr	r1, [pc, #32]	@ (8000850 <LL_DMA_SetMemoryIncMode+0x44>)
 800082e:	68bb      	ldr	r3, [r7, #8]
 8000830:	440b      	add	r3, r1
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	4619      	mov	r1, r3
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	440b      	add	r3, r1
 800083a:	4619      	mov	r1, r3
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	4313      	orrs	r3, r2
 8000840:	600b      	str	r3, [r1, #0]
}
 8000842:	bf00      	nop
 8000844:	3714      	adds	r7, #20
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	0800384c 	.word	0x0800384c

08000854 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 8000854:	b480      	push	{r7}
 8000856:	b085      	sub	sp, #20
 8000858:	af00      	add	r7, sp, #0
 800085a:	60f8      	str	r0, [r7, #12]
 800085c:	60b9      	str	r1, [r7, #8]
 800085e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 8000860:	4a0d      	ldr	r2, [pc, #52]	@ (8000898 <LL_DMA_SetPeriphSize+0x44>)
 8000862:	68bb      	ldr	r3, [r7, #8]
 8000864:	4413      	add	r3, r2
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	461a      	mov	r2, r3
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	4413      	add	r3, r2
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8000874:	4908      	ldr	r1, [pc, #32]	@ (8000898 <LL_DMA_SetPeriphSize+0x44>)
 8000876:	68bb      	ldr	r3, [r7, #8]
 8000878:	440b      	add	r3, r1
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	4619      	mov	r1, r3
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	440b      	add	r3, r1
 8000882:	4619      	mov	r1, r3
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	4313      	orrs	r3, r2
 8000888:	600b      	str	r3, [r1, #0]
}
 800088a:	bf00      	nop
 800088c:	3714      	adds	r7, #20
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	0800384c 	.word	0x0800384c

0800089c <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 800089c:	b480      	push	{r7}
 800089e:	b085      	sub	sp, #20
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	60f8      	str	r0, [r7, #12]
 80008a4:	60b9      	str	r1, [r7, #8]
 80008a6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 80008a8:	4a0d      	ldr	r2, [pc, #52]	@ (80008e0 <LL_DMA_SetMemorySize+0x44>)
 80008aa:	68bb      	ldr	r3, [r7, #8]
 80008ac:	4413      	add	r3, r2
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	461a      	mov	r2, r3
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	4413      	add	r3, r2
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	f423 42c0 	bic.w	r2, r3, #24576	@ 0x6000
 80008bc:	4908      	ldr	r1, [pc, #32]	@ (80008e0 <LL_DMA_SetMemorySize+0x44>)
 80008be:	68bb      	ldr	r3, [r7, #8]
 80008c0:	440b      	add	r3, r1
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	4619      	mov	r1, r3
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	440b      	add	r3, r1
 80008ca:	4619      	mov	r1, r3
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	4313      	orrs	r3, r2
 80008d0:	600b      	str	r3, [r1, #0]
}
 80008d2:	bf00      	nop
 80008d4:	3714      	adds	r7, #20
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	0800384c 	.word	0x0800384c

080008e4 <LL_DMA_SetStreamPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetStreamPriorityLevel(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Priority)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b085      	sub	sp, #20
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	60f8      	str	r0, [r7, #12]
 80008ec:	60b9      	str	r1, [r7, #8]
 80008ee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 80008f0:	4a0d      	ldr	r2, [pc, #52]	@ (8000928 <LL_DMA_SetStreamPriorityLevel+0x44>)
 80008f2:	68bb      	ldr	r3, [r7, #8]
 80008f4:	4413      	add	r3, r2
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	461a      	mov	r2, r3
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	4413      	add	r3, r2
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000904:	4908      	ldr	r1, [pc, #32]	@ (8000928 <LL_DMA_SetStreamPriorityLevel+0x44>)
 8000906:	68bb      	ldr	r3, [r7, #8]
 8000908:	440b      	add	r3, r1
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	4619      	mov	r1, r3
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	440b      	add	r3, r1
 8000912:	4619      	mov	r1, r3
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	4313      	orrs	r3, r2
 8000918:	600b      	str	r3, [r1, #0]
}
 800091a:	bf00      	nop
 800091c:	3714      	adds	r7, #20
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	0800384c 	.word	0x0800384c

0800092c <LL_DMA_SetChannelSelection>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelSelection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Channel)
{
 800092c:	b480      	push	{r7}
 800092e:	b085      	sub	sp, #20
 8000930:	af00      	add	r7, sp, #0
 8000932:	60f8      	str	r0, [r7, #12]
 8000934:	60b9      	str	r1, [r7, #8]
 8000936:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 8000938:	4a0d      	ldr	r2, [pc, #52]	@ (8000970 <LL_DMA_SetChannelSelection+0x44>)
 800093a:	68bb      	ldr	r3, [r7, #8]
 800093c:	4413      	add	r3, r2
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	461a      	mov	r2, r3
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	4413      	add	r3, r2
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800094c:	4908      	ldr	r1, [pc, #32]	@ (8000970 <LL_DMA_SetChannelSelection+0x44>)
 800094e:	68bb      	ldr	r3, [r7, #8]
 8000950:	440b      	add	r3, r1
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	4619      	mov	r1, r3
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	440b      	add	r3, r1
 800095a:	4619      	mov	r1, r3
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	4313      	orrs	r3, r2
 8000960:	600b      	str	r3, [r1, #0]
}
 8000962:	bf00      	nop
 8000964:	3714      	adds	r7, #20
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	0800384c 	.word	0x0800384c

08000974 <LL_DMA_DisableFifoMode>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableFifoMode(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
 800097c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 800097e:	4a0c      	ldr	r2, [pc, #48]	@ (80009b0 <LL_DMA_DisableFifoMode+0x3c>)
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	4413      	add	r3, r2
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	461a      	mov	r2, r3
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	4413      	add	r3, r2
 800098c:	695b      	ldr	r3, [r3, #20]
 800098e:	4908      	ldr	r1, [pc, #32]	@ (80009b0 <LL_DMA_DisableFifoMode+0x3c>)
 8000990:	683a      	ldr	r2, [r7, #0]
 8000992:	440a      	add	r2, r1
 8000994:	7812      	ldrb	r2, [r2, #0]
 8000996:	4611      	mov	r1, r2
 8000998:	687a      	ldr	r2, [r7, #4]
 800099a:	440a      	add	r2, r1
 800099c:	f023 0304 	bic.w	r3, r3, #4
 80009a0:	6153      	str	r3, [r2, #20]
}
 80009a2:	bf00      	nop
 80009a4:	370c      	adds	r7, #12
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	0800384c 	.word	0x0800384c

080009b4 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80009b8:	4b05      	ldr	r3, [pc, #20]	@ (80009d0 <LL_RCC_HSE_Enable+0x1c>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a04      	ldr	r2, [pc, #16]	@ (80009d0 <LL_RCC_HSE_Enable+0x1c>)
 80009be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80009c2:	6013      	str	r3, [r2, #0]
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	40023800 	.word	0x40023800

080009d4 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80009d8:	4b07      	ldr	r3, [pc, #28]	@ (80009f8 <LL_RCC_HSE_IsReady+0x24>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80009e4:	bf0c      	ite	eq
 80009e6:	2301      	moveq	r3, #1
 80009e8:	2300      	movne	r3, #0
 80009ea:	b2db      	uxtb	r3, r3
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	40023800 	.word	0x40023800

080009fc <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000a04:	4b06      	ldr	r3, [pc, #24]	@ (8000a20 <LL_RCC_SetSysClkSource+0x24>)
 8000a06:	689b      	ldr	r3, [r3, #8]
 8000a08:	f023 0203 	bic.w	r2, r3, #3
 8000a0c:	4904      	ldr	r1, [pc, #16]	@ (8000a20 <LL_RCC_SetSysClkSource+0x24>)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4313      	orrs	r3, r2
 8000a12:	608b      	str	r3, [r1, #8]
}
 8000a14:	bf00      	nop
 8000a16:	370c      	adds	r7, #12
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr
 8000a20:	40023800 	.word	0x40023800

08000a24 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000a28:	4b04      	ldr	r3, [pc, #16]	@ (8000a3c <LL_RCC_GetSysClkSource+0x18>)
 8000a2a:	689b      	ldr	r3, [r3, #8]
 8000a2c:	f003 030c 	and.w	r3, r3, #12
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	40023800 	.word	0x40023800

08000a40 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000a48:	4b06      	ldr	r3, [pc, #24]	@ (8000a64 <LL_RCC_SetAHBPrescaler+0x24>)
 8000a4a:	689b      	ldr	r3, [r3, #8]
 8000a4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000a50:	4904      	ldr	r1, [pc, #16]	@ (8000a64 <LL_RCC_SetAHBPrescaler+0x24>)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	4313      	orrs	r3, r2
 8000a56:	608b      	str	r3, [r1, #8]
}
 8000a58:	bf00      	nop
 8000a5a:	370c      	adds	r7, #12
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr
 8000a64:	40023800 	.word	0x40023800

08000a68 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000a70:	4b06      	ldr	r3, [pc, #24]	@ (8000a8c <LL_RCC_SetAPB1Prescaler+0x24>)
 8000a72:	689b      	ldr	r3, [r3, #8]
 8000a74:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8000a78:	4904      	ldr	r1, [pc, #16]	@ (8000a8c <LL_RCC_SetAPB1Prescaler+0x24>)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	608b      	str	r3, [r1, #8]
}
 8000a80:	bf00      	nop
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr
 8000a8c:	40023800 	.word	0x40023800

08000a90 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000a98:	4b06      	ldr	r3, [pc, #24]	@ (8000ab4 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000a9a:	689b      	ldr	r3, [r3, #8]
 8000a9c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8000aa0:	4904      	ldr	r1, [pc, #16]	@ (8000ab4 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	608b      	str	r3, [r1, #8]
}
 8000aa8:	bf00      	nop
 8000aaa:	370c      	adds	r7, #12
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr
 8000ab4:	40023800 	.word	0x40023800

08000ab8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000abc:	4b05      	ldr	r3, [pc, #20]	@ (8000ad4 <LL_RCC_PLL_Enable+0x1c>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a04      	ldr	r2, [pc, #16]	@ (8000ad4 <LL_RCC_PLL_Enable+0x1c>)
 8000ac2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000ac6:	6013      	str	r3, [r2, #0]
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	40023800 	.word	0x40023800

08000ad8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000adc:	4b07      	ldr	r3, [pc, #28]	@ (8000afc <LL_RCC_PLL_IsReady+0x24>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ae4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8000ae8:	bf0c      	ite	eq
 8000aea:	2301      	moveq	r3, #1
 8000aec:	2300      	movne	r3, #0
 8000aee:	b2db      	uxtb	r3, r3
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	40023800 	.word	0x40023800

08000b00 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b085      	sub	sp, #20
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	60f8      	str	r0, [r7, #12]
 8000b08:	60b9      	str	r1, [r7, #8]
 8000b0a:	607a      	str	r2, [r7, #4]
 8000b0c:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8000b0e:	4b0d      	ldr	r3, [pc, #52]	@ (8000b44 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000b10:	685a      	ldr	r2, [r3, #4]
 8000b12:	4b0d      	ldr	r3, [pc, #52]	@ (8000b48 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8000b14:	4013      	ands	r3, r2
 8000b16:	68f9      	ldr	r1, [r7, #12]
 8000b18:	68ba      	ldr	r2, [r7, #8]
 8000b1a:	4311      	orrs	r1, r2
 8000b1c:	687a      	ldr	r2, [r7, #4]
 8000b1e:	0192      	lsls	r2, r2, #6
 8000b20:	430a      	orrs	r2, r1
 8000b22:	4908      	ldr	r1, [pc, #32]	@ (8000b44 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000b24:	4313      	orrs	r3, r2
 8000b26:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8000b28:	4b06      	ldr	r3, [pc, #24]	@ (8000b44 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000b30:	4904      	ldr	r1, [pc, #16]	@ (8000b44 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	4313      	orrs	r3, r2
 8000b36:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8000b38:	bf00      	nop
 8000b3a:	3714      	adds	r7, #20
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	40023800 	.word	0x40023800
 8000b48:	ffbf8000 	.word	0xffbf8000

08000b4c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000b54:	4b08      	ldr	r3, [pc, #32]	@ (8000b78 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000b56:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b58:	4907      	ldr	r1, [pc, #28]	@ (8000b78 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000b60:	4b05      	ldr	r3, [pc, #20]	@ (8000b78 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000b62:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	4013      	ands	r3, r2
 8000b68:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b6a:	68fb      	ldr	r3, [r7, #12]
}
 8000b6c:	bf00      	nop
 8000b6e:	3714      	adds	r7, #20
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	40023800 	.word	0x40023800

08000b7c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b085      	sub	sp, #20
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000b84:	4b08      	ldr	r3, [pc, #32]	@ (8000ba8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000b86:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000b88:	4907      	ldr	r1, [pc, #28]	@ (8000ba8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000b90:	4b05      	ldr	r3, [pc, #20]	@ (8000ba8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000b92:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	4013      	ands	r3, r2
 8000b98:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b9a:	68fb      	ldr	r3, [r7, #12]
}
 8000b9c:	bf00      	nop
 8000b9e:	3714      	adds	r7, #20
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr
 8000ba8:	40023800 	.word	0x40023800

08000bac <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000bb4:	4b06      	ldr	r3, [pc, #24]	@ (8000bd0 <LL_FLASH_SetLatency+0x24>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f023 0207 	bic.w	r2, r3, #7
 8000bbc:	4904      	ldr	r1, [pc, #16]	@ (8000bd0 <LL_FLASH_SetLatency+0x24>)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	600b      	str	r3, [r1, #0]
}
 8000bc4:	bf00      	nop
 8000bc6:	370c      	adds	r7, #12
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr
 8000bd0:	40023c00 	.word	0x40023c00

08000bd4 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000bd8:	4b04      	ldr	r3, [pc, #16]	@ (8000bec <LL_FLASH_GetLatency+0x18>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f003 0307 	and.w	r3, r3, #7
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	40023c00 	.word	0x40023c00

08000bf0 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000bf8:	4b06      	ldr	r3, [pc, #24]	@ (8000c14 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8000c00:	4904      	ldr	r1, [pc, #16]	@ (8000c14 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4313      	orrs	r3, r2
 8000c06:	600b      	str	r3, [r1, #0]
}
 8000c08:	bf00      	nop
 8000c0a:	370c      	adds	r7, #12
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	40007000 	.word	0x40007000

08000c18 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the Regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR   VOS       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 8000c1c:	4b07      	ldr	r3, [pc, #28]	@ (8000c3c <LL_PWR_IsActiveFlag_VOS+0x24>)
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c24:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000c28:	bf0c      	ite	eq
 8000c2a:	2301      	moveq	r3, #1
 8000c2c:	2300      	movne	r3, #0
 8000c2e:	b2db      	uxtb	r3, r3
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	40007000 	.word	0x40007000

08000c40 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	f023 0210 	bic.w	r2, r3, #16
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	431a      	orrs	r2, r3
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	605a      	str	r2, [r3, #4]
}
 8000c5a:	bf00      	nop
 8000c5c:	370c      	adds	r7, #12
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr

08000c66 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8000c66:	b480      	push	{r7}
 8000c68:	b083      	sub	sp, #12
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	601a      	str	r2, [r3, #0]
}
 8000c7a:	bf00      	nop
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr

08000c86 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8000c86:	b480      	push	{r7}
 8000c88:	b083      	sub	sp, #12
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
 8000c8e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	689b      	ldr	r3, [r3, #8]
 8000c94:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000c98:	f023 0307 	bic.w	r3, r3, #7
 8000c9c:	683a      	ldr	r2, [r7, #0]
 8000c9e:	431a      	orrs	r2, r3
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
}
 8000ca4:	bf00      	nop
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr

08000cb0 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
 8000cb8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	431a      	orrs	r2, r3
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	605a      	str	r2, [r3, #4]
}
 8000cca:	bf00      	nop
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr

08000cd6 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	b083      	sub	sp, #12
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	689b      	ldr	r3, [r3, #8]
 8000ce2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
}
 8000cea:	bf00      	nop
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr

08000cf6 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	b083      	sub	sp, #12
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	68db      	ldr	r3, [r3, #12]
 8000d02:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	60da      	str	r2, [r3, #12]
}
 8000d0a:	bf00      	nop
 8000d0c:	370c      	adds	r7, #12
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr

08000d16 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000d16:	b480      	push	{r7}
 8000d18:	b083      	sub	sp, #12
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	691b      	ldr	r3, [r3, #16]
 8000d22:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	695b      	ldr	r3, [r3, #20]
 8000d2e:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	615a      	str	r2, [r3, #20]
}
 8000d36:	bf00      	nop
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr

08000d42 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000d42:	b480      	push	{r7}
 8000d44:	b083      	sub	sp, #12
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	6078      	str	r0, [r7, #4]
 8000d4a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	041a      	lsls	r2, r3, #16
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	619a      	str	r2, [r3, #24]
}
 8000d54:	bf00      	nop
 8000d56:	370c      	adds	r7, #12
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d64:	f000 fc50 	bl	8001608 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d68:	f000 f814 	bl	8000d94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d6c:	f000 fa48 	bl	8001200 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d70:	f000 fa2e 	bl	80011d0 <MX_DMA_Init>
  MX_ADC1_Init();
 8000d74:	f000 f85e 	bl	8000e34 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000d78:	f000 f954 	bl	8001024 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000d7c:	f000 f984 	bl	8001088 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8000d80:	f000 f8fe 	bl	8000f80 <MX_SPI1_Init>
  MX_FSMC_Init();
 8000d84:	f000 fa80 	bl	8001288 <MX_FSMC_Init>
  MX_USART3_UART_Init();
 8000d88:	f000 f9ce 	bl	8001128 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8000d8c:	f000 f9f6 	bl	800117c <MX_USART6_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d90:	bf00      	nop
 8000d92:	e7fd      	b.n	8000d90 <main+0x30>

08000d94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_3);
 8000d98:	2003      	movs	r0, #3
 8000d9a:	f7ff ff07 	bl	8000bac <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_3)
 8000d9e:	bf00      	nop
 8000da0:	f7ff ff18 	bl	8000bd4 <LL_FLASH_GetLatency>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b03      	cmp	r3, #3
 8000da8:	d1fa      	bne.n	8000da0 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8000daa:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000dae:	f7ff ff1f 	bl	8000bf0 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSE_Enable();
 8000db2:	f7ff fdff 	bl	80009b4 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8000db6:	bf00      	nop
 8000db8:	f7ff fe0c 	bl	80009d4 <LL_RCC_HSE_IsReady>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d1fa      	bne.n	8000db8 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_15, 144, LL_RCC_PLLP_DIV_2);
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	2290      	movs	r2, #144	@ 0x90
 8000dc6:	210f      	movs	r1, #15
 8000dc8:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8000dcc:	f7ff fe98 	bl	8000b00 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000dd0:	f7ff fe72 	bl	8000ab8 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000dd4:	bf00      	nop
 8000dd6:	f7ff fe7f 	bl	8000ad8 <LL_RCC_PLL_IsReady>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d1fa      	bne.n	8000dd6 <SystemClock_Config+0x42>
  {

  }
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 8000de0:	bf00      	nop
 8000de2:	f7ff ff19 	bl	8000c18 <LL_PWR_IsActiveFlag_VOS>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d0fa      	beq.n	8000de2 <SystemClock_Config+0x4e>
  {
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000dec:	2000      	movs	r0, #0
 8000dee:	f7ff fe27 	bl	8000a40 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 8000df2:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 8000df6:	f7ff fe37 	bl	8000a68 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 8000dfa:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000dfe:	f7ff fe47 	bl	8000a90 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000e02:	2002      	movs	r0, #2
 8000e04:	f7ff fdfa 	bl	80009fc <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000e08:	bf00      	nop
 8000e0a:	f7ff fe0b 	bl	8000a24 <LL_RCC_GetSysClkSource>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b08      	cmp	r3, #8
 8000e12:	d1fa      	bne.n	8000e0a <SystemClock_Config+0x76>
  {

  }
  LL_SetSystemCoreClock(120000000);
 8000e14:	4806      	ldr	r0, [pc, #24]	@ (8000e30 <SystemClock_Config+0x9c>)
 8000e16:	f002 faf7 	bl	8003408 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8000e1a:	200f      	movs	r0, #15
 8000e1c:	f000 fc16 	bl	800164c <HAL_InitTick>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000e26:	f000 fa8f 	bl	8001348 <Error_Handler>
  }
}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	07270e00 	.word	0x07270e00

08000e34 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b092      	sub	sp, #72	@ 0x48
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8000e3a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000e3e:	2200      	movs	r2, #0
 8000e40:	601a      	str	r2, [r3, #0]
 8000e42:	605a      	str	r2, [r3, #4]
 8000e44:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8000e46:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	605a      	str	r2, [r3, #4]
 8000e50:	609a      	str	r2, [r3, #8]
 8000e52:	60da      	str	r2, [r3, #12]
 8000e54:	611a      	str	r2, [r3, #16]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8000e56:	f107 0318 	add.w	r3, r7, #24
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	605a      	str	r2, [r3, #4]
 8000e60:	609a      	str	r2, [r3, #8]
 8000e62:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e64:	463b      	mov	r3, r7
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	605a      	str	r2, [r3, #4]
 8000e6c:	609a      	str	r2, [r3, #8]
 8000e6e:	60da      	str	r2, [r3, #12]
 8000e70:	611a      	str	r2, [r3, #16]
 8000e72:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8000e74:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000e78:	f7ff fe80 	bl	8000b7c <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000e7c:	2001      	movs	r0, #1
 8000e7e:	f7ff fe65 	bl	8000b4c <LL_AHB1_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PA0-WKUP   ------> ADC1_IN0
  PA1   ------> ADC1_IN1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 8000e82:	2303      	movs	r3, #3
 8000e84:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000e86:	2303      	movs	r3, #3
 8000e88:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8e:	463b      	mov	r3, r7
 8000e90:	4619      	mov	r1, r3
 8000e92:	4837      	ldr	r0, [pc, #220]	@ (8000f70 <MX_ADC1_Init+0x13c>)
 8000e94:	f001 fccb 	bl	800282e <LL_GPIO_Init>

  /* ADC1 DMA Init */

  /* ADC1 Init */
  LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_0, LL_DMA_CHANNEL_0);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	4835      	ldr	r0, [pc, #212]	@ (8000f74 <MX_ADC1_Init+0x140>)
 8000e9e:	f7ff fd45 	bl	800092c <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_0, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	4833      	ldr	r0, [pc, #204]	@ (8000f74 <MX_ADC1_Init+0x140>)
 8000ea8:	f7ff fc44 	bl	8000734 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_0, LL_DMA_PRIORITY_LOW);
 8000eac:	2200      	movs	r2, #0
 8000eae:	2100      	movs	r1, #0
 8000eb0:	4830      	ldr	r0, [pc, #192]	@ (8000f74 <MX_ADC1_Init+0x140>)
 8000eb2:	f7ff fd17 	bl	80008e4 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_STREAM_0, LL_DMA_MODE_NORMAL);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2100      	movs	r1, #0
 8000eba:	482e      	ldr	r0, [pc, #184]	@ (8000f74 <MX_ADC1_Init+0x140>)
 8000ebc:	f7ff fc5e 	bl	800077c <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_0, LL_DMA_PERIPH_NOINCREMENT);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	482b      	ldr	r0, [pc, #172]	@ (8000f74 <MX_ADC1_Init+0x140>)
 8000ec6:	f7ff fc7d 	bl	80007c4 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_0, LL_DMA_MEMORY_INCREMENT);
 8000eca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ece:	2100      	movs	r1, #0
 8000ed0:	4828      	ldr	r0, [pc, #160]	@ (8000f74 <MX_ADC1_Init+0x140>)
 8000ed2:	f7ff fc9b 	bl	800080c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_0, LL_DMA_PDATAALIGN_HALFWORD);
 8000ed6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000eda:	2100      	movs	r1, #0
 8000edc:	4825      	ldr	r0, [pc, #148]	@ (8000f74 <MX_ADC1_Init+0x140>)
 8000ede:	f7ff fcb9 	bl	8000854 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_0, LL_DMA_MDATAALIGN_HALFWORD);
 8000ee2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	4822      	ldr	r0, [pc, #136]	@ (8000f74 <MX_ADC1_Init+0x140>)
 8000eea:	f7ff fcd7 	bl	800089c <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_0);
 8000eee:	2100      	movs	r1, #0
 8000ef0:	4820      	ldr	r0, [pc, #128]	@ (8000f74 <MX_ADC1_Init+0x140>)
 8000ef2:	f7ff fd3f 	bl	8000974 <LL_DMA_DisableFifoMode>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000efa:	2300      	movs	r3, #0
 8000efc:	643b      	str	r3, [r7, #64]	@ 0x40
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_DISABLE;
 8000efe:	2300      	movs	r3, #0
 8000f00:	647b      	str	r3, [r7, #68]	@ 0x44
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8000f02:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000f06:	4619      	mov	r1, r3
 8000f08:	481b      	ldr	r0, [pc, #108]	@ (8000f78 <MX_ADC1_Init+0x144>)
 8000f0a:	f001 f9ff 	bl	800230c <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	62bb      	str	r3, [r7, #40]	@ 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8000f12:	2300      	movs	r3, #0
 8000f14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8000f16:	2300      	movs	r3, #0
 8000f18:	633b      	str	r3, [r7, #48]	@ 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	637b      	str	r3, [r7, #52]	@ 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_LIMITED;
 8000f1e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f22:	63bb      	str	r3, [r7, #56]	@ 0x38
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8000f24:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4813      	ldr	r0, [pc, #76]	@ (8000f78 <MX_ADC1_Init+0x144>)
 8000f2c:	f001 fa1a 	bl	8002364 <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC1, LL_ADC_REG_FLAG_EOC_UNITARY_CONV);
 8000f30:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f34:	4810      	ldr	r0, [pc, #64]	@ (8000f78 <MX_ADC1_Init+0x144>)
 8000f36:	f7ff fb89 	bl	800064c <LL_ADC_REG_SetFlagEndOfConversion>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV2;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8000f42:	f107 0318 	add.w	r3, r7, #24
 8000f46:	4619      	mov	r1, r3
 8000f48:	480c      	ldr	r0, [pc, #48]	@ (8000f7c <MX_ADC1_Init+0x148>)
 8000f4a:	f001 f997 	bl	800227c <LL_ADC_CommonInit>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_0);
 8000f4e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000f52:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f56:	4808      	ldr	r0, [pc, #32]	@ (8000f78 <MX_ADC1_Init+0x144>)
 8000f58:	f7ff fb3b 	bl	80005d2 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_3CYCLES);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8000f62:	4805      	ldr	r0, [pc, #20]	@ (8000f78 <MX_ADC1_Init+0x144>)
 8000f64:	f7ff fb85 	bl	8000672 <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f68:	bf00      	nop
 8000f6a:	3748      	adds	r7, #72	@ 0x48
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	40020000 	.word	0x40020000
 8000f74:	40026400 	.word	0x40026400
 8000f78:	40012000 	.word	0x40012000
 8000f7c:	40012300 	.word	0x40012300

08000f80 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b090      	sub	sp, #64	@ 0x40
 8000f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8000f86:	f107 0318 	add.w	r3, r7, #24
 8000f8a:	2228      	movs	r2, #40	@ 0x28
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f002 fc24 	bl	80037dc <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f94:	463b      	mov	r3, r7
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	605a      	str	r2, [r3, #4]
 8000f9c:	609a      	str	r2, [r3, #8]
 8000f9e:	60da      	str	r2, [r3, #12]
 8000fa0:	611a      	str	r2, [r3, #16]
 8000fa2:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8000fa4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000fa8:	f7ff fde8 	bl	8000b7c <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000fac:	2001      	movs	r0, #1
 8000fae:	f7ff fdcd 	bl	8000b4c <LL_AHB1_GRP1_EnableClock>
  PA4   ------> SPI1_NSS
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8000fb2:	23f0      	movs	r3, #240	@ 0xf0
 8000fb4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8000fc6:	2305      	movs	r3, #5
 8000fc8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fca:	463b      	mov	r3, r7
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4813      	ldr	r0, [pc, #76]	@ (800101c <MX_SPI1_Init+0x9c>)
 8000fd0:	f001 fc2d 	bl	800282e <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8000fd8:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8000fdc:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_HARD_OUTPUT;
 8000fea:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8000fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 8000ffc:	230a      	movs	r3, #10
 8000ffe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8001000:	f107 0318 	add.w	r3, r7, #24
 8001004:	4619      	mov	r1, r3
 8001006:	4806      	ldr	r0, [pc, #24]	@ (8001020 <MX_SPI1_Init+0xa0>)
 8001008:	f001 fdef 	bl	8002bea <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 800100c:	2100      	movs	r1, #0
 800100e:	4804      	ldr	r0, [pc, #16]	@ (8001020 <MX_SPI1_Init+0xa0>)
 8001010:	f7ff fe16 	bl	8000c40 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001014:	bf00      	nop
 8001016:	3740      	adds	r7, #64	@ 0x40
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	40020000 	.word	0x40020000
 8001020:	40013000 	.word	0x40013000

08001024 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800102a:	1d3b      	adds	r3, r7, #4
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8001038:	2001      	movs	r0, #1
 800103a:	f7ff fd9f 	bl	8000b7c <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 800103e:	2300      	movs	r3, #0
 8001040:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001042:	2300      	movs	r3, #0
 8001044:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 65535;
 8001046:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800104a:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800104c:	2300      	movs	r3, #0
 800104e:	613b      	str	r3, [r7, #16]
  TIM_InitStruct.RepetitionCounter = 0;
 8001050:	2300      	movs	r3, #0
 8001052:	617b      	str	r3, [r7, #20]
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8001054:	1d3b      	adds	r3, r7, #4
 8001056:	4619      	mov	r1, r3
 8001058:	480a      	ldr	r0, [pc, #40]	@ (8001084 <MX_TIM1_Init+0x60>)
 800105a:	f001 fe53 	bl	8002d04 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 800105e:	4809      	ldr	r0, [pc, #36]	@ (8001084 <MX_TIM1_Init+0x60>)
 8001060:	f7ff fe01 	bl	8000c66 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001064:	2100      	movs	r1, #0
 8001066:	4807      	ldr	r0, [pc, #28]	@ (8001084 <MX_TIM1_Init+0x60>)
 8001068:	f7ff fe0d 	bl	8000c86 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 800106c:	2100      	movs	r1, #0
 800106e:	4805      	ldr	r0, [pc, #20]	@ (8001084 <MX_TIM1_Init+0x60>)
 8001070:	f7ff fe1e 	bl	8000cb0 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8001074:	4803      	ldr	r0, [pc, #12]	@ (8001084 <MX_TIM1_Init+0x60>)
 8001076:	f7ff fe2e 	bl	8000cd6 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800107a:	bf00      	nop
 800107c:	3718      	adds	r7, #24
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40010000 	.word	0x40010000

08001088 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b08e      	sub	sp, #56	@ 0x38
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800108e:	f107 031c 	add.w	r3, r7, #28
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	605a      	str	r2, [r3, #4]
 8001098:	609a      	str	r2, [r3, #8]
 800109a:	60da      	str	r2, [r3, #12]
 800109c:	611a      	str	r2, [r3, #16]
 800109e:	615a      	str	r2, [r3, #20]
 80010a0:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a2:	1d3b      	adds	r3, r7, #4
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	60da      	str	r2, [r3, #12]
 80010ae:	611a      	str	r2, [r3, #16]
 80010b0:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 80010b2:	2010      	movs	r0, #16
 80010b4:	f7ff fd62 	bl	8000b7c <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80010b8:	2001      	movs	r0, #1
 80010ba:	f7ff fd47 	bl	8000b4c <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 80010be:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80010c2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80010c4:	2302      	movs	r3, #2
 80010c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80010c8:	2303      	movs	r3, #3
 80010ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80010cc:	2300      	movs	r3, #0
 80010ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80010d4:	2307      	movs	r3, #7
 80010d6:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d8:	1d3b      	adds	r3, r7, #4
 80010da:	4619      	mov	r1, r3
 80010dc:	4810      	ldr	r0, [pc, #64]	@ (8001120 <MX_USART1_UART_Init+0x98>)
 80010de:	f001 fba6 	bl	800282e <LL_GPIO_Init>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80010e2:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80010e6:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80010e8:	2300      	movs	r3, #0
 80010ea:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80010ec:	2300      	movs	r3, #0
 80010ee:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80010f0:	2300      	movs	r3, #0
 80010f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80010f4:	230c      	movs	r3, #12
 80010f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80010f8:	2300      	movs	r3, #0
 80010fa:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80010fc:	2300      	movs	r3, #0
 80010fe:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 8001100:	f107 031c 	add.w	r3, r7, #28
 8001104:	4619      	mov	r1, r3
 8001106:	4807      	ldr	r0, [pc, #28]	@ (8001124 <MX_USART1_UART_Init+0x9c>)
 8001108:	f002 f8fe 	bl	8003308 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 800110c:	4805      	ldr	r0, [pc, #20]	@ (8001124 <MX_USART1_UART_Init+0x9c>)
 800110e:	f7ff fe02 	bl	8000d16 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8001112:	4804      	ldr	r0, [pc, #16]	@ (8001124 <MX_USART1_UART_Init+0x9c>)
 8001114:	f7ff fdef 	bl	8000cf6 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001118:	bf00      	nop
 800111a:	3738      	adds	r7, #56	@ 0x38
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40020000 	.word	0x40020000
 8001124:	40011000 	.word	0x40011000

08001128 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800112c:	4b11      	ldr	r3, [pc, #68]	@ (8001174 <MX_USART3_UART_Init+0x4c>)
 800112e:	4a12      	ldr	r2, [pc, #72]	@ (8001178 <MX_USART3_UART_Init+0x50>)
 8001130:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001132:	4b10      	ldr	r3, [pc, #64]	@ (8001174 <MX_USART3_UART_Init+0x4c>)
 8001134:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001138:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800113a:	4b0e      	ldr	r3, [pc, #56]	@ (8001174 <MX_USART3_UART_Init+0x4c>)
 800113c:	2200      	movs	r2, #0
 800113e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001140:	4b0c      	ldr	r3, [pc, #48]	@ (8001174 <MX_USART3_UART_Init+0x4c>)
 8001142:	2200      	movs	r2, #0
 8001144:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001146:	4b0b      	ldr	r3, [pc, #44]	@ (8001174 <MX_USART3_UART_Init+0x4c>)
 8001148:	2200      	movs	r2, #0
 800114a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800114c:	4b09      	ldr	r3, [pc, #36]	@ (8001174 <MX_USART3_UART_Init+0x4c>)
 800114e:	220c      	movs	r2, #12
 8001150:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001152:	4b08      	ldr	r3, [pc, #32]	@ (8001174 <MX_USART3_UART_Init+0x4c>)
 8001154:	2200      	movs	r2, #0
 8001156:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001158:	4b06      	ldr	r3, [pc, #24]	@ (8001174 <MX_USART3_UART_Init+0x4c>)
 800115a:	2200      	movs	r2, #0
 800115c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800115e:	4805      	ldr	r0, [pc, #20]	@ (8001174 <MX_USART3_UART_Init+0x4c>)
 8001160:	f000 fda2 	bl	8001ca8 <HAL_UART_Init>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800116a:	f000 f8ed 	bl	8001348 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800116e:	bf00      	nop
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	20000028 	.word	0x20000028
 8001178:	40004800 	.word	0x40004800

0800117c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001180:	4b11      	ldr	r3, [pc, #68]	@ (80011c8 <MX_USART6_UART_Init+0x4c>)
 8001182:	4a12      	ldr	r2, [pc, #72]	@ (80011cc <MX_USART6_UART_Init+0x50>)
 8001184:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001186:	4b10      	ldr	r3, [pc, #64]	@ (80011c8 <MX_USART6_UART_Init+0x4c>)
 8001188:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800118c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800118e:	4b0e      	ldr	r3, [pc, #56]	@ (80011c8 <MX_USART6_UART_Init+0x4c>)
 8001190:	2200      	movs	r2, #0
 8001192:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001194:	4b0c      	ldr	r3, [pc, #48]	@ (80011c8 <MX_USART6_UART_Init+0x4c>)
 8001196:	2200      	movs	r2, #0
 8001198:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800119a:	4b0b      	ldr	r3, [pc, #44]	@ (80011c8 <MX_USART6_UART_Init+0x4c>)
 800119c:	2200      	movs	r2, #0
 800119e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80011a0:	4b09      	ldr	r3, [pc, #36]	@ (80011c8 <MX_USART6_UART_Init+0x4c>)
 80011a2:	220c      	movs	r2, #12
 80011a4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011a6:	4b08      	ldr	r3, [pc, #32]	@ (80011c8 <MX_USART6_UART_Init+0x4c>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80011ac:	4b06      	ldr	r3, [pc, #24]	@ (80011c8 <MX_USART6_UART_Init+0x4c>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80011b2:	4805      	ldr	r0, [pc, #20]	@ (80011c8 <MX_USART6_UART_Init+0x4c>)
 80011b4:	f000 fd78 	bl	8001ca8 <HAL_UART_Init>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80011be:	f000 f8c3 	bl	8001348 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20000070 	.word	0x20000070
 80011cc:	40011400 	.word	0x40011400

080011d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 80011d4:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 80011d8:	f7ff fcb8 	bl	8000b4c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Stream0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80011dc:	f7ff f970 	bl	80004c0 <__NVIC_GetPriorityGrouping>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2200      	movs	r2, #0
 80011e4:	2100      	movs	r1, #0
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff f9c0 	bl	800056c <NVIC_EncodePriority>
 80011ec:	4603      	mov	r3, r0
 80011ee:	4619      	mov	r1, r3
 80011f0:	2038      	movs	r0, #56	@ 0x38
 80011f2:	f7ff f991 	bl	8000518 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80011f6:	2038      	movs	r0, #56	@ 0x38
 80011f8:	f7ff f970 	bl	80004dc <__NVIC_EnableIRQ>

}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}

08001200 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001206:	463b      	mov	r3, r7
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]
 8001214:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8001216:	2080      	movs	r0, #128	@ 0x80
 8001218:	f7ff fc98 	bl	8000b4c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800121c:	2004      	movs	r0, #4
 800121e:	f7ff fc95 	bl	8000b4c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001222:	2001      	movs	r0, #1
 8001224:	f7ff fc92 	bl	8000b4c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 8001228:	2010      	movs	r0, #16
 800122a:	f7ff fc8f 	bl	8000b4c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800122e:	2002      	movs	r0, #2
 8001230:	f7ff fc8c 	bl	8000b4c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8001234:	2008      	movs	r0, #8
 8001236:	f7ff fc89 	bl	8000b4c <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0);
 800123a:	2101      	movs	r1, #1
 800123c:	4810      	ldr	r0, [pc, #64]	@ (8001280 <MX_GPIO_Init+0x80>)
 800123e:	f7ff fd80 	bl	8000d42 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8001242:	2301      	movs	r3, #1
 8001244:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001246:	2301      	movs	r3, #1
 8001248:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800124a:	2300      	movs	r3, #0
 800124c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800124e:	2300      	movs	r3, #0
 8001250:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001252:	2300      	movs	r3, #0
 8001254:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001256:	463b      	mov	r3, r7
 8001258:	4619      	mov	r1, r3
 800125a:	4809      	ldr	r0, [pc, #36]	@ (8001280 <MX_GPIO_Init+0x80>)
 800125c:	f001 fae7 	bl	800282e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TOUCH_DETECT_Pin;
 8001260:	2304      	movs	r3, #4
 8001262:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001264:	2300      	movs	r3, #0
 8001266:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001268:	2300      	movs	r3, #0
 800126a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(TOUCH_DETECT_GPIO_Port, &GPIO_InitStruct);
 800126c:	463b      	mov	r3, r7
 800126e:	4619      	mov	r1, r3
 8001270:	4804      	ldr	r0, [pc, #16]	@ (8001284 <MX_GPIO_Init+0x84>)
 8001272:	f001 fadc 	bl	800282e <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001276:	bf00      	nop
 8001278:	3718      	adds	r7, #24
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40020800 	.word	0x40020800
 8001284:	40020000 	.word	0x40020000

08001288 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b088      	sub	sp, #32
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800128e:	1d3b      	adds	r3, r7, #4
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]
 800129c:	615a      	str	r2, [r3, #20]
 800129e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80012a0:	4b27      	ldr	r3, [pc, #156]	@ (8001340 <MX_FSMC_Init+0xb8>)
 80012a2:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 80012a6:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80012a8:	4b25      	ldr	r3, [pc, #148]	@ (8001340 <MX_FSMC_Init+0xb8>)
 80012aa:	4a26      	ldr	r2, [pc, #152]	@ (8001344 <MX_FSMC_Init+0xbc>)
 80012ac:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80012ae:	4b24      	ldr	r3, [pc, #144]	@ (8001340 <MX_FSMC_Init+0xb8>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80012b4:	4b22      	ldr	r3, [pc, #136]	@ (8001340 <MX_FSMC_Init+0xb8>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80012ba:	4b21      	ldr	r3, [pc, #132]	@ (8001340 <MX_FSMC_Init+0xb8>)
 80012bc:	2200      	movs	r2, #0
 80012be:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80012c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001340 <MX_FSMC_Init+0xb8>)
 80012c2:	2210      	movs	r2, #16
 80012c4:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80012c6:	4b1e      	ldr	r3, [pc, #120]	@ (8001340 <MX_FSMC_Init+0xb8>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80012cc:	4b1c      	ldr	r3, [pc, #112]	@ (8001340 <MX_FSMC_Init+0xb8>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80012d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001340 <MX_FSMC_Init+0xb8>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80012d8:	4b19      	ldr	r3, [pc, #100]	@ (8001340 <MX_FSMC_Init+0xb8>)
 80012da:	2200      	movs	r2, #0
 80012dc:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80012de:	4b18      	ldr	r3, [pc, #96]	@ (8001340 <MX_FSMC_Init+0xb8>)
 80012e0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80012e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80012e6:	4b16      	ldr	r3, [pc, #88]	@ (8001340 <MX_FSMC_Init+0xb8>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80012ec:	4b14      	ldr	r3, [pc, #80]	@ (8001340 <MX_FSMC_Init+0xb8>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80012f2:	4b13      	ldr	r3, [pc, #76]	@ (8001340 <MX_FSMC_Init+0xb8>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80012f8:	4b11      	ldr	r3, [pc, #68]	@ (8001340 <MX_FSMC_Init+0xb8>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80012fe:	4b10      	ldr	r3, [pc, #64]	@ (8001340 <MX_FSMC_Init+0xb8>)
 8001300:	2200      	movs	r2, #0
 8001302:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8001304:	230f      	movs	r3, #15
 8001306:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001308:	230f      	movs	r3, #15
 800130a:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 800130c:	23ff      	movs	r3, #255	@ 0xff
 800130e:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8001310:	230f      	movs	r3, #15
 8001312:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001314:	2310      	movs	r3, #16
 8001316:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001318:	2311      	movs	r3, #17
 800131a:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800131c:	2300      	movs	r3, #0
 800131e:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001320:	1d3b      	adds	r3, r7, #4
 8001322:	2200      	movs	r2, #0
 8001324:	4619      	mov	r1, r3
 8001326:	4806      	ldr	r0, [pc, #24]	@ (8001340 <MX_FSMC_Init+0xb8>)
 8001328:	f000 fc76 	bl	8001c18 <HAL_SRAM_Init>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 8001332:	f000 f809 	bl	8001348 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001336:	bf00      	nop
 8001338:	3720      	adds	r7, #32
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	200000b8 	.word	0x200000b8
 8001344:	a0000104 	.word	0xa0000104

08001348 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800134c:	b672      	cpsid	i
}
 800134e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001350:	bf00      	nop
 8001352:	e7fd      	b.n	8001350 <Error_Handler+0x8>

08001354 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	607b      	str	r3, [r7, #4]
 800135e:	4b10      	ldr	r3, [pc, #64]	@ (80013a0 <HAL_MspInit+0x4c>)
 8001360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001362:	4a0f      	ldr	r2, [pc, #60]	@ (80013a0 <HAL_MspInit+0x4c>)
 8001364:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001368:	6453      	str	r3, [r2, #68]	@ 0x44
 800136a:	4b0d      	ldr	r3, [pc, #52]	@ (80013a0 <HAL_MspInit+0x4c>)
 800136c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800136e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001372:	607b      	str	r3, [r7, #4]
 8001374:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	603b      	str	r3, [r7, #0]
 800137a:	4b09      	ldr	r3, [pc, #36]	@ (80013a0 <HAL_MspInit+0x4c>)
 800137c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800137e:	4a08      	ldr	r2, [pc, #32]	@ (80013a0 <HAL_MspInit+0x4c>)
 8001380:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001384:	6413      	str	r3, [r2, #64]	@ 0x40
 8001386:	4b06      	ldr	r3, [pc, #24]	@ (80013a0 <HAL_MspInit+0x4c>)
 8001388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800138a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800138e:	603b      	str	r3, [r7, #0]
 8001390:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001392:	bf00      	nop
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	40023800 	.word	0x40023800

080013a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08c      	sub	sp, #48	@ 0x30
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ac:	f107 031c 	add.w	r3, r7, #28
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
 80013ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a32      	ldr	r2, [pc, #200]	@ (800148c <HAL_UART_MspInit+0xe8>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d12d      	bne.n	8001422 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	61bb      	str	r3, [r7, #24]
 80013ca:	4b31      	ldr	r3, [pc, #196]	@ (8001490 <HAL_UART_MspInit+0xec>)
 80013cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ce:	4a30      	ldr	r2, [pc, #192]	@ (8001490 <HAL_UART_MspInit+0xec>)
 80013d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80013d6:	4b2e      	ldr	r3, [pc, #184]	@ (8001490 <HAL_UART_MspInit+0xec>)
 80013d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80013de:	61bb      	str	r3, [r7, #24]
 80013e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	617b      	str	r3, [r7, #20]
 80013e6:	4b2a      	ldr	r3, [pc, #168]	@ (8001490 <HAL_UART_MspInit+0xec>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ea:	4a29      	ldr	r2, [pc, #164]	@ (8001490 <HAL_UART_MspInit+0xec>)
 80013ec:	f043 0302 	orr.w	r3, r3, #2
 80013f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013f2:	4b27      	ldr	r3, [pc, #156]	@ (8001490 <HAL_UART_MspInit+0xec>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	617b      	str	r3, [r7, #20]
 80013fc:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80013fe:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001402:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001404:	2302      	movs	r3, #2
 8001406:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800140c:	2303      	movs	r3, #3
 800140e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001410:	2307      	movs	r3, #7
 8001412:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001414:	f107 031c 	add.w	r3, r7, #28
 8001418:	4619      	mov	r1, r3
 800141a:	481e      	ldr	r0, [pc, #120]	@ (8001494 <HAL_UART_MspInit+0xf0>)
 800141c:	f000 fa2c 	bl	8001878 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001420:	e030      	b.n	8001484 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART6)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a1c      	ldr	r2, [pc, #112]	@ (8001498 <HAL_UART_MspInit+0xf4>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d12b      	bne.n	8001484 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART6_CLK_ENABLE();
 800142c:	2300      	movs	r3, #0
 800142e:	613b      	str	r3, [r7, #16]
 8001430:	4b17      	ldr	r3, [pc, #92]	@ (8001490 <HAL_UART_MspInit+0xec>)
 8001432:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001434:	4a16      	ldr	r2, [pc, #88]	@ (8001490 <HAL_UART_MspInit+0xec>)
 8001436:	f043 0320 	orr.w	r3, r3, #32
 800143a:	6453      	str	r3, [r2, #68]	@ 0x44
 800143c:	4b14      	ldr	r3, [pc, #80]	@ (8001490 <HAL_UART_MspInit+0xec>)
 800143e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001440:	f003 0320 	and.w	r3, r3, #32
 8001444:	613b      	str	r3, [r7, #16]
 8001446:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001448:	2300      	movs	r3, #0
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	4b10      	ldr	r3, [pc, #64]	@ (8001490 <HAL_UART_MspInit+0xec>)
 800144e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001450:	4a0f      	ldr	r2, [pc, #60]	@ (8001490 <HAL_UART_MspInit+0xec>)
 8001452:	f043 0304 	orr.w	r3, r3, #4
 8001456:	6313      	str	r3, [r2, #48]	@ 0x30
 8001458:	4b0d      	ldr	r3, [pc, #52]	@ (8001490 <HAL_UART_MspInit+0xec>)
 800145a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145c:	f003 0304 	and.w	r3, r3, #4
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001464:	23c0      	movs	r3, #192	@ 0xc0
 8001466:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001468:	2302      	movs	r3, #2
 800146a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001470:	2303      	movs	r3, #3
 8001472:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001474:	2308      	movs	r3, #8
 8001476:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001478:	f107 031c 	add.w	r3, r7, #28
 800147c:	4619      	mov	r1, r3
 800147e:	4807      	ldr	r0, [pc, #28]	@ (800149c <HAL_UART_MspInit+0xf8>)
 8001480:	f000 f9fa 	bl	8001878 <HAL_GPIO_Init>
}
 8001484:	bf00      	nop
 8001486:	3730      	adds	r7, #48	@ 0x30
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40004800 	.word	0x40004800
 8001490:	40023800 	.word	0x40023800
 8001494:	40020400 	.word	0x40020400
 8001498:	40011400 	.word	0x40011400
 800149c:	40020800 	.word	0x40020800

080014a0 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80014a6:	1d3b      	adds	r3, r7, #4
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	60da      	str	r2, [r3, #12]
 80014b2:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80014b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001528 <HAL_FSMC_MspInit+0x88>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d131      	bne.n	8001520 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80014bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001528 <HAL_FSMC_MspInit+0x88>)
 80014be:	2201      	movs	r2, #1
 80014c0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	603b      	str	r3, [r7, #0]
 80014c6:	4b19      	ldr	r3, [pc, #100]	@ (800152c <HAL_FSMC_MspInit+0x8c>)
 80014c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014ca:	4a18      	ldr	r2, [pc, #96]	@ (800152c <HAL_FSMC_MspInit+0x8c>)
 80014cc:	f043 0301 	orr.w	r3, r3, #1
 80014d0:	6393      	str	r3, [r2, #56]	@ 0x38
 80014d2:	4b16      	ldr	r3, [pc, #88]	@ (800152c <HAL_FSMC_MspInit+0x8c>)
 80014d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	603b      	str	r3, [r7, #0]
 80014dc:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80014de:	f64f 7380 	movw	r3, #65408	@ 0xff80
 80014e2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e4:	2302      	movs	r3, #2
 80014e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ec:	2303      	movs	r3, #3
 80014ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80014f0:	230c      	movs	r3, #12
 80014f2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014f4:	1d3b      	adds	r3, r7, #4
 80014f6:	4619      	mov	r1, r3
 80014f8:	480d      	ldr	r0, [pc, #52]	@ (8001530 <HAL_FSMC_MspInit+0x90>)
 80014fa:	f000 f9bd 	bl	8001878 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80014fe:	f64c 73b3 	movw	r3, #53171	@ 0xcfb3
 8001502:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001504:	2302      	movs	r3, #2
 8001506:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150c:	2303      	movs	r3, #3
 800150e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001510:	230c      	movs	r3, #12
 8001512:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001514:	1d3b      	adds	r3, r7, #4
 8001516:	4619      	mov	r1, r3
 8001518:	4806      	ldr	r0, [pc, #24]	@ (8001534 <HAL_FSMC_MspInit+0x94>)
 800151a:	f000 f9ad 	bl	8001878 <HAL_GPIO_Init>
 800151e:	e000      	b.n	8001522 <HAL_FSMC_MspInit+0x82>
    return;
 8001520:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001522:	3718      	adds	r7, #24
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	20000108 	.word	0x20000108
 800152c:	40023800 	.word	0x40023800
 8001530:	40021000 	.word	0x40021000
 8001534:	40020c00 	.word	0x40020c00

08001538 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001540:	f7ff ffae 	bl	80014a0 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001544:	bf00      	nop
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001550:	bf00      	nop
 8001552:	e7fd      	b.n	8001550 <NMI_Handler+0x4>

08001554 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001558:	bf00      	nop
 800155a:	e7fd      	b.n	8001558 <HardFault_Handler+0x4>

0800155c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001560:	bf00      	nop
 8001562:	e7fd      	b.n	8001560 <MemManage_Handler+0x4>

08001564 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001568:	bf00      	nop
 800156a:	e7fd      	b.n	8001568 <BusFault_Handler+0x4>

0800156c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001570:	bf00      	nop
 8001572:	e7fd      	b.n	8001570 <UsageFault_Handler+0x4>

08001574 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001578:	bf00      	nop
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr

08001582 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001582:	b480      	push	{r7}
 8001584:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2_Stream0_IRQn 0 */

  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001586:	bf00      	nop
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001594:	4b06      	ldr	r3, [pc, #24]	@ (80015b0 <SystemInit+0x20>)
 8001596:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800159a:	4a05      	ldr	r2, [pc, #20]	@ (80015b0 <SystemInit+0x20>)
 800159c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015a4:	bf00      	nop
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	e000ed00 	.word	0xe000ed00

080015b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80015b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015ec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80015b8:	f7ff ffea 	bl	8001590 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015bc:	480c      	ldr	r0, [pc, #48]	@ (80015f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015be:	490d      	ldr	r1, [pc, #52]	@ (80015f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015c0:	4a0d      	ldr	r2, [pc, #52]	@ (80015f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015c4:	e002      	b.n	80015cc <LoopCopyDataInit>

080015c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ca:	3304      	adds	r3, #4

080015cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015d0:	d3f9      	bcc.n	80015c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015d2:	4a0a      	ldr	r2, [pc, #40]	@ (80015fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015d4:	4c0a      	ldr	r4, [pc, #40]	@ (8001600 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015d8:	e001      	b.n	80015de <LoopFillZerobss>

080015da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015dc:	3204      	adds	r2, #4

080015de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015e0:	d3fb      	bcc.n	80015da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015e2:	f002 f903 	bl	80037ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015e6:	f7ff fbbb 	bl	8000d60 <main>
  bx  lr    
 80015ea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80015ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015f4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80015f8:	0800387c 	.word	0x0800387c
  ldr r2, =_sbss
 80015fc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001600:	20000198 	.word	0x20000198

08001604 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001604:	e7fe      	b.n	8001604 <ADC_IRQHandler>
	...

08001608 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800160c:	4b0e      	ldr	r3, [pc, #56]	@ (8001648 <HAL_Init+0x40>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a0d      	ldr	r2, [pc, #52]	@ (8001648 <HAL_Init+0x40>)
 8001612:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001616:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001618:	4b0b      	ldr	r3, [pc, #44]	@ (8001648 <HAL_Init+0x40>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a0a      	ldr	r2, [pc, #40]	@ (8001648 <HAL_Init+0x40>)
 800161e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001622:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001624:	4b08      	ldr	r3, [pc, #32]	@ (8001648 <HAL_Init+0x40>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a07      	ldr	r2, [pc, #28]	@ (8001648 <HAL_Init+0x40>)
 800162a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800162e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001630:	2003      	movs	r0, #3
 8001632:	f000 f8ed 	bl	8001810 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001636:	200f      	movs	r0, #15
 8001638:	f000 f808 	bl	800164c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800163c:	f7ff fe8a 	bl	8001354 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40023c00 	.word	0x40023c00

0800164c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001654:	4b12      	ldr	r3, [pc, #72]	@ (80016a0 <HAL_InitTick+0x54>)
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	4b12      	ldr	r3, [pc, #72]	@ (80016a4 <HAL_InitTick+0x58>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	4619      	mov	r1, r3
 800165e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001662:	fbb3 f3f1 	udiv	r3, r3, r1
 8001666:	fbb2 f3f3 	udiv	r3, r2, r3
 800166a:	4618      	mov	r0, r3
 800166c:	f000 f8f7 	bl	800185e <HAL_SYSTICK_Config>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e00e      	b.n	8001698 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2b0f      	cmp	r3, #15
 800167e:	d80a      	bhi.n	8001696 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001680:	2200      	movs	r2, #0
 8001682:	6879      	ldr	r1, [r7, #4]
 8001684:	f04f 30ff 	mov.w	r0, #4294967295
 8001688:	f000 f8cd 	bl	8001826 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800168c:	4a06      	ldr	r2, [pc, #24]	@ (80016a8 <HAL_InitTick+0x5c>)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001692:	2300      	movs	r3, #0
 8001694:	e000      	b.n	8001698 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
}
 8001698:	4618      	mov	r0, r3
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	20000000 	.word	0x20000000
 80016a4:	20000008 	.word	0x20000008
 80016a8:	20000004 	.word	0x20000004

080016ac <__NVIC_SetPriorityGrouping>:
{
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	f003 0307 	and.w	r3, r3, #7
 80016ba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016bc:	4b0c      	ldr	r3, [pc, #48]	@ (80016f0 <__NVIC_SetPriorityGrouping+0x44>)
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016c2:	68ba      	ldr	r2, [r7, #8]
 80016c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016c8:	4013      	ands	r3, r2
 80016ca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016de:	4a04      	ldr	r2, [pc, #16]	@ (80016f0 <__NVIC_SetPriorityGrouping+0x44>)
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	60d3      	str	r3, [r2, #12]
}
 80016e4:	bf00      	nop
 80016e6:	3714      	adds	r7, #20
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	e000ed00 	.word	0xe000ed00

080016f4 <__NVIC_GetPriorityGrouping>:
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016f8:	4b04      	ldr	r3, [pc, #16]	@ (800170c <__NVIC_GetPriorityGrouping+0x18>)
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	0a1b      	lsrs	r3, r3, #8
 80016fe:	f003 0307 	and.w	r3, r3, #7
}
 8001702:	4618      	mov	r0, r3
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	e000ed00 	.word	0xe000ed00

08001710 <__NVIC_SetPriority>:
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	6039      	str	r1, [r7, #0]
 800171a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800171c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001720:	2b00      	cmp	r3, #0
 8001722:	db0a      	blt.n	800173a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	b2da      	uxtb	r2, r3
 8001728:	490c      	ldr	r1, [pc, #48]	@ (800175c <__NVIC_SetPriority+0x4c>)
 800172a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172e:	0112      	lsls	r2, r2, #4
 8001730:	b2d2      	uxtb	r2, r2
 8001732:	440b      	add	r3, r1
 8001734:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001738:	e00a      	b.n	8001750 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	b2da      	uxtb	r2, r3
 800173e:	4908      	ldr	r1, [pc, #32]	@ (8001760 <__NVIC_SetPriority+0x50>)
 8001740:	79fb      	ldrb	r3, [r7, #7]
 8001742:	f003 030f 	and.w	r3, r3, #15
 8001746:	3b04      	subs	r3, #4
 8001748:	0112      	lsls	r2, r2, #4
 800174a:	b2d2      	uxtb	r2, r2
 800174c:	440b      	add	r3, r1
 800174e:	761a      	strb	r2, [r3, #24]
}
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	e000e100 	.word	0xe000e100
 8001760:	e000ed00 	.word	0xe000ed00

08001764 <NVIC_EncodePriority>:
{
 8001764:	b480      	push	{r7}
 8001766:	b089      	sub	sp, #36	@ 0x24
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	60b9      	str	r1, [r7, #8]
 800176e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f003 0307 	and.w	r3, r3, #7
 8001776:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	f1c3 0307 	rsb	r3, r3, #7
 800177e:	2b04      	cmp	r3, #4
 8001780:	bf28      	it	cs
 8001782:	2304      	movcs	r3, #4
 8001784:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	3304      	adds	r3, #4
 800178a:	2b06      	cmp	r3, #6
 800178c:	d902      	bls.n	8001794 <NVIC_EncodePriority+0x30>
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	3b03      	subs	r3, #3
 8001792:	e000      	b.n	8001796 <NVIC_EncodePriority+0x32>
 8001794:	2300      	movs	r3, #0
 8001796:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001798:	f04f 32ff 	mov.w	r2, #4294967295
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	fa02 f303 	lsl.w	r3, r2, r3
 80017a2:	43da      	mvns	r2, r3
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	401a      	ands	r2, r3
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017ac:	f04f 31ff 	mov.w	r1, #4294967295
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	fa01 f303 	lsl.w	r3, r1, r3
 80017b6:	43d9      	mvns	r1, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017bc:	4313      	orrs	r3, r2
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3724      	adds	r7, #36	@ 0x24
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
	...

080017cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	3b01      	subs	r3, #1
 80017d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017dc:	d301      	bcc.n	80017e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017de:	2301      	movs	r3, #1
 80017e0:	e00f      	b.n	8001802 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017e2:	4a0a      	ldr	r2, [pc, #40]	@ (800180c <SysTick_Config+0x40>)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	3b01      	subs	r3, #1
 80017e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ea:	210f      	movs	r1, #15
 80017ec:	f04f 30ff 	mov.w	r0, #4294967295
 80017f0:	f7ff ff8e 	bl	8001710 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017f4:	4b05      	ldr	r3, [pc, #20]	@ (800180c <SysTick_Config+0x40>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017fa:	4b04      	ldr	r3, [pc, #16]	@ (800180c <SysTick_Config+0x40>)
 80017fc:	2207      	movs	r2, #7
 80017fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	e000e010 	.word	0xe000e010

08001810 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f7ff ff47 	bl	80016ac <__NVIC_SetPriorityGrouping>
}
 800181e:	bf00      	nop
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001826:	b580      	push	{r7, lr}
 8001828:	b086      	sub	sp, #24
 800182a:	af00      	add	r7, sp, #0
 800182c:	4603      	mov	r3, r0
 800182e:	60b9      	str	r1, [r7, #8]
 8001830:	607a      	str	r2, [r7, #4]
 8001832:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001834:	2300      	movs	r3, #0
 8001836:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001838:	f7ff ff5c 	bl	80016f4 <__NVIC_GetPriorityGrouping>
 800183c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	68b9      	ldr	r1, [r7, #8]
 8001842:	6978      	ldr	r0, [r7, #20]
 8001844:	f7ff ff8e 	bl	8001764 <NVIC_EncodePriority>
 8001848:	4602      	mov	r2, r0
 800184a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800184e:	4611      	mov	r1, r2
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff ff5d 	bl	8001710 <__NVIC_SetPriority>
}
 8001856:	bf00      	nop
 8001858:	3718      	adds	r7, #24
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800185e:	b580      	push	{r7, lr}
 8001860:	b082      	sub	sp, #8
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f7ff ffb0 	bl	80017cc <SysTick_Config>
 800186c:	4603      	mov	r3, r0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
	...

08001878 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001878:	b480      	push	{r7}
 800187a:	b089      	sub	sp, #36	@ 0x24
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001882:	2300      	movs	r3, #0
 8001884:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001886:	2300      	movs	r3, #0
 8001888:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800188a:	2300      	movs	r3, #0
 800188c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800188e:	2300      	movs	r3, #0
 8001890:	61fb      	str	r3, [r7, #28]
 8001892:	e16b      	b.n	8001b6c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001894:	2201      	movs	r2, #1
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	697a      	ldr	r2, [r7, #20]
 80018a4:	4013      	ands	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018a8:	693a      	ldr	r2, [r7, #16]
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	f040 815a 	bne.w	8001b66 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f003 0303 	and.w	r3, r3, #3
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d005      	beq.n	80018ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d130      	bne.n	800192c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	2203      	movs	r2, #3
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	43db      	mvns	r3, r3
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	4013      	ands	r3, r2
 80018e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	68da      	ldr	r2, [r3, #12]
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001900:	2201      	movs	r2, #1
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	43db      	mvns	r3, r3
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	4013      	ands	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	091b      	lsrs	r3, r3, #4
 8001916:	f003 0201 	and.w	r2, r3, #1
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	4313      	orrs	r3, r2
 8001924:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f003 0303 	and.w	r3, r3, #3
 8001934:	2b03      	cmp	r3, #3
 8001936:	d017      	beq.n	8001968 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	2203      	movs	r2, #3
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	43db      	mvns	r3, r3
 800194a:	69ba      	ldr	r2, [r7, #24]
 800194c:	4013      	ands	r3, r2
 800194e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	689a      	ldr	r2, [r3, #8]
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	4313      	orrs	r3, r2
 8001960:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f003 0303 	and.w	r3, r3, #3
 8001970:	2b02      	cmp	r3, #2
 8001972:	d123      	bne.n	80019bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	08da      	lsrs	r2, r3, #3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	3208      	adds	r2, #8
 800197c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001980:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	f003 0307 	and.w	r3, r3, #7
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	220f      	movs	r2, #15
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	43db      	mvns	r3, r3
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	4013      	ands	r3, r2
 8001996:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	691a      	ldr	r2, [r3, #16]
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	f003 0307 	and.w	r3, r3, #7
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	08da      	lsrs	r2, r3, #3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	3208      	adds	r2, #8
 80019b6:	69b9      	ldr	r1, [r7, #24]
 80019b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	2203      	movs	r2, #3
 80019c8:	fa02 f303 	lsl.w	r3, r2, r3
 80019cc:	43db      	mvns	r3, r3
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	4013      	ands	r3, r2
 80019d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f003 0203 	and.w	r2, r3, #3
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	f000 80b4 	beq.w	8001b66 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	60fb      	str	r3, [r7, #12]
 8001a02:	4b60      	ldr	r3, [pc, #384]	@ (8001b84 <HAL_GPIO_Init+0x30c>)
 8001a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a06:	4a5f      	ldr	r2, [pc, #380]	@ (8001b84 <HAL_GPIO_Init+0x30c>)
 8001a08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a0e:	4b5d      	ldr	r3, [pc, #372]	@ (8001b84 <HAL_GPIO_Init+0x30c>)
 8001a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a16:	60fb      	str	r3, [r7, #12]
 8001a18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a1a:	4a5b      	ldr	r2, [pc, #364]	@ (8001b88 <HAL_GPIO_Init+0x310>)
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	089b      	lsrs	r3, r3, #2
 8001a20:	3302      	adds	r3, #2
 8001a22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	f003 0303 	and.w	r3, r3, #3
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	220f      	movs	r2, #15
 8001a32:	fa02 f303 	lsl.w	r3, r2, r3
 8001a36:	43db      	mvns	r3, r3
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a52      	ldr	r2, [pc, #328]	@ (8001b8c <HAL_GPIO_Init+0x314>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d02b      	beq.n	8001a9e <HAL_GPIO_Init+0x226>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a51      	ldr	r2, [pc, #324]	@ (8001b90 <HAL_GPIO_Init+0x318>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d025      	beq.n	8001a9a <HAL_GPIO_Init+0x222>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a50      	ldr	r2, [pc, #320]	@ (8001b94 <HAL_GPIO_Init+0x31c>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d01f      	beq.n	8001a96 <HAL_GPIO_Init+0x21e>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a4f      	ldr	r2, [pc, #316]	@ (8001b98 <HAL_GPIO_Init+0x320>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d019      	beq.n	8001a92 <HAL_GPIO_Init+0x21a>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a4e      	ldr	r2, [pc, #312]	@ (8001b9c <HAL_GPIO_Init+0x324>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d013      	beq.n	8001a8e <HAL_GPIO_Init+0x216>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a4d      	ldr	r2, [pc, #308]	@ (8001ba0 <HAL_GPIO_Init+0x328>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d00d      	beq.n	8001a8a <HAL_GPIO_Init+0x212>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a4c      	ldr	r2, [pc, #304]	@ (8001ba4 <HAL_GPIO_Init+0x32c>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d007      	beq.n	8001a86 <HAL_GPIO_Init+0x20e>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a4b      	ldr	r2, [pc, #300]	@ (8001ba8 <HAL_GPIO_Init+0x330>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d101      	bne.n	8001a82 <HAL_GPIO_Init+0x20a>
 8001a7e:	2307      	movs	r3, #7
 8001a80:	e00e      	b.n	8001aa0 <HAL_GPIO_Init+0x228>
 8001a82:	2308      	movs	r3, #8
 8001a84:	e00c      	b.n	8001aa0 <HAL_GPIO_Init+0x228>
 8001a86:	2306      	movs	r3, #6
 8001a88:	e00a      	b.n	8001aa0 <HAL_GPIO_Init+0x228>
 8001a8a:	2305      	movs	r3, #5
 8001a8c:	e008      	b.n	8001aa0 <HAL_GPIO_Init+0x228>
 8001a8e:	2304      	movs	r3, #4
 8001a90:	e006      	b.n	8001aa0 <HAL_GPIO_Init+0x228>
 8001a92:	2303      	movs	r3, #3
 8001a94:	e004      	b.n	8001aa0 <HAL_GPIO_Init+0x228>
 8001a96:	2302      	movs	r3, #2
 8001a98:	e002      	b.n	8001aa0 <HAL_GPIO_Init+0x228>
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e000      	b.n	8001aa0 <HAL_GPIO_Init+0x228>
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	69fa      	ldr	r2, [r7, #28]
 8001aa2:	f002 0203 	and.w	r2, r2, #3
 8001aa6:	0092      	lsls	r2, r2, #2
 8001aa8:	4093      	lsls	r3, r2
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ab0:	4935      	ldr	r1, [pc, #212]	@ (8001b88 <HAL_GPIO_Init+0x310>)
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	089b      	lsrs	r3, r3, #2
 8001ab6:	3302      	adds	r3, #2
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001abe:	4b3b      	ldr	r3, [pc, #236]	@ (8001bac <HAL_GPIO_Init+0x334>)
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	43db      	mvns	r3, r3
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	4013      	ands	r3, r2
 8001acc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d003      	beq.n	8001ae2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ae2:	4a32      	ldr	r2, [pc, #200]	@ (8001bac <HAL_GPIO_Init+0x334>)
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ae8:	4b30      	ldr	r3, [pc, #192]	@ (8001bac <HAL_GPIO_Init+0x334>)
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	43db      	mvns	r3, r3
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	4013      	ands	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d003      	beq.n	8001b0c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b0c:	4a27      	ldr	r2, [pc, #156]	@ (8001bac <HAL_GPIO_Init+0x334>)
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b12:	4b26      	ldr	r3, [pc, #152]	@ (8001bac <HAL_GPIO_Init+0x334>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	43db      	mvns	r3, r3
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	4013      	ands	r3, r2
 8001b20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d003      	beq.n	8001b36 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b36:	4a1d      	ldr	r2, [pc, #116]	@ (8001bac <HAL_GPIO_Init+0x334>)
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b3c:	4b1b      	ldr	r3, [pc, #108]	@ (8001bac <HAL_GPIO_Init+0x334>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	43db      	mvns	r3, r3
 8001b46:	69ba      	ldr	r2, [r7, #24]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d003      	beq.n	8001b60 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b60:	4a12      	ldr	r2, [pc, #72]	@ (8001bac <HAL_GPIO_Init+0x334>)
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	3301      	adds	r3, #1
 8001b6a:	61fb      	str	r3, [r7, #28]
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	2b0f      	cmp	r3, #15
 8001b70:	f67f ae90 	bls.w	8001894 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b74:	bf00      	nop
 8001b76:	bf00      	nop
 8001b78:	3724      	adds	r7, #36	@ 0x24
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	40023800 	.word	0x40023800
 8001b88:	40013800 	.word	0x40013800
 8001b8c:	40020000 	.word	0x40020000
 8001b90:	40020400 	.word	0x40020400
 8001b94:	40020800 	.word	0x40020800
 8001b98:	40020c00 	.word	0x40020c00
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	40021400 	.word	0x40021400
 8001ba4:	40021800 	.word	0x40021800
 8001ba8:	40021c00 	.word	0x40021c00
 8001bac:	40013c00 	.word	0x40013c00

08001bb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bb4:	4b03      	ldr	r3, [pc, #12]	@ (8001bc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	20000000 	.word	0x20000000

08001bc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001bcc:	f7ff fff0 	bl	8001bb0 <HAL_RCC_GetHCLKFreq>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	4b05      	ldr	r3, [pc, #20]	@ (8001be8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	0a9b      	lsrs	r3, r3, #10
 8001bd8:	f003 0307 	and.w	r3, r3, #7
 8001bdc:	4903      	ldr	r1, [pc, #12]	@ (8001bec <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bde:	5ccb      	ldrb	r3, [r1, r3]
 8001be0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	40023800 	.word	0x40023800
 8001bec:	08003864 	.word	0x08003864

08001bf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001bf4:	f7ff ffdc 	bl	8001bb0 <HAL_RCC_GetHCLKFreq>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	4b05      	ldr	r3, [pc, #20]	@ (8001c10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	0b5b      	lsrs	r3, r3, #13
 8001c00:	f003 0307 	and.w	r3, r3, #7
 8001c04:	4903      	ldr	r1, [pc, #12]	@ (8001c14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c06:	5ccb      	ldrb	r3, [r1, r3]
 8001c08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	40023800 	.word	0x40023800
 8001c14:	08003864 	.word	0x08003864

08001c18 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d101      	bne.n	8001c2e <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e038      	b.n	8001ca0 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d106      	bne.n	8001c48 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8001c42:	68f8      	ldr	r0, [r7, #12]
 8001c44:	f7ff fc78 	bl	8001538 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	3308      	adds	r3, #8
 8001c50:	4619      	mov	r1, r3
 8001c52:	4610      	mov	r0, r2
 8001c54:	f000 fbc8 	bl	80023e8 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	6818      	ldr	r0, [r3, #0]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	461a      	mov	r2, r3
 8001c62:	68b9      	ldr	r1, [r7, #8]
 8001c64:	f000 fc2a 	bl	80024bc <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	6858      	ldr	r0, [r3, #4]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	689a      	ldr	r2, [r3, #8]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c74:	6879      	ldr	r1, [r7, #4]
 8001c76:	f000 fc57 	bl	8002528 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	68fa      	ldr	r2, [r7, #12]
 8001c80:	6892      	ldr	r2, [r2, #8]
 8001c82:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	68fa      	ldr	r2, [r7, #12]
 8001c8c:	6892      	ldr	r2, [r2, #8]
 8001c8e:	f041 0101 	orr.w	r1, r1, #1
 8001c92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2201      	movs	r2, #1
 8001c9a:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 8001c9e:	2300      	movs	r3, #0
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3710      	adds	r7, #16
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d101      	bne.n	8001cba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e042      	b.n	8001d40 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d106      	bne.n	8001cd4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f7ff fb68 	bl	80013a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2224      	movs	r2, #36	@ 0x24
 8001cd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	68da      	ldr	r2, [r3, #12]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001cea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f000 f82b 	bl	8001d48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	691a      	ldr	r2, [r3, #16]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001d00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	695a      	ldr	r2, [r3, #20]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001d10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	68da      	ldr	r2, [r3, #12]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001d20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2220      	movs	r2, #32
 8001d2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2220      	movs	r2, #32
 8001d34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3708      	adds	r7, #8
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d4c:	b0c0      	sub	sp, #256	@ 0x100
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	691b      	ldr	r3, [r3, #16]
 8001d5c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d64:	68d9      	ldr	r1, [r3, #12]
 8001d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	ea40 0301 	orr.w	r3, r0, r1
 8001d70:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001d72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d76:	689a      	ldr	r2, [r3, #8]
 8001d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d7c:	691b      	ldr	r3, [r3, #16]
 8001d7e:	431a      	orrs	r2, r3
 8001d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d84:	695b      	ldr	r3, [r3, #20]
 8001d86:	431a      	orrs	r2, r3
 8001d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d8c:	69db      	ldr	r3, [r3, #28]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8001da0:	f021 010c 	bic.w	r1, r1, #12
 8001da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001dae:	430b      	orrs	r3, r1
 8001db0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	695b      	ldr	r3, [r3, #20]
 8001dba:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8001dbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001dc2:	6999      	ldr	r1, [r3, #24]
 8001dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	ea40 0301 	orr.w	r3, r0, r1
 8001dce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	4b8f      	ldr	r3, [pc, #572]	@ (8002014 <UART_SetConfig+0x2cc>)
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d005      	beq.n	8001de8 <UART_SetConfig+0xa0>
 8001ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	4b8d      	ldr	r3, [pc, #564]	@ (8002018 <UART_SetConfig+0x2d0>)
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d104      	bne.n	8001df2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001de8:	f7ff ff02 	bl	8001bf0 <HAL_RCC_GetPCLK2Freq>
 8001dec:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8001df0:	e003      	b.n	8001dfa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001df2:	f7ff fee9 	bl	8001bc8 <HAL_RCC_GetPCLK1Freq>
 8001df6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001dfe:	69db      	ldr	r3, [r3, #28]
 8001e00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001e04:	f040 810c 	bne.w	8002020 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001e08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001e12:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001e16:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001e1a:	4622      	mov	r2, r4
 8001e1c:	462b      	mov	r3, r5
 8001e1e:	1891      	adds	r1, r2, r2
 8001e20:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001e22:	415b      	adcs	r3, r3
 8001e24:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001e26:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001e2a:	4621      	mov	r1, r4
 8001e2c:	eb12 0801 	adds.w	r8, r2, r1
 8001e30:	4629      	mov	r1, r5
 8001e32:	eb43 0901 	adc.w	r9, r3, r1
 8001e36:	f04f 0200 	mov.w	r2, #0
 8001e3a:	f04f 0300 	mov.w	r3, #0
 8001e3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e4a:	4690      	mov	r8, r2
 8001e4c:	4699      	mov	r9, r3
 8001e4e:	4623      	mov	r3, r4
 8001e50:	eb18 0303 	adds.w	r3, r8, r3
 8001e54:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001e58:	462b      	mov	r3, r5
 8001e5a:	eb49 0303 	adc.w	r3, r9, r3
 8001e5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001e62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001e6e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001e72:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8001e76:	460b      	mov	r3, r1
 8001e78:	18db      	adds	r3, r3, r3
 8001e7a:	653b      	str	r3, [r7, #80]	@ 0x50
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	eb42 0303 	adc.w	r3, r2, r3
 8001e82:	657b      	str	r3, [r7, #84]	@ 0x54
 8001e84:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001e88:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001e8c:	f7fe f9a0 	bl	80001d0 <__aeabi_uldivmod>
 8001e90:	4602      	mov	r2, r0
 8001e92:	460b      	mov	r3, r1
 8001e94:	4b61      	ldr	r3, [pc, #388]	@ (800201c <UART_SetConfig+0x2d4>)
 8001e96:	fba3 2302 	umull	r2, r3, r3, r2
 8001e9a:	095b      	lsrs	r3, r3, #5
 8001e9c:	011c      	lsls	r4, r3, #4
 8001e9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001ea8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001eac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8001eb0:	4642      	mov	r2, r8
 8001eb2:	464b      	mov	r3, r9
 8001eb4:	1891      	adds	r1, r2, r2
 8001eb6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001eb8:	415b      	adcs	r3, r3
 8001eba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ebc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001ec0:	4641      	mov	r1, r8
 8001ec2:	eb12 0a01 	adds.w	sl, r2, r1
 8001ec6:	4649      	mov	r1, r9
 8001ec8:	eb43 0b01 	adc.w	fp, r3, r1
 8001ecc:	f04f 0200 	mov.w	r2, #0
 8001ed0:	f04f 0300 	mov.w	r3, #0
 8001ed4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001ed8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001edc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001ee0:	4692      	mov	sl, r2
 8001ee2:	469b      	mov	fp, r3
 8001ee4:	4643      	mov	r3, r8
 8001ee6:	eb1a 0303 	adds.w	r3, sl, r3
 8001eea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001eee:	464b      	mov	r3, r9
 8001ef0:	eb4b 0303 	adc.w	r3, fp, r3
 8001ef4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001f04:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001f08:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	18db      	adds	r3, r3, r3
 8001f10:	643b      	str	r3, [r7, #64]	@ 0x40
 8001f12:	4613      	mov	r3, r2
 8001f14:	eb42 0303 	adc.w	r3, r2, r3
 8001f18:	647b      	str	r3, [r7, #68]	@ 0x44
 8001f1a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001f1e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8001f22:	f7fe f955 	bl	80001d0 <__aeabi_uldivmod>
 8001f26:	4602      	mov	r2, r0
 8001f28:	460b      	mov	r3, r1
 8001f2a:	4611      	mov	r1, r2
 8001f2c:	4b3b      	ldr	r3, [pc, #236]	@ (800201c <UART_SetConfig+0x2d4>)
 8001f2e:	fba3 2301 	umull	r2, r3, r3, r1
 8001f32:	095b      	lsrs	r3, r3, #5
 8001f34:	2264      	movs	r2, #100	@ 0x64
 8001f36:	fb02 f303 	mul.w	r3, r2, r3
 8001f3a:	1acb      	subs	r3, r1, r3
 8001f3c:	00db      	lsls	r3, r3, #3
 8001f3e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001f42:	4b36      	ldr	r3, [pc, #216]	@ (800201c <UART_SetConfig+0x2d4>)
 8001f44:	fba3 2302 	umull	r2, r3, r3, r2
 8001f48:	095b      	lsrs	r3, r3, #5
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8001f50:	441c      	add	r4, r3
 8001f52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001f56:	2200      	movs	r2, #0
 8001f58:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001f5c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001f60:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8001f64:	4642      	mov	r2, r8
 8001f66:	464b      	mov	r3, r9
 8001f68:	1891      	adds	r1, r2, r2
 8001f6a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001f6c:	415b      	adcs	r3, r3
 8001f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f70:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001f74:	4641      	mov	r1, r8
 8001f76:	1851      	adds	r1, r2, r1
 8001f78:	6339      	str	r1, [r7, #48]	@ 0x30
 8001f7a:	4649      	mov	r1, r9
 8001f7c:	414b      	adcs	r3, r1
 8001f7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f80:	f04f 0200 	mov.w	r2, #0
 8001f84:	f04f 0300 	mov.w	r3, #0
 8001f88:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8001f8c:	4659      	mov	r1, fp
 8001f8e:	00cb      	lsls	r3, r1, #3
 8001f90:	4651      	mov	r1, sl
 8001f92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f96:	4651      	mov	r1, sl
 8001f98:	00ca      	lsls	r2, r1, #3
 8001f9a:	4610      	mov	r0, r2
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	4642      	mov	r2, r8
 8001fa2:	189b      	adds	r3, r3, r2
 8001fa4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001fa8:	464b      	mov	r3, r9
 8001faa:	460a      	mov	r2, r1
 8001fac:	eb42 0303 	adc.w	r3, r2, r3
 8001fb0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001fc0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001fc4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8001fc8:	460b      	mov	r3, r1
 8001fca:	18db      	adds	r3, r3, r3
 8001fcc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001fce:	4613      	mov	r3, r2
 8001fd0:	eb42 0303 	adc.w	r3, r2, r3
 8001fd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001fd6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001fda:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8001fde:	f7fe f8f7 	bl	80001d0 <__aeabi_uldivmod>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	4b0d      	ldr	r3, [pc, #52]	@ (800201c <UART_SetConfig+0x2d4>)
 8001fe8:	fba3 1302 	umull	r1, r3, r3, r2
 8001fec:	095b      	lsrs	r3, r3, #5
 8001fee:	2164      	movs	r1, #100	@ 0x64
 8001ff0:	fb01 f303 	mul.w	r3, r1, r3
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	3332      	adds	r3, #50	@ 0x32
 8001ffa:	4a08      	ldr	r2, [pc, #32]	@ (800201c <UART_SetConfig+0x2d4>)
 8001ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8002000:	095b      	lsrs	r3, r3, #5
 8002002:	f003 0207 	and.w	r2, r3, #7
 8002006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4422      	add	r2, r4
 800200e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002010:	e106      	b.n	8002220 <UART_SetConfig+0x4d8>
 8002012:	bf00      	nop
 8002014:	40011000 	.word	0x40011000
 8002018:	40011400 	.word	0x40011400
 800201c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002020:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002024:	2200      	movs	r2, #0
 8002026:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800202a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800202e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002032:	4642      	mov	r2, r8
 8002034:	464b      	mov	r3, r9
 8002036:	1891      	adds	r1, r2, r2
 8002038:	6239      	str	r1, [r7, #32]
 800203a:	415b      	adcs	r3, r3
 800203c:	627b      	str	r3, [r7, #36]	@ 0x24
 800203e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002042:	4641      	mov	r1, r8
 8002044:	1854      	adds	r4, r2, r1
 8002046:	4649      	mov	r1, r9
 8002048:	eb43 0501 	adc.w	r5, r3, r1
 800204c:	f04f 0200 	mov.w	r2, #0
 8002050:	f04f 0300 	mov.w	r3, #0
 8002054:	00eb      	lsls	r3, r5, #3
 8002056:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800205a:	00e2      	lsls	r2, r4, #3
 800205c:	4614      	mov	r4, r2
 800205e:	461d      	mov	r5, r3
 8002060:	4643      	mov	r3, r8
 8002062:	18e3      	adds	r3, r4, r3
 8002064:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002068:	464b      	mov	r3, r9
 800206a:	eb45 0303 	adc.w	r3, r5, r3
 800206e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800207e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002082:	f04f 0200 	mov.w	r2, #0
 8002086:	f04f 0300 	mov.w	r3, #0
 800208a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800208e:	4629      	mov	r1, r5
 8002090:	008b      	lsls	r3, r1, #2
 8002092:	4621      	mov	r1, r4
 8002094:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002098:	4621      	mov	r1, r4
 800209a:	008a      	lsls	r2, r1, #2
 800209c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80020a0:	f7fe f896 	bl	80001d0 <__aeabi_uldivmod>
 80020a4:	4602      	mov	r2, r0
 80020a6:	460b      	mov	r3, r1
 80020a8:	4b60      	ldr	r3, [pc, #384]	@ (800222c <UART_SetConfig+0x4e4>)
 80020aa:	fba3 2302 	umull	r2, r3, r3, r2
 80020ae:	095b      	lsrs	r3, r3, #5
 80020b0:	011c      	lsls	r4, r3, #4
 80020b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80020b6:	2200      	movs	r2, #0
 80020b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80020bc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80020c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80020c4:	4642      	mov	r2, r8
 80020c6:	464b      	mov	r3, r9
 80020c8:	1891      	adds	r1, r2, r2
 80020ca:	61b9      	str	r1, [r7, #24]
 80020cc:	415b      	adcs	r3, r3
 80020ce:	61fb      	str	r3, [r7, #28]
 80020d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020d4:	4641      	mov	r1, r8
 80020d6:	1851      	adds	r1, r2, r1
 80020d8:	6139      	str	r1, [r7, #16]
 80020da:	4649      	mov	r1, r9
 80020dc:	414b      	adcs	r3, r1
 80020de:	617b      	str	r3, [r7, #20]
 80020e0:	f04f 0200 	mov.w	r2, #0
 80020e4:	f04f 0300 	mov.w	r3, #0
 80020e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80020ec:	4659      	mov	r1, fp
 80020ee:	00cb      	lsls	r3, r1, #3
 80020f0:	4651      	mov	r1, sl
 80020f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80020f6:	4651      	mov	r1, sl
 80020f8:	00ca      	lsls	r2, r1, #3
 80020fa:	4610      	mov	r0, r2
 80020fc:	4619      	mov	r1, r3
 80020fe:	4603      	mov	r3, r0
 8002100:	4642      	mov	r2, r8
 8002102:	189b      	adds	r3, r3, r2
 8002104:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002108:	464b      	mov	r3, r9
 800210a:	460a      	mov	r2, r1
 800210c:	eb42 0303 	adc.w	r3, r2, r3
 8002110:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800211e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002120:	f04f 0200 	mov.w	r2, #0
 8002124:	f04f 0300 	mov.w	r3, #0
 8002128:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800212c:	4649      	mov	r1, r9
 800212e:	008b      	lsls	r3, r1, #2
 8002130:	4641      	mov	r1, r8
 8002132:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002136:	4641      	mov	r1, r8
 8002138:	008a      	lsls	r2, r1, #2
 800213a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800213e:	f7fe f847 	bl	80001d0 <__aeabi_uldivmod>
 8002142:	4602      	mov	r2, r0
 8002144:	460b      	mov	r3, r1
 8002146:	4611      	mov	r1, r2
 8002148:	4b38      	ldr	r3, [pc, #224]	@ (800222c <UART_SetConfig+0x4e4>)
 800214a:	fba3 2301 	umull	r2, r3, r3, r1
 800214e:	095b      	lsrs	r3, r3, #5
 8002150:	2264      	movs	r2, #100	@ 0x64
 8002152:	fb02 f303 	mul.w	r3, r2, r3
 8002156:	1acb      	subs	r3, r1, r3
 8002158:	011b      	lsls	r3, r3, #4
 800215a:	3332      	adds	r3, #50	@ 0x32
 800215c:	4a33      	ldr	r2, [pc, #204]	@ (800222c <UART_SetConfig+0x4e4>)
 800215e:	fba2 2303 	umull	r2, r3, r2, r3
 8002162:	095b      	lsrs	r3, r3, #5
 8002164:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002168:	441c      	add	r4, r3
 800216a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800216e:	2200      	movs	r2, #0
 8002170:	673b      	str	r3, [r7, #112]	@ 0x70
 8002172:	677a      	str	r2, [r7, #116]	@ 0x74
 8002174:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002178:	4642      	mov	r2, r8
 800217a:	464b      	mov	r3, r9
 800217c:	1891      	adds	r1, r2, r2
 800217e:	60b9      	str	r1, [r7, #8]
 8002180:	415b      	adcs	r3, r3
 8002182:	60fb      	str	r3, [r7, #12]
 8002184:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002188:	4641      	mov	r1, r8
 800218a:	1851      	adds	r1, r2, r1
 800218c:	6039      	str	r1, [r7, #0]
 800218e:	4649      	mov	r1, r9
 8002190:	414b      	adcs	r3, r1
 8002192:	607b      	str	r3, [r7, #4]
 8002194:	f04f 0200 	mov.w	r2, #0
 8002198:	f04f 0300 	mov.w	r3, #0
 800219c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80021a0:	4659      	mov	r1, fp
 80021a2:	00cb      	lsls	r3, r1, #3
 80021a4:	4651      	mov	r1, sl
 80021a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80021aa:	4651      	mov	r1, sl
 80021ac:	00ca      	lsls	r2, r1, #3
 80021ae:	4610      	mov	r0, r2
 80021b0:	4619      	mov	r1, r3
 80021b2:	4603      	mov	r3, r0
 80021b4:	4642      	mov	r2, r8
 80021b6:	189b      	adds	r3, r3, r2
 80021b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80021ba:	464b      	mov	r3, r9
 80021bc:	460a      	mov	r2, r1
 80021be:	eb42 0303 	adc.w	r3, r2, r3
 80021c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80021c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80021ce:	667a      	str	r2, [r7, #100]	@ 0x64
 80021d0:	f04f 0200 	mov.w	r2, #0
 80021d4:	f04f 0300 	mov.w	r3, #0
 80021d8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80021dc:	4649      	mov	r1, r9
 80021de:	008b      	lsls	r3, r1, #2
 80021e0:	4641      	mov	r1, r8
 80021e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80021e6:	4641      	mov	r1, r8
 80021e8:	008a      	lsls	r2, r1, #2
 80021ea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80021ee:	f7fd ffef 	bl	80001d0 <__aeabi_uldivmod>
 80021f2:	4602      	mov	r2, r0
 80021f4:	460b      	mov	r3, r1
 80021f6:	4b0d      	ldr	r3, [pc, #52]	@ (800222c <UART_SetConfig+0x4e4>)
 80021f8:	fba3 1302 	umull	r1, r3, r3, r2
 80021fc:	095b      	lsrs	r3, r3, #5
 80021fe:	2164      	movs	r1, #100	@ 0x64
 8002200:	fb01 f303 	mul.w	r3, r1, r3
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	011b      	lsls	r3, r3, #4
 8002208:	3332      	adds	r3, #50	@ 0x32
 800220a:	4a08      	ldr	r2, [pc, #32]	@ (800222c <UART_SetConfig+0x4e4>)
 800220c:	fba2 2303 	umull	r2, r3, r2, r3
 8002210:	095b      	lsrs	r3, r3, #5
 8002212:	f003 020f 	and.w	r2, r3, #15
 8002216:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4422      	add	r2, r4
 800221e:	609a      	str	r2, [r3, #8]
}
 8002220:	bf00      	nop
 8002222:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002226:	46bd      	mov	sp, r7
 8002228:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800222c:	51eb851f 	.word	0x51eb851f

08002230 <LL_ADC_REG_SetSequencerLength>:
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800223e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	431a      	orrs	r2, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800224a:	bf00      	nop
 800224c:	370c      	adds	r7, #12
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr

08002256 <LL_ADC_IsEnabled>:
  * @rmtoll CR2      ADON           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002256:	b480      	push	{r7}
 8002258:	b083      	sub	sp, #12
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	2b01      	cmp	r3, #1
 8002268:	bf0c      	ite	eq
 800226a:	2301      	moveq	r3, #1
 800226c:	2300      	movne	r3, #0
 800226e:	b2db      	uxtb	r3, r3
}
 8002270:	4618      	mov	r0, r3
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 800227c:	b590      	push	{r4, r7, lr}
 800227e:	b085      	sub	sp, #20
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002286:	2300      	movs	r3, #0
 8002288:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 800228a:	481c      	ldr	r0, [pc, #112]	@ (80022fc <LL_ADC_CommonInit+0x80>)
 800228c:	f7ff ffe3 	bl	8002256 <LL_ADC_IsEnabled>
 8002290:	4604      	mov	r4, r0
 8002292:	481b      	ldr	r0, [pc, #108]	@ (8002300 <LL_ADC_CommonInit+0x84>)
 8002294:	f7ff ffdf 	bl	8002256 <LL_ADC_IsEnabled>
 8002298:	4603      	mov	r3, r0
 800229a:	431c      	orrs	r4, r3
 800229c:	4819      	ldr	r0, [pc, #100]	@ (8002304 <LL_ADC_CommonInit+0x88>)
 800229e:	f7ff ffda 	bl	8002256 <LL_ADC_IsEnabled>
 80022a2:	4603      	mov	r3, r0
 80022a4:	4323      	orrs	r3, r4
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d120      	bne.n	80022ec <LL_ADC_CommonInit+0x70>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if (ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d012      	beq.n	80022d8 <LL_ADC_CommonInit+0x5c>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685a      	ldr	r2, [r3, #4]
 80022b6:	4b14      	ldr	r3, [pc, #80]	@ (8002308 <LL_ADC_CommonInit+0x8c>)
 80022b8:	4013      	ands	r3, r2
 80022ba:	683a      	ldr	r2, [r7, #0]
 80022bc:	6811      	ldr	r1, [r2, #0]
 80022be:	683a      	ldr	r2, [r7, #0]
 80022c0:	6852      	ldr	r2, [r2, #4]
 80022c2:	4311      	orrs	r1, r2
 80022c4:	683a      	ldr	r2, [r7, #0]
 80022c6:	6892      	ldr	r2, [r2, #8]
 80022c8:	4311      	orrs	r1, r2
 80022ca:	683a      	ldr	r2, [r7, #0]
 80022cc:	68d2      	ldr	r2, [r2, #12]
 80022ce:	430a      	orrs	r2, r1
 80022d0:	431a      	orrs	r2, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	605a      	str	r2, [r3, #4]
 80022d6:	e00b      	b.n	80022f0 <LL_ADC_CommonInit+0x74>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685a      	ldr	r2, [r3, #4]
 80022dc:	4b0a      	ldr	r3, [pc, #40]	@ (8002308 <LL_ADC_CommonInit+0x8c>)
 80022de:	4013      	ands	r3, r2
 80022e0:	683a      	ldr	r2, [r7, #0]
 80022e2:	6812      	ldr	r2, [r2, #0]
 80022e4:	431a      	orrs	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	605a      	str	r2, [r3, #4]
 80022ea:	e001      	b.n	80022f0 <LL_ADC_CommonInit+0x74>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80022f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3714      	adds	r7, #20
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd90      	pop	{r4, r7, pc}
 80022fa:	bf00      	nop
 80022fc:	40012000 	.word	0x40012000
 8002300:	40012100 	.word	0x40012100
 8002304:	40012200 	.word	0x40012200
 8002308:	fffc10e0 	.word	0xfffc10e0

0800230c <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002316:	2300      	movs	r3, #0
 8002318:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f7ff ff9b 	bl	8002256 <LL_ADC_IsEnabled>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d117      	bne.n	8002356 <LL_ADC_Init+0x4a>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 800232e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002332:	683a      	ldr	r2, [r7, #0]
 8002334:	6811      	ldr	r1, [r2, #0]
 8002336:	683a      	ldr	r2, [r7, #0]
 8002338:	6892      	ldr	r2, [r2, #8]
 800233a:	430a      	orrs	r2, r1
 800233c:	431a      	orrs	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	605a      	str	r2, [r3, #4]
               ,
               ADC_InitStruct->Resolution
               | ADC_InitStruct->SequencersScanMode
              );

    MODIFY_REG(ADCx->CR2,
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	431a      	orrs	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	609a      	str	r2, [r3, #8]
 8002354:	e001      	b.n	800235a <LL_ADC_Init+0x4e>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800235a:	7bfb      	ldrb	r3, [r7, #15]
}
 800235c:	4618      	mov	r0, r3
 800235e:	3710      	adds	r7, #16
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800236e:	2300      	movs	r3, #0
 8002370:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f7ff ff6f 	bl	8002256 <LL_ADC_IsEnabled>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d12b      	bne.n	80023d6 <LL_ADC_REG_Init+0x72>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 series, ADC trigger edge is set when starting      */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if (ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d009      	beq.n	800239a <LL_ADC_REG_Init+0x36>
    {
      MODIFY_REG(ADCx->CR1,
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	431a      	orrs	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	605a      	str	r2, [r3, #4]
 8002398:	e005      	b.n	80023a6 <LL_ADC_REG_Init+0x42>
                 ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	605a      	str	r2, [r3, #4]
                 ,
                 LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }

    MODIFY_REG(ADCx->CR2,
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	689a      	ldr	r2, [r3, #8]
 80023aa:	4b0e      	ldr	r3, [pc, #56]	@ (80023e4 <LL_ADC_REG_Init+0x80>)
 80023ac:	4013      	ands	r3, r2
 80023ae:	683a      	ldr	r2, [r7, #0]
 80023b0:	6812      	ldr	r2, [r2, #0]
 80023b2:	f002 6170 	and.w	r1, r2, #251658240	@ 0xf000000
 80023b6:	683a      	ldr	r2, [r7, #0]
 80023b8:	68d2      	ldr	r2, [r2, #12]
 80023ba:	4311      	orrs	r1, r2
 80023bc:	683a      	ldr	r2, [r7, #0]
 80023be:	6912      	ldr	r2, [r2, #16]
 80023c0:	430a      	orrs	r2, r1
 80023c2:	431a      	orrs	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	4619      	mov	r1, r3
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f7ff ff2e 	bl	8002230 <LL_ADC_REG_SetSequencerLength>
 80023d4:	e001      	b.n	80023da <LL_ADC_REG_Init+0x76>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80023da:	7bfb      	ldrb	r3, [r7, #15]
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3710      	adds	r7, #16
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	c0fffcfd 	.word	0xc0fffcfd

080023e8 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b087      	sub	sp, #28
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023fc:	683a      	ldr	r2, [r7, #0]
 80023fe:	6812      	ldr	r2, [r2, #0]
 8002400:	f023 0101 	bic.w	r1, r3, #1
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	2b08      	cmp	r3, #8
 8002410:	d102      	bne.n	8002418 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8002412:	2340      	movs	r3, #64	@ 0x40
 8002414:	617b      	str	r3, [r7, #20]
 8002416:	e001      	b.n	800241c <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8002418:	2300      	movs	r3, #0
 800241a:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8002428:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800242e:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8002434:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800243a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8002440:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8002446:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 800244c:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 8002452:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 8002458:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 800245e:	4313      	orrs	r3, r2
 8002460:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	699b      	ldr	r3, [r3, #24]
 8002466:	693a      	ldr	r2, [r7, #16]
 8002468:	4313      	orrs	r3, r2
 800246a:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002470:	693a      	ldr	r2, [r7, #16]
 8002472:	4313      	orrs	r3, r2
 8002474:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8002476:	4b10      	ldr	r3, [pc, #64]	@ (80024b8 <FSMC_NORSRAM_Init+0xd0>)
 8002478:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002480:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8002488:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	43db      	mvns	r3, r3
 8002498:	ea02 0103 	and.w	r1, r2, r3
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	4319      	orrs	r1, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 80024aa:	2300      	movs	r3, #0
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	371c      	adds	r7, #28
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr
 80024b8:	0008fb7f 	.word	0x0008fb7f

080024bc <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	1c5a      	adds	r2, r3, #1
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024d2:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	011b      	lsls	r3, r3, #4
 80024e0:	431a      	orrs	r2, r3
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	021b      	lsls	r3, r3, #8
 80024e8:	431a      	orrs	r2, r3
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	041b      	lsls	r3, r3, #16
 80024f0:	431a      	orrs	r2, r3
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	3b01      	subs	r3, #1
 80024f8:	051b      	lsls	r3, r3, #20
 80024fa:	431a      	orrs	r2, r3
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	695b      	ldr	r3, [r3, #20]
 8002500:	3b02      	subs	r3, #2
 8002502:	061b      	lsls	r3, r3, #24
 8002504:	431a      	orrs	r2, r3
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	699b      	ldr	r3, [r3, #24]
 800250a:	4313      	orrs	r3, r2
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	3201      	adds	r2, #1
 8002510:	4319      	orrs	r1, r3
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3714      	adds	r7, #20
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
	...

08002528 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8002528:	b480      	push	{r7}
 800252a:	b085      	sub	sp, #20
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	607a      	str	r2, [r7, #4]
 8002534:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800253c:	d11d      	bne.n	800257a <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002546:	4b13      	ldr	r3, [pc, #76]	@ (8002594 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8002548:	4013      	ands	r3, r2
 800254a:	68ba      	ldr	r2, [r7, #8]
 800254c:	6811      	ldr	r1, [r2, #0]
 800254e:	68ba      	ldr	r2, [r7, #8]
 8002550:	6852      	ldr	r2, [r2, #4]
 8002552:	0112      	lsls	r2, r2, #4
 8002554:	4311      	orrs	r1, r2
 8002556:	68ba      	ldr	r2, [r7, #8]
 8002558:	6892      	ldr	r2, [r2, #8]
 800255a:	0212      	lsls	r2, r2, #8
 800255c:	4311      	orrs	r1, r2
 800255e:	68ba      	ldr	r2, [r7, #8]
 8002560:	6992      	ldr	r2, [r2, #24]
 8002562:	4311      	orrs	r1, r2
 8002564:	68ba      	ldr	r2, [r7, #8]
 8002566:	68d2      	ldr	r2, [r2, #12]
 8002568:	0412      	lsls	r2, r2, #16
 800256a:	430a      	orrs	r2, r1
 800256c:	ea43 0102 	orr.w	r1, r3, r2
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002578:	e005      	b.n	8002586 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8002582:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8002586:	2300      	movs	r3, #0
}
 8002588:	4618      	mov	r0, r3
 800258a:	3714      	adds	r7, #20
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr
 8002594:	cff00000 	.word	0xcff00000

08002598 <LL_GPIO_SetPinMode>:
{
 8002598:	b480      	push	{r7}
 800259a:	b08b      	sub	sp, #44	@ 0x2c
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	fa93 f3a3 	rbit	r3, r3
 80025b2:	613b      	str	r3, [r7, #16]
  return result;
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d101      	bne.n	80025c2 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80025be:	2320      	movs	r3, #32
 80025c0:	e003      	b.n	80025ca <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	fab3 f383 	clz	r3, r3
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	2103      	movs	r1, #3
 80025ce:	fa01 f303 	lsl.w	r3, r1, r3
 80025d2:	43db      	mvns	r3, r3
 80025d4:	401a      	ands	r2, r3
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025da:	6a3b      	ldr	r3, [r7, #32]
 80025dc:	fa93 f3a3 	rbit	r3, r3
 80025e0:	61fb      	str	r3, [r7, #28]
  return result;
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80025e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d101      	bne.n	80025f0 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80025ec:	2320      	movs	r3, #32
 80025ee:	e003      	b.n	80025f8 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80025f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f2:	fab3 f383 	clz	r3, r3
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	6879      	ldr	r1, [r7, #4]
 80025fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002600:	431a      	orrs	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	601a      	str	r2, [r3, #0]
}
 8002606:	bf00      	nop
 8002608:	372c      	adds	r7, #44	@ 0x2c
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr

08002612 <LL_GPIO_SetPinOutputType>:
{
 8002612:	b480      	push	{r7}
 8002614:	b085      	sub	sp, #20
 8002616:	af00      	add	r7, sp, #0
 8002618:	60f8      	str	r0, [r7, #12]
 800261a:	60b9      	str	r1, [r7, #8]
 800261c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	685a      	ldr	r2, [r3, #4]
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	43db      	mvns	r3, r3
 8002626:	401a      	ands	r2, r3
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	6879      	ldr	r1, [r7, #4]
 800262c:	fb01 f303 	mul.w	r3, r1, r3
 8002630:	431a      	orrs	r2, r3
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	605a      	str	r2, [r3, #4]
}
 8002636:	bf00      	nop
 8002638:	3714      	adds	r7, #20
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr

08002642 <LL_GPIO_SetPinSpeed>:
{
 8002642:	b480      	push	{r7}
 8002644:	b08b      	sub	sp, #44	@ 0x2c
 8002646:	af00      	add	r7, sp, #0
 8002648:	60f8      	str	r0, [r7, #12]
 800264a:	60b9      	str	r1, [r7, #8]
 800264c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	689a      	ldr	r2, [r3, #8]
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	fa93 f3a3 	rbit	r3, r3
 800265c:	613b      	str	r3, [r7, #16]
  return result;
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d101      	bne.n	800266c <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8002668:	2320      	movs	r3, #32
 800266a:	e003      	b.n	8002674 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	fab3 f383 	clz	r3, r3
 8002672:	b2db      	uxtb	r3, r3
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	2103      	movs	r1, #3
 8002678:	fa01 f303 	lsl.w	r3, r1, r3
 800267c:	43db      	mvns	r3, r3
 800267e:	401a      	ands	r2, r3
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002684:	6a3b      	ldr	r3, [r7, #32]
 8002686:	fa93 f3a3 	rbit	r3, r3
 800268a:	61fb      	str	r3, [r7, #28]
  return result;
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002692:	2b00      	cmp	r3, #0
 8002694:	d101      	bne.n	800269a <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8002696:	2320      	movs	r3, #32
 8002698:	e003      	b.n	80026a2 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800269a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800269c:	fab3 f383 	clz	r3, r3
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	6879      	ldr	r1, [r7, #4]
 80026a6:	fa01 f303 	lsl.w	r3, r1, r3
 80026aa:	431a      	orrs	r2, r3
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	609a      	str	r2, [r3, #8]
}
 80026b0:	bf00      	nop
 80026b2:	372c      	adds	r7, #44	@ 0x2c
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <LL_GPIO_SetPinPull>:
{
 80026bc:	b480      	push	{r7}
 80026be:	b08b      	sub	sp, #44	@ 0x2c
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	68da      	ldr	r2, [r3, #12]
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	fa93 f3a3 	rbit	r3, r3
 80026d6:	613b      	str	r3, [r7, #16]
  return result;
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d101      	bne.n	80026e6 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80026e2:	2320      	movs	r3, #32
 80026e4:	e003      	b.n	80026ee <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	fab3 f383 	clz	r3, r3
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	2103      	movs	r1, #3
 80026f2:	fa01 f303 	lsl.w	r3, r1, r3
 80026f6:	43db      	mvns	r3, r3
 80026f8:	401a      	ands	r2, r3
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fe:	6a3b      	ldr	r3, [r7, #32]
 8002700:	fa93 f3a3 	rbit	r3, r3
 8002704:	61fb      	str	r3, [r7, #28]
  return result;
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800270a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800270c:	2b00      	cmp	r3, #0
 800270e:	d101      	bne.n	8002714 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8002710:	2320      	movs	r3, #32
 8002712:	e003      	b.n	800271c <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8002714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002716:	fab3 f383 	clz	r3, r3
 800271a:	b2db      	uxtb	r3, r3
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	6879      	ldr	r1, [r7, #4]
 8002720:	fa01 f303 	lsl.w	r3, r1, r3
 8002724:	431a      	orrs	r2, r3
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	60da      	str	r2, [r3, #12]
}
 800272a:	bf00      	nop
 800272c:	372c      	adds	r7, #44	@ 0x2c
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr

08002736 <LL_GPIO_SetAFPin_0_7>:
{
 8002736:	b480      	push	{r7}
 8002738:	b08b      	sub	sp, #44	@ 0x2c
 800273a:	af00      	add	r7, sp, #0
 800273c:	60f8      	str	r0, [r7, #12]
 800273e:	60b9      	str	r1, [r7, #8]
 8002740:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6a1a      	ldr	r2, [r3, #32]
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	fa93 f3a3 	rbit	r3, r3
 8002750:	613b      	str	r3, [r7, #16]
  return result;
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d101      	bne.n	8002760 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800275c:	2320      	movs	r3, #32
 800275e:	e003      	b.n	8002768 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	fab3 f383 	clz	r3, r3
 8002766:	b2db      	uxtb	r3, r3
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	210f      	movs	r1, #15
 800276c:	fa01 f303 	lsl.w	r3, r1, r3
 8002770:	43db      	mvns	r3, r3
 8002772:	401a      	ands	r2, r3
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002778:	6a3b      	ldr	r3, [r7, #32]
 800277a:	fa93 f3a3 	rbit	r3, r3
 800277e:	61fb      	str	r3, [r7, #28]
  return result;
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002786:	2b00      	cmp	r3, #0
 8002788:	d101      	bne.n	800278e <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800278a:	2320      	movs	r3, #32
 800278c:	e003      	b.n	8002796 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800278e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002790:	fab3 f383 	clz	r3, r3
 8002794:	b2db      	uxtb	r3, r3
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	6879      	ldr	r1, [r7, #4]
 800279a:	fa01 f303 	lsl.w	r3, r1, r3
 800279e:	431a      	orrs	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	621a      	str	r2, [r3, #32]
}
 80027a4:	bf00      	nop
 80027a6:	372c      	adds	r7, #44	@ 0x2c
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <LL_GPIO_SetAFPin_8_15>:
{
 80027b0:	b480      	push	{r7}
 80027b2:	b08b      	sub	sp, #44	@ 0x2c
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	0a1b      	lsrs	r3, r3, #8
 80027c4:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	fa93 f3a3 	rbit	r3, r3
 80027cc:	613b      	str	r3, [r7, #16]
  return result;
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d101      	bne.n	80027dc <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80027d8:	2320      	movs	r3, #32
 80027da:	e003      	b.n	80027e4 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	fab3 f383 	clz	r3, r3
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	210f      	movs	r1, #15
 80027e8:	fa01 f303 	lsl.w	r3, r1, r3
 80027ec:	43db      	mvns	r3, r3
 80027ee:	401a      	ands	r2, r3
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	0a1b      	lsrs	r3, r3, #8
 80027f4:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f6:	6a3b      	ldr	r3, [r7, #32]
 80027f8:	fa93 f3a3 	rbit	r3, r3
 80027fc:	61fb      	str	r3, [r7, #28]
  return result;
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002804:	2b00      	cmp	r3, #0
 8002806:	d101      	bne.n	800280c <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8002808:	2320      	movs	r3, #32
 800280a:	e003      	b.n	8002814 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800280c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800280e:	fab3 f383 	clz	r3, r3
 8002812:	b2db      	uxtb	r3, r3
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	6879      	ldr	r1, [r7, #4]
 8002818:	fa01 f303 	lsl.w	r3, r1, r3
 800281c:	431a      	orrs	r2, r3
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8002822:	bf00      	nop
 8002824:	372c      	adds	r7, #44	@ 0x2c
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr

0800282e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800282e:	b580      	push	{r7, lr}
 8002830:	b08a      	sub	sp, #40	@ 0x28
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
 8002836:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8002838:	2300      	movs	r3, #0
 800283a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 800283c:	2300      	movs	r3, #0
 800283e:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	fa93 f3a3 	rbit	r3, r3
 800284c:	617b      	str	r3, [r7, #20]
  return result;
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d101      	bne.n	800285c <LL_GPIO_Init+0x2e>
    return 32U;
 8002858:	2320      	movs	r3, #32
 800285a:	e003      	b.n	8002864 <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	fab3 f383 	clz	r3, r3
 8002862:	b2db      	uxtb	r3, r3
 8002864:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002866:	e057      	b.n	8002918 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	2101      	movs	r1, #1
 800286e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002870:	fa01 f303 	lsl.w	r3, r1, r3
 8002874:	4013      	ands	r3, r2
 8002876:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 8002878:	6a3b      	ldr	r3, [r7, #32]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d049      	beq.n	8002912 <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	2b01      	cmp	r3, #1
 8002884:	d003      	beq.n	800288e <LL_GPIO_Init+0x60>
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	2b02      	cmp	r3, #2
 800288c:	d10d      	bne.n	80028aa <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	461a      	mov	r2, r3
 8002894:	6a39      	ldr	r1, [r7, #32]
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f7ff fed3 	bl	8002642 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	461a      	mov	r2, r3
 80028a2:	6a39      	ldr	r1, [r7, #32]
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f7ff feb4 	bl	8002612 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	461a      	mov	r2, r3
 80028b0:	6a39      	ldr	r1, [r7, #32]
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f7ff ff02 	bl	80026bc <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d121      	bne.n	8002904 <LL_GPIO_Init+0xd6>
 80028c0:	6a3b      	ldr	r3, [r7, #32]
 80028c2:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	fa93 f3a3 	rbit	r3, r3
 80028ca:	60bb      	str	r3, [r7, #8]
  return result;
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d101      	bne.n	80028da <LL_GPIO_Init+0xac>
    return 32U;
 80028d6:	2320      	movs	r3, #32
 80028d8:	e003      	b.n	80028e2 <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	fab3 f383 	clz	r3, r3
 80028e0:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80028e2:	2b07      	cmp	r3, #7
 80028e4:	d807      	bhi.n	80028f6 <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	461a      	mov	r2, r3
 80028ec:	6a39      	ldr	r1, [r7, #32]
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f7ff ff21 	bl	8002736 <LL_GPIO_SetAFPin_0_7>
 80028f4:	e006      	b.n	8002904 <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	695b      	ldr	r3, [r3, #20]
 80028fa:	461a      	mov	r2, r3
 80028fc:	6a39      	ldr	r1, [r7, #32]
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f7ff ff56 	bl	80027b0 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	461a      	mov	r2, r3
 800290a:	6a39      	ldr	r1, [r7, #32]
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f7ff fe43 	bl	8002598 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002914:	3301      	adds	r3, #1
 8002916:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800291e:	fa22 f303 	lsr.w	r3, r2, r3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1a0      	bne.n	8002868 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 8002926:	2300      	movs	r3, #0
}
 8002928:	4618      	mov	r0, r3
 800292a:	3728      	adds	r7, #40	@ 0x28
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <LL_RCC_GetSysClkSource>:
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002934:	4b04      	ldr	r3, [pc, #16]	@ (8002948 <LL_RCC_GetSysClkSource+0x18>)
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f003 030c 	and.w	r3, r3, #12
}
 800293c:	4618      	mov	r0, r3
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	40023800 	.word	0x40023800

0800294c <LL_RCC_GetAHBPrescaler>:
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002950:	4b04      	ldr	r3, [pc, #16]	@ (8002964 <LL_RCC_GetAHBPrescaler+0x18>)
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002958:	4618      	mov	r0, r3
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	40023800 	.word	0x40023800

08002968 <LL_RCC_GetAPB1Prescaler>:
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800296c:	4b04      	ldr	r3, [pc, #16]	@ (8002980 <LL_RCC_GetAPB1Prescaler+0x18>)
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 8002974:	4618      	mov	r0, r3
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	40023800 	.word	0x40023800

08002984 <LL_RCC_GetAPB2Prescaler>:
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002988:	4b04      	ldr	r3, [pc, #16]	@ (800299c <LL_RCC_GetAPB2Prescaler+0x18>)
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002990:	4618      	mov	r0, r3
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	40023800 	.word	0x40023800

080029a0 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80029a4:	4b04      	ldr	r3, [pc, #16]	@ (80029b8 <LL_RCC_PLL_GetMainSource+0x18>)
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	40023800 	.word	0x40023800

080029bc <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80029c0:	4b04      	ldr	r3, [pc, #16]	@ (80029d4 <LL_RCC_PLL_GetN+0x18>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	099b      	lsrs	r3, r3, #6
 80029c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr
 80029d4:	40023800 	.word	0x40023800

080029d8 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80029dc:	4b04      	ldr	r3, [pc, #16]	@ (80029f0 <LL_RCC_PLL_GetP+0x18>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	40023800 	.word	0x40023800

080029f4 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80029f8:	4b04      	ldr	r3, [pc, #16]	@ (8002a0c <LL_RCC_PLL_GetDivider+0x18>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	40023800 	.word	0x40023800

08002a10 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002a18:	f000 f820 	bl	8002a5c <RCC_GetSystemClockFreq>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f000 f840 	bl	8002aac <RCC_GetHCLKClockFreq>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f000 f84e 	bl	8002ad8 <RCC_GetPCLK1ClockFreq>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f000 f85a 	bl	8002b00 <RCC_GetPCLK2ClockFreq>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	60da      	str	r2, [r3, #12]
}
 8002a52:	bf00      	nop
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
	...

08002a5c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8002a62:	2300      	movs	r3, #0
 8002a64:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002a66:	f7ff ff63 	bl	8002930 <LL_RCC_GetSysClkSource>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b08      	cmp	r3, #8
 8002a6e:	d00c      	beq.n	8002a8a <RCC_GetSystemClockFreq+0x2e>
 8002a70:	2b08      	cmp	r3, #8
 8002a72:	d80f      	bhi.n	8002a94 <RCC_GetSystemClockFreq+0x38>
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d002      	beq.n	8002a7e <RCC_GetSystemClockFreq+0x22>
 8002a78:	2b04      	cmp	r3, #4
 8002a7a:	d003      	beq.n	8002a84 <RCC_GetSystemClockFreq+0x28>
 8002a7c:	e00a      	b.n	8002a94 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8002a7e:	4b09      	ldr	r3, [pc, #36]	@ (8002aa4 <RCC_GetSystemClockFreq+0x48>)
 8002a80:	607b      	str	r3, [r7, #4]
      break;
 8002a82:	e00a      	b.n	8002a9a <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002a84:	4b08      	ldr	r3, [pc, #32]	@ (8002aa8 <RCC_GetSystemClockFreq+0x4c>)
 8002a86:	607b      	str	r3, [r7, #4]
      break;
 8002a88:	e007      	b.n	8002a9a <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8002a8a:	2008      	movs	r0, #8
 8002a8c:	f000 f84c 	bl	8002b28 <RCC_PLL_GetFreqDomain_SYS>
 8002a90:	6078      	str	r0, [r7, #4]
      break;
 8002a92:	e002      	b.n	8002a9a <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8002a94:	4b03      	ldr	r3, [pc, #12]	@ (8002aa4 <RCC_GetSystemClockFreq+0x48>)
 8002a96:	607b      	str	r3, [r7, #4]
      break;
 8002a98:	bf00      	nop
  }

  return frequency;
 8002a9a:	687b      	ldr	r3, [r7, #4]
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3708      	adds	r7, #8
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	00f42400 	.word	0x00f42400
 8002aa8:	017d7840 	.word	0x017d7840

08002aac <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002ab4:	f7ff ff4a 	bl	800294c <LL_RCC_GetAHBPrescaler>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	091b      	lsrs	r3, r3, #4
 8002abc:	f003 030f 	and.w	r3, r3, #15
 8002ac0:	4a04      	ldr	r2, [pc, #16]	@ (8002ad4 <RCC_GetHCLKClockFreq+0x28>)
 8002ac2:	5cd3      	ldrb	r3, [r2, r3]
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	40d3      	lsrs	r3, r2
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3708      	adds	r7, #8
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	08003854 	.word	0x08003854

08002ad8 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002ae0:	f7ff ff42 	bl	8002968 <LL_RCC_GetAPB1Prescaler>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	0a9b      	lsrs	r3, r3, #10
 8002ae8:	4a04      	ldr	r2, [pc, #16]	@ (8002afc <RCC_GetPCLK1ClockFreq+0x24>)
 8002aea:	5cd3      	ldrb	r3, [r2, r3]
 8002aec:	461a      	mov	r2, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	40d3      	lsrs	r3, r2
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3708      	adds	r7, #8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	08003864 	.word	0x08003864

08002b00 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002b08:	f7ff ff3c 	bl	8002984 <LL_RCC_GetAPB2Prescaler>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	0b5b      	lsrs	r3, r3, #13
 8002b10:	4a04      	ldr	r2, [pc, #16]	@ (8002b24 <RCC_GetPCLK2ClockFreq+0x24>)
 8002b12:	5cd3      	ldrb	r3, [r2, r3]
 8002b14:	461a      	mov	r2, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	40d3      	lsrs	r3, r2
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3708      	adds	r7, #8
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	08003864 	.word	0x08003864

08002b28 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8002b28:	b590      	push	{r4, r7, lr}
 8002b2a:	b087      	sub	sp, #28
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8002b30:	2300      	movs	r3, #0
 8002b32:	617b      	str	r3, [r7, #20]
 8002b34:	2300      	movs	r3, #0
 8002b36:	60fb      	str	r3, [r7, #12]
 8002b38:	2300      	movs	r3, #0
 8002b3a:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002b3c:	f7ff ff30 	bl	80029a0 <LL_RCC_PLL_GetMainSource>
 8002b40:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d004      	beq.n	8002b52 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b4e:	d003      	beq.n	8002b58 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8002b50:	e005      	b.n	8002b5e <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8002b52:	4b12      	ldr	r3, [pc, #72]	@ (8002b9c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002b54:	617b      	str	r3, [r7, #20]
      break;
 8002b56:	e005      	b.n	8002b64 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002b58:	4b11      	ldr	r3, [pc, #68]	@ (8002ba0 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8002b5a:	617b      	str	r3, [r7, #20]
      break;
 8002b5c:	e002      	b.n	8002b64 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8002b5e:	4b0f      	ldr	r3, [pc, #60]	@ (8002b9c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002b60:	617b      	str	r3, [r7, #20]
      break;
 8002b62:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2b08      	cmp	r3, #8
 8002b68:	d113      	bne.n	8002b92 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002b6a:	f7ff ff43 	bl	80029f4 <LL_RCC_PLL_GetDivider>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	fbb3 f4f2 	udiv	r4, r3, r2
 8002b76:	f7ff ff21 	bl	80029bc <LL_RCC_PLL_GetN>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	fb03 f404 	mul.w	r4, r3, r4
 8002b80:	f7ff ff2a 	bl	80029d8 <LL_RCC_PLL_GetP>
 8002b84:	4603      	mov	r3, r0
 8002b86:	0c1b      	lsrs	r3, r3, #16
 8002b88:	3301      	adds	r3, #1
 8002b8a:	005b      	lsls	r3, r3, #1
 8002b8c:	fbb4 f3f3 	udiv	r3, r4, r3
 8002b90:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8002b92:	693b      	ldr	r3, [r7, #16]
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	371c      	adds	r7, #28
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd90      	pop	{r4, r7, pc}
 8002b9c:	00f42400 	.word	0x00f42400
 8002ba0:	017d7840 	.word	0x017d7840

08002ba4 <LL_SPI_IsEnabled>:
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bb4:	2b40      	cmp	r3, #64	@ 0x40
 8002bb6:	d101      	bne.n	8002bbc <LL_SPI_IsEnabled+0x18>
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e000      	b.n	8002bbe <LL_SPI_IsEnabled+0x1a>
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr

08002bca <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b083      	sub	sp, #12
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
 8002bd2:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	461a      	mov	r2, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	611a      	str	r2, [r3, #16]
}
 8002bde:	bf00      	nop
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr

08002bea <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b084      	sub	sp, #16
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
 8002bf2:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f7ff ffd3 	bl	8002ba4 <LL_SPI_IsEnabled>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d139      	bne.n	8002c78 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002c0c:	f023 03bf 	bic.w	r3, r3, #191	@ 0xbf
 8002c10:	683a      	ldr	r2, [r7, #0]
 8002c12:	6811      	ldr	r1, [r2, #0]
 8002c14:	683a      	ldr	r2, [r7, #0]
 8002c16:	6852      	ldr	r2, [r2, #4]
 8002c18:	4311      	orrs	r1, r2
 8002c1a:	683a      	ldr	r2, [r7, #0]
 8002c1c:	6892      	ldr	r2, [r2, #8]
 8002c1e:	4311      	orrs	r1, r2
 8002c20:	683a      	ldr	r2, [r7, #0]
 8002c22:	68d2      	ldr	r2, [r2, #12]
 8002c24:	4311      	orrs	r1, r2
 8002c26:	683a      	ldr	r2, [r7, #0]
 8002c28:	6912      	ldr	r2, [r2, #16]
 8002c2a:	4311      	orrs	r1, r2
 8002c2c:	683a      	ldr	r2, [r7, #0]
 8002c2e:	6952      	ldr	r2, [r2, #20]
 8002c30:	4311      	orrs	r1, r2
 8002c32:	683a      	ldr	r2, [r7, #0]
 8002c34:	6992      	ldr	r2, [r2, #24]
 8002c36:	4311      	orrs	r1, r2
 8002c38:	683a      	ldr	r2, [r7, #0]
 8002c3a:	69d2      	ldr	r2, [r2, #28]
 8002c3c:	4311      	orrs	r1, r2
 8002c3e:	683a      	ldr	r2, [r7, #0]
 8002c40:	6a12      	ldr	r2, [r2, #32]
 8002c42:	430a      	orrs	r2, r1
 8002c44:	431a      	orrs	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f023 0204 	bic.w	r2, r3, #4
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	0c1b      	lsrs	r3, r3, #16
 8002c58:	431a      	orrs	r2, r3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	6a1b      	ldr	r3, [r3, #32]
 8002c62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c66:	d105      	bne.n	8002c74 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f7ff ffab 	bl	8002bca <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8002c74:	2300      	movs	r3, #0
 8002c76:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	69db      	ldr	r3, [r3, #28]
 8002c7c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	61da      	str	r2, [r3, #28]
  return status;
 8002c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3710      	adds	r7, #16
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <LL_TIM_SetPrescaler>:
{
 8002c8e:	b480      	push	{r7}
 8002c90:	b083      	sub	sp, #12
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
 8002c96:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	683a      	ldr	r2, [r7, #0]
 8002c9c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002c9e:	bf00      	nop
 8002ca0:	370c      	adds	r7, #12
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr

08002caa <LL_TIM_SetAutoReload>:
{
 8002caa:	b480      	push	{r7}
 8002cac:	b083      	sub	sp, #12
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
 8002cb2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	683a      	ldr	r2, [r7, #0]
 8002cb8:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8002cba:	bf00      	nop
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr

08002cc6 <LL_TIM_SetRepetitionCounter>:
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	b083      	sub	sp, #12
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
 8002cce:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	683a      	ldr	r2, [r7, #0]
 8002cd4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002cd6:	bf00      	nop
 8002cd8:	370c      	adds	r7, #12
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr

08002ce2 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	b083      	sub	sp, #12
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	695b      	ldr	r3, [r3, #20]
 8002cee:	f043 0201 	orr.w	r2, r3, #1
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	615a      	str	r2, [r3, #20]
}
 8002cf6:	bf00      	nop
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
	...

08002d04 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4a3d      	ldr	r2, [pc, #244]	@ (8002e0c <LL_TIM_Init+0x108>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d013      	beq.n	8002d44 <LL_TIM_Init+0x40>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d22:	d00f      	beq.n	8002d44 <LL_TIM_Init+0x40>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a3a      	ldr	r2, [pc, #232]	@ (8002e10 <LL_TIM_Init+0x10c>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d00b      	beq.n	8002d44 <LL_TIM_Init+0x40>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4a39      	ldr	r2, [pc, #228]	@ (8002e14 <LL_TIM_Init+0x110>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d007      	beq.n	8002d44 <LL_TIM_Init+0x40>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4a38      	ldr	r2, [pc, #224]	@ (8002e18 <LL_TIM_Init+0x114>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d003      	beq.n	8002d44 <LL_TIM_Init+0x40>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4a37      	ldr	r2, [pc, #220]	@ (8002e1c <LL_TIM_Init+0x118>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d106      	bne.n	8002d52 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a2d      	ldr	r2, [pc, #180]	@ (8002e0c <LL_TIM_Init+0x108>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d02b      	beq.n	8002db2 <LL_TIM_Init+0xae>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d60:	d027      	beq.n	8002db2 <LL_TIM_Init+0xae>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a2a      	ldr	r2, [pc, #168]	@ (8002e10 <LL_TIM_Init+0x10c>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d023      	beq.n	8002db2 <LL_TIM_Init+0xae>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a29      	ldr	r2, [pc, #164]	@ (8002e14 <LL_TIM_Init+0x110>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d01f      	beq.n	8002db2 <LL_TIM_Init+0xae>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a28      	ldr	r2, [pc, #160]	@ (8002e18 <LL_TIM_Init+0x114>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d01b      	beq.n	8002db2 <LL_TIM_Init+0xae>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a27      	ldr	r2, [pc, #156]	@ (8002e1c <LL_TIM_Init+0x118>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d017      	beq.n	8002db2 <LL_TIM_Init+0xae>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a26      	ldr	r2, [pc, #152]	@ (8002e20 <LL_TIM_Init+0x11c>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d013      	beq.n	8002db2 <LL_TIM_Init+0xae>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a25      	ldr	r2, [pc, #148]	@ (8002e24 <LL_TIM_Init+0x120>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d00f      	beq.n	8002db2 <LL_TIM_Init+0xae>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a24      	ldr	r2, [pc, #144]	@ (8002e28 <LL_TIM_Init+0x124>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d00b      	beq.n	8002db2 <LL_TIM_Init+0xae>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a23      	ldr	r2, [pc, #140]	@ (8002e2c <LL_TIM_Init+0x128>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d007      	beq.n	8002db2 <LL_TIM_Init+0xae>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a22      	ldr	r2, [pc, #136]	@ (8002e30 <LL_TIM_Init+0x12c>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d003      	beq.n	8002db2 <LL_TIM_Init+0xae>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a21      	ldr	r2, [pc, #132]	@ (8002e34 <LL_TIM_Init+0x130>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d106      	bne.n	8002dc0 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	4619      	mov	r1, r3
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f7ff ff6c 	bl	8002caa <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	881b      	ldrh	r3, [r3, #0]
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f7ff ff58 	bl	8002c8e <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a0a      	ldr	r2, [pc, #40]	@ (8002e0c <LL_TIM_Init+0x108>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d003      	beq.n	8002dee <LL_TIM_Init+0xea>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a0c      	ldr	r2, [pc, #48]	@ (8002e1c <LL_TIM_Init+0x118>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d105      	bne.n	8002dfa <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	4619      	mov	r1, r3
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f7ff ff66 	bl	8002cc6 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f7ff ff71 	bl	8002ce2 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3710      	adds	r7, #16
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	40010000 	.word	0x40010000
 8002e10:	40000400 	.word	0x40000400
 8002e14:	40000800 	.word	0x40000800
 8002e18:	40000c00 	.word	0x40000c00
 8002e1c:	40010400 	.word	0x40010400
 8002e20:	40014000 	.word	0x40014000
 8002e24:	40014400 	.word	0x40014400
 8002e28:	40014800 	.word	0x40014800
 8002e2c:	40001800 	.word	0x40001800
 8002e30:	40001c00 	.word	0x40001c00
 8002e34:	40002000 	.word	0x40002000

08002e38 <LL_USART_IsEnabled>:
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e4c:	bf0c      	ite	eq
 8002e4e:	2301      	moveq	r3, #1
 8002e50:	2300      	movne	r3, #0
 8002e52:	b2db      	uxtb	r3, r3
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <LL_USART_SetStopBitsLength>:
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	431a      	orrs	r2, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	611a      	str	r2, [r3, #16]
}
 8002e7a:	bf00      	nop
 8002e7c:	370c      	adds	r7, #12
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr

08002e86 <LL_USART_SetHWFlowCtrl>:
{
 8002e86:	b480      	push	{r7}
 8002e88:	b083      	sub	sp, #12
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
 8002e8e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	695b      	ldr	r3, [r3, #20]
 8002e94:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	431a      	orrs	r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	615a      	str	r2, [r3, #20]
}
 8002ea0:	bf00      	nop
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <LL_USART_SetBaudRate>:
{
 8002eac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002eb0:	b0c0      	sub	sp, #256	@ 0x100
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002eb8:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 8002ebc:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8002ec0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ec8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ecc:	f040 810c 	bne.w	80030e8 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002ed0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002eda:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002ede:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002ee2:	4622      	mov	r2, r4
 8002ee4:	462b      	mov	r3, r5
 8002ee6:	1891      	adds	r1, r2, r2
 8002ee8:	6639      	str	r1, [r7, #96]	@ 0x60
 8002eea:	415b      	adcs	r3, r3
 8002eec:	667b      	str	r3, [r7, #100]	@ 0x64
 8002eee:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8002ef2:	4621      	mov	r1, r4
 8002ef4:	eb12 0801 	adds.w	r8, r2, r1
 8002ef8:	4629      	mov	r1, r5
 8002efa:	eb43 0901 	adc.w	r9, r3, r1
 8002efe:	f04f 0200 	mov.w	r2, #0
 8002f02:	f04f 0300 	mov.w	r3, #0
 8002f06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f12:	4690      	mov	r8, r2
 8002f14:	4699      	mov	r9, r3
 8002f16:	4623      	mov	r3, r4
 8002f18:	eb18 0303 	adds.w	r3, r8, r3
 8002f1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002f20:	462b      	mov	r3, r5
 8002f22:	eb49 0303 	adc.w	r3, r9, r3
 8002f26:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002f2a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8002f2e:	2200      	movs	r2, #0
 8002f30:	469a      	mov	sl, r3
 8002f32:	4693      	mov	fp, r2
 8002f34:	eb1a 030a 	adds.w	r3, sl, sl
 8002f38:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002f3a:	eb4b 030b 	adc.w	r3, fp, fp
 8002f3e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002f40:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002f44:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002f48:	f7fd f942 	bl	80001d0 <__aeabi_uldivmod>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	460b      	mov	r3, r1
 8002f50:	4b64      	ldr	r3, [pc, #400]	@ (80030e4 <LL_USART_SetBaudRate+0x238>)
 8002f52:	fba3 2302 	umull	r2, r3, r3, r2
 8002f56:	095b      	lsrs	r3, r3, #5
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	011b      	lsls	r3, r3, #4
 8002f5c:	b29c      	uxth	r4, r3
 8002f5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002f62:	2200      	movs	r2, #0
 8002f64:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002f68:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002f6c:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8002f70:	4642      	mov	r2, r8
 8002f72:	464b      	mov	r3, r9
 8002f74:	1891      	adds	r1, r2, r2
 8002f76:	6539      	str	r1, [r7, #80]	@ 0x50
 8002f78:	415b      	adcs	r3, r3
 8002f7a:	657b      	str	r3, [r7, #84]	@ 0x54
 8002f7c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002f80:	4641      	mov	r1, r8
 8002f82:	1851      	adds	r1, r2, r1
 8002f84:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002f86:	4649      	mov	r1, r9
 8002f88:	414b      	adcs	r3, r1
 8002f8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f8c:	f04f 0200 	mov.w	r2, #0
 8002f90:	f04f 0300 	mov.w	r3, #0
 8002f94:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 8002f98:	4659      	mov	r1, fp
 8002f9a:	00cb      	lsls	r3, r1, #3
 8002f9c:	4651      	mov	r1, sl
 8002f9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002fa2:	4651      	mov	r1, sl
 8002fa4:	00ca      	lsls	r2, r1, #3
 8002fa6:	4610      	mov	r0, r2
 8002fa8:	4619      	mov	r1, r3
 8002faa:	4603      	mov	r3, r0
 8002fac:	4642      	mov	r2, r8
 8002fae:	189b      	adds	r3, r3, r2
 8002fb0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002fb4:	464b      	mov	r3, r9
 8002fb6:	460a      	mov	r2, r1
 8002fb8:	eb42 0303 	adc.w	r3, r2, r3
 8002fbc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002fc0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002fca:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8002fce:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	18db      	adds	r3, r3, r3
 8002fd6:	643b      	str	r3, [r7, #64]	@ 0x40
 8002fd8:	4613      	mov	r3, r2
 8002fda:	eb42 0303 	adc.w	r3, r2, r3
 8002fde:	647b      	str	r3, [r7, #68]	@ 0x44
 8002fe0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002fe4:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8002fe8:	f7fd f8f2 	bl	80001d0 <__aeabi_uldivmod>
 8002fec:	4602      	mov	r2, r0
 8002fee:	460b      	mov	r3, r1
 8002ff0:	4611      	mov	r1, r2
 8002ff2:	4b3c      	ldr	r3, [pc, #240]	@ (80030e4 <LL_USART_SetBaudRate+0x238>)
 8002ff4:	fba3 2301 	umull	r2, r3, r3, r1
 8002ff8:	095b      	lsrs	r3, r3, #5
 8002ffa:	2264      	movs	r2, #100	@ 0x64
 8002ffc:	fb02 f303 	mul.w	r3, r2, r3
 8003000:	1acb      	subs	r3, r1, r3
 8003002:	00db      	lsls	r3, r3, #3
 8003004:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003008:	4b36      	ldr	r3, [pc, #216]	@ (80030e4 <LL_USART_SetBaudRate+0x238>)
 800300a:	fba3 2302 	umull	r2, r3, r3, r2
 800300e:	095b      	lsrs	r3, r3, #5
 8003010:	b29b      	uxth	r3, r3
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	b29b      	uxth	r3, r3
 8003016:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800301a:	b29b      	uxth	r3, r3
 800301c:	4423      	add	r3, r4
 800301e:	b29c      	uxth	r4, r3
 8003020:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003024:	2200      	movs	r2, #0
 8003026:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800302a:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800302e:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 8003032:	4642      	mov	r2, r8
 8003034:	464b      	mov	r3, r9
 8003036:	1891      	adds	r1, r2, r2
 8003038:	63b9      	str	r1, [r7, #56]	@ 0x38
 800303a:	415b      	adcs	r3, r3
 800303c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800303e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003042:	4641      	mov	r1, r8
 8003044:	1851      	adds	r1, r2, r1
 8003046:	6339      	str	r1, [r7, #48]	@ 0x30
 8003048:	4649      	mov	r1, r9
 800304a:	414b      	adcs	r3, r1
 800304c:	637b      	str	r3, [r7, #52]	@ 0x34
 800304e:	f04f 0200 	mov.w	r2, #0
 8003052:	f04f 0300 	mov.w	r3, #0
 8003056:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800305a:	4659      	mov	r1, fp
 800305c:	00cb      	lsls	r3, r1, #3
 800305e:	4651      	mov	r1, sl
 8003060:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003064:	4651      	mov	r1, sl
 8003066:	00ca      	lsls	r2, r1, #3
 8003068:	4610      	mov	r0, r2
 800306a:	4619      	mov	r1, r3
 800306c:	4603      	mov	r3, r0
 800306e:	4642      	mov	r2, r8
 8003070:	189b      	adds	r3, r3, r2
 8003072:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003076:	464b      	mov	r3, r9
 8003078:	460a      	mov	r2, r1
 800307a:	eb42 0303 	adc.w	r3, r2, r3
 800307e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003082:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8003086:	2200      	movs	r2, #0
 8003088:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800308c:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8003090:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003094:	460b      	mov	r3, r1
 8003096:	18db      	adds	r3, r3, r3
 8003098:	62bb      	str	r3, [r7, #40]	@ 0x28
 800309a:	4613      	mov	r3, r2
 800309c:	eb42 0303 	adc.w	r3, r2, r3
 80030a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80030a6:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80030aa:	f7fd f891 	bl	80001d0 <__aeabi_uldivmod>
 80030ae:	4602      	mov	r2, r0
 80030b0:	460b      	mov	r3, r1
 80030b2:	4b0c      	ldr	r3, [pc, #48]	@ (80030e4 <LL_USART_SetBaudRate+0x238>)
 80030b4:	fba3 1302 	umull	r1, r3, r3, r2
 80030b8:	095b      	lsrs	r3, r3, #5
 80030ba:	2164      	movs	r1, #100	@ 0x64
 80030bc:	fb01 f303 	mul.w	r3, r1, r3
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	00db      	lsls	r3, r3, #3
 80030c4:	3332      	adds	r3, #50	@ 0x32
 80030c6:	4a07      	ldr	r2, [pc, #28]	@ (80030e4 <LL_USART_SetBaudRate+0x238>)
 80030c8:	fba2 2303 	umull	r2, r3, r2, r3
 80030cc:	095b      	lsrs	r3, r3, #5
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	f003 0307 	and.w	r3, r3, #7
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	4423      	add	r3, r4
 80030d8:	b29b      	uxth	r3, r3
 80030da:	461a      	mov	r2, r3
 80030dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030e0:	609a      	str	r2, [r3, #8]
}
 80030e2:	e108      	b.n	80032f6 <LL_USART_SetBaudRate+0x44a>
 80030e4:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80030e8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80030ec:	2200      	movs	r2, #0
 80030ee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80030f2:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80030f6:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 80030fa:	4642      	mov	r2, r8
 80030fc:	464b      	mov	r3, r9
 80030fe:	1891      	adds	r1, r2, r2
 8003100:	6239      	str	r1, [r7, #32]
 8003102:	415b      	adcs	r3, r3
 8003104:	627b      	str	r3, [r7, #36]	@ 0x24
 8003106:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800310a:	4641      	mov	r1, r8
 800310c:	1854      	adds	r4, r2, r1
 800310e:	4649      	mov	r1, r9
 8003110:	eb43 0501 	adc.w	r5, r3, r1
 8003114:	f04f 0200 	mov.w	r2, #0
 8003118:	f04f 0300 	mov.w	r3, #0
 800311c:	00eb      	lsls	r3, r5, #3
 800311e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003122:	00e2      	lsls	r2, r4, #3
 8003124:	4614      	mov	r4, r2
 8003126:	461d      	mov	r5, r3
 8003128:	4643      	mov	r3, r8
 800312a:	18e3      	adds	r3, r4, r3
 800312c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003130:	464b      	mov	r3, r9
 8003132:	eb45 0303 	adc.w	r3, r5, r3
 8003136:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800313a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800313e:	2200      	movs	r2, #0
 8003140:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003144:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003148:	f04f 0200 	mov.w	r2, #0
 800314c:	f04f 0300 	mov.w	r3, #0
 8003150:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8003154:	4629      	mov	r1, r5
 8003156:	008b      	lsls	r3, r1, #2
 8003158:	4621      	mov	r1, r4
 800315a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800315e:	4621      	mov	r1, r4
 8003160:	008a      	lsls	r2, r1, #2
 8003162:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8003166:	f7fd f833 	bl	80001d0 <__aeabi_uldivmod>
 800316a:	4602      	mov	r2, r0
 800316c:	460b      	mov	r3, r1
 800316e:	4b65      	ldr	r3, [pc, #404]	@ (8003304 <LL_USART_SetBaudRate+0x458>)
 8003170:	fba3 2302 	umull	r2, r3, r3, r2
 8003174:	095b      	lsrs	r3, r3, #5
 8003176:	b29b      	uxth	r3, r3
 8003178:	011b      	lsls	r3, r3, #4
 800317a:	b29c      	uxth	r4, r3
 800317c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003180:	2200      	movs	r2, #0
 8003182:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003186:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800318a:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 800318e:	4642      	mov	r2, r8
 8003190:	464b      	mov	r3, r9
 8003192:	1891      	adds	r1, r2, r2
 8003194:	61b9      	str	r1, [r7, #24]
 8003196:	415b      	adcs	r3, r3
 8003198:	61fb      	str	r3, [r7, #28]
 800319a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800319e:	4641      	mov	r1, r8
 80031a0:	1851      	adds	r1, r2, r1
 80031a2:	6139      	str	r1, [r7, #16]
 80031a4:	4649      	mov	r1, r9
 80031a6:	414b      	adcs	r3, r1
 80031a8:	617b      	str	r3, [r7, #20]
 80031aa:	f04f 0200 	mov.w	r2, #0
 80031ae:	f04f 0300 	mov.w	r3, #0
 80031b2:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80031b6:	4659      	mov	r1, fp
 80031b8:	00cb      	lsls	r3, r1, #3
 80031ba:	4651      	mov	r1, sl
 80031bc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031c0:	4651      	mov	r1, sl
 80031c2:	00ca      	lsls	r2, r1, #3
 80031c4:	4610      	mov	r0, r2
 80031c6:	4619      	mov	r1, r3
 80031c8:	4603      	mov	r3, r0
 80031ca:	4642      	mov	r2, r8
 80031cc:	189b      	adds	r3, r3, r2
 80031ce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80031d2:	464b      	mov	r3, r9
 80031d4:	460a      	mov	r2, r1
 80031d6:	eb42 0303 	adc.w	r3, r2, r3
 80031da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80031de:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80031e2:	2200      	movs	r2, #0
 80031e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80031e8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80031ec:	f04f 0200 	mov.w	r2, #0
 80031f0:	f04f 0300 	mov.w	r3, #0
 80031f4:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 80031f8:	4649      	mov	r1, r9
 80031fa:	008b      	lsls	r3, r1, #2
 80031fc:	4641      	mov	r1, r8
 80031fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003202:	4641      	mov	r1, r8
 8003204:	008a      	lsls	r2, r1, #2
 8003206:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800320a:	f7fc ffe1 	bl	80001d0 <__aeabi_uldivmod>
 800320e:	4602      	mov	r2, r0
 8003210:	460b      	mov	r3, r1
 8003212:	4611      	mov	r1, r2
 8003214:	4b3b      	ldr	r3, [pc, #236]	@ (8003304 <LL_USART_SetBaudRate+0x458>)
 8003216:	fba3 2301 	umull	r2, r3, r3, r1
 800321a:	095b      	lsrs	r3, r3, #5
 800321c:	2264      	movs	r2, #100	@ 0x64
 800321e:	fb02 f303 	mul.w	r3, r2, r3
 8003222:	1acb      	subs	r3, r1, r3
 8003224:	011b      	lsls	r3, r3, #4
 8003226:	3332      	adds	r3, #50	@ 0x32
 8003228:	4a36      	ldr	r2, [pc, #216]	@ (8003304 <LL_USART_SetBaudRate+0x458>)
 800322a:	fba2 2303 	umull	r2, r3, r2, r3
 800322e:	095b      	lsrs	r3, r3, #5
 8003230:	b29b      	uxth	r3, r3
 8003232:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003236:	b29b      	uxth	r3, r3
 8003238:	4423      	add	r3, r4
 800323a:	b29c      	uxth	r4, r3
 800323c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003240:	2200      	movs	r2, #0
 8003242:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003244:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003246:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800324a:	4642      	mov	r2, r8
 800324c:	464b      	mov	r3, r9
 800324e:	1891      	adds	r1, r2, r2
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	415b      	adcs	r3, r3
 8003254:	60fb      	str	r3, [r7, #12]
 8003256:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800325a:	4641      	mov	r1, r8
 800325c:	1851      	adds	r1, r2, r1
 800325e:	6039      	str	r1, [r7, #0]
 8003260:	4649      	mov	r1, r9
 8003262:	414b      	adcs	r3, r1
 8003264:	607b      	str	r3, [r7, #4]
 8003266:	f04f 0200 	mov.w	r2, #0
 800326a:	f04f 0300 	mov.w	r3, #0
 800326e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003272:	4659      	mov	r1, fp
 8003274:	00cb      	lsls	r3, r1, #3
 8003276:	4651      	mov	r1, sl
 8003278:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800327c:	4651      	mov	r1, sl
 800327e:	00ca      	lsls	r2, r1, #3
 8003280:	4610      	mov	r0, r2
 8003282:	4619      	mov	r1, r3
 8003284:	4603      	mov	r3, r0
 8003286:	4642      	mov	r2, r8
 8003288:	189b      	adds	r3, r3, r2
 800328a:	673b      	str	r3, [r7, #112]	@ 0x70
 800328c:	464b      	mov	r3, r9
 800328e:	460a      	mov	r2, r1
 8003290:	eb42 0303 	adc.w	r3, r2, r3
 8003294:	677b      	str	r3, [r7, #116]	@ 0x74
 8003296:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800329a:	2200      	movs	r2, #0
 800329c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800329e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80032a0:	f04f 0200 	mov.w	r2, #0
 80032a4:	f04f 0300 	mov.w	r3, #0
 80032a8:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 80032ac:	4649      	mov	r1, r9
 80032ae:	008b      	lsls	r3, r1, #2
 80032b0:	4641      	mov	r1, r8
 80032b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032b6:	4641      	mov	r1, r8
 80032b8:	008a      	lsls	r2, r1, #2
 80032ba:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80032be:	f7fc ff87 	bl	80001d0 <__aeabi_uldivmod>
 80032c2:	4602      	mov	r2, r0
 80032c4:	460b      	mov	r3, r1
 80032c6:	4b0f      	ldr	r3, [pc, #60]	@ (8003304 <LL_USART_SetBaudRate+0x458>)
 80032c8:	fba3 1302 	umull	r1, r3, r3, r2
 80032cc:	095b      	lsrs	r3, r3, #5
 80032ce:	2164      	movs	r1, #100	@ 0x64
 80032d0:	fb01 f303 	mul.w	r3, r1, r3
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	011b      	lsls	r3, r3, #4
 80032d8:	3332      	adds	r3, #50	@ 0x32
 80032da:	4a0a      	ldr	r2, [pc, #40]	@ (8003304 <LL_USART_SetBaudRate+0x458>)
 80032dc:	fba2 2303 	umull	r2, r3, r2, r3
 80032e0:	095b      	lsrs	r3, r3, #5
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	f003 030f 	and.w	r3, r3, #15
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	4423      	add	r3, r4
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	461a      	mov	r2, r3
 80032f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032f4:	609a      	str	r2, [r3, #8]
}
 80032f6:	bf00      	nop
 80032f8:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80032fc:	46bd      	mov	sp, r7
 80032fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003302:	bf00      	nop
 8003304:	51eb851f 	.word	0x51eb851f

08003308 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b088      	sub	sp, #32
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8003316:	2300      	movs	r3, #0
 8003318:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f7ff fd8c 	bl	8002e38 <LL_USART_IsEnabled>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d15e      	bne.n	80033e4 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 800332e:	f023 030c 	bic.w	r3, r3, #12
 8003332:	683a      	ldr	r2, [r7, #0]
 8003334:	6851      	ldr	r1, [r2, #4]
 8003336:	683a      	ldr	r2, [r7, #0]
 8003338:	68d2      	ldr	r2, [r2, #12]
 800333a:	4311      	orrs	r1, r2
 800333c:	683a      	ldr	r2, [r7, #0]
 800333e:	6912      	ldr	r2, [r2, #16]
 8003340:	4311      	orrs	r1, r2
 8003342:	683a      	ldr	r2, [r7, #0]
 8003344:	6992      	ldr	r2, [r2, #24]
 8003346:	430a      	orrs	r2, r1
 8003348:	431a      	orrs	r2, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	4619      	mov	r1, r3
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f7ff fd83 	bl	8002e60 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	695b      	ldr	r3, [r3, #20]
 800335e:	4619      	mov	r1, r3
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f7ff fd90 	bl	8002e86 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8003366:	f107 0308 	add.w	r3, r7, #8
 800336a:	4618      	mov	r0, r3
 800336c:	f7ff fb50 	bl	8002a10 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4a1f      	ldr	r2, [pc, #124]	@ (80033f0 <LL_USART_Init+0xe8>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d102      	bne.n	800337e <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	61bb      	str	r3, [r7, #24]
 800337c:	e021      	b.n	80033c2 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a1c      	ldr	r2, [pc, #112]	@ (80033f4 <LL_USART_Init+0xec>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d102      	bne.n	800338c <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	61bb      	str	r3, [r7, #24]
 800338a:	e01a      	b.n	80033c2 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4a1a      	ldr	r2, [pc, #104]	@ (80033f8 <LL_USART_Init+0xf0>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d102      	bne.n	800339a <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	61bb      	str	r3, [r7, #24]
 8003398:	e013      	b.n	80033c2 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a17      	ldr	r2, [pc, #92]	@ (80033fc <LL_USART_Init+0xf4>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d102      	bne.n	80033a8 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	61bb      	str	r3, [r7, #24]
 80033a6:	e00c      	b.n	80033c2 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4a15      	ldr	r2, [pc, #84]	@ (8003400 <LL_USART_Init+0xf8>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d102      	bne.n	80033b6 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	61bb      	str	r3, [r7, #24]
 80033b4:	e005      	b.n	80033c2 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a12      	ldr	r2, [pc, #72]	@ (8003404 <LL_USART_Init+0xfc>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d101      	bne.n	80033c2 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d00d      	beq.n	80033e4 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d009      	beq.n	80033e4 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 80033d0:	2300      	movs	r3, #0
 80033d2:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 80033dc:	69b9      	ldr	r1, [r7, #24]
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f7ff fd64 	bl	8002eac <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80033e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3720      	adds	r7, #32
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	40011000 	.word	0x40011000
 80033f4:	40004400 	.word	0x40004400
 80033f8:	40004800 	.word	0x40004800
 80033fc:	40011400 	.word	0x40011400
 8003400:	40004c00 	.word	0x40004c00
 8003404:	40005000 	.word	0x40005000

08003408 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003410:	4a04      	ldr	r2, [pc, #16]	@ (8003424 <LL_SetSystemCoreClock+0x1c>)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6013      	str	r3, [r2, #0]
}
 8003416:	bf00      	nop
 8003418:	370c      	adds	r7, #12
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	20000000 	.word	0x20000000

08003428 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b088      	sub	sp, #32
 800342c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800342e:	2300      	movs	r3, #0
 8003430:	61fb      	str	r3, [r7, #28]

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003432:	4b75      	ldr	r3, [pc, #468]	@ (8003608 <xTaskIncrementTick+0x1e0>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2b00      	cmp	r3, #0
 8003438:	f040 80dc 	bne.w	80035f4 <xTaskIncrementTick+0x1cc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800343c:	4b73      	ldr	r3, [pc, #460]	@ (800360c <xTaskIncrementTick+0x1e4>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	3301      	adds	r3, #1
 8003442:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003444:	4a71      	ldr	r2, [pc, #452]	@ (800360c <xTaskIncrementTick+0x1e4>)
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d110      	bne.n	8003472 <xTaskIncrementTick+0x4a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003450:	4b6f      	ldr	r3, [pc, #444]	@ (8003610 <xTaskIncrementTick+0x1e8>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	617b      	str	r3, [r7, #20]
 8003456:	4b6f      	ldr	r3, [pc, #444]	@ (8003614 <xTaskIncrementTick+0x1ec>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a6d      	ldr	r2, [pc, #436]	@ (8003610 <xTaskIncrementTick+0x1e8>)
 800345c:	6013      	str	r3, [r2, #0]
 800345e:	4a6d      	ldr	r2, [pc, #436]	@ (8003614 <xTaskIncrementTick+0x1ec>)
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	6013      	str	r3, [r2, #0]
 8003464:	4b6c      	ldr	r3, [pc, #432]	@ (8003618 <xTaskIncrementTick+0x1f0>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	3301      	adds	r3, #1
 800346a:	4a6b      	ldr	r2, [pc, #428]	@ (8003618 <xTaskIncrementTick+0x1f0>)
 800346c:	6013      	str	r3, [r2, #0]
 800346e:	f000 f929 	bl	80036c4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003472:	4b6a      	ldr	r3, [pc, #424]	@ (800361c <xTaskIncrementTick+0x1f4>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	429a      	cmp	r2, r3
 800347a:	f0c0 80a6 	bcc.w	80035ca <xTaskIncrementTick+0x1a2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800347e:	4b64      	ldr	r3, [pc, #400]	@ (8003610 <xTaskIncrementTick+0x1e8>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d104      	bne.n	8003492 <xTaskIncrementTick+0x6a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8003488:	4b64      	ldr	r3, [pc, #400]	@ (800361c <xTaskIncrementTick+0x1f4>)
 800348a:	f04f 32ff 	mov.w	r2, #4294967295
 800348e:	601a      	str	r2, [r3, #0]
                    break;
 8003490:	e09b      	b.n	80035ca <xTaskIncrementTick+0x1a2>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003492:	4b5f      	ldr	r3, [pc, #380]	@ (8003610 <xTaskIncrementTick+0x1e8>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 80034a2:	69ba      	ldr	r2, [r7, #24]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d203      	bcs.n	80034b2 <xTaskIncrementTick+0x8a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80034aa:	4a5c      	ldr	r2, [pc, #368]	@ (800361c <xTaskIncrementTick+0x1f4>)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6013      	str	r3, [r2, #0]
                        break;
 80034b0:	e08b      	b.n	80035ca <xTaskIncrementTick+0x1a2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	695b      	ldr	r3, [r3, #20]
 80034b6:	60bb      	str	r3, [r7, #8]
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	693a      	ldr	r2, [r7, #16]
 80034be:	68d2      	ldr	r2, [r2, #12]
 80034c0:	609a      	str	r2, [r3, #8]
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	693a      	ldr	r2, [r7, #16]
 80034c8:	6892      	ldr	r2, [r2, #8]
 80034ca:	605a      	str	r2, [r3, #4]
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	685a      	ldr	r2, [r3, #4]
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	3304      	adds	r3, #4
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d103      	bne.n	80034e0 <xTaskIncrementTick+0xb8>
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	68da      	ldr	r2, [r3, #12]
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	605a      	str	r2, [r3, #4]
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	2200      	movs	r2, #0
 80034e4:	615a      	str	r2, [r3, #20]
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	1e5a      	subs	r2, r3, #1
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d01e      	beq.n	8003536 <xTaskIncrementTick+0x10e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034fc:	607b      	str	r3, [r7, #4]
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	69db      	ldr	r3, [r3, #28]
 8003502:	693a      	ldr	r2, [r7, #16]
 8003504:	6a12      	ldr	r2, [r2, #32]
 8003506:	609a      	str	r2, [r3, #8]
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	6a1b      	ldr	r3, [r3, #32]
 800350c:	693a      	ldr	r2, [r7, #16]
 800350e:	69d2      	ldr	r2, [r2, #28]
 8003510:	605a      	str	r2, [r3, #4]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685a      	ldr	r2, [r3, #4]
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	3318      	adds	r3, #24
 800351a:	429a      	cmp	r2, r3
 800351c:	d103      	bne.n	8003526 <xTaskIncrementTick+0xfe>
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	6a1a      	ldr	r2, [r3, #32]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	605a      	str	r2, [r3, #4]
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	2200      	movs	r2, #0
 800352a:	629a      	str	r2, [r3, #40]	@ 0x28
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	1e5a      	subs	r2, r3, #1
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800353a:	2201      	movs	r2, #1
 800353c:	409a      	lsls	r2, r3
 800353e:	4b38      	ldr	r3, [pc, #224]	@ (8003620 <xTaskIncrementTick+0x1f8>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4313      	orrs	r3, r2
 8003544:	4a36      	ldr	r2, [pc, #216]	@ (8003620 <xTaskIncrementTick+0x1f8>)
 8003546:	6013      	str	r3, [r2, #0]
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800354c:	4935      	ldr	r1, [pc, #212]	@ (8003624 <xTaskIncrementTick+0x1fc>)
 800354e:	4613      	mov	r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	4413      	add	r3, r2
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	440b      	add	r3, r1
 8003558:	3304      	adds	r3, #4
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	603b      	str	r3, [r7, #0]
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	683a      	ldr	r2, [r7, #0]
 8003562:	609a      	str	r2, [r3, #8]
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	689a      	ldr	r2, [r3, #8]
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	60da      	str	r2, [r3, #12]
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	693a      	ldr	r2, [r7, #16]
 8003572:	3204      	adds	r2, #4
 8003574:	605a      	str	r2, [r3, #4]
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	1d1a      	adds	r2, r3, #4
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	609a      	str	r2, [r3, #8]
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003582:	4613      	mov	r3, r2
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	4413      	add	r3, r2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	4a26      	ldr	r2, [pc, #152]	@ (8003624 <xTaskIncrementTick+0x1fc>)
 800358c:	441a      	add	r2, r3
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	615a      	str	r2, [r3, #20]
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003596:	4923      	ldr	r1, [pc, #140]	@ (8003624 <xTaskIncrementTick+0x1fc>)
 8003598:	4613      	mov	r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	4413      	add	r3, r2
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	440b      	add	r3, r1
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	1c59      	adds	r1, r3, #1
 80035a6:	481f      	ldr	r0, [pc, #124]	@ (8003624 <xTaskIncrementTick+0x1fc>)
 80035a8:	4613      	mov	r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	4413      	add	r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	4403      	add	r3, r0
 80035b2:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035b8:	4b1b      	ldr	r3, [pc, #108]	@ (8003628 <xTaskIncrementTick+0x200>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035be:	429a      	cmp	r2, r3
 80035c0:	f67f af5d 	bls.w	800347e <xTaskIncrementTick+0x56>
                            {
                                xSwitchRequired = pdTRUE;
 80035c4:	2301      	movs	r3, #1
 80035c6:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80035c8:	e759      	b.n	800347e <xTaskIncrementTick+0x56>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 80035ca:	4b17      	ldr	r3, [pc, #92]	@ (8003628 <xTaskIncrementTick+0x200>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035d0:	4914      	ldr	r1, [pc, #80]	@ (8003624 <xTaskIncrementTick+0x1fc>)
 80035d2:	4613      	mov	r3, r2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	4413      	add	r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	440b      	add	r3, r1
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d901      	bls.n	80035e6 <xTaskIncrementTick+0x1be>
                {
                    xSwitchRequired = pdTRUE;
 80035e2:	2301      	movs	r3, #1
 80035e4:	61fb      	str	r3, [r7, #28]
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 80035e6:	4b11      	ldr	r3, [pc, #68]	@ (800362c <xTaskIncrementTick+0x204>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d007      	beq.n	80035fe <xTaskIncrementTick+0x1d6>
                {
                    xSwitchRequired = pdTRUE;
 80035ee:	2301      	movs	r3, #1
 80035f0:	61fb      	str	r3, [r7, #28]
 80035f2:	e004      	b.n	80035fe <xTaskIncrementTick+0x1d6>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        ++xPendedTicks;
 80035f4:	4b0e      	ldr	r3, [pc, #56]	@ (8003630 <xTaskIncrementTick+0x208>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	3301      	adds	r3, #1
 80035fa:	4a0d      	ldr	r2, [pc, #52]	@ (8003630 <xTaskIncrementTick+0x208>)
 80035fc:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 80035fe:	69fb      	ldr	r3, [r7, #28]
}
 8003600:	4618      	mov	r0, r3
 8003602:	3720      	adds	r7, #32
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}
 8003608:	20000194 	.word	0x20000194
 800360c:	2000017c 	.word	0x2000017c
 8003610:	20000174 	.word	0x20000174
 8003614:	20000178 	.word	0x20000178
 8003618:	2000018c 	.word	0x2000018c
 800361c:	20000190 	.word	0x20000190
 8003620:	20000180 	.word	0x20000180
 8003624:	20000110 	.word	0x20000110
 8003628:	2000010c 	.word	0x2000010c
 800362c:	20000188 	.word	0x20000188
 8003630:	20000184 	.word	0x20000184

08003634 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8003634:	b480      	push	{r7}
 8003636:	b085      	sub	sp, #20
 8003638:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 800363a:	4b1d      	ldr	r3, [pc, #116]	@ (80036b0 <vTaskSwitchContext+0x7c>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d003      	beq.n	800364a <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8003642:	4b1c      	ldr	r3, [pc, #112]	@ (80036b4 <vTaskSwitchContext+0x80>)
 8003644:	2201      	movs	r2, #1
 8003646:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8003648:	e02b      	b.n	80036a2 <vTaskSwitchContext+0x6e>
            xYieldPendings[ 0 ] = pdFALSE;
 800364a:	4b1a      	ldr	r3, [pc, #104]	@ (80036b4 <vTaskSwitchContext+0x80>)
 800364c:	2200      	movs	r2, #0
 800364e:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8003650:	4b19      	ldr	r3, [pc, #100]	@ (80036b8 <vTaskSwitchContext+0x84>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	607b      	str	r3, [r7, #4]
/* Generic helper function. */
    __attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
    {
        uint8_t ucReturn;

        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	fab3 f383 	clz	r3, r3
 800365c:	70fb      	strb	r3, [r7, #3]

        return ucReturn;
 800365e:	78fb      	ldrb	r3, [r7, #3]
 8003660:	f1c3 031f 	rsb	r3, r3, #31
 8003664:	60fb      	str	r3, [r7, #12]
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	4613      	mov	r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	4413      	add	r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	4a12      	ldr	r2, [pc, #72]	@ (80036bc <vTaskSwitchContext+0x88>)
 8003672:	4413      	add	r3, r2
 8003674:	60bb      	str	r3, [r7, #8]
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	685a      	ldr	r2, [r3, #4]
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	605a      	str	r2, [r3, #4]
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	685a      	ldr	r2, [r3, #4]
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	3308      	adds	r3, #8
 8003688:	429a      	cmp	r2, r3
 800368a:	d103      	bne.n	8003694 <vTaskSwitchContext+0x60>
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	68da      	ldr	r2, [r3, #12]
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	605a      	str	r2, [r3, #4]
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	4a09      	ldr	r2, [pc, #36]	@ (80036c0 <vTaskSwitchContext+0x8c>)
 800369c:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 800369e:	4b08      	ldr	r3, [pc, #32]	@ (80036c0 <vTaskSwitchContext+0x8c>)
 80036a0:	681b      	ldr	r3, [r3, #0]
    }
 80036a2:	bf00      	nop
 80036a4:	3714      	adds	r7, #20
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	20000194 	.word	0x20000194
 80036b4:	20000188 	.word	0x20000188
 80036b8:	20000180 	.word	0x20000180
 80036bc:	20000110 	.word	0x20000110
 80036c0:	2000010c 	.word	0x2000010c

080036c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80036c4:	b480      	push	{r7}
 80036c6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036c8:	4b0a      	ldr	r3, [pc, #40]	@ (80036f4 <prvResetNextTaskUnblockTime+0x30>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d104      	bne.n	80036dc <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80036d2:	4b09      	ldr	r3, [pc, #36]	@ (80036f8 <prvResetNextTaskUnblockTime+0x34>)
 80036d4:	f04f 32ff 	mov.w	r2, #4294967295
 80036d8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80036da:	e005      	b.n	80036e8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80036dc:	4b05      	ldr	r3, [pc, #20]	@ (80036f4 <prvResetNextTaskUnblockTime+0x30>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a04      	ldr	r2, [pc, #16]	@ (80036f8 <prvResetNextTaskUnblockTime+0x34>)
 80036e6:	6013      	str	r3, [r2, #0]
}
 80036e8:	bf00      	nop
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	20000174 	.word	0x20000174
 80036f8:	20000190 	.word	0x20000190
 80036fc:	00000000 	.word	0x00000000

08003700 <vPortSVCHandler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003700:	4b07      	ldr	r3, [pc, #28]	@ (8003720 <pxCurrentTCBConst2>)
 8003702:	6819      	ldr	r1, [r3, #0]
 8003704:	6808      	ldr	r0, [r1, #0]
 8003706:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800370a:	f380 8809 	msr	PSP, r0
 800370e:	f3bf 8f6f 	isb	sy
 8003712:	f04f 0000 	mov.w	r0, #0
 8003716:	f380 8811 	msr	BASEPRI, r0
 800371a:	4770      	bx	lr
 800371c:	f3af 8000 	nop.w

08003720 <pxCurrentTCBConst2>:
 8003720:	2000010c 	.word	0x2000010c
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8003724:	bf00      	nop
 8003726:	bf00      	nop
	...

08003730 <xPortPendSVHandler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003730:	f3ef 8009 	mrs	r0, PSP
 8003734:	f3bf 8f6f 	isb	sy
 8003738:	4b15      	ldr	r3, [pc, #84]	@ (8003790 <pxCurrentTCBConst>)
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	f01e 0f10 	tst.w	lr, #16
 8003740:	bf08      	it	eq
 8003742:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003746:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800374a:	6010      	str	r0, [r2, #0]
 800374c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003750:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003754:	f380 8811 	msr	BASEPRI, r0
 8003758:	f3bf 8f4f 	dsb	sy
 800375c:	f3bf 8f6f 	isb	sy
 8003760:	f7ff ff68 	bl	8003634 <vTaskSwitchContext>
 8003764:	f04f 0000 	mov.w	r0, #0
 8003768:	f380 8811 	msr	BASEPRI, r0
 800376c:	bc09      	pop	{r0, r3}
 800376e:	6819      	ldr	r1, [r3, #0]
 8003770:	6808      	ldr	r0, [r1, #0]
 8003772:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003776:	f01e 0f10 	tst.w	lr, #16
 800377a:	bf08      	it	eq
 800377c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003780:	f380 8809 	msr	PSP, r0
 8003784:	f3bf 8f6f 	isb	sy
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	f3af 8000 	nop.w

08003790 <pxCurrentTCBConst>:
 8003790:	2000010c 	.word	0x2000010c
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003794:	bf00      	nop
 8003796:	bf00      	nop

08003798 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 800379e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037a2:	f383 8811 	msr	BASEPRI, r3
 80037a6:	f3bf 8f6f 	isb	sy
 80037aa:	f3bf 8f4f 	dsb	sy
 80037ae:	607b      	str	r3, [r7, #4]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 80037b0:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80037b2:	f7ff fe39 	bl	8003428 <xTaskIncrementTick>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d003      	beq.n	80037c4 <xPortSysTickHandler+0x2c>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80037bc:	4b06      	ldr	r3, [pc, #24]	@ (80037d8 <xPortSysTickHandler+0x40>)
 80037be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037c2:	601a      	str	r2, [r3, #0]
 80037c4:	2300      	movs	r3, #0
 80037c6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 80037ce:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 80037d0:	bf00      	nop
 80037d2:	3708      	adds	r7, #8
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	e000ed04 	.word	0xe000ed04

080037dc <memset>:
 80037dc:	4402      	add	r2, r0
 80037de:	4603      	mov	r3, r0
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d100      	bne.n	80037e6 <memset+0xa>
 80037e4:	4770      	bx	lr
 80037e6:	f803 1b01 	strb.w	r1, [r3], #1
 80037ea:	e7f9      	b.n	80037e0 <memset+0x4>

080037ec <__libc_init_array>:
 80037ec:	b570      	push	{r4, r5, r6, lr}
 80037ee:	4d0d      	ldr	r5, [pc, #52]	@ (8003824 <__libc_init_array+0x38>)
 80037f0:	4c0d      	ldr	r4, [pc, #52]	@ (8003828 <__libc_init_array+0x3c>)
 80037f2:	1b64      	subs	r4, r4, r5
 80037f4:	10a4      	asrs	r4, r4, #2
 80037f6:	2600      	movs	r6, #0
 80037f8:	42a6      	cmp	r6, r4
 80037fa:	d109      	bne.n	8003810 <__libc_init_array+0x24>
 80037fc:	4d0b      	ldr	r5, [pc, #44]	@ (800382c <__libc_init_array+0x40>)
 80037fe:	4c0c      	ldr	r4, [pc, #48]	@ (8003830 <__libc_init_array+0x44>)
 8003800:	f000 f818 	bl	8003834 <_init>
 8003804:	1b64      	subs	r4, r4, r5
 8003806:	10a4      	asrs	r4, r4, #2
 8003808:	2600      	movs	r6, #0
 800380a:	42a6      	cmp	r6, r4
 800380c:	d105      	bne.n	800381a <__libc_init_array+0x2e>
 800380e:	bd70      	pop	{r4, r5, r6, pc}
 8003810:	f855 3b04 	ldr.w	r3, [r5], #4
 8003814:	4798      	blx	r3
 8003816:	3601      	adds	r6, #1
 8003818:	e7ee      	b.n	80037f8 <__libc_init_array+0xc>
 800381a:	f855 3b04 	ldr.w	r3, [r5], #4
 800381e:	4798      	blx	r3
 8003820:	3601      	adds	r6, #1
 8003822:	e7f2      	b.n	800380a <__libc_init_array+0x1e>
 8003824:	08003874 	.word	0x08003874
 8003828:	08003874 	.word	0x08003874
 800382c:	08003874 	.word	0x08003874
 8003830:	08003878 	.word	0x08003878

08003834 <_init>:
 8003834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003836:	bf00      	nop
 8003838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800383a:	bc08      	pop	{r3}
 800383c:	469e      	mov	lr, r3
 800383e:	4770      	bx	lr

08003840 <_fini>:
 8003840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003842:	bf00      	nop
 8003844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003846:	bc08      	pop	{r3}
 8003848:	469e      	mov	lr, r3
 800384a:	4770      	bx	lr
