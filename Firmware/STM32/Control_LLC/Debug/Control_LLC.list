
Control_LLC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e54  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000378  08005f68  08005f68  00006f68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062e0  080062e0  000081d8  2**0
                  CONTENTS
  4 .ARM          00000008  080062e0  080062e0  000072e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080062e8  080062e8  000081d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062e8  080062e8  000072e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080062ec  080062ec  000072ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  080062f0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c0  200001d8  080064c8  000081d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000498  080064c8  00008498  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000081d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ae16  00000000  00000000  00008201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002863  00000000  00000000  00013017  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c08  00000000  00000000  00015880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008e7  00000000  00000000  00016488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003501  00000000  00000000  00016d6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f805  00000000  00000000  0001a270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008eabd  00000000  00000000  00029a75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b8532  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f84  00000000  00000000  000b8578  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000bc4fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	08005f4c 	.word	0x08005f4c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	08005f4c 	.word	0x08005f4c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	@ 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000cf6:	2afd      	cmp	r2, #253	@ 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	@ 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	@ 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <APP_CONTROL_TimeWaitDischarging>:
 * The function `APP_CONTROL_TimeWaitDischarging` decrements the variable
 * `u16_time_wait_discharging` if it is greater than 0.
 */
void
APP_CONTROL_TimeWaitDischarging (void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  if (u16_time_wait_discharging > 0)
 8000f48:	4b06      	ldr	r3, [pc, #24]	@ (8000f64 <APP_CONTROL_TimeWaitDischarging+0x20>)
 8000f4a:	881b      	ldrh	r3, [r3, #0]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d005      	beq.n	8000f5c <APP_CONTROL_TimeWaitDischarging+0x18>
  {
    u16_time_wait_discharging--;
 8000f50:	4b04      	ldr	r3, [pc, #16]	@ (8000f64 <APP_CONTROL_TimeWaitDischarging+0x20>)
 8000f52:	881b      	ldrh	r3, [r3, #0]
 8000f54:	3b01      	subs	r3, #1
 8000f56:	b29a      	uxth	r2, r3
 8000f58:	4b02      	ldr	r3, [pc, #8]	@ (8000f64 <APP_CONTROL_TimeWaitDischarging+0x20>)
 8000f5a:	801a      	strh	r2, [r3, #0]
  }
}
 8000f5c:	bf00      	nop
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bc80      	pop	{r7}
 8000f62:	4770      	bx	lr
 8000f64:	200001f4 	.word	0x200001f4

08000f68 <BSP_SYSTICK_TimerStart>:
 *
 * This function enables the SysTick timer.
 */
void
BSP_SYSTICK_TimerStart (void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0

  SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk | SysTick_CTRL_TICKINT_Msk);
 8000f6c:	4b04      	ldr	r3, [pc, #16]	@ (8000f80 <BSP_SYSTICK_TimerStart+0x18>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a03      	ldr	r2, [pc, #12]	@ (8000f80 <BSP_SYSTICK_TimerStart+0x18>)
 8000f72:	f043 0303 	orr.w	r3, r3, #3
 8000f76:	6013      	str	r3, [r2, #0]
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bc80      	pop	{r7}
 8000f7e:	4770      	bx	lr
 8000f80:	e000e010 	.word	0xe000e010

08000f84 <LL_USART_IsActiveFlag_FE>:
  * @rmtoll SR           FE            LL_USART_IsActiveFlag_FE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_FE(const USART_TypeDef *USARTx)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f003 0302 	and.w	r3, r3, #2
 8000f94:	2b02      	cmp	r3, #2
 8000f96:	bf0c      	ite	eq
 8000f98:	2301      	moveq	r3, #1
 8000f9a:	2300      	movne	r3, #0
 8000f9c:	b2db      	uxtb	r3, r3
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bc80      	pop	{r7}
 8000fa6:	4770      	bx	lr

08000fa8 <LL_USART_IsActiveFlag_NE>:
  * @rmtoll SR           NF            LL_USART_IsActiveFlag_NE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_NE(const USART_TypeDef *USARTx)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_NE) == (USART_SR_NE));
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f003 0304 	and.w	r3, r3, #4
 8000fb8:	2b04      	cmp	r3, #4
 8000fba:	bf0c      	ite	eq
 8000fbc:	2301      	moveq	r3, #1
 8000fbe:	2300      	movne	r3, #0
 8000fc0:	b2db      	uxtb	r3, r3
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bc80      	pop	{r7}
 8000fca:	4770      	bx	lr

08000fcc <LL_USART_IsActiveFlag_ORE>:
  * @rmtoll SR           ORE           LL_USART_IsActiveFlag_ORE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ORE(const USART_TypeDef *USARTx)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f003 0308 	and.w	r3, r3, #8
 8000fdc:	2b08      	cmp	r3, #8
 8000fde:	bf0c      	ite	eq
 8000fe0:	2301      	moveq	r3, #1
 8000fe2:	2300      	movne	r3, #0
 8000fe4:	b2db      	uxtb	r3, r3
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bc80      	pop	{r7}
 8000fee:	4770      	bx	lr

08000ff0 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(const USART_TypeDef *USARTx)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f003 0320 	and.w	r3, r3, #32
 8001000:	2b20      	cmp	r3, #32
 8001002:	bf0c      	ite	eq
 8001004:	2301      	moveq	r3, #1
 8001006:	2300      	movne	r3, #0
 8001008:	b2db      	uxtb	r3, r3
}
 800100a:	4618      	mov	r0, r3
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	bc80      	pop	{r7}
 8001012:	4770      	bx	lr

08001014 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001024:	2b80      	cmp	r3, #128	@ 0x80
 8001026:	bf0c      	ite	eq
 8001028:	2301      	moveq	r3, #1
 800102a:	2300      	movne	r3, #0
 800102c:	b2db      	uxtb	r3, r3
}
 800102e:	4618      	mov	r0, r3
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	bc80      	pop	{r7}
 8001036:	4770      	bx	lr

08001038 <LL_USART_ClearFlag_FE>:
  * @rmtoll SR           FE            LL_USART_ClearFlag_FE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_FE(USART_TypeDef *USARTx)
{
 8001038:	b480      	push	{r7}
 800103a:	b085      	sub	sp, #20
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8001046:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 800104e:	68fb      	ldr	r3, [r7, #12]
}
 8001050:	bf00      	nop
 8001052:	3714      	adds	r7, #20
 8001054:	46bd      	mov	sp, r7
 8001056:	bc80      	pop	{r7}
 8001058:	4770      	bx	lr

0800105a <LL_USART_ClearFlag_NE>:
  * @rmtoll SR           NF            LL_USART_ClearFlag_NE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_NE(USART_TypeDef *USARTx)
{
 800105a:	b480      	push	{r7}
 800105c:	b085      	sub	sp, #20
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8001068:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8001070:	68fb      	ldr	r3, [r7, #12]
}
 8001072:	bf00      	nop
 8001074:	3714      	adds	r7, #20
 8001076:	46bd      	mov	sp, r7
 8001078:	bc80      	pop	{r7}
 800107a:	4770      	bx	lr

0800107c <LL_USART_ClearFlag_ORE>:
  * @rmtoll SR           ORE           LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 800108a:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8001092:	68fb      	ldr	r3, [r7, #12]
}
 8001094:	bf00      	nop
 8001096:	3714      	adds	r7, #20
 8001098:	46bd      	mov	sp, r7
 800109a:	bc80      	pop	{r7}
 800109c:	4770      	bx	lr

0800109e <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 800109e:	b480      	push	{r7}
 80010a0:	b089      	sub	sp, #36	@ 0x24
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	330c      	adds	r3, #12
 80010aa:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	e853 3f00 	ldrex	r3, [r3]
 80010b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80010ba:	61fb      	str	r3, [r7, #28]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	330c      	adds	r3, #12
 80010c0:	69fa      	ldr	r2, [r7, #28]
 80010c2:	61ba      	str	r2, [r7, #24]
 80010c4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80010c6:	6979      	ldr	r1, [r7, #20]
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	e841 2300 	strex	r3, r2, [r1]
 80010ce:	613b      	str	r3, [r7, #16]
   return(result);
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d1e7      	bne.n	80010a6 <LL_USART_DisableIT_TXE+0x8>
}
 80010d6:	bf00      	nop
 80010d8:	bf00      	nop
 80010da:	3724      	adds	r7, #36	@ 0x24
 80010dc:	46bd      	mov	sp, r7
 80010de:	bc80      	pop	{r7}
 80010e0:	4770      	bx	lr

080010e2 <LL_USART_IsEnabledIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_IsEnabledIT_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE(const USART_TypeDef *USARTx)
{
 80010e2:	b480      	push	{r7}
 80010e4:	b083      	sub	sp, #12
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	68db      	ldr	r3, [r3, #12]
 80010ee:	f003 0320 	and.w	r3, r3, #32
 80010f2:	2b20      	cmp	r3, #32
 80010f4:	bf0c      	ite	eq
 80010f6:	2301      	moveq	r3, #1
 80010f8:	2300      	movne	r3, #0
 80010fa:	b2db      	uxtb	r3, r3
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	bc80      	pop	{r7}
 8001104:	4770      	bx	lr

08001106 <LL_USART_IsEnabledIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_IsEnabledIT_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXE(const USART_TypeDef *USARTx)
{
 8001106:	b480      	push	{r7}
 8001108:	b083      	sub	sp, #12
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_TXEIE) == (USART_CR1_TXEIE));
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	68db      	ldr	r3, [r3, #12]
 8001112:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001116:	2b80      	cmp	r3, #128	@ 0x80
 8001118:	bf0c      	ite	eq
 800111a:	2301      	moveq	r3, #1
 800111c:	2300      	movne	r3, #0
 800111e:	b2db      	uxtb	r3, r3
}
 8001120:	4618      	mov	r0, r3
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	bc80      	pop	{r7}
 8001128:	4770      	bx	lr

0800112a <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 800112a:	b480      	push	{r7}
 800112c:	b083      	sub	sp, #12
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	b2db      	uxtb	r3, r3
}
 8001138:	4618      	mov	r0, r3
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	bc80      	pop	{r7}
 8001140:	4770      	bx	lr

08001142 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8001142:	b480      	push	{r7}
 8001144:	b083      	sub	sp, #12
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
 800114a:	460b      	mov	r3, r1
 800114c:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 800114e:	78fa      	ldrb	r2, [r7, #3]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	605a      	str	r2, [r3, #4]
}
 8001154:	bf00      	nop
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	bc80      	pop	{r7}
 800115c:	4770      	bx	lr
	...

08001160 <BSP_UART_TimeOut>:
 * The function `UART_u32_uart_TimeOut` decrements the variable
 * `u32_uart_timeout` if it is not equal to 0.
 */
void
BSP_UART_TimeOut (void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  if (u32_uart_timeout != 0)
 8001164:	4b06      	ldr	r3, [pc, #24]	@ (8001180 <BSP_UART_TimeOut+0x20>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d004      	beq.n	8001176 <BSP_UART_TimeOut+0x16>
  {
    u32_uart_timeout--;
 800116c:	4b04      	ldr	r3, [pc, #16]	@ (8001180 <BSP_UART_TimeOut+0x20>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	3b01      	subs	r3, #1
 8001172:	4a03      	ldr	r2, [pc, #12]	@ (8001180 <BSP_UART_TimeOut+0x20>)
 8001174:	6013      	str	r3, [r2, #0]
  }
}
 8001176:	bf00      	nop
 8001178:	46bd      	mov	sp, r7
 800117a:	bc80      	pop	{r7}
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	20000284 	.word	0x20000284

08001184 <BSP_UART_ISR>:
 *
 * @param uartstdio_device Pointer to the UART configuration data structure.
 */
void
BSP_UART_ISR (uart_cfg_t *uartstdio_device)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  // If DR is not empty and the Rx Int is enabled
  if ((LL_USART_IsActiveFlag_RXNE(uartstdio_device->p_uart) != RESET)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6a1b      	ldr	r3, [r3, #32]
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff ff2d 	bl	8000ff0 <LL_USART_IsActiveFlag_RXNE>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d03d      	beq.n	8001218 <BSP_UART_ISR+0x94>
      && (LL_USART_IsEnabledIT_RXNE(uartstdio_device->p_uart) != RESET))
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6a1b      	ldr	r3, [r3, #32]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff ff9e 	bl	80010e2 <LL_USART_IsEnabledIT_RXNE>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d035      	beq.n	8001218 <BSP_UART_ISR+0x94>
  {
    uint8_t c = LL_USART_ReceiveData8(uartstdio_device->p_uart);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6a1b      	ldr	r3, [r3, #32]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff ffba 	bl	800112a <LL_USART_ReceiveData8>
 80011b6:	4603      	mov	r3, r0
 80011b8:	73fb      	strb	r3, [r7, #15]

    // If there are errors, clear the flags
    if ((LL_USART_IsActiveFlag_ORE(uartstdio_device->p_uart) != RESET)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6a1b      	ldr	r3, [r3, #32]
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff ff04 	bl	8000fcc <LL_USART_IsActiveFlag_ORE>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d10f      	bne.n	80011ea <BSP_UART_ISR+0x66>
        || (LL_USART_IsActiveFlag_FE(uartstdio_device->p_uart) != RESET)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6a1b      	ldr	r3, [r3, #32]
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff fed8 	bl	8000f84 <LL_USART_IsActiveFlag_FE>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d107      	bne.n	80011ea <BSP_UART_ISR+0x66>
        || (LL_USART_IsActiveFlag_NE(uartstdio_device->p_uart) != RESET))
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6a1b      	ldr	r3, [r3, #32]
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff fee2 	bl	8000fa8 <LL_USART_IsActiveFlag_NE>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d00f      	beq.n	800120a <BSP_UART_ISR+0x86>
    {
      LL_USART_ClearFlag_ORE(uartstdio_device->p_uart);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6a1b      	ldr	r3, [r3, #32]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff ff44 	bl	800107c <LL_USART_ClearFlag_ORE>
      LL_USART_ClearFlag_FE(uartstdio_device->p_uart);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6a1b      	ldr	r3, [r3, #32]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff ff1d 	bl	8001038 <LL_USART_ClearFlag_FE>
      LL_USART_ClearFlag_NE(uartstdio_device->p_uart);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6a1b      	ldr	r3, [r3, #32]
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff ff29 	bl	800105a <LL_USART_ClearFlag_NE>
    }
    else
    {
      RING_BUFFER_Push_Data((ring_buffer_t *)&uartstdio_device->s_rx_buffer, c);
    }
    return;
 8001208:	e033      	b.n	8001272 <BSP_UART_ISR+0xee>
      RING_BUFFER_Push_Data((ring_buffer_t *)&uartstdio_device->s_rx_buffer, c);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	7bfa      	ldrb	r2, [r7, #15]
 800120e:	4611      	mov	r1, r2
 8001210:	4618      	mov	r0, r3
 8001212:	f002 f90d 	bl	8003430 <RING_BUFFER_Push_Data>
    return;
 8001216:	e02c      	b.n	8001272 <BSP_UART_ISR+0xee>
  }

  // If interrupt is caused due to Transmit Data Register Empty
  if ((LL_USART_IsActiveFlag_TXE(uartstdio_device->p_uart) != RESET)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6a1b      	ldr	r3, [r3, #32]
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff fef9 	bl	8001014 <LL_USART_IsActiveFlag_TXE>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d024      	beq.n	8001272 <BSP_UART_ISR+0xee>
      && (LL_USART_IsEnabledIT_TXE(uartstdio_device->p_uart) != RESET))
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6a1b      	ldr	r3, [r3, #32]
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff ff6a 	bl	8001106 <LL_USART_IsEnabledIT_TXE>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d01c      	beq.n	8001272 <BSP_UART_ISR+0xee>
  {
    if (RING_BUFFER_Is_Empty((ring_buffer_t *)&uartstdio_device->s_tx_buffer))
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3310      	adds	r3, #16
 800123c:	4618      	mov	r0, r3
 800123e:	f002 f8d7 	bl	80033f0 <RING_BUFFER_Is_Empty>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d005      	beq.n	8001254 <BSP_UART_ISR+0xd0>
    {
      LL_USART_DisableIT_TXE(uartstdio_device->p_uart);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6a1b      	ldr	r3, [r3, #32]
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff ff26 	bl	800109e <LL_USART_DisableIT_TXE>
    {
      uint8_t c
          = RING_BUFFER_Pull_Data((ring_buffer_t *)&uartstdio_device->s_tx_buffer);
      LL_USART_TransmitData8(uartstdio_device->p_uart, c);
    }
    return;
 8001252:	e00d      	b.n	8001270 <BSP_UART_ISR+0xec>
          = RING_BUFFER_Pull_Data((ring_buffer_t *)&uartstdio_device->s_tx_buffer);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	3310      	adds	r3, #16
 8001258:	4618      	mov	r0, r3
 800125a:	f002 f90f 	bl	800347c <RING_BUFFER_Pull_Data>
 800125e:	4603      	mov	r3, r0
 8001260:	73bb      	strb	r3, [r7, #14]
      LL_USART_TransmitData8(uartstdio_device->p_uart, c);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6a1b      	ldr	r3, [r3, #32]
 8001266:	7bba      	ldrb	r2, [r7, #14]
 8001268:	4611      	mov	r1, r2
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff ff69 	bl	8001142 <LL_USART_TransmitData8>
    return;
 8001270:	bf00      	nop
  }
}
 8001272:	3710      	adds	r7, #16
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800127c:	4b04      	ldr	r3, [pc, #16]	@ (8001290 <LL_RCC_HSI_Enable+0x18>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a03      	ldr	r2, [pc, #12]	@ (8001290 <LL_RCC_HSI_Enable+0x18>)
 8001282:	f043 0301 	orr.w	r3, r3, #1
 8001286:	6013      	str	r3, [r2, #0]
}
 8001288:	bf00      	nop
 800128a:	46bd      	mov	sp, r7
 800128c:	bc80      	pop	{r7}
 800128e:	4770      	bx	lr
 8001290:	40021000 	.word	0x40021000

08001294 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001298:	4b06      	ldr	r3, [pc, #24]	@ (80012b4 <LL_RCC_HSI_IsReady+0x20>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f003 0302 	and.w	r3, r3, #2
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	bf0c      	ite	eq
 80012a4:	2301      	moveq	r3, #1
 80012a6:	2300      	movne	r3, #0
 80012a8:	b2db      	uxtb	r3, r3
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bc80      	pop	{r7}
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	40021000 	.word	0x40021000

080012b8 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80012c0:	4b06      	ldr	r3, [pc, #24]	@ (80012dc <LL_RCC_HSI_SetCalibTrimming+0x24>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	00db      	lsls	r3, r3, #3
 80012cc:	4903      	ldr	r1, [pc, #12]	@ (80012dc <LL_RCC_HSI_SetCalibTrimming+0x24>)
 80012ce:	4313      	orrs	r3, r2
 80012d0:	600b      	str	r3, [r1, #0]
}
 80012d2:	bf00      	nop
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bc80      	pop	{r7}
 80012da:	4770      	bx	lr
 80012dc:	40021000 	.word	0x40021000

080012e0 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80012e8:	4b06      	ldr	r3, [pc, #24]	@ (8001304 <LL_RCC_SetSysClkSource+0x24>)
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f023 0203 	bic.w	r2, r3, #3
 80012f0:	4904      	ldr	r1, [pc, #16]	@ (8001304 <LL_RCC_SetSysClkSource+0x24>)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	604b      	str	r3, [r1, #4]
}
 80012f8:	bf00      	nop
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bc80      	pop	{r7}
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	40021000 	.word	0x40021000

08001308 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800130c:	4b03      	ldr	r3, [pc, #12]	@ (800131c <LL_RCC_GetSysClkSource+0x14>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f003 030c 	and.w	r3, r3, #12
}
 8001314:	4618      	mov	r0, r3
 8001316:	46bd      	mov	sp, r7
 8001318:	bc80      	pop	{r7}
 800131a:	4770      	bx	lr
 800131c:	40021000 	.word	0x40021000

08001320 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001328:	4b06      	ldr	r3, [pc, #24]	@ (8001344 <LL_RCC_SetAHBPrescaler+0x24>)
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001330:	4904      	ldr	r1, [pc, #16]	@ (8001344 <LL_RCC_SetAHBPrescaler+0x24>)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4313      	orrs	r3, r2
 8001336:	604b      	str	r3, [r1, #4]
}
 8001338:	bf00      	nop
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	bc80      	pop	{r7}
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	40021000 	.word	0x40021000

08001348 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001350:	4b06      	ldr	r3, [pc, #24]	@ (800136c <LL_RCC_SetAPB1Prescaler+0x24>)
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001358:	4904      	ldr	r1, [pc, #16]	@ (800136c <LL_RCC_SetAPB1Prescaler+0x24>)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4313      	orrs	r3, r2
 800135e:	604b      	str	r3, [r1, #4]
}
 8001360:	bf00      	nop
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	bc80      	pop	{r7}
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	40021000 	.word	0x40021000

08001370 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001378:	4b06      	ldr	r3, [pc, #24]	@ (8001394 <LL_RCC_SetAPB2Prescaler+0x24>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001380:	4904      	ldr	r1, [pc, #16]	@ (8001394 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4313      	orrs	r3, r2
 8001386:	604b      	str	r3, [r1, #4]
}
 8001388:	bf00      	nop
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	bc80      	pop	{r7}
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	40021000 	.word	0x40021000

08001398 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800139c:	4b04      	ldr	r3, [pc, #16]	@ (80013b0 <LL_RCC_PLL_Enable+0x18>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a03      	ldr	r2, [pc, #12]	@ (80013b0 <LL_RCC_PLL_Enable+0x18>)
 80013a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80013a6:	6013      	str	r3, [r2, #0]
}
 80013a8:	bf00      	nop
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc80      	pop	{r7}
 80013ae:	4770      	bx	lr
 80013b0:	40021000 	.word	0x40021000

080013b4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80013b8:	4b06      	ldr	r3, [pc, #24]	@ (80013d4 <LL_RCC_PLL_IsReady+0x20>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80013c4:	bf0c      	ite	eq
 80013c6:	2301      	moveq	r3, #1
 80013c8:	2300      	movne	r3, #0
 80013ca:	b2db      	uxtb	r3, r3
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bc80      	pop	{r7}
 80013d2:	4770      	bx	lr
 80013d4:	40021000 	.word	0x40021000

080013d8 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 80013e2:	4b08      	ldr	r3, [pc, #32]	@ (8001404 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	430b      	orrs	r3, r1
 80013f4:	4903      	ldr	r1, [pc, #12]	@ (8001404 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 80013f6:	4313      	orrs	r3, r2
 80013f8:	604b      	str	r3, [r1, #4]
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 80013fa:	bf00      	nop
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	bc80      	pop	{r7}
 8001402:	4770      	bx	lr
 8001404:	40021000 	.word	0x40021000

08001408 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001410:	4b08      	ldr	r3, [pc, #32]	@ (8001434 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001412:	699a      	ldr	r2, [r3, #24]
 8001414:	4907      	ldr	r1, [pc, #28]	@ (8001434 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4313      	orrs	r3, r2
 800141a:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800141c:	4b05      	ldr	r3, [pc, #20]	@ (8001434 <LL_APB2_GRP1_EnableClock+0x2c>)
 800141e:	699a      	ldr	r2, [r3, #24]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	4013      	ands	r3, r2
 8001424:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001426:	68fb      	ldr	r3, [r7, #12]
}
 8001428:	bf00      	nop
 800142a:	3714      	adds	r7, #20
 800142c:	46bd      	mov	sp, r7
 800142e:	bc80      	pop	{r7}
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	40021000 	.word	0x40021000

08001438 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001440:	4b06      	ldr	r3, [pc, #24]	@ (800145c <LL_FLASH_SetLatency+0x24>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f023 0207 	bic.w	r2, r3, #7
 8001448:	4904      	ldr	r1, [pc, #16]	@ (800145c <LL_FLASH_SetLatency+0x24>)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4313      	orrs	r3, r2
 800144e:	600b      	str	r3, [r1, #0]
}
 8001450:	bf00      	nop
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	bc80      	pop	{r7}
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	40022000 	.word	0x40022000

08001460 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001464:	4b03      	ldr	r3, [pc, #12]	@ (8001474 <LL_FLASH_GetLatency+0x14>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 0307 	and.w	r3, r3, #7
}
 800146c:	4618      	mov	r0, r3
 800146e:	46bd      	mov	sp, r7
 8001470:	bc80      	pop	{r7}
 8001472:	4770      	bx	lr
 8001474:	40022000 	.word	0x40022000

08001478 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	0a1b      	lsrs	r3, r3, #8
 8001486:	b29a      	uxth	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	615a      	str	r2, [r3, #20]
}
 800148c:	bf00      	nop
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	bc80      	pop	{r7}
 8001494:	4770      	bx	lr
	...

08001498 <ACS712_VoltageConverterCurrent>:
  {
	  return 2.5f + 0.1f * current;
  }

  static inline float ACS712_VoltageConverterCurrent(float voltage)
  {
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
	  return (voltage - 2.5f)/0.1f;
 80014a0:	4906      	ldr	r1, [pc, #24]	@ (80014bc <ACS712_VoltageConverterCurrent+0x24>)
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f7ff faf4 	bl	8000a90 <__aeabi_fsub>
 80014a8:	4603      	mov	r3, r0
 80014aa:	4905      	ldr	r1, [pc, #20]	@ (80014c0 <ACS712_VoltageConverterCurrent+0x28>)
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff fcad 	bl	8000e0c <__aeabi_fdiv>
 80014b2:	4603      	mov	r3, r0
  }
 80014b4:	4618      	mov	r0, r3
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	40200000 	.word	0x40200000
 80014c0:	3dcccccd 	.word	0x3dcccccd

080014c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014c8:	f000 fb38 	bl	8001b3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014cc:	f000 f81e 	bl	800150c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014d0:	f000 f890 	bl	80015f4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80014d4:	f000 f860 	bl	8001598 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  BSP_SYSTICK_TimerStart();
 80014d8:	f7ff fd46 	bl	8000f68 <BSP_SYSTICK_TimerStart>
  ADS1115_SetPara();
 80014dc:	f000 fa8f 	bl	80019fe <ADS1115_SetPara>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  vol = ADS1115_ReadVoltage(DEV_ADS1115_CHANNEL_0, GAIN_ONE);
 80014e0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014e4:	2000      	movs	r0, #0
 80014e6:	f000 fb03 	bl	8001af0 <ADS1115_ReadVoltage>
 80014ea:	4603      	mov	r3, r0
 80014ec:	4a05      	ldr	r2, [pc, #20]	@ (8001504 <main+0x40>)
 80014ee:	6013      	str	r3, [r2, #0]
	  current = ACS712_VoltageConverterCurrent(vol);
 80014f0:	4b04      	ldr	r3, [pc, #16]	@ (8001504 <main+0x40>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff ffcf 	bl	8001498 <ACS712_VoltageConverterCurrent>
 80014fa:	4603      	mov	r3, r0
 80014fc:	4a02      	ldr	r2, [pc, #8]	@ (8001508 <main+0x44>)
 80014fe:	6013      	str	r3, [r2, #0]
	  vol = ADS1115_ReadVoltage(DEV_ADS1115_CHANNEL_0, GAIN_ONE);
 8001500:	bf00      	nop
 8001502:	e7ed      	b.n	80014e0 <main+0x1c>
 8001504:	200002dc 	.word	0x200002dc
 8001508:	200002e0 	.word	0x200002e0

0800150c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8001510:	2002      	movs	r0, #2
 8001512:	f7ff ff91 	bl	8001438 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 8001516:	bf00      	nop
 8001518:	f7ff ffa2 	bl	8001460 <LL_FLASH_GetLatency>
 800151c:	4603      	mov	r3, r0
 800151e:	2b02      	cmp	r3, #2
 8001520:	d1fa      	bne.n	8001518 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8001522:	2010      	movs	r0, #16
 8001524:	f7ff fec8 	bl	80012b8 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 8001528:	f7ff fea6 	bl	8001278 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 800152c:	bf00      	nop
 800152e:	f7ff feb1 	bl	8001294 <LL_RCC_HSI_IsReady>
 8001532:	4603      	mov	r3, r0
 8001534:	2b01      	cmp	r3, #1
 8001536:	d1fa      	bne.n	800152e <SystemClock_Config+0x22>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI_DIV_2, LL_RCC_PLL_MUL_15);
 8001538:	f44f 1150 	mov.w	r1, #3407872	@ 0x340000
 800153c:	2000      	movs	r0, #0
 800153e:	f7ff ff4b 	bl	80013d8 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8001542:	f7ff ff29 	bl	8001398 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001546:	bf00      	nop
 8001548:	f7ff ff34 	bl	80013b4 <LL_RCC_PLL_IsReady>
 800154c:	4603      	mov	r3, r0
 800154e:	2b01      	cmp	r3, #1
 8001550:	d1fa      	bne.n	8001548 <SystemClock_Config+0x3c>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001552:	2000      	movs	r0, #0
 8001554:	f7ff fee4 	bl	8001320 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8001558:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800155c:	f7ff fef4 	bl	8001348 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8001560:	2000      	movs	r0, #0
 8001562:	f7ff ff05 	bl	8001370 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001566:	2002      	movs	r0, #2
 8001568:	f7ff feba 	bl	80012e0 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800156c:	bf00      	nop
 800156e:	f7ff fecb 	bl	8001308 <LL_RCC_GetSysClkSource>
 8001572:	4603      	mov	r3, r0
 8001574:	2b08      	cmp	r3, #8
 8001576:	d1fa      	bne.n	800156e <SystemClock_Config+0x62>
  {

  }
  LL_SetSystemCoreClock(60000000);
 8001578:	4806      	ldr	r0, [pc, #24]	@ (8001594 <SystemClock_Config+0x88>)
 800157a:	f001 ff19 	bl	80033b0 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 800157e:	200f      	movs	r0, #15
 8001580:	f000 faf2 	bl	8001b68 <HAL_InitTick>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800158a:	f000 f875 	bl	8001678 <Error_Handler>
  }
}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	03938700 	.word	0x03938700

08001598 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800159c:	4b12      	ldr	r3, [pc, #72]	@ (80015e8 <MX_I2C1_Init+0x50>)
 800159e:	4a13      	ldr	r2, [pc, #76]	@ (80015ec <MX_I2C1_Init+0x54>)
 80015a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80015a2:	4b11      	ldr	r3, [pc, #68]	@ (80015e8 <MX_I2C1_Init+0x50>)
 80015a4:	4a12      	ldr	r2, [pc, #72]	@ (80015f0 <MX_I2C1_Init+0x58>)
 80015a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015a8:	4b0f      	ldr	r3, [pc, #60]	@ (80015e8 <MX_I2C1_Init+0x50>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015ae:	4b0e      	ldr	r3, [pc, #56]	@ (80015e8 <MX_I2C1_Init+0x50>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015b4:	4b0c      	ldr	r3, [pc, #48]	@ (80015e8 <MX_I2C1_Init+0x50>)
 80015b6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80015ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015bc:	4b0a      	ldr	r3, [pc, #40]	@ (80015e8 <MX_I2C1_Init+0x50>)
 80015be:	2200      	movs	r2, #0
 80015c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015c2:	4b09      	ldr	r3, [pc, #36]	@ (80015e8 <MX_I2C1_Init+0x50>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015c8:	4b07      	ldr	r3, [pc, #28]	@ (80015e8 <MX_I2C1_Init+0x50>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015ce:	4b06      	ldr	r3, [pc, #24]	@ (80015e8 <MX_I2C1_Init+0x50>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015d4:	4804      	ldr	r0, [pc, #16]	@ (80015e8 <MX_I2C1_Init+0x50>)
 80015d6:	f000 fd7b 	bl	80020d0 <HAL_I2C_Init>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015e0:	f000 f84a 	bl	8001678 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015e4:	bf00      	nop
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	20000288 	.word	0x20000288
 80015ec:	40005400 	.word	0x40005400
 80015f0:	000186a0 	.word	0x000186a0

080015f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fa:	1d3b      	adds	r3, r7, #4
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	60da      	str	r2, [r3, #12]
 8001606:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 8001608:	2020      	movs	r0, #32
 800160a:	f7ff fefd 	bl	8001408 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 800160e:	2004      	movs	r0, #4
 8001610:	f7ff fefa 	bl	8001408 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8001614:	2008      	movs	r0, #8
 8001616:	f7ff fef7 	bl	8001408 <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, PFC_ON_OFF_Pin|LED_TEST_Pin);
 800161a:	f244 2142 	movw	r1, #16962	@ 0x4242
 800161e:	4813      	ldr	r0, [pc, #76]	@ (800166c <MX_GPIO_Init+0x78>)
 8001620:	f7ff ff2a 	bl	8001478 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LED_WAIT_Pin|LED_SOFT_START_Pin|LED_PROCESS_Pin|VOLTAGE_PROTECTION_Pin);
 8001624:	4912      	ldr	r1, [pc, #72]	@ (8001670 <MX_GPIO_Init+0x7c>)
 8001626:	4813      	ldr	r0, [pc, #76]	@ (8001674 <MX_GPIO_Init+0x80>)
 8001628:	f7ff ff26 	bl	8001478 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = PFC_ON_OFF_Pin|LED_TEST_Pin;
 800162c:	f244 2342 	movw	r3, #16962	@ 0x4242
 8001630:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001632:	2301      	movs	r3, #1
 8001634:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001636:	2302      	movs	r3, #2
 8001638:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800163a:	2300      	movs	r3, #0
 800163c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800163e:	1d3b      	adds	r3, r7, #4
 8001640:	4619      	mov	r1, r3
 8001642:	480a      	ldr	r0, [pc, #40]	@ (800166c <MX_GPIO_Init+0x78>)
 8001644:	f001 fe4e 	bl	80032e4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_WAIT_Pin|LED_SOFT_START_Pin|LED_PROCESS_Pin|VOLTAGE_PROTECTION_Pin;
 8001648:	4b09      	ldr	r3, [pc, #36]	@ (8001670 <MX_GPIO_Init+0x7c>)
 800164a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800164c:	2301      	movs	r3, #1
 800164e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001650:	2302      	movs	r3, #2
 8001652:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001654:	2300      	movs	r3, #0
 8001656:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001658:	1d3b      	adds	r3, r7, #4
 800165a:	4619      	mov	r1, r3
 800165c:	4805      	ldr	r0, [pc, #20]	@ (8001674 <MX_GPIO_Init+0x80>)
 800165e:	f001 fe41 	bl	80032e4 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001662:	bf00      	nop
 8001664:	3718      	adds	r7, #24
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40010800 	.word	0x40010800
 8001670:	04100717 	.word	0x04100717
 8001674:	40010c00 	.word	0x40010c00

08001678 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800167c:	b672      	cpsid	i
}
 800167e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001680:	bf00      	nop
 8001682:	e7fd      	b.n	8001680 <Error_Handler+0x8>

08001684 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800168a:	4b15      	ldr	r3, [pc, #84]	@ (80016e0 <HAL_MspInit+0x5c>)
 800168c:	699b      	ldr	r3, [r3, #24]
 800168e:	4a14      	ldr	r2, [pc, #80]	@ (80016e0 <HAL_MspInit+0x5c>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	6193      	str	r3, [r2, #24]
 8001696:	4b12      	ldr	r3, [pc, #72]	@ (80016e0 <HAL_MspInit+0x5c>)
 8001698:	699b      	ldr	r3, [r3, #24]
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	60bb      	str	r3, [r7, #8]
 80016a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016a2:	4b0f      	ldr	r3, [pc, #60]	@ (80016e0 <HAL_MspInit+0x5c>)
 80016a4:	69db      	ldr	r3, [r3, #28]
 80016a6:	4a0e      	ldr	r2, [pc, #56]	@ (80016e0 <HAL_MspInit+0x5c>)
 80016a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016ac:	61d3      	str	r3, [r2, #28]
 80016ae:	4b0c      	ldr	r3, [pc, #48]	@ (80016e0 <HAL_MspInit+0x5c>)
 80016b0:	69db      	ldr	r3, [r3, #28]
 80016b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016b6:	607b      	str	r3, [r7, #4]
 80016b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80016ba:	4b0a      	ldr	r3, [pc, #40]	@ (80016e4 <HAL_MspInit+0x60>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	4a04      	ldr	r2, [pc, #16]	@ (80016e4 <HAL_MspInit+0x60>)
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016d6:	bf00      	nop
 80016d8:	3714      	adds	r7, #20
 80016da:	46bd      	mov	sp, r7
 80016dc:	bc80      	pop	{r7}
 80016de:	4770      	bx	lr
 80016e0:	40021000 	.word	0x40021000
 80016e4:	40010000 	.word	0x40010000

080016e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b088      	sub	sp, #32
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f0:	f107 0310 	add.w	r3, r7, #16
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	605a      	str	r2, [r3, #4]
 80016fa:	609a      	str	r2, [r3, #8]
 80016fc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a15      	ldr	r2, [pc, #84]	@ (8001758 <HAL_I2C_MspInit+0x70>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d123      	bne.n	8001750 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001708:	4b14      	ldr	r3, [pc, #80]	@ (800175c <HAL_I2C_MspInit+0x74>)
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	4a13      	ldr	r2, [pc, #76]	@ (800175c <HAL_I2C_MspInit+0x74>)
 800170e:	f043 0308 	orr.w	r3, r3, #8
 8001712:	6193      	str	r3, [r2, #24]
 8001714:	4b11      	ldr	r3, [pc, #68]	@ (800175c <HAL_I2C_MspInit+0x74>)
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	f003 0308 	and.w	r3, r3, #8
 800171c:	60fb      	str	r3, [r7, #12]
 800171e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001720:	23c0      	movs	r3, #192	@ 0xc0
 8001722:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001724:	2312      	movs	r3, #18
 8001726:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001728:	2303      	movs	r3, #3
 800172a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800172c:	f107 0310 	add.w	r3, r7, #16
 8001730:	4619      	mov	r1, r3
 8001732:	480b      	ldr	r0, [pc, #44]	@ (8001760 <HAL_I2C_MspInit+0x78>)
 8001734:	f000 fb48 	bl	8001dc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001738:	4b08      	ldr	r3, [pc, #32]	@ (800175c <HAL_I2C_MspInit+0x74>)
 800173a:	69db      	ldr	r3, [r3, #28]
 800173c:	4a07      	ldr	r2, [pc, #28]	@ (800175c <HAL_I2C_MspInit+0x74>)
 800173e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001742:	61d3      	str	r3, [r2, #28]
 8001744:	4b05      	ldr	r3, [pc, #20]	@ (800175c <HAL_I2C_MspInit+0x74>)
 8001746:	69db      	ldr	r3, [r3, #28]
 8001748:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800174c:	60bb      	str	r3, [r7, #8]
 800174e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001750:	bf00      	nop
 8001752:	3720      	adds	r7, #32
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40005400 	.word	0x40005400
 800175c:	40021000 	.word	0x40021000
 8001760:	40010c00 	.word	0x40010c00

08001764 <BSP_TIM_IRQ_Handler>:
	p_tim->DIER |= TIM_DIER_UIE;
	p_tim->CR1 |= TIM_CR1_CEN;
}

static inline void BSP_TIM_IRQ_Handler (TIM_TypeDef *p_tim)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
	p_tim->DIER &= ~TIM_DIER_UIE;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	f023 0201 	bic.w	r2, r3, #1
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	60da      	str	r2, [r3, #12]
}
 8001778:	bf00      	nop
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	bc80      	pop	{r7}
 8001780:	4770      	bx	lr

08001782 <BSP_BOARD_TimeOut>:
   *   PUBLIC FUNCTION
   *********************/

  // Call Function in "SysTick ISR"
  static inline void BSP_BOARD_TimeOut (void)
  {
 8001782:	b580      	push	{r7, lr}
 8001784:	af00      	add	r7, sp, #0
    BSP_UART_TimeOut();
 8001786:	f7ff fceb 	bl	8001160 <BSP_UART_TimeOut>
#if I2C_LL
    BSP_I2C_TimeOut();
#endif
  }
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}

0800178e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800178e:	b480      	push	{r7}
 8001790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001792:	bf00      	nop
 8001794:	e7fd      	b.n	8001792 <NMI_Handler+0x4>

08001796 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001796:	b480      	push	{r7}
 8001798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800179a:	bf00      	nop
 800179c:	e7fd      	b.n	800179a <HardFault_Handler+0x4>

0800179e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800179e:	b480      	push	{r7}
 80017a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017a2:	bf00      	nop
 80017a4:	e7fd      	b.n	80017a2 <MemManage_Handler+0x4>

080017a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017a6:	b480      	push	{r7}
 80017a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017aa:	bf00      	nop
 80017ac:	e7fd      	b.n	80017aa <BusFault_Handler+0x4>

080017ae <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017ae:	b480      	push	{r7}
 80017b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017b2:	bf00      	nop
 80017b4:	e7fd      	b.n	80017b2 <UsageFault_Handler+0x4>

080017b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017b6:	b480      	push	{r7}
 80017b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	46bd      	mov	sp, r7
 80017be:	bc80      	pop	{r7}
 80017c0:	4770      	bx	lr

080017c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017c2:	b480      	push	{r7}
 80017c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bc80      	pop	{r7}
 80017cc:	4770      	bx	lr

080017ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017ce:	b480      	push	{r7}
 80017d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bc80      	pop	{r7}
 80017d8:	4770      	bx	lr

080017da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  BSP_BOARD_TimeOut();
 80017de:	f7ff ffd0 	bl	8001782 <BSP_BOARD_TimeOut>
  APP_CONTROL_TimeWaitDischarging();
 80017e2:	f7ff fbaf 	bl	8000f44 <APP_CONTROL_TimeWaitDischarging>
  SCH_RunSystemTickTimer();
 80017e6:	f001 fe91 	bl	800350c <SCH_RunSystemTickTimer>

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017ea:	f000 f9ed 	bl	8001bc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
	...

080017f4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	SCH_TASK_EnableTask(0);
 80017f8:	2000      	movs	r0, #0
 80017fa:	f001 fe63 	bl	80034c4 <SCH_TASK_EnableTask>
	BSP_TIM_IRQ_Handler(TIM3);
 80017fe:	4802      	ldr	r0, [pc, #8]	@ (8001808 <TIM3_IRQHandler+0x14>)
 8001800:	f7ff ffb0 	bl	8001764 <BSP_TIM_IRQ_Handler>
  /* USER CODE END TIM3_IRQn 0 */
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001804:	bf00      	nop
 8001806:	bd80      	pop	{r7, pc}
 8001808:	40000400 	.word	0x40000400

0800180c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  BSP_UART_ISR((uart_cfg_t *)p_uart1);
 8001810:	4b03      	ldr	r3, [pc, #12]	@ (8001820 <USART1_IRQHandler+0x14>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff fcb5 	bl	8001184 <BSP_UART_ISR>
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	20000000 	.word	0x20000000

08001824 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  return 1;
 8001828:	2301      	movs	r3, #1
}
 800182a:	4618      	mov	r0, r3
 800182c:	46bd      	mov	sp, r7
 800182e:	bc80      	pop	{r7}
 8001830:	4770      	bx	lr

08001832 <_kill>:

int _kill(int pid, int sig)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	b082      	sub	sp, #8
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
 800183a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800183c:	f002 fd74 	bl	8004328 <__errno>
 8001840:	4603      	mov	r3, r0
 8001842:	2216      	movs	r2, #22
 8001844:	601a      	str	r2, [r3, #0]
  return -1;
 8001846:	f04f 33ff 	mov.w	r3, #4294967295
}
 800184a:	4618      	mov	r0, r3
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <_exit>:

void _exit (int status)
{
 8001852:	b580      	push	{r7, lr}
 8001854:	b082      	sub	sp, #8
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800185a:	f04f 31ff 	mov.w	r1, #4294967295
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f7ff ffe7 	bl	8001832 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001864:	bf00      	nop
 8001866:	e7fd      	b.n	8001864 <_exit+0x12>

08001868 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001874:	2300      	movs	r3, #0
 8001876:	617b      	str	r3, [r7, #20]
 8001878:	e00a      	b.n	8001890 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800187a:	f3af 8000 	nop.w
 800187e:	4601      	mov	r1, r0
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	1c5a      	adds	r2, r3, #1
 8001884:	60ba      	str	r2, [r7, #8]
 8001886:	b2ca      	uxtb	r2, r1
 8001888:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	3301      	adds	r3, #1
 800188e:	617b      	str	r3, [r7, #20]
 8001890:	697a      	ldr	r2, [r7, #20]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	429a      	cmp	r2, r3
 8001896:	dbf0      	blt.n	800187a <_read+0x12>
  }

  return len;
 8001898:	687b      	ldr	r3, [r7, #4]
}
 800189a:	4618      	mov	r0, r3
 800189c:	3718      	adds	r7, #24
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b086      	sub	sp, #24
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	60f8      	str	r0, [r7, #12]
 80018aa:	60b9      	str	r1, [r7, #8]
 80018ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ae:	2300      	movs	r3, #0
 80018b0:	617b      	str	r3, [r7, #20]
 80018b2:	e009      	b.n	80018c8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	1c5a      	adds	r2, r3, #1
 80018b8:	60ba      	str	r2, [r7, #8]
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	4618      	mov	r0, r3
 80018be:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	3301      	adds	r3, #1
 80018c6:	617b      	str	r3, [r7, #20]
 80018c8:	697a      	ldr	r2, [r7, #20]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	dbf1      	blt.n	80018b4 <_write+0x12>
  }
  return len;
 80018d0:	687b      	ldr	r3, [r7, #4]
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3718      	adds	r7, #24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <_close>:

int _close(int file)
{
 80018da:	b480      	push	{r7}
 80018dc:	b083      	sub	sp, #12
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bc80      	pop	{r7}
 80018ee:	4770      	bx	lr

080018f0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001900:	605a      	str	r2, [r3, #4]
  return 0;
 8001902:	2300      	movs	r3, #0
}
 8001904:	4618      	mov	r0, r3
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	bc80      	pop	{r7}
 800190c:	4770      	bx	lr

0800190e <_isatty>:

int _isatty(int file)
{
 800190e:	b480      	push	{r7}
 8001910:	b083      	sub	sp, #12
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001916:	2301      	movs	r3, #1
}
 8001918:	4618      	mov	r0, r3
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	bc80      	pop	{r7}
 8001920:	4770      	bx	lr

08001922 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001922:	b480      	push	{r7}
 8001924:	b085      	sub	sp, #20
 8001926:	af00      	add	r7, sp, #0
 8001928:	60f8      	str	r0, [r7, #12]
 800192a:	60b9      	str	r1, [r7, #8]
 800192c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800192e:	2300      	movs	r3, #0
}
 8001930:	4618      	mov	r0, r3
 8001932:	3714      	adds	r7, #20
 8001934:	46bd      	mov	sp, r7
 8001936:	bc80      	pop	{r7}
 8001938:	4770      	bx	lr
	...

0800193c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b086      	sub	sp, #24
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001944:	4a14      	ldr	r2, [pc, #80]	@ (8001998 <_sbrk+0x5c>)
 8001946:	4b15      	ldr	r3, [pc, #84]	@ (800199c <_sbrk+0x60>)
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001950:	4b13      	ldr	r3, [pc, #76]	@ (80019a0 <_sbrk+0x64>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d102      	bne.n	800195e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001958:	4b11      	ldr	r3, [pc, #68]	@ (80019a0 <_sbrk+0x64>)
 800195a:	4a12      	ldr	r2, [pc, #72]	@ (80019a4 <_sbrk+0x68>)
 800195c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800195e:	4b10      	ldr	r3, [pc, #64]	@ (80019a0 <_sbrk+0x64>)
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4413      	add	r3, r2
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	429a      	cmp	r2, r3
 800196a:	d207      	bcs.n	800197c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800196c:	f002 fcdc 	bl	8004328 <__errno>
 8001970:	4603      	mov	r3, r0
 8001972:	220c      	movs	r2, #12
 8001974:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001976:	f04f 33ff 	mov.w	r3, #4294967295
 800197a:	e009      	b.n	8001990 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800197c:	4b08      	ldr	r3, [pc, #32]	@ (80019a0 <_sbrk+0x64>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001982:	4b07      	ldr	r3, [pc, #28]	@ (80019a0 <_sbrk+0x64>)
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4413      	add	r3, r2
 800198a:	4a05      	ldr	r2, [pc, #20]	@ (80019a0 <_sbrk+0x64>)
 800198c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800198e:	68fb      	ldr	r3, [r7, #12]
}
 8001990:	4618      	mov	r0, r3
 8001992:	3718      	adds	r7, #24
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	20005000 	.word	0x20005000
 800199c:	00000400 	.word	0x00000400
 80019a0:	200002e4 	.word	0x200002e4
 80019a4:	20000498 	.word	0x20000498

080019a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019ac:	bf00      	nop
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bc80      	pop	{r7}
 80019b2:	4770      	bx	lr

080019b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019b4:	f7ff fff8 	bl	80019a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019b8:	480b      	ldr	r0, [pc, #44]	@ (80019e8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80019ba:	490c      	ldr	r1, [pc, #48]	@ (80019ec <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80019bc:	4a0c      	ldr	r2, [pc, #48]	@ (80019f0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80019be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019c0:	e002      	b.n	80019c8 <LoopCopyDataInit>

080019c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019c6:	3304      	adds	r3, #4

080019c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019cc:	d3f9      	bcc.n	80019c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ce:	4a09      	ldr	r2, [pc, #36]	@ (80019f4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80019d0:	4c09      	ldr	r4, [pc, #36]	@ (80019f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019d4:	e001      	b.n	80019da <LoopFillZerobss>

080019d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019d8:	3204      	adds	r2, #4

080019da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019dc:	d3fb      	bcc.n	80019d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019de:	f002 fca9 	bl	8004334 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019e2:	f7ff fd6f 	bl	80014c4 <main>
  bx lr
 80019e6:	4770      	bx	lr
  ldr r0, =_sdata
 80019e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019ec:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80019f0:	080062f0 	.word	0x080062f0
  ldr r2, =_sbss
 80019f4:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80019f8:	20000498 	.word	0x20000498

080019fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019fc:	e7fe      	b.n	80019fc <ADC1_2_IRQHandler>

080019fe <ADS1115_SetPara>:
 *   PUBLIC FUNCTIONS
 **********************/

void
ADS1115_SetPara (void)
{
 80019fe:	b480      	push	{r7}
 8001a00:	af00      	add	r7, sp, #0
#if I2C_LL
  i2c_1.p_i2c_reg = I2C1;                   // Assign register I21
  i2c_1.buffer    = (uint8_t *)&i2c_buffer; // Assign buffer
  i2c_1.address   = ADS_ADDR_GND << 1;      // Assign address Slave
#endif
}
 8001a02:	bf00      	nop
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bc80      	pop	{r7}
 8001a08:	4770      	bx	lr
	...

08001a0c <ADS1115_GetData>:
 * @return The data reading from the specified channel. If a timeout occurs,
 * returns 0.
 */
uint16_t
ADS1115_GetData (ads1115_channel_t channel, ads1115_gain_t gain)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af02      	add	r7, sp, #8
 8001a12:	4603      	mov	r3, r0
 8001a14:	460a      	mov	r2, r1
 8001a16:	71fb      	strb	r3, [r7, #7]
 8001a18:	4613      	mov	r3, r2
 8001a1a:	80bb      	strh	r3, [r7, #4]
  // Start with default values
  uint16_t config
 8001a1c:	f240 1383 	movw	r3, #387	@ 0x183
 8001a20:	81fb      	strh	r3, [r7, #14]
        ADS1015_REG_CONFIG_CMODE_TRAD | // Traditional comparator (default val)
        ADS1015_REG_CONFIG_DR_1600SPS | // 1600 samples per second (default)
        ADS1015_REG_CONFIG_MODE_SINGLE; // Single-shot mode (default)

  // Set PGA/voltage range
  config |= gain;
 8001a22:	89fa      	ldrh	r2, [r7, #14]
 8001a24:	88bb      	ldrh	r3, [r7, #4]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	81fb      	strh	r3, [r7, #14]
  switch (channel)
 8001a2a:	79fb      	ldrb	r3, [r7, #7]
 8001a2c:	2b03      	cmp	r3, #3
 8001a2e:	d81f      	bhi.n	8001a70 <ADS1115_GetData+0x64>
 8001a30:	a201      	add	r2, pc, #4	@ (adr r2, 8001a38 <ADS1115_GetData+0x2c>)
 8001a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a36:	bf00      	nop
 8001a38:	08001a49 	.word	0x08001a49
 8001a3c:	08001a53 	.word	0x08001a53
 8001a40:	08001a5d 	.word	0x08001a5d
 8001a44:	08001a67 	.word	0x08001a67
  {
    case DEV_ADS1115_CHANNEL_0:
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_0;
 8001a48:	89fb      	ldrh	r3, [r7, #14]
 8001a4a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a4e:	81fb      	strh	r3, [r7, #14]
      break;
 8001a50:	e00e      	b.n	8001a70 <ADS1115_GetData+0x64>
    case DEV_ADS1115_CHANNEL_1:
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_1;
 8001a52:	89fb      	ldrh	r3, [r7, #14]
 8001a54:	f443 43a0 	orr.w	r3, r3, #20480	@ 0x5000
 8001a58:	81fb      	strh	r3, [r7, #14]
      break;
 8001a5a:	e009      	b.n	8001a70 <ADS1115_GetData+0x64>
    case DEV_ADS1115_CHANNEL_2:
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_2;
 8001a5c:	89fb      	ldrh	r3, [r7, #14]
 8001a5e:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 8001a62:	81fb      	strh	r3, [r7, #14]
      break;
 8001a64:	e004      	b.n	8001a70 <ADS1115_GetData+0x64>
    case DEV_ADS1115_CHANNEL_3:
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_3;
 8001a66:	89fb      	ldrh	r3, [r7, #14]
 8001a68:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 8001a6c:	81fb      	strh	r3, [r7, #14]
      break;
 8001a6e:	bf00      	nop
  }

  // Set 'start single-conversion' bit
  config |= ADS1015_REG_CONFIG_OS_SINGLE;
 8001a70:	89fb      	ldrh	r3, [r7, #14]
 8001a72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a7a:	81fb      	strh	r3, [r7, #14]
  i2c_buffer[0]     = ADS1015_REG_POINTER_CONFIG;
 8001a7c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ae8 <ADS1115_GetData+0xdc>)
 8001a7e:	2201      	movs	r2, #1
 8001a80:	701a      	strb	r2, [r3, #0]
  i2c_buffer[1]     = (uint8_t)(config >> 8);
 8001a82:	89fb      	ldrh	r3, [r7, #14]
 8001a84:	0a1b      	lsrs	r3, r3, #8
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	b2da      	uxtb	r2, r3
 8001a8a:	4b17      	ldr	r3, [pc, #92]	@ (8001ae8 <ADS1115_GetData+0xdc>)
 8001a8c:	705a      	strb	r2, [r3, #1]
  i2c_buffer[2]     = (uint8_t)(config & 0xFF);
 8001a8e:	89fb      	ldrh	r3, [r7, #14]
 8001a90:	b2da      	uxtb	r2, r3
 8001a92:	4b15      	ldr	r3, [pc, #84]	@ (8001ae8 <ADS1115_GetData+0xdc>)
 8001a94:	709a      	strb	r2, [r3, #2]
  if (i2c_1.status == I2C_TIMEOUT)
  {
    return 0;
  }
#else
  HAL_I2C_Master_Transmit(&hi2c1, ADS_ADDR_GND << 1, i2c_buffer, 3, 10);
 8001a96:	230a      	movs	r3, #10
 8001a98:	9300      	str	r3, [sp, #0]
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	4a12      	ldr	r2, [pc, #72]	@ (8001ae8 <ADS1115_GetData+0xdc>)
 8001a9e:	2190      	movs	r1, #144	@ 0x90
 8001aa0:	4812      	ldr	r0, [pc, #72]	@ (8001aec <ADS1115_GetData+0xe0>)
 8001aa2:	f000 fc59 	bl	8002358 <HAL_I2C_Master_Transmit>
#endif


  // Read data
  i2c_buffer[0]     = ADS1015_REG_POINTER_CONVERT;
 8001aa6:	4b10      	ldr	r3, [pc, #64]	@ (8001ae8 <ADS1115_GetData+0xdc>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	701a      	strb	r2, [r3, #0]
  if (i2c_1.status == I2C_TIMEOUT)
  {
    return 0;
  }
#else
  HAL_I2C_Master_Transmit(&hi2c1, ADS_ADDR_GND << 1, &i2c_buffer[0], 1, 10);
 8001aac:	230a      	movs	r3, #10
 8001aae:	9300      	str	r3, [sp, #0]
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	4a0d      	ldr	r2, [pc, #52]	@ (8001ae8 <ADS1115_GetData+0xdc>)
 8001ab4:	2190      	movs	r1, #144	@ 0x90
 8001ab6:	480d      	ldr	r0, [pc, #52]	@ (8001aec <ADS1115_GetData+0xe0>)
 8001ab8:	f000 fc4e 	bl	8002358 <HAL_I2C_Master_Transmit>
  if (i2c_1.status == I2C_TIMEOUT)
  {
    return 0;
  }
#else
  HAL_I2C_Master_Receive(&hi2c1, ADS_ADDR_GND << 1, i2c_buffer, 2, 10);
 8001abc:	230a      	movs	r3, #10
 8001abe:	9300      	str	r3, [sp, #0]
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	4a09      	ldr	r2, [pc, #36]	@ (8001ae8 <ADS1115_GetData+0xdc>)
 8001ac4:	2190      	movs	r1, #144	@ 0x90
 8001ac6:	4809      	ldr	r0, [pc, #36]	@ (8001aec <ADS1115_GetData+0xe0>)
 8001ac8:	f000 fd44 	bl	8002554 <HAL_I2C_Master_Receive>
#endif

  return (uint16_t)(i2c_buffer[0] << 8 | i2c_buffer[1]);
 8001acc:	4b06      	ldr	r3, [pc, #24]	@ (8001ae8 <ADS1115_GetData+0xdc>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	021b      	lsls	r3, r3, #8
 8001ad2:	b21a      	sxth	r2, r3
 8001ad4:	4b04      	ldr	r3, [pc, #16]	@ (8001ae8 <ADS1115_GetData+0xdc>)
 8001ad6:	785b      	ldrb	r3, [r3, #1]
 8001ad8:	b21b      	sxth	r3, r3
 8001ada:	4313      	orrs	r3, r2
 8001adc:	b21b      	sxth	r3, r3
 8001ade:	b29b      	uxth	r3, r3
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3710      	adds	r7, #16
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	200002e8 	.word	0x200002e8
 8001aec:	20000288 	.word	0x20000288

08001af0 <ADS1115_ReadVoltage>:
 * read from the specified channel after converting the raw data reading to
 * voltage using the ADC reference voltage and step size.
 */
float
ADS1115_ReadVoltage (ads1115_channel_t channel, ads1115_gain_t gain)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	4603      	mov	r3, r0
 8001af8:	460a      	mov	r2, r1
 8001afa:	71fb      	strb	r3, [r7, #7]
 8001afc:	4613      	mov	r3, r2
 8001afe:	80bb      	strh	r3, [r7, #4]
  /**< Read raw Data */
  uint16_t value = ADS1115_GetData(channel, gain);
 8001b00:	88ba      	ldrh	r2, [r7, #4]
 8001b02:	79fb      	ldrb	r3, [r7, #7]
 8001b04:	4611      	mov	r1, r2
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7ff ff80 	bl	8001a0c <ADS1115_GetData>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	81fb      	strh	r3, [r7, #14]

  /**< Calibrate ADC */

  /**< Convert voltage */
  return (float)(value * ADS1115_VREF) / ADS1115_STEP;
 8001b10:	89fb      	ldrh	r3, [r7, #14]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff f872 	bl	8000bfc <__aeabi_i2f>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	4907      	ldr	r1, [pc, #28]	@ (8001b38 <ADS1115_ReadVoltage+0x48>)
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff f8c1 	bl	8000ca4 <__aeabi_fmul>
 8001b22:	4603      	mov	r3, r0
 8001b24:	f04f 418e 	mov.w	r1, #1191182336	@ 0x47000000
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff f96f 	bl	8000e0c <__aeabi_fdiv>
 8001b2e:	4603      	mov	r3, r0
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3710      	adds	r7, #16
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	4083126f 	.word	0x4083126f

08001b3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b40:	4b08      	ldr	r3, [pc, #32]	@ (8001b64 <HAL_Init+0x28>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a07      	ldr	r2, [pc, #28]	@ (8001b64 <HAL_Init+0x28>)
 8001b46:	f043 0310 	orr.w	r3, r3, #16
 8001b4a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b4c:	2003      	movs	r0, #3
 8001b4e:	f000 f907 	bl	8001d60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b52:	200f      	movs	r0, #15
 8001b54:	f000 f808 	bl	8001b68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b58:	f7ff fd94 	bl	8001684 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	40022000 	.word	0x40022000

08001b68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b70:	4b12      	ldr	r3, [pc, #72]	@ (8001bbc <HAL_InitTick+0x54>)
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	4b12      	ldr	r3, [pc, #72]	@ (8001bc0 <HAL_InitTick+0x58>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	4619      	mov	r1, r3
 8001b7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b86:	4618      	mov	r0, r3
 8001b88:	f000 f911 	bl	8001dae <HAL_SYSTICK_Config>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e00e      	b.n	8001bb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2b0f      	cmp	r3, #15
 8001b9a:	d80a      	bhi.n	8001bb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	6879      	ldr	r1, [r7, #4]
 8001ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ba4:	f000 f8e7 	bl	8001d76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ba8:	4a06      	ldr	r2, [pc, #24]	@ (8001bc4 <HAL_InitTick+0x5c>)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	e000      	b.n	8001bb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3708      	adds	r7, #8
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	20000004 	.word	0x20000004
 8001bc0:	2000000c 	.word	0x2000000c
 8001bc4:	20000008 	.word	0x20000008

08001bc8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bcc:	4b05      	ldr	r3, [pc, #20]	@ (8001be4 <HAL_IncTick+0x1c>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	4b05      	ldr	r3, [pc, #20]	@ (8001be8 <HAL_IncTick+0x20>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	4a03      	ldr	r2, [pc, #12]	@ (8001be8 <HAL_IncTick+0x20>)
 8001bda:	6013      	str	r3, [r2, #0]
}
 8001bdc:	bf00      	nop
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bc80      	pop	{r7}
 8001be2:	4770      	bx	lr
 8001be4:	2000000c 	.word	0x2000000c
 8001be8:	200002ec 	.word	0x200002ec

08001bec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  return uwTick;
 8001bf0:	4b02      	ldr	r3, [pc, #8]	@ (8001bfc <HAL_GetTick+0x10>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bc80      	pop	{r7}
 8001bfa:	4770      	bx	lr
 8001bfc:	200002ec 	.word	0x200002ec

08001c00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f003 0307 	and.w	r3, r3, #7
 8001c0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c10:	4b0c      	ldr	r3, [pc, #48]	@ (8001c44 <__NVIC_SetPriorityGrouping+0x44>)
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c16:	68ba      	ldr	r2, [r7, #8]
 8001c18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c28:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c32:	4a04      	ldr	r2, [pc, #16]	@ (8001c44 <__NVIC_SetPriorityGrouping+0x44>)
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	60d3      	str	r3, [r2, #12]
}
 8001c38:	bf00      	nop
 8001c3a:	3714      	adds	r7, #20
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bc80      	pop	{r7}
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	e000ed00 	.word	0xe000ed00

08001c48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c4c:	4b04      	ldr	r3, [pc, #16]	@ (8001c60 <__NVIC_GetPriorityGrouping+0x18>)
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	0a1b      	lsrs	r3, r3, #8
 8001c52:	f003 0307 	and.w	r3, r3, #7
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bc80      	pop	{r7}
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	e000ed00 	.word	0xe000ed00

08001c64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	6039      	str	r1, [r7, #0]
 8001c6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	db0a      	blt.n	8001c8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	b2da      	uxtb	r2, r3
 8001c7c:	490c      	ldr	r1, [pc, #48]	@ (8001cb0 <__NVIC_SetPriority+0x4c>)
 8001c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c82:	0112      	lsls	r2, r2, #4
 8001c84:	b2d2      	uxtb	r2, r2
 8001c86:	440b      	add	r3, r1
 8001c88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c8c:	e00a      	b.n	8001ca4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	b2da      	uxtb	r2, r3
 8001c92:	4908      	ldr	r1, [pc, #32]	@ (8001cb4 <__NVIC_SetPriority+0x50>)
 8001c94:	79fb      	ldrb	r3, [r7, #7]
 8001c96:	f003 030f 	and.w	r3, r3, #15
 8001c9a:	3b04      	subs	r3, #4
 8001c9c:	0112      	lsls	r2, r2, #4
 8001c9e:	b2d2      	uxtb	r2, r2
 8001ca0:	440b      	add	r3, r1
 8001ca2:	761a      	strb	r2, [r3, #24]
}
 8001ca4:	bf00      	nop
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bc80      	pop	{r7}
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	e000e100 	.word	0xe000e100
 8001cb4:	e000ed00 	.word	0xe000ed00

08001cb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b089      	sub	sp, #36	@ 0x24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	60b9      	str	r1, [r7, #8]
 8001cc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	f1c3 0307 	rsb	r3, r3, #7
 8001cd2:	2b04      	cmp	r3, #4
 8001cd4:	bf28      	it	cs
 8001cd6:	2304      	movcs	r3, #4
 8001cd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	3304      	adds	r3, #4
 8001cde:	2b06      	cmp	r3, #6
 8001ce0:	d902      	bls.n	8001ce8 <NVIC_EncodePriority+0x30>
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	3b03      	subs	r3, #3
 8001ce6:	e000      	b.n	8001cea <NVIC_EncodePriority+0x32>
 8001ce8:	2300      	movs	r3, #0
 8001cea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cec:	f04f 32ff 	mov.w	r2, #4294967295
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	43da      	mvns	r2, r3
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	401a      	ands	r2, r3
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d00:	f04f 31ff 	mov.w	r1, #4294967295
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	fa01 f303 	lsl.w	r3, r1, r3
 8001d0a:	43d9      	mvns	r1, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d10:	4313      	orrs	r3, r2
         );
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3724      	adds	r7, #36	@ 0x24
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bc80      	pop	{r7}
 8001d1a:	4770      	bx	lr

08001d1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	3b01      	subs	r3, #1
 8001d28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d2c:	d301      	bcc.n	8001d32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e00f      	b.n	8001d52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d32:	4a0a      	ldr	r2, [pc, #40]	@ (8001d5c <SysTick_Config+0x40>)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	3b01      	subs	r3, #1
 8001d38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d3a:	210f      	movs	r1, #15
 8001d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d40:	f7ff ff90 	bl	8001c64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d44:	4b05      	ldr	r3, [pc, #20]	@ (8001d5c <SysTick_Config+0x40>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d4a:	4b04      	ldr	r3, [pc, #16]	@ (8001d5c <SysTick_Config+0x40>)
 8001d4c:	2207      	movs	r2, #7
 8001d4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	e000e010 	.word	0xe000e010

08001d60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f7ff ff49 	bl	8001c00 <__NVIC_SetPriorityGrouping>
}
 8001d6e:	bf00      	nop
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b086      	sub	sp, #24
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	60b9      	str	r1, [r7, #8]
 8001d80:	607a      	str	r2, [r7, #4]
 8001d82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d84:	2300      	movs	r3, #0
 8001d86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d88:	f7ff ff5e 	bl	8001c48 <__NVIC_GetPriorityGrouping>
 8001d8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	68b9      	ldr	r1, [r7, #8]
 8001d92:	6978      	ldr	r0, [r7, #20]
 8001d94:	f7ff ff90 	bl	8001cb8 <NVIC_EncodePriority>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d9e:	4611      	mov	r1, r2
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7ff ff5f 	bl	8001c64 <__NVIC_SetPriority>
}
 8001da6:	bf00      	nop
 8001da8:	3718      	adds	r7, #24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b082      	sub	sp, #8
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f7ff ffb0 	bl	8001d1c <SysTick_Config>
 8001dbc:	4603      	mov	r3, r0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
	...

08001dc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b08b      	sub	sp, #44	@ 0x2c
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dda:	e169      	b.n	80020b0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ddc:	2201      	movs	r2, #1
 8001dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	69fa      	ldr	r2, [r7, #28]
 8001dec:	4013      	ands	r3, r2
 8001dee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	f040 8158 	bne.w	80020aa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	4a9a      	ldr	r2, [pc, #616]	@ (8002068 <HAL_GPIO_Init+0x2a0>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d05e      	beq.n	8001ec2 <HAL_GPIO_Init+0xfa>
 8001e04:	4a98      	ldr	r2, [pc, #608]	@ (8002068 <HAL_GPIO_Init+0x2a0>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d875      	bhi.n	8001ef6 <HAL_GPIO_Init+0x12e>
 8001e0a:	4a98      	ldr	r2, [pc, #608]	@ (800206c <HAL_GPIO_Init+0x2a4>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d058      	beq.n	8001ec2 <HAL_GPIO_Init+0xfa>
 8001e10:	4a96      	ldr	r2, [pc, #600]	@ (800206c <HAL_GPIO_Init+0x2a4>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d86f      	bhi.n	8001ef6 <HAL_GPIO_Init+0x12e>
 8001e16:	4a96      	ldr	r2, [pc, #600]	@ (8002070 <HAL_GPIO_Init+0x2a8>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d052      	beq.n	8001ec2 <HAL_GPIO_Init+0xfa>
 8001e1c:	4a94      	ldr	r2, [pc, #592]	@ (8002070 <HAL_GPIO_Init+0x2a8>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d869      	bhi.n	8001ef6 <HAL_GPIO_Init+0x12e>
 8001e22:	4a94      	ldr	r2, [pc, #592]	@ (8002074 <HAL_GPIO_Init+0x2ac>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d04c      	beq.n	8001ec2 <HAL_GPIO_Init+0xfa>
 8001e28:	4a92      	ldr	r2, [pc, #584]	@ (8002074 <HAL_GPIO_Init+0x2ac>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d863      	bhi.n	8001ef6 <HAL_GPIO_Init+0x12e>
 8001e2e:	4a92      	ldr	r2, [pc, #584]	@ (8002078 <HAL_GPIO_Init+0x2b0>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d046      	beq.n	8001ec2 <HAL_GPIO_Init+0xfa>
 8001e34:	4a90      	ldr	r2, [pc, #576]	@ (8002078 <HAL_GPIO_Init+0x2b0>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d85d      	bhi.n	8001ef6 <HAL_GPIO_Init+0x12e>
 8001e3a:	2b12      	cmp	r3, #18
 8001e3c:	d82a      	bhi.n	8001e94 <HAL_GPIO_Init+0xcc>
 8001e3e:	2b12      	cmp	r3, #18
 8001e40:	d859      	bhi.n	8001ef6 <HAL_GPIO_Init+0x12e>
 8001e42:	a201      	add	r2, pc, #4	@ (adr r2, 8001e48 <HAL_GPIO_Init+0x80>)
 8001e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e48:	08001ec3 	.word	0x08001ec3
 8001e4c:	08001e9d 	.word	0x08001e9d
 8001e50:	08001eaf 	.word	0x08001eaf
 8001e54:	08001ef1 	.word	0x08001ef1
 8001e58:	08001ef7 	.word	0x08001ef7
 8001e5c:	08001ef7 	.word	0x08001ef7
 8001e60:	08001ef7 	.word	0x08001ef7
 8001e64:	08001ef7 	.word	0x08001ef7
 8001e68:	08001ef7 	.word	0x08001ef7
 8001e6c:	08001ef7 	.word	0x08001ef7
 8001e70:	08001ef7 	.word	0x08001ef7
 8001e74:	08001ef7 	.word	0x08001ef7
 8001e78:	08001ef7 	.word	0x08001ef7
 8001e7c:	08001ef7 	.word	0x08001ef7
 8001e80:	08001ef7 	.word	0x08001ef7
 8001e84:	08001ef7 	.word	0x08001ef7
 8001e88:	08001ef7 	.word	0x08001ef7
 8001e8c:	08001ea5 	.word	0x08001ea5
 8001e90:	08001eb9 	.word	0x08001eb9
 8001e94:	4a79      	ldr	r2, [pc, #484]	@ (800207c <HAL_GPIO_Init+0x2b4>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d013      	beq.n	8001ec2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e9a:	e02c      	b.n	8001ef6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	623b      	str	r3, [r7, #32]
          break;
 8001ea2:	e029      	b.n	8001ef8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	3304      	adds	r3, #4
 8001eaa:	623b      	str	r3, [r7, #32]
          break;
 8001eac:	e024      	b.n	8001ef8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	3308      	adds	r3, #8
 8001eb4:	623b      	str	r3, [r7, #32]
          break;
 8001eb6:	e01f      	b.n	8001ef8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	330c      	adds	r3, #12
 8001ebe:	623b      	str	r3, [r7, #32]
          break;
 8001ec0:	e01a      	b.n	8001ef8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d102      	bne.n	8001ed0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001eca:	2304      	movs	r3, #4
 8001ecc:	623b      	str	r3, [r7, #32]
          break;
 8001ece:	e013      	b.n	8001ef8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d105      	bne.n	8001ee4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ed8:	2308      	movs	r3, #8
 8001eda:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	69fa      	ldr	r2, [r7, #28]
 8001ee0:	611a      	str	r2, [r3, #16]
          break;
 8001ee2:	e009      	b.n	8001ef8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ee4:	2308      	movs	r3, #8
 8001ee6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	69fa      	ldr	r2, [r7, #28]
 8001eec:	615a      	str	r2, [r3, #20]
          break;
 8001eee:	e003      	b.n	8001ef8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	623b      	str	r3, [r7, #32]
          break;
 8001ef4:	e000      	b.n	8001ef8 <HAL_GPIO_Init+0x130>
          break;
 8001ef6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	2bff      	cmp	r3, #255	@ 0xff
 8001efc:	d801      	bhi.n	8001f02 <HAL_GPIO_Init+0x13a>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	e001      	b.n	8001f06 <HAL_GPIO_Init+0x13e>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	3304      	adds	r3, #4
 8001f06:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	2bff      	cmp	r3, #255	@ 0xff
 8001f0c:	d802      	bhi.n	8001f14 <HAL_GPIO_Init+0x14c>
 8001f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	e002      	b.n	8001f1a <HAL_GPIO_Init+0x152>
 8001f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f16:	3b08      	subs	r3, #8
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	210f      	movs	r1, #15
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	fa01 f303 	lsl.w	r3, r1, r3
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	401a      	ands	r2, r3
 8001f2c:	6a39      	ldr	r1, [r7, #32]
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	fa01 f303 	lsl.w	r3, r1, r3
 8001f34:	431a      	orrs	r2, r3
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	f000 80b1 	beq.w	80020aa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f48:	4b4d      	ldr	r3, [pc, #308]	@ (8002080 <HAL_GPIO_Init+0x2b8>)
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	4a4c      	ldr	r2, [pc, #304]	@ (8002080 <HAL_GPIO_Init+0x2b8>)
 8001f4e:	f043 0301 	orr.w	r3, r3, #1
 8001f52:	6193      	str	r3, [r2, #24]
 8001f54:	4b4a      	ldr	r3, [pc, #296]	@ (8002080 <HAL_GPIO_Init+0x2b8>)
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	f003 0301 	and.w	r3, r3, #1
 8001f5c:	60bb      	str	r3, [r7, #8]
 8001f5e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f60:	4a48      	ldr	r2, [pc, #288]	@ (8002084 <HAL_GPIO_Init+0x2bc>)
 8001f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f64:	089b      	lsrs	r3, r3, #2
 8001f66:	3302      	adds	r3, #2
 8001f68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f6c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f70:	f003 0303 	and.w	r3, r3, #3
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	220f      	movs	r2, #15
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	68fa      	ldr	r2, [r7, #12]
 8001f80:	4013      	ands	r3, r2
 8001f82:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4a40      	ldr	r2, [pc, #256]	@ (8002088 <HAL_GPIO_Init+0x2c0>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d013      	beq.n	8001fb4 <HAL_GPIO_Init+0x1ec>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4a3f      	ldr	r2, [pc, #252]	@ (800208c <HAL_GPIO_Init+0x2c4>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d00d      	beq.n	8001fb0 <HAL_GPIO_Init+0x1e8>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4a3e      	ldr	r2, [pc, #248]	@ (8002090 <HAL_GPIO_Init+0x2c8>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d007      	beq.n	8001fac <HAL_GPIO_Init+0x1e4>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a3d      	ldr	r2, [pc, #244]	@ (8002094 <HAL_GPIO_Init+0x2cc>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d101      	bne.n	8001fa8 <HAL_GPIO_Init+0x1e0>
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e006      	b.n	8001fb6 <HAL_GPIO_Init+0x1ee>
 8001fa8:	2304      	movs	r3, #4
 8001faa:	e004      	b.n	8001fb6 <HAL_GPIO_Init+0x1ee>
 8001fac:	2302      	movs	r3, #2
 8001fae:	e002      	b.n	8001fb6 <HAL_GPIO_Init+0x1ee>
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e000      	b.n	8001fb6 <HAL_GPIO_Init+0x1ee>
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fb8:	f002 0203 	and.w	r2, r2, #3
 8001fbc:	0092      	lsls	r2, r2, #2
 8001fbe:	4093      	lsls	r3, r2
 8001fc0:	68fa      	ldr	r2, [r7, #12]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fc6:	492f      	ldr	r1, [pc, #188]	@ (8002084 <HAL_GPIO_Init+0x2bc>)
 8001fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fca:	089b      	lsrs	r3, r3, #2
 8001fcc:	3302      	adds	r3, #2
 8001fce:	68fa      	ldr	r2, [r7, #12]
 8001fd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d006      	beq.n	8001fee <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001fe0:	4b2d      	ldr	r3, [pc, #180]	@ (8002098 <HAL_GPIO_Init+0x2d0>)
 8001fe2:	689a      	ldr	r2, [r3, #8]
 8001fe4:	492c      	ldr	r1, [pc, #176]	@ (8002098 <HAL_GPIO_Init+0x2d0>)
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	608b      	str	r3, [r1, #8]
 8001fec:	e006      	b.n	8001ffc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001fee:	4b2a      	ldr	r3, [pc, #168]	@ (8002098 <HAL_GPIO_Init+0x2d0>)
 8001ff0:	689a      	ldr	r2, [r3, #8]
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	4928      	ldr	r1, [pc, #160]	@ (8002098 <HAL_GPIO_Init+0x2d0>)
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d006      	beq.n	8002016 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002008:	4b23      	ldr	r3, [pc, #140]	@ (8002098 <HAL_GPIO_Init+0x2d0>)
 800200a:	68da      	ldr	r2, [r3, #12]
 800200c:	4922      	ldr	r1, [pc, #136]	@ (8002098 <HAL_GPIO_Init+0x2d0>)
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	4313      	orrs	r3, r2
 8002012:	60cb      	str	r3, [r1, #12]
 8002014:	e006      	b.n	8002024 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002016:	4b20      	ldr	r3, [pc, #128]	@ (8002098 <HAL_GPIO_Init+0x2d0>)
 8002018:	68da      	ldr	r2, [r3, #12]
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	43db      	mvns	r3, r3
 800201e:	491e      	ldr	r1, [pc, #120]	@ (8002098 <HAL_GPIO_Init+0x2d0>)
 8002020:	4013      	ands	r3, r2
 8002022:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d006      	beq.n	800203e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002030:	4b19      	ldr	r3, [pc, #100]	@ (8002098 <HAL_GPIO_Init+0x2d0>)
 8002032:	685a      	ldr	r2, [r3, #4]
 8002034:	4918      	ldr	r1, [pc, #96]	@ (8002098 <HAL_GPIO_Init+0x2d0>)
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	4313      	orrs	r3, r2
 800203a:	604b      	str	r3, [r1, #4]
 800203c:	e006      	b.n	800204c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800203e:	4b16      	ldr	r3, [pc, #88]	@ (8002098 <HAL_GPIO_Init+0x2d0>)
 8002040:	685a      	ldr	r2, [r3, #4]
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	43db      	mvns	r3, r3
 8002046:	4914      	ldr	r1, [pc, #80]	@ (8002098 <HAL_GPIO_Init+0x2d0>)
 8002048:	4013      	ands	r3, r2
 800204a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d021      	beq.n	800209c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002058:	4b0f      	ldr	r3, [pc, #60]	@ (8002098 <HAL_GPIO_Init+0x2d0>)
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	490e      	ldr	r1, [pc, #56]	@ (8002098 <HAL_GPIO_Init+0x2d0>)
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	4313      	orrs	r3, r2
 8002062:	600b      	str	r3, [r1, #0]
 8002064:	e021      	b.n	80020aa <HAL_GPIO_Init+0x2e2>
 8002066:	bf00      	nop
 8002068:	10320000 	.word	0x10320000
 800206c:	10310000 	.word	0x10310000
 8002070:	10220000 	.word	0x10220000
 8002074:	10210000 	.word	0x10210000
 8002078:	10120000 	.word	0x10120000
 800207c:	10110000 	.word	0x10110000
 8002080:	40021000 	.word	0x40021000
 8002084:	40010000 	.word	0x40010000
 8002088:	40010800 	.word	0x40010800
 800208c:	40010c00 	.word	0x40010c00
 8002090:	40011000 	.word	0x40011000
 8002094:	40011400 	.word	0x40011400
 8002098:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800209c:	4b0b      	ldr	r3, [pc, #44]	@ (80020cc <HAL_GPIO_Init+0x304>)
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	43db      	mvns	r3, r3
 80020a4:	4909      	ldr	r1, [pc, #36]	@ (80020cc <HAL_GPIO_Init+0x304>)
 80020a6:	4013      	ands	r3, r2
 80020a8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80020aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ac:	3301      	adds	r3, #1
 80020ae:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b6:	fa22 f303 	lsr.w	r3, r2, r3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f47f ae8e 	bne.w	8001ddc <HAL_GPIO_Init+0x14>
  }
}
 80020c0:	bf00      	nop
 80020c2:	bf00      	nop
 80020c4:	372c      	adds	r7, #44	@ 0x2c
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bc80      	pop	{r7}
 80020ca:	4770      	bx	lr
 80020cc:	40010400 	.word	0x40010400

080020d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d101      	bne.n	80020e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e12b      	b.n	800233a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d106      	bne.n	80020fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f7ff faf6 	bl	80016e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2224      	movs	r2, #36	@ 0x24
 8002100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f022 0201 	bic.w	r2, r2, #1
 8002112:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002122:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002132:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002134:	f001 f80a 	bl	800314c <HAL_RCC_GetPCLK1Freq>
 8002138:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	4a81      	ldr	r2, [pc, #516]	@ (8002344 <HAL_I2C_Init+0x274>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d807      	bhi.n	8002154 <HAL_I2C_Init+0x84>
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	4a80      	ldr	r2, [pc, #512]	@ (8002348 <HAL_I2C_Init+0x278>)
 8002148:	4293      	cmp	r3, r2
 800214a:	bf94      	ite	ls
 800214c:	2301      	movls	r3, #1
 800214e:	2300      	movhi	r3, #0
 8002150:	b2db      	uxtb	r3, r3
 8002152:	e006      	b.n	8002162 <HAL_I2C_Init+0x92>
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	4a7d      	ldr	r2, [pc, #500]	@ (800234c <HAL_I2C_Init+0x27c>)
 8002158:	4293      	cmp	r3, r2
 800215a:	bf94      	ite	ls
 800215c:	2301      	movls	r3, #1
 800215e:	2300      	movhi	r3, #0
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e0e7      	b.n	800233a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	4a78      	ldr	r2, [pc, #480]	@ (8002350 <HAL_I2C_Init+0x280>)
 800216e:	fba2 2303 	umull	r2, r3, r2, r3
 8002172:	0c9b      	lsrs	r3, r3, #18
 8002174:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	68ba      	ldr	r2, [r7, #8]
 8002186:	430a      	orrs	r2, r1
 8002188:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	6a1b      	ldr	r3, [r3, #32]
 8002190:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	4a6a      	ldr	r2, [pc, #424]	@ (8002344 <HAL_I2C_Init+0x274>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d802      	bhi.n	80021a4 <HAL_I2C_Init+0xd4>
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	3301      	adds	r3, #1
 80021a2:	e009      	b.n	80021b8 <HAL_I2C_Init+0xe8>
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80021aa:	fb02 f303 	mul.w	r3, r2, r3
 80021ae:	4a69      	ldr	r2, [pc, #420]	@ (8002354 <HAL_I2C_Init+0x284>)
 80021b0:	fba2 2303 	umull	r2, r3, r2, r3
 80021b4:	099b      	lsrs	r3, r3, #6
 80021b6:	3301      	adds	r3, #1
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	6812      	ldr	r2, [r2, #0]
 80021bc:	430b      	orrs	r3, r1
 80021be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	69db      	ldr	r3, [r3, #28]
 80021c6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80021ca:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	495c      	ldr	r1, [pc, #368]	@ (8002344 <HAL_I2C_Init+0x274>)
 80021d4:	428b      	cmp	r3, r1
 80021d6:	d819      	bhi.n	800220c <HAL_I2C_Init+0x13c>
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	1e59      	subs	r1, r3, #1
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80021e6:	1c59      	adds	r1, r3, #1
 80021e8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80021ec:	400b      	ands	r3, r1
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d00a      	beq.n	8002208 <HAL_I2C_Init+0x138>
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	1e59      	subs	r1, r3, #1
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002200:	3301      	adds	r3, #1
 8002202:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002206:	e051      	b.n	80022ac <HAL_I2C_Init+0x1dc>
 8002208:	2304      	movs	r3, #4
 800220a:	e04f      	b.n	80022ac <HAL_I2C_Init+0x1dc>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d111      	bne.n	8002238 <HAL_I2C_Init+0x168>
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	1e58      	subs	r0, r3, #1
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6859      	ldr	r1, [r3, #4]
 800221c:	460b      	mov	r3, r1
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	440b      	add	r3, r1
 8002222:	fbb0 f3f3 	udiv	r3, r0, r3
 8002226:	3301      	adds	r3, #1
 8002228:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800222c:	2b00      	cmp	r3, #0
 800222e:	bf0c      	ite	eq
 8002230:	2301      	moveq	r3, #1
 8002232:	2300      	movne	r3, #0
 8002234:	b2db      	uxtb	r3, r3
 8002236:	e012      	b.n	800225e <HAL_I2C_Init+0x18e>
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	1e58      	subs	r0, r3, #1
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6859      	ldr	r1, [r3, #4]
 8002240:	460b      	mov	r3, r1
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	440b      	add	r3, r1
 8002246:	0099      	lsls	r1, r3, #2
 8002248:	440b      	add	r3, r1
 800224a:	fbb0 f3f3 	udiv	r3, r0, r3
 800224e:	3301      	adds	r3, #1
 8002250:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002254:	2b00      	cmp	r3, #0
 8002256:	bf0c      	ite	eq
 8002258:	2301      	moveq	r3, #1
 800225a:	2300      	movne	r3, #0
 800225c:	b2db      	uxtb	r3, r3
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <HAL_I2C_Init+0x196>
 8002262:	2301      	movs	r3, #1
 8002264:	e022      	b.n	80022ac <HAL_I2C_Init+0x1dc>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d10e      	bne.n	800228c <HAL_I2C_Init+0x1bc>
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	1e58      	subs	r0, r3, #1
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6859      	ldr	r1, [r3, #4]
 8002276:	460b      	mov	r3, r1
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	440b      	add	r3, r1
 800227c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002280:	3301      	adds	r3, #1
 8002282:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002286:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800228a:	e00f      	b.n	80022ac <HAL_I2C_Init+0x1dc>
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	1e58      	subs	r0, r3, #1
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6859      	ldr	r1, [r3, #4]
 8002294:	460b      	mov	r3, r1
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	440b      	add	r3, r1
 800229a:	0099      	lsls	r1, r3, #2
 800229c:	440b      	add	r3, r1
 800229e:	fbb0 f3f3 	udiv	r3, r0, r3
 80022a2:	3301      	adds	r3, #1
 80022a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022a8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80022ac:	6879      	ldr	r1, [r7, #4]
 80022ae:	6809      	ldr	r1, [r1, #0]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	69da      	ldr	r2, [r3, #28]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6a1b      	ldr	r3, [r3, #32]
 80022c6:	431a      	orrs	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	430a      	orrs	r2, r1
 80022ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80022da:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	6911      	ldr	r1, [r2, #16]
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	68d2      	ldr	r2, [r2, #12]
 80022e6:	4311      	orrs	r1, r2
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	6812      	ldr	r2, [r2, #0]
 80022ec:	430b      	orrs	r3, r1
 80022ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	695a      	ldr	r2, [r3, #20]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	431a      	orrs	r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	430a      	orrs	r2, r1
 800230a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f042 0201 	orr.w	r2, r2, #1
 800231a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2220      	movs	r2, #32
 8002326:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3710      	adds	r7, #16
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	000186a0 	.word	0x000186a0
 8002348:	001e847f 	.word	0x001e847f
 800234c:	003d08ff 	.word	0x003d08ff
 8002350:	431bde83 	.word	0x431bde83
 8002354:	10624dd3 	.word	0x10624dd3

08002358 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b088      	sub	sp, #32
 800235c:	af02      	add	r7, sp, #8
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	607a      	str	r2, [r7, #4]
 8002362:	461a      	mov	r2, r3
 8002364:	460b      	mov	r3, r1
 8002366:	817b      	strh	r3, [r7, #10]
 8002368:	4613      	mov	r3, r2
 800236a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800236c:	f7ff fc3e 	bl	8001bec <HAL_GetTick>
 8002370:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002378:	b2db      	uxtb	r3, r3
 800237a:	2b20      	cmp	r3, #32
 800237c:	f040 80e0 	bne.w	8002540 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	9300      	str	r3, [sp, #0]
 8002384:	2319      	movs	r3, #25
 8002386:	2201      	movs	r2, #1
 8002388:	4970      	ldr	r1, [pc, #448]	@ (800254c <HAL_I2C_Master_Transmit+0x1f4>)
 800238a:	68f8      	ldr	r0, [r7, #12]
 800238c:	f000 fc9e 	bl	8002ccc <I2C_WaitOnFlagUntilTimeout>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002396:	2302      	movs	r3, #2
 8002398:	e0d3      	b.n	8002542 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d101      	bne.n	80023a8 <HAL_I2C_Master_Transmit+0x50>
 80023a4:	2302      	movs	r3, #2
 80023a6:	e0cc      	b.n	8002542 <HAL_I2C_Master_Transmit+0x1ea>
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d007      	beq.n	80023ce <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f042 0201 	orr.w	r2, r2, #1
 80023cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023dc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2221      	movs	r2, #33	@ 0x21
 80023e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2210      	movs	r2, #16
 80023ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2200      	movs	r2, #0
 80023f2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	893a      	ldrh	r2, [r7, #8]
 80023fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002404:	b29a      	uxth	r2, r3
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	4a50      	ldr	r2, [pc, #320]	@ (8002550 <HAL_I2C_Master_Transmit+0x1f8>)
 800240e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002410:	8979      	ldrh	r1, [r7, #10]
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	6a3a      	ldr	r2, [r7, #32]
 8002416:	68f8      	ldr	r0, [r7, #12]
 8002418:	f000 fb08 	bl	8002a2c <I2C_MasterRequestWrite>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e08d      	b.n	8002542 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002426:	2300      	movs	r3, #0
 8002428:	613b      	str	r3, [r7, #16]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	695b      	ldr	r3, [r3, #20]
 8002430:	613b      	str	r3, [r7, #16]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	699b      	ldr	r3, [r3, #24]
 8002438:	613b      	str	r3, [r7, #16]
 800243a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800243c:	e066      	b.n	800250c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800243e:	697a      	ldr	r2, [r7, #20]
 8002440:	6a39      	ldr	r1, [r7, #32]
 8002442:	68f8      	ldr	r0, [r7, #12]
 8002444:	f000 fd5c 	bl	8002f00 <I2C_WaitOnTXEFlagUntilTimeout>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d00d      	beq.n	800246a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002452:	2b04      	cmp	r3, #4
 8002454:	d107      	bne.n	8002466 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002464:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e06b      	b.n	8002542 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800246e:	781a      	ldrb	r2, [r3, #0]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800247a:	1c5a      	adds	r2, r3, #1
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002484:	b29b      	uxth	r3, r3
 8002486:	3b01      	subs	r3, #1
 8002488:	b29a      	uxth	r2, r3
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002492:	3b01      	subs	r3, #1
 8002494:	b29a      	uxth	r2, r3
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	695b      	ldr	r3, [r3, #20]
 80024a0:	f003 0304 	and.w	r3, r3, #4
 80024a4:	2b04      	cmp	r3, #4
 80024a6:	d11b      	bne.n	80024e0 <HAL_I2C_Master_Transmit+0x188>
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d017      	beq.n	80024e0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b4:	781a      	ldrb	r2, [r3, #0]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c0:	1c5a      	adds	r2, r3, #1
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	3b01      	subs	r3, #1
 80024ce:	b29a      	uxth	r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024d8:	3b01      	subs	r3, #1
 80024da:	b29a      	uxth	r2, r3
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024e0:	697a      	ldr	r2, [r7, #20]
 80024e2:	6a39      	ldr	r1, [r7, #32]
 80024e4:	68f8      	ldr	r0, [r7, #12]
 80024e6:	f000 fd53 	bl	8002f90 <I2C_WaitOnBTFFlagUntilTimeout>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d00d      	beq.n	800250c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f4:	2b04      	cmp	r3, #4
 80024f6:	d107      	bne.n	8002508 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002506:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e01a      	b.n	8002542 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002510:	2b00      	cmp	r3, #0
 8002512:	d194      	bne.n	800243e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002522:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2220      	movs	r2, #32
 8002528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2200      	movs	r2, #0
 8002530:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2200      	movs	r2, #0
 8002538:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800253c:	2300      	movs	r3, #0
 800253e:	e000      	b.n	8002542 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002540:	2302      	movs	r3, #2
  }
}
 8002542:	4618      	mov	r0, r3
 8002544:	3718      	adds	r7, #24
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	00100002 	.word	0x00100002
 8002550:	ffff0000 	.word	0xffff0000

08002554 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b08c      	sub	sp, #48	@ 0x30
 8002558:	af02      	add	r7, sp, #8
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	607a      	str	r2, [r7, #4]
 800255e:	461a      	mov	r2, r3
 8002560:	460b      	mov	r3, r1
 8002562:	817b      	strh	r3, [r7, #10]
 8002564:	4613      	mov	r3, r2
 8002566:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002568:	2300      	movs	r3, #0
 800256a:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800256c:	f7ff fb3e 	bl	8001bec <HAL_GetTick>
 8002570:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2b20      	cmp	r3, #32
 800257c:	f040 824b 	bne.w	8002a16 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002582:	9300      	str	r3, [sp, #0]
 8002584:	2319      	movs	r3, #25
 8002586:	2201      	movs	r2, #1
 8002588:	497f      	ldr	r1, [pc, #508]	@ (8002788 <HAL_I2C_Master_Receive+0x234>)
 800258a:	68f8      	ldr	r0, [r7, #12]
 800258c:	f000 fb9e 	bl	8002ccc <I2C_WaitOnFlagUntilTimeout>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002596:	2302      	movs	r3, #2
 8002598:	e23e      	b.n	8002a18 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d101      	bne.n	80025a8 <HAL_I2C_Master_Receive+0x54>
 80025a4:	2302      	movs	r3, #2
 80025a6:	e237      	b.n	8002a18 <HAL_I2C_Master_Receive+0x4c4>
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d007      	beq.n	80025ce <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f042 0201 	orr.w	r2, r2, #1
 80025cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025dc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2222      	movs	r2, #34	@ 0x22
 80025e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2210      	movs	r2, #16
 80025ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2200      	movs	r2, #0
 80025f2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	893a      	ldrh	r2, [r7, #8]
 80025fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002604:	b29a      	uxth	r2, r3
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	4a5f      	ldr	r2, [pc, #380]	@ (800278c <HAL_I2C_Master_Receive+0x238>)
 800260e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002610:	8979      	ldrh	r1, [r7, #10]
 8002612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002614:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002616:	68f8      	ldr	r0, [r7, #12]
 8002618:	f000 fa8a 	bl	8002b30 <I2C_MasterRequestRead>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e1f8      	b.n	8002a18 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800262a:	2b00      	cmp	r3, #0
 800262c:	d113      	bne.n	8002656 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800262e:	2300      	movs	r3, #0
 8002630:	61fb      	str	r3, [r7, #28]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	695b      	ldr	r3, [r3, #20]
 8002638:	61fb      	str	r3, [r7, #28]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	61fb      	str	r3, [r7, #28]
 8002642:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002652:	601a      	str	r2, [r3, #0]
 8002654:	e1cc      	b.n	80029f0 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800265a:	2b01      	cmp	r3, #1
 800265c:	d11e      	bne.n	800269c <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800266c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800266e:	b672      	cpsid	i
}
 8002670:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002672:	2300      	movs	r3, #0
 8002674:	61bb      	str	r3, [r7, #24]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	695b      	ldr	r3, [r3, #20]
 800267c:	61bb      	str	r3, [r7, #24]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	61bb      	str	r3, [r7, #24]
 8002686:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002696:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002698:	b662      	cpsie	i
}
 800269a:	e035      	b.n	8002708 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d11e      	bne.n	80026e2 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80026b2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80026b4:	b672      	cpsid	i
}
 80026b6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026b8:	2300      	movs	r3, #0
 80026ba:	617b      	str	r3, [r7, #20]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	695b      	ldr	r3, [r3, #20]
 80026c2:	617b      	str	r3, [r7, #20]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	699b      	ldr	r3, [r3, #24]
 80026ca:	617b      	str	r3, [r7, #20]
 80026cc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026dc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80026de:	b662      	cpsie	i
}
 80026e0:	e012      	b.n	8002708 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80026f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026f2:	2300      	movs	r3, #0
 80026f4:	613b      	str	r3, [r7, #16]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	695b      	ldr	r3, [r3, #20]
 80026fc:	613b      	str	r3, [r7, #16]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	613b      	str	r3, [r7, #16]
 8002706:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002708:	e172      	b.n	80029f0 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800270e:	2b03      	cmp	r3, #3
 8002710:	f200 811f 	bhi.w	8002952 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002718:	2b01      	cmp	r3, #1
 800271a:	d123      	bne.n	8002764 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800271c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800271e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002720:	68f8      	ldr	r0, [r7, #12]
 8002722:	f000 fc7d 	bl	8003020 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d001      	beq.n	8002730 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e173      	b.n	8002a18 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	691a      	ldr	r2, [r3, #16]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800273a:	b2d2      	uxtb	r2, r2
 800273c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002742:	1c5a      	adds	r2, r3, #1
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800274c:	3b01      	subs	r3, #1
 800274e:	b29a      	uxth	r2, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002758:	b29b      	uxth	r3, r3
 800275a:	3b01      	subs	r3, #1
 800275c:	b29a      	uxth	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002762:	e145      	b.n	80029f0 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002768:	2b02      	cmp	r3, #2
 800276a:	d152      	bne.n	8002812 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800276c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800276e:	9300      	str	r3, [sp, #0]
 8002770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002772:	2200      	movs	r2, #0
 8002774:	4906      	ldr	r1, [pc, #24]	@ (8002790 <HAL_I2C_Master_Receive+0x23c>)
 8002776:	68f8      	ldr	r0, [r7, #12]
 8002778:	f000 faa8 	bl	8002ccc <I2C_WaitOnFlagUntilTimeout>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d008      	beq.n	8002794 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e148      	b.n	8002a18 <HAL_I2C_Master_Receive+0x4c4>
 8002786:	bf00      	nop
 8002788:	00100002 	.word	0x00100002
 800278c:	ffff0000 	.word	0xffff0000
 8002790:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002794:	b672      	cpsid	i
}
 8002796:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	691a      	ldr	r2, [r3, #16]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027b2:	b2d2      	uxtb	r2, r2
 80027b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ba:	1c5a      	adds	r2, r3, #1
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027c4:	3b01      	subs	r3, #1
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	3b01      	subs	r3, #1
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80027da:	b662      	cpsie	i
}
 80027dc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	691a      	ldr	r2, [r3, #16]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e8:	b2d2      	uxtb	r2, r2
 80027ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027f0:	1c5a      	adds	r2, r3, #1
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027fa:	3b01      	subs	r3, #1
 80027fc:	b29a      	uxth	r2, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002806:	b29b      	uxth	r3, r3
 8002808:	3b01      	subs	r3, #1
 800280a:	b29a      	uxth	r2, r3
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002810:	e0ee      	b.n	80029f0 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002814:	9300      	str	r3, [sp, #0]
 8002816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002818:	2200      	movs	r2, #0
 800281a:	4981      	ldr	r1, [pc, #516]	@ (8002a20 <HAL_I2C_Master_Receive+0x4cc>)
 800281c:	68f8      	ldr	r0, [r7, #12]
 800281e:	f000 fa55 	bl	8002ccc <I2C_WaitOnFlagUntilTimeout>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d001      	beq.n	800282c <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e0f5      	b.n	8002a18 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800283a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800283c:	b672      	cpsid	i
}
 800283e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	691a      	ldr	r2, [r3, #16]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800284a:	b2d2      	uxtb	r2, r2
 800284c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002852:	1c5a      	adds	r2, r3, #1
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800285c:	3b01      	subs	r3, #1
 800285e:	b29a      	uxth	r2, r3
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002868:	b29b      	uxth	r3, r3
 800286a:	3b01      	subs	r3, #1
 800286c:	b29a      	uxth	r2, r3
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002872:	4b6c      	ldr	r3, [pc, #432]	@ (8002a24 <HAL_I2C_Master_Receive+0x4d0>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	08db      	lsrs	r3, r3, #3
 8002878:	4a6b      	ldr	r2, [pc, #428]	@ (8002a28 <HAL_I2C_Master_Receive+0x4d4>)
 800287a:	fba2 2303 	umull	r2, r3, r2, r3
 800287e:	0a1a      	lsrs	r2, r3, #8
 8002880:	4613      	mov	r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	4413      	add	r3, r2
 8002886:	00da      	lsls	r2, r3, #3
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800288c:	6a3b      	ldr	r3, [r7, #32]
 800288e:	3b01      	subs	r3, #1
 8002890:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002892:	6a3b      	ldr	r3, [r7, #32]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d118      	bne.n	80028ca <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2200      	movs	r2, #0
 800289c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2220      	movs	r2, #32
 80028a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b2:	f043 0220 	orr.w	r2, r3, #32
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80028ba:	b662      	cpsie	i
}
 80028bc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e0a6      	b.n	8002a18 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	695b      	ldr	r3, [r3, #20]
 80028d0:	f003 0304 	and.w	r3, r3, #4
 80028d4:	2b04      	cmp	r3, #4
 80028d6:	d1d9      	bne.n	800288c <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	691a      	ldr	r2, [r3, #16]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f2:	b2d2      	uxtb	r2, r2
 80028f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028fa:	1c5a      	adds	r2, r3, #1
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002904:	3b01      	subs	r3, #1
 8002906:	b29a      	uxth	r2, r3
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002910:	b29b      	uxth	r3, r3
 8002912:	3b01      	subs	r3, #1
 8002914:	b29a      	uxth	r2, r3
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800291a:	b662      	cpsie	i
}
 800291c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	691a      	ldr	r2, [r3, #16]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002928:	b2d2      	uxtb	r2, r2
 800292a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002930:	1c5a      	adds	r2, r3, #1
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800293a:	3b01      	subs	r3, #1
 800293c:	b29a      	uxth	r2, r3
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002946:	b29b      	uxth	r3, r3
 8002948:	3b01      	subs	r3, #1
 800294a:	b29a      	uxth	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002950:	e04e      	b.n	80029f0 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002952:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002954:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002956:	68f8      	ldr	r0, [r7, #12]
 8002958:	f000 fb62 	bl	8003020 <I2C_WaitOnRXNEFlagUntilTimeout>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e058      	b.n	8002a18 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	691a      	ldr	r2, [r3, #16]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002970:	b2d2      	uxtb	r2, r2
 8002972:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002978:	1c5a      	adds	r2, r3, #1
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002982:	3b01      	subs	r3, #1
 8002984:	b29a      	uxth	r2, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800298e:	b29b      	uxth	r3, r3
 8002990:	3b01      	subs	r3, #1
 8002992:	b29a      	uxth	r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	695b      	ldr	r3, [r3, #20]
 800299e:	f003 0304 	and.w	r3, r3, #4
 80029a2:	2b04      	cmp	r3, #4
 80029a4:	d124      	bne.n	80029f0 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029aa:	2b03      	cmp	r3, #3
 80029ac:	d107      	bne.n	80029be <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029bc:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	691a      	ldr	r2, [r3, #16]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c8:	b2d2      	uxtb	r2, r2
 80029ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d0:	1c5a      	adds	r2, r3, #1
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029da:	3b01      	subs	r3, #1
 80029dc:	b29a      	uxth	r2, r3
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	3b01      	subs	r3, #1
 80029ea:	b29a      	uxth	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f47f ae88 	bne.w	800270a <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2220      	movs	r2, #32
 80029fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002a12:	2300      	movs	r3, #0
 8002a14:	e000      	b.n	8002a18 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8002a16:	2302      	movs	r3, #2
  }
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3728      	adds	r7, #40	@ 0x28
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	00010004 	.word	0x00010004
 8002a24:	20000004 	.word	0x20000004
 8002a28:	14f8b589 	.word	0x14f8b589

08002a2c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b088      	sub	sp, #32
 8002a30:	af02      	add	r7, sp, #8
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	607a      	str	r2, [r7, #4]
 8002a36:	603b      	str	r3, [r7, #0]
 8002a38:	460b      	mov	r3, r1
 8002a3a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a40:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	2b08      	cmp	r3, #8
 8002a46:	d006      	beq.n	8002a56 <I2C_MasterRequestWrite+0x2a>
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d003      	beq.n	8002a56 <I2C_MasterRequestWrite+0x2a>
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002a54:	d108      	bne.n	8002a68 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a64:	601a      	str	r2, [r3, #0]
 8002a66:	e00b      	b.n	8002a80 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a6c:	2b12      	cmp	r3, #18
 8002a6e:	d107      	bne.n	8002a80 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a7e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	9300      	str	r3, [sp, #0]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002a8c:	68f8      	ldr	r0, [r7, #12]
 8002a8e:	f000 f91d 	bl	8002ccc <I2C_WaitOnFlagUntilTimeout>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d00d      	beq.n	8002ab4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aa2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002aa6:	d103      	bne.n	8002ab0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002aae:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e035      	b.n	8002b20 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	691b      	ldr	r3, [r3, #16]
 8002ab8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002abc:	d108      	bne.n	8002ad0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002abe:	897b      	ldrh	r3, [r7, #10]
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002acc:	611a      	str	r2, [r3, #16]
 8002ace:	e01b      	b.n	8002b08 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002ad0:	897b      	ldrh	r3, [r7, #10]
 8002ad2:	11db      	asrs	r3, r3, #7
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	f003 0306 	and.w	r3, r3, #6
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	f063 030f 	orn	r3, r3, #15
 8002ae0:	b2da      	uxtb	r2, r3
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	490e      	ldr	r1, [pc, #56]	@ (8002b28 <I2C_MasterRequestWrite+0xfc>)
 8002aee:	68f8      	ldr	r0, [r7, #12]
 8002af0:	f000 f966 	bl	8002dc0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e010      	b.n	8002b20 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002afe:	897b      	ldrh	r3, [r7, #10]
 8002b00:	b2da      	uxtb	r2, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	4907      	ldr	r1, [pc, #28]	@ (8002b2c <I2C_MasterRequestWrite+0x100>)
 8002b0e:	68f8      	ldr	r0, [r7, #12]
 8002b10:	f000 f956 	bl	8002dc0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e000      	b.n	8002b20 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3718      	adds	r7, #24
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	00010008 	.word	0x00010008
 8002b2c:	00010002 	.word	0x00010002

08002b30 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b088      	sub	sp, #32
 8002b34:	af02      	add	r7, sp, #8
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	607a      	str	r2, [r7, #4]
 8002b3a:	603b      	str	r3, [r7, #0]
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b44:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002b54:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	2b08      	cmp	r3, #8
 8002b5a:	d006      	beq.n	8002b6a <I2C_MasterRequestRead+0x3a>
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d003      	beq.n	8002b6a <I2C_MasterRequestRead+0x3a>
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002b68:	d108      	bne.n	8002b7c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b78:	601a      	str	r2, [r3, #0]
 8002b7a:	e00b      	b.n	8002b94 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b80:	2b11      	cmp	r3, #17
 8002b82:	d107      	bne.n	8002b94 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b92:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	9300      	str	r3, [sp, #0]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002ba0:	68f8      	ldr	r0, [r7, #12]
 8002ba2:	f000 f893 	bl	8002ccc <I2C_WaitOnFlagUntilTimeout>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d00d      	beq.n	8002bc8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002bba:	d103      	bne.n	8002bc4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002bc2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e079      	b.n	8002cbc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	691b      	ldr	r3, [r3, #16]
 8002bcc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002bd0:	d108      	bne.n	8002be4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002bd2:	897b      	ldrh	r3, [r7, #10]
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	f043 0301 	orr.w	r3, r3, #1
 8002bda:	b2da      	uxtb	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	611a      	str	r2, [r3, #16]
 8002be2:	e05f      	b.n	8002ca4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002be4:	897b      	ldrh	r3, [r7, #10]
 8002be6:	11db      	asrs	r3, r3, #7
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	f003 0306 	and.w	r3, r3, #6
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	f063 030f 	orn	r3, r3, #15
 8002bf4:	b2da      	uxtb	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	4930      	ldr	r1, [pc, #192]	@ (8002cc4 <I2C_MasterRequestRead+0x194>)
 8002c02:	68f8      	ldr	r0, [r7, #12]
 8002c04:	f000 f8dc 	bl	8002dc0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d001      	beq.n	8002c12 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e054      	b.n	8002cbc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002c12:	897b      	ldrh	r3, [r7, #10]
 8002c14:	b2da      	uxtb	r2, r3
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	4929      	ldr	r1, [pc, #164]	@ (8002cc8 <I2C_MasterRequestRead+0x198>)
 8002c22:	68f8      	ldr	r0, [r7, #12]
 8002c24:	f000 f8cc 	bl	8002dc0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e044      	b.n	8002cbc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c32:	2300      	movs	r3, #0
 8002c34:	613b      	str	r3, [r7, #16]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	695b      	ldr	r3, [r3, #20]
 8002c3c:	613b      	str	r3, [r7, #16]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	613b      	str	r3, [r7, #16]
 8002c46:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c56:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	9300      	str	r3, [sp, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002c64:	68f8      	ldr	r0, [r7, #12]
 8002c66:	f000 f831 	bl	8002ccc <I2C_WaitOnFlagUntilTimeout>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d00d      	beq.n	8002c8c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c7e:	d103      	bne.n	8002c88 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c86:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	e017      	b.n	8002cbc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002c8c:	897b      	ldrh	r3, [r7, #10]
 8002c8e:	11db      	asrs	r3, r3, #7
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	f003 0306 	and.w	r3, r3, #6
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	f063 030e 	orn	r3, r3, #14
 8002c9c:	b2da      	uxtb	r2, r3
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	4907      	ldr	r1, [pc, #28]	@ (8002cc8 <I2C_MasterRequestRead+0x198>)
 8002caa:	68f8      	ldr	r0, [r7, #12]
 8002cac:	f000 f888 	bl	8002dc0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d001      	beq.n	8002cba <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e000      	b.n	8002cbc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3718      	adds	r7, #24
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	00010008 	.word	0x00010008
 8002cc8:	00010002 	.word	0x00010002

08002ccc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	603b      	str	r3, [r7, #0]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cdc:	e048      	b.n	8002d70 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ce4:	d044      	beq.n	8002d70 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ce6:	f7fe ff81 	bl	8001bec <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	683a      	ldr	r2, [r7, #0]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d302      	bcc.n	8002cfc <I2C_WaitOnFlagUntilTimeout+0x30>
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d139      	bne.n	8002d70 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	0c1b      	lsrs	r3, r3, #16
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d10d      	bne.n	8002d22 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	695b      	ldr	r3, [r3, #20]
 8002d0c:	43da      	mvns	r2, r3
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	4013      	ands	r3, r2
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	bf0c      	ite	eq
 8002d18:	2301      	moveq	r3, #1
 8002d1a:	2300      	movne	r3, #0
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	461a      	mov	r2, r3
 8002d20:	e00c      	b.n	8002d3c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	699b      	ldr	r3, [r3, #24]
 8002d28:	43da      	mvns	r2, r3
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	bf0c      	ite	eq
 8002d34:	2301      	moveq	r3, #1
 8002d36:	2300      	movne	r3, #0
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	79fb      	ldrb	r3, [r7, #7]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d116      	bne.n	8002d70 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2200      	movs	r2, #0
 8002d46:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2220      	movs	r2, #32
 8002d4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d5c:	f043 0220 	orr.w	r2, r3, #32
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e023      	b.n	8002db8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	0c1b      	lsrs	r3, r3, #16
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d10d      	bne.n	8002d96 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	695b      	ldr	r3, [r3, #20]
 8002d80:	43da      	mvns	r2, r3
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	4013      	ands	r3, r2
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	bf0c      	ite	eq
 8002d8c:	2301      	moveq	r3, #1
 8002d8e:	2300      	movne	r3, #0
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	461a      	mov	r2, r3
 8002d94:	e00c      	b.n	8002db0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	699b      	ldr	r3, [r3, #24]
 8002d9c:	43da      	mvns	r2, r3
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	4013      	ands	r3, r2
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	bf0c      	ite	eq
 8002da8:	2301      	moveq	r3, #1
 8002daa:	2300      	movne	r3, #0
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	461a      	mov	r2, r3
 8002db0:	79fb      	ldrb	r3, [r7, #7]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d093      	beq.n	8002cde <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3710      	adds	r7, #16
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
 8002dcc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002dce:	e071      	b.n	8002eb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	695b      	ldr	r3, [r3, #20]
 8002dd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dde:	d123      	bne.n	8002e28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dee:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002df8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2220      	movs	r2, #32
 8002e04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e14:	f043 0204 	orr.w	r2, r3, #4
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e067      	b.n	8002ef8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e2e:	d041      	beq.n	8002eb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e30:	f7fe fedc 	bl	8001bec <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d302      	bcc.n	8002e46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d136      	bne.n	8002eb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	0c1b      	lsrs	r3, r3, #16
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d10c      	bne.n	8002e6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	695b      	ldr	r3, [r3, #20]
 8002e56:	43da      	mvns	r2, r3
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	bf14      	ite	ne
 8002e62:	2301      	movne	r3, #1
 8002e64:	2300      	moveq	r3, #0
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	e00b      	b.n	8002e82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	43da      	mvns	r2, r3
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	4013      	ands	r3, r2
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	bf14      	ite	ne
 8002e7c:	2301      	movne	r3, #1
 8002e7e:	2300      	moveq	r3, #0
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d016      	beq.n	8002eb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2220      	movs	r2, #32
 8002e90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea0:	f043 0220 	orr.w	r2, r3, #32
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e021      	b.n	8002ef8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	0c1b      	lsrs	r3, r3, #16
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d10c      	bne.n	8002ed8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	695b      	ldr	r3, [r3, #20]
 8002ec4:	43da      	mvns	r2, r3
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	bf14      	ite	ne
 8002ed0:	2301      	movne	r3, #1
 8002ed2:	2300      	moveq	r3, #0
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	e00b      	b.n	8002ef0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	43da      	mvns	r2, r3
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	bf14      	ite	ne
 8002eea:	2301      	movne	r3, #1
 8002eec:	2300      	moveq	r3, #0
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	f47f af6d 	bne.w	8002dd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3710      	adds	r7, #16
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f0c:	e034      	b.n	8002f78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f0e:	68f8      	ldr	r0, [r7, #12]
 8002f10:	f000 f8e3 	bl	80030da <I2C_IsAcknowledgeFailed>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e034      	b.n	8002f88 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f24:	d028      	beq.n	8002f78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f26:	f7fe fe61 	bl	8001bec <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	68ba      	ldr	r2, [r7, #8]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d302      	bcc.n	8002f3c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d11d      	bne.n	8002f78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	695b      	ldr	r3, [r3, #20]
 8002f42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f46:	2b80      	cmp	r3, #128	@ 0x80
 8002f48:	d016      	beq.n	8002f78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2220      	movs	r2, #32
 8002f54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f64:	f043 0220 	orr.w	r2, r3, #32
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e007      	b.n	8002f88 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	695b      	ldr	r3, [r3, #20]
 8002f7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f82:	2b80      	cmp	r3, #128	@ 0x80
 8002f84:	d1c3      	bne.n	8002f0e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3710      	adds	r7, #16
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f9c:	e034      	b.n	8003008 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f9e:	68f8      	ldr	r0, [r7, #12]
 8002fa0:	f000 f89b 	bl	80030da <I2C_IsAcknowledgeFailed>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e034      	b.n	8003018 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb4:	d028      	beq.n	8003008 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fb6:	f7fe fe19 	bl	8001bec <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	68ba      	ldr	r2, [r7, #8]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d302      	bcc.n	8002fcc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d11d      	bne.n	8003008 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	f003 0304 	and.w	r3, r3, #4
 8002fd6:	2b04      	cmp	r3, #4
 8002fd8:	d016      	beq.n	8003008 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2220      	movs	r2, #32
 8002fe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff4:	f043 0220 	orr.w	r2, r3, #32
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e007      	b.n	8003018 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	f003 0304 	and.w	r3, r3, #4
 8003012:	2b04      	cmp	r3, #4
 8003014:	d1c3      	bne.n	8002f9e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003016:	2300      	movs	r3, #0
}
 8003018:	4618      	mov	r0, r3
 800301a:	3710      	adds	r7, #16
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800302c:	e049      	b.n	80030c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	695b      	ldr	r3, [r3, #20]
 8003034:	f003 0310 	and.w	r3, r3, #16
 8003038:	2b10      	cmp	r3, #16
 800303a:	d119      	bne.n	8003070 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f06f 0210 	mvn.w	r2, #16
 8003044:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2200      	movs	r2, #0
 800304a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2220      	movs	r2, #32
 8003050:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e030      	b.n	80030d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003070:	f7fe fdbc 	bl	8001bec <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	68ba      	ldr	r2, [r7, #8]
 800307c:	429a      	cmp	r2, r3
 800307e:	d302      	bcc.n	8003086 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d11d      	bne.n	80030c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	695b      	ldr	r3, [r3, #20]
 800308c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003090:	2b40      	cmp	r3, #64	@ 0x40
 8003092:	d016      	beq.n	80030c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2220      	movs	r2, #32
 800309e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ae:	f043 0220 	orr.w	r2, r3, #32
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e007      	b.n	80030d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	695b      	ldr	r3, [r3, #20]
 80030c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030cc:	2b40      	cmp	r3, #64	@ 0x40
 80030ce:	d1ae      	bne.n	800302e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3710      	adds	r7, #16
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80030da:	b480      	push	{r7}
 80030dc:	b083      	sub	sp, #12
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	695b      	ldr	r3, [r3, #20]
 80030e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030f0:	d11b      	bne.n	800312a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80030fa:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2220      	movs	r2, #32
 8003106:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003116:	f043 0204 	orr.w	r2, r3, #4
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e000      	b.n	800312c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800312a:	2300      	movs	r3, #0
}
 800312c:	4618      	mov	r0, r3
 800312e:	370c      	adds	r7, #12
 8003130:	46bd      	mov	sp, r7
 8003132:	bc80      	pop	{r7}
 8003134:	4770      	bx	lr
	...

08003138 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003138:	b480      	push	{r7}
 800313a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800313c:	4b02      	ldr	r3, [pc, #8]	@ (8003148 <HAL_RCC_GetHCLKFreq+0x10>)
 800313e:	681b      	ldr	r3, [r3, #0]
}
 8003140:	4618      	mov	r0, r3
 8003142:	46bd      	mov	sp, r7
 8003144:	bc80      	pop	{r7}
 8003146:	4770      	bx	lr
 8003148:	20000004 	.word	0x20000004

0800314c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003150:	f7ff fff2 	bl	8003138 <HAL_RCC_GetHCLKFreq>
 8003154:	4602      	mov	r2, r0
 8003156:	4b05      	ldr	r3, [pc, #20]	@ (800316c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	0a1b      	lsrs	r3, r3, #8
 800315c:	f003 0307 	and.w	r3, r3, #7
 8003160:	4903      	ldr	r1, [pc, #12]	@ (8003170 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003162:	5ccb      	ldrb	r3, [r1, r3]
 8003164:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003168:	4618      	mov	r0, r3
 800316a:	bd80      	pop	{r7, pc}
 800316c:	40021000 	.word	0x40021000
 8003170:	08005f68 	.word	0x08005f68

08003174 <LL_GPIO_SetPinMode>:
{
 8003174:	b490      	push	{r4, r7}
 8003176:	b088      	sub	sp, #32
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	461a      	mov	r2, r3
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	0e1b      	lsrs	r3, r3, #24
 8003188:	4413      	add	r3, r2
 800318a:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 800318c:	6822      	ldr	r2, [r4, #0]
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	fa93 f3a3 	rbit	r3, r3
 8003198:	613b      	str	r3, [r7, #16]
  return result;
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	fab3 f383 	clz	r3, r3
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	210f      	movs	r1, #15
 80031a6:	fa01 f303 	lsl.w	r3, r1, r3
 80031aa:	43db      	mvns	r3, r3
 80031ac:	401a      	ands	r2, r3
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	fa93 f3a3 	rbit	r3, r3
 80031b8:	61bb      	str	r3, [r7, #24]
  return result;
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	fab3 f383 	clz	r3, r3
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	6879      	ldr	r1, [r7, #4]
 80031c6:	fa01 f303 	lsl.w	r3, r1, r3
 80031ca:	4313      	orrs	r3, r2
 80031cc:	6023      	str	r3, [r4, #0]
}
 80031ce:	bf00      	nop
 80031d0:	3720      	adds	r7, #32
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bc90      	pop	{r4, r7}
 80031d6:	4770      	bx	lr

080031d8 <LL_GPIO_SetPinSpeed>:
{
 80031d8:	b490      	push	{r4, r7}
 80031da:	b088      	sub	sp, #32
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	461a      	mov	r2, r3
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	0e1b      	lsrs	r3, r3, #24
 80031ec:	4413      	add	r3, r2
 80031ee:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 80031f0:	6822      	ldr	r2, [r4, #0]
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	fa93 f3a3 	rbit	r3, r3
 80031fc:	613b      	str	r3, [r7, #16]
  return result;
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	fab3 f383 	clz	r3, r3
 8003204:	b2db      	uxtb	r3, r3
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	2103      	movs	r1, #3
 800320a:	fa01 f303 	lsl.w	r3, r1, r3
 800320e:	43db      	mvns	r3, r3
 8003210:	401a      	ands	r2, r3
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	fa93 f3a3 	rbit	r3, r3
 800321c:	61bb      	str	r3, [r7, #24]
  return result;
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	fab3 f383 	clz	r3, r3
 8003224:	b2db      	uxtb	r3, r3
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	6879      	ldr	r1, [r7, #4]
 800322a:	fa01 f303 	lsl.w	r3, r1, r3
 800322e:	4313      	orrs	r3, r2
 8003230:	6023      	str	r3, [r4, #0]
}
 8003232:	bf00      	nop
 8003234:	3720      	adds	r7, #32
 8003236:	46bd      	mov	sp, r7
 8003238:	bc90      	pop	{r4, r7}
 800323a:	4770      	bx	lr

0800323c <LL_GPIO_SetPinOutputType>:
{
 800323c:	b490      	push	{r4, r7}
 800323e:	b088      	sub	sp, #32
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	461a      	mov	r2, r3
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	0e1b      	lsrs	r3, r3, #24
 8003250:	4413      	add	r3, r2
 8003252:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8003254:	6822      	ldr	r2, [r4, #0]
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	fa93 f3a3 	rbit	r3, r3
 8003260:	613b      	str	r3, [r7, #16]
  return result;
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	fab3 f383 	clz	r3, r3
 8003268:	b2db      	uxtb	r3, r3
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	2104      	movs	r1, #4
 800326e:	fa01 f303 	lsl.w	r3, r1, r3
 8003272:	43db      	mvns	r3, r3
 8003274:	401a      	ands	r2, r3
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	fa93 f3a3 	rbit	r3, r3
 8003280:	61bb      	str	r3, [r7, #24]
  return result;
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	fab3 f383 	clz	r3, r3
 8003288:	b2db      	uxtb	r3, r3
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	6879      	ldr	r1, [r7, #4]
 800328e:	fa01 f303 	lsl.w	r3, r1, r3
 8003292:	4313      	orrs	r3, r2
 8003294:	6023      	str	r3, [r4, #0]
}
 8003296:	bf00      	nop
 8003298:	3720      	adds	r7, #32
 800329a:	46bd      	mov	sp, r7
 800329c:	bc90      	pop	{r4, r7}
 800329e:	4770      	bx	lr

080032a0 <LL_GPIO_SetPinPull>:
{
 80032a0:	b480      	push	{r7}
 80032a2:	b087      	sub	sp, #28
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	68da      	ldr	r2, [r3, #12]
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	0a1b      	lsrs	r3, r3, #8
 80032b4:	43db      	mvns	r3, r3
 80032b6:	401a      	ands	r2, r3
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	0a1b      	lsrs	r3, r3, #8
 80032bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	fa93 f3a3 	rbit	r3, r3
 80032c4:	613b      	str	r3, [r7, #16]
  return result;
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	fab3 f383 	clz	r3, r3
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	4619      	mov	r1, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	408b      	lsls	r3, r1
 80032d4:	431a      	orrs	r2, r3
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	60da      	str	r2, [r3, #12]
}
 80032da:	bf00      	nop
 80032dc:	371c      	adds	r7, #28
 80032de:	46bd      	mov	sp, r7
 80032e0:	bc80      	pop	{r7}
 80032e2:	4770      	bx	lr

080032e4 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b088      	sub	sp, #32
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	021b      	lsls	r3, r3, #8
 80032f4:	0c1b      	lsrs	r3, r3, #16
 80032f6:	617b      	str	r3, [r7, #20]
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	fa93 f3a3 	rbit	r3, r3
 8003302:	60fb      	str	r3, [r7, #12]
  return result;
 8003304:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8003306:	fab3 f383 	clz	r3, r3
 800330a:	b2db      	uxtb	r3, r3
 800330c:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 800330e:	e044      	b.n	800339a <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8003310:	2201      	movs	r2, #1
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	409a      	lsls	r2, r3
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	4013      	ands	r3, r2
 800331a:	2b00      	cmp	r3, #0
 800331c:	d03a      	beq.n	8003394 <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	2b07      	cmp	r3, #7
 8003322:	d806      	bhi.n	8003332 <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 8003324:	f240 1201 	movw	r2, #257	@ 0x101
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	fa02 f303 	lsl.w	r3, r2, r3
 800332e:	61bb      	str	r3, [r7, #24]
 8003330:	e008      	b.n	8003344 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	3b08      	subs	r3, #8
 8003336:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 800333a:	fa02 f303 	lsl.w	r3, r2, r3
 800333e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003342:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	2b08      	cmp	r3, #8
 800334a:	d106      	bne.n	800335a <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	461a      	mov	r2, r3
 8003352:	69b9      	ldr	r1, [r7, #24]
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f7ff ffa3 	bl	80032a0 <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	461a      	mov	r2, r3
 8003360:	69b9      	ldr	r1, [r7, #24]
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f7ff ff06 	bl	8003174 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	2b01      	cmp	r3, #1
 800336e:	d003      	beq.n	8003378 <LL_GPIO_Init+0x94>
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	2b09      	cmp	r3, #9
 8003376:	d10d      	bne.n	8003394 <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	461a      	mov	r2, r3
 800337e:	69b9      	ldr	r1, [r7, #24]
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f7ff ff29 	bl	80031d8 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	461a      	mov	r2, r3
 800338c:	69b9      	ldr	r1, [r7, #24]
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f7ff ff54 	bl	800323c <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	3301      	adds	r3, #1
 8003398:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 800339a:	697a      	ldr	r2, [r7, #20]
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	fa22 f303 	lsr.w	r3, r2, r3
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1b4      	bne.n	8003310 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 80033a6:	2300      	movs	r3, #0
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3720      	adds	r7, #32
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80033b8:	4a03      	ldr	r2, [pc, #12]	@ (80033c8 <LL_SetSystemCoreClock+0x18>)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6013      	str	r3, [r2, #0]
}
 80033be:	bf00      	nop
 80033c0:	370c      	adds	r7, #12
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bc80      	pop	{r7}
 80033c6:	4770      	bx	lr
 80033c8:	20000004 	.word	0x20000004

080033cc <RING_BUFFER_Reset>:
 *
 * @param rb Pointer to the ring buffer to reset.
 */
void
RING_BUFFER_Reset (ring_buffer_t *rb)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  rb->u32_in    = 0;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	605a      	str	r2, [r3, #4]
  rb->u32_out   = 0;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	609a      	str	r2, [r3, #8]
  rb->u32_count = 0;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	60da      	str	r2, [r3, #12]
}
 80033e6:	bf00      	nop
 80033e8:	370c      	adds	r7, #12
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bc80      	pop	{r7}
 80033ee:	4770      	bx	lr

080033f0 <RING_BUFFER_Is_Empty>:
 * of elements in the ring buffer is 0, indicating that the buffer is empty, and
 * `false` otherwise.
 */
bool
RING_BUFFER_Is_Empty (ring_buffer_t *rb)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  return (rb->u32_count == 0);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	bf0c      	ite	eq
 8003400:	2301      	moveq	r3, #1
 8003402:	2300      	movne	r3, #0
 8003404:	b2db      	uxtb	r3, r3
}
 8003406:	4618      	mov	r0, r3
 8003408:	370c      	adds	r7, #12
 800340a:	46bd      	mov	sp, r7
 800340c:	bc80      	pop	{r7}
 800340e:	4770      	bx	lr

08003410 <RING_BUFFER_Is_Full>:
 * `true` or `false`, based on whether the count of elements in the ring buffer
 * `rb` is equal to the predefined size `RING_BUFFER_SIZE`.
 */
bool
RING_BUFFER_Is_Full (ring_buffer_t *rb)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  return (rb->u32_count == (uint32_t)RING_BUFFER_SIZE);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	2b80      	cmp	r3, #128	@ 0x80
 800341e:	bf0c      	ite	eq
 8003420:	2301      	moveq	r3, #1
 8003422:	2300      	movne	r3, #0
 8003424:	b2db      	uxtb	r3, r3
}
 8003426:	4618      	mov	r0, r3
 8003428:	370c      	adds	r7, #12
 800342a:	46bd      	mov	sp, r7
 800342c:	bc80      	pop	{r7}
 800342e:	4770      	bx	lr

08003430 <RING_BUFFER_Push_Data>:
 * represents the data element that needs to be added to the ring buffer. It is
 * of type `char`, which means it can store a single character (1 byte) of data.
 */
void
RING_BUFFER_Push_Data (ring_buffer_t *rb, char element)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	460b      	mov	r3, r1
 800343a:	70fb      	strb	r3, [r7, #3]
  if (RING_BUFFER_Is_Full(rb))
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f7ff ffe7 	bl	8003410 <RING_BUFFER_Is_Full>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d002      	beq.n	800344e <RING_BUFFER_Push_Data+0x1e>
  {
    RING_BUFFER_Reset(rb);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f7ff ffbf 	bl	80033cc <RING_BUFFER_Reset>
  }
  *(rb->u8_buffer + rb->u32_in) = element;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	4413      	add	r3, r2
 8003458:	78fa      	ldrb	r2, [r7, #3]
 800345a:	701a      	strb	r2, [r3, #0]

  rb->u32_in = (rb->u32_in + 1) & ((uint32_t)RING_BUFFER_SIZE - 1);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	3301      	adds	r3, #1
 8003462:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	605a      	str	r2, [r3, #4]
  rb->u32_count++;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	1c5a      	adds	r2, r3, #1
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	60da      	str	r2, [r3, #12]
}
 8003474:	bf00      	nop
 8003476:	3708      	adds	r7, #8
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <RING_BUFFER_Pull_Data>:
 * @return The function `RING_BUFFER_Pull_Data` is returning a `uint8_t` data value
 * from the ring buffer pointed to by the `rb` parameter.
 */
uint8_t
RING_BUFFER_Pull_Data (ring_buffer_t *rb)
{
 800347c:	b590      	push	{r4, r7, lr}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  if (RING_BUFFER_Is_Empty(rb))
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f7ff ffb3 	bl	80033f0 <RING_BUFFER_Is_Empty>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d001      	beq.n	8003494 <RING_BUFFER_Pull_Data+0x18>
  {
    return 0xFF;
 8003490:	23ff      	movs	r3, #255	@ 0xff
 8003492:	e013      	b.n	80034bc <RING_BUFFER_Pull_Data+0x40>
  }
  register uint8_t data = *(rb->u8_buffer + rb->u32_out);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	4413      	add	r3, r2
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	b2dc      	uxtb	r4, r3

  rb->u32_out = (rb->u32_out + 1) & ((uint32_t)RING_BUFFER_SIZE - 1);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	3301      	adds	r3, #1
 80034a8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	609a      	str	r2, [r3, #8]
  rb->u32_count--;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	1e5a      	subs	r2, r3, #1
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	60da      	str	r2, [r3, #12]

  return data;
 80034ba:	4623      	mov	r3, r4
}
 80034bc:	4618      	mov	r0, r3
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd90      	pop	{r4, r7, pc}

080034c4 <SCH_TASK_EnableTask>:
 * operation, which can be either `STS_ERROR` if the task index is out of range
 * or `STS_DONE` if the task is successfully enabled.
 */
status_t
SCH_TASK_EnableTask (SCH_TASK_HANDLE taskIndex)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b085      	sub	sp, #20
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	4603      	mov	r3, r0
 80034cc:	71fb      	strb	r3, [r7, #7]
  status_t status
 80034ce:	2301      	movs	r3, #1
 80034d0:	73fb      	strb	r3, [r7, #15]
      = STS_ERROR; /**< @brief Initialize status to indicate error. */

  if (taskIndex < s_NumOfTaskScheduled)
 80034d2:	4b0c      	ldr	r3, [pc, #48]	@ (8003504 <SCH_TASK_EnableTask+0x40>)
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	79fa      	ldrb	r2, [r7, #7]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d20c      	bcs.n	80034f6 <SCH_TASK_EnableTask+0x32>
  {
    /**< @brief Get Task Context */
    SCH_TaskContextTypedef *pTaskContext = &s_TaskContext[taskIndex];
 80034dc:	79fa      	ldrb	r2, [r7, #7]
 80034de:	4613      	mov	r3, r2
 80034e0:	005b      	lsls	r3, r3, #1
 80034e2:	4413      	add	r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	4a08      	ldr	r2, [pc, #32]	@ (8003508 <SCH_TASK_EnableTask+0x44>)
 80034e8:	4413      	add	r3, r2
 80034ea:	60bb      	str	r3, [r7, #8]
    pTaskContext->taskFlag               = TRUE;
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	2201      	movs	r2, #1
 80034f0:	805a      	strh	r2, [r3, #2]
    status                               = STS_DONE;
 80034f2:	2300      	movs	r3, #0
 80034f4:	73fb      	strb	r3, [r7, #15]
  }

  /**< @brief Return the status of the operation. */
  return status;
 80034f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3714      	adds	r7, #20
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bc80      	pop	{r7}
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	20000320 	.word	0x20000320
 8003508:	200002f0 	.word	0x200002f0

0800350c <SCH_RunSystemTickTimer>:
 * and timer ticks, checks if their periods have elapsed, and updates their
 * flags accordingly. Additionally, it decrements software timers.
 */
void
SCH_RunSystemTickTimer (void)
{
 800350c:	b480      	push	{r7}
 800350e:	b085      	sub	sp, #20
 8003510:	af00      	add	r7, sp, #0
  uint8_t                 timerIndex; /**< @brief Index variable for timers. */
  SCH_TimerContextTypedef
      *pTimerContext; /**< @brief Pointer to timer context. */

  /**< @brief Increment System Tick counter */
  s_SystemTick++;
 8003512:	4b42      	ldr	r3, [pc, #264]	@ (800361c <SCH_RunSystemTickTimer+0x110>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	3301      	adds	r3, #1
 8003518:	4a40      	ldr	r2, [pc, #256]	@ (800361c <SCH_RunSystemTickTimer+0x110>)
 800351a:	6013      	str	r3, [r2, #0]

  /**< @brief Check Status of periodic tasks */
  for (taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 800351c:	2300      	movs	r3, #0
 800351e:	73fb      	strb	r3, [r7, #15]
 8003520:	e025      	b.n	800356e <SCH_RunSystemTickTimer+0x62>
  {
    /**< @brief Get Task Context */
    pTaskContext = &s_TaskContext[taskIndex];
 8003522:	7bfa      	ldrb	r2, [r7, #15]
 8003524:	4613      	mov	r3, r2
 8003526:	005b      	lsls	r3, r3, #1
 8003528:	4413      	add	r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	4a3c      	ldr	r2, [pc, #240]	@ (8003620 <SCH_RunSystemTickTimer+0x114>)
 800352e:	4413      	add	r3, r2
 8003530:	607b      	str	r3, [r7, #4]

    /**< @brief Check type and State of the task */
    if ((SCH_TASK_SYNC == pTaskContext->pTaskProperty->taskType)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	2b01      	cmp	r3, #1
 800353a:	d115      	bne.n	8003568 <SCH_RunSystemTickTimer+0x5c>
        && (TASK_StateReady == pTaskContext->taskState))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	2b01      	cmp	r3, #1
 8003542:	d111      	bne.n	8003568 <SCH_RunSystemTickTimer+0x5c>
    {
      /**< @brief Increment task tick */
      pTaskContext->taskTick += 1;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	1c5a      	adds	r2, r3, #1
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	605a      	str	r2, [r3, #4]

      /**< @brief Check if we reached task period */
      if (pTaskContext->taskTick >= pTaskContext->pTaskProperty->taskPeriodInMS)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	6892      	ldr	r2, [r2, #8]
 8003556:	8852      	ldrh	r2, [r2, #2]
 8003558:	4293      	cmp	r3, r2
 800355a:	d305      	bcc.n	8003568 <SCH_RunSystemTickTimer+0x5c>
      {
        /**< @brief Reset Task tick timer */
        pTaskContext->taskTick = RESET;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	605a      	str	r2, [r3, #4]
        /**< @brief Enable Flag */
        pTaskContext->taskFlag = TRUE;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2201      	movs	r2, #1
 8003566:	805a      	strh	r2, [r3, #2]
  for (taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 8003568:	7bfb      	ldrb	r3, [r7, #15]
 800356a:	3301      	adds	r3, #1
 800356c:	73fb      	strb	r3, [r7, #15]
 800356e:	4b2d      	ldr	r3, [pc, #180]	@ (8003624 <SCH_RunSystemTickTimer+0x118>)
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	7bfa      	ldrb	r2, [r7, #15]
 8003574:	429a      	cmp	r2, r3
 8003576:	d3d4      	bcc.n	8003522 <SCH_RunSystemTickTimer+0x16>
      }
    }
  }

  /**< @brief Check Status of timers */
  for (timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 8003578:	2300      	movs	r3, #0
 800357a:	73bb      	strb	r3, [r7, #14]
 800357c:	e02b      	b.n	80035d6 <SCH_RunSystemTickTimer+0xca>
  {
    /**< @brief Get Timer Context */
    pTimerContext = &s_TimerContext[timerIndex];
 800357e:	7bba      	ldrb	r2, [r7, #14]
 8003580:	4613      	mov	r3, r2
 8003582:	005b      	lsls	r3, r3, #1
 8003584:	4413      	add	r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	4a27      	ldr	r2, [pc, #156]	@ (8003628 <SCH_RunSystemTickTimer+0x11c>)
 800358a:	4413      	add	r3, r2
 800358c:	60bb      	str	r3, [r7, #8]

    /**< @brief Check type and State of the timer */
    if (TIM_StateRun == pTimerContext->timerState)
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	2b01      	cmp	r3, #1
 8003594:	d11c      	bne.n	80035d0 <SCH_RunSystemTickTimer+0xc4>
    {
      /**< @brief Increment timer tick */
      pTimerContext->timerTick += 1;
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	1c5a      	adds	r2, r3, #1
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	605a      	str	r2, [r3, #4]

      /**< @brief Check if we reached timer period */
      if (pTimerContext->timerTick
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	685b      	ldr	r3, [r3, #4]
          >= pTimerContext->pTimerProperty->timerPeriodInMS)
 80035a4:	68ba      	ldr	r2, [r7, #8]
 80035a6:	6892      	ldr	r2, [r2, #8]
 80035a8:	8852      	ldrh	r2, [r2, #2]
      if (pTimerContext->timerTick
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d310      	bcc.n	80035d0 <SCH_RunSystemTickTimer+0xc4>
      {
        /**< @brief Enable Flag */
        pTimerContext->timerFlag = TRUE;
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	2201      	movs	r2, #1
 80035b2:	805a      	strh	r2, [r3, #2]
        /**< @brief Reset tick timer */
        pTimerContext->timerTick = RESET;
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	2200      	movs	r2, #0
 80035b8:	605a      	str	r2, [r3, #4]
        /**< @brief Check timer type and change the state */
        pTimerContext->timerState
            = (SCH_TIMER_PERIODIC == pTimerContext->pTimerProperty->timerType)
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	781b      	ldrb	r3, [r3, #0]
                  ? TIM_StateRun
                  : TIM_StateStop;
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	bf0c      	ite	eq
 80035c4:	2301      	moveq	r3, #1
 80035c6:	2300      	movne	r3, #0
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	461a      	mov	r2, r3
            = (SCH_TIMER_PERIODIC == pTimerContext->pTimerProperty->timerType)
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	701a      	strb	r2, [r3, #0]
  for (timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 80035d0:	7bbb      	ldrb	r3, [r7, #14]
 80035d2:	3301      	adds	r3, #1
 80035d4:	73bb      	strb	r3, [r7, #14]
 80035d6:	4b15      	ldr	r3, [pc, #84]	@ (800362c <SCH_RunSystemTickTimer+0x120>)
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	7bba      	ldrb	r2, [r7, #14]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d3ce      	bcc.n	800357e <SCH_RunSystemTickTimer+0x72>
      }
    }
  }

  /**< @brief Update software timers */
  for (timerIndex = 0; timerIndex < SCH_TIM_LAST; timerIndex++)
 80035e0:	2300      	movs	r3, #0
 80035e2:	73bb      	strb	r3, [r7, #14]
 80035e4:	e010      	b.n	8003608 <SCH_RunSystemTickTimer+0xfc>
  {
    if (s_SoftTimers[timerIndex] > 0)
 80035e6:	7bbb      	ldrb	r3, [r7, #14]
 80035e8:	4a11      	ldr	r2, [pc, #68]	@ (8003630 <SCH_RunSystemTickTimer+0x124>)
 80035ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d007      	beq.n	8003602 <SCH_RunSystemTickTimer+0xf6>
    {
      s_SoftTimers[timerIndex]--;
 80035f2:	7bbb      	ldrb	r3, [r7, #14]
 80035f4:	4a0e      	ldr	r2, [pc, #56]	@ (8003630 <SCH_RunSystemTickTimer+0x124>)
 80035f6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80035fa:	3a01      	subs	r2, #1
 80035fc:	490c      	ldr	r1, [pc, #48]	@ (8003630 <SCH_RunSystemTickTimer+0x124>)
 80035fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (timerIndex = 0; timerIndex < SCH_TIM_LAST; timerIndex++)
 8003602:	7bbb      	ldrb	r3, [r7, #14]
 8003604:	3301      	adds	r3, #1
 8003606:	73bb      	strb	r3, [r7, #14]
 8003608:	7bbb      	ldrb	r3, [r7, #14]
 800360a:	2b01      	cmp	r3, #1
 800360c:	d9eb      	bls.n	80035e6 <SCH_RunSystemTickTimer+0xda>
    }
  }
}
 800360e:	bf00      	nop
 8003610:	bf00      	nop
 8003612:	3714      	adds	r7, #20
 8003614:	46bd      	mov	sp, r7
 8003616:	bc80      	pop	{r7}
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	20000340 	.word	0x20000340
 8003620:	200002f0 	.word	0x200002f0
 8003624:	20000320 	.word	0x20000320
 8003628:	20000324 	.word	0x20000324
 800362c:	2000033c 	.word	0x2000033c
 8003630:	20000344 	.word	0x20000344

08003634 <malloc>:
 8003634:	4b02      	ldr	r3, [pc, #8]	@ (8003640 <malloc+0xc>)
 8003636:	4601      	mov	r1, r0
 8003638:	6818      	ldr	r0, [r3, #0]
 800363a:	f000 b825 	b.w	8003688 <_malloc_r>
 800363e:	bf00      	nop
 8003640:	20000188 	.word	0x20000188

08003644 <sbrk_aligned>:
 8003644:	b570      	push	{r4, r5, r6, lr}
 8003646:	4e0f      	ldr	r6, [pc, #60]	@ (8003684 <sbrk_aligned+0x40>)
 8003648:	460c      	mov	r4, r1
 800364a:	6831      	ldr	r1, [r6, #0]
 800364c:	4605      	mov	r5, r0
 800364e:	b911      	cbnz	r1, 8003656 <sbrk_aligned+0x12>
 8003650:	f000 fe48 	bl	80042e4 <_sbrk_r>
 8003654:	6030      	str	r0, [r6, #0]
 8003656:	4621      	mov	r1, r4
 8003658:	4628      	mov	r0, r5
 800365a:	f000 fe43 	bl	80042e4 <_sbrk_r>
 800365e:	1c43      	adds	r3, r0, #1
 8003660:	d103      	bne.n	800366a <sbrk_aligned+0x26>
 8003662:	f04f 34ff 	mov.w	r4, #4294967295
 8003666:	4620      	mov	r0, r4
 8003668:	bd70      	pop	{r4, r5, r6, pc}
 800366a:	1cc4      	adds	r4, r0, #3
 800366c:	f024 0403 	bic.w	r4, r4, #3
 8003670:	42a0      	cmp	r0, r4
 8003672:	d0f8      	beq.n	8003666 <sbrk_aligned+0x22>
 8003674:	1a21      	subs	r1, r4, r0
 8003676:	4628      	mov	r0, r5
 8003678:	f000 fe34 	bl	80042e4 <_sbrk_r>
 800367c:	3001      	adds	r0, #1
 800367e:	d1f2      	bne.n	8003666 <sbrk_aligned+0x22>
 8003680:	e7ef      	b.n	8003662 <sbrk_aligned+0x1e>
 8003682:	bf00      	nop
 8003684:	2000034c 	.word	0x2000034c

08003688 <_malloc_r>:
 8003688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800368c:	1ccd      	adds	r5, r1, #3
 800368e:	f025 0503 	bic.w	r5, r5, #3
 8003692:	3508      	adds	r5, #8
 8003694:	2d0c      	cmp	r5, #12
 8003696:	bf38      	it	cc
 8003698:	250c      	movcc	r5, #12
 800369a:	2d00      	cmp	r5, #0
 800369c:	4606      	mov	r6, r0
 800369e:	db01      	blt.n	80036a4 <_malloc_r+0x1c>
 80036a0:	42a9      	cmp	r1, r5
 80036a2:	d904      	bls.n	80036ae <_malloc_r+0x26>
 80036a4:	230c      	movs	r3, #12
 80036a6:	6033      	str	r3, [r6, #0]
 80036a8:	2000      	movs	r0, #0
 80036aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80036ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003784 <_malloc_r+0xfc>
 80036b2:	f000 f869 	bl	8003788 <__malloc_lock>
 80036b6:	f8d8 3000 	ldr.w	r3, [r8]
 80036ba:	461c      	mov	r4, r3
 80036bc:	bb44      	cbnz	r4, 8003710 <_malloc_r+0x88>
 80036be:	4629      	mov	r1, r5
 80036c0:	4630      	mov	r0, r6
 80036c2:	f7ff ffbf 	bl	8003644 <sbrk_aligned>
 80036c6:	1c43      	adds	r3, r0, #1
 80036c8:	4604      	mov	r4, r0
 80036ca:	d158      	bne.n	800377e <_malloc_r+0xf6>
 80036cc:	f8d8 4000 	ldr.w	r4, [r8]
 80036d0:	4627      	mov	r7, r4
 80036d2:	2f00      	cmp	r7, #0
 80036d4:	d143      	bne.n	800375e <_malloc_r+0xd6>
 80036d6:	2c00      	cmp	r4, #0
 80036d8:	d04b      	beq.n	8003772 <_malloc_r+0xea>
 80036da:	6823      	ldr	r3, [r4, #0]
 80036dc:	4639      	mov	r1, r7
 80036de:	4630      	mov	r0, r6
 80036e0:	eb04 0903 	add.w	r9, r4, r3
 80036e4:	f000 fdfe 	bl	80042e4 <_sbrk_r>
 80036e8:	4581      	cmp	r9, r0
 80036ea:	d142      	bne.n	8003772 <_malloc_r+0xea>
 80036ec:	6821      	ldr	r1, [r4, #0]
 80036ee:	4630      	mov	r0, r6
 80036f0:	1a6d      	subs	r5, r5, r1
 80036f2:	4629      	mov	r1, r5
 80036f4:	f7ff ffa6 	bl	8003644 <sbrk_aligned>
 80036f8:	3001      	adds	r0, #1
 80036fa:	d03a      	beq.n	8003772 <_malloc_r+0xea>
 80036fc:	6823      	ldr	r3, [r4, #0]
 80036fe:	442b      	add	r3, r5
 8003700:	6023      	str	r3, [r4, #0]
 8003702:	f8d8 3000 	ldr.w	r3, [r8]
 8003706:	685a      	ldr	r2, [r3, #4]
 8003708:	bb62      	cbnz	r2, 8003764 <_malloc_r+0xdc>
 800370a:	f8c8 7000 	str.w	r7, [r8]
 800370e:	e00f      	b.n	8003730 <_malloc_r+0xa8>
 8003710:	6822      	ldr	r2, [r4, #0]
 8003712:	1b52      	subs	r2, r2, r5
 8003714:	d420      	bmi.n	8003758 <_malloc_r+0xd0>
 8003716:	2a0b      	cmp	r2, #11
 8003718:	d917      	bls.n	800374a <_malloc_r+0xc2>
 800371a:	1961      	adds	r1, r4, r5
 800371c:	42a3      	cmp	r3, r4
 800371e:	6025      	str	r5, [r4, #0]
 8003720:	bf18      	it	ne
 8003722:	6059      	strne	r1, [r3, #4]
 8003724:	6863      	ldr	r3, [r4, #4]
 8003726:	bf08      	it	eq
 8003728:	f8c8 1000 	streq.w	r1, [r8]
 800372c:	5162      	str	r2, [r4, r5]
 800372e:	604b      	str	r3, [r1, #4]
 8003730:	4630      	mov	r0, r6
 8003732:	f000 f82f 	bl	8003794 <__malloc_unlock>
 8003736:	f104 000b 	add.w	r0, r4, #11
 800373a:	1d23      	adds	r3, r4, #4
 800373c:	f020 0007 	bic.w	r0, r0, #7
 8003740:	1ac2      	subs	r2, r0, r3
 8003742:	bf1c      	itt	ne
 8003744:	1a1b      	subne	r3, r3, r0
 8003746:	50a3      	strne	r3, [r4, r2]
 8003748:	e7af      	b.n	80036aa <_malloc_r+0x22>
 800374a:	6862      	ldr	r2, [r4, #4]
 800374c:	42a3      	cmp	r3, r4
 800374e:	bf0c      	ite	eq
 8003750:	f8c8 2000 	streq.w	r2, [r8]
 8003754:	605a      	strne	r2, [r3, #4]
 8003756:	e7eb      	b.n	8003730 <_malloc_r+0xa8>
 8003758:	4623      	mov	r3, r4
 800375a:	6864      	ldr	r4, [r4, #4]
 800375c:	e7ae      	b.n	80036bc <_malloc_r+0x34>
 800375e:	463c      	mov	r4, r7
 8003760:	687f      	ldr	r7, [r7, #4]
 8003762:	e7b6      	b.n	80036d2 <_malloc_r+0x4a>
 8003764:	461a      	mov	r2, r3
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	42a3      	cmp	r3, r4
 800376a:	d1fb      	bne.n	8003764 <_malloc_r+0xdc>
 800376c:	2300      	movs	r3, #0
 800376e:	6053      	str	r3, [r2, #4]
 8003770:	e7de      	b.n	8003730 <_malloc_r+0xa8>
 8003772:	230c      	movs	r3, #12
 8003774:	4630      	mov	r0, r6
 8003776:	6033      	str	r3, [r6, #0]
 8003778:	f000 f80c 	bl	8003794 <__malloc_unlock>
 800377c:	e794      	b.n	80036a8 <_malloc_r+0x20>
 800377e:	6005      	str	r5, [r0, #0]
 8003780:	e7d6      	b.n	8003730 <_malloc_r+0xa8>
 8003782:	bf00      	nop
 8003784:	20000350 	.word	0x20000350

08003788 <__malloc_lock>:
 8003788:	4801      	ldr	r0, [pc, #4]	@ (8003790 <__malloc_lock+0x8>)
 800378a:	f000 bdf8 	b.w	800437e <__retarget_lock_acquire_recursive>
 800378e:	bf00      	nop
 8003790:	20000494 	.word	0x20000494

08003794 <__malloc_unlock>:
 8003794:	4801      	ldr	r0, [pc, #4]	@ (800379c <__malloc_unlock+0x8>)
 8003796:	f000 bdf3 	b.w	8004380 <__retarget_lock_release_recursive>
 800379a:	bf00      	nop
 800379c:	20000494 	.word	0x20000494

080037a0 <__cvt>:
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037a6:	461d      	mov	r5, r3
 80037a8:	bfbb      	ittet	lt
 80037aa:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80037ae:	461d      	movlt	r5, r3
 80037b0:	2300      	movge	r3, #0
 80037b2:	232d      	movlt	r3, #45	@ 0x2d
 80037b4:	b088      	sub	sp, #32
 80037b6:	4614      	mov	r4, r2
 80037b8:	bfb8      	it	lt
 80037ba:	4614      	movlt	r4, r2
 80037bc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80037be:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80037c0:	7013      	strb	r3, [r2, #0]
 80037c2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80037c4:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80037c8:	f023 0820 	bic.w	r8, r3, #32
 80037cc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80037d0:	d005      	beq.n	80037de <__cvt+0x3e>
 80037d2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80037d6:	d100      	bne.n	80037da <__cvt+0x3a>
 80037d8:	3601      	adds	r6, #1
 80037da:	2302      	movs	r3, #2
 80037dc:	e000      	b.n	80037e0 <__cvt+0x40>
 80037de:	2303      	movs	r3, #3
 80037e0:	aa07      	add	r2, sp, #28
 80037e2:	9204      	str	r2, [sp, #16]
 80037e4:	aa06      	add	r2, sp, #24
 80037e6:	e9cd a202 	strd	sl, r2, [sp, #8]
 80037ea:	e9cd 3600 	strd	r3, r6, [sp]
 80037ee:	4622      	mov	r2, r4
 80037f0:	462b      	mov	r3, r5
 80037f2:	f000 fe6d 	bl	80044d0 <_dtoa_r>
 80037f6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80037fa:	4607      	mov	r7, r0
 80037fc:	d119      	bne.n	8003832 <__cvt+0x92>
 80037fe:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003800:	07db      	lsls	r3, r3, #31
 8003802:	d50e      	bpl.n	8003822 <__cvt+0x82>
 8003804:	eb00 0906 	add.w	r9, r0, r6
 8003808:	2200      	movs	r2, #0
 800380a:	2300      	movs	r3, #0
 800380c:	4620      	mov	r0, r4
 800380e:	4629      	mov	r1, r5
 8003810:	f7fd f8ca 	bl	80009a8 <__aeabi_dcmpeq>
 8003814:	b108      	cbz	r0, 800381a <__cvt+0x7a>
 8003816:	f8cd 901c 	str.w	r9, [sp, #28]
 800381a:	2230      	movs	r2, #48	@ 0x30
 800381c:	9b07      	ldr	r3, [sp, #28]
 800381e:	454b      	cmp	r3, r9
 8003820:	d31e      	bcc.n	8003860 <__cvt+0xc0>
 8003822:	4638      	mov	r0, r7
 8003824:	9b07      	ldr	r3, [sp, #28]
 8003826:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8003828:	1bdb      	subs	r3, r3, r7
 800382a:	6013      	str	r3, [r2, #0]
 800382c:	b008      	add	sp, #32
 800382e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003832:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003836:	eb00 0906 	add.w	r9, r0, r6
 800383a:	d1e5      	bne.n	8003808 <__cvt+0x68>
 800383c:	7803      	ldrb	r3, [r0, #0]
 800383e:	2b30      	cmp	r3, #48	@ 0x30
 8003840:	d10a      	bne.n	8003858 <__cvt+0xb8>
 8003842:	2200      	movs	r2, #0
 8003844:	2300      	movs	r3, #0
 8003846:	4620      	mov	r0, r4
 8003848:	4629      	mov	r1, r5
 800384a:	f7fd f8ad 	bl	80009a8 <__aeabi_dcmpeq>
 800384e:	b918      	cbnz	r0, 8003858 <__cvt+0xb8>
 8003850:	f1c6 0601 	rsb	r6, r6, #1
 8003854:	f8ca 6000 	str.w	r6, [sl]
 8003858:	f8da 3000 	ldr.w	r3, [sl]
 800385c:	4499      	add	r9, r3
 800385e:	e7d3      	b.n	8003808 <__cvt+0x68>
 8003860:	1c59      	adds	r1, r3, #1
 8003862:	9107      	str	r1, [sp, #28]
 8003864:	701a      	strb	r2, [r3, #0]
 8003866:	e7d9      	b.n	800381c <__cvt+0x7c>

08003868 <__exponent>:
 8003868:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800386a:	2900      	cmp	r1, #0
 800386c:	bfb6      	itet	lt
 800386e:	232d      	movlt	r3, #45	@ 0x2d
 8003870:	232b      	movge	r3, #43	@ 0x2b
 8003872:	4249      	neglt	r1, r1
 8003874:	2909      	cmp	r1, #9
 8003876:	7002      	strb	r2, [r0, #0]
 8003878:	7043      	strb	r3, [r0, #1]
 800387a:	dd29      	ble.n	80038d0 <__exponent+0x68>
 800387c:	f10d 0307 	add.w	r3, sp, #7
 8003880:	461d      	mov	r5, r3
 8003882:	270a      	movs	r7, #10
 8003884:	fbb1 f6f7 	udiv	r6, r1, r7
 8003888:	461a      	mov	r2, r3
 800388a:	fb07 1416 	mls	r4, r7, r6, r1
 800388e:	3430      	adds	r4, #48	@ 0x30
 8003890:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003894:	460c      	mov	r4, r1
 8003896:	2c63      	cmp	r4, #99	@ 0x63
 8003898:	4631      	mov	r1, r6
 800389a:	f103 33ff 	add.w	r3, r3, #4294967295
 800389e:	dcf1      	bgt.n	8003884 <__exponent+0x1c>
 80038a0:	3130      	adds	r1, #48	@ 0x30
 80038a2:	1e94      	subs	r4, r2, #2
 80038a4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80038a8:	4623      	mov	r3, r4
 80038aa:	1c41      	adds	r1, r0, #1
 80038ac:	42ab      	cmp	r3, r5
 80038ae:	d30a      	bcc.n	80038c6 <__exponent+0x5e>
 80038b0:	f10d 0309 	add.w	r3, sp, #9
 80038b4:	1a9b      	subs	r3, r3, r2
 80038b6:	42ac      	cmp	r4, r5
 80038b8:	bf88      	it	hi
 80038ba:	2300      	movhi	r3, #0
 80038bc:	3302      	adds	r3, #2
 80038be:	4403      	add	r3, r0
 80038c0:	1a18      	subs	r0, r3, r0
 80038c2:	b003      	add	sp, #12
 80038c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038c6:	f813 6b01 	ldrb.w	r6, [r3], #1
 80038ca:	f801 6f01 	strb.w	r6, [r1, #1]!
 80038ce:	e7ed      	b.n	80038ac <__exponent+0x44>
 80038d0:	2330      	movs	r3, #48	@ 0x30
 80038d2:	3130      	adds	r1, #48	@ 0x30
 80038d4:	7083      	strb	r3, [r0, #2]
 80038d6:	70c1      	strb	r1, [r0, #3]
 80038d8:	1d03      	adds	r3, r0, #4
 80038da:	e7f1      	b.n	80038c0 <__exponent+0x58>

080038dc <_printf_float>:
 80038dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038e0:	b091      	sub	sp, #68	@ 0x44
 80038e2:	460c      	mov	r4, r1
 80038e4:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80038e8:	4616      	mov	r6, r2
 80038ea:	461f      	mov	r7, r3
 80038ec:	4605      	mov	r5, r0
 80038ee:	f000 fcc1 	bl	8004274 <_localeconv_r>
 80038f2:	6803      	ldr	r3, [r0, #0]
 80038f4:	4618      	mov	r0, r3
 80038f6:	9308      	str	r3, [sp, #32]
 80038f8:	f7fc fc2a 	bl	8000150 <strlen>
 80038fc:	2300      	movs	r3, #0
 80038fe:	930e      	str	r3, [sp, #56]	@ 0x38
 8003900:	f8d8 3000 	ldr.w	r3, [r8]
 8003904:	9009      	str	r0, [sp, #36]	@ 0x24
 8003906:	3307      	adds	r3, #7
 8003908:	f023 0307 	bic.w	r3, r3, #7
 800390c:	f103 0208 	add.w	r2, r3, #8
 8003910:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003914:	f8d4 b000 	ldr.w	fp, [r4]
 8003918:	f8c8 2000 	str.w	r2, [r8]
 800391c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003920:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003924:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003926:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800392a:	f04f 32ff 	mov.w	r2, #4294967295
 800392e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003932:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003936:	4b9c      	ldr	r3, [pc, #624]	@ (8003ba8 <_printf_float+0x2cc>)
 8003938:	f7fd f868 	bl	8000a0c <__aeabi_dcmpun>
 800393c:	bb70      	cbnz	r0, 800399c <_printf_float+0xc0>
 800393e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003942:	f04f 32ff 	mov.w	r2, #4294967295
 8003946:	4b98      	ldr	r3, [pc, #608]	@ (8003ba8 <_printf_float+0x2cc>)
 8003948:	f7fd f842 	bl	80009d0 <__aeabi_dcmple>
 800394c:	bb30      	cbnz	r0, 800399c <_printf_float+0xc0>
 800394e:	2200      	movs	r2, #0
 8003950:	2300      	movs	r3, #0
 8003952:	4640      	mov	r0, r8
 8003954:	4649      	mov	r1, r9
 8003956:	f7fd f831 	bl	80009bc <__aeabi_dcmplt>
 800395a:	b110      	cbz	r0, 8003962 <_printf_float+0x86>
 800395c:	232d      	movs	r3, #45	@ 0x2d
 800395e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003962:	4a92      	ldr	r2, [pc, #584]	@ (8003bac <_printf_float+0x2d0>)
 8003964:	4b92      	ldr	r3, [pc, #584]	@ (8003bb0 <_printf_float+0x2d4>)
 8003966:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800396a:	bf94      	ite	ls
 800396c:	4690      	movls	r8, r2
 800396e:	4698      	movhi	r8, r3
 8003970:	2303      	movs	r3, #3
 8003972:	f04f 0900 	mov.w	r9, #0
 8003976:	6123      	str	r3, [r4, #16]
 8003978:	f02b 0304 	bic.w	r3, fp, #4
 800397c:	6023      	str	r3, [r4, #0]
 800397e:	4633      	mov	r3, r6
 8003980:	4621      	mov	r1, r4
 8003982:	4628      	mov	r0, r5
 8003984:	9700      	str	r7, [sp, #0]
 8003986:	aa0f      	add	r2, sp, #60	@ 0x3c
 8003988:	f000 f9d4 	bl	8003d34 <_printf_common>
 800398c:	3001      	adds	r0, #1
 800398e:	f040 8090 	bne.w	8003ab2 <_printf_float+0x1d6>
 8003992:	f04f 30ff 	mov.w	r0, #4294967295
 8003996:	b011      	add	sp, #68	@ 0x44
 8003998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800399c:	4642      	mov	r2, r8
 800399e:	464b      	mov	r3, r9
 80039a0:	4640      	mov	r0, r8
 80039a2:	4649      	mov	r1, r9
 80039a4:	f7fd f832 	bl	8000a0c <__aeabi_dcmpun>
 80039a8:	b148      	cbz	r0, 80039be <_printf_float+0xe2>
 80039aa:	464b      	mov	r3, r9
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	bfb8      	it	lt
 80039b0:	232d      	movlt	r3, #45	@ 0x2d
 80039b2:	4a80      	ldr	r2, [pc, #512]	@ (8003bb4 <_printf_float+0x2d8>)
 80039b4:	bfb8      	it	lt
 80039b6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80039ba:	4b7f      	ldr	r3, [pc, #508]	@ (8003bb8 <_printf_float+0x2dc>)
 80039bc:	e7d3      	b.n	8003966 <_printf_float+0x8a>
 80039be:	6863      	ldr	r3, [r4, #4]
 80039c0:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80039c4:	1c5a      	adds	r2, r3, #1
 80039c6:	d13f      	bne.n	8003a48 <_printf_float+0x16c>
 80039c8:	2306      	movs	r3, #6
 80039ca:	6063      	str	r3, [r4, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80039d2:	6023      	str	r3, [r4, #0]
 80039d4:	9206      	str	r2, [sp, #24]
 80039d6:	aa0e      	add	r2, sp, #56	@ 0x38
 80039d8:	e9cd a204 	strd	sl, r2, [sp, #16]
 80039dc:	aa0d      	add	r2, sp, #52	@ 0x34
 80039de:	9203      	str	r2, [sp, #12]
 80039e0:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80039e4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80039e8:	6863      	ldr	r3, [r4, #4]
 80039ea:	4642      	mov	r2, r8
 80039ec:	9300      	str	r3, [sp, #0]
 80039ee:	4628      	mov	r0, r5
 80039f0:	464b      	mov	r3, r9
 80039f2:	910a      	str	r1, [sp, #40]	@ 0x28
 80039f4:	f7ff fed4 	bl	80037a0 <__cvt>
 80039f8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80039fa:	4680      	mov	r8, r0
 80039fc:	2947      	cmp	r1, #71	@ 0x47
 80039fe:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8003a00:	d128      	bne.n	8003a54 <_printf_float+0x178>
 8003a02:	1cc8      	adds	r0, r1, #3
 8003a04:	db02      	blt.n	8003a0c <_printf_float+0x130>
 8003a06:	6863      	ldr	r3, [r4, #4]
 8003a08:	4299      	cmp	r1, r3
 8003a0a:	dd40      	ble.n	8003a8e <_printf_float+0x1b2>
 8003a0c:	f1aa 0a02 	sub.w	sl, sl, #2
 8003a10:	fa5f fa8a 	uxtb.w	sl, sl
 8003a14:	4652      	mov	r2, sl
 8003a16:	3901      	subs	r1, #1
 8003a18:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003a1c:	910d      	str	r1, [sp, #52]	@ 0x34
 8003a1e:	f7ff ff23 	bl	8003868 <__exponent>
 8003a22:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003a24:	4681      	mov	r9, r0
 8003a26:	1813      	adds	r3, r2, r0
 8003a28:	2a01      	cmp	r2, #1
 8003a2a:	6123      	str	r3, [r4, #16]
 8003a2c:	dc02      	bgt.n	8003a34 <_printf_float+0x158>
 8003a2e:	6822      	ldr	r2, [r4, #0]
 8003a30:	07d2      	lsls	r2, r2, #31
 8003a32:	d501      	bpl.n	8003a38 <_printf_float+0x15c>
 8003a34:	3301      	adds	r3, #1
 8003a36:	6123      	str	r3, [r4, #16]
 8003a38:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d09e      	beq.n	800397e <_printf_float+0xa2>
 8003a40:	232d      	movs	r3, #45	@ 0x2d
 8003a42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003a46:	e79a      	b.n	800397e <_printf_float+0xa2>
 8003a48:	2947      	cmp	r1, #71	@ 0x47
 8003a4a:	d1bf      	bne.n	80039cc <_printf_float+0xf0>
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d1bd      	bne.n	80039cc <_printf_float+0xf0>
 8003a50:	2301      	movs	r3, #1
 8003a52:	e7ba      	b.n	80039ca <_printf_float+0xee>
 8003a54:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003a58:	d9dc      	bls.n	8003a14 <_printf_float+0x138>
 8003a5a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003a5e:	d118      	bne.n	8003a92 <_printf_float+0x1b6>
 8003a60:	2900      	cmp	r1, #0
 8003a62:	6863      	ldr	r3, [r4, #4]
 8003a64:	dd0b      	ble.n	8003a7e <_printf_float+0x1a2>
 8003a66:	6121      	str	r1, [r4, #16]
 8003a68:	b913      	cbnz	r3, 8003a70 <_printf_float+0x194>
 8003a6a:	6822      	ldr	r2, [r4, #0]
 8003a6c:	07d0      	lsls	r0, r2, #31
 8003a6e:	d502      	bpl.n	8003a76 <_printf_float+0x19a>
 8003a70:	3301      	adds	r3, #1
 8003a72:	440b      	add	r3, r1
 8003a74:	6123      	str	r3, [r4, #16]
 8003a76:	f04f 0900 	mov.w	r9, #0
 8003a7a:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003a7c:	e7dc      	b.n	8003a38 <_printf_float+0x15c>
 8003a7e:	b913      	cbnz	r3, 8003a86 <_printf_float+0x1aa>
 8003a80:	6822      	ldr	r2, [r4, #0]
 8003a82:	07d2      	lsls	r2, r2, #31
 8003a84:	d501      	bpl.n	8003a8a <_printf_float+0x1ae>
 8003a86:	3302      	adds	r3, #2
 8003a88:	e7f4      	b.n	8003a74 <_printf_float+0x198>
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e7f2      	b.n	8003a74 <_printf_float+0x198>
 8003a8e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003a92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003a94:	4299      	cmp	r1, r3
 8003a96:	db05      	blt.n	8003aa4 <_printf_float+0x1c8>
 8003a98:	6823      	ldr	r3, [r4, #0]
 8003a9a:	6121      	str	r1, [r4, #16]
 8003a9c:	07d8      	lsls	r0, r3, #31
 8003a9e:	d5ea      	bpl.n	8003a76 <_printf_float+0x19a>
 8003aa0:	1c4b      	adds	r3, r1, #1
 8003aa2:	e7e7      	b.n	8003a74 <_printf_float+0x198>
 8003aa4:	2900      	cmp	r1, #0
 8003aa6:	bfcc      	ite	gt
 8003aa8:	2201      	movgt	r2, #1
 8003aaa:	f1c1 0202 	rsble	r2, r1, #2
 8003aae:	4413      	add	r3, r2
 8003ab0:	e7e0      	b.n	8003a74 <_printf_float+0x198>
 8003ab2:	6823      	ldr	r3, [r4, #0]
 8003ab4:	055a      	lsls	r2, r3, #21
 8003ab6:	d407      	bmi.n	8003ac8 <_printf_float+0x1ec>
 8003ab8:	6923      	ldr	r3, [r4, #16]
 8003aba:	4642      	mov	r2, r8
 8003abc:	4631      	mov	r1, r6
 8003abe:	4628      	mov	r0, r5
 8003ac0:	47b8      	blx	r7
 8003ac2:	3001      	adds	r0, #1
 8003ac4:	d12b      	bne.n	8003b1e <_printf_float+0x242>
 8003ac6:	e764      	b.n	8003992 <_printf_float+0xb6>
 8003ac8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003acc:	f240 80dc 	bls.w	8003c88 <_printf_float+0x3ac>
 8003ad0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	f7fc ff66 	bl	80009a8 <__aeabi_dcmpeq>
 8003adc:	2800      	cmp	r0, #0
 8003ade:	d033      	beq.n	8003b48 <_printf_float+0x26c>
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	4631      	mov	r1, r6
 8003ae4:	4628      	mov	r0, r5
 8003ae6:	4a35      	ldr	r2, [pc, #212]	@ (8003bbc <_printf_float+0x2e0>)
 8003ae8:	47b8      	blx	r7
 8003aea:	3001      	adds	r0, #1
 8003aec:	f43f af51 	beq.w	8003992 <_printf_float+0xb6>
 8003af0:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8003af4:	4543      	cmp	r3, r8
 8003af6:	db02      	blt.n	8003afe <_printf_float+0x222>
 8003af8:	6823      	ldr	r3, [r4, #0]
 8003afa:	07d8      	lsls	r0, r3, #31
 8003afc:	d50f      	bpl.n	8003b1e <_printf_float+0x242>
 8003afe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003b02:	4631      	mov	r1, r6
 8003b04:	4628      	mov	r0, r5
 8003b06:	47b8      	blx	r7
 8003b08:	3001      	adds	r0, #1
 8003b0a:	f43f af42 	beq.w	8003992 <_printf_float+0xb6>
 8003b0e:	f04f 0900 	mov.w	r9, #0
 8003b12:	f108 38ff 	add.w	r8, r8, #4294967295
 8003b16:	f104 0a1a 	add.w	sl, r4, #26
 8003b1a:	45c8      	cmp	r8, r9
 8003b1c:	dc09      	bgt.n	8003b32 <_printf_float+0x256>
 8003b1e:	6823      	ldr	r3, [r4, #0]
 8003b20:	079b      	lsls	r3, r3, #30
 8003b22:	f100 8102 	bmi.w	8003d2a <_printf_float+0x44e>
 8003b26:	68e0      	ldr	r0, [r4, #12]
 8003b28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003b2a:	4298      	cmp	r0, r3
 8003b2c:	bfb8      	it	lt
 8003b2e:	4618      	movlt	r0, r3
 8003b30:	e731      	b.n	8003996 <_printf_float+0xba>
 8003b32:	2301      	movs	r3, #1
 8003b34:	4652      	mov	r2, sl
 8003b36:	4631      	mov	r1, r6
 8003b38:	4628      	mov	r0, r5
 8003b3a:	47b8      	blx	r7
 8003b3c:	3001      	adds	r0, #1
 8003b3e:	f43f af28 	beq.w	8003992 <_printf_float+0xb6>
 8003b42:	f109 0901 	add.w	r9, r9, #1
 8003b46:	e7e8      	b.n	8003b1a <_printf_float+0x23e>
 8003b48:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	dc38      	bgt.n	8003bc0 <_printf_float+0x2e4>
 8003b4e:	2301      	movs	r3, #1
 8003b50:	4631      	mov	r1, r6
 8003b52:	4628      	mov	r0, r5
 8003b54:	4a19      	ldr	r2, [pc, #100]	@ (8003bbc <_printf_float+0x2e0>)
 8003b56:	47b8      	blx	r7
 8003b58:	3001      	adds	r0, #1
 8003b5a:	f43f af1a 	beq.w	8003992 <_printf_float+0xb6>
 8003b5e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8003b62:	ea59 0303 	orrs.w	r3, r9, r3
 8003b66:	d102      	bne.n	8003b6e <_printf_float+0x292>
 8003b68:	6823      	ldr	r3, [r4, #0]
 8003b6a:	07d9      	lsls	r1, r3, #31
 8003b6c:	d5d7      	bpl.n	8003b1e <_printf_float+0x242>
 8003b6e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003b72:	4631      	mov	r1, r6
 8003b74:	4628      	mov	r0, r5
 8003b76:	47b8      	blx	r7
 8003b78:	3001      	adds	r0, #1
 8003b7a:	f43f af0a 	beq.w	8003992 <_printf_float+0xb6>
 8003b7e:	f04f 0a00 	mov.w	sl, #0
 8003b82:	f104 0b1a 	add.w	fp, r4, #26
 8003b86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003b88:	425b      	negs	r3, r3
 8003b8a:	4553      	cmp	r3, sl
 8003b8c:	dc01      	bgt.n	8003b92 <_printf_float+0x2b6>
 8003b8e:	464b      	mov	r3, r9
 8003b90:	e793      	b.n	8003aba <_printf_float+0x1de>
 8003b92:	2301      	movs	r3, #1
 8003b94:	465a      	mov	r2, fp
 8003b96:	4631      	mov	r1, r6
 8003b98:	4628      	mov	r0, r5
 8003b9a:	47b8      	blx	r7
 8003b9c:	3001      	adds	r0, #1
 8003b9e:	f43f aef8 	beq.w	8003992 <_printf_float+0xb6>
 8003ba2:	f10a 0a01 	add.w	sl, sl, #1
 8003ba6:	e7ee      	b.n	8003b86 <_printf_float+0x2aa>
 8003ba8:	7fefffff 	.word	0x7fefffff
 8003bac:	08005f70 	.word	0x08005f70
 8003bb0:	08005f74 	.word	0x08005f74
 8003bb4:	08005f78 	.word	0x08005f78
 8003bb8:	08005f7c 	.word	0x08005f7c
 8003bbc:	08005f80 	.word	0x08005f80
 8003bc0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003bc2:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003bc6:	4553      	cmp	r3, sl
 8003bc8:	bfa8      	it	ge
 8003bca:	4653      	movge	r3, sl
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	4699      	mov	r9, r3
 8003bd0:	dc36      	bgt.n	8003c40 <_printf_float+0x364>
 8003bd2:	f04f 0b00 	mov.w	fp, #0
 8003bd6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003bda:	f104 021a 	add.w	r2, r4, #26
 8003bde:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003be0:	930a      	str	r3, [sp, #40]	@ 0x28
 8003be2:	eba3 0309 	sub.w	r3, r3, r9
 8003be6:	455b      	cmp	r3, fp
 8003be8:	dc31      	bgt.n	8003c4e <_printf_float+0x372>
 8003bea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003bec:	459a      	cmp	sl, r3
 8003bee:	dc3a      	bgt.n	8003c66 <_printf_float+0x38a>
 8003bf0:	6823      	ldr	r3, [r4, #0]
 8003bf2:	07da      	lsls	r2, r3, #31
 8003bf4:	d437      	bmi.n	8003c66 <_printf_float+0x38a>
 8003bf6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003bf8:	ebaa 0903 	sub.w	r9, sl, r3
 8003bfc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003bfe:	ebaa 0303 	sub.w	r3, sl, r3
 8003c02:	4599      	cmp	r9, r3
 8003c04:	bfa8      	it	ge
 8003c06:	4699      	movge	r9, r3
 8003c08:	f1b9 0f00 	cmp.w	r9, #0
 8003c0c:	dc33      	bgt.n	8003c76 <_printf_float+0x39a>
 8003c0e:	f04f 0800 	mov.w	r8, #0
 8003c12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003c16:	f104 0b1a 	add.w	fp, r4, #26
 8003c1a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003c1c:	ebaa 0303 	sub.w	r3, sl, r3
 8003c20:	eba3 0309 	sub.w	r3, r3, r9
 8003c24:	4543      	cmp	r3, r8
 8003c26:	f77f af7a 	ble.w	8003b1e <_printf_float+0x242>
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	465a      	mov	r2, fp
 8003c2e:	4631      	mov	r1, r6
 8003c30:	4628      	mov	r0, r5
 8003c32:	47b8      	blx	r7
 8003c34:	3001      	adds	r0, #1
 8003c36:	f43f aeac 	beq.w	8003992 <_printf_float+0xb6>
 8003c3a:	f108 0801 	add.w	r8, r8, #1
 8003c3e:	e7ec      	b.n	8003c1a <_printf_float+0x33e>
 8003c40:	4642      	mov	r2, r8
 8003c42:	4631      	mov	r1, r6
 8003c44:	4628      	mov	r0, r5
 8003c46:	47b8      	blx	r7
 8003c48:	3001      	adds	r0, #1
 8003c4a:	d1c2      	bne.n	8003bd2 <_printf_float+0x2f6>
 8003c4c:	e6a1      	b.n	8003992 <_printf_float+0xb6>
 8003c4e:	2301      	movs	r3, #1
 8003c50:	4631      	mov	r1, r6
 8003c52:	4628      	mov	r0, r5
 8003c54:	920a      	str	r2, [sp, #40]	@ 0x28
 8003c56:	47b8      	blx	r7
 8003c58:	3001      	adds	r0, #1
 8003c5a:	f43f ae9a 	beq.w	8003992 <_printf_float+0xb6>
 8003c5e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003c60:	f10b 0b01 	add.w	fp, fp, #1
 8003c64:	e7bb      	b.n	8003bde <_printf_float+0x302>
 8003c66:	4631      	mov	r1, r6
 8003c68:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003c6c:	4628      	mov	r0, r5
 8003c6e:	47b8      	blx	r7
 8003c70:	3001      	adds	r0, #1
 8003c72:	d1c0      	bne.n	8003bf6 <_printf_float+0x31a>
 8003c74:	e68d      	b.n	8003992 <_printf_float+0xb6>
 8003c76:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003c78:	464b      	mov	r3, r9
 8003c7a:	4631      	mov	r1, r6
 8003c7c:	4628      	mov	r0, r5
 8003c7e:	4442      	add	r2, r8
 8003c80:	47b8      	blx	r7
 8003c82:	3001      	adds	r0, #1
 8003c84:	d1c3      	bne.n	8003c0e <_printf_float+0x332>
 8003c86:	e684      	b.n	8003992 <_printf_float+0xb6>
 8003c88:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003c8c:	f1ba 0f01 	cmp.w	sl, #1
 8003c90:	dc01      	bgt.n	8003c96 <_printf_float+0x3ba>
 8003c92:	07db      	lsls	r3, r3, #31
 8003c94:	d536      	bpl.n	8003d04 <_printf_float+0x428>
 8003c96:	2301      	movs	r3, #1
 8003c98:	4642      	mov	r2, r8
 8003c9a:	4631      	mov	r1, r6
 8003c9c:	4628      	mov	r0, r5
 8003c9e:	47b8      	blx	r7
 8003ca0:	3001      	adds	r0, #1
 8003ca2:	f43f ae76 	beq.w	8003992 <_printf_float+0xb6>
 8003ca6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003caa:	4631      	mov	r1, r6
 8003cac:	4628      	mov	r0, r5
 8003cae:	47b8      	blx	r7
 8003cb0:	3001      	adds	r0, #1
 8003cb2:	f43f ae6e 	beq.w	8003992 <_printf_float+0xb6>
 8003cb6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003cba:	2200      	movs	r2, #0
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003cc2:	f7fc fe71 	bl	80009a8 <__aeabi_dcmpeq>
 8003cc6:	b9c0      	cbnz	r0, 8003cfa <_printf_float+0x41e>
 8003cc8:	4653      	mov	r3, sl
 8003cca:	f108 0201 	add.w	r2, r8, #1
 8003cce:	4631      	mov	r1, r6
 8003cd0:	4628      	mov	r0, r5
 8003cd2:	47b8      	blx	r7
 8003cd4:	3001      	adds	r0, #1
 8003cd6:	d10c      	bne.n	8003cf2 <_printf_float+0x416>
 8003cd8:	e65b      	b.n	8003992 <_printf_float+0xb6>
 8003cda:	2301      	movs	r3, #1
 8003cdc:	465a      	mov	r2, fp
 8003cde:	4631      	mov	r1, r6
 8003ce0:	4628      	mov	r0, r5
 8003ce2:	47b8      	blx	r7
 8003ce4:	3001      	adds	r0, #1
 8003ce6:	f43f ae54 	beq.w	8003992 <_printf_float+0xb6>
 8003cea:	f108 0801 	add.w	r8, r8, #1
 8003cee:	45d0      	cmp	r8, sl
 8003cf0:	dbf3      	blt.n	8003cda <_printf_float+0x3fe>
 8003cf2:	464b      	mov	r3, r9
 8003cf4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003cf8:	e6e0      	b.n	8003abc <_printf_float+0x1e0>
 8003cfa:	f04f 0800 	mov.w	r8, #0
 8003cfe:	f104 0b1a 	add.w	fp, r4, #26
 8003d02:	e7f4      	b.n	8003cee <_printf_float+0x412>
 8003d04:	2301      	movs	r3, #1
 8003d06:	4642      	mov	r2, r8
 8003d08:	e7e1      	b.n	8003cce <_printf_float+0x3f2>
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	464a      	mov	r2, r9
 8003d0e:	4631      	mov	r1, r6
 8003d10:	4628      	mov	r0, r5
 8003d12:	47b8      	blx	r7
 8003d14:	3001      	adds	r0, #1
 8003d16:	f43f ae3c 	beq.w	8003992 <_printf_float+0xb6>
 8003d1a:	f108 0801 	add.w	r8, r8, #1
 8003d1e:	68e3      	ldr	r3, [r4, #12]
 8003d20:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8003d22:	1a5b      	subs	r3, r3, r1
 8003d24:	4543      	cmp	r3, r8
 8003d26:	dcf0      	bgt.n	8003d0a <_printf_float+0x42e>
 8003d28:	e6fd      	b.n	8003b26 <_printf_float+0x24a>
 8003d2a:	f04f 0800 	mov.w	r8, #0
 8003d2e:	f104 0919 	add.w	r9, r4, #25
 8003d32:	e7f4      	b.n	8003d1e <_printf_float+0x442>

08003d34 <_printf_common>:
 8003d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d38:	4616      	mov	r6, r2
 8003d3a:	4698      	mov	r8, r3
 8003d3c:	688a      	ldr	r2, [r1, #8]
 8003d3e:	690b      	ldr	r3, [r1, #16]
 8003d40:	4607      	mov	r7, r0
 8003d42:	4293      	cmp	r3, r2
 8003d44:	bfb8      	it	lt
 8003d46:	4613      	movlt	r3, r2
 8003d48:	6033      	str	r3, [r6, #0]
 8003d4a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003d4e:	460c      	mov	r4, r1
 8003d50:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003d54:	b10a      	cbz	r2, 8003d5a <_printf_common+0x26>
 8003d56:	3301      	adds	r3, #1
 8003d58:	6033      	str	r3, [r6, #0]
 8003d5a:	6823      	ldr	r3, [r4, #0]
 8003d5c:	0699      	lsls	r1, r3, #26
 8003d5e:	bf42      	ittt	mi
 8003d60:	6833      	ldrmi	r3, [r6, #0]
 8003d62:	3302      	addmi	r3, #2
 8003d64:	6033      	strmi	r3, [r6, #0]
 8003d66:	6825      	ldr	r5, [r4, #0]
 8003d68:	f015 0506 	ands.w	r5, r5, #6
 8003d6c:	d106      	bne.n	8003d7c <_printf_common+0x48>
 8003d6e:	f104 0a19 	add.w	sl, r4, #25
 8003d72:	68e3      	ldr	r3, [r4, #12]
 8003d74:	6832      	ldr	r2, [r6, #0]
 8003d76:	1a9b      	subs	r3, r3, r2
 8003d78:	42ab      	cmp	r3, r5
 8003d7a:	dc2b      	bgt.n	8003dd4 <_printf_common+0xa0>
 8003d7c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003d80:	6822      	ldr	r2, [r4, #0]
 8003d82:	3b00      	subs	r3, #0
 8003d84:	bf18      	it	ne
 8003d86:	2301      	movne	r3, #1
 8003d88:	0692      	lsls	r2, r2, #26
 8003d8a:	d430      	bmi.n	8003dee <_printf_common+0xba>
 8003d8c:	4641      	mov	r1, r8
 8003d8e:	4638      	mov	r0, r7
 8003d90:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003d94:	47c8      	blx	r9
 8003d96:	3001      	adds	r0, #1
 8003d98:	d023      	beq.n	8003de2 <_printf_common+0xae>
 8003d9a:	6823      	ldr	r3, [r4, #0]
 8003d9c:	6922      	ldr	r2, [r4, #16]
 8003d9e:	f003 0306 	and.w	r3, r3, #6
 8003da2:	2b04      	cmp	r3, #4
 8003da4:	bf14      	ite	ne
 8003da6:	2500      	movne	r5, #0
 8003da8:	6833      	ldreq	r3, [r6, #0]
 8003daa:	f04f 0600 	mov.w	r6, #0
 8003dae:	bf08      	it	eq
 8003db0:	68e5      	ldreq	r5, [r4, #12]
 8003db2:	f104 041a 	add.w	r4, r4, #26
 8003db6:	bf08      	it	eq
 8003db8:	1aed      	subeq	r5, r5, r3
 8003dba:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003dbe:	bf08      	it	eq
 8003dc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	bfc4      	itt	gt
 8003dc8:	1a9b      	subgt	r3, r3, r2
 8003dca:	18ed      	addgt	r5, r5, r3
 8003dcc:	42b5      	cmp	r5, r6
 8003dce:	d11a      	bne.n	8003e06 <_printf_common+0xd2>
 8003dd0:	2000      	movs	r0, #0
 8003dd2:	e008      	b.n	8003de6 <_printf_common+0xb2>
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	4652      	mov	r2, sl
 8003dd8:	4641      	mov	r1, r8
 8003dda:	4638      	mov	r0, r7
 8003ddc:	47c8      	blx	r9
 8003dde:	3001      	adds	r0, #1
 8003de0:	d103      	bne.n	8003dea <_printf_common+0xb6>
 8003de2:	f04f 30ff 	mov.w	r0, #4294967295
 8003de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dea:	3501      	adds	r5, #1
 8003dec:	e7c1      	b.n	8003d72 <_printf_common+0x3e>
 8003dee:	2030      	movs	r0, #48	@ 0x30
 8003df0:	18e1      	adds	r1, r4, r3
 8003df2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003df6:	1c5a      	adds	r2, r3, #1
 8003df8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003dfc:	4422      	add	r2, r4
 8003dfe:	3302      	adds	r3, #2
 8003e00:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003e04:	e7c2      	b.n	8003d8c <_printf_common+0x58>
 8003e06:	2301      	movs	r3, #1
 8003e08:	4622      	mov	r2, r4
 8003e0a:	4641      	mov	r1, r8
 8003e0c:	4638      	mov	r0, r7
 8003e0e:	47c8      	blx	r9
 8003e10:	3001      	adds	r0, #1
 8003e12:	d0e6      	beq.n	8003de2 <_printf_common+0xae>
 8003e14:	3601      	adds	r6, #1
 8003e16:	e7d9      	b.n	8003dcc <_printf_common+0x98>

08003e18 <_printf_i>:
 8003e18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e1c:	7e0f      	ldrb	r7, [r1, #24]
 8003e1e:	4691      	mov	r9, r2
 8003e20:	2f78      	cmp	r7, #120	@ 0x78
 8003e22:	4680      	mov	r8, r0
 8003e24:	460c      	mov	r4, r1
 8003e26:	469a      	mov	sl, r3
 8003e28:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003e2a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003e2e:	d807      	bhi.n	8003e40 <_printf_i+0x28>
 8003e30:	2f62      	cmp	r7, #98	@ 0x62
 8003e32:	d80a      	bhi.n	8003e4a <_printf_i+0x32>
 8003e34:	2f00      	cmp	r7, #0
 8003e36:	f000 80d3 	beq.w	8003fe0 <_printf_i+0x1c8>
 8003e3a:	2f58      	cmp	r7, #88	@ 0x58
 8003e3c:	f000 80ba 	beq.w	8003fb4 <_printf_i+0x19c>
 8003e40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003e44:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003e48:	e03a      	b.n	8003ec0 <_printf_i+0xa8>
 8003e4a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003e4e:	2b15      	cmp	r3, #21
 8003e50:	d8f6      	bhi.n	8003e40 <_printf_i+0x28>
 8003e52:	a101      	add	r1, pc, #4	@ (adr r1, 8003e58 <_printf_i+0x40>)
 8003e54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003e58:	08003eb1 	.word	0x08003eb1
 8003e5c:	08003ec5 	.word	0x08003ec5
 8003e60:	08003e41 	.word	0x08003e41
 8003e64:	08003e41 	.word	0x08003e41
 8003e68:	08003e41 	.word	0x08003e41
 8003e6c:	08003e41 	.word	0x08003e41
 8003e70:	08003ec5 	.word	0x08003ec5
 8003e74:	08003e41 	.word	0x08003e41
 8003e78:	08003e41 	.word	0x08003e41
 8003e7c:	08003e41 	.word	0x08003e41
 8003e80:	08003e41 	.word	0x08003e41
 8003e84:	08003fc7 	.word	0x08003fc7
 8003e88:	08003eef 	.word	0x08003eef
 8003e8c:	08003f81 	.word	0x08003f81
 8003e90:	08003e41 	.word	0x08003e41
 8003e94:	08003e41 	.word	0x08003e41
 8003e98:	08003fe9 	.word	0x08003fe9
 8003e9c:	08003e41 	.word	0x08003e41
 8003ea0:	08003eef 	.word	0x08003eef
 8003ea4:	08003e41 	.word	0x08003e41
 8003ea8:	08003e41 	.word	0x08003e41
 8003eac:	08003f89 	.word	0x08003f89
 8003eb0:	6833      	ldr	r3, [r6, #0]
 8003eb2:	1d1a      	adds	r2, r3, #4
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	6032      	str	r2, [r6, #0]
 8003eb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003ebc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e09e      	b.n	8004002 <_printf_i+0x1ea>
 8003ec4:	6833      	ldr	r3, [r6, #0]
 8003ec6:	6820      	ldr	r0, [r4, #0]
 8003ec8:	1d19      	adds	r1, r3, #4
 8003eca:	6031      	str	r1, [r6, #0]
 8003ecc:	0606      	lsls	r6, r0, #24
 8003ece:	d501      	bpl.n	8003ed4 <_printf_i+0xbc>
 8003ed0:	681d      	ldr	r5, [r3, #0]
 8003ed2:	e003      	b.n	8003edc <_printf_i+0xc4>
 8003ed4:	0645      	lsls	r5, r0, #25
 8003ed6:	d5fb      	bpl.n	8003ed0 <_printf_i+0xb8>
 8003ed8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003edc:	2d00      	cmp	r5, #0
 8003ede:	da03      	bge.n	8003ee8 <_printf_i+0xd0>
 8003ee0:	232d      	movs	r3, #45	@ 0x2d
 8003ee2:	426d      	negs	r5, r5
 8003ee4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ee8:	230a      	movs	r3, #10
 8003eea:	4859      	ldr	r0, [pc, #356]	@ (8004050 <_printf_i+0x238>)
 8003eec:	e011      	b.n	8003f12 <_printf_i+0xfa>
 8003eee:	6821      	ldr	r1, [r4, #0]
 8003ef0:	6833      	ldr	r3, [r6, #0]
 8003ef2:	0608      	lsls	r0, r1, #24
 8003ef4:	f853 5b04 	ldr.w	r5, [r3], #4
 8003ef8:	d402      	bmi.n	8003f00 <_printf_i+0xe8>
 8003efa:	0649      	lsls	r1, r1, #25
 8003efc:	bf48      	it	mi
 8003efe:	b2ad      	uxthmi	r5, r5
 8003f00:	2f6f      	cmp	r7, #111	@ 0x6f
 8003f02:	6033      	str	r3, [r6, #0]
 8003f04:	bf14      	ite	ne
 8003f06:	230a      	movne	r3, #10
 8003f08:	2308      	moveq	r3, #8
 8003f0a:	4851      	ldr	r0, [pc, #324]	@ (8004050 <_printf_i+0x238>)
 8003f0c:	2100      	movs	r1, #0
 8003f0e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003f12:	6866      	ldr	r6, [r4, #4]
 8003f14:	2e00      	cmp	r6, #0
 8003f16:	bfa8      	it	ge
 8003f18:	6821      	ldrge	r1, [r4, #0]
 8003f1a:	60a6      	str	r6, [r4, #8]
 8003f1c:	bfa4      	itt	ge
 8003f1e:	f021 0104 	bicge.w	r1, r1, #4
 8003f22:	6021      	strge	r1, [r4, #0]
 8003f24:	b90d      	cbnz	r5, 8003f2a <_printf_i+0x112>
 8003f26:	2e00      	cmp	r6, #0
 8003f28:	d04b      	beq.n	8003fc2 <_printf_i+0x1aa>
 8003f2a:	4616      	mov	r6, r2
 8003f2c:	fbb5 f1f3 	udiv	r1, r5, r3
 8003f30:	fb03 5711 	mls	r7, r3, r1, r5
 8003f34:	5dc7      	ldrb	r7, [r0, r7]
 8003f36:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003f3a:	462f      	mov	r7, r5
 8003f3c:	42bb      	cmp	r3, r7
 8003f3e:	460d      	mov	r5, r1
 8003f40:	d9f4      	bls.n	8003f2c <_printf_i+0x114>
 8003f42:	2b08      	cmp	r3, #8
 8003f44:	d10b      	bne.n	8003f5e <_printf_i+0x146>
 8003f46:	6823      	ldr	r3, [r4, #0]
 8003f48:	07df      	lsls	r7, r3, #31
 8003f4a:	d508      	bpl.n	8003f5e <_printf_i+0x146>
 8003f4c:	6923      	ldr	r3, [r4, #16]
 8003f4e:	6861      	ldr	r1, [r4, #4]
 8003f50:	4299      	cmp	r1, r3
 8003f52:	bfde      	ittt	le
 8003f54:	2330      	movle	r3, #48	@ 0x30
 8003f56:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003f5a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003f5e:	1b92      	subs	r2, r2, r6
 8003f60:	6122      	str	r2, [r4, #16]
 8003f62:	464b      	mov	r3, r9
 8003f64:	4621      	mov	r1, r4
 8003f66:	4640      	mov	r0, r8
 8003f68:	f8cd a000 	str.w	sl, [sp]
 8003f6c:	aa03      	add	r2, sp, #12
 8003f6e:	f7ff fee1 	bl	8003d34 <_printf_common>
 8003f72:	3001      	adds	r0, #1
 8003f74:	d14a      	bne.n	800400c <_printf_i+0x1f4>
 8003f76:	f04f 30ff 	mov.w	r0, #4294967295
 8003f7a:	b004      	add	sp, #16
 8003f7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f80:	6823      	ldr	r3, [r4, #0]
 8003f82:	f043 0320 	orr.w	r3, r3, #32
 8003f86:	6023      	str	r3, [r4, #0]
 8003f88:	2778      	movs	r7, #120	@ 0x78
 8003f8a:	4832      	ldr	r0, [pc, #200]	@ (8004054 <_printf_i+0x23c>)
 8003f8c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003f90:	6823      	ldr	r3, [r4, #0]
 8003f92:	6831      	ldr	r1, [r6, #0]
 8003f94:	061f      	lsls	r7, r3, #24
 8003f96:	f851 5b04 	ldr.w	r5, [r1], #4
 8003f9a:	d402      	bmi.n	8003fa2 <_printf_i+0x18a>
 8003f9c:	065f      	lsls	r7, r3, #25
 8003f9e:	bf48      	it	mi
 8003fa0:	b2ad      	uxthmi	r5, r5
 8003fa2:	6031      	str	r1, [r6, #0]
 8003fa4:	07d9      	lsls	r1, r3, #31
 8003fa6:	bf44      	itt	mi
 8003fa8:	f043 0320 	orrmi.w	r3, r3, #32
 8003fac:	6023      	strmi	r3, [r4, #0]
 8003fae:	b11d      	cbz	r5, 8003fb8 <_printf_i+0x1a0>
 8003fb0:	2310      	movs	r3, #16
 8003fb2:	e7ab      	b.n	8003f0c <_printf_i+0xf4>
 8003fb4:	4826      	ldr	r0, [pc, #152]	@ (8004050 <_printf_i+0x238>)
 8003fb6:	e7e9      	b.n	8003f8c <_printf_i+0x174>
 8003fb8:	6823      	ldr	r3, [r4, #0]
 8003fba:	f023 0320 	bic.w	r3, r3, #32
 8003fbe:	6023      	str	r3, [r4, #0]
 8003fc0:	e7f6      	b.n	8003fb0 <_printf_i+0x198>
 8003fc2:	4616      	mov	r6, r2
 8003fc4:	e7bd      	b.n	8003f42 <_printf_i+0x12a>
 8003fc6:	6833      	ldr	r3, [r6, #0]
 8003fc8:	6825      	ldr	r5, [r4, #0]
 8003fca:	1d18      	adds	r0, r3, #4
 8003fcc:	6961      	ldr	r1, [r4, #20]
 8003fce:	6030      	str	r0, [r6, #0]
 8003fd0:	062e      	lsls	r6, r5, #24
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	d501      	bpl.n	8003fda <_printf_i+0x1c2>
 8003fd6:	6019      	str	r1, [r3, #0]
 8003fd8:	e002      	b.n	8003fe0 <_printf_i+0x1c8>
 8003fda:	0668      	lsls	r0, r5, #25
 8003fdc:	d5fb      	bpl.n	8003fd6 <_printf_i+0x1be>
 8003fde:	8019      	strh	r1, [r3, #0]
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	4616      	mov	r6, r2
 8003fe4:	6123      	str	r3, [r4, #16]
 8003fe6:	e7bc      	b.n	8003f62 <_printf_i+0x14a>
 8003fe8:	6833      	ldr	r3, [r6, #0]
 8003fea:	2100      	movs	r1, #0
 8003fec:	1d1a      	adds	r2, r3, #4
 8003fee:	6032      	str	r2, [r6, #0]
 8003ff0:	681e      	ldr	r6, [r3, #0]
 8003ff2:	6862      	ldr	r2, [r4, #4]
 8003ff4:	4630      	mov	r0, r6
 8003ff6:	f000 f9c4 	bl	8004382 <memchr>
 8003ffa:	b108      	cbz	r0, 8004000 <_printf_i+0x1e8>
 8003ffc:	1b80      	subs	r0, r0, r6
 8003ffe:	6060      	str	r0, [r4, #4]
 8004000:	6863      	ldr	r3, [r4, #4]
 8004002:	6123      	str	r3, [r4, #16]
 8004004:	2300      	movs	r3, #0
 8004006:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800400a:	e7aa      	b.n	8003f62 <_printf_i+0x14a>
 800400c:	4632      	mov	r2, r6
 800400e:	4649      	mov	r1, r9
 8004010:	4640      	mov	r0, r8
 8004012:	6923      	ldr	r3, [r4, #16]
 8004014:	47d0      	blx	sl
 8004016:	3001      	adds	r0, #1
 8004018:	d0ad      	beq.n	8003f76 <_printf_i+0x15e>
 800401a:	6823      	ldr	r3, [r4, #0]
 800401c:	079b      	lsls	r3, r3, #30
 800401e:	d413      	bmi.n	8004048 <_printf_i+0x230>
 8004020:	68e0      	ldr	r0, [r4, #12]
 8004022:	9b03      	ldr	r3, [sp, #12]
 8004024:	4298      	cmp	r0, r3
 8004026:	bfb8      	it	lt
 8004028:	4618      	movlt	r0, r3
 800402a:	e7a6      	b.n	8003f7a <_printf_i+0x162>
 800402c:	2301      	movs	r3, #1
 800402e:	4632      	mov	r2, r6
 8004030:	4649      	mov	r1, r9
 8004032:	4640      	mov	r0, r8
 8004034:	47d0      	blx	sl
 8004036:	3001      	adds	r0, #1
 8004038:	d09d      	beq.n	8003f76 <_printf_i+0x15e>
 800403a:	3501      	adds	r5, #1
 800403c:	68e3      	ldr	r3, [r4, #12]
 800403e:	9903      	ldr	r1, [sp, #12]
 8004040:	1a5b      	subs	r3, r3, r1
 8004042:	42ab      	cmp	r3, r5
 8004044:	dcf2      	bgt.n	800402c <_printf_i+0x214>
 8004046:	e7eb      	b.n	8004020 <_printf_i+0x208>
 8004048:	2500      	movs	r5, #0
 800404a:	f104 0619 	add.w	r6, r4, #25
 800404e:	e7f5      	b.n	800403c <_printf_i+0x224>
 8004050:	08005f82 	.word	0x08005f82
 8004054:	08005f93 	.word	0x08005f93

08004058 <std>:
 8004058:	2300      	movs	r3, #0
 800405a:	b510      	push	{r4, lr}
 800405c:	4604      	mov	r4, r0
 800405e:	e9c0 3300 	strd	r3, r3, [r0]
 8004062:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004066:	6083      	str	r3, [r0, #8]
 8004068:	8181      	strh	r1, [r0, #12]
 800406a:	6643      	str	r3, [r0, #100]	@ 0x64
 800406c:	81c2      	strh	r2, [r0, #14]
 800406e:	6183      	str	r3, [r0, #24]
 8004070:	4619      	mov	r1, r3
 8004072:	2208      	movs	r2, #8
 8004074:	305c      	adds	r0, #92	@ 0x5c
 8004076:	f000 f8f4 	bl	8004262 <memset>
 800407a:	4b0d      	ldr	r3, [pc, #52]	@ (80040b0 <std+0x58>)
 800407c:	6224      	str	r4, [r4, #32]
 800407e:	6263      	str	r3, [r4, #36]	@ 0x24
 8004080:	4b0c      	ldr	r3, [pc, #48]	@ (80040b4 <std+0x5c>)
 8004082:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004084:	4b0c      	ldr	r3, [pc, #48]	@ (80040b8 <std+0x60>)
 8004086:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004088:	4b0c      	ldr	r3, [pc, #48]	@ (80040bc <std+0x64>)
 800408a:	6323      	str	r3, [r4, #48]	@ 0x30
 800408c:	4b0c      	ldr	r3, [pc, #48]	@ (80040c0 <std+0x68>)
 800408e:	429c      	cmp	r4, r3
 8004090:	d006      	beq.n	80040a0 <std+0x48>
 8004092:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004096:	4294      	cmp	r4, r2
 8004098:	d002      	beq.n	80040a0 <std+0x48>
 800409a:	33d0      	adds	r3, #208	@ 0xd0
 800409c:	429c      	cmp	r4, r3
 800409e:	d105      	bne.n	80040ac <std+0x54>
 80040a0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80040a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80040a8:	f000 b968 	b.w	800437c <__retarget_lock_init_recursive>
 80040ac:	bd10      	pop	{r4, pc}
 80040ae:	bf00      	nop
 80040b0:	080041dd 	.word	0x080041dd
 80040b4:	080041ff 	.word	0x080041ff
 80040b8:	08004237 	.word	0x08004237
 80040bc:	0800425b 	.word	0x0800425b
 80040c0:	20000354 	.word	0x20000354

080040c4 <stdio_exit_handler>:
 80040c4:	4a02      	ldr	r2, [pc, #8]	@ (80040d0 <stdio_exit_handler+0xc>)
 80040c6:	4903      	ldr	r1, [pc, #12]	@ (80040d4 <stdio_exit_handler+0x10>)
 80040c8:	4803      	ldr	r0, [pc, #12]	@ (80040d8 <stdio_exit_handler+0x14>)
 80040ca:	f000 b869 	b.w	80041a0 <_fwalk_sglue>
 80040ce:	bf00      	nop
 80040d0:	20000010 	.word	0x20000010
 80040d4:	08005931 	.word	0x08005931
 80040d8:	2000018c 	.word	0x2000018c

080040dc <cleanup_stdio>:
 80040dc:	6841      	ldr	r1, [r0, #4]
 80040de:	4b0c      	ldr	r3, [pc, #48]	@ (8004110 <cleanup_stdio+0x34>)
 80040e0:	b510      	push	{r4, lr}
 80040e2:	4299      	cmp	r1, r3
 80040e4:	4604      	mov	r4, r0
 80040e6:	d001      	beq.n	80040ec <cleanup_stdio+0x10>
 80040e8:	f001 fc22 	bl	8005930 <_fflush_r>
 80040ec:	68a1      	ldr	r1, [r4, #8]
 80040ee:	4b09      	ldr	r3, [pc, #36]	@ (8004114 <cleanup_stdio+0x38>)
 80040f0:	4299      	cmp	r1, r3
 80040f2:	d002      	beq.n	80040fa <cleanup_stdio+0x1e>
 80040f4:	4620      	mov	r0, r4
 80040f6:	f001 fc1b 	bl	8005930 <_fflush_r>
 80040fa:	68e1      	ldr	r1, [r4, #12]
 80040fc:	4b06      	ldr	r3, [pc, #24]	@ (8004118 <cleanup_stdio+0x3c>)
 80040fe:	4299      	cmp	r1, r3
 8004100:	d004      	beq.n	800410c <cleanup_stdio+0x30>
 8004102:	4620      	mov	r0, r4
 8004104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004108:	f001 bc12 	b.w	8005930 <_fflush_r>
 800410c:	bd10      	pop	{r4, pc}
 800410e:	bf00      	nop
 8004110:	20000354 	.word	0x20000354
 8004114:	200003bc 	.word	0x200003bc
 8004118:	20000424 	.word	0x20000424

0800411c <global_stdio_init.part.0>:
 800411c:	b510      	push	{r4, lr}
 800411e:	4b0b      	ldr	r3, [pc, #44]	@ (800414c <global_stdio_init.part.0+0x30>)
 8004120:	4c0b      	ldr	r4, [pc, #44]	@ (8004150 <global_stdio_init.part.0+0x34>)
 8004122:	4a0c      	ldr	r2, [pc, #48]	@ (8004154 <global_stdio_init.part.0+0x38>)
 8004124:	4620      	mov	r0, r4
 8004126:	601a      	str	r2, [r3, #0]
 8004128:	2104      	movs	r1, #4
 800412a:	2200      	movs	r2, #0
 800412c:	f7ff ff94 	bl	8004058 <std>
 8004130:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004134:	2201      	movs	r2, #1
 8004136:	2109      	movs	r1, #9
 8004138:	f7ff ff8e 	bl	8004058 <std>
 800413c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004140:	2202      	movs	r2, #2
 8004142:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004146:	2112      	movs	r1, #18
 8004148:	f7ff bf86 	b.w	8004058 <std>
 800414c:	2000048c 	.word	0x2000048c
 8004150:	20000354 	.word	0x20000354
 8004154:	080040c5 	.word	0x080040c5

08004158 <__sfp_lock_acquire>:
 8004158:	4801      	ldr	r0, [pc, #4]	@ (8004160 <__sfp_lock_acquire+0x8>)
 800415a:	f000 b910 	b.w	800437e <__retarget_lock_acquire_recursive>
 800415e:	bf00      	nop
 8004160:	20000495 	.word	0x20000495

08004164 <__sfp_lock_release>:
 8004164:	4801      	ldr	r0, [pc, #4]	@ (800416c <__sfp_lock_release+0x8>)
 8004166:	f000 b90b 	b.w	8004380 <__retarget_lock_release_recursive>
 800416a:	bf00      	nop
 800416c:	20000495 	.word	0x20000495

08004170 <__sinit>:
 8004170:	b510      	push	{r4, lr}
 8004172:	4604      	mov	r4, r0
 8004174:	f7ff fff0 	bl	8004158 <__sfp_lock_acquire>
 8004178:	6a23      	ldr	r3, [r4, #32]
 800417a:	b11b      	cbz	r3, 8004184 <__sinit+0x14>
 800417c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004180:	f7ff bff0 	b.w	8004164 <__sfp_lock_release>
 8004184:	4b04      	ldr	r3, [pc, #16]	@ (8004198 <__sinit+0x28>)
 8004186:	6223      	str	r3, [r4, #32]
 8004188:	4b04      	ldr	r3, [pc, #16]	@ (800419c <__sinit+0x2c>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d1f5      	bne.n	800417c <__sinit+0xc>
 8004190:	f7ff ffc4 	bl	800411c <global_stdio_init.part.0>
 8004194:	e7f2      	b.n	800417c <__sinit+0xc>
 8004196:	bf00      	nop
 8004198:	080040dd 	.word	0x080040dd
 800419c:	2000048c 	.word	0x2000048c

080041a0 <_fwalk_sglue>:
 80041a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041a4:	4607      	mov	r7, r0
 80041a6:	4688      	mov	r8, r1
 80041a8:	4614      	mov	r4, r2
 80041aa:	2600      	movs	r6, #0
 80041ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80041b0:	f1b9 0901 	subs.w	r9, r9, #1
 80041b4:	d505      	bpl.n	80041c2 <_fwalk_sglue+0x22>
 80041b6:	6824      	ldr	r4, [r4, #0]
 80041b8:	2c00      	cmp	r4, #0
 80041ba:	d1f7      	bne.n	80041ac <_fwalk_sglue+0xc>
 80041bc:	4630      	mov	r0, r6
 80041be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041c2:	89ab      	ldrh	r3, [r5, #12]
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d907      	bls.n	80041d8 <_fwalk_sglue+0x38>
 80041c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80041cc:	3301      	adds	r3, #1
 80041ce:	d003      	beq.n	80041d8 <_fwalk_sglue+0x38>
 80041d0:	4629      	mov	r1, r5
 80041d2:	4638      	mov	r0, r7
 80041d4:	47c0      	blx	r8
 80041d6:	4306      	orrs	r6, r0
 80041d8:	3568      	adds	r5, #104	@ 0x68
 80041da:	e7e9      	b.n	80041b0 <_fwalk_sglue+0x10>

080041dc <__sread>:
 80041dc:	b510      	push	{r4, lr}
 80041de:	460c      	mov	r4, r1
 80041e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041e4:	f000 f86c 	bl	80042c0 <_read_r>
 80041e8:	2800      	cmp	r0, #0
 80041ea:	bfab      	itete	ge
 80041ec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80041ee:	89a3      	ldrhlt	r3, [r4, #12]
 80041f0:	181b      	addge	r3, r3, r0
 80041f2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80041f6:	bfac      	ite	ge
 80041f8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80041fa:	81a3      	strhlt	r3, [r4, #12]
 80041fc:	bd10      	pop	{r4, pc}

080041fe <__swrite>:
 80041fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004202:	461f      	mov	r7, r3
 8004204:	898b      	ldrh	r3, [r1, #12]
 8004206:	4605      	mov	r5, r0
 8004208:	05db      	lsls	r3, r3, #23
 800420a:	460c      	mov	r4, r1
 800420c:	4616      	mov	r6, r2
 800420e:	d505      	bpl.n	800421c <__swrite+0x1e>
 8004210:	2302      	movs	r3, #2
 8004212:	2200      	movs	r2, #0
 8004214:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004218:	f000 f840 	bl	800429c <_lseek_r>
 800421c:	89a3      	ldrh	r3, [r4, #12]
 800421e:	4632      	mov	r2, r6
 8004220:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004224:	81a3      	strh	r3, [r4, #12]
 8004226:	4628      	mov	r0, r5
 8004228:	463b      	mov	r3, r7
 800422a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800422e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004232:	f000 b867 	b.w	8004304 <_write_r>

08004236 <__sseek>:
 8004236:	b510      	push	{r4, lr}
 8004238:	460c      	mov	r4, r1
 800423a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800423e:	f000 f82d 	bl	800429c <_lseek_r>
 8004242:	1c43      	adds	r3, r0, #1
 8004244:	89a3      	ldrh	r3, [r4, #12]
 8004246:	bf15      	itete	ne
 8004248:	6560      	strne	r0, [r4, #84]	@ 0x54
 800424a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800424e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004252:	81a3      	strheq	r3, [r4, #12]
 8004254:	bf18      	it	ne
 8004256:	81a3      	strhne	r3, [r4, #12]
 8004258:	bd10      	pop	{r4, pc}

0800425a <__sclose>:
 800425a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800425e:	f000 b80d 	b.w	800427c <_close_r>

08004262 <memset>:
 8004262:	4603      	mov	r3, r0
 8004264:	4402      	add	r2, r0
 8004266:	4293      	cmp	r3, r2
 8004268:	d100      	bne.n	800426c <memset+0xa>
 800426a:	4770      	bx	lr
 800426c:	f803 1b01 	strb.w	r1, [r3], #1
 8004270:	e7f9      	b.n	8004266 <memset+0x4>
	...

08004274 <_localeconv_r>:
 8004274:	4800      	ldr	r0, [pc, #0]	@ (8004278 <_localeconv_r+0x4>)
 8004276:	4770      	bx	lr
 8004278:	2000010c 	.word	0x2000010c

0800427c <_close_r>:
 800427c:	b538      	push	{r3, r4, r5, lr}
 800427e:	2300      	movs	r3, #0
 8004280:	4d05      	ldr	r5, [pc, #20]	@ (8004298 <_close_r+0x1c>)
 8004282:	4604      	mov	r4, r0
 8004284:	4608      	mov	r0, r1
 8004286:	602b      	str	r3, [r5, #0]
 8004288:	f7fd fb27 	bl	80018da <_close>
 800428c:	1c43      	adds	r3, r0, #1
 800428e:	d102      	bne.n	8004296 <_close_r+0x1a>
 8004290:	682b      	ldr	r3, [r5, #0]
 8004292:	b103      	cbz	r3, 8004296 <_close_r+0x1a>
 8004294:	6023      	str	r3, [r4, #0]
 8004296:	bd38      	pop	{r3, r4, r5, pc}
 8004298:	20000490 	.word	0x20000490

0800429c <_lseek_r>:
 800429c:	b538      	push	{r3, r4, r5, lr}
 800429e:	4604      	mov	r4, r0
 80042a0:	4608      	mov	r0, r1
 80042a2:	4611      	mov	r1, r2
 80042a4:	2200      	movs	r2, #0
 80042a6:	4d05      	ldr	r5, [pc, #20]	@ (80042bc <_lseek_r+0x20>)
 80042a8:	602a      	str	r2, [r5, #0]
 80042aa:	461a      	mov	r2, r3
 80042ac:	f7fd fb39 	bl	8001922 <_lseek>
 80042b0:	1c43      	adds	r3, r0, #1
 80042b2:	d102      	bne.n	80042ba <_lseek_r+0x1e>
 80042b4:	682b      	ldr	r3, [r5, #0]
 80042b6:	b103      	cbz	r3, 80042ba <_lseek_r+0x1e>
 80042b8:	6023      	str	r3, [r4, #0]
 80042ba:	bd38      	pop	{r3, r4, r5, pc}
 80042bc:	20000490 	.word	0x20000490

080042c0 <_read_r>:
 80042c0:	b538      	push	{r3, r4, r5, lr}
 80042c2:	4604      	mov	r4, r0
 80042c4:	4608      	mov	r0, r1
 80042c6:	4611      	mov	r1, r2
 80042c8:	2200      	movs	r2, #0
 80042ca:	4d05      	ldr	r5, [pc, #20]	@ (80042e0 <_read_r+0x20>)
 80042cc:	602a      	str	r2, [r5, #0]
 80042ce:	461a      	mov	r2, r3
 80042d0:	f7fd faca 	bl	8001868 <_read>
 80042d4:	1c43      	adds	r3, r0, #1
 80042d6:	d102      	bne.n	80042de <_read_r+0x1e>
 80042d8:	682b      	ldr	r3, [r5, #0]
 80042da:	b103      	cbz	r3, 80042de <_read_r+0x1e>
 80042dc:	6023      	str	r3, [r4, #0]
 80042de:	bd38      	pop	{r3, r4, r5, pc}
 80042e0:	20000490 	.word	0x20000490

080042e4 <_sbrk_r>:
 80042e4:	b538      	push	{r3, r4, r5, lr}
 80042e6:	2300      	movs	r3, #0
 80042e8:	4d05      	ldr	r5, [pc, #20]	@ (8004300 <_sbrk_r+0x1c>)
 80042ea:	4604      	mov	r4, r0
 80042ec:	4608      	mov	r0, r1
 80042ee:	602b      	str	r3, [r5, #0]
 80042f0:	f7fd fb24 	bl	800193c <_sbrk>
 80042f4:	1c43      	adds	r3, r0, #1
 80042f6:	d102      	bne.n	80042fe <_sbrk_r+0x1a>
 80042f8:	682b      	ldr	r3, [r5, #0]
 80042fa:	b103      	cbz	r3, 80042fe <_sbrk_r+0x1a>
 80042fc:	6023      	str	r3, [r4, #0]
 80042fe:	bd38      	pop	{r3, r4, r5, pc}
 8004300:	20000490 	.word	0x20000490

08004304 <_write_r>:
 8004304:	b538      	push	{r3, r4, r5, lr}
 8004306:	4604      	mov	r4, r0
 8004308:	4608      	mov	r0, r1
 800430a:	4611      	mov	r1, r2
 800430c:	2200      	movs	r2, #0
 800430e:	4d05      	ldr	r5, [pc, #20]	@ (8004324 <_write_r+0x20>)
 8004310:	602a      	str	r2, [r5, #0]
 8004312:	461a      	mov	r2, r3
 8004314:	f7fd fac5 	bl	80018a2 <_write>
 8004318:	1c43      	adds	r3, r0, #1
 800431a:	d102      	bne.n	8004322 <_write_r+0x1e>
 800431c:	682b      	ldr	r3, [r5, #0]
 800431e:	b103      	cbz	r3, 8004322 <_write_r+0x1e>
 8004320:	6023      	str	r3, [r4, #0]
 8004322:	bd38      	pop	{r3, r4, r5, pc}
 8004324:	20000490 	.word	0x20000490

08004328 <__errno>:
 8004328:	4b01      	ldr	r3, [pc, #4]	@ (8004330 <__errno+0x8>)
 800432a:	6818      	ldr	r0, [r3, #0]
 800432c:	4770      	bx	lr
 800432e:	bf00      	nop
 8004330:	20000188 	.word	0x20000188

08004334 <__libc_init_array>:
 8004334:	b570      	push	{r4, r5, r6, lr}
 8004336:	2600      	movs	r6, #0
 8004338:	4d0c      	ldr	r5, [pc, #48]	@ (800436c <__libc_init_array+0x38>)
 800433a:	4c0d      	ldr	r4, [pc, #52]	@ (8004370 <__libc_init_array+0x3c>)
 800433c:	1b64      	subs	r4, r4, r5
 800433e:	10a4      	asrs	r4, r4, #2
 8004340:	42a6      	cmp	r6, r4
 8004342:	d109      	bne.n	8004358 <__libc_init_array+0x24>
 8004344:	f001 fe02 	bl	8005f4c <_init>
 8004348:	2600      	movs	r6, #0
 800434a:	4d0a      	ldr	r5, [pc, #40]	@ (8004374 <__libc_init_array+0x40>)
 800434c:	4c0a      	ldr	r4, [pc, #40]	@ (8004378 <__libc_init_array+0x44>)
 800434e:	1b64      	subs	r4, r4, r5
 8004350:	10a4      	asrs	r4, r4, #2
 8004352:	42a6      	cmp	r6, r4
 8004354:	d105      	bne.n	8004362 <__libc_init_array+0x2e>
 8004356:	bd70      	pop	{r4, r5, r6, pc}
 8004358:	f855 3b04 	ldr.w	r3, [r5], #4
 800435c:	4798      	blx	r3
 800435e:	3601      	adds	r6, #1
 8004360:	e7ee      	b.n	8004340 <__libc_init_array+0xc>
 8004362:	f855 3b04 	ldr.w	r3, [r5], #4
 8004366:	4798      	blx	r3
 8004368:	3601      	adds	r6, #1
 800436a:	e7f2      	b.n	8004352 <__libc_init_array+0x1e>
 800436c:	080062e8 	.word	0x080062e8
 8004370:	080062e8 	.word	0x080062e8
 8004374:	080062e8 	.word	0x080062e8
 8004378:	080062ec 	.word	0x080062ec

0800437c <__retarget_lock_init_recursive>:
 800437c:	4770      	bx	lr

0800437e <__retarget_lock_acquire_recursive>:
 800437e:	4770      	bx	lr

08004380 <__retarget_lock_release_recursive>:
 8004380:	4770      	bx	lr

08004382 <memchr>:
 8004382:	4603      	mov	r3, r0
 8004384:	b510      	push	{r4, lr}
 8004386:	b2c9      	uxtb	r1, r1
 8004388:	4402      	add	r2, r0
 800438a:	4293      	cmp	r3, r2
 800438c:	4618      	mov	r0, r3
 800438e:	d101      	bne.n	8004394 <memchr+0x12>
 8004390:	2000      	movs	r0, #0
 8004392:	e003      	b.n	800439c <memchr+0x1a>
 8004394:	7804      	ldrb	r4, [r0, #0]
 8004396:	3301      	adds	r3, #1
 8004398:	428c      	cmp	r4, r1
 800439a:	d1f6      	bne.n	800438a <memchr+0x8>
 800439c:	bd10      	pop	{r4, pc}

0800439e <memcpy>:
 800439e:	440a      	add	r2, r1
 80043a0:	4291      	cmp	r1, r2
 80043a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80043a6:	d100      	bne.n	80043aa <memcpy+0xc>
 80043a8:	4770      	bx	lr
 80043aa:	b510      	push	{r4, lr}
 80043ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80043b0:	4291      	cmp	r1, r2
 80043b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80043b6:	d1f9      	bne.n	80043ac <memcpy+0xe>
 80043b8:	bd10      	pop	{r4, pc}

080043ba <quorem>:
 80043ba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043be:	6903      	ldr	r3, [r0, #16]
 80043c0:	690c      	ldr	r4, [r1, #16]
 80043c2:	4607      	mov	r7, r0
 80043c4:	42a3      	cmp	r3, r4
 80043c6:	db7e      	blt.n	80044c6 <quorem+0x10c>
 80043c8:	3c01      	subs	r4, #1
 80043ca:	00a3      	lsls	r3, r4, #2
 80043cc:	f100 0514 	add.w	r5, r0, #20
 80043d0:	f101 0814 	add.w	r8, r1, #20
 80043d4:	9300      	str	r3, [sp, #0]
 80043d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80043da:	9301      	str	r3, [sp, #4]
 80043dc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80043e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80043e4:	3301      	adds	r3, #1
 80043e6:	429a      	cmp	r2, r3
 80043e8:	fbb2 f6f3 	udiv	r6, r2, r3
 80043ec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80043f0:	d32e      	bcc.n	8004450 <quorem+0x96>
 80043f2:	f04f 0a00 	mov.w	sl, #0
 80043f6:	46c4      	mov	ip, r8
 80043f8:	46ae      	mov	lr, r5
 80043fa:	46d3      	mov	fp, sl
 80043fc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004400:	b298      	uxth	r0, r3
 8004402:	fb06 a000 	mla	r0, r6, r0, sl
 8004406:	0c1b      	lsrs	r3, r3, #16
 8004408:	0c02      	lsrs	r2, r0, #16
 800440a:	fb06 2303 	mla	r3, r6, r3, r2
 800440e:	f8de 2000 	ldr.w	r2, [lr]
 8004412:	b280      	uxth	r0, r0
 8004414:	b292      	uxth	r2, r2
 8004416:	1a12      	subs	r2, r2, r0
 8004418:	445a      	add	r2, fp
 800441a:	f8de 0000 	ldr.w	r0, [lr]
 800441e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004422:	b29b      	uxth	r3, r3
 8004424:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004428:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800442c:	b292      	uxth	r2, r2
 800442e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004432:	45e1      	cmp	r9, ip
 8004434:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004438:	f84e 2b04 	str.w	r2, [lr], #4
 800443c:	d2de      	bcs.n	80043fc <quorem+0x42>
 800443e:	9b00      	ldr	r3, [sp, #0]
 8004440:	58eb      	ldr	r3, [r5, r3]
 8004442:	b92b      	cbnz	r3, 8004450 <quorem+0x96>
 8004444:	9b01      	ldr	r3, [sp, #4]
 8004446:	3b04      	subs	r3, #4
 8004448:	429d      	cmp	r5, r3
 800444a:	461a      	mov	r2, r3
 800444c:	d32f      	bcc.n	80044ae <quorem+0xf4>
 800444e:	613c      	str	r4, [r7, #16]
 8004450:	4638      	mov	r0, r7
 8004452:	f001 f8d7 	bl	8005604 <__mcmp>
 8004456:	2800      	cmp	r0, #0
 8004458:	db25      	blt.n	80044a6 <quorem+0xec>
 800445a:	4629      	mov	r1, r5
 800445c:	2000      	movs	r0, #0
 800445e:	f858 2b04 	ldr.w	r2, [r8], #4
 8004462:	f8d1 c000 	ldr.w	ip, [r1]
 8004466:	fa1f fe82 	uxth.w	lr, r2
 800446a:	fa1f f38c 	uxth.w	r3, ip
 800446e:	eba3 030e 	sub.w	r3, r3, lr
 8004472:	4403      	add	r3, r0
 8004474:	0c12      	lsrs	r2, r2, #16
 8004476:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800447a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800447e:	b29b      	uxth	r3, r3
 8004480:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004484:	45c1      	cmp	r9, r8
 8004486:	ea4f 4022 	mov.w	r0, r2, asr #16
 800448a:	f841 3b04 	str.w	r3, [r1], #4
 800448e:	d2e6      	bcs.n	800445e <quorem+0xa4>
 8004490:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004494:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004498:	b922      	cbnz	r2, 80044a4 <quorem+0xea>
 800449a:	3b04      	subs	r3, #4
 800449c:	429d      	cmp	r5, r3
 800449e:	461a      	mov	r2, r3
 80044a0:	d30b      	bcc.n	80044ba <quorem+0x100>
 80044a2:	613c      	str	r4, [r7, #16]
 80044a4:	3601      	adds	r6, #1
 80044a6:	4630      	mov	r0, r6
 80044a8:	b003      	add	sp, #12
 80044aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044ae:	6812      	ldr	r2, [r2, #0]
 80044b0:	3b04      	subs	r3, #4
 80044b2:	2a00      	cmp	r2, #0
 80044b4:	d1cb      	bne.n	800444e <quorem+0x94>
 80044b6:	3c01      	subs	r4, #1
 80044b8:	e7c6      	b.n	8004448 <quorem+0x8e>
 80044ba:	6812      	ldr	r2, [r2, #0]
 80044bc:	3b04      	subs	r3, #4
 80044be:	2a00      	cmp	r2, #0
 80044c0:	d1ef      	bne.n	80044a2 <quorem+0xe8>
 80044c2:	3c01      	subs	r4, #1
 80044c4:	e7ea      	b.n	800449c <quorem+0xe2>
 80044c6:	2000      	movs	r0, #0
 80044c8:	e7ee      	b.n	80044a8 <quorem+0xee>
 80044ca:	0000      	movs	r0, r0
 80044cc:	0000      	movs	r0, r0
	...

080044d0 <_dtoa_r>:
 80044d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044d4:	4614      	mov	r4, r2
 80044d6:	461d      	mov	r5, r3
 80044d8:	69c7      	ldr	r7, [r0, #28]
 80044da:	b097      	sub	sp, #92	@ 0x5c
 80044dc:	4683      	mov	fp, r0
 80044de:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80044e2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80044e4:	b97f      	cbnz	r7, 8004506 <_dtoa_r+0x36>
 80044e6:	2010      	movs	r0, #16
 80044e8:	f7ff f8a4 	bl	8003634 <malloc>
 80044ec:	4602      	mov	r2, r0
 80044ee:	f8cb 001c 	str.w	r0, [fp, #28]
 80044f2:	b920      	cbnz	r0, 80044fe <_dtoa_r+0x2e>
 80044f4:	21ef      	movs	r1, #239	@ 0xef
 80044f6:	4ba8      	ldr	r3, [pc, #672]	@ (8004798 <_dtoa_r+0x2c8>)
 80044f8:	48a8      	ldr	r0, [pc, #672]	@ (800479c <_dtoa_r+0x2cc>)
 80044fa:	f001 fa41 	bl	8005980 <__assert_func>
 80044fe:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004502:	6007      	str	r7, [r0, #0]
 8004504:	60c7      	str	r7, [r0, #12]
 8004506:	f8db 301c 	ldr.w	r3, [fp, #28]
 800450a:	6819      	ldr	r1, [r3, #0]
 800450c:	b159      	cbz	r1, 8004526 <_dtoa_r+0x56>
 800450e:	685a      	ldr	r2, [r3, #4]
 8004510:	2301      	movs	r3, #1
 8004512:	4093      	lsls	r3, r2
 8004514:	604a      	str	r2, [r1, #4]
 8004516:	608b      	str	r3, [r1, #8]
 8004518:	4658      	mov	r0, fp
 800451a:	f000 fe3b 	bl	8005194 <_Bfree>
 800451e:	2200      	movs	r2, #0
 8004520:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004524:	601a      	str	r2, [r3, #0]
 8004526:	1e2b      	subs	r3, r5, #0
 8004528:	bfaf      	iteee	ge
 800452a:	2300      	movge	r3, #0
 800452c:	2201      	movlt	r2, #1
 800452e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004532:	9303      	strlt	r3, [sp, #12]
 8004534:	bfa8      	it	ge
 8004536:	6033      	strge	r3, [r6, #0]
 8004538:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800453c:	4b98      	ldr	r3, [pc, #608]	@ (80047a0 <_dtoa_r+0x2d0>)
 800453e:	bfb8      	it	lt
 8004540:	6032      	strlt	r2, [r6, #0]
 8004542:	ea33 0308 	bics.w	r3, r3, r8
 8004546:	d112      	bne.n	800456e <_dtoa_r+0x9e>
 8004548:	f242 730f 	movw	r3, #9999	@ 0x270f
 800454c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800454e:	6013      	str	r3, [r2, #0]
 8004550:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8004554:	4323      	orrs	r3, r4
 8004556:	f000 8550 	beq.w	8004ffa <_dtoa_r+0xb2a>
 800455a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800455c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 80047a4 <_dtoa_r+0x2d4>
 8004560:	2b00      	cmp	r3, #0
 8004562:	f000 8552 	beq.w	800500a <_dtoa_r+0xb3a>
 8004566:	f10a 0303 	add.w	r3, sl, #3
 800456a:	f000 bd4c 	b.w	8005006 <_dtoa_r+0xb36>
 800456e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004572:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8004576:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800457a:	2200      	movs	r2, #0
 800457c:	2300      	movs	r3, #0
 800457e:	f7fc fa13 	bl	80009a8 <__aeabi_dcmpeq>
 8004582:	4607      	mov	r7, r0
 8004584:	b158      	cbz	r0, 800459e <_dtoa_r+0xce>
 8004586:	2301      	movs	r3, #1
 8004588:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800458a:	6013      	str	r3, [r2, #0]
 800458c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800458e:	b113      	cbz	r3, 8004596 <_dtoa_r+0xc6>
 8004590:	4b85      	ldr	r3, [pc, #532]	@ (80047a8 <_dtoa_r+0x2d8>)
 8004592:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004594:	6013      	str	r3, [r2, #0]
 8004596:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80047ac <_dtoa_r+0x2dc>
 800459a:	f000 bd36 	b.w	800500a <_dtoa_r+0xb3a>
 800459e:	ab14      	add	r3, sp, #80	@ 0x50
 80045a0:	9301      	str	r3, [sp, #4]
 80045a2:	ab15      	add	r3, sp, #84	@ 0x54
 80045a4:	9300      	str	r3, [sp, #0]
 80045a6:	4658      	mov	r0, fp
 80045a8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80045ac:	f001 f8da 	bl	8005764 <__d2b>
 80045b0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80045b4:	4681      	mov	r9, r0
 80045b6:	2e00      	cmp	r6, #0
 80045b8:	d077      	beq.n	80046aa <_dtoa_r+0x1da>
 80045ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80045be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80045c0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80045c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045c8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80045cc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80045d0:	9712      	str	r7, [sp, #72]	@ 0x48
 80045d2:	4619      	mov	r1, r3
 80045d4:	2200      	movs	r2, #0
 80045d6:	4b76      	ldr	r3, [pc, #472]	@ (80047b0 <_dtoa_r+0x2e0>)
 80045d8:	f7fb fdc6 	bl	8000168 <__aeabi_dsub>
 80045dc:	a368      	add	r3, pc, #416	@ (adr r3, 8004780 <_dtoa_r+0x2b0>)
 80045de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e2:	f7fb ff79 	bl	80004d8 <__aeabi_dmul>
 80045e6:	a368      	add	r3, pc, #416	@ (adr r3, 8004788 <_dtoa_r+0x2b8>)
 80045e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ec:	f7fb fdbe 	bl	800016c <__adddf3>
 80045f0:	4604      	mov	r4, r0
 80045f2:	4630      	mov	r0, r6
 80045f4:	460d      	mov	r5, r1
 80045f6:	f7fb ff05 	bl	8000404 <__aeabi_i2d>
 80045fa:	a365      	add	r3, pc, #404	@ (adr r3, 8004790 <_dtoa_r+0x2c0>)
 80045fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004600:	f7fb ff6a 	bl	80004d8 <__aeabi_dmul>
 8004604:	4602      	mov	r2, r0
 8004606:	460b      	mov	r3, r1
 8004608:	4620      	mov	r0, r4
 800460a:	4629      	mov	r1, r5
 800460c:	f7fb fdae 	bl	800016c <__adddf3>
 8004610:	4604      	mov	r4, r0
 8004612:	460d      	mov	r5, r1
 8004614:	f7fc fa10 	bl	8000a38 <__aeabi_d2iz>
 8004618:	2200      	movs	r2, #0
 800461a:	4607      	mov	r7, r0
 800461c:	2300      	movs	r3, #0
 800461e:	4620      	mov	r0, r4
 8004620:	4629      	mov	r1, r5
 8004622:	f7fc f9cb 	bl	80009bc <__aeabi_dcmplt>
 8004626:	b140      	cbz	r0, 800463a <_dtoa_r+0x16a>
 8004628:	4638      	mov	r0, r7
 800462a:	f7fb feeb 	bl	8000404 <__aeabi_i2d>
 800462e:	4622      	mov	r2, r4
 8004630:	462b      	mov	r3, r5
 8004632:	f7fc f9b9 	bl	80009a8 <__aeabi_dcmpeq>
 8004636:	b900      	cbnz	r0, 800463a <_dtoa_r+0x16a>
 8004638:	3f01      	subs	r7, #1
 800463a:	2f16      	cmp	r7, #22
 800463c:	d853      	bhi.n	80046e6 <_dtoa_r+0x216>
 800463e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004642:	4b5c      	ldr	r3, [pc, #368]	@ (80047b4 <_dtoa_r+0x2e4>)
 8004644:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800464c:	f7fc f9b6 	bl	80009bc <__aeabi_dcmplt>
 8004650:	2800      	cmp	r0, #0
 8004652:	d04a      	beq.n	80046ea <_dtoa_r+0x21a>
 8004654:	2300      	movs	r3, #0
 8004656:	3f01      	subs	r7, #1
 8004658:	930f      	str	r3, [sp, #60]	@ 0x3c
 800465a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800465c:	1b9b      	subs	r3, r3, r6
 800465e:	1e5a      	subs	r2, r3, #1
 8004660:	bf46      	itte	mi
 8004662:	f1c3 0801 	rsbmi	r8, r3, #1
 8004666:	2300      	movmi	r3, #0
 8004668:	f04f 0800 	movpl.w	r8, #0
 800466c:	9209      	str	r2, [sp, #36]	@ 0x24
 800466e:	bf48      	it	mi
 8004670:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8004672:	2f00      	cmp	r7, #0
 8004674:	db3b      	blt.n	80046ee <_dtoa_r+0x21e>
 8004676:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004678:	970e      	str	r7, [sp, #56]	@ 0x38
 800467a:	443b      	add	r3, r7
 800467c:	9309      	str	r3, [sp, #36]	@ 0x24
 800467e:	2300      	movs	r3, #0
 8004680:	930a      	str	r3, [sp, #40]	@ 0x28
 8004682:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004684:	2b09      	cmp	r3, #9
 8004686:	d866      	bhi.n	8004756 <_dtoa_r+0x286>
 8004688:	2b05      	cmp	r3, #5
 800468a:	bfc4      	itt	gt
 800468c:	3b04      	subgt	r3, #4
 800468e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8004690:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004692:	bfc8      	it	gt
 8004694:	2400      	movgt	r4, #0
 8004696:	f1a3 0302 	sub.w	r3, r3, #2
 800469a:	bfd8      	it	le
 800469c:	2401      	movle	r4, #1
 800469e:	2b03      	cmp	r3, #3
 80046a0:	d864      	bhi.n	800476c <_dtoa_r+0x29c>
 80046a2:	e8df f003 	tbb	[pc, r3]
 80046a6:	382b      	.short	0x382b
 80046a8:	5636      	.short	0x5636
 80046aa:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80046ae:	441e      	add	r6, r3
 80046b0:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80046b4:	2b20      	cmp	r3, #32
 80046b6:	bfc1      	itttt	gt
 80046b8:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80046bc:	fa08 f803 	lslgt.w	r8, r8, r3
 80046c0:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80046c4:	fa24 f303 	lsrgt.w	r3, r4, r3
 80046c8:	bfd6      	itet	le
 80046ca:	f1c3 0320 	rsble	r3, r3, #32
 80046ce:	ea48 0003 	orrgt.w	r0, r8, r3
 80046d2:	fa04 f003 	lslle.w	r0, r4, r3
 80046d6:	f7fb fe85 	bl	80003e4 <__aeabi_ui2d>
 80046da:	2201      	movs	r2, #1
 80046dc:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80046e0:	3e01      	subs	r6, #1
 80046e2:	9212      	str	r2, [sp, #72]	@ 0x48
 80046e4:	e775      	b.n	80045d2 <_dtoa_r+0x102>
 80046e6:	2301      	movs	r3, #1
 80046e8:	e7b6      	b.n	8004658 <_dtoa_r+0x188>
 80046ea:	900f      	str	r0, [sp, #60]	@ 0x3c
 80046ec:	e7b5      	b.n	800465a <_dtoa_r+0x18a>
 80046ee:	427b      	negs	r3, r7
 80046f0:	930a      	str	r3, [sp, #40]	@ 0x28
 80046f2:	2300      	movs	r3, #0
 80046f4:	eba8 0807 	sub.w	r8, r8, r7
 80046f8:	930e      	str	r3, [sp, #56]	@ 0x38
 80046fa:	e7c2      	b.n	8004682 <_dtoa_r+0x1b2>
 80046fc:	2300      	movs	r3, #0
 80046fe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004700:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004702:	2b00      	cmp	r3, #0
 8004704:	dc35      	bgt.n	8004772 <_dtoa_r+0x2a2>
 8004706:	2301      	movs	r3, #1
 8004708:	461a      	mov	r2, r3
 800470a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800470e:	9221      	str	r2, [sp, #132]	@ 0x84
 8004710:	e00b      	b.n	800472a <_dtoa_r+0x25a>
 8004712:	2301      	movs	r3, #1
 8004714:	e7f3      	b.n	80046fe <_dtoa_r+0x22e>
 8004716:	2300      	movs	r3, #0
 8004718:	930b      	str	r3, [sp, #44]	@ 0x2c
 800471a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800471c:	18fb      	adds	r3, r7, r3
 800471e:	9308      	str	r3, [sp, #32]
 8004720:	3301      	adds	r3, #1
 8004722:	2b01      	cmp	r3, #1
 8004724:	9307      	str	r3, [sp, #28]
 8004726:	bfb8      	it	lt
 8004728:	2301      	movlt	r3, #1
 800472a:	2100      	movs	r1, #0
 800472c:	2204      	movs	r2, #4
 800472e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004732:	f102 0514 	add.w	r5, r2, #20
 8004736:	429d      	cmp	r5, r3
 8004738:	d91f      	bls.n	800477a <_dtoa_r+0x2aa>
 800473a:	6041      	str	r1, [r0, #4]
 800473c:	4658      	mov	r0, fp
 800473e:	f000 fce9 	bl	8005114 <_Balloc>
 8004742:	4682      	mov	sl, r0
 8004744:	2800      	cmp	r0, #0
 8004746:	d139      	bne.n	80047bc <_dtoa_r+0x2ec>
 8004748:	4602      	mov	r2, r0
 800474a:	f240 11af 	movw	r1, #431	@ 0x1af
 800474e:	4b1a      	ldr	r3, [pc, #104]	@ (80047b8 <_dtoa_r+0x2e8>)
 8004750:	e6d2      	b.n	80044f8 <_dtoa_r+0x28>
 8004752:	2301      	movs	r3, #1
 8004754:	e7e0      	b.n	8004718 <_dtoa_r+0x248>
 8004756:	2401      	movs	r4, #1
 8004758:	2300      	movs	r3, #0
 800475a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800475c:	9320      	str	r3, [sp, #128]	@ 0x80
 800475e:	f04f 33ff 	mov.w	r3, #4294967295
 8004762:	2200      	movs	r2, #0
 8004764:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004768:	2312      	movs	r3, #18
 800476a:	e7d0      	b.n	800470e <_dtoa_r+0x23e>
 800476c:	2301      	movs	r3, #1
 800476e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004770:	e7f5      	b.n	800475e <_dtoa_r+0x28e>
 8004772:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004774:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004778:	e7d7      	b.n	800472a <_dtoa_r+0x25a>
 800477a:	3101      	adds	r1, #1
 800477c:	0052      	lsls	r2, r2, #1
 800477e:	e7d8      	b.n	8004732 <_dtoa_r+0x262>
 8004780:	636f4361 	.word	0x636f4361
 8004784:	3fd287a7 	.word	0x3fd287a7
 8004788:	8b60c8b3 	.word	0x8b60c8b3
 800478c:	3fc68a28 	.word	0x3fc68a28
 8004790:	509f79fb 	.word	0x509f79fb
 8004794:	3fd34413 	.word	0x3fd34413
 8004798:	08005fbb 	.word	0x08005fbb
 800479c:	08005fd2 	.word	0x08005fd2
 80047a0:	7ff00000 	.word	0x7ff00000
 80047a4:	08005fb7 	.word	0x08005fb7
 80047a8:	08005f81 	.word	0x08005f81
 80047ac:	08005f80 	.word	0x08005f80
 80047b0:	3ff80000 	.word	0x3ff80000
 80047b4:	080060c8 	.word	0x080060c8
 80047b8:	0800602a 	.word	0x0800602a
 80047bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80047c0:	6018      	str	r0, [r3, #0]
 80047c2:	9b07      	ldr	r3, [sp, #28]
 80047c4:	2b0e      	cmp	r3, #14
 80047c6:	f200 80a4 	bhi.w	8004912 <_dtoa_r+0x442>
 80047ca:	2c00      	cmp	r4, #0
 80047cc:	f000 80a1 	beq.w	8004912 <_dtoa_r+0x442>
 80047d0:	2f00      	cmp	r7, #0
 80047d2:	dd33      	ble.n	800483c <_dtoa_r+0x36c>
 80047d4:	4b86      	ldr	r3, [pc, #536]	@ (80049f0 <_dtoa_r+0x520>)
 80047d6:	f007 020f 	and.w	r2, r7, #15
 80047da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80047de:	05f8      	lsls	r0, r7, #23
 80047e0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80047e4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80047e8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80047ec:	d516      	bpl.n	800481c <_dtoa_r+0x34c>
 80047ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80047f2:	4b80      	ldr	r3, [pc, #512]	@ (80049f4 <_dtoa_r+0x524>)
 80047f4:	2603      	movs	r6, #3
 80047f6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80047fa:	f7fb ff97 	bl	800072c <__aeabi_ddiv>
 80047fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004802:	f004 040f 	and.w	r4, r4, #15
 8004806:	4d7b      	ldr	r5, [pc, #492]	@ (80049f4 <_dtoa_r+0x524>)
 8004808:	b954      	cbnz	r4, 8004820 <_dtoa_r+0x350>
 800480a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800480e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004812:	f7fb ff8b 	bl	800072c <__aeabi_ddiv>
 8004816:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800481a:	e028      	b.n	800486e <_dtoa_r+0x39e>
 800481c:	2602      	movs	r6, #2
 800481e:	e7f2      	b.n	8004806 <_dtoa_r+0x336>
 8004820:	07e1      	lsls	r1, r4, #31
 8004822:	d508      	bpl.n	8004836 <_dtoa_r+0x366>
 8004824:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004828:	e9d5 2300 	ldrd	r2, r3, [r5]
 800482c:	f7fb fe54 	bl	80004d8 <__aeabi_dmul>
 8004830:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004834:	3601      	adds	r6, #1
 8004836:	1064      	asrs	r4, r4, #1
 8004838:	3508      	adds	r5, #8
 800483a:	e7e5      	b.n	8004808 <_dtoa_r+0x338>
 800483c:	f000 80d2 	beq.w	80049e4 <_dtoa_r+0x514>
 8004840:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004844:	427c      	negs	r4, r7
 8004846:	4b6a      	ldr	r3, [pc, #424]	@ (80049f0 <_dtoa_r+0x520>)
 8004848:	f004 020f 	and.w	r2, r4, #15
 800484c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004854:	f7fb fe40 	bl	80004d8 <__aeabi_dmul>
 8004858:	2602      	movs	r6, #2
 800485a:	2300      	movs	r3, #0
 800485c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004860:	4d64      	ldr	r5, [pc, #400]	@ (80049f4 <_dtoa_r+0x524>)
 8004862:	1124      	asrs	r4, r4, #4
 8004864:	2c00      	cmp	r4, #0
 8004866:	f040 80b2 	bne.w	80049ce <_dtoa_r+0x4fe>
 800486a:	2b00      	cmp	r3, #0
 800486c:	d1d3      	bne.n	8004816 <_dtoa_r+0x346>
 800486e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004872:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004874:	2b00      	cmp	r3, #0
 8004876:	f000 80b7 	beq.w	80049e8 <_dtoa_r+0x518>
 800487a:	2200      	movs	r2, #0
 800487c:	4620      	mov	r0, r4
 800487e:	4629      	mov	r1, r5
 8004880:	4b5d      	ldr	r3, [pc, #372]	@ (80049f8 <_dtoa_r+0x528>)
 8004882:	f7fc f89b 	bl	80009bc <__aeabi_dcmplt>
 8004886:	2800      	cmp	r0, #0
 8004888:	f000 80ae 	beq.w	80049e8 <_dtoa_r+0x518>
 800488c:	9b07      	ldr	r3, [sp, #28]
 800488e:	2b00      	cmp	r3, #0
 8004890:	f000 80aa 	beq.w	80049e8 <_dtoa_r+0x518>
 8004894:	9b08      	ldr	r3, [sp, #32]
 8004896:	2b00      	cmp	r3, #0
 8004898:	dd37      	ble.n	800490a <_dtoa_r+0x43a>
 800489a:	1e7b      	subs	r3, r7, #1
 800489c:	4620      	mov	r0, r4
 800489e:	9304      	str	r3, [sp, #16]
 80048a0:	2200      	movs	r2, #0
 80048a2:	4629      	mov	r1, r5
 80048a4:	4b55      	ldr	r3, [pc, #340]	@ (80049fc <_dtoa_r+0x52c>)
 80048a6:	f7fb fe17 	bl	80004d8 <__aeabi_dmul>
 80048aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80048ae:	9c08      	ldr	r4, [sp, #32]
 80048b0:	3601      	adds	r6, #1
 80048b2:	4630      	mov	r0, r6
 80048b4:	f7fb fda6 	bl	8000404 <__aeabi_i2d>
 80048b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80048bc:	f7fb fe0c 	bl	80004d8 <__aeabi_dmul>
 80048c0:	2200      	movs	r2, #0
 80048c2:	4b4f      	ldr	r3, [pc, #316]	@ (8004a00 <_dtoa_r+0x530>)
 80048c4:	f7fb fc52 	bl	800016c <__adddf3>
 80048c8:	4605      	mov	r5, r0
 80048ca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80048ce:	2c00      	cmp	r4, #0
 80048d0:	f040 809a 	bne.w	8004a08 <_dtoa_r+0x538>
 80048d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80048d8:	2200      	movs	r2, #0
 80048da:	4b4a      	ldr	r3, [pc, #296]	@ (8004a04 <_dtoa_r+0x534>)
 80048dc:	f7fb fc44 	bl	8000168 <__aeabi_dsub>
 80048e0:	4602      	mov	r2, r0
 80048e2:	460b      	mov	r3, r1
 80048e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80048e8:	462a      	mov	r2, r5
 80048ea:	4633      	mov	r3, r6
 80048ec:	f7fc f884 	bl	80009f8 <__aeabi_dcmpgt>
 80048f0:	2800      	cmp	r0, #0
 80048f2:	f040 828e 	bne.w	8004e12 <_dtoa_r+0x942>
 80048f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80048fa:	462a      	mov	r2, r5
 80048fc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004900:	f7fc f85c 	bl	80009bc <__aeabi_dcmplt>
 8004904:	2800      	cmp	r0, #0
 8004906:	f040 8127 	bne.w	8004b58 <_dtoa_r+0x688>
 800490a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800490e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004912:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8004914:	2b00      	cmp	r3, #0
 8004916:	f2c0 8163 	blt.w	8004be0 <_dtoa_r+0x710>
 800491a:	2f0e      	cmp	r7, #14
 800491c:	f300 8160 	bgt.w	8004be0 <_dtoa_r+0x710>
 8004920:	4b33      	ldr	r3, [pc, #204]	@ (80049f0 <_dtoa_r+0x520>)
 8004922:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004926:	e9d3 3400 	ldrd	r3, r4, [r3]
 800492a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800492e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004930:	2b00      	cmp	r3, #0
 8004932:	da03      	bge.n	800493c <_dtoa_r+0x46c>
 8004934:	9b07      	ldr	r3, [sp, #28]
 8004936:	2b00      	cmp	r3, #0
 8004938:	f340 8100 	ble.w	8004b3c <_dtoa_r+0x66c>
 800493c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004940:	4656      	mov	r6, sl
 8004942:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004946:	4620      	mov	r0, r4
 8004948:	4629      	mov	r1, r5
 800494a:	f7fb feef 	bl	800072c <__aeabi_ddiv>
 800494e:	f7fc f873 	bl	8000a38 <__aeabi_d2iz>
 8004952:	4680      	mov	r8, r0
 8004954:	f7fb fd56 	bl	8000404 <__aeabi_i2d>
 8004958:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800495c:	f7fb fdbc 	bl	80004d8 <__aeabi_dmul>
 8004960:	4602      	mov	r2, r0
 8004962:	460b      	mov	r3, r1
 8004964:	4620      	mov	r0, r4
 8004966:	4629      	mov	r1, r5
 8004968:	f7fb fbfe 	bl	8000168 <__aeabi_dsub>
 800496c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004970:	9d07      	ldr	r5, [sp, #28]
 8004972:	f806 4b01 	strb.w	r4, [r6], #1
 8004976:	eba6 040a 	sub.w	r4, r6, sl
 800497a:	42a5      	cmp	r5, r4
 800497c:	4602      	mov	r2, r0
 800497e:	460b      	mov	r3, r1
 8004980:	f040 8116 	bne.w	8004bb0 <_dtoa_r+0x6e0>
 8004984:	f7fb fbf2 	bl	800016c <__adddf3>
 8004988:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800498c:	4604      	mov	r4, r0
 800498e:	460d      	mov	r5, r1
 8004990:	f7fc f832 	bl	80009f8 <__aeabi_dcmpgt>
 8004994:	2800      	cmp	r0, #0
 8004996:	f040 80f8 	bne.w	8004b8a <_dtoa_r+0x6ba>
 800499a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800499e:	4620      	mov	r0, r4
 80049a0:	4629      	mov	r1, r5
 80049a2:	f7fc f801 	bl	80009a8 <__aeabi_dcmpeq>
 80049a6:	b118      	cbz	r0, 80049b0 <_dtoa_r+0x4e0>
 80049a8:	f018 0f01 	tst.w	r8, #1
 80049ac:	f040 80ed 	bne.w	8004b8a <_dtoa_r+0x6ba>
 80049b0:	4649      	mov	r1, r9
 80049b2:	4658      	mov	r0, fp
 80049b4:	f000 fbee 	bl	8005194 <_Bfree>
 80049b8:	2300      	movs	r3, #0
 80049ba:	7033      	strb	r3, [r6, #0]
 80049bc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80049be:	3701      	adds	r7, #1
 80049c0:	601f      	str	r7, [r3, #0]
 80049c2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	f000 8320 	beq.w	800500a <_dtoa_r+0xb3a>
 80049ca:	601e      	str	r6, [r3, #0]
 80049cc:	e31d      	b.n	800500a <_dtoa_r+0xb3a>
 80049ce:	07e2      	lsls	r2, r4, #31
 80049d0:	d505      	bpl.n	80049de <_dtoa_r+0x50e>
 80049d2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80049d6:	f7fb fd7f 	bl	80004d8 <__aeabi_dmul>
 80049da:	2301      	movs	r3, #1
 80049dc:	3601      	adds	r6, #1
 80049de:	1064      	asrs	r4, r4, #1
 80049e0:	3508      	adds	r5, #8
 80049e2:	e73f      	b.n	8004864 <_dtoa_r+0x394>
 80049e4:	2602      	movs	r6, #2
 80049e6:	e742      	b.n	800486e <_dtoa_r+0x39e>
 80049e8:	9c07      	ldr	r4, [sp, #28]
 80049ea:	9704      	str	r7, [sp, #16]
 80049ec:	e761      	b.n	80048b2 <_dtoa_r+0x3e2>
 80049ee:	bf00      	nop
 80049f0:	080060c8 	.word	0x080060c8
 80049f4:	080060a0 	.word	0x080060a0
 80049f8:	3ff00000 	.word	0x3ff00000
 80049fc:	40240000 	.word	0x40240000
 8004a00:	401c0000 	.word	0x401c0000
 8004a04:	40140000 	.word	0x40140000
 8004a08:	4b70      	ldr	r3, [pc, #448]	@ (8004bcc <_dtoa_r+0x6fc>)
 8004a0a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004a0c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004a10:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004a14:	4454      	add	r4, sl
 8004a16:	2900      	cmp	r1, #0
 8004a18:	d045      	beq.n	8004aa6 <_dtoa_r+0x5d6>
 8004a1a:	2000      	movs	r0, #0
 8004a1c:	496c      	ldr	r1, [pc, #432]	@ (8004bd0 <_dtoa_r+0x700>)
 8004a1e:	f7fb fe85 	bl	800072c <__aeabi_ddiv>
 8004a22:	4633      	mov	r3, r6
 8004a24:	462a      	mov	r2, r5
 8004a26:	f7fb fb9f 	bl	8000168 <__aeabi_dsub>
 8004a2a:	4656      	mov	r6, sl
 8004a2c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004a30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a34:	f7fc f800 	bl	8000a38 <__aeabi_d2iz>
 8004a38:	4605      	mov	r5, r0
 8004a3a:	f7fb fce3 	bl	8000404 <__aeabi_i2d>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	460b      	mov	r3, r1
 8004a42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a46:	f7fb fb8f 	bl	8000168 <__aeabi_dsub>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	460b      	mov	r3, r1
 8004a4e:	3530      	adds	r5, #48	@ 0x30
 8004a50:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004a54:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004a58:	f806 5b01 	strb.w	r5, [r6], #1
 8004a5c:	f7fb ffae 	bl	80009bc <__aeabi_dcmplt>
 8004a60:	2800      	cmp	r0, #0
 8004a62:	d163      	bne.n	8004b2c <_dtoa_r+0x65c>
 8004a64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004a68:	2000      	movs	r0, #0
 8004a6a:	495a      	ldr	r1, [pc, #360]	@ (8004bd4 <_dtoa_r+0x704>)
 8004a6c:	f7fb fb7c 	bl	8000168 <__aeabi_dsub>
 8004a70:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004a74:	f7fb ffa2 	bl	80009bc <__aeabi_dcmplt>
 8004a78:	2800      	cmp	r0, #0
 8004a7a:	f040 8087 	bne.w	8004b8c <_dtoa_r+0x6bc>
 8004a7e:	42a6      	cmp	r6, r4
 8004a80:	f43f af43 	beq.w	800490a <_dtoa_r+0x43a>
 8004a84:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004a88:	2200      	movs	r2, #0
 8004a8a:	4b53      	ldr	r3, [pc, #332]	@ (8004bd8 <_dtoa_r+0x708>)
 8004a8c:	f7fb fd24 	bl	80004d8 <__aeabi_dmul>
 8004a90:	2200      	movs	r2, #0
 8004a92:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004a96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a9a:	4b4f      	ldr	r3, [pc, #316]	@ (8004bd8 <_dtoa_r+0x708>)
 8004a9c:	f7fb fd1c 	bl	80004d8 <__aeabi_dmul>
 8004aa0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004aa4:	e7c4      	b.n	8004a30 <_dtoa_r+0x560>
 8004aa6:	4631      	mov	r1, r6
 8004aa8:	4628      	mov	r0, r5
 8004aaa:	f7fb fd15 	bl	80004d8 <__aeabi_dmul>
 8004aae:	4656      	mov	r6, sl
 8004ab0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004ab4:	9413      	str	r4, [sp, #76]	@ 0x4c
 8004ab6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004aba:	f7fb ffbd 	bl	8000a38 <__aeabi_d2iz>
 8004abe:	4605      	mov	r5, r0
 8004ac0:	f7fb fca0 	bl	8000404 <__aeabi_i2d>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004acc:	f7fb fb4c 	bl	8000168 <__aeabi_dsub>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	460b      	mov	r3, r1
 8004ad4:	3530      	adds	r5, #48	@ 0x30
 8004ad6:	f806 5b01 	strb.w	r5, [r6], #1
 8004ada:	42a6      	cmp	r6, r4
 8004adc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004ae0:	f04f 0200 	mov.w	r2, #0
 8004ae4:	d124      	bne.n	8004b30 <_dtoa_r+0x660>
 8004ae6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004aea:	4b39      	ldr	r3, [pc, #228]	@ (8004bd0 <_dtoa_r+0x700>)
 8004aec:	f7fb fb3e 	bl	800016c <__adddf3>
 8004af0:	4602      	mov	r2, r0
 8004af2:	460b      	mov	r3, r1
 8004af4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004af8:	f7fb ff7e 	bl	80009f8 <__aeabi_dcmpgt>
 8004afc:	2800      	cmp	r0, #0
 8004afe:	d145      	bne.n	8004b8c <_dtoa_r+0x6bc>
 8004b00:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004b04:	2000      	movs	r0, #0
 8004b06:	4932      	ldr	r1, [pc, #200]	@ (8004bd0 <_dtoa_r+0x700>)
 8004b08:	f7fb fb2e 	bl	8000168 <__aeabi_dsub>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	460b      	mov	r3, r1
 8004b10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b14:	f7fb ff52 	bl	80009bc <__aeabi_dcmplt>
 8004b18:	2800      	cmp	r0, #0
 8004b1a:	f43f aef6 	beq.w	800490a <_dtoa_r+0x43a>
 8004b1e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8004b20:	1e73      	subs	r3, r6, #1
 8004b22:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004b24:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004b28:	2b30      	cmp	r3, #48	@ 0x30
 8004b2a:	d0f8      	beq.n	8004b1e <_dtoa_r+0x64e>
 8004b2c:	9f04      	ldr	r7, [sp, #16]
 8004b2e:	e73f      	b.n	80049b0 <_dtoa_r+0x4e0>
 8004b30:	4b29      	ldr	r3, [pc, #164]	@ (8004bd8 <_dtoa_r+0x708>)
 8004b32:	f7fb fcd1 	bl	80004d8 <__aeabi_dmul>
 8004b36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004b3a:	e7bc      	b.n	8004ab6 <_dtoa_r+0x5e6>
 8004b3c:	d10c      	bne.n	8004b58 <_dtoa_r+0x688>
 8004b3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004b42:	2200      	movs	r2, #0
 8004b44:	4b25      	ldr	r3, [pc, #148]	@ (8004bdc <_dtoa_r+0x70c>)
 8004b46:	f7fb fcc7 	bl	80004d8 <__aeabi_dmul>
 8004b4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004b4e:	f7fb ff49 	bl	80009e4 <__aeabi_dcmpge>
 8004b52:	2800      	cmp	r0, #0
 8004b54:	f000 815b 	beq.w	8004e0e <_dtoa_r+0x93e>
 8004b58:	2400      	movs	r4, #0
 8004b5a:	4625      	mov	r5, r4
 8004b5c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004b5e:	4656      	mov	r6, sl
 8004b60:	43db      	mvns	r3, r3
 8004b62:	9304      	str	r3, [sp, #16]
 8004b64:	2700      	movs	r7, #0
 8004b66:	4621      	mov	r1, r4
 8004b68:	4658      	mov	r0, fp
 8004b6a:	f000 fb13 	bl	8005194 <_Bfree>
 8004b6e:	2d00      	cmp	r5, #0
 8004b70:	d0dc      	beq.n	8004b2c <_dtoa_r+0x65c>
 8004b72:	b12f      	cbz	r7, 8004b80 <_dtoa_r+0x6b0>
 8004b74:	42af      	cmp	r7, r5
 8004b76:	d003      	beq.n	8004b80 <_dtoa_r+0x6b0>
 8004b78:	4639      	mov	r1, r7
 8004b7a:	4658      	mov	r0, fp
 8004b7c:	f000 fb0a 	bl	8005194 <_Bfree>
 8004b80:	4629      	mov	r1, r5
 8004b82:	4658      	mov	r0, fp
 8004b84:	f000 fb06 	bl	8005194 <_Bfree>
 8004b88:	e7d0      	b.n	8004b2c <_dtoa_r+0x65c>
 8004b8a:	9704      	str	r7, [sp, #16]
 8004b8c:	4633      	mov	r3, r6
 8004b8e:	461e      	mov	r6, r3
 8004b90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004b94:	2a39      	cmp	r2, #57	@ 0x39
 8004b96:	d107      	bne.n	8004ba8 <_dtoa_r+0x6d8>
 8004b98:	459a      	cmp	sl, r3
 8004b9a:	d1f8      	bne.n	8004b8e <_dtoa_r+0x6be>
 8004b9c:	9a04      	ldr	r2, [sp, #16]
 8004b9e:	3201      	adds	r2, #1
 8004ba0:	9204      	str	r2, [sp, #16]
 8004ba2:	2230      	movs	r2, #48	@ 0x30
 8004ba4:	f88a 2000 	strb.w	r2, [sl]
 8004ba8:	781a      	ldrb	r2, [r3, #0]
 8004baa:	3201      	adds	r2, #1
 8004bac:	701a      	strb	r2, [r3, #0]
 8004bae:	e7bd      	b.n	8004b2c <_dtoa_r+0x65c>
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	4b09      	ldr	r3, [pc, #36]	@ (8004bd8 <_dtoa_r+0x708>)
 8004bb4:	f7fb fc90 	bl	80004d8 <__aeabi_dmul>
 8004bb8:	2200      	movs	r2, #0
 8004bba:	2300      	movs	r3, #0
 8004bbc:	4604      	mov	r4, r0
 8004bbe:	460d      	mov	r5, r1
 8004bc0:	f7fb fef2 	bl	80009a8 <__aeabi_dcmpeq>
 8004bc4:	2800      	cmp	r0, #0
 8004bc6:	f43f aebc 	beq.w	8004942 <_dtoa_r+0x472>
 8004bca:	e6f1      	b.n	80049b0 <_dtoa_r+0x4e0>
 8004bcc:	080060c8 	.word	0x080060c8
 8004bd0:	3fe00000 	.word	0x3fe00000
 8004bd4:	3ff00000 	.word	0x3ff00000
 8004bd8:	40240000 	.word	0x40240000
 8004bdc:	40140000 	.word	0x40140000
 8004be0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004be2:	2a00      	cmp	r2, #0
 8004be4:	f000 80db 	beq.w	8004d9e <_dtoa_r+0x8ce>
 8004be8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004bea:	2a01      	cmp	r2, #1
 8004bec:	f300 80bf 	bgt.w	8004d6e <_dtoa_r+0x89e>
 8004bf0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004bf2:	2a00      	cmp	r2, #0
 8004bf4:	f000 80b7 	beq.w	8004d66 <_dtoa_r+0x896>
 8004bf8:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004bfc:	4646      	mov	r6, r8
 8004bfe:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004c00:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004c02:	2101      	movs	r1, #1
 8004c04:	441a      	add	r2, r3
 8004c06:	4658      	mov	r0, fp
 8004c08:	4498      	add	r8, r3
 8004c0a:	9209      	str	r2, [sp, #36]	@ 0x24
 8004c0c:	f000 fb76 	bl	80052fc <__i2b>
 8004c10:	4605      	mov	r5, r0
 8004c12:	b15e      	cbz	r6, 8004c2c <_dtoa_r+0x75c>
 8004c14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	dd08      	ble.n	8004c2c <_dtoa_r+0x75c>
 8004c1a:	42b3      	cmp	r3, r6
 8004c1c:	bfa8      	it	ge
 8004c1e:	4633      	movge	r3, r6
 8004c20:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004c22:	eba8 0803 	sub.w	r8, r8, r3
 8004c26:	1af6      	subs	r6, r6, r3
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004c2e:	b1f3      	cbz	r3, 8004c6e <_dtoa_r+0x79e>
 8004c30:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	f000 80b7 	beq.w	8004da6 <_dtoa_r+0x8d6>
 8004c38:	b18c      	cbz	r4, 8004c5e <_dtoa_r+0x78e>
 8004c3a:	4629      	mov	r1, r5
 8004c3c:	4622      	mov	r2, r4
 8004c3e:	4658      	mov	r0, fp
 8004c40:	f000 fc1a 	bl	8005478 <__pow5mult>
 8004c44:	464a      	mov	r2, r9
 8004c46:	4601      	mov	r1, r0
 8004c48:	4605      	mov	r5, r0
 8004c4a:	4658      	mov	r0, fp
 8004c4c:	f000 fb6c 	bl	8005328 <__multiply>
 8004c50:	4649      	mov	r1, r9
 8004c52:	9004      	str	r0, [sp, #16]
 8004c54:	4658      	mov	r0, fp
 8004c56:	f000 fa9d 	bl	8005194 <_Bfree>
 8004c5a:	9b04      	ldr	r3, [sp, #16]
 8004c5c:	4699      	mov	r9, r3
 8004c5e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004c60:	1b1a      	subs	r2, r3, r4
 8004c62:	d004      	beq.n	8004c6e <_dtoa_r+0x79e>
 8004c64:	4649      	mov	r1, r9
 8004c66:	4658      	mov	r0, fp
 8004c68:	f000 fc06 	bl	8005478 <__pow5mult>
 8004c6c:	4681      	mov	r9, r0
 8004c6e:	2101      	movs	r1, #1
 8004c70:	4658      	mov	r0, fp
 8004c72:	f000 fb43 	bl	80052fc <__i2b>
 8004c76:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004c78:	4604      	mov	r4, r0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	f000 81c9 	beq.w	8005012 <_dtoa_r+0xb42>
 8004c80:	461a      	mov	r2, r3
 8004c82:	4601      	mov	r1, r0
 8004c84:	4658      	mov	r0, fp
 8004c86:	f000 fbf7 	bl	8005478 <__pow5mult>
 8004c8a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004c8c:	4604      	mov	r4, r0
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	f300 808f 	bgt.w	8004db2 <_dtoa_r+0x8e2>
 8004c94:	9b02      	ldr	r3, [sp, #8]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	f040 8087 	bne.w	8004daa <_dtoa_r+0x8da>
 8004c9c:	9b03      	ldr	r3, [sp, #12]
 8004c9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	f040 8083 	bne.w	8004dae <_dtoa_r+0x8de>
 8004ca8:	9b03      	ldr	r3, [sp, #12]
 8004caa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004cae:	0d1b      	lsrs	r3, r3, #20
 8004cb0:	051b      	lsls	r3, r3, #20
 8004cb2:	b12b      	cbz	r3, 8004cc0 <_dtoa_r+0x7f0>
 8004cb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cb6:	f108 0801 	add.w	r8, r8, #1
 8004cba:	3301      	adds	r3, #1
 8004cbc:	9309      	str	r3, [sp, #36]	@ 0x24
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	930a      	str	r3, [sp, #40]	@ 0x28
 8004cc2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	f000 81aa 	beq.w	800501e <_dtoa_r+0xb4e>
 8004cca:	6923      	ldr	r3, [r4, #16]
 8004ccc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004cd0:	6918      	ldr	r0, [r3, #16]
 8004cd2:	f000 fac7 	bl	8005264 <__hi0bits>
 8004cd6:	f1c0 0020 	rsb	r0, r0, #32
 8004cda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cdc:	4418      	add	r0, r3
 8004cde:	f010 001f 	ands.w	r0, r0, #31
 8004ce2:	d071      	beq.n	8004dc8 <_dtoa_r+0x8f8>
 8004ce4:	f1c0 0320 	rsb	r3, r0, #32
 8004ce8:	2b04      	cmp	r3, #4
 8004cea:	dd65      	ble.n	8004db8 <_dtoa_r+0x8e8>
 8004cec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cee:	f1c0 001c 	rsb	r0, r0, #28
 8004cf2:	4403      	add	r3, r0
 8004cf4:	4480      	add	r8, r0
 8004cf6:	4406      	add	r6, r0
 8004cf8:	9309      	str	r3, [sp, #36]	@ 0x24
 8004cfa:	f1b8 0f00 	cmp.w	r8, #0
 8004cfe:	dd05      	ble.n	8004d0c <_dtoa_r+0x83c>
 8004d00:	4649      	mov	r1, r9
 8004d02:	4642      	mov	r2, r8
 8004d04:	4658      	mov	r0, fp
 8004d06:	f000 fc11 	bl	800552c <__lshift>
 8004d0a:	4681      	mov	r9, r0
 8004d0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	dd05      	ble.n	8004d1e <_dtoa_r+0x84e>
 8004d12:	4621      	mov	r1, r4
 8004d14:	461a      	mov	r2, r3
 8004d16:	4658      	mov	r0, fp
 8004d18:	f000 fc08 	bl	800552c <__lshift>
 8004d1c:	4604      	mov	r4, r0
 8004d1e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d053      	beq.n	8004dcc <_dtoa_r+0x8fc>
 8004d24:	4621      	mov	r1, r4
 8004d26:	4648      	mov	r0, r9
 8004d28:	f000 fc6c 	bl	8005604 <__mcmp>
 8004d2c:	2800      	cmp	r0, #0
 8004d2e:	da4d      	bge.n	8004dcc <_dtoa_r+0x8fc>
 8004d30:	1e7b      	subs	r3, r7, #1
 8004d32:	4649      	mov	r1, r9
 8004d34:	9304      	str	r3, [sp, #16]
 8004d36:	220a      	movs	r2, #10
 8004d38:	2300      	movs	r3, #0
 8004d3a:	4658      	mov	r0, fp
 8004d3c:	f000 fa4c 	bl	80051d8 <__multadd>
 8004d40:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004d42:	4681      	mov	r9, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	f000 816c 	beq.w	8005022 <_dtoa_r+0xb52>
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	4629      	mov	r1, r5
 8004d4e:	220a      	movs	r2, #10
 8004d50:	4658      	mov	r0, fp
 8004d52:	f000 fa41 	bl	80051d8 <__multadd>
 8004d56:	9b08      	ldr	r3, [sp, #32]
 8004d58:	4605      	mov	r5, r0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	dc61      	bgt.n	8004e22 <_dtoa_r+0x952>
 8004d5e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004d60:	2b02      	cmp	r3, #2
 8004d62:	dc3b      	bgt.n	8004ddc <_dtoa_r+0x90c>
 8004d64:	e05d      	b.n	8004e22 <_dtoa_r+0x952>
 8004d66:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004d68:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004d6c:	e746      	b.n	8004bfc <_dtoa_r+0x72c>
 8004d6e:	9b07      	ldr	r3, [sp, #28]
 8004d70:	1e5c      	subs	r4, r3, #1
 8004d72:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004d74:	42a3      	cmp	r3, r4
 8004d76:	bfbf      	itttt	lt
 8004d78:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8004d7a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8004d7c:	1ae3      	sublt	r3, r4, r3
 8004d7e:	18d2      	addlt	r2, r2, r3
 8004d80:	bfa8      	it	ge
 8004d82:	1b1c      	subge	r4, r3, r4
 8004d84:	9b07      	ldr	r3, [sp, #28]
 8004d86:	bfbe      	ittt	lt
 8004d88:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8004d8a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8004d8c:	2400      	movlt	r4, #0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	bfb5      	itete	lt
 8004d92:	eba8 0603 	sublt.w	r6, r8, r3
 8004d96:	4646      	movge	r6, r8
 8004d98:	2300      	movlt	r3, #0
 8004d9a:	9b07      	ldrge	r3, [sp, #28]
 8004d9c:	e730      	b.n	8004c00 <_dtoa_r+0x730>
 8004d9e:	4646      	mov	r6, r8
 8004da0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004da2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004da4:	e735      	b.n	8004c12 <_dtoa_r+0x742>
 8004da6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004da8:	e75c      	b.n	8004c64 <_dtoa_r+0x794>
 8004daa:	2300      	movs	r3, #0
 8004dac:	e788      	b.n	8004cc0 <_dtoa_r+0x7f0>
 8004dae:	9b02      	ldr	r3, [sp, #8]
 8004db0:	e786      	b.n	8004cc0 <_dtoa_r+0x7f0>
 8004db2:	2300      	movs	r3, #0
 8004db4:	930a      	str	r3, [sp, #40]	@ 0x28
 8004db6:	e788      	b.n	8004cca <_dtoa_r+0x7fa>
 8004db8:	d09f      	beq.n	8004cfa <_dtoa_r+0x82a>
 8004dba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004dbc:	331c      	adds	r3, #28
 8004dbe:	441a      	add	r2, r3
 8004dc0:	4498      	add	r8, r3
 8004dc2:	441e      	add	r6, r3
 8004dc4:	9209      	str	r2, [sp, #36]	@ 0x24
 8004dc6:	e798      	b.n	8004cfa <_dtoa_r+0x82a>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	e7f6      	b.n	8004dba <_dtoa_r+0x8ea>
 8004dcc:	9b07      	ldr	r3, [sp, #28]
 8004dce:	9704      	str	r7, [sp, #16]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	dc20      	bgt.n	8004e16 <_dtoa_r+0x946>
 8004dd4:	9308      	str	r3, [sp, #32]
 8004dd6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	dd1e      	ble.n	8004e1a <_dtoa_r+0x94a>
 8004ddc:	9b08      	ldr	r3, [sp, #32]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	f47f aebc 	bne.w	8004b5c <_dtoa_r+0x68c>
 8004de4:	4621      	mov	r1, r4
 8004de6:	2205      	movs	r2, #5
 8004de8:	4658      	mov	r0, fp
 8004dea:	f000 f9f5 	bl	80051d8 <__multadd>
 8004dee:	4601      	mov	r1, r0
 8004df0:	4604      	mov	r4, r0
 8004df2:	4648      	mov	r0, r9
 8004df4:	f000 fc06 	bl	8005604 <__mcmp>
 8004df8:	2800      	cmp	r0, #0
 8004dfa:	f77f aeaf 	ble.w	8004b5c <_dtoa_r+0x68c>
 8004dfe:	2331      	movs	r3, #49	@ 0x31
 8004e00:	4656      	mov	r6, sl
 8004e02:	f806 3b01 	strb.w	r3, [r6], #1
 8004e06:	9b04      	ldr	r3, [sp, #16]
 8004e08:	3301      	adds	r3, #1
 8004e0a:	9304      	str	r3, [sp, #16]
 8004e0c:	e6aa      	b.n	8004b64 <_dtoa_r+0x694>
 8004e0e:	9c07      	ldr	r4, [sp, #28]
 8004e10:	9704      	str	r7, [sp, #16]
 8004e12:	4625      	mov	r5, r4
 8004e14:	e7f3      	b.n	8004dfe <_dtoa_r+0x92e>
 8004e16:	9b07      	ldr	r3, [sp, #28]
 8004e18:	9308      	str	r3, [sp, #32]
 8004e1a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	f000 8104 	beq.w	800502a <_dtoa_r+0xb5a>
 8004e22:	2e00      	cmp	r6, #0
 8004e24:	dd05      	ble.n	8004e32 <_dtoa_r+0x962>
 8004e26:	4629      	mov	r1, r5
 8004e28:	4632      	mov	r2, r6
 8004e2a:	4658      	mov	r0, fp
 8004e2c:	f000 fb7e 	bl	800552c <__lshift>
 8004e30:	4605      	mov	r5, r0
 8004e32:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d05a      	beq.n	8004eee <_dtoa_r+0xa1e>
 8004e38:	4658      	mov	r0, fp
 8004e3a:	6869      	ldr	r1, [r5, #4]
 8004e3c:	f000 f96a 	bl	8005114 <_Balloc>
 8004e40:	4606      	mov	r6, r0
 8004e42:	b928      	cbnz	r0, 8004e50 <_dtoa_r+0x980>
 8004e44:	4602      	mov	r2, r0
 8004e46:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004e4a:	4b83      	ldr	r3, [pc, #524]	@ (8005058 <_dtoa_r+0xb88>)
 8004e4c:	f7ff bb54 	b.w	80044f8 <_dtoa_r+0x28>
 8004e50:	692a      	ldr	r2, [r5, #16]
 8004e52:	f105 010c 	add.w	r1, r5, #12
 8004e56:	3202      	adds	r2, #2
 8004e58:	0092      	lsls	r2, r2, #2
 8004e5a:	300c      	adds	r0, #12
 8004e5c:	f7ff fa9f 	bl	800439e <memcpy>
 8004e60:	2201      	movs	r2, #1
 8004e62:	4631      	mov	r1, r6
 8004e64:	4658      	mov	r0, fp
 8004e66:	f000 fb61 	bl	800552c <__lshift>
 8004e6a:	462f      	mov	r7, r5
 8004e6c:	4605      	mov	r5, r0
 8004e6e:	f10a 0301 	add.w	r3, sl, #1
 8004e72:	9307      	str	r3, [sp, #28]
 8004e74:	9b08      	ldr	r3, [sp, #32]
 8004e76:	4453      	add	r3, sl
 8004e78:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004e7a:	9b02      	ldr	r3, [sp, #8]
 8004e7c:	f003 0301 	and.w	r3, r3, #1
 8004e80:	930a      	str	r3, [sp, #40]	@ 0x28
 8004e82:	9b07      	ldr	r3, [sp, #28]
 8004e84:	4621      	mov	r1, r4
 8004e86:	3b01      	subs	r3, #1
 8004e88:	4648      	mov	r0, r9
 8004e8a:	9302      	str	r3, [sp, #8]
 8004e8c:	f7ff fa95 	bl	80043ba <quorem>
 8004e90:	4639      	mov	r1, r7
 8004e92:	9008      	str	r0, [sp, #32]
 8004e94:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004e98:	4648      	mov	r0, r9
 8004e9a:	f000 fbb3 	bl	8005604 <__mcmp>
 8004e9e:	462a      	mov	r2, r5
 8004ea0:	9009      	str	r0, [sp, #36]	@ 0x24
 8004ea2:	4621      	mov	r1, r4
 8004ea4:	4658      	mov	r0, fp
 8004ea6:	f000 fbc9 	bl	800563c <__mdiff>
 8004eaa:	68c2      	ldr	r2, [r0, #12]
 8004eac:	4606      	mov	r6, r0
 8004eae:	bb02      	cbnz	r2, 8004ef2 <_dtoa_r+0xa22>
 8004eb0:	4601      	mov	r1, r0
 8004eb2:	4648      	mov	r0, r9
 8004eb4:	f000 fba6 	bl	8005604 <__mcmp>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	4631      	mov	r1, r6
 8004ebc:	4658      	mov	r0, fp
 8004ebe:	920c      	str	r2, [sp, #48]	@ 0x30
 8004ec0:	f000 f968 	bl	8005194 <_Bfree>
 8004ec4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004ec6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004ec8:	9e07      	ldr	r6, [sp, #28]
 8004eca:	ea43 0102 	orr.w	r1, r3, r2
 8004ece:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004ed0:	4319      	orrs	r1, r3
 8004ed2:	d110      	bne.n	8004ef6 <_dtoa_r+0xa26>
 8004ed4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004ed8:	d029      	beq.n	8004f2e <_dtoa_r+0xa5e>
 8004eda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	dd02      	ble.n	8004ee6 <_dtoa_r+0xa16>
 8004ee0:	9b08      	ldr	r3, [sp, #32]
 8004ee2:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8004ee6:	9b02      	ldr	r3, [sp, #8]
 8004ee8:	f883 8000 	strb.w	r8, [r3]
 8004eec:	e63b      	b.n	8004b66 <_dtoa_r+0x696>
 8004eee:	4628      	mov	r0, r5
 8004ef0:	e7bb      	b.n	8004e6a <_dtoa_r+0x99a>
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	e7e1      	b.n	8004eba <_dtoa_r+0x9ea>
 8004ef6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	db04      	blt.n	8004f06 <_dtoa_r+0xa36>
 8004efc:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8004efe:	430b      	orrs	r3, r1
 8004f00:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004f02:	430b      	orrs	r3, r1
 8004f04:	d120      	bne.n	8004f48 <_dtoa_r+0xa78>
 8004f06:	2a00      	cmp	r2, #0
 8004f08:	dded      	ble.n	8004ee6 <_dtoa_r+0xa16>
 8004f0a:	4649      	mov	r1, r9
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	4658      	mov	r0, fp
 8004f10:	f000 fb0c 	bl	800552c <__lshift>
 8004f14:	4621      	mov	r1, r4
 8004f16:	4681      	mov	r9, r0
 8004f18:	f000 fb74 	bl	8005604 <__mcmp>
 8004f1c:	2800      	cmp	r0, #0
 8004f1e:	dc03      	bgt.n	8004f28 <_dtoa_r+0xa58>
 8004f20:	d1e1      	bne.n	8004ee6 <_dtoa_r+0xa16>
 8004f22:	f018 0f01 	tst.w	r8, #1
 8004f26:	d0de      	beq.n	8004ee6 <_dtoa_r+0xa16>
 8004f28:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004f2c:	d1d8      	bne.n	8004ee0 <_dtoa_r+0xa10>
 8004f2e:	2339      	movs	r3, #57	@ 0x39
 8004f30:	9a02      	ldr	r2, [sp, #8]
 8004f32:	7013      	strb	r3, [r2, #0]
 8004f34:	4633      	mov	r3, r6
 8004f36:	461e      	mov	r6, r3
 8004f38:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004f3c:	3b01      	subs	r3, #1
 8004f3e:	2a39      	cmp	r2, #57	@ 0x39
 8004f40:	d052      	beq.n	8004fe8 <_dtoa_r+0xb18>
 8004f42:	3201      	adds	r2, #1
 8004f44:	701a      	strb	r2, [r3, #0]
 8004f46:	e60e      	b.n	8004b66 <_dtoa_r+0x696>
 8004f48:	2a00      	cmp	r2, #0
 8004f4a:	dd07      	ble.n	8004f5c <_dtoa_r+0xa8c>
 8004f4c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004f50:	d0ed      	beq.n	8004f2e <_dtoa_r+0xa5e>
 8004f52:	9a02      	ldr	r2, [sp, #8]
 8004f54:	f108 0301 	add.w	r3, r8, #1
 8004f58:	7013      	strb	r3, [r2, #0]
 8004f5a:	e604      	b.n	8004b66 <_dtoa_r+0x696>
 8004f5c:	9b07      	ldr	r3, [sp, #28]
 8004f5e:	9a07      	ldr	r2, [sp, #28]
 8004f60:	f803 8c01 	strb.w	r8, [r3, #-1]
 8004f64:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d028      	beq.n	8004fbc <_dtoa_r+0xaec>
 8004f6a:	4649      	mov	r1, r9
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	220a      	movs	r2, #10
 8004f70:	4658      	mov	r0, fp
 8004f72:	f000 f931 	bl	80051d8 <__multadd>
 8004f76:	42af      	cmp	r7, r5
 8004f78:	4681      	mov	r9, r0
 8004f7a:	f04f 0300 	mov.w	r3, #0
 8004f7e:	f04f 020a 	mov.w	r2, #10
 8004f82:	4639      	mov	r1, r7
 8004f84:	4658      	mov	r0, fp
 8004f86:	d107      	bne.n	8004f98 <_dtoa_r+0xac8>
 8004f88:	f000 f926 	bl	80051d8 <__multadd>
 8004f8c:	4607      	mov	r7, r0
 8004f8e:	4605      	mov	r5, r0
 8004f90:	9b07      	ldr	r3, [sp, #28]
 8004f92:	3301      	adds	r3, #1
 8004f94:	9307      	str	r3, [sp, #28]
 8004f96:	e774      	b.n	8004e82 <_dtoa_r+0x9b2>
 8004f98:	f000 f91e 	bl	80051d8 <__multadd>
 8004f9c:	4629      	mov	r1, r5
 8004f9e:	4607      	mov	r7, r0
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	220a      	movs	r2, #10
 8004fa4:	4658      	mov	r0, fp
 8004fa6:	f000 f917 	bl	80051d8 <__multadd>
 8004faa:	4605      	mov	r5, r0
 8004fac:	e7f0      	b.n	8004f90 <_dtoa_r+0xac0>
 8004fae:	9b08      	ldr	r3, [sp, #32]
 8004fb0:	2700      	movs	r7, #0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	bfcc      	ite	gt
 8004fb6:	461e      	movgt	r6, r3
 8004fb8:	2601      	movle	r6, #1
 8004fba:	4456      	add	r6, sl
 8004fbc:	4649      	mov	r1, r9
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	4658      	mov	r0, fp
 8004fc2:	f000 fab3 	bl	800552c <__lshift>
 8004fc6:	4621      	mov	r1, r4
 8004fc8:	4681      	mov	r9, r0
 8004fca:	f000 fb1b 	bl	8005604 <__mcmp>
 8004fce:	2800      	cmp	r0, #0
 8004fd0:	dcb0      	bgt.n	8004f34 <_dtoa_r+0xa64>
 8004fd2:	d102      	bne.n	8004fda <_dtoa_r+0xb0a>
 8004fd4:	f018 0f01 	tst.w	r8, #1
 8004fd8:	d1ac      	bne.n	8004f34 <_dtoa_r+0xa64>
 8004fda:	4633      	mov	r3, r6
 8004fdc:	461e      	mov	r6, r3
 8004fde:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004fe2:	2a30      	cmp	r2, #48	@ 0x30
 8004fe4:	d0fa      	beq.n	8004fdc <_dtoa_r+0xb0c>
 8004fe6:	e5be      	b.n	8004b66 <_dtoa_r+0x696>
 8004fe8:	459a      	cmp	sl, r3
 8004fea:	d1a4      	bne.n	8004f36 <_dtoa_r+0xa66>
 8004fec:	9b04      	ldr	r3, [sp, #16]
 8004fee:	3301      	adds	r3, #1
 8004ff0:	9304      	str	r3, [sp, #16]
 8004ff2:	2331      	movs	r3, #49	@ 0x31
 8004ff4:	f88a 3000 	strb.w	r3, [sl]
 8004ff8:	e5b5      	b.n	8004b66 <_dtoa_r+0x696>
 8004ffa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004ffc:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800505c <_dtoa_r+0xb8c>
 8005000:	b11b      	cbz	r3, 800500a <_dtoa_r+0xb3a>
 8005002:	f10a 0308 	add.w	r3, sl, #8
 8005006:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005008:	6013      	str	r3, [r2, #0]
 800500a:	4650      	mov	r0, sl
 800500c:	b017      	add	sp, #92	@ 0x5c
 800500e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005012:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005014:	2b01      	cmp	r3, #1
 8005016:	f77f ae3d 	ble.w	8004c94 <_dtoa_r+0x7c4>
 800501a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800501c:	930a      	str	r3, [sp, #40]	@ 0x28
 800501e:	2001      	movs	r0, #1
 8005020:	e65b      	b.n	8004cda <_dtoa_r+0x80a>
 8005022:	9b08      	ldr	r3, [sp, #32]
 8005024:	2b00      	cmp	r3, #0
 8005026:	f77f aed6 	ble.w	8004dd6 <_dtoa_r+0x906>
 800502a:	4656      	mov	r6, sl
 800502c:	4621      	mov	r1, r4
 800502e:	4648      	mov	r0, r9
 8005030:	f7ff f9c3 	bl	80043ba <quorem>
 8005034:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005038:	9b08      	ldr	r3, [sp, #32]
 800503a:	f806 8b01 	strb.w	r8, [r6], #1
 800503e:	eba6 020a 	sub.w	r2, r6, sl
 8005042:	4293      	cmp	r3, r2
 8005044:	ddb3      	ble.n	8004fae <_dtoa_r+0xade>
 8005046:	4649      	mov	r1, r9
 8005048:	2300      	movs	r3, #0
 800504a:	220a      	movs	r2, #10
 800504c:	4658      	mov	r0, fp
 800504e:	f000 f8c3 	bl	80051d8 <__multadd>
 8005052:	4681      	mov	r9, r0
 8005054:	e7ea      	b.n	800502c <_dtoa_r+0xb5c>
 8005056:	bf00      	nop
 8005058:	0800602a 	.word	0x0800602a
 800505c:	08005fae 	.word	0x08005fae

08005060 <_free_r>:
 8005060:	b538      	push	{r3, r4, r5, lr}
 8005062:	4605      	mov	r5, r0
 8005064:	2900      	cmp	r1, #0
 8005066:	d040      	beq.n	80050ea <_free_r+0x8a>
 8005068:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800506c:	1f0c      	subs	r4, r1, #4
 800506e:	2b00      	cmp	r3, #0
 8005070:	bfb8      	it	lt
 8005072:	18e4      	addlt	r4, r4, r3
 8005074:	f7fe fb88 	bl	8003788 <__malloc_lock>
 8005078:	4a1c      	ldr	r2, [pc, #112]	@ (80050ec <_free_r+0x8c>)
 800507a:	6813      	ldr	r3, [r2, #0]
 800507c:	b933      	cbnz	r3, 800508c <_free_r+0x2c>
 800507e:	6063      	str	r3, [r4, #4]
 8005080:	6014      	str	r4, [r2, #0]
 8005082:	4628      	mov	r0, r5
 8005084:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005088:	f7fe bb84 	b.w	8003794 <__malloc_unlock>
 800508c:	42a3      	cmp	r3, r4
 800508e:	d908      	bls.n	80050a2 <_free_r+0x42>
 8005090:	6820      	ldr	r0, [r4, #0]
 8005092:	1821      	adds	r1, r4, r0
 8005094:	428b      	cmp	r3, r1
 8005096:	bf01      	itttt	eq
 8005098:	6819      	ldreq	r1, [r3, #0]
 800509a:	685b      	ldreq	r3, [r3, #4]
 800509c:	1809      	addeq	r1, r1, r0
 800509e:	6021      	streq	r1, [r4, #0]
 80050a0:	e7ed      	b.n	800507e <_free_r+0x1e>
 80050a2:	461a      	mov	r2, r3
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	b10b      	cbz	r3, 80050ac <_free_r+0x4c>
 80050a8:	42a3      	cmp	r3, r4
 80050aa:	d9fa      	bls.n	80050a2 <_free_r+0x42>
 80050ac:	6811      	ldr	r1, [r2, #0]
 80050ae:	1850      	adds	r0, r2, r1
 80050b0:	42a0      	cmp	r0, r4
 80050b2:	d10b      	bne.n	80050cc <_free_r+0x6c>
 80050b4:	6820      	ldr	r0, [r4, #0]
 80050b6:	4401      	add	r1, r0
 80050b8:	1850      	adds	r0, r2, r1
 80050ba:	4283      	cmp	r3, r0
 80050bc:	6011      	str	r1, [r2, #0]
 80050be:	d1e0      	bne.n	8005082 <_free_r+0x22>
 80050c0:	6818      	ldr	r0, [r3, #0]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	4408      	add	r0, r1
 80050c6:	6010      	str	r0, [r2, #0]
 80050c8:	6053      	str	r3, [r2, #4]
 80050ca:	e7da      	b.n	8005082 <_free_r+0x22>
 80050cc:	d902      	bls.n	80050d4 <_free_r+0x74>
 80050ce:	230c      	movs	r3, #12
 80050d0:	602b      	str	r3, [r5, #0]
 80050d2:	e7d6      	b.n	8005082 <_free_r+0x22>
 80050d4:	6820      	ldr	r0, [r4, #0]
 80050d6:	1821      	adds	r1, r4, r0
 80050d8:	428b      	cmp	r3, r1
 80050da:	bf01      	itttt	eq
 80050dc:	6819      	ldreq	r1, [r3, #0]
 80050de:	685b      	ldreq	r3, [r3, #4]
 80050e0:	1809      	addeq	r1, r1, r0
 80050e2:	6021      	streq	r1, [r4, #0]
 80050e4:	6063      	str	r3, [r4, #4]
 80050e6:	6054      	str	r4, [r2, #4]
 80050e8:	e7cb      	b.n	8005082 <_free_r+0x22>
 80050ea:	bd38      	pop	{r3, r4, r5, pc}
 80050ec:	20000350 	.word	0x20000350

080050f0 <__ascii_mbtowc>:
 80050f0:	b082      	sub	sp, #8
 80050f2:	b901      	cbnz	r1, 80050f6 <__ascii_mbtowc+0x6>
 80050f4:	a901      	add	r1, sp, #4
 80050f6:	b142      	cbz	r2, 800510a <__ascii_mbtowc+0x1a>
 80050f8:	b14b      	cbz	r3, 800510e <__ascii_mbtowc+0x1e>
 80050fa:	7813      	ldrb	r3, [r2, #0]
 80050fc:	600b      	str	r3, [r1, #0]
 80050fe:	7812      	ldrb	r2, [r2, #0]
 8005100:	1e10      	subs	r0, r2, #0
 8005102:	bf18      	it	ne
 8005104:	2001      	movne	r0, #1
 8005106:	b002      	add	sp, #8
 8005108:	4770      	bx	lr
 800510a:	4610      	mov	r0, r2
 800510c:	e7fb      	b.n	8005106 <__ascii_mbtowc+0x16>
 800510e:	f06f 0001 	mvn.w	r0, #1
 8005112:	e7f8      	b.n	8005106 <__ascii_mbtowc+0x16>

08005114 <_Balloc>:
 8005114:	b570      	push	{r4, r5, r6, lr}
 8005116:	69c6      	ldr	r6, [r0, #28]
 8005118:	4604      	mov	r4, r0
 800511a:	460d      	mov	r5, r1
 800511c:	b976      	cbnz	r6, 800513c <_Balloc+0x28>
 800511e:	2010      	movs	r0, #16
 8005120:	f7fe fa88 	bl	8003634 <malloc>
 8005124:	4602      	mov	r2, r0
 8005126:	61e0      	str	r0, [r4, #28]
 8005128:	b920      	cbnz	r0, 8005134 <_Balloc+0x20>
 800512a:	216b      	movs	r1, #107	@ 0x6b
 800512c:	4b17      	ldr	r3, [pc, #92]	@ (800518c <_Balloc+0x78>)
 800512e:	4818      	ldr	r0, [pc, #96]	@ (8005190 <_Balloc+0x7c>)
 8005130:	f000 fc26 	bl	8005980 <__assert_func>
 8005134:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005138:	6006      	str	r6, [r0, #0]
 800513a:	60c6      	str	r6, [r0, #12]
 800513c:	69e6      	ldr	r6, [r4, #28]
 800513e:	68f3      	ldr	r3, [r6, #12]
 8005140:	b183      	cbz	r3, 8005164 <_Balloc+0x50>
 8005142:	69e3      	ldr	r3, [r4, #28]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800514a:	b9b8      	cbnz	r0, 800517c <_Balloc+0x68>
 800514c:	2101      	movs	r1, #1
 800514e:	fa01 f605 	lsl.w	r6, r1, r5
 8005152:	1d72      	adds	r2, r6, #5
 8005154:	4620      	mov	r0, r4
 8005156:	0092      	lsls	r2, r2, #2
 8005158:	f000 fc30 	bl	80059bc <_calloc_r>
 800515c:	b160      	cbz	r0, 8005178 <_Balloc+0x64>
 800515e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005162:	e00e      	b.n	8005182 <_Balloc+0x6e>
 8005164:	2221      	movs	r2, #33	@ 0x21
 8005166:	2104      	movs	r1, #4
 8005168:	4620      	mov	r0, r4
 800516a:	f000 fc27 	bl	80059bc <_calloc_r>
 800516e:	69e3      	ldr	r3, [r4, #28]
 8005170:	60f0      	str	r0, [r6, #12]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d1e4      	bne.n	8005142 <_Balloc+0x2e>
 8005178:	2000      	movs	r0, #0
 800517a:	bd70      	pop	{r4, r5, r6, pc}
 800517c:	6802      	ldr	r2, [r0, #0]
 800517e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005182:	2300      	movs	r3, #0
 8005184:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005188:	e7f7      	b.n	800517a <_Balloc+0x66>
 800518a:	bf00      	nop
 800518c:	08005fbb 	.word	0x08005fbb
 8005190:	0800603b 	.word	0x0800603b

08005194 <_Bfree>:
 8005194:	b570      	push	{r4, r5, r6, lr}
 8005196:	69c6      	ldr	r6, [r0, #28]
 8005198:	4605      	mov	r5, r0
 800519a:	460c      	mov	r4, r1
 800519c:	b976      	cbnz	r6, 80051bc <_Bfree+0x28>
 800519e:	2010      	movs	r0, #16
 80051a0:	f7fe fa48 	bl	8003634 <malloc>
 80051a4:	4602      	mov	r2, r0
 80051a6:	61e8      	str	r0, [r5, #28]
 80051a8:	b920      	cbnz	r0, 80051b4 <_Bfree+0x20>
 80051aa:	218f      	movs	r1, #143	@ 0x8f
 80051ac:	4b08      	ldr	r3, [pc, #32]	@ (80051d0 <_Bfree+0x3c>)
 80051ae:	4809      	ldr	r0, [pc, #36]	@ (80051d4 <_Bfree+0x40>)
 80051b0:	f000 fbe6 	bl	8005980 <__assert_func>
 80051b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80051b8:	6006      	str	r6, [r0, #0]
 80051ba:	60c6      	str	r6, [r0, #12]
 80051bc:	b13c      	cbz	r4, 80051ce <_Bfree+0x3a>
 80051be:	69eb      	ldr	r3, [r5, #28]
 80051c0:	6862      	ldr	r2, [r4, #4]
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80051c8:	6021      	str	r1, [r4, #0]
 80051ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80051ce:	bd70      	pop	{r4, r5, r6, pc}
 80051d0:	08005fbb 	.word	0x08005fbb
 80051d4:	0800603b 	.word	0x0800603b

080051d8 <__multadd>:
 80051d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051dc:	4607      	mov	r7, r0
 80051de:	460c      	mov	r4, r1
 80051e0:	461e      	mov	r6, r3
 80051e2:	2000      	movs	r0, #0
 80051e4:	690d      	ldr	r5, [r1, #16]
 80051e6:	f101 0c14 	add.w	ip, r1, #20
 80051ea:	f8dc 3000 	ldr.w	r3, [ip]
 80051ee:	3001      	adds	r0, #1
 80051f0:	b299      	uxth	r1, r3
 80051f2:	fb02 6101 	mla	r1, r2, r1, r6
 80051f6:	0c1e      	lsrs	r6, r3, #16
 80051f8:	0c0b      	lsrs	r3, r1, #16
 80051fa:	fb02 3306 	mla	r3, r2, r6, r3
 80051fe:	b289      	uxth	r1, r1
 8005200:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005204:	4285      	cmp	r5, r0
 8005206:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800520a:	f84c 1b04 	str.w	r1, [ip], #4
 800520e:	dcec      	bgt.n	80051ea <__multadd+0x12>
 8005210:	b30e      	cbz	r6, 8005256 <__multadd+0x7e>
 8005212:	68a3      	ldr	r3, [r4, #8]
 8005214:	42ab      	cmp	r3, r5
 8005216:	dc19      	bgt.n	800524c <__multadd+0x74>
 8005218:	6861      	ldr	r1, [r4, #4]
 800521a:	4638      	mov	r0, r7
 800521c:	3101      	adds	r1, #1
 800521e:	f7ff ff79 	bl	8005114 <_Balloc>
 8005222:	4680      	mov	r8, r0
 8005224:	b928      	cbnz	r0, 8005232 <__multadd+0x5a>
 8005226:	4602      	mov	r2, r0
 8005228:	21ba      	movs	r1, #186	@ 0xba
 800522a:	4b0c      	ldr	r3, [pc, #48]	@ (800525c <__multadd+0x84>)
 800522c:	480c      	ldr	r0, [pc, #48]	@ (8005260 <__multadd+0x88>)
 800522e:	f000 fba7 	bl	8005980 <__assert_func>
 8005232:	6922      	ldr	r2, [r4, #16]
 8005234:	f104 010c 	add.w	r1, r4, #12
 8005238:	3202      	adds	r2, #2
 800523a:	0092      	lsls	r2, r2, #2
 800523c:	300c      	adds	r0, #12
 800523e:	f7ff f8ae 	bl	800439e <memcpy>
 8005242:	4621      	mov	r1, r4
 8005244:	4638      	mov	r0, r7
 8005246:	f7ff ffa5 	bl	8005194 <_Bfree>
 800524a:	4644      	mov	r4, r8
 800524c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005250:	3501      	adds	r5, #1
 8005252:	615e      	str	r6, [r3, #20]
 8005254:	6125      	str	r5, [r4, #16]
 8005256:	4620      	mov	r0, r4
 8005258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800525c:	0800602a 	.word	0x0800602a
 8005260:	0800603b 	.word	0x0800603b

08005264 <__hi0bits>:
 8005264:	4603      	mov	r3, r0
 8005266:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800526a:	bf3a      	itte	cc
 800526c:	0403      	lslcc	r3, r0, #16
 800526e:	2010      	movcc	r0, #16
 8005270:	2000      	movcs	r0, #0
 8005272:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005276:	bf3c      	itt	cc
 8005278:	021b      	lslcc	r3, r3, #8
 800527a:	3008      	addcc	r0, #8
 800527c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005280:	bf3c      	itt	cc
 8005282:	011b      	lslcc	r3, r3, #4
 8005284:	3004      	addcc	r0, #4
 8005286:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800528a:	bf3c      	itt	cc
 800528c:	009b      	lslcc	r3, r3, #2
 800528e:	3002      	addcc	r0, #2
 8005290:	2b00      	cmp	r3, #0
 8005292:	db05      	blt.n	80052a0 <__hi0bits+0x3c>
 8005294:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005298:	f100 0001 	add.w	r0, r0, #1
 800529c:	bf08      	it	eq
 800529e:	2020      	moveq	r0, #32
 80052a0:	4770      	bx	lr

080052a2 <__lo0bits>:
 80052a2:	6803      	ldr	r3, [r0, #0]
 80052a4:	4602      	mov	r2, r0
 80052a6:	f013 0007 	ands.w	r0, r3, #7
 80052aa:	d00b      	beq.n	80052c4 <__lo0bits+0x22>
 80052ac:	07d9      	lsls	r1, r3, #31
 80052ae:	d421      	bmi.n	80052f4 <__lo0bits+0x52>
 80052b0:	0798      	lsls	r0, r3, #30
 80052b2:	bf49      	itett	mi
 80052b4:	085b      	lsrmi	r3, r3, #1
 80052b6:	089b      	lsrpl	r3, r3, #2
 80052b8:	2001      	movmi	r0, #1
 80052ba:	6013      	strmi	r3, [r2, #0]
 80052bc:	bf5c      	itt	pl
 80052be:	2002      	movpl	r0, #2
 80052c0:	6013      	strpl	r3, [r2, #0]
 80052c2:	4770      	bx	lr
 80052c4:	b299      	uxth	r1, r3
 80052c6:	b909      	cbnz	r1, 80052cc <__lo0bits+0x2a>
 80052c8:	2010      	movs	r0, #16
 80052ca:	0c1b      	lsrs	r3, r3, #16
 80052cc:	b2d9      	uxtb	r1, r3
 80052ce:	b909      	cbnz	r1, 80052d4 <__lo0bits+0x32>
 80052d0:	3008      	adds	r0, #8
 80052d2:	0a1b      	lsrs	r3, r3, #8
 80052d4:	0719      	lsls	r1, r3, #28
 80052d6:	bf04      	itt	eq
 80052d8:	091b      	lsreq	r3, r3, #4
 80052da:	3004      	addeq	r0, #4
 80052dc:	0799      	lsls	r1, r3, #30
 80052de:	bf04      	itt	eq
 80052e0:	089b      	lsreq	r3, r3, #2
 80052e2:	3002      	addeq	r0, #2
 80052e4:	07d9      	lsls	r1, r3, #31
 80052e6:	d403      	bmi.n	80052f0 <__lo0bits+0x4e>
 80052e8:	085b      	lsrs	r3, r3, #1
 80052ea:	f100 0001 	add.w	r0, r0, #1
 80052ee:	d003      	beq.n	80052f8 <__lo0bits+0x56>
 80052f0:	6013      	str	r3, [r2, #0]
 80052f2:	4770      	bx	lr
 80052f4:	2000      	movs	r0, #0
 80052f6:	4770      	bx	lr
 80052f8:	2020      	movs	r0, #32
 80052fa:	4770      	bx	lr

080052fc <__i2b>:
 80052fc:	b510      	push	{r4, lr}
 80052fe:	460c      	mov	r4, r1
 8005300:	2101      	movs	r1, #1
 8005302:	f7ff ff07 	bl	8005114 <_Balloc>
 8005306:	4602      	mov	r2, r0
 8005308:	b928      	cbnz	r0, 8005316 <__i2b+0x1a>
 800530a:	f240 1145 	movw	r1, #325	@ 0x145
 800530e:	4b04      	ldr	r3, [pc, #16]	@ (8005320 <__i2b+0x24>)
 8005310:	4804      	ldr	r0, [pc, #16]	@ (8005324 <__i2b+0x28>)
 8005312:	f000 fb35 	bl	8005980 <__assert_func>
 8005316:	2301      	movs	r3, #1
 8005318:	6144      	str	r4, [r0, #20]
 800531a:	6103      	str	r3, [r0, #16]
 800531c:	bd10      	pop	{r4, pc}
 800531e:	bf00      	nop
 8005320:	0800602a 	.word	0x0800602a
 8005324:	0800603b 	.word	0x0800603b

08005328 <__multiply>:
 8005328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800532c:	4614      	mov	r4, r2
 800532e:	690a      	ldr	r2, [r1, #16]
 8005330:	6923      	ldr	r3, [r4, #16]
 8005332:	460f      	mov	r7, r1
 8005334:	429a      	cmp	r2, r3
 8005336:	bfa2      	ittt	ge
 8005338:	4623      	movge	r3, r4
 800533a:	460c      	movge	r4, r1
 800533c:	461f      	movge	r7, r3
 800533e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005342:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8005346:	68a3      	ldr	r3, [r4, #8]
 8005348:	6861      	ldr	r1, [r4, #4]
 800534a:	eb0a 0609 	add.w	r6, sl, r9
 800534e:	42b3      	cmp	r3, r6
 8005350:	b085      	sub	sp, #20
 8005352:	bfb8      	it	lt
 8005354:	3101      	addlt	r1, #1
 8005356:	f7ff fedd 	bl	8005114 <_Balloc>
 800535a:	b930      	cbnz	r0, 800536a <__multiply+0x42>
 800535c:	4602      	mov	r2, r0
 800535e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005362:	4b43      	ldr	r3, [pc, #268]	@ (8005470 <__multiply+0x148>)
 8005364:	4843      	ldr	r0, [pc, #268]	@ (8005474 <__multiply+0x14c>)
 8005366:	f000 fb0b 	bl	8005980 <__assert_func>
 800536a:	f100 0514 	add.w	r5, r0, #20
 800536e:	462b      	mov	r3, r5
 8005370:	2200      	movs	r2, #0
 8005372:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005376:	4543      	cmp	r3, r8
 8005378:	d321      	bcc.n	80053be <__multiply+0x96>
 800537a:	f107 0114 	add.w	r1, r7, #20
 800537e:	f104 0214 	add.w	r2, r4, #20
 8005382:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8005386:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800538a:	9302      	str	r3, [sp, #8]
 800538c:	1b13      	subs	r3, r2, r4
 800538e:	3b15      	subs	r3, #21
 8005390:	f023 0303 	bic.w	r3, r3, #3
 8005394:	3304      	adds	r3, #4
 8005396:	f104 0715 	add.w	r7, r4, #21
 800539a:	42ba      	cmp	r2, r7
 800539c:	bf38      	it	cc
 800539e:	2304      	movcc	r3, #4
 80053a0:	9301      	str	r3, [sp, #4]
 80053a2:	9b02      	ldr	r3, [sp, #8]
 80053a4:	9103      	str	r1, [sp, #12]
 80053a6:	428b      	cmp	r3, r1
 80053a8:	d80c      	bhi.n	80053c4 <__multiply+0x9c>
 80053aa:	2e00      	cmp	r6, #0
 80053ac:	dd03      	ble.n	80053b6 <__multiply+0x8e>
 80053ae:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d05a      	beq.n	800546c <__multiply+0x144>
 80053b6:	6106      	str	r6, [r0, #16]
 80053b8:	b005      	add	sp, #20
 80053ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053be:	f843 2b04 	str.w	r2, [r3], #4
 80053c2:	e7d8      	b.n	8005376 <__multiply+0x4e>
 80053c4:	f8b1 a000 	ldrh.w	sl, [r1]
 80053c8:	f1ba 0f00 	cmp.w	sl, #0
 80053cc:	d023      	beq.n	8005416 <__multiply+0xee>
 80053ce:	46a9      	mov	r9, r5
 80053d0:	f04f 0c00 	mov.w	ip, #0
 80053d4:	f104 0e14 	add.w	lr, r4, #20
 80053d8:	f85e 7b04 	ldr.w	r7, [lr], #4
 80053dc:	f8d9 3000 	ldr.w	r3, [r9]
 80053e0:	fa1f fb87 	uxth.w	fp, r7
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	fb0a 330b 	mla	r3, sl, fp, r3
 80053ea:	4463      	add	r3, ip
 80053ec:	f8d9 c000 	ldr.w	ip, [r9]
 80053f0:	0c3f      	lsrs	r7, r7, #16
 80053f2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80053f6:	fb0a c707 	mla	r7, sl, r7, ip
 80053fa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80053fe:	b29b      	uxth	r3, r3
 8005400:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005404:	4572      	cmp	r2, lr
 8005406:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800540a:	f849 3b04 	str.w	r3, [r9], #4
 800540e:	d8e3      	bhi.n	80053d8 <__multiply+0xb0>
 8005410:	9b01      	ldr	r3, [sp, #4]
 8005412:	f845 c003 	str.w	ip, [r5, r3]
 8005416:	9b03      	ldr	r3, [sp, #12]
 8005418:	3104      	adds	r1, #4
 800541a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800541e:	f1b9 0f00 	cmp.w	r9, #0
 8005422:	d021      	beq.n	8005468 <__multiply+0x140>
 8005424:	46ae      	mov	lr, r5
 8005426:	f04f 0a00 	mov.w	sl, #0
 800542a:	682b      	ldr	r3, [r5, #0]
 800542c:	f104 0c14 	add.w	ip, r4, #20
 8005430:	f8bc b000 	ldrh.w	fp, [ip]
 8005434:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005438:	b29b      	uxth	r3, r3
 800543a:	fb09 770b 	mla	r7, r9, fp, r7
 800543e:	4457      	add	r7, sl
 8005440:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005444:	f84e 3b04 	str.w	r3, [lr], #4
 8005448:	f85c 3b04 	ldr.w	r3, [ip], #4
 800544c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005450:	f8be 3000 	ldrh.w	r3, [lr]
 8005454:	4562      	cmp	r2, ip
 8005456:	fb09 330a 	mla	r3, r9, sl, r3
 800545a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800545e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005462:	d8e5      	bhi.n	8005430 <__multiply+0x108>
 8005464:	9f01      	ldr	r7, [sp, #4]
 8005466:	51eb      	str	r3, [r5, r7]
 8005468:	3504      	adds	r5, #4
 800546a:	e79a      	b.n	80053a2 <__multiply+0x7a>
 800546c:	3e01      	subs	r6, #1
 800546e:	e79c      	b.n	80053aa <__multiply+0x82>
 8005470:	0800602a 	.word	0x0800602a
 8005474:	0800603b 	.word	0x0800603b

08005478 <__pow5mult>:
 8005478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800547c:	4615      	mov	r5, r2
 800547e:	f012 0203 	ands.w	r2, r2, #3
 8005482:	4607      	mov	r7, r0
 8005484:	460e      	mov	r6, r1
 8005486:	d007      	beq.n	8005498 <__pow5mult+0x20>
 8005488:	4c25      	ldr	r4, [pc, #148]	@ (8005520 <__pow5mult+0xa8>)
 800548a:	3a01      	subs	r2, #1
 800548c:	2300      	movs	r3, #0
 800548e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005492:	f7ff fea1 	bl	80051d8 <__multadd>
 8005496:	4606      	mov	r6, r0
 8005498:	10ad      	asrs	r5, r5, #2
 800549a:	d03d      	beq.n	8005518 <__pow5mult+0xa0>
 800549c:	69fc      	ldr	r4, [r7, #28]
 800549e:	b97c      	cbnz	r4, 80054c0 <__pow5mult+0x48>
 80054a0:	2010      	movs	r0, #16
 80054a2:	f7fe f8c7 	bl	8003634 <malloc>
 80054a6:	4602      	mov	r2, r0
 80054a8:	61f8      	str	r0, [r7, #28]
 80054aa:	b928      	cbnz	r0, 80054b8 <__pow5mult+0x40>
 80054ac:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80054b0:	4b1c      	ldr	r3, [pc, #112]	@ (8005524 <__pow5mult+0xac>)
 80054b2:	481d      	ldr	r0, [pc, #116]	@ (8005528 <__pow5mult+0xb0>)
 80054b4:	f000 fa64 	bl	8005980 <__assert_func>
 80054b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80054bc:	6004      	str	r4, [r0, #0]
 80054be:	60c4      	str	r4, [r0, #12]
 80054c0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80054c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80054c8:	b94c      	cbnz	r4, 80054de <__pow5mult+0x66>
 80054ca:	f240 2171 	movw	r1, #625	@ 0x271
 80054ce:	4638      	mov	r0, r7
 80054d0:	f7ff ff14 	bl	80052fc <__i2b>
 80054d4:	2300      	movs	r3, #0
 80054d6:	4604      	mov	r4, r0
 80054d8:	f8c8 0008 	str.w	r0, [r8, #8]
 80054dc:	6003      	str	r3, [r0, #0]
 80054de:	f04f 0900 	mov.w	r9, #0
 80054e2:	07eb      	lsls	r3, r5, #31
 80054e4:	d50a      	bpl.n	80054fc <__pow5mult+0x84>
 80054e6:	4631      	mov	r1, r6
 80054e8:	4622      	mov	r2, r4
 80054ea:	4638      	mov	r0, r7
 80054ec:	f7ff ff1c 	bl	8005328 <__multiply>
 80054f0:	4680      	mov	r8, r0
 80054f2:	4631      	mov	r1, r6
 80054f4:	4638      	mov	r0, r7
 80054f6:	f7ff fe4d 	bl	8005194 <_Bfree>
 80054fa:	4646      	mov	r6, r8
 80054fc:	106d      	asrs	r5, r5, #1
 80054fe:	d00b      	beq.n	8005518 <__pow5mult+0xa0>
 8005500:	6820      	ldr	r0, [r4, #0]
 8005502:	b938      	cbnz	r0, 8005514 <__pow5mult+0x9c>
 8005504:	4622      	mov	r2, r4
 8005506:	4621      	mov	r1, r4
 8005508:	4638      	mov	r0, r7
 800550a:	f7ff ff0d 	bl	8005328 <__multiply>
 800550e:	6020      	str	r0, [r4, #0]
 8005510:	f8c0 9000 	str.w	r9, [r0]
 8005514:	4604      	mov	r4, r0
 8005516:	e7e4      	b.n	80054e2 <__pow5mult+0x6a>
 8005518:	4630      	mov	r0, r6
 800551a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800551e:	bf00      	nop
 8005520:	08006094 	.word	0x08006094
 8005524:	08005fbb 	.word	0x08005fbb
 8005528:	0800603b 	.word	0x0800603b

0800552c <__lshift>:
 800552c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005530:	460c      	mov	r4, r1
 8005532:	4607      	mov	r7, r0
 8005534:	4691      	mov	r9, r2
 8005536:	6923      	ldr	r3, [r4, #16]
 8005538:	6849      	ldr	r1, [r1, #4]
 800553a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800553e:	68a3      	ldr	r3, [r4, #8]
 8005540:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005544:	f108 0601 	add.w	r6, r8, #1
 8005548:	42b3      	cmp	r3, r6
 800554a:	db0b      	blt.n	8005564 <__lshift+0x38>
 800554c:	4638      	mov	r0, r7
 800554e:	f7ff fde1 	bl	8005114 <_Balloc>
 8005552:	4605      	mov	r5, r0
 8005554:	b948      	cbnz	r0, 800556a <__lshift+0x3e>
 8005556:	4602      	mov	r2, r0
 8005558:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800555c:	4b27      	ldr	r3, [pc, #156]	@ (80055fc <__lshift+0xd0>)
 800555e:	4828      	ldr	r0, [pc, #160]	@ (8005600 <__lshift+0xd4>)
 8005560:	f000 fa0e 	bl	8005980 <__assert_func>
 8005564:	3101      	adds	r1, #1
 8005566:	005b      	lsls	r3, r3, #1
 8005568:	e7ee      	b.n	8005548 <__lshift+0x1c>
 800556a:	2300      	movs	r3, #0
 800556c:	f100 0114 	add.w	r1, r0, #20
 8005570:	f100 0210 	add.w	r2, r0, #16
 8005574:	4618      	mov	r0, r3
 8005576:	4553      	cmp	r3, sl
 8005578:	db33      	blt.n	80055e2 <__lshift+0xb6>
 800557a:	6920      	ldr	r0, [r4, #16]
 800557c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005580:	f104 0314 	add.w	r3, r4, #20
 8005584:	f019 091f 	ands.w	r9, r9, #31
 8005588:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800558c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005590:	d02b      	beq.n	80055ea <__lshift+0xbe>
 8005592:	468a      	mov	sl, r1
 8005594:	2200      	movs	r2, #0
 8005596:	f1c9 0e20 	rsb	lr, r9, #32
 800559a:	6818      	ldr	r0, [r3, #0]
 800559c:	fa00 f009 	lsl.w	r0, r0, r9
 80055a0:	4310      	orrs	r0, r2
 80055a2:	f84a 0b04 	str.w	r0, [sl], #4
 80055a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80055aa:	459c      	cmp	ip, r3
 80055ac:	fa22 f20e 	lsr.w	r2, r2, lr
 80055b0:	d8f3      	bhi.n	800559a <__lshift+0x6e>
 80055b2:	ebac 0304 	sub.w	r3, ip, r4
 80055b6:	3b15      	subs	r3, #21
 80055b8:	f023 0303 	bic.w	r3, r3, #3
 80055bc:	3304      	adds	r3, #4
 80055be:	f104 0015 	add.w	r0, r4, #21
 80055c2:	4584      	cmp	ip, r0
 80055c4:	bf38      	it	cc
 80055c6:	2304      	movcc	r3, #4
 80055c8:	50ca      	str	r2, [r1, r3]
 80055ca:	b10a      	cbz	r2, 80055d0 <__lshift+0xa4>
 80055cc:	f108 0602 	add.w	r6, r8, #2
 80055d0:	3e01      	subs	r6, #1
 80055d2:	4638      	mov	r0, r7
 80055d4:	4621      	mov	r1, r4
 80055d6:	612e      	str	r6, [r5, #16]
 80055d8:	f7ff fddc 	bl	8005194 <_Bfree>
 80055dc:	4628      	mov	r0, r5
 80055de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055e2:	f842 0f04 	str.w	r0, [r2, #4]!
 80055e6:	3301      	adds	r3, #1
 80055e8:	e7c5      	b.n	8005576 <__lshift+0x4a>
 80055ea:	3904      	subs	r1, #4
 80055ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80055f0:	459c      	cmp	ip, r3
 80055f2:	f841 2f04 	str.w	r2, [r1, #4]!
 80055f6:	d8f9      	bhi.n	80055ec <__lshift+0xc0>
 80055f8:	e7ea      	b.n	80055d0 <__lshift+0xa4>
 80055fa:	bf00      	nop
 80055fc:	0800602a 	.word	0x0800602a
 8005600:	0800603b 	.word	0x0800603b

08005604 <__mcmp>:
 8005604:	4603      	mov	r3, r0
 8005606:	690a      	ldr	r2, [r1, #16]
 8005608:	6900      	ldr	r0, [r0, #16]
 800560a:	b530      	push	{r4, r5, lr}
 800560c:	1a80      	subs	r0, r0, r2
 800560e:	d10e      	bne.n	800562e <__mcmp+0x2a>
 8005610:	3314      	adds	r3, #20
 8005612:	3114      	adds	r1, #20
 8005614:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005618:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800561c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005620:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005624:	4295      	cmp	r5, r2
 8005626:	d003      	beq.n	8005630 <__mcmp+0x2c>
 8005628:	d205      	bcs.n	8005636 <__mcmp+0x32>
 800562a:	f04f 30ff 	mov.w	r0, #4294967295
 800562e:	bd30      	pop	{r4, r5, pc}
 8005630:	42a3      	cmp	r3, r4
 8005632:	d3f3      	bcc.n	800561c <__mcmp+0x18>
 8005634:	e7fb      	b.n	800562e <__mcmp+0x2a>
 8005636:	2001      	movs	r0, #1
 8005638:	e7f9      	b.n	800562e <__mcmp+0x2a>
	...

0800563c <__mdiff>:
 800563c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005640:	4689      	mov	r9, r1
 8005642:	4606      	mov	r6, r0
 8005644:	4611      	mov	r1, r2
 8005646:	4648      	mov	r0, r9
 8005648:	4614      	mov	r4, r2
 800564a:	f7ff ffdb 	bl	8005604 <__mcmp>
 800564e:	1e05      	subs	r5, r0, #0
 8005650:	d112      	bne.n	8005678 <__mdiff+0x3c>
 8005652:	4629      	mov	r1, r5
 8005654:	4630      	mov	r0, r6
 8005656:	f7ff fd5d 	bl	8005114 <_Balloc>
 800565a:	4602      	mov	r2, r0
 800565c:	b928      	cbnz	r0, 800566a <__mdiff+0x2e>
 800565e:	f240 2137 	movw	r1, #567	@ 0x237
 8005662:	4b3e      	ldr	r3, [pc, #248]	@ (800575c <__mdiff+0x120>)
 8005664:	483e      	ldr	r0, [pc, #248]	@ (8005760 <__mdiff+0x124>)
 8005666:	f000 f98b 	bl	8005980 <__assert_func>
 800566a:	2301      	movs	r3, #1
 800566c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005670:	4610      	mov	r0, r2
 8005672:	b003      	add	sp, #12
 8005674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005678:	bfbc      	itt	lt
 800567a:	464b      	movlt	r3, r9
 800567c:	46a1      	movlt	r9, r4
 800567e:	4630      	mov	r0, r6
 8005680:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005684:	bfba      	itte	lt
 8005686:	461c      	movlt	r4, r3
 8005688:	2501      	movlt	r5, #1
 800568a:	2500      	movge	r5, #0
 800568c:	f7ff fd42 	bl	8005114 <_Balloc>
 8005690:	4602      	mov	r2, r0
 8005692:	b918      	cbnz	r0, 800569c <__mdiff+0x60>
 8005694:	f240 2145 	movw	r1, #581	@ 0x245
 8005698:	4b30      	ldr	r3, [pc, #192]	@ (800575c <__mdiff+0x120>)
 800569a:	e7e3      	b.n	8005664 <__mdiff+0x28>
 800569c:	f100 0b14 	add.w	fp, r0, #20
 80056a0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80056a4:	f109 0310 	add.w	r3, r9, #16
 80056a8:	60c5      	str	r5, [r0, #12]
 80056aa:	f04f 0c00 	mov.w	ip, #0
 80056ae:	f109 0514 	add.w	r5, r9, #20
 80056b2:	46d9      	mov	r9, fp
 80056b4:	6926      	ldr	r6, [r4, #16]
 80056b6:	f104 0e14 	add.w	lr, r4, #20
 80056ba:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80056be:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80056c2:	9301      	str	r3, [sp, #4]
 80056c4:	9b01      	ldr	r3, [sp, #4]
 80056c6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80056ca:	f853 af04 	ldr.w	sl, [r3, #4]!
 80056ce:	b281      	uxth	r1, r0
 80056d0:	9301      	str	r3, [sp, #4]
 80056d2:	fa1f f38a 	uxth.w	r3, sl
 80056d6:	1a5b      	subs	r3, r3, r1
 80056d8:	0c00      	lsrs	r0, r0, #16
 80056da:	4463      	add	r3, ip
 80056dc:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80056e0:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80056ea:	4576      	cmp	r6, lr
 80056ec:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80056f0:	f849 3b04 	str.w	r3, [r9], #4
 80056f4:	d8e6      	bhi.n	80056c4 <__mdiff+0x88>
 80056f6:	1b33      	subs	r3, r6, r4
 80056f8:	3b15      	subs	r3, #21
 80056fa:	f023 0303 	bic.w	r3, r3, #3
 80056fe:	3415      	adds	r4, #21
 8005700:	3304      	adds	r3, #4
 8005702:	42a6      	cmp	r6, r4
 8005704:	bf38      	it	cc
 8005706:	2304      	movcc	r3, #4
 8005708:	441d      	add	r5, r3
 800570a:	445b      	add	r3, fp
 800570c:	461e      	mov	r6, r3
 800570e:	462c      	mov	r4, r5
 8005710:	4544      	cmp	r4, r8
 8005712:	d30e      	bcc.n	8005732 <__mdiff+0xf6>
 8005714:	f108 0103 	add.w	r1, r8, #3
 8005718:	1b49      	subs	r1, r1, r5
 800571a:	f021 0103 	bic.w	r1, r1, #3
 800571e:	3d03      	subs	r5, #3
 8005720:	45a8      	cmp	r8, r5
 8005722:	bf38      	it	cc
 8005724:	2100      	movcc	r1, #0
 8005726:	440b      	add	r3, r1
 8005728:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800572c:	b199      	cbz	r1, 8005756 <__mdiff+0x11a>
 800572e:	6117      	str	r7, [r2, #16]
 8005730:	e79e      	b.n	8005670 <__mdiff+0x34>
 8005732:	46e6      	mov	lr, ip
 8005734:	f854 1b04 	ldr.w	r1, [r4], #4
 8005738:	fa1f fc81 	uxth.w	ip, r1
 800573c:	44f4      	add	ip, lr
 800573e:	0c08      	lsrs	r0, r1, #16
 8005740:	4471      	add	r1, lr
 8005742:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005746:	b289      	uxth	r1, r1
 8005748:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800574c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005750:	f846 1b04 	str.w	r1, [r6], #4
 8005754:	e7dc      	b.n	8005710 <__mdiff+0xd4>
 8005756:	3f01      	subs	r7, #1
 8005758:	e7e6      	b.n	8005728 <__mdiff+0xec>
 800575a:	bf00      	nop
 800575c:	0800602a 	.word	0x0800602a
 8005760:	0800603b 	.word	0x0800603b

08005764 <__d2b>:
 8005764:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8005768:	2101      	movs	r1, #1
 800576a:	4690      	mov	r8, r2
 800576c:	4699      	mov	r9, r3
 800576e:	9e08      	ldr	r6, [sp, #32]
 8005770:	f7ff fcd0 	bl	8005114 <_Balloc>
 8005774:	4604      	mov	r4, r0
 8005776:	b930      	cbnz	r0, 8005786 <__d2b+0x22>
 8005778:	4602      	mov	r2, r0
 800577a:	f240 310f 	movw	r1, #783	@ 0x30f
 800577e:	4b23      	ldr	r3, [pc, #140]	@ (800580c <__d2b+0xa8>)
 8005780:	4823      	ldr	r0, [pc, #140]	@ (8005810 <__d2b+0xac>)
 8005782:	f000 f8fd 	bl	8005980 <__assert_func>
 8005786:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800578a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800578e:	b10d      	cbz	r5, 8005794 <__d2b+0x30>
 8005790:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005794:	9301      	str	r3, [sp, #4]
 8005796:	f1b8 0300 	subs.w	r3, r8, #0
 800579a:	d024      	beq.n	80057e6 <__d2b+0x82>
 800579c:	4668      	mov	r0, sp
 800579e:	9300      	str	r3, [sp, #0]
 80057a0:	f7ff fd7f 	bl	80052a2 <__lo0bits>
 80057a4:	e9dd 1200 	ldrd	r1, r2, [sp]
 80057a8:	b1d8      	cbz	r0, 80057e2 <__d2b+0x7e>
 80057aa:	f1c0 0320 	rsb	r3, r0, #32
 80057ae:	fa02 f303 	lsl.w	r3, r2, r3
 80057b2:	430b      	orrs	r3, r1
 80057b4:	40c2      	lsrs	r2, r0
 80057b6:	6163      	str	r3, [r4, #20]
 80057b8:	9201      	str	r2, [sp, #4]
 80057ba:	9b01      	ldr	r3, [sp, #4]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	bf0c      	ite	eq
 80057c0:	2201      	moveq	r2, #1
 80057c2:	2202      	movne	r2, #2
 80057c4:	61a3      	str	r3, [r4, #24]
 80057c6:	6122      	str	r2, [r4, #16]
 80057c8:	b1ad      	cbz	r5, 80057f6 <__d2b+0x92>
 80057ca:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80057ce:	4405      	add	r5, r0
 80057d0:	6035      	str	r5, [r6, #0]
 80057d2:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80057d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057d8:	6018      	str	r0, [r3, #0]
 80057da:	4620      	mov	r0, r4
 80057dc:	b002      	add	sp, #8
 80057de:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80057e2:	6161      	str	r1, [r4, #20]
 80057e4:	e7e9      	b.n	80057ba <__d2b+0x56>
 80057e6:	a801      	add	r0, sp, #4
 80057e8:	f7ff fd5b 	bl	80052a2 <__lo0bits>
 80057ec:	9b01      	ldr	r3, [sp, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	6163      	str	r3, [r4, #20]
 80057f2:	3020      	adds	r0, #32
 80057f4:	e7e7      	b.n	80057c6 <__d2b+0x62>
 80057f6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80057fa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80057fe:	6030      	str	r0, [r6, #0]
 8005800:	6918      	ldr	r0, [r3, #16]
 8005802:	f7ff fd2f 	bl	8005264 <__hi0bits>
 8005806:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800580a:	e7e4      	b.n	80057d6 <__d2b+0x72>
 800580c:	0800602a 	.word	0x0800602a
 8005810:	0800603b 	.word	0x0800603b

08005814 <__ascii_wctomb>:
 8005814:	4603      	mov	r3, r0
 8005816:	4608      	mov	r0, r1
 8005818:	b141      	cbz	r1, 800582c <__ascii_wctomb+0x18>
 800581a:	2aff      	cmp	r2, #255	@ 0xff
 800581c:	d904      	bls.n	8005828 <__ascii_wctomb+0x14>
 800581e:	228a      	movs	r2, #138	@ 0x8a
 8005820:	f04f 30ff 	mov.w	r0, #4294967295
 8005824:	601a      	str	r2, [r3, #0]
 8005826:	4770      	bx	lr
 8005828:	2001      	movs	r0, #1
 800582a:	700a      	strb	r2, [r1, #0]
 800582c:	4770      	bx	lr
	...

08005830 <__sflush_r>:
 8005830:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005836:	0716      	lsls	r6, r2, #28
 8005838:	4605      	mov	r5, r0
 800583a:	460c      	mov	r4, r1
 800583c:	d454      	bmi.n	80058e8 <__sflush_r+0xb8>
 800583e:	684b      	ldr	r3, [r1, #4]
 8005840:	2b00      	cmp	r3, #0
 8005842:	dc02      	bgt.n	800584a <__sflush_r+0x1a>
 8005844:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005846:	2b00      	cmp	r3, #0
 8005848:	dd48      	ble.n	80058dc <__sflush_r+0xac>
 800584a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800584c:	2e00      	cmp	r6, #0
 800584e:	d045      	beq.n	80058dc <__sflush_r+0xac>
 8005850:	2300      	movs	r3, #0
 8005852:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005856:	682f      	ldr	r7, [r5, #0]
 8005858:	6a21      	ldr	r1, [r4, #32]
 800585a:	602b      	str	r3, [r5, #0]
 800585c:	d030      	beq.n	80058c0 <__sflush_r+0x90>
 800585e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005860:	89a3      	ldrh	r3, [r4, #12]
 8005862:	0759      	lsls	r1, r3, #29
 8005864:	d505      	bpl.n	8005872 <__sflush_r+0x42>
 8005866:	6863      	ldr	r3, [r4, #4]
 8005868:	1ad2      	subs	r2, r2, r3
 800586a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800586c:	b10b      	cbz	r3, 8005872 <__sflush_r+0x42>
 800586e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005870:	1ad2      	subs	r2, r2, r3
 8005872:	2300      	movs	r3, #0
 8005874:	4628      	mov	r0, r5
 8005876:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005878:	6a21      	ldr	r1, [r4, #32]
 800587a:	47b0      	blx	r6
 800587c:	1c43      	adds	r3, r0, #1
 800587e:	89a3      	ldrh	r3, [r4, #12]
 8005880:	d106      	bne.n	8005890 <__sflush_r+0x60>
 8005882:	6829      	ldr	r1, [r5, #0]
 8005884:	291d      	cmp	r1, #29
 8005886:	d82b      	bhi.n	80058e0 <__sflush_r+0xb0>
 8005888:	4a28      	ldr	r2, [pc, #160]	@ (800592c <__sflush_r+0xfc>)
 800588a:	410a      	asrs	r2, r1
 800588c:	07d6      	lsls	r6, r2, #31
 800588e:	d427      	bmi.n	80058e0 <__sflush_r+0xb0>
 8005890:	2200      	movs	r2, #0
 8005892:	6062      	str	r2, [r4, #4]
 8005894:	6922      	ldr	r2, [r4, #16]
 8005896:	04d9      	lsls	r1, r3, #19
 8005898:	6022      	str	r2, [r4, #0]
 800589a:	d504      	bpl.n	80058a6 <__sflush_r+0x76>
 800589c:	1c42      	adds	r2, r0, #1
 800589e:	d101      	bne.n	80058a4 <__sflush_r+0x74>
 80058a0:	682b      	ldr	r3, [r5, #0]
 80058a2:	b903      	cbnz	r3, 80058a6 <__sflush_r+0x76>
 80058a4:	6560      	str	r0, [r4, #84]	@ 0x54
 80058a6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80058a8:	602f      	str	r7, [r5, #0]
 80058aa:	b1b9      	cbz	r1, 80058dc <__sflush_r+0xac>
 80058ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80058b0:	4299      	cmp	r1, r3
 80058b2:	d002      	beq.n	80058ba <__sflush_r+0x8a>
 80058b4:	4628      	mov	r0, r5
 80058b6:	f7ff fbd3 	bl	8005060 <_free_r>
 80058ba:	2300      	movs	r3, #0
 80058bc:	6363      	str	r3, [r4, #52]	@ 0x34
 80058be:	e00d      	b.n	80058dc <__sflush_r+0xac>
 80058c0:	2301      	movs	r3, #1
 80058c2:	4628      	mov	r0, r5
 80058c4:	47b0      	blx	r6
 80058c6:	4602      	mov	r2, r0
 80058c8:	1c50      	adds	r0, r2, #1
 80058ca:	d1c9      	bne.n	8005860 <__sflush_r+0x30>
 80058cc:	682b      	ldr	r3, [r5, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d0c6      	beq.n	8005860 <__sflush_r+0x30>
 80058d2:	2b1d      	cmp	r3, #29
 80058d4:	d001      	beq.n	80058da <__sflush_r+0xaa>
 80058d6:	2b16      	cmp	r3, #22
 80058d8:	d11d      	bne.n	8005916 <__sflush_r+0xe6>
 80058da:	602f      	str	r7, [r5, #0]
 80058dc:	2000      	movs	r0, #0
 80058de:	e021      	b.n	8005924 <__sflush_r+0xf4>
 80058e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80058e4:	b21b      	sxth	r3, r3
 80058e6:	e01a      	b.n	800591e <__sflush_r+0xee>
 80058e8:	690f      	ldr	r7, [r1, #16]
 80058ea:	2f00      	cmp	r7, #0
 80058ec:	d0f6      	beq.n	80058dc <__sflush_r+0xac>
 80058ee:	0793      	lsls	r3, r2, #30
 80058f0:	bf18      	it	ne
 80058f2:	2300      	movne	r3, #0
 80058f4:	680e      	ldr	r6, [r1, #0]
 80058f6:	bf08      	it	eq
 80058f8:	694b      	ldreq	r3, [r1, #20]
 80058fa:	1bf6      	subs	r6, r6, r7
 80058fc:	600f      	str	r7, [r1, #0]
 80058fe:	608b      	str	r3, [r1, #8]
 8005900:	2e00      	cmp	r6, #0
 8005902:	ddeb      	ble.n	80058dc <__sflush_r+0xac>
 8005904:	4633      	mov	r3, r6
 8005906:	463a      	mov	r2, r7
 8005908:	4628      	mov	r0, r5
 800590a:	6a21      	ldr	r1, [r4, #32]
 800590c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8005910:	47e0      	blx	ip
 8005912:	2800      	cmp	r0, #0
 8005914:	dc07      	bgt.n	8005926 <__sflush_r+0xf6>
 8005916:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800591a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800591e:	f04f 30ff 	mov.w	r0, #4294967295
 8005922:	81a3      	strh	r3, [r4, #12]
 8005924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005926:	4407      	add	r7, r0
 8005928:	1a36      	subs	r6, r6, r0
 800592a:	e7e9      	b.n	8005900 <__sflush_r+0xd0>
 800592c:	dfbffffe 	.word	0xdfbffffe

08005930 <_fflush_r>:
 8005930:	b538      	push	{r3, r4, r5, lr}
 8005932:	690b      	ldr	r3, [r1, #16]
 8005934:	4605      	mov	r5, r0
 8005936:	460c      	mov	r4, r1
 8005938:	b913      	cbnz	r3, 8005940 <_fflush_r+0x10>
 800593a:	2500      	movs	r5, #0
 800593c:	4628      	mov	r0, r5
 800593e:	bd38      	pop	{r3, r4, r5, pc}
 8005940:	b118      	cbz	r0, 800594a <_fflush_r+0x1a>
 8005942:	6a03      	ldr	r3, [r0, #32]
 8005944:	b90b      	cbnz	r3, 800594a <_fflush_r+0x1a>
 8005946:	f7fe fc13 	bl	8004170 <__sinit>
 800594a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d0f3      	beq.n	800593a <_fflush_r+0xa>
 8005952:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005954:	07d0      	lsls	r0, r2, #31
 8005956:	d404      	bmi.n	8005962 <_fflush_r+0x32>
 8005958:	0599      	lsls	r1, r3, #22
 800595a:	d402      	bmi.n	8005962 <_fflush_r+0x32>
 800595c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800595e:	f7fe fd0e 	bl	800437e <__retarget_lock_acquire_recursive>
 8005962:	4628      	mov	r0, r5
 8005964:	4621      	mov	r1, r4
 8005966:	f7ff ff63 	bl	8005830 <__sflush_r>
 800596a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800596c:	4605      	mov	r5, r0
 800596e:	07da      	lsls	r2, r3, #31
 8005970:	d4e4      	bmi.n	800593c <_fflush_r+0xc>
 8005972:	89a3      	ldrh	r3, [r4, #12]
 8005974:	059b      	lsls	r3, r3, #22
 8005976:	d4e1      	bmi.n	800593c <_fflush_r+0xc>
 8005978:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800597a:	f7fe fd01 	bl	8004380 <__retarget_lock_release_recursive>
 800597e:	e7dd      	b.n	800593c <_fflush_r+0xc>

08005980 <__assert_func>:
 8005980:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005982:	4614      	mov	r4, r2
 8005984:	461a      	mov	r2, r3
 8005986:	4b09      	ldr	r3, [pc, #36]	@ (80059ac <__assert_func+0x2c>)
 8005988:	4605      	mov	r5, r0
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	68d8      	ldr	r0, [r3, #12]
 800598e:	b954      	cbnz	r4, 80059a6 <__assert_func+0x26>
 8005990:	4b07      	ldr	r3, [pc, #28]	@ (80059b0 <__assert_func+0x30>)
 8005992:	461c      	mov	r4, r3
 8005994:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005998:	9100      	str	r1, [sp, #0]
 800599a:	462b      	mov	r3, r5
 800599c:	4905      	ldr	r1, [pc, #20]	@ (80059b4 <__assert_func+0x34>)
 800599e:	f000 f821 	bl	80059e4 <fiprintf>
 80059a2:	f000 f831 	bl	8005a08 <abort>
 80059a6:	4b04      	ldr	r3, [pc, #16]	@ (80059b8 <__assert_func+0x38>)
 80059a8:	e7f4      	b.n	8005994 <__assert_func+0x14>
 80059aa:	bf00      	nop
 80059ac:	20000188 	.word	0x20000188
 80059b0:	080062cc 	.word	0x080062cc
 80059b4:	0800629e 	.word	0x0800629e
 80059b8:	08006291 	.word	0x08006291

080059bc <_calloc_r>:
 80059bc:	b570      	push	{r4, r5, r6, lr}
 80059be:	fba1 5402 	umull	r5, r4, r1, r2
 80059c2:	b93c      	cbnz	r4, 80059d4 <_calloc_r+0x18>
 80059c4:	4629      	mov	r1, r5
 80059c6:	f7fd fe5f 	bl	8003688 <_malloc_r>
 80059ca:	4606      	mov	r6, r0
 80059cc:	b928      	cbnz	r0, 80059da <_calloc_r+0x1e>
 80059ce:	2600      	movs	r6, #0
 80059d0:	4630      	mov	r0, r6
 80059d2:	bd70      	pop	{r4, r5, r6, pc}
 80059d4:	220c      	movs	r2, #12
 80059d6:	6002      	str	r2, [r0, #0]
 80059d8:	e7f9      	b.n	80059ce <_calloc_r+0x12>
 80059da:	462a      	mov	r2, r5
 80059dc:	4621      	mov	r1, r4
 80059de:	f7fe fc40 	bl	8004262 <memset>
 80059e2:	e7f5      	b.n	80059d0 <_calloc_r+0x14>

080059e4 <fiprintf>:
 80059e4:	b40e      	push	{r1, r2, r3}
 80059e6:	b503      	push	{r0, r1, lr}
 80059e8:	4601      	mov	r1, r0
 80059ea:	ab03      	add	r3, sp, #12
 80059ec:	4805      	ldr	r0, [pc, #20]	@ (8005a04 <fiprintf+0x20>)
 80059ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80059f2:	6800      	ldr	r0, [r0, #0]
 80059f4:	9301      	str	r3, [sp, #4]
 80059f6:	f000 f835 	bl	8005a64 <_vfiprintf_r>
 80059fa:	b002      	add	sp, #8
 80059fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a00:	b003      	add	sp, #12
 8005a02:	4770      	bx	lr
 8005a04:	20000188 	.word	0x20000188

08005a08 <abort>:
 8005a08:	2006      	movs	r0, #6
 8005a0a:	b508      	push	{r3, lr}
 8005a0c:	f000 f9fe 	bl	8005e0c <raise>
 8005a10:	2001      	movs	r0, #1
 8005a12:	f7fb ff1e 	bl	8001852 <_exit>

08005a16 <__sfputc_r>:
 8005a16:	6893      	ldr	r3, [r2, #8]
 8005a18:	b410      	push	{r4}
 8005a1a:	3b01      	subs	r3, #1
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	6093      	str	r3, [r2, #8]
 8005a20:	da07      	bge.n	8005a32 <__sfputc_r+0x1c>
 8005a22:	6994      	ldr	r4, [r2, #24]
 8005a24:	42a3      	cmp	r3, r4
 8005a26:	db01      	blt.n	8005a2c <__sfputc_r+0x16>
 8005a28:	290a      	cmp	r1, #10
 8005a2a:	d102      	bne.n	8005a32 <__sfputc_r+0x1c>
 8005a2c:	bc10      	pop	{r4}
 8005a2e:	f000 b931 	b.w	8005c94 <__swbuf_r>
 8005a32:	6813      	ldr	r3, [r2, #0]
 8005a34:	1c58      	adds	r0, r3, #1
 8005a36:	6010      	str	r0, [r2, #0]
 8005a38:	7019      	strb	r1, [r3, #0]
 8005a3a:	4608      	mov	r0, r1
 8005a3c:	bc10      	pop	{r4}
 8005a3e:	4770      	bx	lr

08005a40 <__sfputs_r>:
 8005a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a42:	4606      	mov	r6, r0
 8005a44:	460f      	mov	r7, r1
 8005a46:	4614      	mov	r4, r2
 8005a48:	18d5      	adds	r5, r2, r3
 8005a4a:	42ac      	cmp	r4, r5
 8005a4c:	d101      	bne.n	8005a52 <__sfputs_r+0x12>
 8005a4e:	2000      	movs	r0, #0
 8005a50:	e007      	b.n	8005a62 <__sfputs_r+0x22>
 8005a52:	463a      	mov	r2, r7
 8005a54:	4630      	mov	r0, r6
 8005a56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a5a:	f7ff ffdc 	bl	8005a16 <__sfputc_r>
 8005a5e:	1c43      	adds	r3, r0, #1
 8005a60:	d1f3      	bne.n	8005a4a <__sfputs_r+0xa>
 8005a62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005a64 <_vfiprintf_r>:
 8005a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a68:	460d      	mov	r5, r1
 8005a6a:	4614      	mov	r4, r2
 8005a6c:	4698      	mov	r8, r3
 8005a6e:	4606      	mov	r6, r0
 8005a70:	b09d      	sub	sp, #116	@ 0x74
 8005a72:	b118      	cbz	r0, 8005a7c <_vfiprintf_r+0x18>
 8005a74:	6a03      	ldr	r3, [r0, #32]
 8005a76:	b90b      	cbnz	r3, 8005a7c <_vfiprintf_r+0x18>
 8005a78:	f7fe fb7a 	bl	8004170 <__sinit>
 8005a7c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005a7e:	07d9      	lsls	r1, r3, #31
 8005a80:	d405      	bmi.n	8005a8e <_vfiprintf_r+0x2a>
 8005a82:	89ab      	ldrh	r3, [r5, #12]
 8005a84:	059a      	lsls	r2, r3, #22
 8005a86:	d402      	bmi.n	8005a8e <_vfiprintf_r+0x2a>
 8005a88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005a8a:	f7fe fc78 	bl	800437e <__retarget_lock_acquire_recursive>
 8005a8e:	89ab      	ldrh	r3, [r5, #12]
 8005a90:	071b      	lsls	r3, r3, #28
 8005a92:	d501      	bpl.n	8005a98 <_vfiprintf_r+0x34>
 8005a94:	692b      	ldr	r3, [r5, #16]
 8005a96:	b99b      	cbnz	r3, 8005ac0 <_vfiprintf_r+0x5c>
 8005a98:	4629      	mov	r1, r5
 8005a9a:	4630      	mov	r0, r6
 8005a9c:	f000 f938 	bl	8005d10 <__swsetup_r>
 8005aa0:	b170      	cbz	r0, 8005ac0 <_vfiprintf_r+0x5c>
 8005aa2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005aa4:	07dc      	lsls	r4, r3, #31
 8005aa6:	d504      	bpl.n	8005ab2 <_vfiprintf_r+0x4e>
 8005aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8005aac:	b01d      	add	sp, #116	@ 0x74
 8005aae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ab2:	89ab      	ldrh	r3, [r5, #12]
 8005ab4:	0598      	lsls	r0, r3, #22
 8005ab6:	d4f7      	bmi.n	8005aa8 <_vfiprintf_r+0x44>
 8005ab8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005aba:	f7fe fc61 	bl	8004380 <__retarget_lock_release_recursive>
 8005abe:	e7f3      	b.n	8005aa8 <_vfiprintf_r+0x44>
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ac4:	2320      	movs	r3, #32
 8005ac6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005aca:	2330      	movs	r3, #48	@ 0x30
 8005acc:	f04f 0901 	mov.w	r9, #1
 8005ad0:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ad4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8005c80 <_vfiprintf_r+0x21c>
 8005ad8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005adc:	4623      	mov	r3, r4
 8005ade:	469a      	mov	sl, r3
 8005ae0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ae4:	b10a      	cbz	r2, 8005aea <_vfiprintf_r+0x86>
 8005ae6:	2a25      	cmp	r2, #37	@ 0x25
 8005ae8:	d1f9      	bne.n	8005ade <_vfiprintf_r+0x7a>
 8005aea:	ebba 0b04 	subs.w	fp, sl, r4
 8005aee:	d00b      	beq.n	8005b08 <_vfiprintf_r+0xa4>
 8005af0:	465b      	mov	r3, fp
 8005af2:	4622      	mov	r2, r4
 8005af4:	4629      	mov	r1, r5
 8005af6:	4630      	mov	r0, r6
 8005af8:	f7ff ffa2 	bl	8005a40 <__sfputs_r>
 8005afc:	3001      	adds	r0, #1
 8005afe:	f000 80a7 	beq.w	8005c50 <_vfiprintf_r+0x1ec>
 8005b02:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005b04:	445a      	add	r2, fp
 8005b06:	9209      	str	r2, [sp, #36]	@ 0x24
 8005b08:	f89a 3000 	ldrb.w	r3, [sl]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	f000 809f 	beq.w	8005c50 <_vfiprintf_r+0x1ec>
 8005b12:	2300      	movs	r3, #0
 8005b14:	f04f 32ff 	mov.w	r2, #4294967295
 8005b18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b1c:	f10a 0a01 	add.w	sl, sl, #1
 8005b20:	9304      	str	r3, [sp, #16]
 8005b22:	9307      	str	r3, [sp, #28]
 8005b24:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005b28:	931a      	str	r3, [sp, #104]	@ 0x68
 8005b2a:	4654      	mov	r4, sl
 8005b2c:	2205      	movs	r2, #5
 8005b2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b32:	4853      	ldr	r0, [pc, #332]	@ (8005c80 <_vfiprintf_r+0x21c>)
 8005b34:	f7fe fc25 	bl	8004382 <memchr>
 8005b38:	9a04      	ldr	r2, [sp, #16]
 8005b3a:	b9d8      	cbnz	r0, 8005b74 <_vfiprintf_r+0x110>
 8005b3c:	06d1      	lsls	r1, r2, #27
 8005b3e:	bf44      	itt	mi
 8005b40:	2320      	movmi	r3, #32
 8005b42:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005b46:	0713      	lsls	r3, r2, #28
 8005b48:	bf44      	itt	mi
 8005b4a:	232b      	movmi	r3, #43	@ 0x2b
 8005b4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005b50:	f89a 3000 	ldrb.w	r3, [sl]
 8005b54:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b56:	d015      	beq.n	8005b84 <_vfiprintf_r+0x120>
 8005b58:	4654      	mov	r4, sl
 8005b5a:	2000      	movs	r0, #0
 8005b5c:	f04f 0c0a 	mov.w	ip, #10
 8005b60:	9a07      	ldr	r2, [sp, #28]
 8005b62:	4621      	mov	r1, r4
 8005b64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b68:	3b30      	subs	r3, #48	@ 0x30
 8005b6a:	2b09      	cmp	r3, #9
 8005b6c:	d94b      	bls.n	8005c06 <_vfiprintf_r+0x1a2>
 8005b6e:	b1b0      	cbz	r0, 8005b9e <_vfiprintf_r+0x13a>
 8005b70:	9207      	str	r2, [sp, #28]
 8005b72:	e014      	b.n	8005b9e <_vfiprintf_r+0x13a>
 8005b74:	eba0 0308 	sub.w	r3, r0, r8
 8005b78:	fa09 f303 	lsl.w	r3, r9, r3
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	46a2      	mov	sl, r4
 8005b80:	9304      	str	r3, [sp, #16]
 8005b82:	e7d2      	b.n	8005b2a <_vfiprintf_r+0xc6>
 8005b84:	9b03      	ldr	r3, [sp, #12]
 8005b86:	1d19      	adds	r1, r3, #4
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	9103      	str	r1, [sp, #12]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	bfbb      	ittet	lt
 8005b90:	425b      	neglt	r3, r3
 8005b92:	f042 0202 	orrlt.w	r2, r2, #2
 8005b96:	9307      	strge	r3, [sp, #28]
 8005b98:	9307      	strlt	r3, [sp, #28]
 8005b9a:	bfb8      	it	lt
 8005b9c:	9204      	strlt	r2, [sp, #16]
 8005b9e:	7823      	ldrb	r3, [r4, #0]
 8005ba0:	2b2e      	cmp	r3, #46	@ 0x2e
 8005ba2:	d10a      	bne.n	8005bba <_vfiprintf_r+0x156>
 8005ba4:	7863      	ldrb	r3, [r4, #1]
 8005ba6:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ba8:	d132      	bne.n	8005c10 <_vfiprintf_r+0x1ac>
 8005baa:	9b03      	ldr	r3, [sp, #12]
 8005bac:	3402      	adds	r4, #2
 8005bae:	1d1a      	adds	r2, r3, #4
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	9203      	str	r2, [sp, #12]
 8005bb4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005bb8:	9305      	str	r3, [sp, #20]
 8005bba:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8005c84 <_vfiprintf_r+0x220>
 8005bbe:	2203      	movs	r2, #3
 8005bc0:	4650      	mov	r0, sl
 8005bc2:	7821      	ldrb	r1, [r4, #0]
 8005bc4:	f7fe fbdd 	bl	8004382 <memchr>
 8005bc8:	b138      	cbz	r0, 8005bda <_vfiprintf_r+0x176>
 8005bca:	2240      	movs	r2, #64	@ 0x40
 8005bcc:	9b04      	ldr	r3, [sp, #16]
 8005bce:	eba0 000a 	sub.w	r0, r0, sl
 8005bd2:	4082      	lsls	r2, r0
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	3401      	adds	r4, #1
 8005bd8:	9304      	str	r3, [sp, #16]
 8005bda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bde:	2206      	movs	r2, #6
 8005be0:	4829      	ldr	r0, [pc, #164]	@ (8005c88 <_vfiprintf_r+0x224>)
 8005be2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005be6:	f7fe fbcc 	bl	8004382 <memchr>
 8005bea:	2800      	cmp	r0, #0
 8005bec:	d03f      	beq.n	8005c6e <_vfiprintf_r+0x20a>
 8005bee:	4b27      	ldr	r3, [pc, #156]	@ (8005c8c <_vfiprintf_r+0x228>)
 8005bf0:	bb1b      	cbnz	r3, 8005c3a <_vfiprintf_r+0x1d6>
 8005bf2:	9b03      	ldr	r3, [sp, #12]
 8005bf4:	3307      	adds	r3, #7
 8005bf6:	f023 0307 	bic.w	r3, r3, #7
 8005bfa:	3308      	adds	r3, #8
 8005bfc:	9303      	str	r3, [sp, #12]
 8005bfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c00:	443b      	add	r3, r7
 8005c02:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c04:	e76a      	b.n	8005adc <_vfiprintf_r+0x78>
 8005c06:	460c      	mov	r4, r1
 8005c08:	2001      	movs	r0, #1
 8005c0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c0e:	e7a8      	b.n	8005b62 <_vfiprintf_r+0xfe>
 8005c10:	2300      	movs	r3, #0
 8005c12:	f04f 0c0a 	mov.w	ip, #10
 8005c16:	4619      	mov	r1, r3
 8005c18:	3401      	adds	r4, #1
 8005c1a:	9305      	str	r3, [sp, #20]
 8005c1c:	4620      	mov	r0, r4
 8005c1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c22:	3a30      	subs	r2, #48	@ 0x30
 8005c24:	2a09      	cmp	r2, #9
 8005c26:	d903      	bls.n	8005c30 <_vfiprintf_r+0x1cc>
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d0c6      	beq.n	8005bba <_vfiprintf_r+0x156>
 8005c2c:	9105      	str	r1, [sp, #20]
 8005c2e:	e7c4      	b.n	8005bba <_vfiprintf_r+0x156>
 8005c30:	4604      	mov	r4, r0
 8005c32:	2301      	movs	r3, #1
 8005c34:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c38:	e7f0      	b.n	8005c1c <_vfiprintf_r+0x1b8>
 8005c3a:	ab03      	add	r3, sp, #12
 8005c3c:	9300      	str	r3, [sp, #0]
 8005c3e:	462a      	mov	r2, r5
 8005c40:	4630      	mov	r0, r6
 8005c42:	4b13      	ldr	r3, [pc, #76]	@ (8005c90 <_vfiprintf_r+0x22c>)
 8005c44:	a904      	add	r1, sp, #16
 8005c46:	f7fd fe49 	bl	80038dc <_printf_float>
 8005c4a:	4607      	mov	r7, r0
 8005c4c:	1c78      	adds	r0, r7, #1
 8005c4e:	d1d6      	bne.n	8005bfe <_vfiprintf_r+0x19a>
 8005c50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005c52:	07d9      	lsls	r1, r3, #31
 8005c54:	d405      	bmi.n	8005c62 <_vfiprintf_r+0x1fe>
 8005c56:	89ab      	ldrh	r3, [r5, #12]
 8005c58:	059a      	lsls	r2, r3, #22
 8005c5a:	d402      	bmi.n	8005c62 <_vfiprintf_r+0x1fe>
 8005c5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005c5e:	f7fe fb8f 	bl	8004380 <__retarget_lock_release_recursive>
 8005c62:	89ab      	ldrh	r3, [r5, #12]
 8005c64:	065b      	lsls	r3, r3, #25
 8005c66:	f53f af1f 	bmi.w	8005aa8 <_vfiprintf_r+0x44>
 8005c6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005c6c:	e71e      	b.n	8005aac <_vfiprintf_r+0x48>
 8005c6e:	ab03      	add	r3, sp, #12
 8005c70:	9300      	str	r3, [sp, #0]
 8005c72:	462a      	mov	r2, r5
 8005c74:	4630      	mov	r0, r6
 8005c76:	4b06      	ldr	r3, [pc, #24]	@ (8005c90 <_vfiprintf_r+0x22c>)
 8005c78:	a904      	add	r1, sp, #16
 8005c7a:	f7fe f8cd 	bl	8003e18 <_printf_i>
 8005c7e:	e7e4      	b.n	8005c4a <_vfiprintf_r+0x1e6>
 8005c80:	080062cd 	.word	0x080062cd
 8005c84:	080062d3 	.word	0x080062d3
 8005c88:	080062d7 	.word	0x080062d7
 8005c8c:	080038dd 	.word	0x080038dd
 8005c90:	08005a41 	.word	0x08005a41

08005c94 <__swbuf_r>:
 8005c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c96:	460e      	mov	r6, r1
 8005c98:	4614      	mov	r4, r2
 8005c9a:	4605      	mov	r5, r0
 8005c9c:	b118      	cbz	r0, 8005ca6 <__swbuf_r+0x12>
 8005c9e:	6a03      	ldr	r3, [r0, #32]
 8005ca0:	b90b      	cbnz	r3, 8005ca6 <__swbuf_r+0x12>
 8005ca2:	f7fe fa65 	bl	8004170 <__sinit>
 8005ca6:	69a3      	ldr	r3, [r4, #24]
 8005ca8:	60a3      	str	r3, [r4, #8]
 8005caa:	89a3      	ldrh	r3, [r4, #12]
 8005cac:	071a      	lsls	r2, r3, #28
 8005cae:	d501      	bpl.n	8005cb4 <__swbuf_r+0x20>
 8005cb0:	6923      	ldr	r3, [r4, #16]
 8005cb2:	b943      	cbnz	r3, 8005cc6 <__swbuf_r+0x32>
 8005cb4:	4621      	mov	r1, r4
 8005cb6:	4628      	mov	r0, r5
 8005cb8:	f000 f82a 	bl	8005d10 <__swsetup_r>
 8005cbc:	b118      	cbz	r0, 8005cc6 <__swbuf_r+0x32>
 8005cbe:	f04f 37ff 	mov.w	r7, #4294967295
 8005cc2:	4638      	mov	r0, r7
 8005cc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cc6:	6823      	ldr	r3, [r4, #0]
 8005cc8:	6922      	ldr	r2, [r4, #16]
 8005cca:	b2f6      	uxtb	r6, r6
 8005ccc:	1a98      	subs	r0, r3, r2
 8005cce:	6963      	ldr	r3, [r4, #20]
 8005cd0:	4637      	mov	r7, r6
 8005cd2:	4283      	cmp	r3, r0
 8005cd4:	dc05      	bgt.n	8005ce2 <__swbuf_r+0x4e>
 8005cd6:	4621      	mov	r1, r4
 8005cd8:	4628      	mov	r0, r5
 8005cda:	f7ff fe29 	bl	8005930 <_fflush_r>
 8005cde:	2800      	cmp	r0, #0
 8005ce0:	d1ed      	bne.n	8005cbe <__swbuf_r+0x2a>
 8005ce2:	68a3      	ldr	r3, [r4, #8]
 8005ce4:	3b01      	subs	r3, #1
 8005ce6:	60a3      	str	r3, [r4, #8]
 8005ce8:	6823      	ldr	r3, [r4, #0]
 8005cea:	1c5a      	adds	r2, r3, #1
 8005cec:	6022      	str	r2, [r4, #0]
 8005cee:	701e      	strb	r6, [r3, #0]
 8005cf0:	6962      	ldr	r2, [r4, #20]
 8005cf2:	1c43      	adds	r3, r0, #1
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d004      	beq.n	8005d02 <__swbuf_r+0x6e>
 8005cf8:	89a3      	ldrh	r3, [r4, #12]
 8005cfa:	07db      	lsls	r3, r3, #31
 8005cfc:	d5e1      	bpl.n	8005cc2 <__swbuf_r+0x2e>
 8005cfe:	2e0a      	cmp	r6, #10
 8005d00:	d1df      	bne.n	8005cc2 <__swbuf_r+0x2e>
 8005d02:	4621      	mov	r1, r4
 8005d04:	4628      	mov	r0, r5
 8005d06:	f7ff fe13 	bl	8005930 <_fflush_r>
 8005d0a:	2800      	cmp	r0, #0
 8005d0c:	d0d9      	beq.n	8005cc2 <__swbuf_r+0x2e>
 8005d0e:	e7d6      	b.n	8005cbe <__swbuf_r+0x2a>

08005d10 <__swsetup_r>:
 8005d10:	b538      	push	{r3, r4, r5, lr}
 8005d12:	4b29      	ldr	r3, [pc, #164]	@ (8005db8 <__swsetup_r+0xa8>)
 8005d14:	4605      	mov	r5, r0
 8005d16:	6818      	ldr	r0, [r3, #0]
 8005d18:	460c      	mov	r4, r1
 8005d1a:	b118      	cbz	r0, 8005d24 <__swsetup_r+0x14>
 8005d1c:	6a03      	ldr	r3, [r0, #32]
 8005d1e:	b90b      	cbnz	r3, 8005d24 <__swsetup_r+0x14>
 8005d20:	f7fe fa26 	bl	8004170 <__sinit>
 8005d24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d28:	0719      	lsls	r1, r3, #28
 8005d2a:	d422      	bmi.n	8005d72 <__swsetup_r+0x62>
 8005d2c:	06da      	lsls	r2, r3, #27
 8005d2e:	d407      	bmi.n	8005d40 <__swsetup_r+0x30>
 8005d30:	2209      	movs	r2, #9
 8005d32:	602a      	str	r2, [r5, #0]
 8005d34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d38:	f04f 30ff 	mov.w	r0, #4294967295
 8005d3c:	81a3      	strh	r3, [r4, #12]
 8005d3e:	e033      	b.n	8005da8 <__swsetup_r+0x98>
 8005d40:	0758      	lsls	r0, r3, #29
 8005d42:	d512      	bpl.n	8005d6a <__swsetup_r+0x5a>
 8005d44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005d46:	b141      	cbz	r1, 8005d5a <__swsetup_r+0x4a>
 8005d48:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005d4c:	4299      	cmp	r1, r3
 8005d4e:	d002      	beq.n	8005d56 <__swsetup_r+0x46>
 8005d50:	4628      	mov	r0, r5
 8005d52:	f7ff f985 	bl	8005060 <_free_r>
 8005d56:	2300      	movs	r3, #0
 8005d58:	6363      	str	r3, [r4, #52]	@ 0x34
 8005d5a:	89a3      	ldrh	r3, [r4, #12]
 8005d5c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005d60:	81a3      	strh	r3, [r4, #12]
 8005d62:	2300      	movs	r3, #0
 8005d64:	6063      	str	r3, [r4, #4]
 8005d66:	6923      	ldr	r3, [r4, #16]
 8005d68:	6023      	str	r3, [r4, #0]
 8005d6a:	89a3      	ldrh	r3, [r4, #12]
 8005d6c:	f043 0308 	orr.w	r3, r3, #8
 8005d70:	81a3      	strh	r3, [r4, #12]
 8005d72:	6923      	ldr	r3, [r4, #16]
 8005d74:	b94b      	cbnz	r3, 8005d8a <__swsetup_r+0x7a>
 8005d76:	89a3      	ldrh	r3, [r4, #12]
 8005d78:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005d7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d80:	d003      	beq.n	8005d8a <__swsetup_r+0x7a>
 8005d82:	4621      	mov	r1, r4
 8005d84:	4628      	mov	r0, r5
 8005d86:	f000 f882 	bl	8005e8e <__smakebuf_r>
 8005d8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d8e:	f013 0201 	ands.w	r2, r3, #1
 8005d92:	d00a      	beq.n	8005daa <__swsetup_r+0x9a>
 8005d94:	2200      	movs	r2, #0
 8005d96:	60a2      	str	r2, [r4, #8]
 8005d98:	6962      	ldr	r2, [r4, #20]
 8005d9a:	4252      	negs	r2, r2
 8005d9c:	61a2      	str	r2, [r4, #24]
 8005d9e:	6922      	ldr	r2, [r4, #16]
 8005da0:	b942      	cbnz	r2, 8005db4 <__swsetup_r+0xa4>
 8005da2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005da6:	d1c5      	bne.n	8005d34 <__swsetup_r+0x24>
 8005da8:	bd38      	pop	{r3, r4, r5, pc}
 8005daa:	0799      	lsls	r1, r3, #30
 8005dac:	bf58      	it	pl
 8005dae:	6962      	ldrpl	r2, [r4, #20]
 8005db0:	60a2      	str	r2, [r4, #8]
 8005db2:	e7f4      	b.n	8005d9e <__swsetup_r+0x8e>
 8005db4:	2000      	movs	r0, #0
 8005db6:	e7f7      	b.n	8005da8 <__swsetup_r+0x98>
 8005db8:	20000188 	.word	0x20000188

08005dbc <_raise_r>:
 8005dbc:	291f      	cmp	r1, #31
 8005dbe:	b538      	push	{r3, r4, r5, lr}
 8005dc0:	4605      	mov	r5, r0
 8005dc2:	460c      	mov	r4, r1
 8005dc4:	d904      	bls.n	8005dd0 <_raise_r+0x14>
 8005dc6:	2316      	movs	r3, #22
 8005dc8:	6003      	str	r3, [r0, #0]
 8005dca:	f04f 30ff 	mov.w	r0, #4294967295
 8005dce:	bd38      	pop	{r3, r4, r5, pc}
 8005dd0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005dd2:	b112      	cbz	r2, 8005dda <_raise_r+0x1e>
 8005dd4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005dd8:	b94b      	cbnz	r3, 8005dee <_raise_r+0x32>
 8005dda:	4628      	mov	r0, r5
 8005ddc:	f000 f830 	bl	8005e40 <_getpid_r>
 8005de0:	4622      	mov	r2, r4
 8005de2:	4601      	mov	r1, r0
 8005de4:	4628      	mov	r0, r5
 8005de6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005dea:	f000 b817 	b.w	8005e1c <_kill_r>
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d00a      	beq.n	8005e08 <_raise_r+0x4c>
 8005df2:	1c59      	adds	r1, r3, #1
 8005df4:	d103      	bne.n	8005dfe <_raise_r+0x42>
 8005df6:	2316      	movs	r3, #22
 8005df8:	6003      	str	r3, [r0, #0]
 8005dfa:	2001      	movs	r0, #1
 8005dfc:	e7e7      	b.n	8005dce <_raise_r+0x12>
 8005dfe:	2100      	movs	r1, #0
 8005e00:	4620      	mov	r0, r4
 8005e02:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005e06:	4798      	blx	r3
 8005e08:	2000      	movs	r0, #0
 8005e0a:	e7e0      	b.n	8005dce <_raise_r+0x12>

08005e0c <raise>:
 8005e0c:	4b02      	ldr	r3, [pc, #8]	@ (8005e18 <raise+0xc>)
 8005e0e:	4601      	mov	r1, r0
 8005e10:	6818      	ldr	r0, [r3, #0]
 8005e12:	f7ff bfd3 	b.w	8005dbc <_raise_r>
 8005e16:	bf00      	nop
 8005e18:	20000188 	.word	0x20000188

08005e1c <_kill_r>:
 8005e1c:	b538      	push	{r3, r4, r5, lr}
 8005e1e:	2300      	movs	r3, #0
 8005e20:	4d06      	ldr	r5, [pc, #24]	@ (8005e3c <_kill_r+0x20>)
 8005e22:	4604      	mov	r4, r0
 8005e24:	4608      	mov	r0, r1
 8005e26:	4611      	mov	r1, r2
 8005e28:	602b      	str	r3, [r5, #0]
 8005e2a:	f7fb fd02 	bl	8001832 <_kill>
 8005e2e:	1c43      	adds	r3, r0, #1
 8005e30:	d102      	bne.n	8005e38 <_kill_r+0x1c>
 8005e32:	682b      	ldr	r3, [r5, #0]
 8005e34:	b103      	cbz	r3, 8005e38 <_kill_r+0x1c>
 8005e36:	6023      	str	r3, [r4, #0]
 8005e38:	bd38      	pop	{r3, r4, r5, pc}
 8005e3a:	bf00      	nop
 8005e3c:	20000490 	.word	0x20000490

08005e40 <_getpid_r>:
 8005e40:	f7fb bcf0 	b.w	8001824 <_getpid>

08005e44 <__swhatbuf_r>:
 8005e44:	b570      	push	{r4, r5, r6, lr}
 8005e46:	460c      	mov	r4, r1
 8005e48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e4c:	4615      	mov	r5, r2
 8005e4e:	2900      	cmp	r1, #0
 8005e50:	461e      	mov	r6, r3
 8005e52:	b096      	sub	sp, #88	@ 0x58
 8005e54:	da0c      	bge.n	8005e70 <__swhatbuf_r+0x2c>
 8005e56:	89a3      	ldrh	r3, [r4, #12]
 8005e58:	2100      	movs	r1, #0
 8005e5a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005e5e:	bf14      	ite	ne
 8005e60:	2340      	movne	r3, #64	@ 0x40
 8005e62:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005e66:	2000      	movs	r0, #0
 8005e68:	6031      	str	r1, [r6, #0]
 8005e6a:	602b      	str	r3, [r5, #0]
 8005e6c:	b016      	add	sp, #88	@ 0x58
 8005e6e:	bd70      	pop	{r4, r5, r6, pc}
 8005e70:	466a      	mov	r2, sp
 8005e72:	f000 f849 	bl	8005f08 <_fstat_r>
 8005e76:	2800      	cmp	r0, #0
 8005e78:	dbed      	blt.n	8005e56 <__swhatbuf_r+0x12>
 8005e7a:	9901      	ldr	r1, [sp, #4]
 8005e7c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005e80:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005e84:	4259      	negs	r1, r3
 8005e86:	4159      	adcs	r1, r3
 8005e88:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005e8c:	e7eb      	b.n	8005e66 <__swhatbuf_r+0x22>

08005e8e <__smakebuf_r>:
 8005e8e:	898b      	ldrh	r3, [r1, #12]
 8005e90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e92:	079d      	lsls	r5, r3, #30
 8005e94:	4606      	mov	r6, r0
 8005e96:	460c      	mov	r4, r1
 8005e98:	d507      	bpl.n	8005eaa <__smakebuf_r+0x1c>
 8005e9a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005e9e:	6023      	str	r3, [r4, #0]
 8005ea0:	6123      	str	r3, [r4, #16]
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	6163      	str	r3, [r4, #20]
 8005ea6:	b003      	add	sp, #12
 8005ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005eaa:	466a      	mov	r2, sp
 8005eac:	ab01      	add	r3, sp, #4
 8005eae:	f7ff ffc9 	bl	8005e44 <__swhatbuf_r>
 8005eb2:	9f00      	ldr	r7, [sp, #0]
 8005eb4:	4605      	mov	r5, r0
 8005eb6:	4639      	mov	r1, r7
 8005eb8:	4630      	mov	r0, r6
 8005eba:	f7fd fbe5 	bl	8003688 <_malloc_r>
 8005ebe:	b948      	cbnz	r0, 8005ed4 <__smakebuf_r+0x46>
 8005ec0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ec4:	059a      	lsls	r2, r3, #22
 8005ec6:	d4ee      	bmi.n	8005ea6 <__smakebuf_r+0x18>
 8005ec8:	f023 0303 	bic.w	r3, r3, #3
 8005ecc:	f043 0302 	orr.w	r3, r3, #2
 8005ed0:	81a3      	strh	r3, [r4, #12]
 8005ed2:	e7e2      	b.n	8005e9a <__smakebuf_r+0xc>
 8005ed4:	89a3      	ldrh	r3, [r4, #12]
 8005ed6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005eda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ede:	81a3      	strh	r3, [r4, #12]
 8005ee0:	9b01      	ldr	r3, [sp, #4]
 8005ee2:	6020      	str	r0, [r4, #0]
 8005ee4:	b15b      	cbz	r3, 8005efe <__smakebuf_r+0x70>
 8005ee6:	4630      	mov	r0, r6
 8005ee8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005eec:	f000 f81e 	bl	8005f2c <_isatty_r>
 8005ef0:	b128      	cbz	r0, 8005efe <__smakebuf_r+0x70>
 8005ef2:	89a3      	ldrh	r3, [r4, #12]
 8005ef4:	f023 0303 	bic.w	r3, r3, #3
 8005ef8:	f043 0301 	orr.w	r3, r3, #1
 8005efc:	81a3      	strh	r3, [r4, #12]
 8005efe:	89a3      	ldrh	r3, [r4, #12]
 8005f00:	431d      	orrs	r5, r3
 8005f02:	81a5      	strh	r5, [r4, #12]
 8005f04:	e7cf      	b.n	8005ea6 <__smakebuf_r+0x18>
	...

08005f08 <_fstat_r>:
 8005f08:	b538      	push	{r3, r4, r5, lr}
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	4d06      	ldr	r5, [pc, #24]	@ (8005f28 <_fstat_r+0x20>)
 8005f0e:	4604      	mov	r4, r0
 8005f10:	4608      	mov	r0, r1
 8005f12:	4611      	mov	r1, r2
 8005f14:	602b      	str	r3, [r5, #0]
 8005f16:	f7fb fceb 	bl	80018f0 <_fstat>
 8005f1a:	1c43      	adds	r3, r0, #1
 8005f1c:	d102      	bne.n	8005f24 <_fstat_r+0x1c>
 8005f1e:	682b      	ldr	r3, [r5, #0]
 8005f20:	b103      	cbz	r3, 8005f24 <_fstat_r+0x1c>
 8005f22:	6023      	str	r3, [r4, #0]
 8005f24:	bd38      	pop	{r3, r4, r5, pc}
 8005f26:	bf00      	nop
 8005f28:	20000490 	.word	0x20000490

08005f2c <_isatty_r>:
 8005f2c:	b538      	push	{r3, r4, r5, lr}
 8005f2e:	2300      	movs	r3, #0
 8005f30:	4d05      	ldr	r5, [pc, #20]	@ (8005f48 <_isatty_r+0x1c>)
 8005f32:	4604      	mov	r4, r0
 8005f34:	4608      	mov	r0, r1
 8005f36:	602b      	str	r3, [r5, #0]
 8005f38:	f7fb fce9 	bl	800190e <_isatty>
 8005f3c:	1c43      	adds	r3, r0, #1
 8005f3e:	d102      	bne.n	8005f46 <_isatty_r+0x1a>
 8005f40:	682b      	ldr	r3, [r5, #0]
 8005f42:	b103      	cbz	r3, 8005f46 <_isatty_r+0x1a>
 8005f44:	6023      	str	r3, [r4, #0]
 8005f46:	bd38      	pop	{r3, r4, r5, pc}
 8005f48:	20000490 	.word	0x20000490

08005f4c <_init>:
 8005f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f4e:	bf00      	nop
 8005f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f52:	bc08      	pop	{r3}
 8005f54:	469e      	mov	lr, r3
 8005f56:	4770      	bx	lr

08005f58 <_fini>:
 8005f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f5a:	bf00      	nop
 8005f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f5e:	bc08      	pop	{r3}
 8005f60:	469e      	mov	lr, r3
 8005f62:	4770      	bx	lr
