
Control_LLC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009060  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001048  08009170  08009170  0000a170  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a1b8  0800a1b8  0000c28c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a1b8  0800a1b8  0000b1b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a1c0  0800a1c0  0000c28c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a1c0  0800a1c0  0000b1c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a1c4  0800a1c4  0000b1c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000028c  20000000  0800a1c8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000590  2000028c  0800a454  0000c28c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000081c  0800a454  0000c81c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c28c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b0ad  00000000  00000000  0000c2b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ec9  00000000  00000000  00017362  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c88  00000000  00000000  0001a230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008e9  00000000  00000000  0001aeb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001616e  00000000  00000000  0001b7a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f7cf  00000000  00000000  0003190f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000689c7  00000000  00000000  000410de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a9aa5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044c4  00000000  00000000  000a9ae8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000adfac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000028c 	.word	0x2000028c
 800012c:	00000000 	.word	0x00000000
 8000130:	08009158 	.word	0x08009158

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000290 	.word	0x20000290
 800014c:	08009158 	.word	0x08009158

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	@ 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_frsub>:
 8000b7c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b80:	e002      	b.n	8000b88 <__addsf3>
 8000b82:	bf00      	nop

08000b84 <__aeabi_fsub>:
 8000b84:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b88 <__addsf3>:
 8000b88:	0042      	lsls	r2, r0, #1
 8000b8a:	bf1f      	itttt	ne
 8000b8c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b90:	ea92 0f03 	teqne	r2, r3
 8000b94:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b98:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b9c:	d06a      	beq.n	8000c74 <__addsf3+0xec>
 8000b9e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ba2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ba6:	bfc1      	itttt	gt
 8000ba8:	18d2      	addgt	r2, r2, r3
 8000baa:	4041      	eorgt	r1, r0
 8000bac:	4048      	eorgt	r0, r1
 8000bae:	4041      	eorgt	r1, r0
 8000bb0:	bfb8      	it	lt
 8000bb2:	425b      	neglt	r3, r3
 8000bb4:	2b19      	cmp	r3, #25
 8000bb6:	bf88      	it	hi
 8000bb8:	4770      	bxhi	lr
 8000bba:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000bbe:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bc2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bc6:	bf18      	it	ne
 8000bc8:	4240      	negne	r0, r0
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bd2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bd6:	bf18      	it	ne
 8000bd8:	4249      	negne	r1, r1
 8000bda:	ea92 0f03 	teq	r2, r3
 8000bde:	d03f      	beq.n	8000c60 <__addsf3+0xd8>
 8000be0:	f1a2 0201 	sub.w	r2, r2, #1
 8000be4:	fa41 fc03 	asr.w	ip, r1, r3
 8000be8:	eb10 000c 	adds.w	r0, r0, ip
 8000bec:	f1c3 0320 	rsb	r3, r3, #32
 8000bf0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bf4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bf8:	d502      	bpl.n	8000c00 <__addsf3+0x78>
 8000bfa:	4249      	negs	r1, r1
 8000bfc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c00:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c04:	d313      	bcc.n	8000c2e <__addsf3+0xa6>
 8000c06:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c0a:	d306      	bcc.n	8000c1a <__addsf3+0x92>
 8000c0c:	0840      	lsrs	r0, r0, #1
 8000c0e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c12:	f102 0201 	add.w	r2, r2, #1
 8000c16:	2afe      	cmp	r2, #254	@ 0xfe
 8000c18:	d251      	bcs.n	8000cbe <__addsf3+0x136>
 8000c1a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c22:	bf08      	it	eq
 8000c24:	f020 0001 	biceq.w	r0, r0, #1
 8000c28:	ea40 0003 	orr.w	r0, r0, r3
 8000c2c:	4770      	bx	lr
 8000c2e:	0049      	lsls	r1, r1, #1
 8000c30:	eb40 0000 	adc.w	r0, r0, r0
 8000c34:	3a01      	subs	r2, #1
 8000c36:	bf28      	it	cs
 8000c38:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c3c:	d2ed      	bcs.n	8000c1a <__addsf3+0x92>
 8000c3e:	fab0 fc80 	clz	ip, r0
 8000c42:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c46:	ebb2 020c 	subs.w	r2, r2, ip
 8000c4a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c4e:	bfaa      	itet	ge
 8000c50:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c54:	4252      	neglt	r2, r2
 8000c56:	4318      	orrge	r0, r3
 8000c58:	bfbc      	itt	lt
 8000c5a:	40d0      	lsrlt	r0, r2
 8000c5c:	4318      	orrlt	r0, r3
 8000c5e:	4770      	bx	lr
 8000c60:	f092 0f00 	teq	r2, #0
 8000c64:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c68:	bf06      	itte	eq
 8000c6a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c6e:	3201      	addeq	r2, #1
 8000c70:	3b01      	subne	r3, #1
 8000c72:	e7b5      	b.n	8000be0 <__addsf3+0x58>
 8000c74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c7c:	bf18      	it	ne
 8000c7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c82:	d021      	beq.n	8000cc8 <__addsf3+0x140>
 8000c84:	ea92 0f03 	teq	r2, r3
 8000c88:	d004      	beq.n	8000c94 <__addsf3+0x10c>
 8000c8a:	f092 0f00 	teq	r2, #0
 8000c8e:	bf08      	it	eq
 8000c90:	4608      	moveq	r0, r1
 8000c92:	4770      	bx	lr
 8000c94:	ea90 0f01 	teq	r0, r1
 8000c98:	bf1c      	itt	ne
 8000c9a:	2000      	movne	r0, #0
 8000c9c:	4770      	bxne	lr
 8000c9e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000ca2:	d104      	bne.n	8000cae <__addsf3+0x126>
 8000ca4:	0040      	lsls	r0, r0, #1
 8000ca6:	bf28      	it	cs
 8000ca8:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000cac:	4770      	bx	lr
 8000cae:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000cb2:	bf3c      	itt	cc
 8000cb4:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000cb8:	4770      	bxcc	lr
 8000cba:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cbe:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cc2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc6:	4770      	bx	lr
 8000cc8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ccc:	bf16      	itet	ne
 8000cce:	4608      	movne	r0, r1
 8000cd0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cd4:	4601      	movne	r1, r0
 8000cd6:	0242      	lsls	r2, r0, #9
 8000cd8:	bf06      	itte	eq
 8000cda:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cde:	ea90 0f01 	teqeq	r0, r1
 8000ce2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_ui2f>:
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e004      	b.n	8000cf8 <__aeabi_i2f+0x8>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_i2f>:
 8000cf0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cf4:	bf48      	it	mi
 8000cf6:	4240      	negmi	r0, r0
 8000cf8:	ea5f 0c00 	movs.w	ip, r0
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d04:	4601      	mov	r1, r0
 8000d06:	f04f 0000 	mov.w	r0, #0
 8000d0a:	e01c      	b.n	8000d46 <__aeabi_l2f+0x2a>

08000d0c <__aeabi_ul2f>:
 8000d0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e00a      	b.n	8000d30 <__aeabi_l2f+0x14>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_l2f>:
 8000d1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d28:	d502      	bpl.n	8000d30 <__aeabi_l2f+0x14>
 8000d2a:	4240      	negs	r0, r0
 8000d2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d30:	ea5f 0c01 	movs.w	ip, r1
 8000d34:	bf02      	ittt	eq
 8000d36:	4684      	moveq	ip, r0
 8000d38:	4601      	moveq	r1, r0
 8000d3a:	2000      	moveq	r0, #0
 8000d3c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d40:	bf08      	it	eq
 8000d42:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d46:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d4a:	fabc f28c 	clz	r2, ip
 8000d4e:	3a08      	subs	r2, #8
 8000d50:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d54:	db10      	blt.n	8000d78 <__aeabi_l2f+0x5c>
 8000d56:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d60:	f1c2 0220 	rsb	r2, r2, #32
 8000d64:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d68:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6c:	eb43 0002 	adc.w	r0, r3, r2
 8000d70:	bf08      	it	eq
 8000d72:	f020 0001 	biceq.w	r0, r0, #1
 8000d76:	4770      	bx	lr
 8000d78:	f102 0220 	add.w	r2, r2, #32
 8000d7c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d80:	f1c2 0220 	rsb	r2, r2, #32
 8000d84:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d88:	fa21 f202 	lsr.w	r2, r1, r2
 8000d8c:	eb43 0002 	adc.w	r0, r3, r2
 8000d90:	bf08      	it	eq
 8000d92:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_fmul>:
 8000d98:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d9c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000da0:	bf1e      	ittt	ne
 8000da2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000da6:	ea92 0f0c 	teqne	r2, ip
 8000daa:	ea93 0f0c 	teqne	r3, ip
 8000dae:	d06f      	beq.n	8000e90 <__aeabi_fmul+0xf8>
 8000db0:	441a      	add	r2, r3
 8000db2:	ea80 0c01 	eor.w	ip, r0, r1
 8000db6:	0240      	lsls	r0, r0, #9
 8000db8:	bf18      	it	ne
 8000dba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dbe:	d01e      	beq.n	8000dfe <__aeabi_fmul+0x66>
 8000dc0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000dc4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dc8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dcc:	fba0 3101 	umull	r3, r1, r0, r1
 8000dd0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dd4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dd8:	bf3e      	ittt	cc
 8000dda:	0049      	lslcc	r1, r1, #1
 8000ddc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000de0:	005b      	lslcc	r3, r3, #1
 8000de2:	ea40 0001 	orr.w	r0, r0, r1
 8000de6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dea:	2afd      	cmp	r2, #253	@ 0xfd
 8000dec:	d81d      	bhi.n	8000e2a <__aeabi_fmul+0x92>
 8000dee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000df2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000df6:	bf08      	it	eq
 8000df8:	f020 0001 	biceq.w	r0, r0, #1
 8000dfc:	4770      	bx	lr
 8000dfe:	f090 0f00 	teq	r0, #0
 8000e02:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000e06:	bf08      	it	eq
 8000e08:	0249      	lsleq	r1, r1, #9
 8000e0a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e0e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e12:	3a7f      	subs	r2, #127	@ 0x7f
 8000e14:	bfc2      	ittt	gt
 8000e16:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e1a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e1e:	4770      	bxgt	lr
 8000e20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e24:	f04f 0300 	mov.w	r3, #0
 8000e28:	3a01      	subs	r2, #1
 8000e2a:	dc5d      	bgt.n	8000ee8 <__aeabi_fmul+0x150>
 8000e2c:	f112 0f19 	cmn.w	r2, #25
 8000e30:	bfdc      	itt	le
 8000e32:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e36:	4770      	bxle	lr
 8000e38:	f1c2 0200 	rsb	r2, r2, #0
 8000e3c:	0041      	lsls	r1, r0, #1
 8000e3e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e42:	f1c2 0220 	rsb	r2, r2, #32
 8000e46:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e4a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e4e:	f140 0000 	adc.w	r0, r0, #0
 8000e52:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e56:	bf08      	it	eq
 8000e58:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5c:	4770      	bx	lr
 8000e5e:	f092 0f00 	teq	r2, #0
 8000e62:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e66:	bf02      	ittt	eq
 8000e68:	0040      	lsleq	r0, r0, #1
 8000e6a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e6e:	3a01      	subeq	r2, #1
 8000e70:	d0f9      	beq.n	8000e66 <__aeabi_fmul+0xce>
 8000e72:	ea40 000c 	orr.w	r0, r0, ip
 8000e76:	f093 0f00 	teq	r3, #0
 8000e7a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e7e:	bf02      	ittt	eq
 8000e80:	0049      	lsleq	r1, r1, #1
 8000e82:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e86:	3b01      	subeq	r3, #1
 8000e88:	d0f9      	beq.n	8000e7e <__aeabi_fmul+0xe6>
 8000e8a:	ea41 010c 	orr.w	r1, r1, ip
 8000e8e:	e78f      	b.n	8000db0 <__aeabi_fmul+0x18>
 8000e90:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e94:	ea92 0f0c 	teq	r2, ip
 8000e98:	bf18      	it	ne
 8000e9a:	ea93 0f0c 	teqne	r3, ip
 8000e9e:	d00a      	beq.n	8000eb6 <__aeabi_fmul+0x11e>
 8000ea0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ea4:	bf18      	it	ne
 8000ea6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000eaa:	d1d8      	bne.n	8000e5e <__aeabi_fmul+0xc6>
 8000eac:	ea80 0001 	eor.w	r0, r0, r1
 8000eb0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000eb4:	4770      	bx	lr
 8000eb6:	f090 0f00 	teq	r0, #0
 8000eba:	bf17      	itett	ne
 8000ebc:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000ec0:	4608      	moveq	r0, r1
 8000ec2:	f091 0f00 	teqne	r1, #0
 8000ec6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eca:	d014      	beq.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ecc:	ea92 0f0c 	teq	r2, ip
 8000ed0:	d101      	bne.n	8000ed6 <__aeabi_fmul+0x13e>
 8000ed2:	0242      	lsls	r2, r0, #9
 8000ed4:	d10f      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ed6:	ea93 0f0c 	teq	r3, ip
 8000eda:	d103      	bne.n	8000ee4 <__aeabi_fmul+0x14c>
 8000edc:	024b      	lsls	r3, r1, #9
 8000ede:	bf18      	it	ne
 8000ee0:	4608      	movne	r0, r1
 8000ee2:	d108      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ee4:	ea80 0001 	eor.w	r0, r0, r1
 8000ee8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000eec:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ef0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ef4:	4770      	bx	lr
 8000ef6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000efa:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000efe:	4770      	bx	lr

08000f00 <__aeabi_fdiv>:
 8000f00:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000f04:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f08:	bf1e      	ittt	ne
 8000f0a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f0e:	ea92 0f0c 	teqne	r2, ip
 8000f12:	ea93 0f0c 	teqne	r3, ip
 8000f16:	d069      	beq.n	8000fec <__aeabi_fdiv+0xec>
 8000f18:	eba2 0203 	sub.w	r2, r2, r3
 8000f1c:	ea80 0c01 	eor.w	ip, r0, r1
 8000f20:	0249      	lsls	r1, r1, #9
 8000f22:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f26:	d037      	beq.n	8000f98 <__aeabi_fdiv+0x98>
 8000f28:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f2c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f30:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f34:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f38:	428b      	cmp	r3, r1
 8000f3a:	bf38      	it	cc
 8000f3c:	005b      	lslcc	r3, r3, #1
 8000f3e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f42:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f46:	428b      	cmp	r3, r1
 8000f48:	bf24      	itt	cs
 8000f4a:	1a5b      	subcs	r3, r3, r1
 8000f4c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f50:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f54:	bf24      	itt	cs
 8000f56:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f5a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f5e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f62:	bf24      	itt	cs
 8000f64:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f68:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f6c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f70:	bf24      	itt	cs
 8000f72:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f76:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f7a:	011b      	lsls	r3, r3, #4
 8000f7c:	bf18      	it	ne
 8000f7e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f82:	d1e0      	bne.n	8000f46 <__aeabi_fdiv+0x46>
 8000f84:	2afd      	cmp	r2, #253	@ 0xfd
 8000f86:	f63f af50 	bhi.w	8000e2a <__aeabi_fmul+0x92>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f90:	bf08      	it	eq
 8000f92:	f020 0001 	biceq.w	r0, r0, #1
 8000f96:	4770      	bx	lr
 8000f98:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f9c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fa0:	327f      	adds	r2, #127	@ 0x7f
 8000fa2:	bfc2      	ittt	gt
 8000fa4:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000fa8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fac:	4770      	bxgt	lr
 8000fae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000fb2:	f04f 0300 	mov.w	r3, #0
 8000fb6:	3a01      	subs	r2, #1
 8000fb8:	e737      	b.n	8000e2a <__aeabi_fmul+0x92>
 8000fba:	f092 0f00 	teq	r2, #0
 8000fbe:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fc2:	bf02      	ittt	eq
 8000fc4:	0040      	lsleq	r0, r0, #1
 8000fc6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fca:	3a01      	subeq	r2, #1
 8000fcc:	d0f9      	beq.n	8000fc2 <__aeabi_fdiv+0xc2>
 8000fce:	ea40 000c 	orr.w	r0, r0, ip
 8000fd2:	f093 0f00 	teq	r3, #0
 8000fd6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fda:	bf02      	ittt	eq
 8000fdc:	0049      	lsleq	r1, r1, #1
 8000fde:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fe2:	3b01      	subeq	r3, #1
 8000fe4:	d0f9      	beq.n	8000fda <__aeabi_fdiv+0xda>
 8000fe6:	ea41 010c 	orr.w	r1, r1, ip
 8000fea:	e795      	b.n	8000f18 <__aeabi_fdiv+0x18>
 8000fec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ff0:	ea92 0f0c 	teq	r2, ip
 8000ff4:	d108      	bne.n	8001008 <__aeabi_fdiv+0x108>
 8000ff6:	0242      	lsls	r2, r0, #9
 8000ff8:	f47f af7d 	bne.w	8000ef6 <__aeabi_fmul+0x15e>
 8000ffc:	ea93 0f0c 	teq	r3, ip
 8001000:	f47f af70 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 8001004:	4608      	mov	r0, r1
 8001006:	e776      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001008:	ea93 0f0c 	teq	r3, ip
 800100c:	d104      	bne.n	8001018 <__aeabi_fdiv+0x118>
 800100e:	024b      	lsls	r3, r1, #9
 8001010:	f43f af4c 	beq.w	8000eac <__aeabi_fmul+0x114>
 8001014:	4608      	mov	r0, r1
 8001016:	e76e      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001018:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800101c:	bf18      	it	ne
 800101e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8001022:	d1ca      	bne.n	8000fba <__aeabi_fdiv+0xba>
 8001024:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001028:	f47f af5c 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 800102c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8001030:	f47f af3c 	bne.w	8000eac <__aeabi_fmul+0x114>
 8001034:	e75f      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001036:	bf00      	nop

08001038 <__gesf2>:
 8001038:	f04f 3cff 	mov.w	ip, #4294967295
 800103c:	e006      	b.n	800104c <__cmpsf2+0x4>
 800103e:	bf00      	nop

08001040 <__lesf2>:
 8001040:	f04f 0c01 	mov.w	ip, #1
 8001044:	e002      	b.n	800104c <__cmpsf2+0x4>
 8001046:	bf00      	nop

08001048 <__cmpsf2>:
 8001048:	f04f 0c01 	mov.w	ip, #1
 800104c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001050:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001054:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001058:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800105c:	bf18      	it	ne
 800105e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001062:	d011      	beq.n	8001088 <__cmpsf2+0x40>
 8001064:	b001      	add	sp, #4
 8001066:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800106a:	bf18      	it	ne
 800106c:	ea90 0f01 	teqne	r0, r1
 8001070:	bf58      	it	pl
 8001072:	ebb2 0003 	subspl.w	r0, r2, r3
 8001076:	bf88      	it	hi
 8001078:	17c8      	asrhi	r0, r1, #31
 800107a:	bf38      	it	cc
 800107c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001080:	bf18      	it	ne
 8001082:	f040 0001 	orrne.w	r0, r0, #1
 8001086:	4770      	bx	lr
 8001088:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800108c:	d102      	bne.n	8001094 <__cmpsf2+0x4c>
 800108e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001092:	d105      	bne.n	80010a0 <__cmpsf2+0x58>
 8001094:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001098:	d1e4      	bne.n	8001064 <__cmpsf2+0x1c>
 800109a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800109e:	d0e1      	beq.n	8001064 <__cmpsf2+0x1c>
 80010a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop

080010a8 <__aeabi_cfrcmple>:
 80010a8:	4684      	mov	ip, r0
 80010aa:	4608      	mov	r0, r1
 80010ac:	4661      	mov	r1, ip
 80010ae:	e7ff      	b.n	80010b0 <__aeabi_cfcmpeq>

080010b0 <__aeabi_cfcmpeq>:
 80010b0:	b50f      	push	{r0, r1, r2, r3, lr}
 80010b2:	f7ff ffc9 	bl	8001048 <__cmpsf2>
 80010b6:	2800      	cmp	r0, #0
 80010b8:	bf48      	it	mi
 80010ba:	f110 0f00 	cmnmi.w	r0, #0
 80010be:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010c0 <__aeabi_fcmpeq>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff fff4 	bl	80010b0 <__aeabi_cfcmpeq>
 80010c8:	bf0c      	ite	eq
 80010ca:	2001      	moveq	r0, #1
 80010cc:	2000      	movne	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmplt>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffea 	bl	80010b0 <__aeabi_cfcmpeq>
 80010dc:	bf34      	ite	cc
 80010de:	2001      	movcc	r0, #1
 80010e0:	2000      	movcs	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmple>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffe0 	bl	80010b0 <__aeabi_cfcmpeq>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpge>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffd2 	bl	80010a8 <__aeabi_cfrcmple>
 8001104:	bf94      	ite	ls
 8001106:	2001      	movls	r0, #1
 8001108:	2000      	movhi	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpgt>:
 8001110:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001114:	f7ff ffc8 	bl	80010a8 <__aeabi_cfrcmple>
 8001118:	bf34      	ite	cc
 800111a:	2001      	movcc	r0, #1
 800111c:	2000      	movcs	r0, #0
 800111e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001122:	bf00      	nop

08001124 <__aeabi_f2uiz>:
 8001124:	0042      	lsls	r2, r0, #1
 8001126:	d20e      	bcs.n	8001146 <__aeabi_f2uiz+0x22>
 8001128:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800112c:	d30b      	bcc.n	8001146 <__aeabi_f2uiz+0x22>
 800112e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001132:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001136:	d409      	bmi.n	800114c <__aeabi_f2uiz+0x28>
 8001138:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800113c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001140:	fa23 f002 	lsr.w	r0, r3, r2
 8001144:	4770      	bx	lr
 8001146:	f04f 0000 	mov.w	r0, #0
 800114a:	4770      	bx	lr
 800114c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001150:	d101      	bne.n	8001156 <__aeabi_f2uiz+0x32>
 8001152:	0242      	lsls	r2, r0, #9
 8001154:	d102      	bne.n	800115c <__aeabi_f2uiz+0x38>
 8001156:	f04f 30ff 	mov.w	r0, #4294967295
 800115a:	4770      	bx	lr
 800115c:	f04f 0000 	mov.w	r0, #0
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop

08001164 <__aeabi_d2lz>:
 8001164:	b538      	push	{r3, r4, r5, lr}
 8001166:	2200      	movs	r2, #0
 8001168:	2300      	movs	r3, #0
 800116a:	4604      	mov	r4, r0
 800116c:	460d      	mov	r5, r1
 800116e:	f7ff fc2f 	bl	80009d0 <__aeabi_dcmplt>
 8001172:	b928      	cbnz	r0, 8001180 <__aeabi_d2lz+0x1c>
 8001174:	4620      	mov	r0, r4
 8001176:	4629      	mov	r1, r5
 8001178:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800117c:	f000 b80a 	b.w	8001194 <__aeabi_d2ulz>
 8001180:	4620      	mov	r0, r4
 8001182:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001186:	f000 f805 	bl	8001194 <__aeabi_d2ulz>
 800118a:	4240      	negs	r0, r0
 800118c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001190:	bd38      	pop	{r3, r4, r5, pc}
 8001192:	bf00      	nop

08001194 <__aeabi_d2ulz>:
 8001194:	b5d0      	push	{r4, r6, r7, lr}
 8001196:	2200      	movs	r2, #0
 8001198:	4b0b      	ldr	r3, [pc, #44]	@ (80011c8 <__aeabi_d2ulz+0x34>)
 800119a:	4606      	mov	r6, r0
 800119c:	460f      	mov	r7, r1
 800119e:	f7ff f9a5 	bl	80004ec <__aeabi_dmul>
 80011a2:	f7ff fc7b 	bl	8000a9c <__aeabi_d2uiz>
 80011a6:	4604      	mov	r4, r0
 80011a8:	f7ff f926 	bl	80003f8 <__aeabi_ui2d>
 80011ac:	2200      	movs	r2, #0
 80011ae:	4b07      	ldr	r3, [pc, #28]	@ (80011cc <__aeabi_d2ulz+0x38>)
 80011b0:	f7ff f99c 	bl	80004ec <__aeabi_dmul>
 80011b4:	4602      	mov	r2, r0
 80011b6:	460b      	mov	r3, r1
 80011b8:	4630      	mov	r0, r6
 80011ba:	4639      	mov	r1, r7
 80011bc:	f7fe ffde 	bl	800017c <__aeabi_dsub>
 80011c0:	f7ff fc6c 	bl	8000a9c <__aeabi_d2uiz>
 80011c4:	4621      	mov	r1, r4
 80011c6:	bdd0      	pop	{r4, r6, r7, pc}
 80011c8:	3df00000 	.word	0x3df00000
 80011cc:	41f00000 	.word	0x41f00000

080011d0 <CmdLineProcess>:
 * @return Returns CMDLINE_OK if successful, or an error code if an issue
 *         occurs (e.g., command not found, too many arguments).
 */
uint8_t
CmdLineProcess (char *pcCmdLine)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  char          *pcChar;
  uint_fast8_t   ui8Argc;
  bool           bFindArg = true;
 80011d8:	2301      	movs	r3, #1
 80011da:	73fb      	strb	r3, [r7, #15]

  /**
   * Initialize the argument counter, and point to the beginning of the
   * command line string.
   */
  ui8Argc = 0;
 80011dc:	2300      	movs	r3, #0
 80011de:	613b      	str	r3, [r7, #16]
  pcChar  = pcCmdLine;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	617b      	str	r3, [r7, #20]

  /**
   * Advance through the command line until a zero character is found.
   */
  while (*pcChar)
 80011e4:	e01f      	b.n	8001226 <CmdLineProcess+0x56>
  {
    /**
     * If there is a space, then replace it with a zero, and set the flag
     * to search for the next argument.
     */
    if (*pcChar == ' ')
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	2b20      	cmp	r3, #32
 80011ec:	d105      	bne.n	80011fa <CmdLineProcess+0x2a>
    {
      *pcChar  = 0;
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	2200      	movs	r2, #0
 80011f2:	701a      	strb	r2, [r3, #0]
      bFindArg = true;
 80011f4:	2301      	movs	r3, #1
 80011f6:	73fb      	strb	r3, [r7, #15]
 80011f8:	e012      	b.n	8001220 <CmdLineProcess+0x50>
    {
      /**
       * If bFindArg is set, then that means we are looking for the start
       * of the next argument.
       */
      if (bFindArg)
 80011fa:	7bfb      	ldrb	r3, [r7, #15]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d00f      	beq.n	8001220 <CmdLineProcess+0x50>
        /**
         * As long as the maximum number of arguments has not been
         * reached, then save the pointer to the start of this new arg
         * in the argv array, and increment the count of args, argc.
         */
        if (ui8Argc < CMDLINE_MAX_ARGS)
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	2b07      	cmp	r3, #7
 8001204:	d80a      	bhi.n	800121c <CmdLineProcess+0x4c>
        {
          g_ppcArgv[ui8Argc] = pcChar;
 8001206:	491d      	ldr	r1, [pc, #116]	@ (800127c <CmdLineProcess+0xac>)
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	697a      	ldr	r2, [r7, #20]
 800120c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
          ui8Argc++;
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	3301      	adds	r3, #1
 8001214:	613b      	str	r3, [r7, #16]
          bFindArg = false;
 8001216:	2300      	movs	r3, #0
 8001218:	73fb      	strb	r3, [r7, #15]
 800121a:	e001      	b.n	8001220 <CmdLineProcess+0x50>
         * The maximum number of arguments has been reached so return
         * the error.
         */
        else
        {
          return (CMDLINE_TOO_MANY_ARGS);
 800121c:	2302      	movs	r3, #2
 800121e:	e028      	b.n	8001272 <CmdLineProcess+0xa2>
      }
    }
    /**
     * Advance to the next character in the command line.
     */
    pcChar++;
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	3301      	adds	r3, #1
 8001224:	617b      	str	r3, [r7, #20]
  while (*pcChar)
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d1db      	bne.n	80011e6 <CmdLineProcess+0x16>
  }

  /**
   * If one or more arguments was found, then process the command.
   */
  if (ui8Argc)
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d01d      	beq.n	8001270 <CmdLineProcess+0xa0>
  {
    /**
     * Start at the beginning of the command table, to look for a matching
     * command.
     */
    psCmdEntry = &g_psCmdTable[0];
 8001234:	4b12      	ldr	r3, [pc, #72]	@ (8001280 <CmdLineProcess+0xb0>)
 8001236:	60bb      	str	r3, [r7, #8]

    /**
     * Search through the command table until a null command string is
     * found, which marks the end of the table.
     */
    while (psCmdEntry->pcCmd)
 8001238:	e016      	b.n	8001268 <CmdLineProcess+0x98>
      /**
       * If this command entry command string matches argv[0], then call
       * the function for this command, passing the command line
       * arguments.
       */
      if (!strcmp(g_ppcArgv[0], psCmdEntry->pcCmd))
 800123a:	4b10      	ldr	r3, [pc, #64]	@ (800127c <CmdLineProcess+0xac>)
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4619      	mov	r1, r3
 8001244:	4610      	mov	r0, r2
 8001246:	f7fe ff83 	bl	8000150 <strcmp>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d108      	bne.n	8001262 <CmdLineProcess+0x92>
      {
        return (psCmdEntry->pfnCmd(ui8Argc, g_ppcArgv));
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	4909      	ldr	r1, [pc, #36]	@ (800127c <CmdLineProcess+0xac>)
 8001258:	4610      	mov	r0, r2
 800125a:	4798      	blx	r3
 800125c:	4603      	mov	r3, r0
 800125e:	b2db      	uxtb	r3, r3
 8001260:	e007      	b.n	8001272 <CmdLineProcess+0xa2>
      }
      /**
       * Not found, so advance to the next entry.
       */
      psCmdEntry++;
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	330c      	adds	r3, #12
 8001266:	60bb      	str	r3, [r7, #8]
    while (psCmdEntry->pcCmd)
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d1e4      	bne.n	800123a <CmdLineProcess+0x6a>

  /**
   * Fall through to here means that no matching command was found, so return
   * an error.
   */
  return (CMDLINE_BAD_CMD);
 8001270:	2301      	movs	r3, #1
 8001272:	4618      	mov	r0, r3
 8001274:	3718      	adds	r7, #24
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	200002a8 	.word	0x200002a8
 8001280:	20000028 	.word	0x20000028

08001284 <APP_COMMAND_Init>:
 *   PUBLIC FUNCTIONS
 **********************/

void
APP_COMMAND_Init (void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  BSP_UART_Config(&uart_cfg_cml, USART1, USART1_IRQn);
 8001288:	2225      	movs	r2, #37	@ 0x25
 800128a:	4906      	ldr	r1, [pc, #24]	@ (80012a4 <APP_COMMAND_Init+0x20>)
 800128c:	4806      	ldr	r0, [pc, #24]	@ (80012a8 <APP_COMMAND_Init+0x24>)
 800128e:	f001 fac8 	bl	8002822 <BSP_UART_Config>
  BSP_UART_SendString(&uart_cfg_cml, "> LLC CONTROL FIRMWARE\r\n");
 8001292:	4906      	ldr	r1, [pc, #24]	@ (80012ac <APP_COMMAND_Init+0x28>)
 8001294:	4804      	ldr	r0, [pc, #16]	@ (80012a8 <APP_COMMAND_Init+0x24>)
 8001296:	f001 fb2a 	bl	80028ee <BSP_UART_SendString>

  // Reset Data
  s_commandBufferIndex = 0;
 800129a:	4b05      	ldr	r3, [pc, #20]	@ (80012b0 <APP_COMMAND_Init+0x2c>)
 800129c:	2200      	movs	r2, #0
 800129e:	701a      	strb	r2, [r3, #0]
}
 80012a0:	bf00      	nop
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	40013800 	.word	0x40013800
 80012a8:	200003cc 	.word	0x200003cc
 80012ac:	080093d0 	.word	0x080093d0
 80012b0:	200003cb 	.word	0x200003cb

080012b4 <APP_COMMAND_CreateTask>:

void
APP_COMMAND_CreateTask (void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  SCH_TASK_CreateTask(&s_CommandTaskContext.taskHandle,
 80012b8:	4902      	ldr	r1, [pc, #8]	@ (80012c4 <APP_COMMAND_CreateTask+0x10>)
 80012ba:	4803      	ldr	r0, [pc, #12]	@ (80012c8 <APP_COMMAND_CreateTask+0x14>)
 80012bc:	f003 fd44 	bl	8004d48 <SCH_TASK_CreateTask>
                      &s_CommandTaskContext.taskProperty);
}
 80012c0:	bf00      	nop
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	2000001c 	.word	0x2000001c
 80012c8:	20000018 	.word	0x20000018

080012cc <APP_COMMAND_Help>:
 * @param argv The argument list.
 * @return CMDLINE_OK on success.
 */
int
APP_COMMAND_Help (int argc, char *argv[])
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	6039      	str	r1, [r7, #0]
  tCmdLineEntry *pEntry;

  BSP_UART_SendString(&uart_cfg_cml, "\nAvailable commands\r\n");
 80012d6:	4913      	ldr	r1, [pc, #76]	@ (8001324 <APP_COMMAND_Help+0x58>)
 80012d8:	4813      	ldr	r0, [pc, #76]	@ (8001328 <APP_COMMAND_Help+0x5c>)
 80012da:	f001 fb08 	bl	80028ee <BSP_UART_SendString>
  BSP_UART_SendString(&uart_cfg_cml, "------------------\r\n");
 80012de:	4913      	ldr	r1, [pc, #76]	@ (800132c <APP_COMMAND_Help+0x60>)
 80012e0:	4811      	ldr	r0, [pc, #68]	@ (8001328 <APP_COMMAND_Help+0x5c>)
 80012e2:	f001 fb04 	bl	80028ee <BSP_UART_SendString>

  // Point at the beginning of the command table.
  pEntry = &g_psCmdTable[0];
 80012e6:	4b12      	ldr	r3, [pc, #72]	@ (8001330 <APP_COMMAND_Help+0x64>)
 80012e8:	60fb      	str	r3, [r7, #12]

  while (pEntry->pcCmd)
 80012ea:	e012      	b.n	8001312 <APP_COMMAND_Help+0x46>
  {
    // Print the command name and the brief description.
    BSP_UART_SendString(&uart_cfg_cml, pEntry->pcCmd);
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4619      	mov	r1, r3
 80012f2:	480d      	ldr	r0, [pc, #52]	@ (8001328 <APP_COMMAND_Help+0x5c>)
 80012f4:	f001 fafb 	bl	80028ee <BSP_UART_SendString>
    BSP_UART_SendString(&uart_cfg_cml, pEntry->pcHelp);
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	4619      	mov	r1, r3
 80012fe:	480a      	ldr	r0, [pc, #40]	@ (8001328 <APP_COMMAND_Help+0x5c>)
 8001300:	f001 faf5 	bl	80028ee <BSP_UART_SendString>
    BSP_UART_SendString(&uart_cfg_cml, "\r\n");
 8001304:	490b      	ldr	r1, [pc, #44]	@ (8001334 <APP_COMMAND_Help+0x68>)
 8001306:	4808      	ldr	r0, [pc, #32]	@ (8001328 <APP_COMMAND_Help+0x5c>)
 8001308:	f001 faf1 	bl	80028ee <BSP_UART_SendString>

    // Advance to the next entry in the table.
    pEntry++;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	330c      	adds	r3, #12
 8001310:	60fb      	str	r3, [r7, #12]
  while (pEntry->pcCmd)
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d1e8      	bne.n	80012ec <APP_COMMAND_Help+0x20>
  }

  return (CMDLINE_OK);
 800131a:	2300      	movs	r3, #0
}
 800131c:	4618      	mov	r0, r3
 800131e:	3710      	adds	r7, #16
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	080093ec 	.word	0x080093ec
 8001328:	200003cc 	.word	0x200003cc
 800132c:	08009404 	.word	0x08009404
 8001330:	20000028 	.word	0x20000028
 8001334:	0800941c 	.word	0x0800941c

08001338 <APP_COMMAND_ReadCurrentOutput>:

// Format: read_current
int
APP_COMMAND_ReadCurrentOutput (int argc, char *argv[])
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b08a      	sub	sp, #40	@ 0x28
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]
  if (argc < 1)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2b00      	cmp	r3, #0
 8001346:	dc01      	bgt.n	800134c <APP_COMMAND_ReadCurrentOutput+0x14>
  {
    return CMDLINE_TOO_FEW_ARGS;
 8001348:	2303      	movs	r3, #3
 800134a:	e018      	b.n	800137e <APP_COMMAND_ReadCurrentOutput+0x46>
  }
  if (argc > 1)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2b01      	cmp	r3, #1
 8001350:	dd01      	ble.n	8001356 <APP_COMMAND_ReadCurrentOutput+0x1e>
  {
    return CMDLINE_TOO_MANY_ARGS;
 8001352:	2302      	movs	r3, #2
 8001354:	e013      	b.n	800137e <APP_COMMAND_ReadCurrentOutput+0x46>
  }

  char c_msg[30];
  sprintf(c_msg, "Current: %.2f\n\r", s_control_llc_data.f_output_current);
 8001356:	4b0c      	ldr	r3, [pc, #48]	@ (8001388 <APP_COMMAND_ReadCurrentOutput+0x50>)
 8001358:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff f86d 	bl	800043c <__aeabi_f2d>
 8001362:	4602      	mov	r2, r0
 8001364:	460b      	mov	r3, r1
 8001366:	f107 0008 	add.w	r0, r7, #8
 800136a:	4908      	ldr	r1, [pc, #32]	@ (800138c <APP_COMMAND_ReadCurrentOutput+0x54>)
 800136c:	f005 f9fe 	bl	800676c <siprintf>

  BSP_UART_SendString(&uart_cfg_cml, c_msg);
 8001370:	f107 0308 	add.w	r3, r7, #8
 8001374:	4619      	mov	r1, r3
 8001376:	4806      	ldr	r0, [pc, #24]	@ (8001390 <APP_COMMAND_ReadCurrentOutput+0x58>)
 8001378:	f001 fab9 	bl	80028ee <BSP_UART_SendString>

  return (CMDLINE_OK);
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	3728      	adds	r7, #40	@ 0x28
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20000418 	.word	0x20000418
 800138c:	08009420 	.word	0x08009420
 8001390:	200003cc 	.word	0x200003cc

08001394 <APP_COMMAND_SetCurrentOutput>:

// Format: set_current current(A)
int
APP_COMMAND_SetCurrentOutput (int argc, char *argv[])
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
  if (argc < 2)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	dc01      	bgt.n	80013a8 <APP_COMMAND_SetCurrentOutput+0x14>
  {
    return CMDLINE_TOO_FEW_ARGS;
 80013a4:	2303      	movs	r3, #3
 80013a6:	e020      	b.n	80013ea <APP_COMMAND_SetCurrentOutput+0x56>
  }
  if (argc > 2)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	dd01      	ble.n	80013b2 <APP_COMMAND_SetCurrentOutput+0x1e>
  {
    return CMDLINE_TOO_MANY_ARGS;
 80013ae:	2302      	movs	r3, #2
 80013b0:	e01b      	b.n	80013ea <APP_COMMAND_SetCurrentOutput+0x56>
  }
  float f_value_temp = atof(argv[1]);
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	3304      	adds	r3, #4
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f003 fdf7 	bl	8004fac <atof>
 80013be:	4602      	mov	r2, r0
 80013c0:	460b      	mov	r3, r1
 80013c2:	4610      	mov	r0, r2
 80013c4:	4619      	mov	r1, r3
 80013c6:	f7ff fb89 	bl	8000adc <__aeabi_d2f>
 80013ca:	4603      	mov	r3, r0
 80013cc:	60fb      	str	r3, [r7, #12]
  if (f_value_temp > CURRENT_START_THRESHOLD)
 80013ce:	4909      	ldr	r1, [pc, #36]	@ (80013f4 <APP_COMMAND_SetCurrentOutput+0x60>)
 80013d0:	68f8      	ldr	r0, [r7, #12]
 80013d2:	f7ff fe9d 	bl	8001110 <__aeabi_fcmpgt>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <APP_COMMAND_SetCurrentOutput+0x4c>
  {
    return CMDLINE_INVALID_ARG;
 80013dc:	2304      	movs	r3, #4
 80013de:	e004      	b.n	80013ea <APP_COMMAND_SetCurrentOutput+0x56>
  }
  s_control_llc_data.f_output_current = f_value_temp;
 80013e0:	4a05      	ldr	r2, [pc, #20]	@ (80013f8 <APP_COMMAND_SetCurrentOutput+0x64>)
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

  return (CMDLINE_OK);
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40c00000 	.word	0x40c00000
 80013f8:	20000418 	.word	0x20000418

080013fc <APP_COMMAND_SetParaControlCurrent>:

// Format: set_pi_current kp ki
int
APP_COMMAND_SetParaControlCurrent (int argc, char *argv[])
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
  if (argc < 3)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2b02      	cmp	r3, #2
 800140a:	dc01      	bgt.n	8001410 <APP_COMMAND_SetParaControlCurrent+0x14>
  {
    return CMDLINE_TOO_FEW_ARGS;
 800140c:	2303      	movs	r3, #3
 800140e:	e023      	b.n	8001458 <APP_COMMAND_SetParaControlCurrent+0x5c>
  }
  if (argc > 3)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2b03      	cmp	r3, #3
 8001414:	dd01      	ble.n	800141a <APP_COMMAND_SetParaControlCurrent+0x1e>
  {
    return CMDLINE_TOO_MANY_ARGS;
 8001416:	2302      	movs	r3, #2
 8001418:	e01e      	b.n	8001458 <APP_COMMAND_SetParaControlCurrent+0x5c>
  }

  s_control_llc_data.s_control_current.f_Ki = atof(argv[1]);
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	3304      	adds	r3, #4
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4618      	mov	r0, r3
 8001422:	f003 fdc3 	bl	8004fac <atof>
 8001426:	4602      	mov	r2, r0
 8001428:	460b      	mov	r3, r1
 800142a:	4610      	mov	r0, r2
 800142c:	4619      	mov	r1, r3
 800142e:	f7ff fb55 	bl	8000adc <__aeabi_d2f>
 8001432:	4603      	mov	r3, r0
 8001434:	4a0a      	ldr	r2, [pc, #40]	@ (8001460 <APP_COMMAND_SetParaControlCurrent+0x64>)
 8001436:	6453      	str	r3, [r2, #68]	@ 0x44
  s_control_llc_data.s_control_current.f_Kp = atof(argv[2]);
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	3308      	adds	r3, #8
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4618      	mov	r0, r3
 8001440:	f003 fdb4 	bl	8004fac <atof>
 8001444:	4602      	mov	r2, r0
 8001446:	460b      	mov	r3, r1
 8001448:	4610      	mov	r0, r2
 800144a:	4619      	mov	r1, r3
 800144c:	f7ff fb46 	bl	8000adc <__aeabi_d2f>
 8001450:	4603      	mov	r3, r0
 8001452:	4a03      	ldr	r2, [pc, #12]	@ (8001460 <APP_COMMAND_SetParaControlCurrent+0x64>)
 8001454:	6413      	str	r3, [r2, #64]	@ 0x40

  return (CMDLINE_OK);
 8001456:	2300      	movs	r3, #0
}
 8001458:	4618      	mov	r0, r3
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	20000418 	.word	0x20000418

08001464 <APP_COMMAND_ReadVoltageOutput>:

// Format: read_voltage
int
APP_COMMAND_ReadVoltageOutput (int argc, char *argv[])
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b08a      	sub	sp, #40	@ 0x28
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
  if (argc < 1)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2b00      	cmp	r3, #0
 8001472:	dc01      	bgt.n	8001478 <APP_COMMAND_ReadVoltageOutput+0x14>
  {
    return CMDLINE_TOO_FEW_ARGS;
 8001474:	2303      	movs	r3, #3
 8001476:	e018      	b.n	80014aa <APP_COMMAND_ReadVoltageOutput+0x46>
  }
  if (argc > 1)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2b01      	cmp	r3, #1
 800147c:	dd01      	ble.n	8001482 <APP_COMMAND_ReadVoltageOutput+0x1e>
  {
    return CMDLINE_TOO_MANY_ARGS;
 800147e:	2302      	movs	r3, #2
 8001480:	e013      	b.n	80014aa <APP_COMMAND_ReadVoltageOutput+0x46>
  }

  char c_msg[30];
  sprintf(c_msg, "Voltage: %.2f\n\r", s_control_llc_data.f_output_voltage);
 8001482:	4b0c      	ldr	r3, [pc, #48]	@ (80014b4 <APP_COMMAND_ReadVoltageOutput+0x50>)
 8001484:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001488:	4618      	mov	r0, r3
 800148a:	f7fe ffd7 	bl	800043c <__aeabi_f2d>
 800148e:	4602      	mov	r2, r0
 8001490:	460b      	mov	r3, r1
 8001492:	f107 0008 	add.w	r0, r7, #8
 8001496:	4908      	ldr	r1, [pc, #32]	@ (80014b8 <APP_COMMAND_ReadVoltageOutput+0x54>)
 8001498:	f005 f968 	bl	800676c <siprintf>

  BSP_UART_SendString(&uart_cfg_cml, c_msg);
 800149c:	f107 0308 	add.w	r3, r7, #8
 80014a0:	4619      	mov	r1, r3
 80014a2:	4806      	ldr	r0, [pc, #24]	@ (80014bc <APP_COMMAND_ReadVoltageOutput+0x58>)
 80014a4:	f001 fa23 	bl	80028ee <BSP_UART_SendString>

  return (CMDLINE_OK);
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3728      	adds	r7, #40	@ 0x28
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	20000418 	.word	0x20000418
 80014b8:	08009430 	.word	0x08009430
 80014bc:	200003cc 	.word	0x200003cc

080014c0 <APP_COMMAND_SetParaControlVoltage>:

// Format: set_pi_voltage kp ki
int
APP_COMMAND_SetParaControlVoltage (int argc, char *argv[])
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	6039      	str	r1, [r7, #0]
  if (argc < 3)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	dc01      	bgt.n	80014d4 <APP_COMMAND_SetParaControlVoltage+0x14>
  {
    return CMDLINE_TOO_FEW_ARGS;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e023      	b.n	800151c <APP_COMMAND_SetParaControlVoltage+0x5c>
  }
  if (argc > 3)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2b03      	cmp	r3, #3
 80014d8:	dd01      	ble.n	80014de <APP_COMMAND_SetParaControlVoltage+0x1e>
  {
    return CMDLINE_TOO_MANY_ARGS;
 80014da:	2302      	movs	r3, #2
 80014dc:	e01e      	b.n	800151c <APP_COMMAND_SetParaControlVoltage+0x5c>
  }

  s_control_llc_data.s_control_voltage.f_Ki = atof(argv[1]);
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	3304      	adds	r3, #4
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f003 fd61 	bl	8004fac <atof>
 80014ea:	4602      	mov	r2, r0
 80014ec:	460b      	mov	r3, r1
 80014ee:	4610      	mov	r0, r2
 80014f0:	4619      	mov	r1, r3
 80014f2:	f7ff faf3 	bl	8000adc <__aeabi_d2f>
 80014f6:	4603      	mov	r3, r0
 80014f8:	4a0a      	ldr	r2, [pc, #40]	@ (8001524 <APP_COMMAND_SetParaControlVoltage+0x64>)
 80014fa:	6213      	str	r3, [r2, #32]
  s_control_llc_data.s_control_voltage.f_Kp = atof(argv[2]);
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	3308      	adds	r3, #8
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4618      	mov	r0, r3
 8001504:	f003 fd52 	bl	8004fac <atof>
 8001508:	4602      	mov	r2, r0
 800150a:	460b      	mov	r3, r1
 800150c:	4610      	mov	r0, r2
 800150e:	4619      	mov	r1, r3
 8001510:	f7ff fae4 	bl	8000adc <__aeabi_d2f>
 8001514:	4603      	mov	r3, r0
 8001516:	4a03      	ldr	r2, [pc, #12]	@ (8001524 <APP_COMMAND_SetParaControlVoltage+0x64>)
 8001518:	61d3      	str	r3, [r2, #28]

  return (CMDLINE_OK);
 800151a:	2300      	movs	r3, #0
}
 800151c:	4618      	mov	r0, r3
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	20000418 	.word	0x20000418

08001528 <APP_COMMAND_MonitorPower>:

// Format: monitor_power
int
APP_COMMAND_MonitorPower (int argc, char *argv[])
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b08a      	sub	sp, #40	@ 0x28
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
  if (argc < 1)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2b00      	cmp	r3, #0
 8001536:	dc01      	bgt.n	800153c <APP_COMMAND_MonitorPower+0x14>
  {
    return CMDLINE_TOO_FEW_ARGS;
 8001538:	2303      	movs	r3, #3
 800153a:	e02f      	b.n	800159c <APP_COMMAND_MonitorPower+0x74>
  }
  if (argc > 1)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2b01      	cmp	r3, #1
 8001540:	dd01      	ble.n	8001546 <APP_COMMAND_MonitorPower+0x1e>
  {
    return CMDLINE_TOO_MANY_ARGS;
 8001542:	2302      	movs	r3, #2
 8001544:	e02a      	b.n	800159c <APP_COMMAND_MonitorPower+0x74>
  }

  if ((s_control_llc_data.s_state_data == CHARGING)
 8001546:	4b17      	ldr	r3, [pc, #92]	@ (80015a4 <APP_COMMAND_MonitorPower+0x7c>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	b2db      	uxtb	r3, r3
 800154c:	2b02      	cmp	r3, #2
 800154e:	d004      	beq.n	800155a <APP_COMMAND_MonitorPower+0x32>
      || (s_control_llc_data.s_state_data == WAIT_DISCHARGING))
 8001550:	4b14      	ldr	r3, [pc, #80]	@ (80015a4 <APP_COMMAND_MonitorPower+0x7c>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	b2db      	uxtb	r3, r3
 8001556:	2b03      	cmp	r3, #3
 8001558:	d11b      	bne.n	8001592 <APP_COMMAND_MonitorPower+0x6a>
  {
    char c_msg[30];
    sprintf(c_msg,
            "Power Charging: %.2f\n\r",
            s_control_llc_data.f_output_voltage
 800155a:	4b12      	ldr	r3, [pc, #72]	@ (80015a4 <APP_COMMAND_MonitorPower+0x7c>)
 800155c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
                * s_control_llc_data.f_output_current);
 8001560:	4a10      	ldr	r2, [pc, #64]	@ (80015a4 <APP_COMMAND_MonitorPower+0x7c>)
 8001562:	f8d2 208c 	ldr.w	r2, [r2, #140]	@ 0x8c
 8001566:	4611      	mov	r1, r2
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff fc15 	bl	8000d98 <__aeabi_fmul>
 800156e:	4603      	mov	r3, r0
    sprintf(c_msg,
 8001570:	4618      	mov	r0, r3
 8001572:	f7fe ff63 	bl	800043c <__aeabi_f2d>
 8001576:	4602      	mov	r2, r0
 8001578:	460b      	mov	r3, r1
 800157a:	f107 0008 	add.w	r0, r7, #8
 800157e:	490a      	ldr	r1, [pc, #40]	@ (80015a8 <APP_COMMAND_MonitorPower+0x80>)
 8001580:	f005 f8f4 	bl	800676c <siprintf>

    BSP_UART_SendString(&uart_cfg_cml, c_msg);
 8001584:	f107 0308 	add.w	r3, r7, #8
 8001588:	4619      	mov	r1, r3
 800158a:	4808      	ldr	r0, [pc, #32]	@ (80015ac <APP_COMMAND_MonitorPower+0x84>)
 800158c:	f001 f9af 	bl	80028ee <BSP_UART_SendString>
  {
 8001590:	e003      	b.n	800159a <APP_COMMAND_MonitorPower+0x72>
  }
  else
  {
    BSP_UART_SendString(&uart_cfg_cml, "NO CHARGING\n\r");
 8001592:	4907      	ldr	r1, [pc, #28]	@ (80015b0 <APP_COMMAND_MonitorPower+0x88>)
 8001594:	4805      	ldr	r0, [pc, #20]	@ (80015ac <APP_COMMAND_MonitorPower+0x84>)
 8001596:	f001 f9aa 	bl	80028ee <BSP_UART_SendString>
  }

  return (CMDLINE_OK);
 800159a:	2300      	movs	r3, #0
}
 800159c:	4618      	mov	r0, r3
 800159e:	3728      	adds	r7, #40	@ 0x28
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	20000418 	.word	0x20000418
 80015a8:	08009440 	.word	0x08009440
 80015ac:	200003cc 	.word	0x200003cc
 80015b0:	08009458 	.word	0x08009458

080015b4 <APP_COMMAND_MonitorParaPI>:

// Format: monitor_para_pi
int
APP_COMMAND_MonitorParaPI (int argc, char *argv[])
{
 80015b4:	b5b0      	push	{r4, r5, r7, lr}
 80015b6:	b08c      	sub	sp, #48	@ 0x30
 80015b8:	af02      	add	r7, sp, #8
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
  if (argc < 1)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	dc01      	bgt.n	80015c8 <APP_COMMAND_MonitorParaPI+0x14>
  {
    return CMDLINE_TOO_FEW_ARGS;
 80015c4:	2303      	movs	r3, #3
 80015c6:	e047      	b.n	8001658 <APP_COMMAND_MonitorParaPI+0xa4>
  }
  if (argc > 1)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	dd01      	ble.n	80015d2 <APP_COMMAND_MonitorParaPI+0x1e>
  {
    return CMDLINE_TOO_MANY_ARGS;
 80015ce:	2302      	movs	r3, #2
 80015d0:	e042      	b.n	8001658 <APP_COMMAND_MonitorParaPI+0xa4>
  }

  char c_msg[30];

  BSP_UART_SendString(&uart_cfg_cml, "PARAMETER PI CONTROL OF CURRENT\n\r");
 80015d2:	4923      	ldr	r1, [pc, #140]	@ (8001660 <APP_COMMAND_MonitorParaPI+0xac>)
 80015d4:	4823      	ldr	r0, [pc, #140]	@ (8001664 <APP_COMMAND_MonitorParaPI+0xb0>)
 80015d6:	f001 f98a 	bl	80028ee <BSP_UART_SendString>

  sprintf(c_msg,
          "KP: %.2f, KI: %.2f\n\r",
          s_control_llc_data.s_control_current.f_Kp,
 80015da:	4b23      	ldr	r3, [pc, #140]	@ (8001668 <APP_COMMAND_MonitorParaPI+0xb4>)
 80015dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
  sprintf(c_msg,
 80015de:	4618      	mov	r0, r3
 80015e0:	f7fe ff2c 	bl	800043c <__aeabi_f2d>
 80015e4:	4604      	mov	r4, r0
 80015e6:	460d      	mov	r5, r1
          s_control_llc_data.s_control_current.f_Ki); 
 80015e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001668 <APP_COMMAND_MonitorParaPI+0xb4>)
 80015ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  sprintf(c_msg,
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7fe ff25 	bl	800043c <__aeabi_f2d>
 80015f2:	4602      	mov	r2, r0
 80015f4:	460b      	mov	r3, r1
 80015f6:	f107 0008 	add.w	r0, r7, #8
 80015fa:	e9cd 2300 	strd	r2, r3, [sp]
 80015fe:	4622      	mov	r2, r4
 8001600:	462b      	mov	r3, r5
 8001602:	491a      	ldr	r1, [pc, #104]	@ (800166c <APP_COMMAND_MonitorParaPI+0xb8>)
 8001604:	f005 f8b2 	bl	800676c <siprintf>

  BSP_UART_SendString(&uart_cfg_cml, c_msg);
 8001608:	f107 0308 	add.w	r3, r7, #8
 800160c:	4619      	mov	r1, r3
 800160e:	4815      	ldr	r0, [pc, #84]	@ (8001664 <APP_COMMAND_MonitorParaPI+0xb0>)
 8001610:	f001 f96d 	bl	80028ee <BSP_UART_SendString>

  BSP_UART_SendString(&uart_cfg_cml, "PARAMETER PI CONTROL OF VOLTAGE\n\r");
 8001614:	4916      	ldr	r1, [pc, #88]	@ (8001670 <APP_COMMAND_MonitorParaPI+0xbc>)
 8001616:	4813      	ldr	r0, [pc, #76]	@ (8001664 <APP_COMMAND_MonitorParaPI+0xb0>)
 8001618:	f001 f969 	bl	80028ee <BSP_UART_SendString>

  sprintf(c_msg,
          "KP: %.2f, KI: %.2f\n\r",
          s_control_llc_data.s_control_voltage.f_Kp,
 800161c:	4b12      	ldr	r3, [pc, #72]	@ (8001668 <APP_COMMAND_MonitorParaPI+0xb4>)
 800161e:	69db      	ldr	r3, [r3, #28]
  sprintf(c_msg,
 8001620:	4618      	mov	r0, r3
 8001622:	f7fe ff0b 	bl	800043c <__aeabi_f2d>
 8001626:	4604      	mov	r4, r0
 8001628:	460d      	mov	r5, r1
          s_control_llc_data.s_control_voltage.f_Ki);
 800162a:	4b0f      	ldr	r3, [pc, #60]	@ (8001668 <APP_COMMAND_MonitorParaPI+0xb4>)
 800162c:	6a1b      	ldr	r3, [r3, #32]
  sprintf(c_msg,
 800162e:	4618      	mov	r0, r3
 8001630:	f7fe ff04 	bl	800043c <__aeabi_f2d>
 8001634:	4602      	mov	r2, r0
 8001636:	460b      	mov	r3, r1
 8001638:	f107 0008 	add.w	r0, r7, #8
 800163c:	e9cd 2300 	strd	r2, r3, [sp]
 8001640:	4622      	mov	r2, r4
 8001642:	462b      	mov	r3, r5
 8001644:	4909      	ldr	r1, [pc, #36]	@ (800166c <APP_COMMAND_MonitorParaPI+0xb8>)
 8001646:	f005 f891 	bl	800676c <siprintf>

  BSP_UART_SendString(&uart_cfg_cml, c_msg);
 800164a:	f107 0308 	add.w	r3, r7, #8
 800164e:	4619      	mov	r1, r3
 8001650:	4804      	ldr	r0, [pc, #16]	@ (8001664 <APP_COMMAND_MonitorParaPI+0xb0>)
 8001652:	f001 f94c 	bl	80028ee <BSP_UART_SendString>

  return (CMDLINE_OK);
 8001656:	2300      	movs	r3, #0
}
 8001658:	4618      	mov	r0, r3
 800165a:	3728      	adds	r7, #40	@ 0x28
 800165c:	46bd      	mov	sp, r7
 800165e:	bdb0      	pop	{r4, r5, r7, pc}
 8001660:	08009468 	.word	0x08009468
 8001664:	200003cc 	.word	0x200003cc
 8001668:	20000418 	.word	0x20000418
 800166c:	0800948c 	.word	0x0800948c
 8001670:	080094a4 	.word	0x080094a4

08001674 <APP_COMMAND_TaskUpdate>:
 * processes commands based on the received data, and sends responses back
 * through UART.
 */
static void
APP_COMMAND_TaskUpdate (void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
  char   rxData;
  int8_t retVal;

  while (BSP_UART_IsAvailableDataReceive(&uart_cfg_cml))
 800167a:	e05b      	b.n	8001734 <APP_COMMAND_TaskUpdate+0xc0>
  {
    rxData = BSP_UART_ReadChar(&uart_cfg_cml);
 800167c:	4833      	ldr	r0, [pc, #204]	@ (800174c <APP_COMMAND_TaskUpdate+0xd8>)
 800167e:	f001 f94d 	bl	800291c <BSP_UART_ReadChar>
 8001682:	4603      	mov	r3, r0
 8001684:	71fb      	strb	r3, [r7, #7]
    BSP_UART_SendChar(&uart_cfg_cml, rxData);
 8001686:	79fb      	ldrb	r3, [r7, #7]
 8001688:	4619      	mov	r1, r3
 800168a:	4830      	ldr	r0, [pc, #192]	@ (800174c <APP_COMMAND_TaskUpdate+0xd8>)
 800168c:	f001 f8fc 	bl	8002888 <BSP_UART_SendChar>
    // Check rxData is ESC key.
    if (rxData == 27)
    {
    }

    if ((rxData == '\r') || (rxData == '\n'))
 8001690:	79fb      	ldrb	r3, [r7, #7]
 8001692:	2b0d      	cmp	r3, #13
 8001694:	d002      	beq.n	800169c <APP_COMMAND_TaskUpdate+0x28>
 8001696:	79fb      	ldrb	r3, [r7, #7]
 8001698:	2b0a      	cmp	r3, #10
 800169a:	d12e      	bne.n	80016fa <APP_COMMAND_TaskUpdate+0x86>
    {
      if (s_commandBufferIndex > 0)
 800169c:	4b2c      	ldr	r3, [pc, #176]	@ (8001750 <APP_COMMAND_TaskUpdate+0xdc>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d025      	beq.n	80016f0 <APP_COMMAND_TaskUpdate+0x7c>
      {
        // Processing command form terminal.
        s_commandBuffer[s_commandBufferIndex] = 0;
 80016a4:	4b2a      	ldr	r3, [pc, #168]	@ (8001750 <APP_COMMAND_TaskUpdate+0xdc>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	461a      	mov	r2, r3
 80016aa:	4b2a      	ldr	r3, [pc, #168]	@ (8001754 <APP_COMMAND_TaskUpdate+0xe0>)
 80016ac:	2100      	movs	r1, #0
 80016ae:	5499      	strb	r1, [r3, r2]
        s_commandBufferIndex++;
 80016b0:	4b27      	ldr	r3, [pc, #156]	@ (8001750 <APP_COMMAND_TaskUpdate+0xdc>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	3301      	adds	r3, #1
 80016b6:	b2da      	uxtb	r2, r3
 80016b8:	4b25      	ldr	r3, [pc, #148]	@ (8001750 <APP_COMMAND_TaskUpdate+0xdc>)
 80016ba:	701a      	strb	r2, [r3, #0]
        retVal               = CmdLineProcess(s_commandBuffer);
 80016bc:	4825      	ldr	r0, [pc, #148]	@ (8001754 <APP_COMMAND_TaskUpdate+0xe0>)
 80016be:	f7ff fd87 	bl	80011d0 <CmdLineProcess>
 80016c2:	4603      	mov	r3, r0
 80016c4:	71bb      	strb	r3, [r7, #6]
        s_commandBufferIndex = 0;
 80016c6:	4b22      	ldr	r3, [pc, #136]	@ (8001750 <APP_COMMAND_TaskUpdate+0xdc>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	701a      	strb	r2, [r3, #0]

        // Send status command in terminal.
        BSP_UART_SendString(&uart_cfg_cml, "\r\n> ");
 80016cc:	4922      	ldr	r1, [pc, #136]	@ (8001758 <APP_COMMAND_TaskUpdate+0xe4>)
 80016ce:	481f      	ldr	r0, [pc, #124]	@ (800174c <APP_COMMAND_TaskUpdate+0xd8>)
 80016d0:	f001 f90d 	bl	80028ee <BSP_UART_SendString>
        BSP_UART_SendString(&uart_cfg_cml, ErrorCode[retVal]);
 80016d4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80016d8:	4a20      	ldr	r2, [pc, #128]	@ (800175c <APP_COMMAND_TaskUpdate+0xe8>)
 80016da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016de:	4619      	mov	r1, r3
 80016e0:	481a      	ldr	r0, [pc, #104]	@ (800174c <APP_COMMAND_TaskUpdate+0xd8>)
 80016e2:	f001 f904 	bl	80028ee <BSP_UART_SendString>
        BSP_UART_SendString(&uart_cfg_cml, "> ");
 80016e6:	491e      	ldr	r1, [pc, #120]	@ (8001760 <APP_COMMAND_TaskUpdate+0xec>)
 80016e8:	4818      	ldr	r0, [pc, #96]	@ (800174c <APP_COMMAND_TaskUpdate+0xd8>)
 80016ea:	f001 f900 	bl	80028ee <BSP_UART_SendString>
      if (s_commandBufferIndex > 0)
 80016ee:	e021      	b.n	8001734 <APP_COMMAND_TaskUpdate+0xc0>
      }
      else
      {
        BSP_UART_SendString(&uart_cfg_cml, "\r\n> ");
 80016f0:	4919      	ldr	r1, [pc, #100]	@ (8001758 <APP_COMMAND_TaskUpdate+0xe4>)
 80016f2:	4816      	ldr	r0, [pc, #88]	@ (800174c <APP_COMMAND_TaskUpdate+0xd8>)
 80016f4:	f001 f8fb 	bl	80028ee <BSP_UART_SendString>
      if (s_commandBufferIndex > 0)
 80016f8:	e01c      	b.n	8001734 <APP_COMMAND_TaskUpdate+0xc0>
      }
    }
    else if ((rxData == 8)
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	2b08      	cmp	r3, #8
 80016fe:	d002      	beq.n	8001706 <APP_COMMAND_TaskUpdate+0x92>
             || (rxData == 127)) // ASCII code for key Delete, Backspace.
 8001700:	79fb      	ldrb	r3, [r7, #7]
 8001702:	2b7f      	cmp	r3, #127	@ 0x7f
 8001704:	d10a      	bne.n	800171c <APP_COMMAND_TaskUpdate+0xa8>
    {
      if (s_commandBufferIndex > 0)
 8001706:	4b12      	ldr	r3, [pc, #72]	@ (8001750 <APP_COMMAND_TaskUpdate+0xdc>)
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d012      	beq.n	8001734 <APP_COMMAND_TaskUpdate+0xc0>
      {
        s_commandBufferIndex--;
 800170e:	4b10      	ldr	r3, [pc, #64]	@ (8001750 <APP_COMMAND_TaskUpdate+0xdc>)
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	3b01      	subs	r3, #1
 8001714:	b2da      	uxtb	r2, r3
 8001716:	4b0e      	ldr	r3, [pc, #56]	@ (8001750 <APP_COMMAND_TaskUpdate+0xdc>)
 8001718:	701a      	strb	r2, [r3, #0]
      if (s_commandBufferIndex > 0)
 800171a:	e00b      	b.n	8001734 <APP_COMMAND_TaskUpdate+0xc0>
      }
    }
    else
    {
      s_commandBuffer[s_commandBufferIndex] = rxData;
 800171c:	4b0c      	ldr	r3, [pc, #48]	@ (8001750 <APP_COMMAND_TaskUpdate+0xdc>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	4619      	mov	r1, r3
 8001722:	4a0c      	ldr	r2, [pc, #48]	@ (8001754 <APP_COMMAND_TaskUpdate+0xe0>)
 8001724:	79fb      	ldrb	r3, [r7, #7]
 8001726:	5453      	strb	r3, [r2, r1]
      s_commandBufferIndex++;
 8001728:	4b09      	ldr	r3, [pc, #36]	@ (8001750 <APP_COMMAND_TaskUpdate+0xdc>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	3301      	adds	r3, #1
 800172e:	b2da      	uxtb	r2, r3
 8001730:	4b07      	ldr	r3, [pc, #28]	@ (8001750 <APP_COMMAND_TaskUpdate+0xdc>)
 8001732:	701a      	strb	r2, [r3, #0]
  while (BSP_UART_IsAvailableDataReceive(&uart_cfg_cml))
 8001734:	4805      	ldr	r0, [pc, #20]	@ (800174c <APP_COMMAND_TaskUpdate+0xd8>)
 8001736:	f001 f895 	bl	8002864 <BSP_UART_IsAvailableDataReceive>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d19d      	bne.n	800167c <APP_COMMAND_TaskUpdate+0x8>
      {
        s_commandBufferIndex = 0;
      }
    }
  }
}
 8001740:	bf00      	nop
 8001742:	bf00      	nop
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	200003cc 	.word	0x200003cc
 8001750:	200003cb 	.word	0x200003cb
 8001754:	200002cc 	.word	0x200002cc
 8001758:	080094c8 	.word	0x080094c8
 800175c:	20000000 	.word	0x20000000
 8001760:	080094d0 	.word	0x080094d0

08001764 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	0a1b      	lsrs	r3, r3, #8
 8001772:	b29a      	uxth	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	611a      	str	r2, [r3, #16]
}
 8001778:	bf00      	nop
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	bc80      	pop	{r7}
 8001780:	4770      	bx	lr

08001782 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001782:	b480      	push	{r7}
 8001784:	b083      	sub	sp, #12
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
 800178a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	0a1b      	lsrs	r3, r3, #8
 8001790:	b29a      	uxth	r2, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	615a      	str	r2, [r3, #20]
}
 8001796:	bf00      	nop
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr

080017a0 <ACS712_CurrentConverterVoltage>:
  /**********************
   *   PUBLIC FUNCTIONS
   **********************/

  static inline float ACS712_CurrentConverterVoltage(float current)
  {
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
	  return 2.5f + 0.1f * current;
 80017a8:	4906      	ldr	r1, [pc, #24]	@ (80017c4 <ACS712_CurrentConverterVoltage+0x24>)
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f7ff faf4 	bl	8000d98 <__aeabi_fmul>
 80017b0:	4603      	mov	r3, r0
 80017b2:	4905      	ldr	r1, [pc, #20]	@ (80017c8 <ACS712_CurrentConverterVoltage+0x28>)
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff f9e7 	bl	8000b88 <__addsf3>
 80017ba:	4603      	mov	r3, r0
  }
 80017bc:	4618      	mov	r0, r3
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	3dcccccd 	.word	0x3dcccccd
 80017c8:	40200000 	.word	0x40200000

080017cc <APP_CONTROL_Init>:
 * PI control parameters, PWM configuration, ADC configuration, and resetting
 * relevant data.
 */
void
APP_CONTROL_Init (void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  // Turn Off Relay
  APP_CONTROL_RelayOff();
 80017d0:	f000 f9ae 	bl	8001b30 <APP_CONTROL_RelayOff>

  // Link pointer to variable
  s_control_power.p_state = (CONTROL_STATE_t *)&s_control_llc_data.s_state_data;
 80017d4:	4b27      	ldr	r3, [pc, #156]	@ (8001874 <APP_CONTROL_Init+0xa8>)
 80017d6:	4a28      	ldr	r2, [pc, #160]	@ (8001878 <APP_CONTROL_Init+0xac>)
 80017d8:	601a      	str	r2, [r3, #0]
  s_control_power.p_control_voltage
      = (pi_control_t *)&s_control_llc_data.s_control_voltage;
 80017da:	4b26      	ldr	r3, [pc, #152]	@ (8001874 <APP_CONTROL_Init+0xa8>)
 80017dc:	4a27      	ldr	r2, [pc, #156]	@ (800187c <APP_CONTROL_Init+0xb0>)
 80017de:	605a      	str	r2, [r3, #4]
  s_control_power.p_control_current
      = (pi_control_t *)&s_control_llc_data.s_control_current;
 80017e0:	4b24      	ldr	r3, [pc, #144]	@ (8001874 <APP_CONTROL_Init+0xa8>)
 80017e2:	4a27      	ldr	r2, [pc, #156]	@ (8001880 <APP_CONTROL_Init+0xb4>)
 80017e4:	609a      	str	r2, [r3, #8]
  s_control_power.p_pwm_control_1
      = (pwm_cfg_t *)&s_control_llc_data.s_control_gate;
 80017e6:	4b23      	ldr	r3, [pc, #140]	@ (8001874 <APP_CONTROL_Init+0xa8>)
 80017e8:	4a26      	ldr	r2, [pc, #152]	@ (8001884 <APP_CONTROL_Init+0xb8>)
 80017ea:	60da      	str	r2, [r3, #12]
  s_control_power.p_output_voltage
      = (float *)&s_control_llc_data.f_output_voltage;
 80017ec:	4b21      	ldr	r3, [pc, #132]	@ (8001874 <APP_CONTROL_Init+0xa8>)
 80017ee:	4a26      	ldr	r2, [pc, #152]	@ (8001888 <APP_CONTROL_Init+0xbc>)
 80017f0:	615a      	str	r2, [r3, #20]
  s_control_power.p_output_current
      = (float *)&s_control_llc_data.f_output_current;
 80017f2:	4b20      	ldr	r3, [pc, #128]	@ (8001874 <APP_CONTROL_Init+0xa8>)
 80017f4:	4a25      	ldr	r2, [pc, #148]	@ (800188c <APP_CONTROL_Init+0xc0>)
 80017f6:	611a      	str	r2, [r3, #16]

  // Prepare data task control power
  *s_control_power.p_state = WAIT_INPUT_VOLTAGE;
 80017f8:	4b1e      	ldr	r3, [pc, #120]	@ (8001874 <APP_CONTROL_Init+0xa8>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2200      	movs	r2, #0
 80017fe:	701a      	strb	r2, [r3, #0]

  // Initialize PI control parameters of control voltage
  s_control_power.p_control_voltage->f_Ki       = KI_VOLTAGE;
 8001800:	4b1c      	ldr	r3, [pc, #112]	@ (8001874 <APP_CONTROL_Init+0xa8>)
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	4a22      	ldr	r2, [pc, #136]	@ (8001890 <APP_CONTROL_Init+0xc4>)
 8001806:	61da      	str	r2, [r3, #28]
  s_control_power.p_control_voltage->f_Kp       = KP_VOLTAGE;
 8001808:	4b1a      	ldr	r3, [pc, #104]	@ (8001874 <APP_CONTROL_Init+0xa8>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	4a20      	ldr	r2, [pc, #128]	@ (8001890 <APP_CONTROL_Init+0xc4>)
 800180e:	619a      	str	r2, [r3, #24]
  s_control_power.p_control_voltage->f_setPoint = VOLTAGE_END_THRESHOLD;
 8001810:	4b18      	ldr	r3, [pc, #96]	@ (8001874 <APP_CONTROL_Init+0xa8>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	4a1f      	ldr	r2, [pc, #124]	@ (8001894 <APP_CONTROL_Init+0xc8>)
 8001816:	621a      	str	r2, [r3, #32]

  // Initialize PI control parameters of control current
  s_control_power.p_control_current->f_Ki       = KI_CURRENT;
 8001818:	4b16      	ldr	r3, [pc, #88]	@ (8001874 <APP_CONTROL_Init+0xa8>)
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	4a1c      	ldr	r2, [pc, #112]	@ (8001890 <APP_CONTROL_Init+0xc4>)
 800181e:	61da      	str	r2, [r3, #28]
  s_control_power.p_control_current->f_Kp       = KP_CURRENT;
 8001820:	4b14      	ldr	r3, [pc, #80]	@ (8001874 <APP_CONTROL_Init+0xa8>)
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	4a1a      	ldr	r2, [pc, #104]	@ (8001890 <APP_CONTROL_Init+0xc4>)
 8001826:	619a      	str	r2, [r3, #24]
  s_control_power.p_control_current->f_setPoint = CURRENT_START_THRESHOLD;
 8001828:	4b12      	ldr	r3, [pc, #72]	@ (8001874 <APP_CONTROL_Init+0xa8>)
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	4a1a      	ldr	r2, [pc, #104]	@ (8001898 <APP_CONTROL_Init+0xcc>)
 800182e:	621a      	str	r2, [r3, #32]

  // Initialize PWM control parameters
  s_control_power.p_pwm_control_1->channel = PWM_CHANNEL_1;
 8001830:	4b10      	ldr	r3, [pc, #64]	@ (8001874 <APP_CONTROL_Init+0xa8>)
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	2201      	movs	r2, #1
 8001836:	60da      	str	r2, [r3, #12]
  s_control_power.p_pwm_control_1->output  = PWM_POSITIVE_NEGATIVE;
 8001838:	4b0e      	ldr	r3, [pc, #56]	@ (8001874 <APP_CONTROL_Init+0xa8>)
 800183a:	68da      	ldr	r2, [r3, #12]
 800183c:	7c13      	ldrb	r3, [r2, #16]
 800183e:	2101      	movs	r1, #1
 8001840:	f361 0301 	bfi	r3, r1, #0, #2
 8001844:	7413      	strb	r3, [r2, #16]
  s_control_power.p_pwm_control_1->p_tim   = TIM1;
 8001846:	4b0b      	ldr	r3, [pc, #44]	@ (8001874 <APP_CONTROL_Init+0xa8>)
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	4a14      	ldr	r2, [pc, #80]	@ (800189c <APP_CONTROL_Init+0xd0>)
 800184c:	601a      	str	r2, [r3, #0]

  // Reset control data
  APP_CONTROL_ResetData();
 800184e:	f000 f97b 	bl	8001b48 <APP_CONTROL_ResetData>

  // Enable PWM timer
  BSP_PWM_EnableTimer(s_control_power.p_pwm_control_1);
 8001852:	4b08      	ldr	r3, [pc, #32]	@ (8001874 <APP_CONTROL_Init+0xa8>)
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	4618      	mov	r0, r3
 8001858:	f000 fd67 	bl	800232a <BSP_PWM_EnableTimer>

  // Reset PI control
  PIControl_Reset(s_control_power.p_control_voltage);
 800185c:	4b05      	ldr	r3, [pc, #20]	@ (8001874 <APP_CONTROL_Init+0xa8>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	4618      	mov	r0, r3
 8001862:	f003 f90d 	bl	8004a80 <PIControl_Reset>
  PIControl_Reset(s_control_power.p_control_current);
 8001866:	4b03      	ldr	r3, [pc, #12]	@ (8001874 <APP_CONTROL_Init+0xa8>)
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	4618      	mov	r0, r3
 800186c:	f003 f908 	bl	8004a80 <PIControl_Reset>
}
 8001870:	bf00      	nop
 8001872:	bd80      	pop	{r7, pc}
 8001874:	200003f4 	.word	0x200003f4
 8001878:	20000418 	.word	0x20000418
 800187c:	2000041c 	.word	0x2000041c
 8001880:	20000440 	.word	0x20000440
 8001884:	20000464 	.word	0x20000464
 8001888:	200004a0 	.word	0x200004a0
 800188c:	200004a4 	.word	0x200004a4
 8001890:	3dcccccd 	.word	0x3dcccccd
 8001894:	42680000 	.word	0x42680000
 8001898:	40c00000 	.word	0x40c00000
 800189c:	40012c00 	.word	0x40012c00

080018a0 <APP_CONTROL_CreateTask>:
 * This function creates a control task using the scheduler's task creation
 * function, initializing the task handle and task properties.
 */
void
APP_CONTROL_CreateTask (void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  SCH_TASK_CreateTask(&s_ControlTaskContext.taskHandle,
 80018a4:	4902      	ldr	r1, [pc, #8]	@ (80018b0 <APP_CONTROL_CreateTask+0x10>)
 80018a6:	4803      	ldr	r0, [pc, #12]	@ (80018b4 <APP_CONTROL_CreateTask+0x14>)
 80018a8:	f003 fa4e 	bl	8004d48 <SCH_TASK_CreateTask>
                      &s_ControlTaskContext.taskProperty);
}
 80018ac:	bf00      	nop
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	2000008c 	.word	0x2000008c
 80018b4:	20000088 	.word	0x20000088

080018b8 <APP_CONTROL_TaskUpdate>:
 * controlling power states including soft start, charging, discharging, and
 * waiting periods based on certain conditions and thresholds.
 */
static void
APP_CONTROL_TaskUpdate (void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  switch (*s_control_power.p_state)
 80018bc:	4b40      	ldr	r3, [pc, #256]	@ (80019c0 <APP_CONTROL_TaskUpdate+0x108>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	2b04      	cmp	r3, #4
 80018c4:	d877      	bhi.n	80019b6 <APP_CONTROL_TaskUpdate+0xfe>
 80018c6:	a201      	add	r2, pc, #4	@ (adr r2, 80018cc <APP_CONTROL_TaskUpdate+0x14>)
 80018c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018cc:	080018e1 	.word	0x080018e1
 80018d0:	080018ef 	.word	0x080018ef
 80018d4:	0800191d 	.word	0x0800191d
 80018d8:	0800196b 	.word	0x0800196b
 80018dc:	0800197d 	.word	0x0800197d
  {
    case WAIT_INPUT_VOLTAGE:

      APP_CONTROL_RelayOn();
 80018e0:	f000 f91a 	bl	8001b18 <APP_CONTROL_RelayOn>
      *s_control_power.p_state = SOFT_START;
 80018e4:	4b36      	ldr	r3, [pc, #216]	@ (80019c0 <APP_CONTROL_TaskUpdate+0x108>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2201      	movs	r2, #1
 80018ea:	701a      	strb	r2, [r3, #0]
      break;
 80018ec:	e066      	b.n	80019bc <APP_CONTROL_TaskUpdate+0x104>
    case SOFT_START:

      // Handle soft start initialization
      FCP_PhaseStart(s_control_power.u32_times_change_fre);
 80018ee:	4b34      	ldr	r3, [pc, #208]	@ (80019c0 <APP_CONTROL_TaskUpdate+0x108>)
 80018f0:	7f1b      	ldrb	r3, [r3, #28]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f002 ffd0 	bl	8004898 <FCP_PhaseStart>
      if (s_control_power.u32_times_change_fre == TIME_LIMIT_PHASE_START)
 80018f8:	4b31      	ldr	r3, [pc, #196]	@ (80019c0 <APP_CONTROL_TaskUpdate+0x108>)
 80018fa:	7f1b      	ldrb	r3, [r3, #28]
 80018fc:	2b3c      	cmp	r3, #60	@ 0x3c
 80018fe:	d106      	bne.n	800190e <APP_CONTROL_TaskUpdate+0x56>
      {
        s_control_power.u32_times_change_fre = 0;
 8001900:	4b2f      	ldr	r3, [pc, #188]	@ (80019c0 <APP_CONTROL_TaskUpdate+0x108>)
 8001902:	2200      	movs	r2, #0
 8001904:	771a      	strb	r2, [r3, #28]
        *s_control_power.p_state             = DISCHARGING;
 8001906:	4b2e      	ldr	r3, [pc, #184]	@ (80019c0 <APP_CONTROL_TaskUpdate+0x108>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2204      	movs	r2, #4
 800190c:	701a      	strb	r2, [r3, #0]
      }
      s_control_power.u32_times_change_fre++;
 800190e:	4b2c      	ldr	r3, [pc, #176]	@ (80019c0 <APP_CONTROL_TaskUpdate+0x108>)
 8001910:	7f1b      	ldrb	r3, [r3, #28]
 8001912:	3301      	adds	r3, #1
 8001914:	b2da      	uxtb	r2, r3
 8001916:	4b2a      	ldr	r3, [pc, #168]	@ (80019c0 <APP_CONTROL_TaskUpdate+0x108>)
 8001918:	771a      	strb	r2, [r3, #28]

      break;
 800191a:	e04f      	b.n	80019bc <APP_CONTROL_TaskUpdate+0x104>
    case CHARGING:

      // Progress of charging
      if (s_control_power.u32_times_change_fre == CONTROL_PI_TIME_SAMPLE)
 800191c:	4b28      	ldr	r3, [pc, #160]	@ (80019c0 <APP_CONTROL_TaskUpdate+0x108>)
 800191e:	7f1b      	ldrb	r3, [r3, #28]
 8001920:	2b0a      	cmp	r3, #10
 8001922:	d104      	bne.n	800192e <APP_CONTROL_TaskUpdate+0x76>
      {
        APP_CONTROL_CC_CVCharger();
 8001924:	f000 f864 	bl	80019f0 <APP_CONTROL_CC_CVCharger>
        s_control_power.u32_times_change_fre = 0;
 8001928:	4b25      	ldr	r3, [pc, #148]	@ (80019c0 <APP_CONTROL_TaskUpdate+0x108>)
 800192a:	2200      	movs	r2, #0
 800192c:	771a      	strb	r2, [r3, #28]
      }
      s_control_power.u32_times_change_fre++;
 800192e:	4b24      	ldr	r3, [pc, #144]	@ (80019c0 <APP_CONTROL_TaskUpdate+0x108>)
 8001930:	7f1b      	ldrb	r3, [r3, #28]
 8001932:	3301      	adds	r3, #1
 8001934:	b2da      	uxtb	r2, r3
 8001936:	4b22      	ldr	r3, [pc, #136]	@ (80019c0 <APP_CONTROL_TaskUpdate+0x108>)
 8001938:	771a      	strb	r2, [r3, #28]

      // If the charging current <= CURRENT_END_THRESHOLD, wait for 5 minutes,
      // then switch to discharging
      if (*s_control_power.p_output_current <= CURRENT_END_THRESHOLD)
 800193a:	4b21      	ldr	r3, [pc, #132]	@ (80019c0 <APP_CONTROL_TaskUpdate+0x108>)
 800193c:	691b      	ldr	r3, [r3, #16]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff fbcf 	bl	80010e8 <__aeabi_fcmple>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d100      	bne.n	8001952 <APP_CONTROL_TaskUpdate+0x9a>
      {
        u16_time_wait_discharging            = TIME_LIMIT_STOP_CHARGING;
        s_control_power.u32_times_change_fre = 0;
        *s_control_power.p_state             = WAIT_DISCHARGING;
      }
      break;
 8001950:	e034      	b.n	80019bc <APP_CONTROL_TaskUpdate+0x104>
        u16_time_wait_discharging            = TIME_LIMIT_STOP_CHARGING;
 8001952:	4b1c      	ldr	r3, [pc, #112]	@ (80019c4 <APP_CONTROL_TaskUpdate+0x10c>)
 8001954:	f247 5230 	movw	r2, #30000	@ 0x7530
 8001958:	801a      	strh	r2, [r3, #0]
        s_control_power.u32_times_change_fre = 0;
 800195a:	4b19      	ldr	r3, [pc, #100]	@ (80019c0 <APP_CONTROL_TaskUpdate+0x108>)
 800195c:	2200      	movs	r2, #0
 800195e:	771a      	strb	r2, [r3, #28]
        *s_control_power.p_state             = WAIT_DISCHARGING;
 8001960:	4b17      	ldr	r3, [pc, #92]	@ (80019c0 <APP_CONTROL_TaskUpdate+0x108>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2203      	movs	r2, #3
 8001966:	701a      	strb	r2, [r3, #0]
      break;
 8001968:	e028      	b.n	80019bc <APP_CONTROL_TaskUpdate+0x104>
    case WAIT_DISCHARGING:

      // wait for 5 minutes
      if (u16_time_wait_discharging == 0)
 800196a:	4b16      	ldr	r3, [pc, #88]	@ (80019c4 <APP_CONTROL_TaskUpdate+0x10c>)
 800196c:	881b      	ldrh	r3, [r3, #0]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d123      	bne.n	80019ba <APP_CONTROL_TaskUpdate+0x102>
      {
        *s_control_power.p_state = DISCHARGING;
 8001972:	4b13      	ldr	r3, [pc, #76]	@ (80019c0 <APP_CONTROL_TaskUpdate+0x108>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2204      	movs	r2, #4
 8001978:	701a      	strb	r2, [r3, #0]
      }
      break;
 800197a:	e01e      	b.n	80019ba <APP_CONTROL_TaskUpdate+0x102>
    case DISCHARGING:

      // Turn off PWM
      BSP_PWM_DisableTimer(s_control_power.p_pwm_control_1);
 800197c:	4b10      	ldr	r3, [pc, #64]	@ (80019c0 <APP_CONTROL_TaskUpdate+0x108>)
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	4618      	mov	r0, r3
 8001982:	f000 fd41 	bl	8002408 <BSP_PWM_DisableTimer>

      if (*s_control_power.p_output_voltage >= VOLTAGE_START_THRESHOLD)
 8001986:	4b0e      	ldr	r3, [pc, #56]	@ (80019c0 <APP_CONTROL_TaskUpdate+0x108>)
 8001988:	695b      	ldr	r3, [r3, #20]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	490e      	ldr	r1, [pc, #56]	@ (80019c8 <APP_CONTROL_TaskUpdate+0x110>)
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff fbb4 	bl	80010fc <__aeabi_fcmpge>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d100      	bne.n	800199c <APP_CONTROL_TaskUpdate+0xe4>
        BSP_PWM_EnableTimer(s_control_power.p_pwm_control_1);

        s_control_power.u32_times_change_fre = 0;
        *s_control_power.p_state             = SOFT_START;
      }
      break;
 800199a:	e00f      	b.n	80019bc <APP_CONTROL_TaskUpdate+0x104>
        BSP_PWM_EnableTimer(s_control_power.p_pwm_control_1);
 800199c:	4b08      	ldr	r3, [pc, #32]	@ (80019c0 <APP_CONTROL_TaskUpdate+0x108>)
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f000 fcc2 	bl	800232a <BSP_PWM_EnableTimer>
        s_control_power.u32_times_change_fre = 0;
 80019a6:	4b06      	ldr	r3, [pc, #24]	@ (80019c0 <APP_CONTROL_TaskUpdate+0x108>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	771a      	strb	r2, [r3, #28]
        *s_control_power.p_state             = SOFT_START;
 80019ac:	4b04      	ldr	r3, [pc, #16]	@ (80019c0 <APP_CONTROL_TaskUpdate+0x108>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2201      	movs	r2, #1
 80019b2:	701a      	strb	r2, [r3, #0]
      break;
 80019b4:	e002      	b.n	80019bc <APP_CONTROL_TaskUpdate+0x104>
    default:
      break;
 80019b6:	bf00      	nop
 80019b8:	e000      	b.n	80019bc <APP_CONTROL_TaskUpdate+0x104>
      break;
 80019ba:	bf00      	nop
  }
}
 80019bc:	bf00      	nop
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	200003f4 	.word	0x200003f4
 80019c4:	20000414 	.word	0x20000414
 80019c8:	422c0000 	.word	0x422c0000

080019cc <APP_CONTROL_TimeWaitDischarging>:
 * The function `APP_CONTROL_TimeWaitDischarging` decrements the variable
 * `u16_time_wait_discharging` if it is greater than 0.
 */
void
APP_CONTROL_TimeWaitDischarging (void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  if (u16_time_wait_discharging > 0)
 80019d0:	4b06      	ldr	r3, [pc, #24]	@ (80019ec <APP_CONTROL_TimeWaitDischarging+0x20>)
 80019d2:	881b      	ldrh	r3, [r3, #0]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d005      	beq.n	80019e4 <APP_CONTROL_TimeWaitDischarging+0x18>
  {
    u16_time_wait_discharging--;
 80019d8:	4b04      	ldr	r3, [pc, #16]	@ (80019ec <APP_CONTROL_TimeWaitDischarging+0x20>)
 80019da:	881b      	ldrh	r3, [r3, #0]
 80019dc:	3b01      	subs	r3, #1
 80019de:	b29a      	uxth	r2, r3
 80019e0:	4b02      	ldr	r3, [pc, #8]	@ (80019ec <APP_CONTROL_TimeWaitDischarging+0x20>)
 80019e2:	801a      	strh	r2, [r3, #0]
  }
}
 80019e4:	bf00      	nop
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bc80      	pop	{r7}
 80019ea:	4770      	bx	lr
 80019ec:	20000414 	.word	0x20000414

080019f0 <APP_CONTROL_CC_CVCharger>:
 * or voltage feedback, converts frequency, and processes pulse based on the
 * system mode.
 */
static void
APP_CONTROL_CC_CVCharger (void)
{
 80019f0:	b590      	push	{r4, r7, lr}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
  // Read voltage feedback
  *s_control_power.p_output_voltage = ADS1115_Voltage(ADS1115_VOLTAGE_CHANNEL);
 80019f6:	4b28      	ldr	r3, [pc, #160]	@ (8001a98 <APP_CONTROL_CC_CVCharger+0xa8>)
 80019f8:	695c      	ldr	r4, [r3, #20]
 80019fa:	2002      	movs	r0, #2
 80019fc:	f001 ff7e 	bl	80038fc <ADS1115_Voltage>
 8001a00:	4603      	mov	r3, r0
 8001a02:	6023      	str	r3, [r4, #0]
  APP_CONTROL_ConvertVoltageOutput();
 8001a04:	f000 f84c 	bl	8001aa0 <APP_CONTROL_ConvertVoltageOutput>

  // If the voltage feedback <= VOLTAGE_REFERENCE, the system operates in CC
  // mode. If the voltage feedback > VOLTAGE_REFERENCE, the system operates in
  // CV mode.

  if (*s_control_power.p_output_voltage <= VOLTAGE_END_THRESHOLD)
 8001a08:	4b23      	ldr	r3, [pc, #140]	@ (8001a98 <APP_CONTROL_CC_CVCharger+0xa8>)
 8001a0a:	695b      	ldr	r3, [r3, #20]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4923      	ldr	r1, [pc, #140]	@ (8001a9c <APP_CONTROL_CC_CVCharger+0xac>)
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff fb69 	bl	80010e8 <__aeabi_fcmple>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d022      	beq.n	8001a62 <APP_CONTROL_CC_CVCharger+0x72>
  {
    // Read voltage channel current
    float value_temp = ADS1115_Voltage(ADS1115_CURRENT_CHANNEL);
 8001a1c:	2001      	movs	r0, #1
 8001a1e:	f001 ff6d 	bl	80038fc <ADS1115_Voltage>
 8001a22:	6078      	str	r0, [r7, #4]

    // Convert from voltage channel current to current
    *s_control_power.p_output_current
 8001a24:	4b1c      	ldr	r3, [pc, #112]	@ (8001a98 <APP_CONTROL_CC_CVCharger+0xa8>)
 8001a26:	691c      	ldr	r4, [r3, #16]
        = ACS712_CurrentConverterVoltage(value_temp);
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f7ff feb9 	bl	80017a0 <ACS712_CurrentConverterVoltage>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	6023      	str	r3, [r4, #0]

    // PI control
    PIControl_Process(*s_control_power.p_output_current,
 8001a32:	4b19      	ldr	r3, [pc, #100]	@ (8001a98 <APP_CONTROL_CC_CVCharger+0xa8>)
 8001a34:	691b      	ldr	r3, [r3, #16]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a17      	ldr	r2, [pc, #92]	@ (8001a98 <APP_CONTROL_CC_CVCharger+0xa8>)
 8001a3a:	6892      	ldr	r2, [r2, #8]
 8001a3c:	4611      	mov	r1, r2
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f003 f844 	bl	8004acc <PIControl_Process>
                      s_control_power.p_control_current);

    // Current convert frequency
    s_control_power.u32_frequency_operation
        = CCF_Process(s_control_power.p_control_current->f_out);
 8001a44:	4b14      	ldr	r3, [pc, #80]	@ (8001a98 <APP_CONTROL_CC_CVCharger+0xa8>)
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f002 fef4 	bl	8004838 <CCF_Process>
 8001a50:	4603      	mov	r3, r0
 8001a52:	4a11      	ldr	r2, [pc, #68]	@ (8001a98 <APP_CONTROL_CC_CVCharger+0xa8>)
 8001a54:	6193      	str	r3, [r2, #24]

    // Frequency convert pulse
    FCP_PhaseProcess(s_control_power.u32_frequency_operation);
 8001a56:	4b10      	ldr	r3, [pc, #64]	@ (8001a98 <APP_CONTROL_CC_CVCharger+0xa8>)
 8001a58:	699b      	ldr	r3, [r3, #24]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f002 ff5a 	bl	8004914 <FCP_PhaseProcess>
        = VCF_Process(s_control_power.p_control_voltage->f_out);

    // Frequency convert pulse
    FCP_PhaseProcess(s_control_power.u32_frequency_operation);
  }
}
 8001a60:	e016      	b.n	8001a90 <APP_CONTROL_CC_CVCharger+0xa0>
    PIControl_Process(*s_control_power.p_output_voltage,
 8001a62:	4b0d      	ldr	r3, [pc, #52]	@ (8001a98 <APP_CONTROL_CC_CVCharger+0xa8>)
 8001a64:	695b      	ldr	r3, [r3, #20]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a0b      	ldr	r2, [pc, #44]	@ (8001a98 <APP_CONTROL_CC_CVCharger+0xa8>)
 8001a6a:	6852      	ldr	r2, [r2, #4]
 8001a6c:	4611      	mov	r1, r2
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f003 f82c 	bl	8004acc <PIControl_Process>
        = VCF_Process(s_control_power.p_control_voltage->f_out);
 8001a74:	4b08      	ldr	r3, [pc, #32]	@ (8001a98 <APP_CONTROL_CC_CVCharger+0xa8>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f003 f934 	bl	8004ce8 <VCF_Process>
 8001a80:	4603      	mov	r3, r0
 8001a82:	4a05      	ldr	r2, [pc, #20]	@ (8001a98 <APP_CONTROL_CC_CVCharger+0xa8>)
 8001a84:	6193      	str	r3, [r2, #24]
    FCP_PhaseProcess(s_control_power.u32_frequency_operation);
 8001a86:	4b04      	ldr	r3, [pc, #16]	@ (8001a98 <APP_CONTROL_CC_CVCharger+0xa8>)
 8001a88:	699b      	ldr	r3, [r3, #24]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f002 ff42 	bl	8004914 <FCP_PhaseProcess>
}
 8001a90:	bf00      	nop
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd90      	pop	{r4, r7, pc}
 8001a98:	200003f4 	.word	0x200003f4
 8001a9c:	42680000 	.word	0x42680000

08001aa0 <APP_CONTROL_ConvertVoltageOutput>:
 * The function `APP_CONTROL_ConvertVoltageOutput` converts the output voltage
 * value using a specific formula.
 */
static void
APP_CONTROL_ConvertVoltageOutput (void)
{
 8001aa0:	b590      	push	{r4, r7, lr}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
  float value_temp                  = *s_control_power.p_output_voltage;
 8001aa6:	4b1a      	ldr	r3, [pc, #104]	@ (8001b10 <APP_CONTROL_ConvertVoltageOutput+0x70>)
 8001aa8:	695b      	ldr	r3, [r3, #20]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	607b      	str	r3, [r7, #4]
  *s_control_power.p_output_voltage = (value_temp / 3.09 + 3.3) * 13;
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f7fe fcc4 	bl	800043c <__aeabi_f2d>
 8001ab4:	a312      	add	r3, pc, #72	@ (adr r3, 8001b00 <APP_CONTROL_ConvertVoltageOutput+0x60>)
 8001ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aba:	f7fe fe41 	bl	8000740 <__aeabi_ddiv>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	4610      	mov	r0, r2
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	a310      	add	r3, pc, #64	@ (adr r3, 8001b08 <APP_CONTROL_ConvertVoltageOutput+0x68>)
 8001ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001acc:	f7fe fb58 	bl	8000180 <__adddf3>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	4610      	mov	r0, r2
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	f04f 0200 	mov.w	r2, #0
 8001adc:	4b0d      	ldr	r3, [pc, #52]	@ (8001b14 <APP_CONTROL_ConvertVoltageOutput+0x74>)
 8001ade:	f7fe fd05 	bl	80004ec <__aeabi_dmul>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	490a      	ldr	r1, [pc, #40]	@ (8001b10 <APP_CONTROL_ConvertVoltageOutput+0x70>)
 8001ae8:	694c      	ldr	r4, [r1, #20]
 8001aea:	4610      	mov	r0, r2
 8001aec:	4619      	mov	r1, r3
 8001aee:	f7fe fff5 	bl	8000adc <__aeabi_d2f>
 8001af2:	4603      	mov	r3, r0
 8001af4:	6023      	str	r3, [r4, #0]
}
 8001af6:	bf00      	nop
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd90      	pop	{r4, r7, pc}
 8001afe:	bf00      	nop
 8001b00:	eb851eb8 	.word	0xeb851eb8
 8001b04:	4008b851 	.word	0x4008b851
 8001b08:	66666666 	.word	0x66666666
 8001b0c:	400a6666 	.word	0x400a6666
 8001b10:	200003f4 	.word	0x200003f4
 8001b14:	402a0000 	.word	0x402a0000

08001b18 <APP_CONTROL_RelayOn>:
 * The function `APP_CONTROL_RelayOn` turns on a relay by resetting the output
 * pin of a specific GPIO port.
 */
static void
APP_CONTROL_RelayOn (void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  LL_GPIO_ResetOutputPin(VOLTAGE_PROTECTION_GPIO_Port, VOLTAGE_PROTECTION_Pin);
 8001b1c:	4902      	ldr	r1, [pc, #8]	@ (8001b28 <APP_CONTROL_RelayOn+0x10>)
 8001b1e:	4803      	ldr	r0, [pc, #12]	@ (8001b2c <APP_CONTROL_RelayOn+0x14>)
 8001b20:	f7ff fe2f 	bl	8001782 <LL_GPIO_ResetOutputPin>
}
 8001b24:	bf00      	nop
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	04100010 	.word	0x04100010
 8001b2c:	40010c00 	.word	0x40010c00

08001b30 <APP_CONTROL_RelayOff>:
 * The function `APP_CONTROL_RelayOff` turns off a relay by setting a specific
 * GPIO pin to a high voltage level.
 */
static void
APP_CONTROL_RelayOff (void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  LL_GPIO_SetOutputPin(VOLTAGE_PROTECTION_GPIO_Port, VOLTAGE_PROTECTION_Pin);
 8001b34:	4902      	ldr	r1, [pc, #8]	@ (8001b40 <APP_CONTROL_RelayOff+0x10>)
 8001b36:	4803      	ldr	r0, [pc, #12]	@ (8001b44 <APP_CONTROL_RelayOff+0x14>)
 8001b38:	f7ff fe14 	bl	8001764 <LL_GPIO_SetOutputPin>
}
 8001b3c:	bf00      	nop
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	04100010 	.word	0x04100010
 8001b44:	40010c00 	.word	0x40010c00

08001b48 <APP_CONTROL_ResetData>:
 * The function `APP_CONTROL_ResetData` resets certain data values related to
 * power control.
 */
static void
APP_CONTROL_ResetData (void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  s_control_power.u32_frequency_operation = 60000000;
 8001b4c:	4b07      	ldr	r3, [pc, #28]	@ (8001b6c <APP_CONTROL_ResetData+0x24>)
 8001b4e:	4a08      	ldr	r2, [pc, #32]	@ (8001b70 <APP_CONTROL_ResetData+0x28>)
 8001b50:	619a      	str	r2, [r3, #24]
  s_control_power.u32_times_change_fre    = 0;
 8001b52:	4b06      	ldr	r3, [pc, #24]	@ (8001b6c <APP_CONTROL_ResetData+0x24>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	771a      	strb	r2, [r3, #28]
  *s_control_power.p_output_voltage       = 0;
 8001b58:	4b04      	ldr	r3, [pc, #16]	@ (8001b6c <APP_CONTROL_ResetData+0x24>)
 8001b5a:	695b      	ldr	r3, [r3, #20]
 8001b5c:	f04f 0200 	mov.w	r2, #0
 8001b60:	601a      	str	r2, [r3, #0]
}
 8001b62:	bf00      	nop
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bc80      	pop	{r7}
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	200003f4 	.word	0x200003f4
 8001b70:	03938700 	.word	0x03938700

08001b74 <LL_GPIO_SetOutputPin>:
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	0a1b      	lsrs	r3, r3, #8
 8001b82:	b29a      	uxth	r2, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	611a      	str	r2, [r3, #16]
}
 8001b88:	bf00      	nop
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bc80      	pop	{r7}
 8001b90:	4770      	bx	lr

08001b92 <LL_GPIO_ResetOutputPin>:
{
 8001b92:	b480      	push	{r7}
 8001b94:	b083      	sub	sp, #12
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
 8001b9a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	0a1b      	lsrs	r3, r3, #8
 8001ba0:	b29a      	uxth	r2, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	615a      	str	r2, [r3, #20]
}
 8001ba6:	bf00      	nop
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bc80      	pop	{r7}
 8001bae:	4770      	bx	lr

08001bb0 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	60fb      	str	r3, [r7, #12]
  uint32_t pinmask = ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	0a1b      	lsrs	r3, r3, #8
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	60bb      	str	r3, [r7, #8]
  WRITE_REG(GPIOx->BSRR, ((odr & pinmask) << 16u) | (~odr & pinmask));
 8001bc8:	68fa      	ldr	r2, [r7, #12]
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	041a      	lsls	r2, r3, #16
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	43d9      	mvns	r1, r3
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	400b      	ands	r3, r1
 8001bd8:	431a      	orrs	r2, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	611a      	str	r2, [r3, #16]
}
 8001bde:	bf00      	nop
 8001be0:	3714      	adds	r7, #20
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bc80      	pop	{r7}
 8001be6:	4770      	bx	lr

08001be8 <APP_STATUS_LED_Init>:
 *   PUBLIC FUNCTIONS
 **********************/

void
APP_STATUS_LED_Init (void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  LL_GPIO_ResetOutputPin(LED_WAIT_GPIO_Port, LED_WAIT_Pin);
 8001bec:	f240 1101 	movw	r1, #257	@ 0x101
 8001bf0:	4808      	ldr	r0, [pc, #32]	@ (8001c14 <APP_STATUS_LED_Init+0x2c>)
 8001bf2:	f7ff ffce 	bl	8001b92 <LL_GPIO_ResetOutputPin>
  LL_GPIO_ResetOutputPin(LED_SOFT_START_GPIO_Port, LED_SOFT_START_Pin);
 8001bf6:	f240 2102 	movw	r1, #514	@ 0x202
 8001bfa:	4806      	ldr	r0, [pc, #24]	@ (8001c14 <APP_STATUS_LED_Init+0x2c>)
 8001bfc:	f7ff ffc9 	bl	8001b92 <LL_GPIO_ResetOutputPin>
  LL_GPIO_ResetOutputPin(LED_PROCESS_GPIO_Port, LED_PROCESS_Pin);
 8001c00:	f240 4104 	movw	r1, #1028	@ 0x404
 8001c04:	4803      	ldr	r0, [pc, #12]	@ (8001c14 <APP_STATUS_LED_Init+0x2c>)
 8001c06:	f7ff ffc4 	bl	8001b92 <LL_GPIO_ResetOutputPin>
  s_status_led.p_status_led
      = (CONTROL_STATE_t *)&s_control_llc_data.s_state_data;
 8001c0a:	4b03      	ldr	r3, [pc, #12]	@ (8001c18 <APP_STATUS_LED_Init+0x30>)
 8001c0c:	4a03      	ldr	r2, [pc, #12]	@ (8001c1c <APP_STATUS_LED_Init+0x34>)
 8001c0e:	601a      	str	r2, [r3, #0]
}
 8001c10:	bf00      	nop
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40010c00 	.word	0x40010c00
 8001c18:	200004a8 	.word	0x200004a8
 8001c1c:	20000418 	.word	0x20000418

08001c20 <APP_STATUS_LED_CreateTask>:
void
APP_STATUS_LED_CreateTask (void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  SCH_TASK_CreateTask(&s_StatusLedTaskContext.taskHandle,
 8001c24:	4902      	ldr	r1, [pc, #8]	@ (8001c30 <APP_STATUS_LED_CreateTask+0x10>)
 8001c26:	4803      	ldr	r0, [pc, #12]	@ (8001c34 <APP_STATUS_LED_CreateTask+0x14>)
 8001c28:	f003 f88e 	bl	8004d48 <SCH_TASK_CreateTask>
                      &s_StatusLedTaskContext.taskProperty);
}
 8001c2c:	bf00      	nop
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	2000009c 	.word	0x2000009c
 8001c34:	20000098 	.word	0x20000098

08001c38 <APP_STATUS_LED_TaskUpdate>:
 * - DISCHARGING: LED 1 OFF, LED 2 OFF, LED 3 ON
 * - CHARGING: LED 1 OFF, LED 2 OFF, LED 3 TOGGLE with frequency 500Hz
 */
static void
APP_STATUS_LED_TaskUpdate (void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  switch (*s_status_led.p_status_led)
 8001c3c:	4b2a      	ldr	r3, [pc, #168]	@ (8001ce8 <APP_STATUS_LED_TaskUpdate+0xb0>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	2b04      	cmp	r3, #4
 8001c44:	d84c      	bhi.n	8001ce0 <APP_STATUS_LED_TaskUpdate+0xa8>
 8001c46:	a201      	add	r2, pc, #4	@ (adr r2, 8001c4c <APP_STATUS_LED_TaskUpdate+0x14>)
 8001c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c4c:	08001c61 	.word	0x08001c61
 8001c50:	08001c81 	.word	0x08001c81
 8001c54:	08001ca1 	.word	0x08001ca1
 8001c58:	08001ca1 	.word	0x08001ca1
 8001c5c:	08001cc1 	.word	0x08001cc1
  {
    case WAIT_INPUT_VOLTAGE:
      LL_GPIO_SetOutputPin(LED_WAIT_GPIO_Port, LED_WAIT_Pin);
 8001c60:	f240 1101 	movw	r1, #257	@ 0x101
 8001c64:	4821      	ldr	r0, [pc, #132]	@ (8001cec <APP_STATUS_LED_TaskUpdate+0xb4>)
 8001c66:	f7ff ff85 	bl	8001b74 <LL_GPIO_SetOutputPin>
      LL_GPIO_ResetOutputPin(LED_SOFT_START_GPIO_Port, LED_SOFT_START_Pin);
 8001c6a:	f240 2102 	movw	r1, #514	@ 0x202
 8001c6e:	481f      	ldr	r0, [pc, #124]	@ (8001cec <APP_STATUS_LED_TaskUpdate+0xb4>)
 8001c70:	f7ff ff8f 	bl	8001b92 <LL_GPIO_ResetOutputPin>
      LL_GPIO_ResetOutputPin(LED_PROCESS_GPIO_Port, LED_PROCESS_Pin);
 8001c74:	f240 4104 	movw	r1, #1028	@ 0x404
 8001c78:	481c      	ldr	r0, [pc, #112]	@ (8001cec <APP_STATUS_LED_TaskUpdate+0xb4>)
 8001c7a:	f7ff ff8a 	bl	8001b92 <LL_GPIO_ResetOutputPin>
      break;
 8001c7e:	e030      	b.n	8001ce2 <APP_STATUS_LED_TaskUpdate+0xaa>

    case SOFT_START:
      LL_GPIO_ResetOutputPin(LED_WAIT_GPIO_Port, LED_WAIT_Pin);
 8001c80:	f240 1101 	movw	r1, #257	@ 0x101
 8001c84:	4819      	ldr	r0, [pc, #100]	@ (8001cec <APP_STATUS_LED_TaskUpdate+0xb4>)
 8001c86:	f7ff ff84 	bl	8001b92 <LL_GPIO_ResetOutputPin>
      LL_GPIO_SetOutputPin(LED_SOFT_START_GPIO_Port, LED_SOFT_START_Pin);
 8001c8a:	f240 2102 	movw	r1, #514	@ 0x202
 8001c8e:	4817      	ldr	r0, [pc, #92]	@ (8001cec <APP_STATUS_LED_TaskUpdate+0xb4>)
 8001c90:	f7ff ff70 	bl	8001b74 <LL_GPIO_SetOutputPin>
      LL_GPIO_ResetOutputPin(LED_PROCESS_GPIO_Port, LED_PROCESS_Pin);
 8001c94:	f240 4104 	movw	r1, #1028	@ 0x404
 8001c98:	4814      	ldr	r0, [pc, #80]	@ (8001cec <APP_STATUS_LED_TaskUpdate+0xb4>)
 8001c9a:	f7ff ff7a 	bl	8001b92 <LL_GPIO_ResetOutputPin>
      break;
 8001c9e:	e020      	b.n	8001ce2 <APP_STATUS_LED_TaskUpdate+0xaa>

    case CHARGING:
    case WAIT_DISCHARGING:
      LL_GPIO_ResetOutputPin(LED_WAIT_GPIO_Port, LED_WAIT_Pin);
 8001ca0:	f240 1101 	movw	r1, #257	@ 0x101
 8001ca4:	4811      	ldr	r0, [pc, #68]	@ (8001cec <APP_STATUS_LED_TaskUpdate+0xb4>)
 8001ca6:	f7ff ff74 	bl	8001b92 <LL_GPIO_ResetOutputPin>
      LL_GPIO_ResetOutputPin(LED_SOFT_START_GPIO_Port, LED_SOFT_START_Pin);
 8001caa:	f240 2102 	movw	r1, #514	@ 0x202
 8001cae:	480f      	ldr	r0, [pc, #60]	@ (8001cec <APP_STATUS_LED_TaskUpdate+0xb4>)
 8001cb0:	f7ff ff6f 	bl	8001b92 <LL_GPIO_ResetOutputPin>
      LL_GPIO_TogglePin(LED_PROCESS_GPIO_Port, LED_PROCESS_Pin);
 8001cb4:	f240 4104 	movw	r1, #1028	@ 0x404
 8001cb8:	480c      	ldr	r0, [pc, #48]	@ (8001cec <APP_STATUS_LED_TaskUpdate+0xb4>)
 8001cba:	f7ff ff79 	bl	8001bb0 <LL_GPIO_TogglePin>
      break;
 8001cbe:	e010      	b.n	8001ce2 <APP_STATUS_LED_TaskUpdate+0xaa>

    case DISCHARGING:
      LL_GPIO_ResetOutputPin(LED_WAIT_GPIO_Port, LED_WAIT_Pin);
 8001cc0:	f240 1101 	movw	r1, #257	@ 0x101
 8001cc4:	4809      	ldr	r0, [pc, #36]	@ (8001cec <APP_STATUS_LED_TaskUpdate+0xb4>)
 8001cc6:	f7ff ff64 	bl	8001b92 <LL_GPIO_ResetOutputPin>
      LL_GPIO_ResetOutputPin(LED_SOFT_START_GPIO_Port, LED_SOFT_START_Pin);
 8001cca:	f240 2102 	movw	r1, #514	@ 0x202
 8001cce:	4807      	ldr	r0, [pc, #28]	@ (8001cec <APP_STATUS_LED_TaskUpdate+0xb4>)
 8001cd0:	f7ff ff5f 	bl	8001b92 <LL_GPIO_ResetOutputPin>
      LL_GPIO_SetOutputPin(LED_PROCESS_GPIO_Port, LED_PROCESS_Pin);
 8001cd4:	f240 4104 	movw	r1, #1028	@ 0x404
 8001cd8:	4804      	ldr	r0, [pc, #16]	@ (8001cec <APP_STATUS_LED_TaskUpdate+0xb4>)
 8001cda:	f7ff ff4b 	bl	8001b74 <LL_GPIO_SetOutputPin>
      break;
 8001cde:	e000      	b.n	8001ce2 <APP_STATUS_LED_TaskUpdate+0xaa>
    default:
      break;
 8001ce0:	bf00      	nop
  }
}
 8001ce2:	bf00      	nop
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	200004a8 	.word	0x200004a8
 8001cec:	40010c00 	.word	0x40010c00

08001cf0 <LL_I2C_IsEnabled>:
  * @rmtoll CR1          PE            LL_I2C_IsEnabled
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsEnabled(I2C_TypeDef *I2Cx)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->CR1, I2C_CR1_PE) == (I2C_CR1_PE));
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0301 	and.w	r3, r3, #1
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	bf0c      	ite	eq
 8001d04:	2301      	moveq	r3, #1
 8001d06:	2300      	movne	r3, #0
 8001d08:	b2db      	uxtb	r3, r3
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bc80      	pop	{r7}
 8001d12:	4770      	bx	lr

08001d14 <LL_I2C_IsActiveFlag_TXE>:
  * @rmtoll SR1          TXE           LL_I2C_IsActiveFlag_TXE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXE(I2C_TypeDef *I2Cx)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_TXE) == (I2C_SR1_TXE));
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	695b      	ldr	r3, [r3, #20]
 8001d20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d24:	2b80      	cmp	r3, #128	@ 0x80
 8001d26:	bf0c      	ite	eq
 8001d28:	2301      	moveq	r3, #1
 8001d2a:	2300      	movne	r3, #0
 8001d2c:	b2db      	uxtb	r3, r3
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bc80      	pop	{r7}
 8001d36:	4770      	bx	lr

08001d38 <LL_I2C_IsActiveFlag_BTF>:
  * @rmtoll SR1          BTF           LL_I2C_IsActiveFlag_BTF
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_BTF(I2C_TypeDef *I2Cx)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_BTF) == (I2C_SR1_BTF));
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	695b      	ldr	r3, [r3, #20]
 8001d44:	f003 0304 	and.w	r3, r3, #4
 8001d48:	2b04      	cmp	r3, #4
 8001d4a:	bf0c      	ite	eq
 8001d4c:	2301      	moveq	r3, #1
 8001d4e:	2300      	movne	r3, #0
 8001d50:	b2db      	uxtb	r3, r3
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bc80      	pop	{r7}
 8001d5a:	4770      	bx	lr

08001d5c <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll SR1          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(I2C_TypeDef *I2Cx)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_RXNE) == (I2C_SR1_RXNE));
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	695b      	ldr	r3, [r3, #20]
 8001d68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d6c:	2b40      	cmp	r3, #64	@ 0x40
 8001d6e:	bf0c      	ite	eq
 8001d70:	2301      	moveq	r3, #1
 8001d72:	2300      	movne	r3, #0
 8001d74:	b2db      	uxtb	r3, r3
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bc80      	pop	{r7}
 8001d7e:	4770      	bx	lr

08001d80 <LL_I2C_IsActiveFlag_ADDR>:
  * @rmtoll SR1          ADDR          LL_I2C_IsActiveFlag_ADDR
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_ADDR(I2C_TypeDef *I2Cx)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_ADDR) == (I2C_SR1_ADDR));
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	695b      	ldr	r3, [r3, #20]
 8001d8c:	f003 0302 	and.w	r3, r3, #2
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	bf0c      	ite	eq
 8001d94:	2301      	moveq	r3, #1
 8001d96:	2300      	movne	r3, #0
 8001d98:	b2db      	uxtb	r3, r3
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bc80      	pop	{r7}
 8001da2:	4770      	bx	lr

08001da4 <LL_I2C_ClearFlag_ADDR>:
  * @rmtoll SR1          ADDR          LL_I2C_ClearFlag_ADDR
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_ADDR(I2C_TypeDef *I2Cx)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = I2Cx->SR1;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	695b      	ldr	r3, [r3, #20]
 8001db0:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8001db2:	68fb      	ldr	r3, [r7, #12]
  tmpreg = I2Cx->SR2;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	699b      	ldr	r3, [r3, #24]
 8001db8:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8001dba:	68fb      	ldr	r3, [r7, #12]
}
 8001dbc:	bf00      	nop
 8001dbe:	3714      	adds	r7, #20
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bc80      	pop	{r7}
 8001dc4:	4770      	bx	lr

08001dc6 <LL_I2C_GenerateStopCondition>:
  * @rmtoll CR1          STOP          LL_I2C_GenerateStopCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStopCondition(I2C_TypeDef *I2Cx)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	b083      	sub	sp, #12
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_STOP);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	601a      	str	r2, [r3, #0]
}
 8001dda:	bf00      	nop
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bc80      	pop	{r7}
 8001de2:	4770      	bx	lr

08001de4 <LL_I2C_ReceiveData8>:
  * @rmtoll DR           DR            LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x0 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->DR, I2C_DR_DR));
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	691b      	ldr	r3, [r3, #16]
 8001df0:	b2db      	uxtb	r3, r3
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bc80      	pop	{r7}
 8001dfa:	4770      	bx	lr

08001dfc <BSP_I2C_MasterTransmit7B>:
 * @param p_i2c Pointer to the I2C configuration data structure.
 * @return Status of the I2C operation.
 */
i2c_status_t
BSP_I2C_MasterTransmit7B (i2c_data_t *p_i2c)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  // Start Condition
  p_i2c->status = I2C_MasterStart((I2C_TypeDef *)p_i2c->i2c_reg);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f000 f8f7 	bl	8001ffc <I2C_MasterStart>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	461a      	mov	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	731a      	strb	r2, [r3, #12]
  if (p_i2c->status == I2C_TIMEOUT)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	7b1b      	ldrb	r3, [r3, #12]
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d101      	bne.n	8001e24 <BSP_I2C_MasterTransmit7B+0x28>
  {
    return I2C_TIMEOUT;
 8001e20:	2300      	movs	r3, #0
 8001e22:	e031      	b.n	8001e88 <BSP_I2C_MasterTransmit7B+0x8c>
  }

  // Transmit Address, Clear ADDR bit
  p_i2c->status = I2C_SetAddress7B((I2C_TypeDef *)p_i2c->i2c_reg,
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681a      	ldr	r2, [r3, #0]
                                   (uint16_t)p_i2c->address);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	89db      	ldrh	r3, [r3, #14]
 8001e2c:	b29b      	uxth	r3, r3
  p_i2c->status = I2C_SetAddress7B((I2C_TypeDef *)p_i2c->i2c_reg,
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	4619      	mov	r1, r3
 8001e32:	4610      	mov	r0, r2
 8001e34:	f000 f916 	bl	8002064 <I2C_SetAddress7B>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	731a      	strb	r2, [r3, #12]
  if (p_i2c->status == I2C_TIMEOUT)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	7b1b      	ldrb	r3, [r3, #12]
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d101      	bne.n	8001e4e <BSP_I2C_MasterTransmit7B+0x52>
  {
    return I2C_TIMEOUT;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	e01c      	b.n	8001e88 <BSP_I2C_MasterTransmit7B+0x8c>
  }

  // Transmit Data
  p_i2c->status = I2C_TransmitData7B((I2C_TypeDef *)p_i2c->i2c_reg,
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6818      	ldr	r0, [r3, #0]
                                     (uint32_t)p_i2c->size_buffer,
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6899      	ldr	r1, [r3, #8]
                                     (uint8_t *)p_i2c->buffer);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
  p_i2c->status = I2C_TransmitData7B((I2C_TypeDef *)p_i2c->i2c_reg,
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	f000 f928 	bl	80020b0 <I2C_TransmitData7B>
 8001e60:	4603      	mov	r3, r0
 8001e62:	461a      	mov	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	731a      	strb	r2, [r3, #12]
  if (p_i2c->status == I2C_TIMEOUT)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	7b1b      	ldrb	r3, [r3, #12]
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <BSP_I2C_MasterTransmit7B+0x7a>
  {
    return I2C_TIMEOUT;
 8001e72:	2300      	movs	r3, #0
 8001e74:	e008      	b.n	8001e88 <BSP_I2C_MasterTransmit7B+0x8c>
  }

  // Stop Condition
  I2C_MastterStop((I2C_TypeDef *)p_i2c->i2c_reg);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f000 f8e6 	bl	800204c <I2C_MastterStop>

  // Done Transmit Frame
  p_i2c->status = I2C_OK;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	731a      	strb	r2, [r3, #12]
  return I2C_OK;
 8001e86:	2301      	movs	r3, #1
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3708      	adds	r7, #8
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <BSP_I2C_MasterReceive7B>:
 * @param p_i2c Pointer to the I2C configuration data structure.
 * @return Status of the I2C operation.
 */
i2c_status_t
BSP_I2C_MasterReceive7B (i2c_data_t *p_i2c)
{
 8001e90:	b590      	push	{r4, r7, lr}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  uint32_t remaining = p_i2c->size_buffer;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	60fb      	str	r3, [r7, #12]
  // Start Condition
  p_i2c->status = I2C_MasterStart((I2C_TypeDef *)p_i2c->i2c_reg);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f000 f8aa 	bl	8001ffc <I2C_MasterStart>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	461a      	mov	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	731a      	strb	r2, [r3, #12]
  if (p_i2c->status == I2C_TIMEOUT)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	7b1b      	ldrb	r3, [r3, #12]
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d101      	bne.n	8001ebe <BSP_I2C_MasterReceive7B+0x2e>
  {
    return I2C_TIMEOUT;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	e089      	b.n	8001fd2 <BSP_I2C_MasterReceive7B+0x142>
  }

  // Transmit Address, Clear ADDR bit
  I2C_SetAddress7B((I2C_TypeDef *)p_i2c->i2c_reg, (uint8_t)p_i2c->address);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	89db      	ldrh	r3, [r3, #14]
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	4619      	mov	r1, r3
 8001ecc:	4610      	mov	r0, r2
 8001ece:	f000 f8c9 	bl	8002064 <I2C_SetAddress7B>

  // Receive Data
  if (p_i2c->size_buffer == 1)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d04c      	beq.n	8001f74 <BSP_I2C_MasterReceive7B+0xe4>
  {
    goto last_byte;
  }

  while (remaining > 2)
 8001eda:	e027      	b.n	8001f2c <BSP_I2C_MasterReceive7B+0x9c>
  {
    // Wait for RxNE to set
    p_i2c->status = I2C_WaitBitRXNE((I2C_TypeDef *)p_i2c->i2c_reg);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f000 f935 	bl	8002150 <I2C_WaitBitRXNE>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	461a      	mov	r2, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	731a      	strb	r2, [r3, #12]
    if (p_i2c->status == I2C_TIMEOUT)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	7b1b      	ldrb	r3, [r3, #12]
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d101      	bne.n	8001efc <BSP_I2C_MasterReceive7B+0x6c>
    {
      return I2C_TIMEOUT;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	e06a      	b.n	8001fd2 <BSP_I2C_MasterReceive7B+0x142>
    }

    // Copy the data into the buffer
    p_i2c->buffer[p_i2c->size_buffer - remaining]
        = LL_I2C_ReceiveData8((I2C_TypeDef *)p_i2c->i2c_reg);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6818      	ldr	r0, [r3, #0]
    p_i2c->buffer[p_i2c->size_buffer - remaining]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685a      	ldr	r2, [r3, #4]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6899      	ldr	r1, [r3, #8]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	1acb      	subs	r3, r1, r3
 8001f0c:	18d4      	adds	r4, r2, r3
        = LL_I2C_ReceiveData8((I2C_TypeDef *)p_i2c->i2c_reg);
 8001f0e:	f7ff ff69 	bl	8001de4 <LL_I2C_ReceiveData8>
 8001f12:	4603      	mov	r3, r0
 8001f14:	7023      	strb	r3, [r4, #0]

    // Set the ACK bit to Acknowledge the data received
    p_i2c->i2c_reg->CR1 = (p_i2c->i2c_reg->CR1) | I2C_CR1_ACK_Msk;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001f24:	601a      	str	r2, [r3, #0]

    remaining--;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	3b01      	subs	r3, #1
 8001f2a:	60fb      	str	r3, [r7, #12]
  while (remaining > 2)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d8d4      	bhi.n	8001edc <BSP_I2C_MasterReceive7B+0x4c>
  }
  // Read the SECOND LAST BYTE
  // Wait for RxNE to set
  p_i2c->status = I2C_WaitBitRXNE((I2C_TypeDef *)p_i2c->i2c_reg);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f000 f90a 	bl	8002150 <I2C_WaitBitRXNE>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	461a      	mov	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	731a      	strb	r2, [r3, #12]
  if (p_i2c->status == I2C_TIMEOUT)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	7b1b      	ldrb	r3, [r3, #12]
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d101      	bne.n	8001f52 <BSP_I2C_MasterReceive7B+0xc2>
  {
    return I2C_TIMEOUT;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	e03f      	b.n	8001fd2 <BSP_I2C_MasterReceive7B+0x142>
  }

  // Copy the data into the buffer
  p_i2c->buffer[p_i2c->size_buffer - remaining]
      = LL_I2C_ReceiveData8((I2C_TypeDef *)p_i2c->i2c_reg);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6818      	ldr	r0, [r3, #0]
  p_i2c->buffer[p_i2c->size_buffer - remaining]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685a      	ldr	r2, [r3, #4]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6899      	ldr	r1, [r3, #8]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	1acb      	subs	r3, r1, r3
 8001f62:	18d4      	adds	r4, r2, r3
      = LL_I2C_ReceiveData8((I2C_TypeDef *)p_i2c->i2c_reg);
 8001f64:	f7ff ff3e 	bl	8001de4 <LL_I2C_ReceiveData8>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	7023      	strb	r3, [r4, #0]
  remaining--;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	60fb      	str	r3, [r7, #12]
 8001f72:	e000      	b.n	8001f76 <BSP_I2C_MasterReceive7B+0xe6>
    goto last_byte;
 8001f74:	bf00      	nop

last_byte:

  // Clear ACK bit
  p_i2c->i2c_reg->CR1 = (p_i2c->i2c_reg->CR1) & ~I2C_CR1_ACK_Msk;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f84:	601a      	str	r2, [r3, #0]

  // Stop I2C
  I2C_MastterStop((I2C_TypeDef *)p_i2c->i2c_reg);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f000 f85e 	bl	800204c <I2C_MastterStop>

  // Wait for RxNE to set
  p_i2c->status = I2C_WaitBitRXNE((I2C_TypeDef *)p_i2c->i2c_reg);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f000 f8db 	bl	8002150 <I2C_WaitBitRXNE>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	731a      	strb	r2, [r3, #12]
  if (p_i2c->status == I2C_TIMEOUT)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	7b1b      	ldrb	r3, [r3, #12]
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d101      	bne.n	8001fb0 <BSP_I2C_MasterReceive7B+0x120>
  {
    return I2C_TIMEOUT;
 8001fac:	2300      	movs	r3, #0
 8001fae:	e010      	b.n	8001fd2 <BSP_I2C_MasterReceive7B+0x142>
  }

  // Copy the data into the buffer
  p_i2c->buffer[p_i2c->size_buffer - remaining]
      = LL_I2C_ReceiveData8((I2C_TypeDef *)p_i2c->i2c_reg);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6818      	ldr	r0, [r3, #0]
  p_i2c->buffer[p_i2c->size_buffer - remaining]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685a      	ldr	r2, [r3, #4]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6899      	ldr	r1, [r3, #8]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	1acb      	subs	r3, r1, r3
 8001fc0:	18d4      	adds	r4, r2, r3
      = LL_I2C_ReceiveData8((I2C_TypeDef *)p_i2c->i2c_reg);
 8001fc2:	f7ff ff0f 	bl	8001de4 <LL_I2C_ReceiveData8>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	7023      	strb	r3, [r4, #0]

  // Done Receive Frame
  p_i2c->status = I2C_OK;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2201      	movs	r2, #1
 8001fce:	731a      	strb	r2, [r3, #12]
  return I2C_OK;
 8001fd0:	2301      	movs	r3, #1
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3714      	adds	r7, #20
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd90      	pop	{r4, r7, pc}
	...

08001fdc <BSP_I2C_TimeOut>:
 * This function decrements the u32_timer_wait_set variable used for handling
 * I2C timeouts.
 */
void
BSP_I2C_TimeOut (void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  if (u32_timer_wait_set >= 0)
 8001fe0:	4b05      	ldr	r3, [pc, #20]	@ (8001ff8 <BSP_I2C_TimeOut+0x1c>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
  {
    u32_timer_wait_set--;
 8001fe4:	4b04      	ldr	r3, [pc, #16]	@ (8001ff8 <BSP_I2C_TimeOut+0x1c>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	3b01      	subs	r3, #1
 8001fea:	4a03      	ldr	r2, [pc, #12]	@ (8001ff8 <BSP_I2C_TimeOut+0x1c>)
 8001fec:	6013      	str	r3, [r2, #0]
  }
}
 8001fee:	bf00      	nop
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bc80      	pop	{r7}
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	200004ac 	.word	0x200004ac

08001ffc <I2C_MasterStart>:
 * @param _i2c_reg Pointer to the I2C peripheral instance.
 * @return Status of the I2C operation.
 */
static i2c_status_t
I2C_MasterStart (I2C_TypeDef *_i2c_reg)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  _i2c_reg->CR1 |= I2C_CR1_ACK_Msk;   // Enable the ACK
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	601a      	str	r2, [r3, #0]
  _i2c_reg->CR1 |= I2C_CR1_START_Msk; // Generate START
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	601a      	str	r2, [r3, #0]

  // Wait for PE bit to set
  u32_timer_wait_set = TIMEOUT_WAIT_SET;
 800201c:	4b0a      	ldr	r3, [pc, #40]	@ (8002048 <I2C_MasterStart+0x4c>)
 800201e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002022:	601a      	str	r2, [r3, #0]
  while (LL_I2C_IsEnabled(_i2c_reg))
 8002024:	e005      	b.n	8002032 <I2C_MasterStart+0x36>
  {
    if (u32_timer_wait_set == 0)
 8002026:	4b08      	ldr	r3, [pc, #32]	@ (8002048 <I2C_MasterStart+0x4c>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d101      	bne.n	8002032 <I2C_MasterStart+0x36>
    {
      return I2C_TIMEOUT;
 800202e:	2300      	movs	r3, #0
 8002030:	e006      	b.n	8002040 <I2C_MasterStart+0x44>
  while (LL_I2C_IsEnabled(_i2c_reg))
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f7ff fe5c 	bl	8001cf0 <LL_I2C_IsEnabled>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d1f3      	bne.n	8002026 <I2C_MasterStart+0x2a>
    }
  }
  return I2C_OK;
 800203e:	2301      	movs	r3, #1
}
 8002040:	4618      	mov	r0, r3
 8002042:	3708      	adds	r7, #8
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	200004ac 	.word	0x200004ac

0800204c <I2C_MastterStop>:
 *
 * @param _i2c_reg Pointer to the I2C peripheral instance.
 */
static void
I2C_MastterStop (I2C_TypeDef *_i2c_reg)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  LL_I2C_GenerateStopCondition(_i2c_reg);
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f7ff feb6 	bl	8001dc6 <LL_I2C_GenerateStopCondition>
}
 800205a:	bf00      	nop
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
	...

08002064 <I2C_SetAddress7B>:
 * @param _address 7-bit address of the I2C device.
 * @return Status of the I2C operation.
 */
static i2c_status_t
I2C_SetAddress7B (I2C_TypeDef *_i2c_reg, uint8_t _address)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	460b      	mov	r3, r1
 800206e:	70fb      	strb	r3, [r7, #3]
  // Send the address
  I2C1->DR = _address;
 8002070:	4a0d      	ldr	r2, [pc, #52]	@ (80020a8 <I2C_SetAddress7B+0x44>)
 8002072:	78fb      	ldrb	r3, [r7, #3]
 8002074:	6113      	str	r3, [r2, #16]

  // Wait for ADDR bit to set
  u32_timer_wait_set = TIMEOUT_WAIT_SET;
 8002076:	4b0d      	ldr	r3, [pc, #52]	@ (80020ac <I2C_SetAddress7B+0x48>)
 8002078:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800207c:	601a      	str	r2, [r3, #0]
  while (!LL_I2C_IsActiveFlag_ADDR(_i2c_reg))
 800207e:	e005      	b.n	800208c <I2C_SetAddress7B+0x28>
  {
    if (u32_timer_wait_set == 0)
 8002080:	4b0a      	ldr	r3, [pc, #40]	@ (80020ac <I2C_SetAddress7B+0x48>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d101      	bne.n	800208c <I2C_SetAddress7B+0x28>
    {
      return I2C_TIMEOUT;
 8002088:	2300      	movs	r3, #0
 800208a:	e009      	b.n	80020a0 <I2C_SetAddress7B+0x3c>
  while (!LL_I2C_IsActiveFlag_ADDR(_i2c_reg))
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f7ff fe77 	bl	8001d80 <LL_I2C_IsActiveFlag_ADDR>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d0f3      	beq.n	8002080 <I2C_SetAddress7B+0x1c>
    }
  }

  // Read SR1 and SR2 to clear the ADDR bit
  LL_I2C_ClearFlag_ADDR(_i2c_reg);
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f7ff fe83 	bl	8001da4 <LL_I2C_ClearFlag_ADDR>

  return I2C_OK;
 800209e:	2301      	movs	r3, #1
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3708      	adds	r7, #8
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	40005400 	.word	0x40005400
 80020ac:	200004ac 	.word	0x200004ac

080020b0 <I2C_TransmitData7B>:
 * @param _buffer  Pointer to the data buffer.
 * @return Status of the I2C operation.
 */
static i2c_status_t
I2C_TransmitData7B (I2C_TypeDef *_i2c_reg, uint32_t _size, uint8_t *_buffer)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	607a      	str	r2, [r7, #4]
  // Wait for TXE bit to set
  u32_timer_wait_set = TIMEOUT_WAIT_SET;
 80020bc:	4b22      	ldr	r3, [pc, #136]	@ (8002148 <I2C_TransmitData7B+0x98>)
 80020be:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80020c2:	601a      	str	r2, [r3, #0]
  while (!LL_I2C_IsActiveFlag_TXE(_i2c_reg))
 80020c4:	e005      	b.n	80020d2 <I2C_TransmitData7B+0x22>
  {
    if (u32_timer_wait_set == 0)
 80020c6:	4b20      	ldr	r3, [pc, #128]	@ (8002148 <I2C_TransmitData7B+0x98>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d101      	bne.n	80020d2 <I2C_TransmitData7B+0x22>
    {
      return I2C_TIMEOUT;
 80020ce:	2300      	movs	r3, #0
 80020d0:	e035      	b.n	800213e <I2C_TransmitData7B+0x8e>
  while (!LL_I2C_IsActiveFlag_TXE(_i2c_reg))
 80020d2:	68f8      	ldr	r0, [r7, #12]
 80020d4:	f7ff fe1e 	bl	8001d14 <LL_I2C_IsActiveFlag_TXE>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d0f3      	beq.n	80020c6 <I2C_TransmitData7B+0x16>
    }
  }

  while (_size > 0)
 80020de:	e019      	b.n	8002114 <I2C_TransmitData7B+0x64>
  {
    // Wait for TXE bit to set
    u32_timer_wait_set = TIMEOUT_WAIT_SET;
 80020e0:	4b19      	ldr	r3, [pc, #100]	@ (8002148 <I2C_TransmitData7B+0x98>)
 80020e2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80020e6:	601a      	str	r2, [r3, #0]
    while (!LL_I2C_IsActiveFlag_TXE(_i2c_reg))
 80020e8:	e005      	b.n	80020f6 <I2C_TransmitData7B+0x46>
    {
      if (u32_timer_wait_set == 0)
 80020ea:	4b17      	ldr	r3, [pc, #92]	@ (8002148 <I2C_TransmitData7B+0x98>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d101      	bne.n	80020f6 <I2C_TransmitData7B+0x46>
      {
        return I2C_TIMEOUT;
 80020f2:	2300      	movs	r3, #0
 80020f4:	e023      	b.n	800213e <I2C_TransmitData7B+0x8e>
    while (!LL_I2C_IsActiveFlag_TXE(_i2c_reg))
 80020f6:	68f8      	ldr	r0, [r7, #12]
 80020f8:	f7ff fe0c 	bl	8001d14 <LL_I2C_IsActiveFlag_TXE>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d0f3      	beq.n	80020ea <I2C_TransmitData7B+0x3a>
      }
    }

    // Transmit Data
    I2C1->DR = (uint32_t)*_buffer++;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	1c5a      	adds	r2, r3, #1
 8002106:	607a      	str	r2, [r7, #4]
 8002108:	781a      	ldrb	r2, [r3, #0]
 800210a:	4b10      	ldr	r3, [pc, #64]	@ (800214c <I2C_TransmitData7B+0x9c>)
 800210c:	611a      	str	r2, [r3, #16]
    _size--;
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	3b01      	subs	r3, #1
 8002112:	60bb      	str	r3, [r7, #8]
  while (_size > 0)
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d1e2      	bne.n	80020e0 <I2C_TransmitData7B+0x30>
  }

  // Wait for BTF to set
  u32_timer_wait_set = TIMEOUT_WAIT_SET;
 800211a:	4b0b      	ldr	r3, [pc, #44]	@ (8002148 <I2C_TransmitData7B+0x98>)
 800211c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002120:	601a      	str	r2, [r3, #0]
  while (!LL_I2C_IsActiveFlag_BTF(_i2c_reg))
 8002122:	e005      	b.n	8002130 <I2C_TransmitData7B+0x80>
  {
    if (u32_timer_wait_set == 0)
 8002124:	4b08      	ldr	r3, [pc, #32]	@ (8002148 <I2C_TransmitData7B+0x98>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d101      	bne.n	8002130 <I2C_TransmitData7B+0x80>
    {
      return I2C_TIMEOUT;
 800212c:	2300      	movs	r3, #0
 800212e:	e006      	b.n	800213e <I2C_TransmitData7B+0x8e>
  while (!LL_I2C_IsActiveFlag_BTF(_i2c_reg))
 8002130:	68f8      	ldr	r0, [r7, #12]
 8002132:	f7ff fe01 	bl	8001d38 <LL_I2C_IsActiveFlag_BTF>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d0f3      	beq.n	8002124 <I2C_TransmitData7B+0x74>
    }
  }

  return I2C_OK;
 800213c:	2301      	movs	r3, #1
}
 800213e:	4618      	mov	r0, r3
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	200004ac 	.word	0x200004ac
 800214c:	40005400 	.word	0x40005400

08002150 <I2C_WaitBitRXNE>:
 * @param _i2c_reg Pointer to the I2C peripheral instance.
 * @return Status of the I2C operation.
 */
static i2c_status_t
I2C_WaitBitRXNE (I2C_TypeDef *_i2c_reg)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  u32_timer_wait_set = TIMEOUT_WAIT_SET;
 8002158:	4b0a      	ldr	r3, [pc, #40]	@ (8002184 <I2C_WaitBitRXNE+0x34>)
 800215a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800215e:	601a      	str	r2, [r3, #0]
  while (!LL_I2C_IsActiveFlag_RXNE(_i2c_reg))
 8002160:	e005      	b.n	800216e <I2C_WaitBitRXNE+0x1e>
  {
    if (u32_timer_wait_set == 0)
 8002162:	4b08      	ldr	r3, [pc, #32]	@ (8002184 <I2C_WaitBitRXNE+0x34>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d101      	bne.n	800216e <I2C_WaitBitRXNE+0x1e>
    {
      return I2C_TIMEOUT;
 800216a:	2300      	movs	r3, #0
 800216c:	e006      	b.n	800217c <I2C_WaitBitRXNE+0x2c>
  while (!LL_I2C_IsActiveFlag_RXNE(_i2c_reg))
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f7ff fdf4 	bl	8001d5c <LL_I2C_IsActiveFlag_RXNE>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d0f3      	beq.n	8002162 <I2C_WaitBitRXNE+0x12>
    }
  }
  return I2C_OK;
 800217a:	2301      	movs	r3, #1
}
 800217c:	4618      	mov	r0, r3
 800217e:	3708      	adds	r7, #8
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	200004ac 	.word	0x200004ac

08002188 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f043 0201 	orr.w	r2, r3, #1
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	601a      	str	r2, [r3, #0]
}
 800219c:	bf00      	nop
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bc80      	pop	{r7}
 80021a4:	4770      	bx	lr

080021a6 <LL_TIM_DisableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_DisableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableCounter(TIM_TypeDef *TIMx)
{
 80021a6:	b480      	push	{r7}
 80021a8:	b083      	sub	sp, #12
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f023 0201 	bic.w	r2, r3, #1
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	601a      	str	r2, [r3, #0]
}
 80021ba:	bf00      	nop
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	bc80      	pop	{r7}
 80021c2:	4770      	bx	lr

080021c4 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	683a      	ldr	r2, [r7, #0]
 80021d2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80021d4:	bf00      	nop
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	bc80      	pop	{r7}
 80021dc:	4770      	bx	lr

080021de <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 80021de:	b480      	push	{r7}
 80021e0:	b083      	sub	sp, #12
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
 80021e6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	683a      	ldr	r2, [r7, #0]
 80021ec:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80021ee:	bf00      	nop
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bc80      	pop	{r7}
 80021f6:	4770      	bx	lr

080021f8 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a1a      	ldr	r2, [r3, #32]
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	431a      	orrs	r2, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	621a      	str	r2, [r3, #32]
}
 800220e:	bf00      	nop
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	bc80      	pop	{r7}
 8002216:	4770      	bx	lr

08002218 <LL_TIM_CC_DisableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a1a      	ldr	r2, [r3, #32]
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	43db      	mvns	r3, r3
 800222a:	401a      	ands	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	621a      	str	r2, [r3, #32]
}
 8002230:	bf00      	nop
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	bc80      	pop	{r7}
 8002238:	4770      	bx	lr
	...

0800223c <LL_TIM_OC_SetMode>:
  *         @arg @ref LL_TIM_OCMODE_PWM1
  *         @arg @ref LL_TIM_OCMODE_PWM2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetMode(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Mode)
{
 800223c:	b480      	push	{r7}
 800223e:	b087      	sub	sp, #28
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d01c      	beq.n	8002288 <LL_TIM_OC_SetMode+0x4c>
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	2b04      	cmp	r3, #4
 8002252:	d017      	beq.n	8002284 <LL_TIM_OC_SetMode+0x48>
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	2b10      	cmp	r3, #16
 8002258:	d012      	beq.n	8002280 <LL_TIM_OC_SetMode+0x44>
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	2b40      	cmp	r3, #64	@ 0x40
 800225e:	d00d      	beq.n	800227c <LL_TIM_OC_SetMode+0x40>
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002266:	d007      	beq.n	8002278 <LL_TIM_OC_SetMode+0x3c>
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800226e:	d101      	bne.n	8002274 <LL_TIM_OC_SetMode+0x38>
 8002270:	2305      	movs	r3, #5
 8002272:	e00a      	b.n	800228a <LL_TIM_OC_SetMode+0x4e>
 8002274:	2306      	movs	r3, #6
 8002276:	e008      	b.n	800228a <LL_TIM_OC_SetMode+0x4e>
 8002278:	2304      	movs	r3, #4
 800227a:	e006      	b.n	800228a <LL_TIM_OC_SetMode+0x4e>
 800227c:	2303      	movs	r3, #3
 800227e:	e004      	b.n	800228a <LL_TIM_OC_SetMode+0x4e>
 8002280:	2302      	movs	r3, #2
 8002282:	e002      	b.n	800228a <LL_TIM_OC_SetMode+0x4e>
 8002284:	2301      	movs	r3, #1
 8002286:	e000      	b.n	800228a <LL_TIM_OC_SetMode+0x4e>
 8002288:	2300      	movs	r3, #0
 800228a:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	3318      	adds	r3, #24
 8002290:	4619      	mov	r1, r3
 8002292:	7dfb      	ldrb	r3, [r7, #23]
 8002294:	4a0d      	ldr	r2, [pc, #52]	@ (80022cc <LL_TIM_OC_SetMode+0x90>)
 8002296:	5cd3      	ldrb	r3, [r2, r3]
 8002298:	440b      	add	r3, r1
 800229a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	7dfb      	ldrb	r3, [r7, #23]
 80022a2:	490b      	ldr	r1, [pc, #44]	@ (80022d0 <LL_TIM_OC_SetMode+0x94>)
 80022a4:	5ccb      	ldrb	r3, [r1, r3]
 80022a6:	4619      	mov	r1, r3
 80022a8:	2373      	movs	r3, #115	@ 0x73
 80022aa:	408b      	lsls	r3, r1
 80022ac:	43db      	mvns	r3, r3
 80022ae:	401a      	ands	r2, r3
 80022b0:	7dfb      	ldrb	r3, [r7, #23]
 80022b2:	4907      	ldr	r1, [pc, #28]	@ (80022d0 <LL_TIM_OC_SetMode+0x94>)
 80022b4:	5ccb      	ldrb	r3, [r1, r3]
 80022b6:	4619      	mov	r1, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	408b      	lsls	r3, r1
 80022bc:	431a      	orrs	r2, r3
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	601a      	str	r2, [r3, #0]
}
 80022c2:	bf00      	nop
 80022c4:	371c      	adds	r7, #28
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bc80      	pop	{r7}
 80022ca:	4770      	bx	lr
 80022cc:	080094d4 	.word	0x080094d4
 80022d0:	080094dc 	.word	0x080094dc

080022d4 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	683a      	ldr	r2, [r7, #0]
 80022e2:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80022e4:	bf00      	nop
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bc80      	pop	{r7}
 80022ec:	4770      	bx	lr

080022ee <LL_TIM_EnableAllOutputs>:
  * @rmtoll BDTR         MOE           LL_TIM_EnableAllOutputs
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableAllOutputs(TIM_TypeDef *TIMx)
{
 80022ee:	b480      	push	{r7}
 80022f0:	b083      	sub	sp, #12
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022fa:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	645a      	str	r2, [r3, #68]	@ 0x44
}
 8002302:	bf00      	nop
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	bc80      	pop	{r7}
 800230a:	4770      	bx	lr

0800230c <LL_TIM_DisableAllOutputs>:
  * @rmtoll BDTR         MOE           LL_TIM_DisableAllOutputs
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableAllOutputs(TIM_TypeDef *TIMx)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002318:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	645a      	str	r2, [r3, #68]	@ 0x44
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	bc80      	pop	{r7}
 8002328:	4770      	bx	lr

0800232a <BSP_PWM_EnableTimer>:
 * (Pulse Width Modulation) signal, such as output type (positive, negative, or
 * both), channel number, and timer information. The function
 */
void
BSP_PWM_EnableTimer (pwm_cfg_t *pwm_cfg)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b084      	sub	sp, #16
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
  uint32_t u32_mode;

  if ((pwm_cfg->output == PWM_POSITIVE)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	7c1b      	ldrb	r3, [r3, #16]
 8002336:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800233a:	b2db      	uxtb	r3, r3
 800233c:	2b00      	cmp	r3, #0
 800233e:	d006      	beq.n	800234e <BSP_PWM_EnableTimer+0x24>
      || (pwm_cfg->output == PWM_POSITIVE_NEGATIVE))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	7c1b      	ldrb	r3, [r3, #16]
 8002344:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2b01      	cmp	r3, #1
 800234c:	d11e      	bne.n	800238c <BSP_PWM_EnableTimer+0x62>
  {
    if (pwm_cfg->channel == PWM_CHANNEL_1)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	2b01      	cmp	r3, #1
 8002354:	d102      	bne.n	800235c <BSP_PWM_EnableTimer+0x32>
    {
      u32_mode = TIM_CCER_CC1E;
 8002356:	2301      	movs	r3, #1
 8002358:	60fb      	str	r3, [r7, #12]
 800235a:	e017      	b.n	800238c <BSP_PWM_EnableTimer+0x62>
    }
    else if (pwm_cfg->channel == PWM_CHANNEL_2)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	2b10      	cmp	r3, #16
 8002362:	d102      	bne.n	800236a <BSP_PWM_EnableTimer+0x40>
    {
      u32_mode = TIM_CCER_CC2E;
 8002364:	2310      	movs	r3, #16
 8002366:	60fb      	str	r3, [r7, #12]
 8002368:	e010      	b.n	800238c <BSP_PWM_EnableTimer+0x62>
    }
    else if (pwm_cfg->channel == PWM_CHANNEL_3)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002372:	d103      	bne.n	800237c <BSP_PWM_EnableTimer+0x52>
    {
      u32_mode = TIM_CCER_CC3E;
 8002374:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002378:	60fb      	str	r3, [r7, #12]
 800237a:	e007      	b.n	800238c <BSP_PWM_EnableTimer+0x62>
    }
    else if (pwm_cfg->channel == PWM_CHANNEL_4)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002384:	d102      	bne.n	800238c <BSP_PWM_EnableTimer+0x62>
    {
      u32_mode = TIM_CCER_CC4E;
 8002386:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800238a:	60fb      	str	r3, [r7, #12]
    }
  }
  if (pwm_cfg->output == PWM_POSITIVE_NEGATIVE)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	7c1b      	ldrb	r3, [r3, #16]
 8002390:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8002394:	b2db      	uxtb	r3, r3
 8002396:	2b01      	cmp	r3, #1
 8002398:	d11a      	bne.n	80023d0 <BSP_PWM_EnableTimer+0xa6>
  {
    if (pwm_cfg->channel == PWM_CHANNEL_1)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d104      	bne.n	80023ac <BSP_PWM_EnableTimer+0x82>
    {
      u32_mode |= TIM_CCER_CC1NE;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f043 0304 	orr.w	r3, r3, #4
 80023a8:	60fb      	str	r3, [r7, #12]
 80023aa:	e011      	b.n	80023d0 <BSP_PWM_EnableTimer+0xa6>
    }
    else if (pwm_cfg->channel == PWM_CHANNEL_2)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	2b10      	cmp	r3, #16
 80023b2:	d104      	bne.n	80023be <BSP_PWM_EnableTimer+0x94>
    {
      u32_mode |= TIM_CCER_CC2NE;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80023ba:	60fb      	str	r3, [r7, #12]
 80023bc:	e008      	b.n	80023d0 <BSP_PWM_EnableTimer+0xa6>
    }
    else if (pwm_cfg->channel == PWM_CHANNEL_3)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80023c6:	d103      	bne.n	80023d0 <BSP_PWM_EnableTimer+0xa6>
    {
      u32_mode |= TIM_CCER_CC3NE;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80023ce:	60fb      	str	r3, [r7, #12]
    }
  }

  // Configure Channel of Timer PWM Mode
  LL_TIM_OC_SetMode(
      (TIM_TypeDef *)pwm_cfg->p_tim, pwm_cfg->channel, LL_TIM_OCMODE_PWM1);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6818      	ldr	r0, [r3, #0]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	68db      	ldr	r3, [r3, #12]
  LL_TIM_OC_SetMode(
 80023d8:	2260      	movs	r2, #96	@ 0x60
 80023da:	4619      	mov	r1, r3
 80023dc:	f7ff ff2e 	bl	800223c <LL_TIM_OC_SetMode>

  // Enable Channel of Timer
  LL_TIM_CC_EnableChannel((TIM_TypeDef *)pwm_cfg->p_tim, u32_mode);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	68f9      	ldr	r1, [r7, #12]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7ff ff06 	bl	80021f8 <LL_TIM_CC_EnableChannel>

  // Enable Main output
  LL_TIM_EnableAllOutputs((TIM_TypeDef *)pwm_cfg->p_tim);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7ff ff7c 	bl	80022ee <LL_TIM_EnableAllOutputs>

  // Enable Timer
  LL_TIM_EnableCounter((TIM_TypeDef *)pwm_cfg->p_tim);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7ff fec4 	bl	8002188 <LL_TIM_EnableCounter>
}
 8002400:	bf00      	nop
 8002402:	3710      	adds	r7, #16
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <BSP_PWM_DisableTimer>:
 * configuration settings for a PWM (Pulse Width Modulation) timer, such as
 * output type, channel, and timer peripheral.
 */
void
BSP_PWM_DisableTimer (pwm_cfg_t *pwm_cfg)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  uint32_t u32_mode;

  if ((pwm_cfg->output == PWM_POSITIVE)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	7c1b      	ldrb	r3, [r3, #16]
 8002414:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8002418:	b2db      	uxtb	r3, r3
 800241a:	2b00      	cmp	r3, #0
 800241c:	d006      	beq.n	800242c <BSP_PWM_DisableTimer+0x24>
      || (pwm_cfg->output == PWM_POSITIVE_NEGATIVE))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	7c1b      	ldrb	r3, [r3, #16]
 8002422:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8002426:	b2db      	uxtb	r3, r3
 8002428:	2b01      	cmp	r3, #1
 800242a:	d11e      	bne.n	800246a <BSP_PWM_DisableTimer+0x62>
  {
    if (pwm_cfg->channel == PWM_CHANNEL_1)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	2b01      	cmp	r3, #1
 8002432:	d102      	bne.n	800243a <BSP_PWM_DisableTimer+0x32>
    {
      u32_mode = TIM_CCER_CC1E;
 8002434:	2301      	movs	r3, #1
 8002436:	60fb      	str	r3, [r7, #12]
 8002438:	e017      	b.n	800246a <BSP_PWM_DisableTimer+0x62>
    }
    else if (pwm_cfg->channel == PWM_CHANNEL_2)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	2b10      	cmp	r3, #16
 8002440:	d102      	bne.n	8002448 <BSP_PWM_DisableTimer+0x40>
    {
      u32_mode = TIM_CCER_CC2E;
 8002442:	2310      	movs	r3, #16
 8002444:	60fb      	str	r3, [r7, #12]
 8002446:	e010      	b.n	800246a <BSP_PWM_DisableTimer+0x62>
    }
    else if (pwm_cfg->channel == PWM_CHANNEL_3)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002450:	d103      	bne.n	800245a <BSP_PWM_DisableTimer+0x52>
    {
      u32_mode = TIM_CCER_CC3E;
 8002452:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002456:	60fb      	str	r3, [r7, #12]
 8002458:	e007      	b.n	800246a <BSP_PWM_DisableTimer+0x62>
    }
    else if (pwm_cfg->channel == PWM_CHANNEL_4)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002462:	d102      	bne.n	800246a <BSP_PWM_DisableTimer+0x62>
    {
      u32_mode = TIM_CCER_CC4E;
 8002464:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002468:	60fb      	str	r3, [r7, #12]
    }
  }
  if (pwm_cfg->output == PWM_POSITIVE_NEGATIVE)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	7c1b      	ldrb	r3, [r3, #16]
 800246e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8002472:	b2db      	uxtb	r3, r3
 8002474:	2b01      	cmp	r3, #1
 8002476:	d11a      	bne.n	80024ae <BSP_PWM_DisableTimer+0xa6>
  {
    if (pwm_cfg->channel == PWM_CHANNEL_1)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	2b01      	cmp	r3, #1
 800247e:	d104      	bne.n	800248a <BSP_PWM_DisableTimer+0x82>
    {
      u32_mode |= TIM_CCER_CC1NE;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f043 0304 	orr.w	r3, r3, #4
 8002486:	60fb      	str	r3, [r7, #12]
 8002488:	e011      	b.n	80024ae <BSP_PWM_DisableTimer+0xa6>
    }
    else if (pwm_cfg->channel == PWM_CHANNEL_2)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	2b10      	cmp	r3, #16
 8002490:	d104      	bne.n	800249c <BSP_PWM_DisableTimer+0x94>
    {
      u32_mode |= TIM_CCER_CC2NE;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002498:	60fb      	str	r3, [r7, #12]
 800249a:	e008      	b.n	80024ae <BSP_PWM_DisableTimer+0xa6>
    }
    else if (pwm_cfg->channel == PWM_CHANNEL_3)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80024a4:	d103      	bne.n	80024ae <BSP_PWM_DisableTimer+0xa6>
    {
      u32_mode |= TIM_CCER_CC3NE;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80024ac:	60fb      	str	r3, [r7, #12]
    }
  }
  // Disable Channel of Timer
  LL_TIM_CC_DisableChannel((TIM_TypeDef *)pwm_cfg->p_tim, u32_mode);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	68f9      	ldr	r1, [r7, #12]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7ff feaf 	bl	8002218 <LL_TIM_CC_DisableChannel>

  // Disable Main output
  LL_TIM_DisableAllOutputs((TIM_TypeDef *)pwm_cfg->p_tim);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4618      	mov	r0, r3
 80024c0:	f7ff ff24 	bl	800230c <LL_TIM_DisableAllOutputs>

  // Disable Timer
  LL_TIM_DisableCounter((TIM_TypeDef *)pwm_cfg->p_tim);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7ff fe6c 	bl	80021a6 <LL_TIM_DisableCounter>
}
 80024ce:	bf00      	nop
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <BSP_PWM_SetParameterProcess>:
 * @note Ensure that the `pwm_cfg` structure is properly initialized before
 * calling this function.
 */
void
BSP_PWM_SetParameterProcess (pwm_cfg_t *pwm_cfg)
{
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b082      	sub	sp, #8
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
  // Set value for PSC (Prescaler)
  LL_TIM_SetPrescaler((TIM_TypeDef *)pwm_cfg->p_tim, pwm_cfg->u16_prescaler);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	891b      	ldrh	r3, [r3, #8]
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	4619      	mov	r1, r3
 80024ea:	4610      	mov	r0, r2
 80024ec:	f7ff fe6a 	bl	80021c4 <LL_TIM_SetPrescaler>

  // Set value for ARR (Auto-Reload Register)
  LL_TIM_SetAutoReload((TIM_TypeDef *)pwm_cfg->p_tim,
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681a      	ldr	r2, [r3, #0]
                       pwm_cfg->u16_reg_auto_reload);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	889b      	ldrh	r3, [r3, #4]
 80024f8:	b29b      	uxth	r3, r3
  LL_TIM_SetAutoReload((TIM_TypeDef *)pwm_cfg->p_tim,
 80024fa:	4619      	mov	r1, r3
 80024fc:	4610      	mov	r0, r2
 80024fe:	f7ff fe6e 	bl	80021de <LL_TIM_SetAutoReload>

  // Set value for CRR (Compare Register)
  LL_TIM_OC_SetCompareCH1((TIM_TypeDef *)pwm_cfg->p_tim,
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681a      	ldr	r2, [r3, #0]
                          pwm_cfg->u16_reg_compare);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	88db      	ldrh	r3, [r3, #6]
 800250a:	b29b      	uxth	r3, r3
  LL_TIM_OC_SetCompareCH1((TIM_TypeDef *)pwm_cfg->p_tim,
 800250c:	4619      	mov	r1, r3
 800250e:	4610      	mov	r0, r2
 8002510:	f7ff fee0 	bl	80022d4 <LL_TIM_OC_SetCompareCH1>
}
 8002514:	bf00      	nop
 8002516:	3708      	adds	r7, #8
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <BSP_SYSTICK_TimerStart>:
 *
 * This function enables the SysTick timer.
 */
void
BSP_SYSTICK_TimerStart (void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0

  SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
 8002520:	4b04      	ldr	r3, [pc, #16]	@ (8002534 <BSP_SYSTICK_TimerStart+0x18>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a03      	ldr	r2, [pc, #12]	@ (8002534 <BSP_SYSTICK_TimerStart+0x18>)
 8002526:	f043 0301 	orr.w	r3, r3, #1
 800252a:	6013      	str	r3, [r2, #0]
}
 800252c:	bf00      	nop
 800252e:	46bd      	mov	sp, r7
 8002530:	bc80      	pop	{r7}
 8002532:	4770      	bx	lr
 8002534:	e000e010 	.word	0xe000e010

08002538 <LL_USART_IsActiveFlag_FE>:
  * @rmtoll SR           FE            LL_USART_IsActiveFlag_FE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_FE(const USART_TypeDef *USARTx)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	2b02      	cmp	r3, #2
 800254a:	bf0c      	ite	eq
 800254c:	2301      	moveq	r3, #1
 800254e:	2300      	movne	r3, #0
 8002550:	b2db      	uxtb	r3, r3
}
 8002552:	4618      	mov	r0, r3
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	bc80      	pop	{r7}
 800255a:	4770      	bx	lr

0800255c <LL_USART_IsActiveFlag_NE>:
  * @rmtoll SR           NF            LL_USART_IsActiveFlag_NE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_NE(const USART_TypeDef *USARTx)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_NE) == (USART_SR_NE));
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0304 	and.w	r3, r3, #4
 800256c:	2b04      	cmp	r3, #4
 800256e:	bf0c      	ite	eq
 8002570:	2301      	moveq	r3, #1
 8002572:	2300      	movne	r3, #0
 8002574:	b2db      	uxtb	r3, r3
}
 8002576:	4618      	mov	r0, r3
 8002578:	370c      	adds	r7, #12
 800257a:	46bd      	mov	sp, r7
 800257c:	bc80      	pop	{r7}
 800257e:	4770      	bx	lr

08002580 <LL_USART_IsActiveFlag_ORE>:
  * @rmtoll SR           ORE           LL_USART_IsActiveFlag_ORE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ORE(const USART_TypeDef *USARTx)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0308 	and.w	r3, r3, #8
 8002590:	2b08      	cmp	r3, #8
 8002592:	bf0c      	ite	eq
 8002594:	2301      	moveq	r3, #1
 8002596:	2300      	movne	r3, #0
 8002598:	b2db      	uxtb	r3, r3
}
 800259a:	4618      	mov	r0, r3
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	bc80      	pop	{r7}
 80025a2:	4770      	bx	lr

080025a4 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(const USART_TypeDef *USARTx)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0320 	and.w	r3, r3, #32
 80025b4:	2b20      	cmp	r3, #32
 80025b6:	bf0c      	ite	eq
 80025b8:	2301      	moveq	r3, #1
 80025ba:	2300      	movne	r3, #0
 80025bc:	b2db      	uxtb	r3, r3
}
 80025be:	4618      	mov	r0, r3
 80025c0:	370c      	adds	r7, #12
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bc80      	pop	{r7}
 80025c6:	4770      	bx	lr

080025c8 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025d8:	2b80      	cmp	r3, #128	@ 0x80
 80025da:	bf0c      	ite	eq
 80025dc:	2301      	moveq	r3, #1
 80025de:	2300      	movne	r3, #0
 80025e0:	b2db      	uxtb	r3, r3
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bc80      	pop	{r7}
 80025ea:	4770      	bx	lr

080025ec <LL_USART_ClearFlag_FE>:
  * @rmtoll SR           FE            LL_USART_ClearFlag_FE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_FE(USART_TypeDef *USARTx)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80025fa:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8002602:	68fb      	ldr	r3, [r7, #12]
}
 8002604:	bf00      	nop
 8002606:	3714      	adds	r7, #20
 8002608:	46bd      	mov	sp, r7
 800260a:	bc80      	pop	{r7}
 800260c:	4770      	bx	lr

0800260e <LL_USART_ClearFlag_NE>:
  * @rmtoll SR           NF            LL_USART_ClearFlag_NE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_NE(USART_TypeDef *USARTx)
{
 800260e:	b480      	push	{r7}
 8002610:	b085      	sub	sp, #20
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 800261c:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8002624:	68fb      	ldr	r3, [r7, #12]
}
 8002626:	bf00      	nop
 8002628:	3714      	adds	r7, #20
 800262a:	46bd      	mov	sp, r7
 800262c:	bc80      	pop	{r7}
 800262e:	4770      	bx	lr

08002630 <LL_USART_ClearFlag_ORE>:
  * @rmtoll SR           ORE           LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 8002630:	b480      	push	{r7}
 8002632:	b085      	sub	sp, #20
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 800263e:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8002646:	68fb      	ldr	r3, [r7, #12]
}
 8002648:	bf00      	nop
 800264a:	3714      	adds	r7, #20
 800264c:	46bd      	mov	sp, r7
 800264e:	bc80      	pop	{r7}
 8002650:	4770      	bx	lr

08002652 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8002652:	b480      	push	{r7}
 8002654:	b089      	sub	sp, #36	@ 0x24
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	330c      	adds	r3, #12
 800265e:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	e853 3f00 	ldrex	r3, [r3]
 8002666:	60bb      	str	r3, [r7, #8]
   return(result);
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	f043 0320 	orr.w	r3, r3, #32
 800266e:	61fb      	str	r3, [r7, #28]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	330c      	adds	r3, #12
 8002674:	69fa      	ldr	r2, [r7, #28]
 8002676:	61ba      	str	r2, [r7, #24]
 8002678:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800267a:	6979      	ldr	r1, [r7, #20]
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	e841 2300 	strex	r3, r2, [r1]
 8002682:	613b      	str	r3, [r7, #16]
   return(result);
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d1e7      	bne.n	800265a <LL_USART_EnableIT_RXNE+0x8>
}
 800268a:	bf00      	nop
 800268c:	bf00      	nop
 800268e:	3724      	adds	r7, #36	@ 0x24
 8002690:	46bd      	mov	sp, r7
 8002692:	bc80      	pop	{r7}
 8002694:	4770      	bx	lr

08002696 <LL_USART_EnableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
 8002696:	b480      	push	{r7}
 8002698:	b089      	sub	sp, #36	@ 0x24
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	330c      	adds	r3, #12
 80026a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	e853 3f00 	ldrex	r3, [r3]
 80026aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026b2:	61fb      	str	r3, [r7, #28]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	330c      	adds	r3, #12
 80026b8:	69fa      	ldr	r2, [r7, #28]
 80026ba:	61ba      	str	r2, [r7, #24]
 80026bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026be:	6979      	ldr	r1, [r7, #20]
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	e841 2300 	strex	r3, r2, [r1]
 80026c6:	613b      	str	r3, [r7, #16]
   return(result);
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d1e7      	bne.n	800269e <LL_USART_EnableIT_TXE+0x8>
}
 80026ce:	bf00      	nop
 80026d0:	bf00      	nop
 80026d2:	3724      	adds	r7, #36	@ 0x24
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bc80      	pop	{r7}
 80026d8:	4770      	bx	lr

080026da <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 80026da:	b480      	push	{r7}
 80026dc:	b089      	sub	sp, #36	@ 0x24
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	3314      	adds	r3, #20
 80026e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	e853 3f00 	ldrex	r3, [r3]
 80026ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	f043 0301 	orr.w	r3, r3, #1
 80026f6:	61fb      	str	r3, [r7, #28]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	3314      	adds	r3, #20
 80026fc:	69fa      	ldr	r2, [r7, #28]
 80026fe:	61ba      	str	r2, [r7, #24]
 8002700:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002702:	6979      	ldr	r1, [r7, #20]
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	e841 2300 	strex	r3, r2, [r1]
 800270a:	613b      	str	r3, [r7, #16]
   return(result);
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d1e7      	bne.n	80026e2 <LL_USART_EnableIT_ERROR+0x8>
}
 8002712:	bf00      	nop
 8002714:	bf00      	nop
 8002716:	3724      	adds	r7, #36	@ 0x24
 8002718:	46bd      	mov	sp, r7
 800271a:	bc80      	pop	{r7}
 800271c:	4770      	bx	lr

0800271e <LL_USART_DisableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_DisableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_RXNE(USART_TypeDef *USARTx)
{
 800271e:	b480      	push	{r7}
 8002720:	b089      	sub	sp, #36	@ 0x24
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	330c      	adds	r3, #12
 800272a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	e853 3f00 	ldrex	r3, [r3]
 8002732:	60bb      	str	r3, [r7, #8]
   return(result);
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	f023 0320 	bic.w	r3, r3, #32
 800273a:	61fb      	str	r3, [r7, #28]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	330c      	adds	r3, #12
 8002740:	69fa      	ldr	r2, [r7, #28]
 8002742:	61ba      	str	r2, [r7, #24]
 8002744:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002746:	6979      	ldr	r1, [r7, #20]
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	e841 2300 	strex	r3, r2, [r1]
 800274e:	613b      	str	r3, [r7, #16]
   return(result);
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1e7      	bne.n	8002726 <LL_USART_DisableIT_RXNE+0x8>
}
 8002756:	bf00      	nop
 8002758:	bf00      	nop
 800275a:	3724      	adds	r7, #36	@ 0x24
 800275c:	46bd      	mov	sp, r7
 800275e:	bc80      	pop	{r7}
 8002760:	4770      	bx	lr

08002762 <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 8002762:	b480      	push	{r7}
 8002764:	b089      	sub	sp, #36	@ 0x24
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	330c      	adds	r3, #12
 800276e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	e853 3f00 	ldrex	r3, [r3]
 8002776:	60bb      	str	r3, [r7, #8]
   return(result);
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800277e:	61fb      	str	r3, [r7, #28]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	330c      	adds	r3, #12
 8002784:	69fa      	ldr	r2, [r7, #28]
 8002786:	61ba      	str	r2, [r7, #24]
 8002788:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800278a:	6979      	ldr	r1, [r7, #20]
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	e841 2300 	strex	r3, r2, [r1]
 8002792:	613b      	str	r3, [r7, #16]
   return(result);
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d1e7      	bne.n	800276a <LL_USART_DisableIT_TXE+0x8>
}
 800279a:	bf00      	nop
 800279c:	bf00      	nop
 800279e:	3724      	adds	r7, #36	@ 0x24
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bc80      	pop	{r7}
 80027a4:	4770      	bx	lr

080027a6 <LL_USART_IsEnabledIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_IsEnabledIT_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE(const USART_TypeDef *USARTx)
{
 80027a6:	b480      	push	{r7}
 80027a8:	b083      	sub	sp, #12
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	f003 0320 	and.w	r3, r3, #32
 80027b6:	2b20      	cmp	r3, #32
 80027b8:	bf0c      	ite	eq
 80027ba:	2301      	moveq	r3, #1
 80027bc:	2300      	movne	r3, #0
 80027be:	b2db      	uxtb	r3, r3
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bc80      	pop	{r7}
 80027c8:	4770      	bx	lr

080027ca <LL_USART_IsEnabledIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_IsEnabledIT_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXE(const USART_TypeDef *USARTx)
{
 80027ca:	b480      	push	{r7}
 80027cc:	b083      	sub	sp, #12
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_TXEIE) == (USART_CR1_TXEIE));
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027da:	2b80      	cmp	r3, #128	@ 0x80
 80027dc:	bf0c      	ite	eq
 80027de:	2301      	moveq	r3, #1
 80027e0:	2300      	movne	r3, #0
 80027e2:	b2db      	uxtb	r3, r3
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bc80      	pop	{r7}
 80027ec:	4770      	bx	lr

080027ee <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 80027ee:	b480      	push	{r7}
 80027f0:	b083      	sub	sp, #12
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	b2db      	uxtb	r3, r3
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	bc80      	pop	{r7}
 8002804:	4770      	bx	lr

08002806 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8002806:	b480      	push	{r7}
 8002808:	b083      	sub	sp, #12
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
 800280e:	460b      	mov	r3, r1
 8002810:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8002812:	78fa      	ldrb	r2, [r7, #3]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	605a      	str	r2, [r3, #4]
}
 8002818:	bf00      	nop
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	bc80      	pop	{r7}
 8002820:	4770      	bx	lr

08002822 <BSP_UART_Config>:
 */
void
BSP_UART_Config (uart_cfg_t    *uartstdio_device,
                 USART_TypeDef *uart,
                 IRQn_Type      uart_irqn)
{
 8002822:	b580      	push	{r7, lr}
 8002824:	b084      	sub	sp, #16
 8002826:	af00      	add	r7, sp, #0
 8002828:	60f8      	str	r0, [r7, #12]
 800282a:	60b9      	str	r1, [r7, #8]
 800282c:	4613      	mov	r3, r2
 800282e:	71fb      	strb	r3, [r7, #7]
  uartstdio_device->p_uart      = uart;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	68ba      	ldr	r2, [r7, #8]
 8002834:	621a      	str	r2, [r3, #32]
  uartstdio_device->e_uart_irqn = uart_irqn;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	79fa      	ldrb	r2, [r7, #7]
 800283a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  QUEUE_Init((ring_buffer_t *)&uartstdio_device->s_tx_buffer);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	3310      	adds	r3, #16
 8002842:	4618      	mov	r0, r3
 8002844:	f002 f9ba 	bl	8004bbc <QUEUE_Init>
  QUEUE_Init((ring_buffer_t *)&uartstdio_device->s_rx_buffer);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	4618      	mov	r0, r3
 800284c:	f002 f9b6 	bl	8004bbc <QUEUE_Init>

  /**
   * Enable the UART Error Interrupt:
   * (Frame error, noise error, overrun error)
   */
  LL_USART_EnableIT_ERROR(uart);
 8002850:	68b8      	ldr	r0, [r7, #8]
 8002852:	f7ff ff42 	bl	80026da <LL_USART_EnableIT_ERROR>

  /* Enable the UART Data Register not empty Interrupt */
  LL_USART_EnableIT_RXNE(uart);
 8002856:	68b8      	ldr	r0, [r7, #8]
 8002858:	f7ff fefb 	bl	8002652 <LL_USART_EnableIT_RXNE>
}
 800285c:	bf00      	nop
 800285e:	3710      	adds	r7, #16
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <BSP_UART_IsAvailableDataReceive>:

uint8_t
BSP_UART_IsAvailableDataReceive (uart_cfg_t *uartstdio_device)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  if (QUEUE_Is_Empty((ring_buffer_t *)&uartstdio_device->s_rx_buffer))
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	4618      	mov	r0, r3
 8002870:	f002 f9ce 	bl	8004c10 <QUEUE_Is_Empty>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d001      	beq.n	800287e <BSP_UART_IsAvailableDataReceive+0x1a>
  {
    return 0;
 800287a:	2300      	movs	r3, #0
 800287c:	e000      	b.n	8002880 <BSP_UART_IsAvailableDataReceive+0x1c>
  }
  return 1;
 800287e:	2301      	movs	r3, #1
}
 8002880:	4618      	mov	r0, r3
 8002882:	3708      	adds	r7, #8
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <BSP_UART_SendChar>:
 * @return If the u32_uart_timeout reaches 0, the function will return without
 * sending the character.
 */
void
BSP_UART_SendChar (uart_cfg_t *uartstdio_device, char c)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	460b      	mov	r3, r1
 8002892:	70fb      	strb	r3, [r7, #3]
  uint32_t u32_uart_timeout = LIMIT_WAIT_BUFFER;
 8002894:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002898:	60fb      	str	r3, [r7, #12]

  // Wait until there is space in the transmit buffer or u32_uart_timeout occurs
  while (QUEUE_Is_Full((ring_buffer_t *)&uartstdio_device->s_tx_buffer))
 800289a:	e005      	b.n	80028a8 <BSP_UART_SendChar+0x20>
  {
    if (u32_uart_timeout == 0)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d021      	beq.n	80028e6 <BSP_UART_SendChar+0x5e>
    {
      return;
    }
    u32_uart_timeout--;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	3b01      	subs	r3, #1
 80028a6:	60fb      	str	r3, [r7, #12]
  while (QUEUE_Is_Full((ring_buffer_t *)&uartstdio_device->s_tx_buffer))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	3310      	adds	r3, #16
 80028ac:	4618      	mov	r0, r3
 80028ae:	f002 f9bf 	bl	8004c30 <QUEUE_Is_Full>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d1f1      	bne.n	800289c <BSP_UART_SendChar+0x14>
  }

  // Critical section to ensure atomic access to the buffer
  ATOMIC_BLOCK_START(uartstdio_device->p_uart);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a1b      	ldr	r3, [r3, #32]
 80028bc:	4618      	mov	r0, r3
 80028be:	f7ff ff2e 	bl	800271e <LL_USART_DisableIT_RXNE>
  QUEUE_Push_Data((ring_buffer_t *)&uartstdio_device->s_tx_buffer, c);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	3310      	adds	r3, #16
 80028c6:	78fa      	ldrb	r2, [r7, #3]
 80028c8:	4611      	mov	r1, r2
 80028ca:	4618      	mov	r0, r3
 80028cc:	f002 f9c0 	bl	8004c50 <QUEUE_Push_Data>
  ATOMIC_BLOCK_END(uartstdio_device->p_uart);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a1b      	ldr	r3, [r3, #32]
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7ff febc 	bl	8002652 <LL_USART_EnableIT_RXNE>

  // Enable Transmit Data Register Empty interrupt
  LL_USART_EnableIT_TXE(uartstdio_device->p_uart);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a1b      	ldr	r3, [r3, #32]
 80028de:	4618      	mov	r0, r3
 80028e0:	f7ff fed9 	bl	8002696 <LL_USART_EnableIT_TXE>
 80028e4:	e000      	b.n	80028e8 <BSP_UART_SendChar+0x60>
      return;
 80028e6:	bf00      	nop
}
 80028e8:	3710      	adds	r7, #16
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <BSP_UART_SendString>:
 * @param s Pointer to the constant character array (string) to be sent via
 * UART.
 */
void
BSP_UART_SendString (uart_cfg_t *uartstdio_device, const char *s)
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b082      	sub	sp, #8
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
 80028f6:	6039      	str	r1, [r7, #0]
  while (*s)
 80028f8:	e007      	b.n	800290a <BSP_UART_SendString+0x1c>
  {
    BSP_UART_SendChar(uartstdio_device, *s++);
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	1c5a      	adds	r2, r3, #1
 80028fe:	603a      	str	r2, [r7, #0]
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	4619      	mov	r1, r3
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f7ff ffbf 	bl	8002888 <BSP_UART_SendChar>
  while (*s)
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1f3      	bne.n	80028fa <BSP_UART_SendString+0xc>
  }
}
 8002912:	bf00      	nop
 8002914:	bf00      	nop
 8002916:	3708      	adds	r7, #8
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <BSP_UART_ReadChar>:
 * from the buffer and returns it. If the buffer is empty, it returns the null
 * character '\0'.
 */
char
BSP_UART_ReadChar (uart_cfg_t *uartstdio_device)
{
 800291c:	b590      	push	{r4, r7, lr}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  register char c = '\0';
 8002924:	2400      	movs	r4, #0
  if (!QUEUE_Is_Empty((ring_buffer_t *)&uartstdio_device->s_rx_buffer))
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4618      	mov	r0, r3
 800292a:	f002 f971 	bl	8004c10 <QUEUE_Is_Empty>
 800292e:	4603      	mov	r3, r0
 8002930:	f083 0301 	eor.w	r3, r3, #1
 8002934:	b2db      	uxtb	r3, r3
 8002936:	2b00      	cmp	r3, #0
 8002938:	d011      	beq.n	800295e <BSP_UART_ReadChar+0x42>
  {
    ATOMIC_BLOCK_START(uartstdio_device->p_uart);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a1b      	ldr	r3, [r3, #32]
 800293e:	4618      	mov	r0, r3
 8002940:	f7ff feed 	bl	800271e <LL_USART_DisableIT_RXNE>
    c = (char)QUEUE_Pull_Data((ring_buffer_t *)&uartstdio_device->s_rx_buffer);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4618      	mov	r0, r3
 8002948:	f002 f9a8 	bl	8004c9c <QUEUE_Pull_Data>
 800294c:	4603      	mov	r3, r0
 800294e:	461c      	mov	r4, r3
    ATOMIC_BLOCK_END(uartstdio_device->p_uart);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a1b      	ldr	r3, [r3, #32]
 8002954:	4618      	mov	r0, r3
 8002956:	f7ff fe7c 	bl	8002652 <LL_USART_EnableIT_RXNE>
    return c;
 800295a:	4623      	mov	r3, r4
 800295c:	e000      	b.n	8002960 <BSP_UART_ReadChar+0x44>
  }
  return c;
 800295e:	4623      	mov	r3, r4
}
 8002960:	4618      	mov	r0, r3
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	bd90      	pop	{r4, r7, pc}

08002968 <BSP_UART_TimeOut>:
 * The function `UART_u32_uart_TimeOut` decrements the variable
 * `u32_uart_timeout` if it is not equal to 0.
 */
void
BSP_UART_TimeOut (void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  if (u32_uart_timeout != 0)
 800296c:	4b06      	ldr	r3, [pc, #24]	@ (8002988 <BSP_UART_TimeOut+0x20>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d004      	beq.n	800297e <BSP_UART_TimeOut+0x16>
  {
    u32_uart_timeout--;
 8002974:	4b04      	ldr	r3, [pc, #16]	@ (8002988 <BSP_UART_TimeOut+0x20>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	3b01      	subs	r3, #1
 800297a:	4a03      	ldr	r2, [pc, #12]	@ (8002988 <BSP_UART_TimeOut+0x20>)
 800297c:	6013      	str	r3, [r2, #0]
  }
}
 800297e:	bf00      	nop
 8002980:	46bd      	mov	sp, r7
 8002982:	bc80      	pop	{r7}
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	200004b0 	.word	0x200004b0

0800298c <BSP_UART_ISR>:
 *
 * @param uartstdio_device Pointer to the UART configuration data structure.
 */
void
BSP_UART_ISR (uart_cfg_t *uartstdio_device)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  // If DR is not empty and the Rx Int is enabled
  if ((LL_USART_IsActiveFlag_RXNE(uartstdio_device->p_uart) != RESET)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a1b      	ldr	r3, [r3, #32]
 8002998:	4618      	mov	r0, r3
 800299a:	f7ff fe03 	bl	80025a4 <LL_USART_IsActiveFlag_RXNE>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d03d      	beq.n	8002a20 <BSP_UART_ISR+0x94>
      && (LL_USART_IsEnabledIT_RXNE(uartstdio_device->p_uart) != RESET))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6a1b      	ldr	r3, [r3, #32]
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7ff fefc 	bl	80027a6 <LL_USART_IsEnabledIT_RXNE>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d035      	beq.n	8002a20 <BSP_UART_ISR+0x94>
  {
    uint8_t c = LL_USART_ReceiveData8(uartstdio_device->p_uart);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a1b      	ldr	r3, [r3, #32]
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7ff ff18 	bl	80027ee <LL_USART_ReceiveData8>
 80029be:	4603      	mov	r3, r0
 80029c0:	73fb      	strb	r3, [r7, #15]

    // If there are errors, clear the flags
    if ((LL_USART_IsActiveFlag_ORE(uartstdio_device->p_uart) != RESET)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a1b      	ldr	r3, [r3, #32]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7ff fdda 	bl	8002580 <LL_USART_IsActiveFlag_ORE>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d10f      	bne.n	80029f2 <BSP_UART_ISR+0x66>
        || (LL_USART_IsActiveFlag_FE(uartstdio_device->p_uart) != RESET)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a1b      	ldr	r3, [r3, #32]
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7ff fdae 	bl	8002538 <LL_USART_IsActiveFlag_FE>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d107      	bne.n	80029f2 <BSP_UART_ISR+0x66>
        || (LL_USART_IsActiveFlag_NE(uartstdio_device->p_uart) != RESET))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a1b      	ldr	r3, [r3, #32]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7ff fdb8 	bl	800255c <LL_USART_IsActiveFlag_NE>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d00f      	beq.n	8002a12 <BSP_UART_ISR+0x86>
    {
      LL_USART_ClearFlag_ORE(uartstdio_device->p_uart);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a1b      	ldr	r3, [r3, #32]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7ff fe1a 	bl	8002630 <LL_USART_ClearFlag_ORE>
      LL_USART_ClearFlag_FE(uartstdio_device->p_uart);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a1b      	ldr	r3, [r3, #32]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7ff fdf3 	bl	80025ec <LL_USART_ClearFlag_FE>
      LL_USART_ClearFlag_NE(uartstdio_device->p_uart);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a1b      	ldr	r3, [r3, #32]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7ff fdff 	bl	800260e <LL_USART_ClearFlag_NE>
    }
    else
    {
      QUEUE_Push_Data((ring_buffer_t *)&uartstdio_device->s_rx_buffer, c);
    }
    return;
 8002a10:	e033      	b.n	8002a7a <BSP_UART_ISR+0xee>
      QUEUE_Push_Data((ring_buffer_t *)&uartstdio_device->s_rx_buffer, c);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	7bfa      	ldrb	r2, [r7, #15]
 8002a16:	4611      	mov	r1, r2
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f002 f919 	bl	8004c50 <QUEUE_Push_Data>
    return;
 8002a1e:	e02c      	b.n	8002a7a <BSP_UART_ISR+0xee>
  }

  // If interrupt is caused due to Transmit Data Register Empty
  if ((LL_USART_IsActiveFlag_TXE(uartstdio_device->p_uart) != RESET)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a1b      	ldr	r3, [r3, #32]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff fdcf 	bl	80025c8 <LL_USART_IsActiveFlag_TXE>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d024      	beq.n	8002a7a <BSP_UART_ISR+0xee>
      && (LL_USART_IsEnabledIT_TXE(uartstdio_device->p_uart) != RESET))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a1b      	ldr	r3, [r3, #32]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7ff fec8 	bl	80027ca <LL_USART_IsEnabledIT_TXE>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d01c      	beq.n	8002a7a <BSP_UART_ISR+0xee>
  {
    if (QUEUE_Is_Empty((ring_buffer_t *)&uartstdio_device->s_tx_buffer))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	3310      	adds	r3, #16
 8002a44:	4618      	mov	r0, r3
 8002a46:	f002 f8e3 	bl	8004c10 <QUEUE_Is_Empty>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d005      	beq.n	8002a5c <BSP_UART_ISR+0xd0>
    {
      LL_USART_DisableIT_TXE(uartstdio_device->p_uart);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6a1b      	ldr	r3, [r3, #32]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7ff fe84 	bl	8002762 <LL_USART_DisableIT_TXE>
    {
      uint8_t c
          = QUEUE_Pull_Data((ring_buffer_t *)&uartstdio_device->s_tx_buffer);
      LL_USART_TransmitData8(uartstdio_device->p_uart, c);
    }
    return;
 8002a5a:	e00d      	b.n	8002a78 <BSP_UART_ISR+0xec>
          = QUEUE_Pull_Data((ring_buffer_t *)&uartstdio_device->s_tx_buffer);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	3310      	adds	r3, #16
 8002a60:	4618      	mov	r0, r3
 8002a62:	f002 f91b 	bl	8004c9c <QUEUE_Pull_Data>
 8002a66:	4603      	mov	r3, r0
 8002a68:	73bb      	strb	r3, [r7, #14]
      LL_USART_TransmitData8(uartstdio_device->p_uart, c);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a1b      	ldr	r3, [r3, #32]
 8002a6e:	7bba      	ldrb	r2, [r7, #14]
 8002a70:	4611      	mov	r1, r2
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7ff fec7 	bl	8002806 <LL_USART_TransmitData8>
    return;
 8002a78:	bf00      	nop
  }
}
 8002a7a:	3710      	adds	r7, #16
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f003 0307 	and.w	r3, r3, #7
 8002a8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a90:	4b0c      	ldr	r3, [pc, #48]	@ (8002ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a96:	68ba      	ldr	r2, [r7, #8]
 8002a98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002aa8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002aac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ab0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ab2:	4a04      	ldr	r2, [pc, #16]	@ (8002ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	60d3      	str	r3, [r2, #12]
}
 8002ab8:	bf00      	nop
 8002aba:	3714      	adds	r7, #20
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bc80      	pop	{r7}
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	e000ed00 	.word	0xe000ed00

08002ac8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002acc:	4b04      	ldr	r3, [pc, #16]	@ (8002ae0 <__NVIC_GetPriorityGrouping+0x18>)
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	0a1b      	lsrs	r3, r3, #8
 8002ad2:	f003 0307 	and.w	r3, r3, #7
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bc80      	pop	{r7}
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	e000ed00 	.word	0xe000ed00

08002ae4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	4603      	mov	r3, r0
 8002aec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	db0b      	blt.n	8002b0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002af6:	79fb      	ldrb	r3, [r7, #7]
 8002af8:	f003 021f 	and.w	r2, r3, #31
 8002afc:	4906      	ldr	r1, [pc, #24]	@ (8002b18 <__NVIC_EnableIRQ+0x34>)
 8002afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b02:	095b      	lsrs	r3, r3, #5
 8002b04:	2001      	movs	r0, #1
 8002b06:	fa00 f202 	lsl.w	r2, r0, r2
 8002b0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b0e:	bf00      	nop
 8002b10:	370c      	adds	r7, #12
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bc80      	pop	{r7}
 8002b16:	4770      	bx	lr
 8002b18:	e000e100 	.word	0xe000e100

08002b1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	4603      	mov	r3, r0
 8002b24:	6039      	str	r1, [r7, #0]
 8002b26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	db0a      	blt.n	8002b46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	b2da      	uxtb	r2, r3
 8002b34:	490c      	ldr	r1, [pc, #48]	@ (8002b68 <__NVIC_SetPriority+0x4c>)
 8002b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b3a:	0112      	lsls	r2, r2, #4
 8002b3c:	b2d2      	uxtb	r2, r2
 8002b3e:	440b      	add	r3, r1
 8002b40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b44:	e00a      	b.n	8002b5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	b2da      	uxtb	r2, r3
 8002b4a:	4908      	ldr	r1, [pc, #32]	@ (8002b6c <__NVIC_SetPriority+0x50>)
 8002b4c:	79fb      	ldrb	r3, [r7, #7]
 8002b4e:	f003 030f 	and.w	r3, r3, #15
 8002b52:	3b04      	subs	r3, #4
 8002b54:	0112      	lsls	r2, r2, #4
 8002b56:	b2d2      	uxtb	r2, r2
 8002b58:	440b      	add	r3, r1
 8002b5a:	761a      	strb	r2, [r3, #24]
}
 8002b5c:	bf00      	nop
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bc80      	pop	{r7}
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	e000e100 	.word	0xe000e100
 8002b6c:	e000ed00 	.word	0xe000ed00

08002b70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b089      	sub	sp, #36	@ 0x24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f003 0307 	and.w	r3, r3, #7
 8002b82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	f1c3 0307 	rsb	r3, r3, #7
 8002b8a:	2b04      	cmp	r3, #4
 8002b8c:	bf28      	it	cs
 8002b8e:	2304      	movcs	r3, #4
 8002b90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	3304      	adds	r3, #4
 8002b96:	2b06      	cmp	r3, #6
 8002b98:	d902      	bls.n	8002ba0 <NVIC_EncodePriority+0x30>
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	3b03      	subs	r3, #3
 8002b9e:	e000      	b.n	8002ba2 <NVIC_EncodePriority+0x32>
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bae:	43da      	mvns	r2, r3
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	401a      	ands	r2, r3
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bb8:	f04f 31ff 	mov.w	r1, #4294967295
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc2:	43d9      	mvns	r1, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bc8:	4313      	orrs	r3, r2
         );
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3724      	adds	r7, #36	@ 0x24
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bc80      	pop	{r7}
 8002bd2:	4770      	bx	lr

08002bd4 <LL_I2C_EnableClockStretching>:
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	601a      	str	r2, [r3, #0]
}
 8002be8:	bf00      	nop
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bc80      	pop	{r7}
 8002bf0:	4770      	bx	lr

08002bf2 <LL_I2C_DisableGeneralCall>:
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	b083      	sub	sp, #12
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	601a      	str	r2, [r3, #0]
}
 8002c06:	bf00      	nop
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bc80      	pop	{r7}
 8002c0e:	4770      	bx	lr

08002c10 <LL_I2C_SetOwnAddress2>:
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	f023 02fe 	bic.w	r2, r3, #254	@ 0xfe
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	431a      	orrs	r2, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	60da      	str	r2, [r3, #12]
}
 8002c2a:	bf00      	nop
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bc80      	pop	{r7}
 8002c32:	4770      	bx	lr

08002c34 <LL_I2C_DisableOwnAddress2>:
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	f023 0201 	bic.w	r2, r3, #1
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	60da      	str	r2, [r3, #12]
}
 8002c48:	bf00      	nop
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bc80      	pop	{r7}
 8002c50:	4770      	bx	lr
	...

08002c54 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002c58:	4b04      	ldr	r3, [pc, #16]	@ (8002c6c <LL_RCC_HSE_Enable+0x18>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a03      	ldr	r2, [pc, #12]	@ (8002c6c <LL_RCC_HSE_Enable+0x18>)
 8002c5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c62:	6013      	str	r3, [r2, #0]
}
 8002c64:	bf00      	nop
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bc80      	pop	{r7}
 8002c6a:	4770      	bx	lr
 8002c6c:	40021000 	.word	0x40021000

08002c70 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8002c74:	4b06      	ldr	r3, [pc, #24]	@ (8002c90 <LL_RCC_HSE_IsReady+0x20>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002c80:	bf0c      	ite	eq
 8002c82:	2301      	moveq	r3, #1
 8002c84:	2300      	movne	r3, #0
 8002c86:	b2db      	uxtb	r3, r3
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bc80      	pop	{r7}
 8002c8e:	4770      	bx	lr
 8002c90:	40021000 	.word	0x40021000

08002c94 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002c9c:	4b06      	ldr	r3, [pc, #24]	@ (8002cb8 <LL_RCC_SetSysClkSource+0x24>)
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f023 0203 	bic.w	r2, r3, #3
 8002ca4:	4904      	ldr	r1, [pc, #16]	@ (8002cb8 <LL_RCC_SetSysClkSource+0x24>)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	604b      	str	r3, [r1, #4]
}
 8002cac:	bf00      	nop
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bc80      	pop	{r7}
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	40021000 	.word	0x40021000

08002cbc <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002cc0:	4b03      	ldr	r3, [pc, #12]	@ (8002cd0 <LL_RCC_GetSysClkSource+0x14>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f003 030c 	and.w	r3, r3, #12
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bc80      	pop	{r7}
 8002cce:	4770      	bx	lr
 8002cd0:	40021000 	.word	0x40021000

08002cd4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002cdc:	4b06      	ldr	r3, [pc, #24]	@ (8002cf8 <LL_RCC_SetAHBPrescaler+0x24>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ce4:	4904      	ldr	r1, [pc, #16]	@ (8002cf8 <LL_RCC_SetAHBPrescaler+0x24>)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	604b      	str	r3, [r1, #4]
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bc80      	pop	{r7}
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	40021000 	.word	0x40021000

08002cfc <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002d04:	4b06      	ldr	r3, [pc, #24]	@ (8002d20 <LL_RCC_SetAPB1Prescaler+0x24>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d0c:	4904      	ldr	r1, [pc, #16]	@ (8002d20 <LL_RCC_SetAPB1Prescaler+0x24>)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	604b      	str	r3, [r1, #4]
}
 8002d14:	bf00      	nop
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bc80      	pop	{r7}
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	40021000 	.word	0x40021000

08002d24 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002d2c:	4b06      	ldr	r3, [pc, #24]	@ (8002d48 <LL_RCC_SetAPB2Prescaler+0x24>)
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002d34:	4904      	ldr	r1, [pc, #16]	@ (8002d48 <LL_RCC_SetAPB2Prescaler+0x24>)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	604b      	str	r3, [r1, #4]
}
 8002d3c:	bf00      	nop
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bc80      	pop	{r7}
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	40021000 	.word	0x40021000

08002d4c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002d50:	4b04      	ldr	r3, [pc, #16]	@ (8002d64 <LL_RCC_PLL_Enable+0x18>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a03      	ldr	r2, [pc, #12]	@ (8002d64 <LL_RCC_PLL_Enable+0x18>)
 8002d56:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d5a:	6013      	str	r3, [r2, #0]
}
 8002d5c:	bf00      	nop
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bc80      	pop	{r7}
 8002d62:	4770      	bx	lr
 8002d64:	40021000 	.word	0x40021000

08002d68 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8002d6c:	4b06      	ldr	r3, [pc, #24]	@ (8002d88 <LL_RCC_PLL_IsReady+0x20>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d74:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002d78:	bf0c      	ite	eq
 8002d7a:	2301      	moveq	r3, #1
 8002d7c:	2300      	movne	r3, #0
 8002d7e:	b2db      	uxtb	r3, r3
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bc80      	pop	{r7}
 8002d86:	4770      	bx	lr
 8002d88:	40021000 	.word	0x40021000

08002d8c <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 8002d96:	4b08      	ldr	r3, [pc, #32]	@ (8002db8 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	430b      	orrs	r3, r1
 8002da8:	4903      	ldr	r1, [pc, #12]	@ (8002db8 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	604b      	str	r3, [r1, #4]
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 8002dae:	bf00      	nop
 8002db0:	370c      	adds	r7, #12
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bc80      	pop	{r7}
 8002db6:	4770      	bx	lr
 8002db8:	40021000 	.word	0x40021000

08002dbc <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b085      	sub	sp, #20
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8002dc4:	4b08      	ldr	r3, [pc, #32]	@ (8002de8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002dc6:	69da      	ldr	r2, [r3, #28]
 8002dc8:	4907      	ldr	r1, [pc, #28]	@ (8002de8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002dd0:	4b05      	ldr	r3, [pc, #20]	@ (8002de8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002dd2:	69da      	ldr	r2, [r3, #28]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002dda:	68fb      	ldr	r3, [r7, #12]
}
 8002ddc:	bf00      	nop
 8002dde:	3714      	adds	r7, #20
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bc80      	pop	{r7}
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	40021000 	.word	0x40021000

08002dec <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002df4:	4b08      	ldr	r3, [pc, #32]	@ (8002e18 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002df6:	699a      	ldr	r2, [r3, #24]
 8002df8:	4907      	ldr	r1, [pc, #28]	@ (8002e18 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002e00:	4b05      	ldr	r3, [pc, #20]	@ (8002e18 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002e02:	699a      	ldr	r2, [r3, #24]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4013      	ands	r3, r2
 8002e08:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
}
 8002e0c:	bf00      	nop
 8002e0e:	3714      	adds	r7, #20
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bc80      	pop	{r7}
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	40021000 	.word	0x40021000

08002e1c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8002e24:	4b06      	ldr	r3, [pc, #24]	@ (8002e40 <LL_FLASH_SetLatency+0x24>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f023 0207 	bic.w	r2, r3, #7
 8002e2c:	4904      	ldr	r1, [pc, #16]	@ (8002e40 <LL_FLASH_SetLatency+0x24>)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	600b      	str	r3, [r1, #0]
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bc80      	pop	{r7}
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	40022000 	.word	0x40022000

08002e44 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8002e44:	b480      	push	{r7}
 8002e46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8002e48:	4b03      	ldr	r3, [pc, #12]	@ (8002e58 <LL_FLASH_GetLatency+0x14>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0307 	and.w	r3, r3, #7
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bc80      	pop	{r7}
 8002e56:	4770      	bx	lr
 8002e58:	40022000 	.word	0x40022000

08002e5c <LL_TIM_DisableARRPreload>:
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	601a      	str	r2, [r3, #0]
}
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bc80      	pop	{r7}
 8002e78:	4770      	bx	lr
	...

08002e7c <LL_TIM_OC_DisableFast>:
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b085      	sub	sp, #20
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d01c      	beq.n	8002ec6 <LL_TIM_OC_DisableFast+0x4a>
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	2b04      	cmp	r3, #4
 8002e90:	d017      	beq.n	8002ec2 <LL_TIM_OC_DisableFast+0x46>
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	2b10      	cmp	r3, #16
 8002e96:	d012      	beq.n	8002ebe <LL_TIM_OC_DisableFast+0x42>
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	2b40      	cmp	r3, #64	@ 0x40
 8002e9c:	d00d      	beq.n	8002eba <LL_TIM_OC_DisableFast+0x3e>
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ea4:	d007      	beq.n	8002eb6 <LL_TIM_OC_DisableFast+0x3a>
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002eac:	d101      	bne.n	8002eb2 <LL_TIM_OC_DisableFast+0x36>
 8002eae:	2305      	movs	r3, #5
 8002eb0:	e00a      	b.n	8002ec8 <LL_TIM_OC_DisableFast+0x4c>
 8002eb2:	2306      	movs	r3, #6
 8002eb4:	e008      	b.n	8002ec8 <LL_TIM_OC_DisableFast+0x4c>
 8002eb6:	2304      	movs	r3, #4
 8002eb8:	e006      	b.n	8002ec8 <LL_TIM_OC_DisableFast+0x4c>
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e004      	b.n	8002ec8 <LL_TIM_OC_DisableFast+0x4c>
 8002ebe:	2302      	movs	r3, #2
 8002ec0:	e002      	b.n	8002ec8 <LL_TIM_OC_DisableFast+0x4c>
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e000      	b.n	8002ec8 <LL_TIM_OC_DisableFast+0x4c>
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	3318      	adds	r3, #24
 8002ece:	4619      	mov	r1, r3
 8002ed0:	7bfb      	ldrb	r3, [r7, #15]
 8002ed2:	4a0a      	ldr	r2, [pc, #40]	@ (8002efc <LL_TIM_OC_DisableFast+0x80>)
 8002ed4:	5cd3      	ldrb	r3, [r2, r3]
 8002ed6:	440b      	add	r3, r1
 8002ed8:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	7bfb      	ldrb	r3, [r7, #15]
 8002ee0:	4907      	ldr	r1, [pc, #28]	@ (8002f00 <LL_TIM_OC_DisableFast+0x84>)
 8002ee2:	5ccb      	ldrb	r3, [r1, r3]
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	2304      	movs	r3, #4
 8002ee8:	408b      	lsls	r3, r1
 8002eea:	43db      	mvns	r3, r3
 8002eec:	401a      	ands	r2, r3
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	601a      	str	r2, [r3, #0]
}
 8002ef2:	bf00      	nop
 8002ef4:	3714      	adds	r7, #20
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bc80      	pop	{r7}
 8002efa:	4770      	bx	lr
 8002efc:	080094e4 	.word	0x080094e4
 8002f00:	080094ec 	.word	0x080094ec

08002f04 <LL_TIM_OC_EnablePreload>:
{
 8002f04:	b480      	push	{r7}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d01c      	beq.n	8002f4e <LL_TIM_OC_EnablePreload+0x4a>
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	2b04      	cmp	r3, #4
 8002f18:	d017      	beq.n	8002f4a <LL_TIM_OC_EnablePreload+0x46>
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	2b10      	cmp	r3, #16
 8002f1e:	d012      	beq.n	8002f46 <LL_TIM_OC_EnablePreload+0x42>
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	2b40      	cmp	r3, #64	@ 0x40
 8002f24:	d00d      	beq.n	8002f42 <LL_TIM_OC_EnablePreload+0x3e>
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f2c:	d007      	beq.n	8002f3e <LL_TIM_OC_EnablePreload+0x3a>
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f34:	d101      	bne.n	8002f3a <LL_TIM_OC_EnablePreload+0x36>
 8002f36:	2305      	movs	r3, #5
 8002f38:	e00a      	b.n	8002f50 <LL_TIM_OC_EnablePreload+0x4c>
 8002f3a:	2306      	movs	r3, #6
 8002f3c:	e008      	b.n	8002f50 <LL_TIM_OC_EnablePreload+0x4c>
 8002f3e:	2304      	movs	r3, #4
 8002f40:	e006      	b.n	8002f50 <LL_TIM_OC_EnablePreload+0x4c>
 8002f42:	2303      	movs	r3, #3
 8002f44:	e004      	b.n	8002f50 <LL_TIM_OC_EnablePreload+0x4c>
 8002f46:	2302      	movs	r3, #2
 8002f48:	e002      	b.n	8002f50 <LL_TIM_OC_EnablePreload+0x4c>
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e000      	b.n	8002f50 <LL_TIM_OC_EnablePreload+0x4c>
 8002f4e:	2300      	movs	r3, #0
 8002f50:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	3318      	adds	r3, #24
 8002f56:	4619      	mov	r1, r3
 8002f58:	7bfb      	ldrb	r3, [r7, #15]
 8002f5a:	4a0a      	ldr	r2, [pc, #40]	@ (8002f84 <LL_TIM_OC_EnablePreload+0x80>)
 8002f5c:	5cd3      	ldrb	r3, [r2, r3]
 8002f5e:	440b      	add	r3, r1
 8002f60:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	7bfb      	ldrb	r3, [r7, #15]
 8002f68:	4907      	ldr	r1, [pc, #28]	@ (8002f88 <LL_TIM_OC_EnablePreload+0x84>)
 8002f6a:	5ccb      	ldrb	r3, [r1, r3]
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	2308      	movs	r3, #8
 8002f70:	408b      	lsls	r3, r1
 8002f72:	431a      	orrs	r2, r3
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	601a      	str	r2, [r3, #0]
}
 8002f78:	bf00      	nop
 8002f7a:	3714      	adds	r7, #20
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bc80      	pop	{r7}
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	080094e4 	.word	0x080094e4
 8002f88:	080094ec 	.word	0x080094ec

08002f8c <LL_TIM_SetClockSource>:
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002f9e:	f023 0307 	bic.w	r3, r3, #7
 8002fa2:	683a      	ldr	r2, [r7, #0]
 8002fa4:	431a      	orrs	r2, r3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	609a      	str	r2, [r3, #8]
}
 8002faa:	bf00      	nop
 8002fac:	370c      	adds	r7, #12
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bc80      	pop	{r7}
 8002fb2:	4770      	bx	lr

08002fb4 <LL_TIM_SetTriggerOutput>:
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	431a      	orrs	r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	605a      	str	r2, [r3, #4]
}
 8002fce:	bf00      	nop
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bc80      	pop	{r7}
 8002fd6:	4770      	bx	lr

08002fd8 <LL_TIM_DisableMasterSlaveMode>:
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	609a      	str	r2, [r3, #8]
}
 8002fec:	bf00      	nop
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bc80      	pop	{r7}
 8002ff4:	4770      	bx	lr

08002ff6 <LL_USART_Enable>:
{
 8002ff6:	b480      	push	{r7}
 8002ff8:	b083      	sub	sp, #12
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	60da      	str	r2, [r3, #12]
}
 800300a:	bf00      	nop
 800300c:	370c      	adds	r7, #12
 800300e:	46bd      	mov	sp, r7
 8003010:	bc80      	pop	{r7}
 8003012:	4770      	bx	lr

08003014 <LL_USART_ConfigAsyncMode>:
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	691b      	ldr	r3, [r3, #16]
 8003020:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	695b      	ldr	r3, [r3, #20]
 800302c:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	615a      	str	r2, [r3, #20]
}
 8003034:	bf00      	nop
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	bc80      	pop	{r7}
 800303c:	4770      	bx	lr

0800303e <LL_GPIO_ResetOutputPin>:
{
 800303e:	b480      	push	{r7}
 8003040:	b083      	sub	sp, #12
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
 8003046:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	0a1b      	lsrs	r3, r3, #8
 800304c:	b29a      	uxth	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	615a      	str	r2, [r3, #20]
}
 8003052:	bf00      	nop
 8003054:	370c      	adds	r7, #12
 8003056:	46bd      	mov	sp, r7
 8003058:	bc80      	pop	{r7}
 800305a:	4770      	bx	lr

0800305c <LL_GPIO_AF_RemapPartial_TIM1>:
  * @rmtoll MAPR          TIM1_REMAP           LL_GPIO_AF_RemapPartial_TIM1
  * @note  PARTIAL: Partial remap (ETR/PA12, CH1/PA8, CH2/PA9,  CH3/PA10, CH4/PA11, BKIN/PA6,  CH1N/PA7,  CH2N/PB0,  CH3N/PB1)
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_RemapPartial_TIM1(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0
  MODIFY_REG(AFIO->MAPR, (AFIO_MAPR_TIM1_REMAP | AFIO_MAPR_SWJ_CFG), (AFIO_MAPR_TIM1_REMAP_PARTIALREMAP | AFIO_MAPR_SWJ_CFG));
 8003060:	4b07      	ldr	r3, [pc, #28]	@ (8003080 <LL_GPIO_AF_RemapPartial_TIM1+0x24>)
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8003068:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800306c:	4a04      	ldr	r2, [pc, #16]	@ (8003080 <LL_GPIO_AF_RemapPartial_TIM1+0x24>)
 800306e:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8003072:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003076:	6053      	str	r3, [r2, #4]
}
 8003078:	bf00      	nop
 800307a:	46bd      	mov	sp, r7
 800307c:	bc80      	pop	{r7}
 800307e:	4770      	bx	lr
 8003080:	40010000 	.word	0x40010000

08003084 <LL_GPIO_AF_Remap_SWJ_NOJTAG>:
  * @rmtoll MAPR          SWJ_CFG           LL_GPIO_AF_Remap_SWJ_NOJTAG
  * @note  NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_Remap_SWJ_NOJTAG(void)
{
 8003084:	b480      	push	{r7}
 8003086:	af00      	add	r7, sp, #0
  MODIFY_REG(AFIO->MAPR, AFIO_MAPR_SWJ_CFG, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 8003088:	4b05      	ldr	r3, [pc, #20]	@ (80030a0 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x1c>)
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8003090:	4a03      	ldr	r2, [pc, #12]	@ (80030a0 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x1c>)
 8003092:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003096:	6053      	str	r3, [r2, #4]
}
 8003098:	bf00      	nop
 800309a:	46bd      	mov	sp, r7
 800309c:	bc80      	pop	{r7}
 800309e:	4770      	bx	lr
 80030a0:	40010000 	.word	0x40010000

080030a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 80030a8:	2001      	movs	r0, #1
 80030aa:	f7ff fe9f 	bl	8002dec <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80030ae:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 80030b2:	f7ff fe83 	bl	8002dbc <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030b6:	2003      	movs	r0, #3
 80030b8:	f7ff fce2 	bl	8002a80 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 80030bc:	f7ff fd04 	bl	8002ac8 <__NVIC_GetPriorityGrouping>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2200      	movs	r2, #0
 80030c4:	210f      	movs	r1, #15
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7ff fd52 	bl	8002b70 <NVIC_EncodePriority>
 80030cc:	4603      	mov	r3, r0
 80030ce:	4619      	mov	r1, r3
 80030d0:	f04f 30ff 	mov.w	r0, #4294967295
 80030d4:	f7ff fd22 	bl	8002b1c <__NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  LL_GPIO_AF_Remap_SWJ_NOJTAG();
 80030d8:	f7ff ffd4 	bl	8003084 <LL_GPIO_AF_Remap_SWJ_NOJTAG>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80030dc:	f000 f81c 	bl	8003118 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80030e0:	f000 fa12 	bl	8003508 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80030e4:	f000 f942 	bl	800336c <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80030e8:	f000 f8a8 	bl	800323c <MX_TIM1_Init>
  MX_I2C1_Init();
 80030ec:	f000 f852 	bl	8003194 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80030f0:	f000 f9a4 	bl	800343c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // Initialization Application
  APP_COMMAND_Init();
 80030f4:	f7fe f8c6 	bl	8001284 <APP_COMMAND_Init>
  APP_CONTROL_Init();
 80030f8:	f7fe fb68 	bl	80017cc <APP_CONTROL_Init>
  APP_STATUS_LED_Init();
 80030fc:	f7fe fd74 	bl	8001be8 <APP_STATUS_LED_Init>

  // Create Task
  APP_COMMAND_CreateTask();
 8003100:	f7fe f8d8 	bl	80012b4 <APP_COMMAND_CreateTask>
  APP_CONTROL_CreateTask();
 8003104:	f7fe fbcc 	bl	80018a0 <APP_CONTROL_CreateTask>
  APP_STATUS_LED_CreateTask();
 8003108:	f7fe fd8a 	bl	8001c20 <APP_STATUS_LED_CreateTask>

  SCH_StartScheduler();
 800310c:	f001 feee 	bl	8004eec <SCH_StartScheduler>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    SCH_HandleScheduledTask();
 8003110:	f001 fef2 	bl	8004ef8 <SCH_HandleScheduledTask>
 8003114:	e7fc      	b.n	8003110 <main+0x6c>
	...

08003118 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 800311c:	2002      	movs	r0, #2
 800311e:	f7ff fe7d 	bl	8002e1c <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 8003122:	bf00      	nop
 8003124:	f7ff fe8e 	bl	8002e44 <LL_FLASH_GetLatency>
 8003128:	4603      	mov	r3, r0
 800312a:	2b02      	cmp	r3, #2
 800312c:	d1fa      	bne.n	8003124 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSE_Enable();
 800312e:	f7ff fd91 	bl	8002c54 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8003132:	bf00      	nop
 8003134:	f7ff fd9c 	bl	8002c70 <LL_RCC_HSE_IsReady>
 8003138:	4603      	mov	r3, r0
 800313a:	2b01      	cmp	r3, #1
 800313c:	d1fa      	bne.n	8003134 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_2, LL_RCC_PLL_MUL_15);
 800313e:	f44f 1150 	mov.w	r1, #3407872	@ 0x340000
 8003142:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8003146:	f7ff fe21 	bl	8002d8c <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 800314a:	f7ff fdff 	bl	8002d4c <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 800314e:	bf00      	nop
 8003150:	f7ff fe0a 	bl	8002d68 <LL_RCC_PLL_IsReady>
 8003154:	4603      	mov	r3, r0
 8003156:	2b01      	cmp	r3, #1
 8003158:	d1fa      	bne.n	8003150 <SystemClock_Config+0x38>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800315a:	2000      	movs	r0, #0
 800315c:	f7ff fdba 	bl	8002cd4 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8003160:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8003164:	f7ff fdca 	bl	8002cfc <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8003168:	2000      	movs	r0, #0
 800316a:	f7ff fddb 	bl	8002d24 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 800316e:	2002      	movs	r0, #2
 8003170:	f7ff fd90 	bl	8002c94 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8003174:	bf00      	nop
 8003176:	f7ff fda1 	bl	8002cbc <LL_RCC_GetSysClkSource>
 800317a:	4603      	mov	r3, r0
 800317c:	2b08      	cmp	r3, #8
 800317e:	d1fa      	bne.n	8003176 <SystemClock_Config+0x5e>
  {

  }
  LL_Init1msTick(60000000);
 8003180:	4803      	ldr	r0, [pc, #12]	@ (8003190 <SystemClock_Config+0x78>)
 8003182:	f001 fb19 	bl	80047b8 <LL_Init1msTick>
  LL_SetSystemCoreClock(60000000);
 8003186:	4802      	ldr	r0, [pc, #8]	@ (8003190 <SystemClock_Config+0x78>)
 8003188:	f001 fb48 	bl	800481c <LL_SetSystemCoreClock>
}
 800318c:	bf00      	nop
 800318e:	bd80      	pop	{r7, pc}
 8003190:	03938700 	.word	0x03938700

08003194 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b08c      	sub	sp, #48	@ 0x30
 8003198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 800319a:	f107 0318 	add.w	r3, r7, #24
 800319e:	2200      	movs	r2, #0
 80031a0:	601a      	str	r2, [r3, #0]
 80031a2:	605a      	str	r2, [r3, #4]
 80031a4:	609a      	str	r2, [r3, #8]
 80031a6:	60da      	str	r2, [r3, #12]
 80031a8:	611a      	str	r2, [r3, #16]
 80031aa:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031ac:	1d3b      	adds	r3, r7, #4
 80031ae:	2200      	movs	r2, #0
 80031b0:	601a      	str	r2, [r3, #0]
 80031b2:	605a      	str	r2, [r3, #4]
 80031b4:	609a      	str	r2, [r3, #8]
 80031b6:	60da      	str	r2, [r3, #12]
 80031b8:	611a      	str	r2, [r3, #16]

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 80031ba:	2008      	movs	r0, #8
 80031bc:	f7ff fe16 	bl	8002dec <LL_APB2_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80031c0:	f24c 03c0 	movw	r3, #49344	@ 0xc0c0
 80031c4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80031c6:	2309      	movs	r3, #9
 80031c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80031ca:	2303      	movs	r3, #3
 80031cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80031ce:	2304      	movs	r3, #4
 80031d0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031d2:	1d3b      	adds	r3, r7, #4
 80031d4:	4619      	mov	r1, r3
 80031d6:	4816      	ldr	r0, [pc, #88]	@ (8003230 <MX_I2C1_Init+0x9c>)
 80031d8:	f000 fc6e 	bl	8003ab8 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 80031dc:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80031e0:	f7ff fdec 	bl	8002dbc <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C1_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C1);
 80031e4:	4813      	ldr	r0, [pc, #76]	@ (8003234 <MX_I2C1_Init+0xa0>)
 80031e6:	f7ff fd25 	bl	8002c34 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 80031ea:	4812      	ldr	r0, [pc, #72]	@ (8003234 <MX_I2C1_Init+0xa0>)
 80031ec:	f7ff fd01 	bl	8002bf2 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 80031f0:	4810      	ldr	r0, [pc, #64]	@ (8003234 <MX_I2C1_Init+0xa0>)
 80031f2:	f7ff fcef 	bl	8002bd4 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 80031f6:	2300      	movs	r3, #0
 80031f8:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 400000;
 80031fa:	4b0f      	ldr	r3, [pc, #60]	@ (8003238 <MX_I2C1_Init+0xa4>)
 80031fc:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 80031fe:	2300      	movs	r3, #0
 8003200:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 0;
 8003202:	2300      	movs	r3, #0
 8003204:	627b      	str	r3, [r7, #36]	@ 0x24
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8003206:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800320a:	62bb      	str	r3, [r7, #40]	@ 0x28
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 800320c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003210:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8003212:	f107 0318 	add.w	r3, r7, #24
 8003216:	4619      	mov	r1, r3
 8003218:	4806      	ldr	r0, [pc, #24]	@ (8003234 <MX_I2C1_Init+0xa0>)
 800321a:	f000 fda3 	bl	8003d64 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0);
 800321e:	2100      	movs	r1, #0
 8003220:	4804      	ldr	r0, [pc, #16]	@ (8003234 <MX_I2C1_Init+0xa0>)
 8003222:	f7ff fcf5 	bl	8002c10 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003226:	bf00      	nop
 8003228:	3730      	adds	r7, #48	@ 0x30
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	40010c00 	.word	0x40010c00
 8003234:	40005400 	.word	0x40005400
 8003238:	00061a80 	.word	0x00061a80

0800323c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b098      	sub	sp, #96	@ 0x60
 8003240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8003242:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003246:	2200      	movs	r2, #0
 8003248:	601a      	str	r2, [r3, #0]
 800324a:	605a      	str	r2, [r3, #4]
 800324c:	609a      	str	r2, [r3, #8]
 800324e:	60da      	str	r2, [r3, #12]
 8003250:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8003252:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003256:	2220      	movs	r2, #32
 8003258:	2100      	movs	r1, #0
 800325a:	4618      	mov	r0, r3
 800325c:	f003 fae9 	bl	8006832 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8003260:	f107 0314 	add.w	r3, r7, #20
 8003264:	2200      	movs	r2, #0
 8003266:	601a      	str	r2, [r3, #0]
 8003268:	605a      	str	r2, [r3, #4]
 800326a:	609a      	str	r2, [r3, #8]
 800326c:	60da      	str	r2, [r3, #12]
 800326e:	611a      	str	r2, [r3, #16]
 8003270:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003272:	463b      	mov	r3, r7
 8003274:	2200      	movs	r2, #0
 8003276:	601a      	str	r2, [r3, #0]
 8003278:	605a      	str	r2, [r3, #4]
 800327a:	609a      	str	r2, [r3, #8]
 800327c:	60da      	str	r2, [r3, #12]
 800327e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8003280:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8003284:	f7ff fdb2 	bl	8002dec <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8003288:	2300      	movs	r3, #0
 800328a:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800328e:	2300      	movs	r3, #0
 8003290:	653b      	str	r3, [r7, #80]	@ 0x50
  TIM_InitStruct.Autoreload = 65535;
 8003292:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003296:	657b      	str	r3, [r7, #84]	@ 0x54
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8003298:	2300      	movs	r3, #0
 800329a:	65bb      	str	r3, [r7, #88]	@ 0x58
  TIM_InitStruct.RepetitionCounter = 0;
 800329c:	2300      	movs	r3, #0
 800329e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 80032a0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80032a4:	4619      	mov	r1, r3
 80032a6:	482e      	ldr	r0, [pc, #184]	@ (8003360 <MX_TIM1_Init+0x124>)
 80032a8:	f000 ff0a 	bl	80040c0 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 80032ac:	482c      	ldr	r0, [pc, #176]	@ (8003360 <MX_TIM1_Init+0x124>)
 80032ae:	f7ff fdd5 	bl	8002e5c <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 80032b2:	2100      	movs	r1, #0
 80032b4:	482a      	ldr	r0, [pc, #168]	@ (8003360 <MX_TIM1_Init+0x124>)
 80032b6:	f7ff fe69 	bl	8002f8c <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 80032ba:	2101      	movs	r1, #1
 80032bc:	4828      	ldr	r0, [pc, #160]	@ (8003360 <MX_TIM1_Init+0x124>)
 80032be:	f7ff fe21 	bl	8002f04 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80032c2:	2360      	movs	r3, #96	@ 0x60
 80032c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80032c6:	2300      	movs	r3, #0
 80032c8:	633b      	str	r3, [r7, #48]	@ 0x30
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80032ca:	2300      	movs	r3, #0
 80032cc:	637b      	str	r3, [r7, #52]	@ 0x34
  TIM_OC_InitStruct.CompareValue = 0;
 80032ce:	2300      	movs	r3, #0
 80032d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80032d2:	2300      	movs	r3, #0
 80032d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 80032d6:	2300      	movs	r3, #0
 80032d8:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 80032da:	2300      	movs	r3, #0
 80032dc:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 80032de:	2300      	movs	r3, #0
 80032e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80032e2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80032e6:	461a      	mov	r2, r3
 80032e8:	2101      	movs	r1, #1
 80032ea:	481d      	ldr	r0, [pc, #116]	@ (8003360 <MX_TIM1_Init+0x124>)
 80032ec:	f000 ff46 	bl	800417c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 80032f0:	2101      	movs	r1, #1
 80032f2:	481b      	ldr	r0, [pc, #108]	@ (8003360 <MX_TIM1_Init+0x124>)
 80032f4:	f7ff fdc2 	bl	8002e7c <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 80032f8:	2100      	movs	r1, #0
 80032fa:	4819      	ldr	r0, [pc, #100]	@ (8003360 <MX_TIM1_Init+0x124>)
 80032fc:	f7ff fe5a 	bl	8002fb4 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8003300:	4817      	ldr	r0, [pc, #92]	@ (8003360 <MX_TIM1_Init+0x124>)
 8003302:	f7ff fe69 	bl	8002fd8 <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8003306:	2300      	movs	r3, #0
 8003308:	617b      	str	r3, [r7, #20]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 800330a:	2300      	movs	r3, #0
 800330c:	61bb      	str	r3, [r7, #24]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 800330e:	2300      	movs	r3, #0
 8003310:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.DeadTime = 84;
 8003312:	2354      	movs	r3, #84	@ 0x54
 8003314:	f887 3020 	strb.w	r3, [r7, #32]
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8003318:	2300      	movs	r3, #0
 800331a:	847b      	strh	r3, [r7, #34]	@ 0x22
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 800331c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003320:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8003322:	2300      	movs	r3, #0
 8003324:	62bb      	str	r3, [r7, #40]	@ 0x28
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8003326:	f107 0314 	add.w	r3, r7, #20
 800332a:	4619      	mov	r1, r3
 800332c:	480c      	ldr	r0, [pc, #48]	@ (8003360 <MX_TIM1_Init+0x124>)
 800332e:	f000 ff66 	bl	80041fe <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8003332:	2004      	movs	r0, #4
 8003334:	f7ff fd5a 	bl	8002dec <LL_APB2_GRP1_EnableClock>
  /**TIM1 GPIO Configuration
  PA7   ------> TIM1_CH1N
  PA8   ------> TIM1_CH1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7|LL_GPIO_PIN_8;
 8003338:	4b0a      	ldr	r3, [pc, #40]	@ (8003364 <MX_TIM1_Init+0x128>)
 800333a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800333c:	2309      	movs	r3, #9
 800333e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003340:	2302      	movs	r3, #2
 8003342:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003344:	2300      	movs	r3, #0
 8003346:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003348:	463b      	mov	r3, r7
 800334a:	4619      	mov	r1, r3
 800334c:	4806      	ldr	r0, [pc, #24]	@ (8003368 <MX_TIM1_Init+0x12c>)
 800334e:	f000 fbb3 	bl	8003ab8 <LL_GPIO_Init>

  LL_GPIO_AF_RemapPartial_TIM1();
 8003352:	f7ff fe83 	bl	800305c <LL_GPIO_AF_RemapPartial_TIM1>

}
 8003356:	bf00      	nop
 8003358:	3760      	adds	r7, #96	@ 0x60
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	40012c00 	.word	0x40012c00
 8003364:	04018081 	.word	0x04018081
 8003368:	40010800 	.word	0x40010800

0800336c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b08c      	sub	sp, #48	@ 0x30
 8003370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8003372:	f107 0314 	add.w	r3, r7, #20
 8003376:	2200      	movs	r2, #0
 8003378:	601a      	str	r2, [r3, #0]
 800337a:	605a      	str	r2, [r3, #4]
 800337c:	609a      	str	r2, [r3, #8]
 800337e:	60da      	str	r2, [r3, #12]
 8003380:	611a      	str	r2, [r3, #16]
 8003382:	615a      	str	r2, [r3, #20]
 8003384:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003386:	463b      	mov	r3, r7
 8003388:	2200      	movs	r2, #0
 800338a:	601a      	str	r2, [r3, #0]
 800338c:	605a      	str	r2, [r3, #4]
 800338e:	609a      	str	r2, [r3, #8]
 8003390:	60da      	str	r2, [r3, #12]
 8003392:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8003394:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003398:	f7ff fd28 	bl	8002dec <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 800339c:	2004      	movs	r0, #4
 800339e:	f7ff fd25 	bl	8002dec <LL_APB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 80033a2:	4b22      	ldr	r3, [pc, #136]	@ (800342c <MX_USART1_UART_Init+0xc0>)
 80033a4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80033a6:	2309      	movs	r3, #9
 80033a8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80033aa:	2303      	movs	r3, #3
 80033ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80033ae:	2300      	movs	r3, #0
 80033b0:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033b2:	463b      	mov	r3, r7
 80033b4:	4619      	mov	r1, r3
 80033b6:	481e      	ldr	r0, [pc, #120]	@ (8003430 <MX_USART1_UART_Init+0xc4>)
 80033b8:	f000 fb7e 	bl	8003ab8 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 80033bc:	4b1d      	ldr	r3, [pc, #116]	@ (8003434 <MX_USART1_UART_Init+0xc8>)
 80033be:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 80033c0:	2304      	movs	r3, #4
 80033c2:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033c4:	463b      	mov	r3, r7
 80033c6:	4619      	mov	r1, r3
 80033c8:	4819      	ldr	r0, [pc, #100]	@ (8003430 <MX_USART1_UART_Init+0xc4>)
 80033ca:	f000 fb75 	bl	8003ab8 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 80033ce:	f7ff fb7b 	bl	8002ac8 <__NVIC_GetPriorityGrouping>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2200      	movs	r2, #0
 80033d6:	2101      	movs	r1, #1
 80033d8:	4618      	mov	r0, r3
 80033da:	f7ff fbc9 	bl	8002b70 <NVIC_EncodePriority>
 80033de:	4603      	mov	r3, r0
 80033e0:	4619      	mov	r1, r3
 80033e2:	2025      	movs	r0, #37	@ 0x25
 80033e4:	f7ff fb9a 	bl	8002b1c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 80033e8:	2025      	movs	r0, #37	@ 0x25
 80033ea:	f7ff fb7b 	bl	8002ae4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80033ee:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80033f2:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80033f4:	2300      	movs	r3, #0
 80033f6:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80033f8:	2300      	movs	r3, #0
 80033fa:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80033fc:	2300      	movs	r3, #0
 80033fe:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8003400:	230c      	movs	r3, #12
 8003402:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8003404:	2300      	movs	r3, #0
 8003406:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8003408:	2300      	movs	r3, #0
 800340a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_USART_Init(USART1, &USART_InitStruct);
 800340c:	f107 0314 	add.w	r3, r7, #20
 8003410:	4619      	mov	r1, r3
 8003412:	4809      	ldr	r0, [pc, #36]	@ (8003438 <MX_USART1_UART_Init+0xcc>)
 8003414:	f001 f956 	bl	80046c4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8003418:	4807      	ldr	r0, [pc, #28]	@ (8003438 <MX_USART1_UART_Init+0xcc>)
 800341a:	f7ff fdfb 	bl	8003014 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 800341e:	4806      	ldr	r0, [pc, #24]	@ (8003438 <MX_USART1_UART_Init+0xcc>)
 8003420:	f7ff fde9 	bl	8002ff6 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003424:	bf00      	nop
 8003426:	3730      	adds	r7, #48	@ 0x30
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	04020002 	.word	0x04020002
 8003430:	40010800 	.word	0x40010800
 8003434:	04040004 	.word	0x04040004
 8003438:	40013800 	.word	0x40013800

0800343c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b08c      	sub	sp, #48	@ 0x30
 8003440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8003442:	f107 0314 	add.w	r3, r7, #20
 8003446:	2200      	movs	r2, #0
 8003448:	601a      	str	r2, [r3, #0]
 800344a:	605a      	str	r2, [r3, #4]
 800344c:	609a      	str	r2, [r3, #8]
 800344e:	60da      	str	r2, [r3, #12]
 8003450:	611a      	str	r2, [r3, #16]
 8003452:	615a      	str	r2, [r3, #20]
 8003454:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003456:	463b      	mov	r3, r7
 8003458:	2200      	movs	r2, #0
 800345a:	601a      	str	r2, [r3, #0]
 800345c:	605a      	str	r2, [r3, #4]
 800345e:	609a      	str	r2, [r3, #8]
 8003460:	60da      	str	r2, [r3, #12]
 8003462:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8003464:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8003468:	f7ff fca8 	bl	8002dbc <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 800346c:	2004      	movs	r0, #4
 800346e:	f7ff fcbd 	bl	8002dec <LL_APB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8003472:	f240 4304 	movw	r3, #1028	@ 0x404
 8003476:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003478:	2309      	movs	r3, #9
 800347a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800347c:	2303      	movs	r3, #3
 800347e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003480:	2300      	movs	r3, #0
 8003482:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003484:	463b      	mov	r3, r7
 8003486:	4619      	mov	r1, r3
 8003488:	481d      	ldr	r0, [pc, #116]	@ (8003500 <MX_USART2_UART_Init+0xc4>)
 800348a:	f000 fb15 	bl	8003ab8 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 800348e:	f640 0308 	movw	r3, #2056	@ 0x808
 8003492:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8003494:	2304      	movs	r3, #4
 8003496:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003498:	463b      	mov	r3, r7
 800349a:	4619      	mov	r1, r3
 800349c:	4818      	ldr	r0, [pc, #96]	@ (8003500 <MX_USART2_UART_Init+0xc4>)
 800349e:	f000 fb0b 	bl	8003ab8 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 80034a2:	f7ff fb11 	bl	8002ac8 <__NVIC_GetPriorityGrouping>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2200      	movs	r2, #0
 80034aa:	2101      	movs	r1, #1
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7ff fb5f 	bl	8002b70 <NVIC_EncodePriority>
 80034b2:	4603      	mov	r3, r0
 80034b4:	4619      	mov	r1, r3
 80034b6:	2026      	movs	r0, #38	@ 0x26
 80034b8:	f7ff fb30 	bl	8002b1c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 80034bc:	2026      	movs	r0, #38	@ 0x26
 80034be:	f7ff fb11 	bl	8002ae4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80034c2:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80034c6:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80034c8:	2300      	movs	r3, #0
 80034ca:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80034cc:	2300      	movs	r3, #0
 80034ce:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80034d0:	2300      	movs	r3, #0
 80034d2:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80034d4:	230c      	movs	r3, #12
 80034d6:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80034d8:	2300      	movs	r3, #0
 80034da:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80034dc:	2300      	movs	r3, #0
 80034de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_USART_Init(USART2, &USART_InitStruct);
 80034e0:	f107 0314 	add.w	r3, r7, #20
 80034e4:	4619      	mov	r1, r3
 80034e6:	4807      	ldr	r0, [pc, #28]	@ (8003504 <MX_USART2_UART_Init+0xc8>)
 80034e8:	f001 f8ec 	bl	80046c4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 80034ec:	4805      	ldr	r0, [pc, #20]	@ (8003504 <MX_USART2_UART_Init+0xc8>)
 80034ee:	f7ff fd91 	bl	8003014 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 80034f2:	4804      	ldr	r0, [pc, #16]	@ (8003504 <MX_USART2_UART_Init+0xc8>)
 80034f4:	f7ff fd7f 	bl	8002ff6 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80034f8:	bf00      	nop
 80034fa:	3730      	adds	r7, #48	@ 0x30
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	40010800 	.word	0x40010800
 8003504:	40004400 	.word	0x40004400

08003508 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b086      	sub	sp, #24
 800350c:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800350e:	1d3b      	adds	r3, r7, #4
 8003510:	2200      	movs	r2, #0
 8003512:	601a      	str	r2, [r3, #0]
 8003514:	605a      	str	r2, [r3, #4]
 8003516:	609a      	str	r2, [r3, #8]
 8003518:	60da      	str	r2, [r3, #12]
 800351a:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 800351c:	2020      	movs	r0, #32
 800351e:	f7ff fc65 	bl	8002dec <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8003522:	2004      	movs	r0, #4
 8003524:	f7ff fc62 	bl	8002dec <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8003528:	2008      	movs	r0, #8
 800352a:	f7ff fc5f 	bl	8002dec <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, PFC_ON_OFF_Pin|LED_TEST_Pin);
 800352e:	f244 2142 	movw	r1, #16962	@ 0x4242
 8003532:	4813      	ldr	r0, [pc, #76]	@ (8003580 <MX_GPIO_Init+0x78>)
 8003534:	f7ff fd83 	bl	800303e <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LED_WAIT_Pin|LED_SOFT_START_Pin|LED_PROCESS_Pin|VOLTAGE_PROTECTION_Pin
 8003538:	4912      	ldr	r1, [pc, #72]	@ (8003584 <MX_GPIO_Init+0x7c>)
 800353a:	4813      	ldr	r0, [pc, #76]	@ (8003588 <MX_GPIO_Init+0x80>)
 800353c:	f7ff fd7f 	bl	800303e <LL_GPIO_ResetOutputPin>
                          |RS485_CONTROL_Pin);

  /**/
  GPIO_InitStruct.Pin = PFC_ON_OFF_Pin|LED_TEST_Pin;
 8003540:	f244 2342 	movw	r3, #16962	@ 0x4242
 8003544:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8003546:	2301      	movs	r3, #1
 8003548:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800354a:	2302      	movs	r3, #2
 800354c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800354e:	2300      	movs	r3, #0
 8003550:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003552:	1d3b      	adds	r3, r7, #4
 8003554:	4619      	mov	r1, r3
 8003556:	480a      	ldr	r0, [pc, #40]	@ (8003580 <MX_GPIO_Init+0x78>)
 8003558:	f000 faae 	bl	8003ab8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_WAIT_Pin|LED_SOFT_START_Pin|LED_PROCESS_Pin|VOLTAGE_PROTECTION_Pin
 800355c:	4b09      	ldr	r3, [pc, #36]	@ (8003584 <MX_GPIO_Init+0x7c>)
 800355e:	607b      	str	r3, [r7, #4]
                          |RS485_CONTROL_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8003560:	2301      	movs	r3, #1
 8003562:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003564:	2302      	movs	r3, #2
 8003566:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003568:	2300      	movs	r3, #0
 800356a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800356c:	1d3b      	adds	r3, r7, #4
 800356e:	4619      	mov	r1, r3
 8003570:	4805      	ldr	r0, [pc, #20]	@ (8003588 <MX_GPIO_Init+0x80>)
 8003572:	f000 faa1 	bl	8003ab8 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003576:	bf00      	nop
 8003578:	3718      	adds	r7, #24
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	40010800 	.word	0x40010800
 8003584:	04300737 	.word	0x04300737
 8003588:	40010c00 	.word	0x40010c00

0800358c <BSP_BOARD_TimeOut>:
   *   PUBLIC FUNCTION
   *********************/

  // Call Function in "SysTick ISR"
  static inline void BSP_BOARD_TimeOut (void)
  {
 800358c:	b580      	push	{r7, lr}
 800358e:	af00      	add	r7, sp, #0
    BSP_UART_TimeOut();
 8003590:	f7ff f9ea 	bl	8002968 <BSP_UART_TimeOut>
    BSP_I2C_TimeOut();
 8003594:	f7fe fd22 	bl	8001fdc <BSP_I2C_TimeOut>
  }
 8003598:	bf00      	nop
 800359a:	bd80      	pop	{r7, pc}

0800359c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800359c:	b480      	push	{r7}
 800359e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80035a0:	bf00      	nop
 80035a2:	e7fd      	b.n	80035a0 <NMI_Handler+0x4>

080035a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035a4:	b480      	push	{r7}
 80035a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035a8:	bf00      	nop
 80035aa:	e7fd      	b.n	80035a8 <HardFault_Handler+0x4>

080035ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80035ac:	b480      	push	{r7}
 80035ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80035b0:	bf00      	nop
 80035b2:	e7fd      	b.n	80035b0 <MemManage_Handler+0x4>

080035b4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80035b4:	b480      	push	{r7}
 80035b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80035b8:	bf00      	nop
 80035ba:	e7fd      	b.n	80035b8 <BusFault_Handler+0x4>

080035bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80035bc:	b480      	push	{r7}
 80035be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80035c0:	bf00      	nop
 80035c2:	e7fd      	b.n	80035c0 <UsageFault_Handler+0x4>

080035c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80035c4:	b480      	push	{r7}
 80035c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80035c8:	bf00      	nop
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bc80      	pop	{r7}
 80035ce:	4770      	bx	lr

080035d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80035d0:	b480      	push	{r7}
 80035d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80035d4:	bf00      	nop
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bc80      	pop	{r7}
 80035da:	4770      	bx	lr

080035dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80035dc:	b480      	push	{r7}
 80035de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80035e0:	bf00      	nop
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bc80      	pop	{r7}
 80035e6:	4770      	bx	lr

080035e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	BSP_BOARD_TimeOut();
 80035ec:	f7ff ffce 	bl	800358c <BSP_BOARD_TimeOut>
	APP_CONTROL_TimeWaitDischarging();
 80035f0:	f7fe f9ec 	bl	80019cc <APP_CONTROL_TimeWaitDischarging>
	SCH_RunSystemTickTimer();
 80035f4:	f001 fbe6 	bl	8004dc4 <SCH_RunSystemTickTimer>
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80035f8:	bf00      	nop
 80035fa:	bd80      	pop	{r7, pc}

080035fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	BSP_UART_ISR((uart_cfg_t *)p_uart1);
 8003600:	4b03      	ldr	r3, [pc, #12]	@ (8003610 <USART1_IRQHandler+0x14>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4618      	mov	r0, r3
 8003606:	f7ff f9c1 	bl	800298c <BSP_UART_ISR>
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800360a:	bf00      	nop
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	200000a8 	.word	0x200000a8

08003614 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003614:	b480      	push	{r7}
 8003616:	af00      	add	r7, sp, #0

  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003618:	bf00      	nop
 800361a:	46bd      	mov	sp, r7
 800361c:	bc80      	pop	{r7}
 800361e:	4770      	bx	lr

08003620 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003620:	b480      	push	{r7}
 8003622:	af00      	add	r7, sp, #0
  return 1;
 8003624:	2301      	movs	r3, #1
}
 8003626:	4618      	mov	r0, r3
 8003628:	46bd      	mov	sp, r7
 800362a:	bc80      	pop	{r7}
 800362c:	4770      	bx	lr

0800362e <_kill>:

int _kill(int pid, int sig)
{
 800362e:	b580      	push	{r7, lr}
 8003630:	b082      	sub	sp, #8
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
 8003636:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003638:	f003 f970 	bl	800691c <__errno>
 800363c:	4603      	mov	r3, r0
 800363e:	2216      	movs	r2, #22
 8003640:	601a      	str	r2, [r3, #0]
  return -1;
 8003642:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003646:	4618      	mov	r0, r3
 8003648:	3708      	adds	r7, #8
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <_exit>:

void _exit (int status)
{
 800364e:	b580      	push	{r7, lr}
 8003650:	b082      	sub	sp, #8
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003656:	f04f 31ff 	mov.w	r1, #4294967295
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f7ff ffe7 	bl	800362e <_kill>
  while (1) {}    /* Make sure we hang here */
 8003660:	bf00      	nop
 8003662:	e7fd      	b.n	8003660 <_exit+0x12>

08003664 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b086      	sub	sp, #24
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003670:	2300      	movs	r3, #0
 8003672:	617b      	str	r3, [r7, #20]
 8003674:	e00a      	b.n	800368c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003676:	f3af 8000 	nop.w
 800367a:	4601      	mov	r1, r0
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	1c5a      	adds	r2, r3, #1
 8003680:	60ba      	str	r2, [r7, #8]
 8003682:	b2ca      	uxtb	r2, r1
 8003684:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	3301      	adds	r3, #1
 800368a:	617b      	str	r3, [r7, #20]
 800368c:	697a      	ldr	r2, [r7, #20]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	429a      	cmp	r2, r3
 8003692:	dbf0      	blt.n	8003676 <_read+0x12>
  }

  return len;
 8003694:	687b      	ldr	r3, [r7, #4]
}
 8003696:	4618      	mov	r0, r3
 8003698:	3718      	adds	r7, #24
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}

0800369e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800369e:	b580      	push	{r7, lr}
 80036a0:	b086      	sub	sp, #24
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	60f8      	str	r0, [r7, #12]
 80036a6:	60b9      	str	r1, [r7, #8]
 80036a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036aa:	2300      	movs	r3, #0
 80036ac:	617b      	str	r3, [r7, #20]
 80036ae:	e009      	b.n	80036c4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	1c5a      	adds	r2, r3, #1
 80036b4:	60ba      	str	r2, [r7, #8]
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	4618      	mov	r0, r3
 80036ba:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	3301      	adds	r3, #1
 80036c2:	617b      	str	r3, [r7, #20]
 80036c4:	697a      	ldr	r2, [r7, #20]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	dbf1      	blt.n	80036b0 <_write+0x12>
  }
  return len;
 80036cc:	687b      	ldr	r3, [r7, #4]
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3718      	adds	r7, #24
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <_close>:

int _close(int file)
{
 80036d6:	b480      	push	{r7}
 80036d8:	b083      	sub	sp, #12
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80036de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bc80      	pop	{r7}
 80036ea:	4770      	bx	lr

080036ec <_fstat>:


int _fstat(int file, struct stat *st)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80036fc:	605a      	str	r2, [r3, #4]
  return 0;
 80036fe:	2300      	movs	r3, #0
}
 8003700:	4618      	mov	r0, r3
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	bc80      	pop	{r7}
 8003708:	4770      	bx	lr

0800370a <_isatty>:

int _isatty(int file)
{
 800370a:	b480      	push	{r7}
 800370c:	b083      	sub	sp, #12
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003712:	2301      	movs	r3, #1
}
 8003714:	4618      	mov	r0, r3
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	bc80      	pop	{r7}
 800371c:	4770      	bx	lr

0800371e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800371e:	b480      	push	{r7}
 8003720:	b085      	sub	sp, #20
 8003722:	af00      	add	r7, sp, #0
 8003724:	60f8      	str	r0, [r7, #12]
 8003726:	60b9      	str	r1, [r7, #8]
 8003728:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800372a:	2300      	movs	r3, #0
}
 800372c:	4618      	mov	r0, r3
 800372e:	3714      	adds	r7, #20
 8003730:	46bd      	mov	sp, r7
 8003732:	bc80      	pop	{r7}
 8003734:	4770      	bx	lr
	...

08003738 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b086      	sub	sp, #24
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003740:	4a14      	ldr	r2, [pc, #80]	@ (8003794 <_sbrk+0x5c>)
 8003742:	4b15      	ldr	r3, [pc, #84]	@ (8003798 <_sbrk+0x60>)
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800374c:	4b13      	ldr	r3, [pc, #76]	@ (800379c <_sbrk+0x64>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d102      	bne.n	800375a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003754:	4b11      	ldr	r3, [pc, #68]	@ (800379c <_sbrk+0x64>)
 8003756:	4a12      	ldr	r2, [pc, #72]	@ (80037a0 <_sbrk+0x68>)
 8003758:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800375a:	4b10      	ldr	r3, [pc, #64]	@ (800379c <_sbrk+0x64>)
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4413      	add	r3, r2
 8003762:	693a      	ldr	r2, [r7, #16]
 8003764:	429a      	cmp	r2, r3
 8003766:	d207      	bcs.n	8003778 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003768:	f003 f8d8 	bl	800691c <__errno>
 800376c:	4603      	mov	r3, r0
 800376e:	220c      	movs	r2, #12
 8003770:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003772:	f04f 33ff 	mov.w	r3, #4294967295
 8003776:	e009      	b.n	800378c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003778:	4b08      	ldr	r3, [pc, #32]	@ (800379c <_sbrk+0x64>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800377e:	4b07      	ldr	r3, [pc, #28]	@ (800379c <_sbrk+0x64>)
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4413      	add	r3, r2
 8003786:	4a05      	ldr	r2, [pc, #20]	@ (800379c <_sbrk+0x64>)
 8003788:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800378a:	68fb      	ldr	r3, [r7, #12]
}
 800378c:	4618      	mov	r0, r3
 800378e:	3718      	adds	r7, #24
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	20005000 	.word	0x20005000
 8003798:	00000400 	.word	0x00000400
 800379c:	200004b4 	.word	0x200004b4
 80037a0:	20000820 	.word	0x20000820

080037a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80037a4:	b480      	push	{r7}
 80037a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80037a8:	bf00      	nop
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bc80      	pop	{r7}
 80037ae:	4770      	bx	lr

080037b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80037b0:	f7ff fff8 	bl	80037a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80037b4:	480b      	ldr	r0, [pc, #44]	@ (80037e4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80037b6:	490c      	ldr	r1, [pc, #48]	@ (80037e8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80037b8:	4a0c      	ldr	r2, [pc, #48]	@ (80037ec <LoopFillZerobss+0x16>)
  movs r3, #0
 80037ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80037bc:	e002      	b.n	80037c4 <LoopCopyDataInit>

080037be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80037be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80037c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80037c2:	3304      	adds	r3, #4

080037c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80037c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80037c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80037c8:	d3f9      	bcc.n	80037be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80037ca:	4a09      	ldr	r2, [pc, #36]	@ (80037f0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80037cc:	4c09      	ldr	r4, [pc, #36]	@ (80037f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80037ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80037d0:	e001      	b.n	80037d6 <LoopFillZerobss>

080037d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80037d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80037d4:	3204      	adds	r2, #4

080037d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80037d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037d8:	d3fb      	bcc.n	80037d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80037da:	f003 f8a5 	bl	8006928 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80037de:	f7ff fc61 	bl	80030a4 <main>
  bx lr
 80037e2:	4770      	bx	lr
  ldr r0, =_sdata
 80037e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037e8:	2000028c 	.word	0x2000028c
  ldr r2, =_sidata
 80037ec:	0800a1c8 	.word	0x0800a1c8
  ldr r2, =_sbss
 80037f0:	2000028c 	.word	0x2000028c
  ldr r4, =_ebss
 80037f4:	2000081c 	.word	0x2000081c

080037f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80037f8:	e7fe      	b.n	80037f8 <ADC1_2_IRQHandler>
	...

080037fc <ADS1115_GetData>:
 * @return The data reading from the specified channel. If a timeout occurs,
 * returns 0.
 */
uint16_t
ADS1115_GetData (ads1115_channel_t channel)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
 8003802:	4603      	mov	r3, r0
 8003804:	71fb      	strb	r3, [r7, #7]
  i2c_1.buffer[0] = 0x01;
 8003806:	4b3b      	ldr	r3, [pc, #236]	@ (80038f4 <ADS1115_GetData+0xf8>)
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	701a      	strb	r2, [r3, #0]
  switch (channel)
 800380e:	79fb      	ldrb	r3, [r7, #7]
 8003810:	2b03      	cmp	r3, #3
 8003812:	d823      	bhi.n	800385c <ADS1115_GetData+0x60>
 8003814:	a201      	add	r2, pc, #4	@ (adr r2, 800381c <ADS1115_GetData+0x20>)
 8003816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800381a:	bf00      	nop
 800381c:	0800382d 	.word	0x0800382d
 8003820:	08003839 	.word	0x08003839
 8003824:	08003845 	.word	0x08003845
 8003828:	08003851 	.word	0x08003851
  {
    case DEV_ADS1115_CHANNEL_0:
      i2c_1.buffer[1] = 0xC1;
 800382c:	4b31      	ldr	r3, [pc, #196]	@ (80038f4 <ADS1115_GetData+0xf8>)
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	3301      	adds	r3, #1
 8003832:	22c1      	movs	r2, #193	@ 0xc1
 8003834:	701a      	strb	r2, [r3, #0]
      break;
 8003836:	e011      	b.n	800385c <ADS1115_GetData+0x60>
    case DEV_ADS1115_CHANNEL_1:
      i2c_1.buffer[1] = 0xD1;
 8003838:	4b2e      	ldr	r3, [pc, #184]	@ (80038f4 <ADS1115_GetData+0xf8>)
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	3301      	adds	r3, #1
 800383e:	22d1      	movs	r2, #209	@ 0xd1
 8003840:	701a      	strb	r2, [r3, #0]
      break;
 8003842:	e00b      	b.n	800385c <ADS1115_GetData+0x60>
    case DEV_ADS1115_CHANNEL_2:
      i2c_1.buffer[1] = 0xE1;
 8003844:	4b2b      	ldr	r3, [pc, #172]	@ (80038f4 <ADS1115_GetData+0xf8>)
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	3301      	adds	r3, #1
 800384a:	22e1      	movs	r2, #225	@ 0xe1
 800384c:	701a      	strb	r2, [r3, #0]
      break;
 800384e:	e005      	b.n	800385c <ADS1115_GetData+0x60>
    case DEV_ADS1115_CHANNEL_3:
      i2c_1.buffer[1] = 0xF1;
 8003850:	4b28      	ldr	r3, [pc, #160]	@ (80038f4 <ADS1115_GetData+0xf8>)
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	3301      	adds	r3, #1
 8003856:	22f1      	movs	r2, #241	@ 0xf1
 8003858:	701a      	strb	r2, [r3, #0]
      break;
 800385a:	bf00      	nop
  }

  i2c_1.buffer[0]   = 0x83;
 800385c:	4b25      	ldr	r3, [pc, #148]	@ (80038f4 <ADS1115_GetData+0xf8>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	2283      	movs	r2, #131	@ 0x83
 8003862:	701a      	strb	r2, [r3, #0]
  i2c_1.size_buffer = 3;
 8003864:	4b23      	ldr	r3, [pc, #140]	@ (80038f4 <ADS1115_GetData+0xf8>)
 8003866:	2203      	movs	r2, #3
 8003868:	609a      	str	r2, [r3, #8]
  BSP_I2C_MasterTransmit7B((i2c_data_t *)&i2c_1);
 800386a:	4822      	ldr	r0, [pc, #136]	@ (80038f4 <ADS1115_GetData+0xf8>)
 800386c:	f7fe fac6 	bl	8001dfc <BSP_I2C_MasterTransmit7B>
  if (i2c_1.status == I2C_TIMEOUT)
 8003870:	4b20      	ldr	r3, [pc, #128]	@ (80038f4 <ADS1115_GetData+0xf8>)
 8003872:	7b1b      	ldrb	r3, [r3, #12]
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d101      	bne.n	800387e <ADS1115_GetData+0x82>
  {
    return 0;
 800387a:	2300      	movs	r3, #0
 800387c:	e035      	b.n	80038ea <ADS1115_GetData+0xee>
  }

  i2c_1.buffer[0]   = 0x00;
 800387e:	4b1d      	ldr	r3, [pc, #116]	@ (80038f4 <ADS1115_GetData+0xf8>)
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	701a      	strb	r2, [r3, #0]
  i2c_1.size_buffer = 1;
 8003886:	4b1b      	ldr	r3, [pc, #108]	@ (80038f4 <ADS1115_GetData+0xf8>)
 8003888:	2201      	movs	r2, #1
 800388a:	609a      	str	r2, [r3, #8]
  BSP_I2C_MasterTransmit7B((i2c_data_t *)&i2c_1);
 800388c:	4819      	ldr	r0, [pc, #100]	@ (80038f4 <ADS1115_GetData+0xf8>)
 800388e:	f7fe fab5 	bl	8001dfc <BSP_I2C_MasterTransmit7B>
  if (i2c_1.status == I2C_TIMEOUT)
 8003892:	4b18      	ldr	r3, [pc, #96]	@ (80038f4 <ADS1115_GetData+0xf8>)
 8003894:	7b1b      	ldrb	r3, [r3, #12]
 8003896:	b2db      	uxtb	r3, r3
 8003898:	2b00      	cmp	r3, #0
 800389a:	d101      	bne.n	80038a0 <ADS1115_GetData+0xa4>
  {
    return 0;
 800389c:	2300      	movs	r3, #0
 800389e:	e024      	b.n	80038ea <ADS1115_GetData+0xee>
  }

  LL_mDelay(20);
 80038a0:	2014      	movs	r0, #20
 80038a2:	f000 ff97 	bl	80047d4 <LL_mDelay>
  i2c_1.size_buffer = 2;
 80038a6:	4b13      	ldr	r3, [pc, #76]	@ (80038f4 <ADS1115_GetData+0xf8>)
 80038a8:	2202      	movs	r2, #2
 80038aa:	609a      	str	r2, [r3, #8]
  BSP_I2C_MasterReceive7B((i2c_data_t *)&i2c_1);
 80038ac:	4811      	ldr	r0, [pc, #68]	@ (80038f4 <ADS1115_GetData+0xf8>)
 80038ae:	f7fe faef 	bl	8001e90 <BSP_I2C_MasterReceive7B>

  data[channel].data_reading = (i2c_1.buffer[0] << 8 | i2c_1.buffer[1]);
 80038b2:	4b10      	ldr	r3, [pc, #64]	@ (80038f4 <ADS1115_GetData+0xf8>)
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	021b      	lsls	r3, r3, #8
 80038bc:	b21a      	sxth	r2, r3
 80038be:	4b0d      	ldr	r3, [pc, #52]	@ (80038f4 <ADS1115_GetData+0xf8>)
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	3301      	adds	r3, #1
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	b21b      	sxth	r3, r3
 80038ca:	4313      	orrs	r3, r2
 80038cc:	b21a      	sxth	r2, r3
 80038ce:	79fb      	ldrb	r3, [r7, #7]
 80038d0:	b291      	uxth	r1, r2
 80038d2:	4a09      	ldr	r2, [pc, #36]	@ (80038f8 <ADS1115_GetData+0xfc>)
 80038d4:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
  if (data[channel].data_reading < 0)
 80038d8:	79fb      	ldrb	r3, [r7, #7]
 80038da:	4a07      	ldr	r2, [pc, #28]	@ (80038f8 <ADS1115_GetData+0xfc>)
 80038dc:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
  {
    data[channel].data_reading = 0;
  }

  return data[channel].data_reading;
 80038e0:	79fb      	ldrb	r3, [r7, #7]
 80038e2:	4a05      	ldr	r2, [pc, #20]	@ (80038f8 <ADS1115_GetData+0xfc>)
 80038e4:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 80038e8:	b29b      	uxth	r3, r3
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3708      	adds	r7, #8
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	200000b0 	.word	0x200000b0
 80038f8:	200004b8 	.word	0x200004b8

080038fc <ADS1115_Voltage>:

float
ADS1115_Voltage (ads1115_channel_t channel)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	4603      	mov	r3, r0
 8003904:	71fb      	strb	r3, [r7, #7]
  /**< Read raw Data */
  ADS1115_GetData(channel);
 8003906:	79fb      	ldrb	r3, [r7, #7]
 8003908:	4618      	mov	r0, r3
 800390a:	f7ff ff77 	bl	80037fc <ADS1115_GetData>

  /**< Calibrate ADC */

  /**< Convert voltage */
  data[0].voltage = (float)(data[0].data_reading * ADS1115_VREF) / ADS1115_STEP;
 800390e:	4b0d      	ldr	r3, [pc, #52]	@ (8003944 <ADS1115_Voltage+0x48>)
 8003910:	881b      	ldrh	r3, [r3, #0]
 8003912:	b29b      	uxth	r3, r3
 8003914:	031b      	lsls	r3, r3, #12
 8003916:	4618      	mov	r0, r3
 8003918:	f7fd f9ea 	bl	8000cf0 <__aeabi_i2f>
 800391c:	4603      	mov	r3, r0
 800391e:	f04f 418f 	mov.w	r1, #1199570944	@ 0x47800000
 8003922:	4618      	mov	r0, r3
 8003924:	f7fd faec 	bl	8000f00 <__aeabi_fdiv>
 8003928:	4603      	mov	r3, r0
 800392a:	461a      	mov	r2, r3
 800392c:	4b05      	ldr	r3, [pc, #20]	@ (8003944 <ADS1115_Voltage+0x48>)
 800392e:	605a      	str	r2, [r3, #4]

  return data[channel].voltage;
 8003930:	79fb      	ldrb	r3, [r7, #7]
 8003932:	4a04      	ldr	r2, [pc, #16]	@ (8003944 <ADS1115_Voltage+0x48>)
 8003934:	00db      	lsls	r3, r3, #3
 8003936:	4413      	add	r3, r2
 8003938:	685b      	ldr	r3, [r3, #4]
}
 800393a:	4618      	mov	r0, r3
 800393c:	3708      	adds	r7, #8
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	200004b8 	.word	0x200004b8

08003948 <LL_GPIO_SetPinMode>:
{
 8003948:	b490      	push	{r4, r7}
 800394a:	b088      	sub	sp, #32
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	461a      	mov	r2, r3
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	0e1b      	lsrs	r3, r3, #24
 800395c:	4413      	add	r3, r2
 800395e:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8003960:	6822      	ldr	r2, [r4, #0]
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	fa93 f3a3 	rbit	r3, r3
 800396c:	613b      	str	r3, [r7, #16]
  return result;
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	fab3 f383 	clz	r3, r3
 8003974:	b2db      	uxtb	r3, r3
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	210f      	movs	r1, #15
 800397a:	fa01 f303 	lsl.w	r3, r1, r3
 800397e:	43db      	mvns	r3, r3
 8003980:	401a      	ands	r2, r3
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	fa93 f3a3 	rbit	r3, r3
 800398c:	61bb      	str	r3, [r7, #24]
  return result;
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	fab3 f383 	clz	r3, r3
 8003994:	b2db      	uxtb	r3, r3
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	6879      	ldr	r1, [r7, #4]
 800399a:	fa01 f303 	lsl.w	r3, r1, r3
 800399e:	4313      	orrs	r3, r2
 80039a0:	6023      	str	r3, [r4, #0]
}
 80039a2:	bf00      	nop
 80039a4:	3720      	adds	r7, #32
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bc90      	pop	{r4, r7}
 80039aa:	4770      	bx	lr

080039ac <LL_GPIO_SetPinSpeed>:
{
 80039ac:	b490      	push	{r4, r7}
 80039ae:	b088      	sub	sp, #32
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	461a      	mov	r2, r3
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	0e1b      	lsrs	r3, r3, #24
 80039c0:	4413      	add	r3, r2
 80039c2:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 80039c4:	6822      	ldr	r2, [r4, #0]
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	fa93 f3a3 	rbit	r3, r3
 80039d0:	613b      	str	r3, [r7, #16]
  return result;
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	fab3 f383 	clz	r3, r3
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	2103      	movs	r1, #3
 80039de:	fa01 f303 	lsl.w	r3, r1, r3
 80039e2:	43db      	mvns	r3, r3
 80039e4:	401a      	ands	r2, r3
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	fa93 f3a3 	rbit	r3, r3
 80039f0:	61bb      	str	r3, [r7, #24]
  return result;
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	fab3 f383 	clz	r3, r3
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	6879      	ldr	r1, [r7, #4]
 80039fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003a02:	4313      	orrs	r3, r2
 8003a04:	6023      	str	r3, [r4, #0]
}
 8003a06:	bf00      	nop
 8003a08:	3720      	adds	r7, #32
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bc90      	pop	{r4, r7}
 8003a0e:	4770      	bx	lr

08003a10 <LL_GPIO_SetPinOutputType>:
{
 8003a10:	b490      	push	{r4, r7}
 8003a12:	b088      	sub	sp, #32
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	461a      	mov	r2, r3
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	0e1b      	lsrs	r3, r3, #24
 8003a24:	4413      	add	r3, r2
 8003a26:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8003a28:	6822      	ldr	r2, [r4, #0]
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	fa93 f3a3 	rbit	r3, r3
 8003a34:	613b      	str	r3, [r7, #16]
  return result;
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	fab3 f383 	clz	r3, r3
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	2104      	movs	r1, #4
 8003a42:	fa01 f303 	lsl.w	r3, r1, r3
 8003a46:	43db      	mvns	r3, r3
 8003a48:	401a      	ands	r2, r3
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	fa93 f3a3 	rbit	r3, r3
 8003a54:	61bb      	str	r3, [r7, #24]
  return result;
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	fab3 f383 	clz	r3, r3
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	6879      	ldr	r1, [r7, #4]
 8003a62:	fa01 f303 	lsl.w	r3, r1, r3
 8003a66:	4313      	orrs	r3, r2
 8003a68:	6023      	str	r3, [r4, #0]
}
 8003a6a:	bf00      	nop
 8003a6c:	3720      	adds	r7, #32
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bc90      	pop	{r4, r7}
 8003a72:	4770      	bx	lr

08003a74 <LL_GPIO_SetPinPull>:
{
 8003a74:	b480      	push	{r7}
 8003a76:	b087      	sub	sp, #28
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	68da      	ldr	r2, [r3, #12]
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	0a1b      	lsrs	r3, r3, #8
 8003a88:	43db      	mvns	r3, r3
 8003a8a:	401a      	ands	r2, r3
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	0a1b      	lsrs	r3, r3, #8
 8003a90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	fa93 f3a3 	rbit	r3, r3
 8003a98:	613b      	str	r3, [r7, #16]
  return result;
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	fab3 f383 	clz	r3, r3
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	408b      	lsls	r3, r1
 8003aa8:	431a      	orrs	r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	60da      	str	r2, [r3, #12]
}
 8003aae:	bf00      	nop
 8003ab0:	371c      	adds	r7, #28
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bc80      	pop	{r7}
 8003ab6:	4770      	bx	lr

08003ab8 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b088      	sub	sp, #32
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	021b      	lsls	r3, r3, #8
 8003ac8:	0c1b      	lsrs	r3, r3, #16
 8003aca:	617b      	str	r3, [r7, #20]
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	fa93 f3a3 	rbit	r3, r3
 8003ad6:	60fb      	str	r3, [r7, #12]
  return result;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8003ada:	fab3 f383 	clz	r3, r3
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 8003ae2:	e044      	b.n	8003b6e <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	409a      	lsls	r2, r3
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	4013      	ands	r3, r2
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d03a      	beq.n	8003b68 <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	2b07      	cmp	r3, #7
 8003af6:	d806      	bhi.n	8003b06 <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 8003af8:	f240 1201 	movw	r2, #257	@ 0x101
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	fa02 f303 	lsl.w	r3, r2, r3
 8003b02:	61bb      	str	r3, [r7, #24]
 8003b04:	e008      	b.n	8003b18 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	3b08      	subs	r3, #8
 8003b0a:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 8003b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b12:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003b16:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	2b08      	cmp	r3, #8
 8003b1e:	d106      	bne.n	8003b2e <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	461a      	mov	r2, r3
 8003b26:	69b9      	ldr	r1, [r7, #24]
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f7ff ffa3 	bl	8003a74 <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	461a      	mov	r2, r3
 8003b34:	69b9      	ldr	r1, [r7, #24]
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f7ff ff06 	bl	8003948 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d003      	beq.n	8003b4c <LL_GPIO_Init+0x94>
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	2b09      	cmp	r3, #9
 8003b4a:	d10d      	bne.n	8003b68 <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	461a      	mov	r2, r3
 8003b52:	69b9      	ldr	r1, [r7, #24]
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f7ff ff29 	bl	80039ac <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	461a      	mov	r2, r3
 8003b60:	69b9      	ldr	r1, [r7, #24]
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f7ff ff54 	bl	8003a10 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 8003b6e:	697a      	ldr	r2, [r7, #20]
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	fa22 f303 	lsr.w	r3, r2, r3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d1b4      	bne.n	8003ae4 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8003b7a:	2300      	movs	r3, #0
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3720      	adds	r7, #32
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <LL_I2C_Enable>:
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f043 0201 	orr.w	r2, r3, #1
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	601a      	str	r2, [r3, #0]
}
 8003b98:	bf00      	nop
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bc80      	pop	{r7}
 8003ba0:	4770      	bx	lr

08003ba2 <LL_I2C_Disable>:
{
 8003ba2:	b480      	push	{r7}
 8003ba4:	b083      	sub	sp, #12
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f023 0201 	bic.w	r2, r3, #1
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	601a      	str	r2, [r3, #0]
}
 8003bb6:	bf00      	nop
 8003bb8:	370c      	adds	r7, #12
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bc80      	pop	{r7}
 8003bbe:	4770      	bx	lr

08003bc0 <LL_I2C_SetOwnAddress1>:
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b085      	sub	sp, #20
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003bd4:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003bd8:	68b9      	ldr	r1, [r7, #8]
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	430a      	orrs	r2, r1
 8003bde:	431a      	orrs	r2, r3
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	609a      	str	r2, [r3, #8]
}
 8003be4:	bf00      	nop
 8003be6:	3714      	adds	r7, #20
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bc80      	pop	{r7}
 8003bec:	4770      	bx	lr
	...

08003bf0 <LL_I2C_ConfigSpeed>:
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b087      	sub	sp, #28
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	607a      	str	r2, [r7, #4]
 8003bfc:	603b      	str	r3, [r7, #0]
  uint32_t freqrange = 0x0U;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	613b      	str	r3, [r7, #16]
  uint32_t clockconfig = 0x0U;
 8003c02:	2300      	movs	r3, #0
 8003c04:	617b      	str	r3, [r7, #20]
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	4a41      	ldr	r2, [pc, #260]	@ (8003d10 <LL_I2C_ConfigSpeed+0x120>)
 8003c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c0e:	0c9b      	lsrs	r3, r3, #18
 8003c10:	613b      	str	r3, [r7, #16]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	431a      	orrs	r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	605a      	str	r2, [r3, #4]
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6a1b      	ldr	r3, [r3, #32]
 8003c26:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4939      	ldr	r1, [pc, #228]	@ (8003d14 <LL_I2C_ConfigSpeed+0x124>)
 8003c2e:	428b      	cmp	r3, r1
 8003c30:	d802      	bhi.n	8003c38 <LL_I2C_ConfigSpeed+0x48>
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	3301      	adds	r3, #1
 8003c36:	e009      	b.n	8003c4c <LL_I2C_ConfigSpeed+0x5c>
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8003c3e:	fb01 f303 	mul.w	r3, r1, r3
 8003c42:	4935      	ldr	r1, [pc, #212]	@ (8003d18 <LL_I2C_ConfigSpeed+0x128>)
 8003c44:	fba1 1303 	umull	r1, r3, r1, r3
 8003c48:	099b      	lsrs	r3, r3, #6
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	431a      	orrs	r2, r3
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	621a      	str	r2, [r3, #32]
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a2f      	ldr	r2, [pc, #188]	@ (8003d14 <LL_I2C_ConfigSpeed+0x124>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d939      	bls.n	8003cce <LL_I2C_ConfigSpeed+0xde>
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d117      	bne.n	8003c90 <LL_I2C_ConfigSpeed+0xa0>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	4613      	mov	r3, r2
 8003c64:	005b      	lsls	r3, r3, #1
 8003c66:	4413      	add	r3, r2
 8003c68:	68ba      	ldr	r2, [r7, #8]
 8003c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d009      	beq.n	8003c8a <LL_I2C_ConfigSpeed+0x9a>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	4613      	mov	r3, r2
 8003c7a:	005b      	lsls	r3, r3, #1
 8003c7c:	4413      	add	r3, r2
 8003c7e:	68ba      	ldr	r2, [r7, #8]
 8003c80:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003c84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c88:	e01d      	b.n	8003cc6 <LL_I2C_ConfigSpeed+0xd6>
 8003c8a:	f248 0301 	movw	r3, #32769	@ 0x8001
 8003c8e:	e01a      	b.n	8003cc6 <LL_I2C_ConfigSpeed+0xd6>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	4613      	mov	r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	4413      	add	r3, r2
 8003c98:	009a      	lsls	r2, r3, #2
 8003c9a:	4413      	add	r3, r2
 8003c9c:	68ba      	ldr	r2, [r7, #8]
 8003c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ca2:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00b      	beq.n	8003cc2 <LL_I2C_ConfigSpeed+0xd2>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	4613      	mov	r3, r2
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	4413      	add	r3, r2
 8003cb2:	009a      	lsls	r2, r3, #2
 8003cb4:	4413      	add	r3, r2
 8003cb6:	68ba      	ldr	r2, [r7, #8]
 8003cb8:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003cbc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003cc0:	e001      	b.n	8003cc6 <LL_I2C_ConfigSpeed+0xd6>
 8003cc2:	f248 0301 	movw	r3, #32769	@ 0x8001
 8003cc6:	683a      	ldr	r2, [r7, #0]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	617b      	str	r3, [r7, #20]
 8003ccc:	e011      	b.n	8003cf2 <LL_I2C_ConfigSpeed+0x102>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	005b      	lsls	r3, r3, #1
 8003cd2:	68ba      	ldr	r2, [r7, #8]
 8003cd4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cd8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003cdc:	4013      	ands	r3, r2
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d005      	beq.n	8003cee <LL_I2C_ConfigSpeed+0xfe>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8003ce6:	68ba      	ldr	r2, [r7, #8]
 8003ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cec:	e000      	b.n	8003cf0 <LL_I2C_ConfigSpeed+0x100>
 8003cee:	2304      	movs	r3, #4
 8003cf0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	69db      	ldr	r3, [r3, #28]
 8003cf6:	f423 434f 	bic.w	r3, r3, #52992	@ 0xcf00
 8003cfa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003cfe:	697a      	ldr	r2, [r7, #20]
 8003d00:	431a      	orrs	r2, r3
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	61da      	str	r2, [r3, #28]
}
 8003d06:	bf00      	nop
 8003d08:	371c      	adds	r7, #28
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bc80      	pop	{r7}
 8003d0e:	4770      	bx	lr
 8003d10:	431bde83 	.word	0x431bde83
 8003d14:	000186a0 	.word	0x000186a0
 8003d18:	10624dd3 	.word	0x10624dd3

08003d1c <LL_I2C_SetMode>:
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f023 021a 	bic.w	r2, r3, #26
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	431a      	orrs	r2, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	601a      	str	r2, [r3, #0]
}
 8003d36:	bf00      	nop
 8003d38:	370c      	adds	r7, #12
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bc80      	pop	{r7}
 8003d3e:	4770      	bx	lr

08003d40 <LL_I2C_AcknowledgeNextData>:
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	431a      	orrs	r2, r3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	601a      	str	r2, [r3, #0]
}
 8003d5a:	bf00      	nop
 8003d5c:	370c      	adds	r7, #12
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bc80      	pop	{r7}
 8003d62:	4770      	bx	lr

08003d64 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b086      	sub	sp, #24
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f7ff ff17 	bl	8003ba2 <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8003d74:	f107 0308 	add.w	r3, r7, #8
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f000 f87b 	bl	8003e74 <LL_RCC_GetSystemClocksFreq>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 8003d7e:	6939      	ldr	r1, [r7, #16]
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	685a      	ldr	r2, [r3, #4]
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f7ff ff31 	bl	8003bf0 <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	68d9      	ldr	r1, [r3, #12]
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	461a      	mov	r2, r3
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f7ff ff11 	bl	8003bc0 <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4619      	mov	r1, r3
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f7ff ffb9 	bl	8003d1c <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f7ff feea 	bl	8003b84 <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	691b      	ldr	r3, [r3, #16]
 8003db4:	4619      	mov	r1, r3
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f7ff ffc2 	bl	8003d40 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3718      	adds	r7, #24
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
	...

08003dc8 <LL_RCC_GetSysClkSource>:
{
 8003dc8:	b480      	push	{r7}
 8003dca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003dcc:	4b03      	ldr	r3, [pc, #12]	@ (8003ddc <LL_RCC_GetSysClkSource+0x14>)
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f003 030c 	and.w	r3, r3, #12
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bc80      	pop	{r7}
 8003dda:	4770      	bx	lr
 8003ddc:	40021000 	.word	0x40021000

08003de0 <LL_RCC_GetAHBPrescaler>:
{
 8003de0:	b480      	push	{r7}
 8003de2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003de4:	4b03      	ldr	r3, [pc, #12]	@ (8003df4 <LL_RCC_GetAHBPrescaler+0x14>)
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bc80      	pop	{r7}
 8003df2:	4770      	bx	lr
 8003df4:	40021000 	.word	0x40021000

08003df8 <LL_RCC_GetAPB1Prescaler>:
{
 8003df8:	b480      	push	{r7}
 8003dfa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003dfc:	4b03      	ldr	r3, [pc, #12]	@ (8003e0c <LL_RCC_GetAPB1Prescaler+0x14>)
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bc80      	pop	{r7}
 8003e0a:	4770      	bx	lr
 8003e0c:	40021000 	.word	0x40021000

08003e10 <LL_RCC_GetAPB2Prescaler>:
{
 8003e10:	b480      	push	{r7}
 8003e12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003e14:	4b03      	ldr	r3, [pc, #12]	@ (8003e24 <LL_RCC_GetAPB2Prescaler+0x14>)
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bc80      	pop	{r7}
 8003e22:	4770      	bx	lr
 8003e24:	40021000 	.word	0x40021000

08003e28 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8003e2c:	4b03      	ldr	r3, [pc, #12]	@ (8003e3c <LL_RCC_PLL_GetMainSource+0x14>)
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bc80      	pop	{r7}
 8003e3a:	4770      	bx	lr
 8003e3c:	40021000 	.word	0x40021000

08003e40 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8003e40:	b480      	push	{r7}
 8003e42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8003e44:	4b03      	ldr	r3, [pc, #12]	@ (8003e54 <LL_RCC_PLL_GetMultiplicator+0x14>)
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bc80      	pop	{r7}
 8003e52:	4770      	bx	lr
 8003e54:	40021000 	.word	0x40021000

08003e58 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 8003e5c:	4b04      	ldr	r3, [pc, #16]	@ (8003e70 <LL_RCC_PLL_GetPrediv+0x18>)
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	0c5b      	lsrs	r3, r3, #17
 8003e62:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bc80      	pop	{r7}
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	40021000 	.word	0x40021000

08003e74 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8003e7c:	f000 f820 	bl	8003ec0 <RCC_GetSystemClockFreq>
 8003e80:	4602      	mov	r2, r0
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f000 f83e 	bl	8003f0c <RCC_GetHCLKClockFreq>
 8003e90:	4602      	mov	r2, r0
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f000 f84c 	bl	8003f38 <RCC_GetPCLK1ClockFreq>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f000 f858 	bl	8003f60 <RCC_GetPCLK2ClockFreq>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	60da      	str	r2, [r3, #12]
}
 8003eb6:	bf00      	nop
 8003eb8:	3708      	adds	r7, #8
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
	...

08003ec0 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8003eca:	f7ff ff7d 	bl	8003dc8 <LL_RCC_GetSysClkSource>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b08      	cmp	r3, #8
 8003ed2:	d00c      	beq.n	8003eee <RCC_GetSystemClockFreq+0x2e>
 8003ed4:	2b08      	cmp	r3, #8
 8003ed6:	d80e      	bhi.n	8003ef6 <RCC_GetSystemClockFreq+0x36>
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d002      	beq.n	8003ee2 <RCC_GetSystemClockFreq+0x22>
 8003edc:	2b04      	cmp	r3, #4
 8003ede:	d003      	beq.n	8003ee8 <RCC_GetSystemClockFreq+0x28>
 8003ee0:	e009      	b.n	8003ef6 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8003ee2:	4b09      	ldr	r3, [pc, #36]	@ (8003f08 <RCC_GetSystemClockFreq+0x48>)
 8003ee4:	607b      	str	r3, [r7, #4]
      break;
 8003ee6:	e009      	b.n	8003efc <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8003ee8:	4b07      	ldr	r3, [pc, #28]	@ (8003f08 <RCC_GetSystemClockFreq+0x48>)
 8003eea:	607b      	str	r3, [r7, #4]
      break;
 8003eec:	e006      	b.n	8003efc <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8003eee:	f000 f84b 	bl	8003f88 <RCC_PLL_GetFreqDomain_SYS>
 8003ef2:	6078      	str	r0, [r7, #4]
      break;
 8003ef4:	e002      	b.n	8003efc <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 8003ef6:	4b04      	ldr	r3, [pc, #16]	@ (8003f08 <RCC_GetSystemClockFreq+0x48>)
 8003ef8:	607b      	str	r3, [r7, #4]
      break;
 8003efa:	bf00      	nop
  }

  return frequency;
 8003efc:	687b      	ldr	r3, [r7, #4]
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3708      	adds	r7, #8
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	007a1200 	.word	0x007a1200

08003f0c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003f14:	f7ff ff64 	bl	8003de0 <LL_RCC_GetAHBPrescaler>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	091b      	lsrs	r3, r3, #4
 8003f1c:	f003 030f 	and.w	r3, r3, #15
 8003f20:	4a04      	ldr	r2, [pc, #16]	@ (8003f34 <RCC_GetHCLKClockFreq+0x28>)
 8003f22:	5cd3      	ldrb	r3, [r2, r3]
 8003f24:	461a      	mov	r2, r3
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	40d3      	lsrs	r3, r2
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3708      	adds	r7, #8
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	080094f4 	.word	0x080094f4

08003f38 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003f40:	f7ff ff5a 	bl	8003df8 <LL_RCC_GetAPB1Prescaler>
 8003f44:	4603      	mov	r3, r0
 8003f46:	0a1b      	lsrs	r3, r3, #8
 8003f48:	4a04      	ldr	r2, [pc, #16]	@ (8003f5c <RCC_GetPCLK1ClockFreq+0x24>)
 8003f4a:	5cd3      	ldrb	r3, [r2, r3]
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	40d3      	lsrs	r3, r2
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3708      	adds	r7, #8
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	08009504 	.word	0x08009504

08003f60 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b082      	sub	sp, #8
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003f68:	f7ff ff52 	bl	8003e10 <LL_RCC_GetAPB2Prescaler>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	0adb      	lsrs	r3, r3, #11
 8003f70:	4a04      	ldr	r2, [pc, #16]	@ (8003f84 <RCC_GetPCLK2ClockFreq+0x24>)
 8003f72:	5cd3      	ldrb	r3, [r2, r3]
 8003f74:	461a      	mov	r2, r3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	40d3      	lsrs	r3, r2
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3708      	adds	r7, #8
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	08009504 	.word	0x08009504

08003f88 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	607b      	str	r3, [r7, #4]
 8003f92:	2300      	movs	r3, #0
 8003f94:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8003f96:	f7ff ff47 	bl	8003e28 <LL_RCC_PLL_GetMainSource>
 8003f9a:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d004      	beq.n	8003fac <RCC_PLL_GetFreqDomain_SYS+0x24>
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fa8:	d003      	beq.n	8003fb2 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8003faa:	e00b      	b.n	8003fc4 <RCC_PLL_GetFreqDomain_SYS+0x3c>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8003fac:	4b0d      	ldr	r3, [pc, #52]	@ (8003fe4 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8003fae:	607b      	str	r3, [r7, #4]
      break;
 8003fb0:	e00b      	b.n	8003fca <RCC_PLL_GetFreqDomain_SYS+0x42>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 8003fb2:	f7ff ff51 	bl	8003e58 <LL_RCC_PLL_GetPrediv>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	3301      	adds	r3, #1
 8003fba:	4a0b      	ldr	r2, [pc, #44]	@ (8003fe8 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8003fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fc0:	607b      	str	r3, [r7, #4]
      break;
 8003fc2:	e002      	b.n	8003fca <RCC_PLL_GetFreqDomain_SYS+0x42>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 8003fc4:	4b07      	ldr	r3, [pc, #28]	@ (8003fe4 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8003fc6:	607b      	str	r3, [r7, #4]
      break;
 8003fc8:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 8003fca:	f7ff ff39 	bl	8003e40 <LL_RCC_PLL_GetMultiplicator>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	0c9b      	lsrs	r3, r3, #18
 8003fd2:	3302      	adds	r3, #2
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	fb02 f303 	mul.w	r3, r2, r3
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3708      	adds	r7, #8
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	003d0900 	.word	0x003d0900
 8003fe8:	007a1200 	.word	0x007a1200

08003fec <LL_TIM_SetPrescaler>:
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	683a      	ldr	r2, [r7, #0]
 8003ffa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003ffc:	bf00      	nop
 8003ffe:	370c      	adds	r7, #12
 8004000:	46bd      	mov	sp, r7
 8004002:	bc80      	pop	{r7}
 8004004:	4770      	bx	lr

08004006 <LL_TIM_SetAutoReload>:
{
 8004006:	b480      	push	{r7}
 8004008:	b083      	sub	sp, #12
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
 800400e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	683a      	ldr	r2, [r7, #0]
 8004014:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004016:	bf00      	nop
 8004018:	370c      	adds	r7, #12
 800401a:	46bd      	mov	sp, r7
 800401c:	bc80      	pop	{r7}
 800401e:	4770      	bx	lr

08004020 <LL_TIM_SetRepetitionCounter>:
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	683a      	ldr	r2, [r7, #0]
 800402e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004030:	bf00      	nop
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	bc80      	pop	{r7}
 8004038:	4770      	bx	lr

0800403a <LL_TIM_OC_SetCompareCH1>:
{
 800403a:	b480      	push	{r7}
 800403c:	b083      	sub	sp, #12
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
 8004042:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	683a      	ldr	r2, [r7, #0]
 8004048:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800404a:	bf00      	nop
 800404c:	370c      	adds	r7, #12
 800404e:	46bd      	mov	sp, r7
 8004050:	bc80      	pop	{r7}
 8004052:	4770      	bx	lr

08004054 <LL_TIM_OC_SetCompareCH2>:
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	683a      	ldr	r2, [r7, #0]
 8004062:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8004064:	bf00      	nop
 8004066:	370c      	adds	r7, #12
 8004068:	46bd      	mov	sp, r7
 800406a:	bc80      	pop	{r7}
 800406c:	4770      	bx	lr

0800406e <LL_TIM_OC_SetCompareCH3>:
{
 800406e:	b480      	push	{r7}
 8004070:	b083      	sub	sp, #12
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
 8004076:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	683a      	ldr	r2, [r7, #0]
 800407c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800407e:	bf00      	nop
 8004080:	370c      	adds	r7, #12
 8004082:	46bd      	mov	sp, r7
 8004084:	bc80      	pop	{r7}
 8004086:	4770      	bx	lr

08004088 <LL_TIM_OC_SetCompareCH4>:
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	683a      	ldr	r2, [r7, #0]
 8004096:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8004098:	bf00      	nop
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	bc80      	pop	{r7}
 80040a0:	4770      	bx	lr

080040a2 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80040a2:	b480      	push	{r7}
 80040a4:	b083      	sub	sp, #12
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	695b      	ldr	r3, [r3, #20]
 80040ae:	f043 0201 	orr.w	r2, r3, #1
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	615a      	str	r2, [r3, #20]
}
 80040b6:	bf00      	nop
 80040b8:	370c      	adds	r7, #12
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bc80      	pop	{r7}
 80040be:	4770      	bx	lr

080040c0 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b084      	sub	sp, #16
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4a27      	ldr	r2, [pc, #156]	@ (8004170 <LL_TIM_Init+0xb0>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d00b      	beq.n	80040f0 <LL_TIM_Init+0x30>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040de:	d007      	beq.n	80040f0 <LL_TIM_Init+0x30>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4a24      	ldr	r2, [pc, #144]	@ (8004174 <LL_TIM_Init+0xb4>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d003      	beq.n	80040f0 <LL_TIM_Init+0x30>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	4a23      	ldr	r2, [pc, #140]	@ (8004178 <LL_TIM_Init+0xb8>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d106      	bne.n	80040fe <LL_TIM_Init+0x3e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a1b      	ldr	r2, [pc, #108]	@ (8004170 <LL_TIM_Init+0xb0>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d00b      	beq.n	800411e <LL_TIM_Init+0x5e>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800410c:	d007      	beq.n	800411e <LL_TIM_Init+0x5e>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a18      	ldr	r2, [pc, #96]	@ (8004174 <LL_TIM_Init+0xb4>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d003      	beq.n	800411e <LL_TIM_Init+0x5e>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a17      	ldr	r2, [pc, #92]	@ (8004178 <LL_TIM_Init+0xb8>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d106      	bne.n	800412c <LL_TIM_Init+0x6c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	4313      	orrs	r3, r2
 800412a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	68fa      	ldr	r2, [r7, #12]
 8004130:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	4619      	mov	r1, r3
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f7ff ff64 	bl	8004006 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	881b      	ldrh	r3, [r3, #0]
 8004142:	4619      	mov	r1, r3
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f7ff ff51 	bl	8003fec <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a08      	ldr	r2, [pc, #32]	@ (8004170 <LL_TIM_Init+0xb0>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d105      	bne.n	800415e <LL_TIM_Init+0x9e>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	4619      	mov	r1, r3
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f7ff ff61 	bl	8004020 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f7ff ff9f 	bl	80040a2 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3710      	adds	r7, #16
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	40012c00 	.word	0x40012c00
 8004174:	40000400 	.word	0x40000400
 8004178:	40000800 	.word	0x40000800

0800417c <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b086      	sub	sp, #24
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004192:	d027      	beq.n	80041e4 <LL_TIM_OC_Init+0x68>
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800419a:	d82a      	bhi.n	80041f2 <LL_TIM_OC_Init+0x76>
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041a2:	d018      	beq.n	80041d6 <LL_TIM_OC_Init+0x5a>
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041aa:	d822      	bhi.n	80041f2 <LL_TIM_OC_Init+0x76>
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d003      	beq.n	80041ba <LL_TIM_OC_Init+0x3e>
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	2b10      	cmp	r3, #16
 80041b6:	d007      	beq.n	80041c8 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 80041b8:	e01b      	b.n	80041f2 <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80041ba:	6879      	ldr	r1, [r7, #4]
 80041bc:	68f8      	ldr	r0, [r7, #12]
 80041be:	f000 f85f 	bl	8004280 <OC1Config>
 80041c2:	4603      	mov	r3, r0
 80041c4:	75fb      	strb	r3, [r7, #23]
      break;
 80041c6:	e015      	b.n	80041f4 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80041c8:	6879      	ldr	r1, [r7, #4]
 80041ca:	68f8      	ldr	r0, [r7, #12]
 80041cc:	f000 f8be 	bl	800434c <OC2Config>
 80041d0:	4603      	mov	r3, r0
 80041d2:	75fb      	strb	r3, [r7, #23]
      break;
 80041d4:	e00e      	b.n	80041f4 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80041d6:	6879      	ldr	r1, [r7, #4]
 80041d8:	68f8      	ldr	r0, [r7, #12]
 80041da:	f000 f921 	bl	8004420 <OC3Config>
 80041de:	4603      	mov	r3, r0
 80041e0:	75fb      	strb	r3, [r7, #23]
      break;
 80041e2:	e007      	b.n	80041f4 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80041e4:	6879      	ldr	r1, [r7, #4]
 80041e6:	68f8      	ldr	r0, [r7, #12]
 80041e8:	f000 f984 	bl	80044f4 <OC4Config>
 80041ec:	4603      	mov	r3, r0
 80041ee:	75fb      	strb	r3, [r7, #23]
      break;
 80041f0:	e000      	b.n	80041f4 <LL_TIM_OC_Init+0x78>
      break;
 80041f2:	bf00      	nop
  }

  return result;
 80041f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3718      	adds	r7, #24
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}

080041fe <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, const LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 80041fe:	b480      	push	{r7}
 8004200:	b085      	sub	sp, #20
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
 8004206:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 8004208:	2300      	movs	r3, #0
 800420a:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004212:	683a      	ldr	r2, [r7, #0]
 8004214:	7b12      	ldrb	r2, [r2, #12]
 8004216:	4313      	orrs	r3, r2
 8004218:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	4313      	orrs	r3, r2
 8004226:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	4313      	orrs	r3, r2
 8004234:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4313      	orrs	r3, r2
 8004242:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800424a:	683a      	ldr	r2, [r7, #0]
 800424c:	89d2      	ldrh	r2, [r2, #14]
 800424e:	4313      	orrs	r3, r2
 8004250:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	691b      	ldr	r3, [r3, #16]
 800425c:	4313      	orrs	r3, r2
 800425e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	695b      	ldr	r3, [r3, #20]
 800426a:	4313      	orrs	r3, r2
 800426c:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	68fa      	ldr	r2, [r7, #12]
 8004272:	645a      	str	r2, [r3, #68]	@ 0x44

  return SUCCESS;
 8004274:	2300      	movs	r3, #0
}
 8004276:	4618      	mov	r0, r3
 8004278:	3714      	adds	r7, #20
 800427a:	46bd      	mov	sp, r7
 800427c:	bc80      	pop	{r7}
 800427e:	4770      	bx	lr

08004280 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b086      	sub	sp, #24
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a1b      	ldr	r3, [r3, #32]
 800428e:	f023 0201 	bic.w	r2, r3, #1
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a1b      	ldr	r3, [r3, #32]
 800429a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	699b      	ldr	r3, [r3, #24]
 80042a6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f023 0303 	bic.w	r3, r3, #3
 80042ae:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	f023 0202 	bic.w	r2, r3, #2
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	691b      	ldr	r3, [r3, #16]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	f023 0201 	bic.w	r2, r3, #1
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a1a      	ldr	r2, [pc, #104]	@ (8004348 <OC1Config+0xc8>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d11e      	bne.n	8004320 <OC1Config+0xa0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	f023 0208 	bic.w	r2, r3, #8
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	695b      	ldr	r3, [r3, #20]
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	4313      	orrs	r3, r2
 80042f0:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	f023 0204 	bic.w	r2, r3, #4
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	4313      	orrs	r3, r2
 8004300:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	699b      	ldr	r3, [r3, #24]
 800430c:	4313      	orrs	r3, r2
 800430e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	69db      	ldr	r3, [r3, #28]
 800431a:	005b      	lsls	r3, r3, #1
 800431c:	4313      	orrs	r3, r2
 800431e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	4619      	mov	r1, r3
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f7ff fe81 	bl	800403a <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	697a      	ldr	r2, [r7, #20]
 800433c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800433e:	2300      	movs	r3, #0
}
 8004340:	4618      	mov	r0, r3
 8004342:	3718      	adds	r7, #24
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}
 8004348:	40012c00 	.word	0x40012c00

0800434c <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b086      	sub	sp, #24
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a1b      	ldr	r3, [r3, #32]
 800435a:	f023 0210 	bic.w	r2, r3, #16
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a1b      	ldr	r3, [r3, #32]
 8004366:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	699b      	ldr	r3, [r3, #24]
 8004372:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800437a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	021b      	lsls	r3, r3, #8
 8004388:	4313      	orrs	r3, r2
 800438a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	f023 0220 	bic.w	r2, r3, #32
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	011b      	lsls	r3, r3, #4
 8004398:	4313      	orrs	r3, r2
 800439a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	f023 0210 	bic.w	r2, r3, #16
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	011b      	lsls	r3, r3, #4
 80043a8:	4313      	orrs	r3, r2
 80043aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4a1b      	ldr	r2, [pc, #108]	@ (800441c <OC2Config+0xd0>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d11f      	bne.n	80043f4 <OC2Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	019b      	lsls	r3, r3, #6
 80043c0:	4313      	orrs	r3, r2
 80043c2:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	019b      	lsls	r3, r3, #6
 80043d0:	4313      	orrs	r3, r2
 80043d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	699b      	ldr	r3, [r3, #24]
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	4313      	orrs	r3, r2
 80043e2:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	69db      	ldr	r3, [r3, #28]
 80043ee:	00db      	lsls	r3, r3, #3
 80043f0:	4313      	orrs	r3, r2
 80043f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	693a      	ldr	r2, [r7, #16]
 80043f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	4619      	mov	r1, r3
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f7ff fe24 	bl	8004054 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	697a      	ldr	r2, [r7, #20]
 8004410:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004412:	2300      	movs	r3, #0
}
 8004414:	4618      	mov	r0, r3
 8004416:	3718      	adds	r7, #24
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}
 800441c:	40012c00 	.word	0x40012c00

08004420 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b086      	sub	sp, #24
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a1b      	ldr	r3, [r3, #32]
 800442e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a1b      	ldr	r3, [r3, #32]
 800443a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	69db      	ldr	r3, [r3, #28]
 8004446:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f023 0303 	bic.w	r3, r3, #3
 800444e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4313      	orrs	r3, r2
 800445c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	691b      	ldr	r3, [r3, #16]
 8004468:	021b      	lsls	r3, r3, #8
 800446a:	4313      	orrs	r3, r2
 800446c:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	021b      	lsls	r3, r3, #8
 800447a:	4313      	orrs	r3, r2
 800447c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a1b      	ldr	r2, [pc, #108]	@ (80044f0 <OC3Config+0xd0>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d11f      	bne.n	80044c6 <OC3Config+0xa6>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	695b      	ldr	r3, [r3, #20]
 8004490:	029b      	lsls	r3, r3, #10
 8004492:	4313      	orrs	r3, r2
 8004494:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	029b      	lsls	r3, r3, #10
 80044a2:	4313      	orrs	r3, r2
 80044a4:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	699b      	ldr	r3, [r3, #24]
 80044b0:	011b      	lsls	r3, r3, #4
 80044b2:	4313      	orrs	r3, r2
 80044b4:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	69db      	ldr	r3, [r3, #28]
 80044c0:	015b      	lsls	r3, r3, #5
 80044c2:	4313      	orrs	r3, r2
 80044c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	693a      	ldr	r2, [r7, #16]
 80044ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	68fa      	ldr	r2, [r7, #12]
 80044d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	4619      	mov	r1, r3
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f7ff fdc8 	bl	800406e <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	697a      	ldr	r2, [r7, #20]
 80044e2:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80044e4:	2300      	movs	r3, #0
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3718      	adds	r7, #24
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	40012c00 	.word	0x40012c00

080044f4 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b086      	sub	sp, #24
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a1b      	ldr	r3, [r3, #32]
 8004502:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a1b      	ldr	r3, [r3, #32]
 800450e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	69db      	ldr	r3, [r3, #28]
 800451a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004522:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	021b      	lsls	r3, r3, #8
 8004530:	4313      	orrs	r3, r2
 8004532:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	031b      	lsls	r3, r3, #12
 8004540:	4313      	orrs	r3, r2
 8004542:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	031b      	lsls	r3, r3, #12
 8004550:	4313      	orrs	r3, r2
 8004552:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a0f      	ldr	r2, [pc, #60]	@ (8004594 <OC4Config+0xa0>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d107      	bne.n	800456c <OC4Config+0x78>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	019b      	lsls	r3, r3, #6
 8004568:	4313      	orrs	r3, r2
 800456a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	697a      	ldr	r2, [r7, #20]
 8004570:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	4619      	mov	r1, r3
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f7ff fd82 	bl	8004088 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	693a      	ldr	r2, [r7, #16]
 8004588:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800458a:	2300      	movs	r3, #0
}
 800458c:	4618      	mov	r0, r3
 800458e:	3718      	adds	r7, #24
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}
 8004594:	40012c00 	.word	0x40012c00

08004598 <LL_USART_IsEnabled>:
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80045a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045ac:	bf0c      	ite	eq
 80045ae:	2301      	moveq	r3, #1
 80045b0:	2300      	movne	r3, #0
 80045b2:	b2db      	uxtb	r3, r3
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bc80      	pop	{r7}
 80045bc:	4770      	bx	lr

080045be <LL_USART_SetStopBitsLength>:
{
 80045be:	b480      	push	{r7}
 80045c0:	b083      	sub	sp, #12
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
 80045c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	691b      	ldr	r3, [r3, #16]
 80045cc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	431a      	orrs	r2, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	611a      	str	r2, [r3, #16]
}
 80045d8:	bf00      	nop
 80045da:	370c      	adds	r7, #12
 80045dc:	46bd      	mov	sp, r7
 80045de:	bc80      	pop	{r7}
 80045e0:	4770      	bx	lr

080045e2 <LL_USART_SetHWFlowCtrl>:
{
 80045e2:	b480      	push	{r7}
 80045e4:	b083      	sub	sp, #12
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
 80045ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	695b      	ldr	r3, [r3, #20]
 80045f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	431a      	orrs	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	615a      	str	r2, [r3, #20]
}
 80045fc:	bf00      	nop
 80045fe:	370c      	adds	r7, #12
 8004600:	46bd      	mov	sp, r7
 8004602:	bc80      	pop	{r7}
 8004604:	4770      	bx	lr
	...

08004608 <LL_USART_SetBaudRate>:
{
 8004608:	b480      	push	{r7}
 800460a:	b085      	sub	sp, #20
 800460c:	af00      	add	r7, sp, #0
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8004614:	68ba      	ldr	r2, [r7, #8]
 8004616:	4613      	mov	r3, r2
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	4413      	add	r3, r2
 800461c:	009a      	lsls	r2, r3, #2
 800461e:	441a      	add	r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	fbb2 f3f3 	udiv	r3, r2, r3
 8004628:	4a25      	ldr	r2, [pc, #148]	@ (80046c0 <LL_USART_SetBaudRate+0xb8>)
 800462a:	fba2 2303 	umull	r2, r3, r2, r3
 800462e:	095b      	lsrs	r3, r3, #5
 8004630:	b29b      	uxth	r3, r3
 8004632:	011b      	lsls	r3, r3, #4
 8004634:	b299      	uxth	r1, r3
 8004636:	68ba      	ldr	r2, [r7, #8]
 8004638:	4613      	mov	r3, r2
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	4413      	add	r3, r2
 800463e:	009a      	lsls	r2, r3, #2
 8004640:	441a      	add	r2, r3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	fbb2 f2f3 	udiv	r2, r2, r3
 800464a:	4b1d      	ldr	r3, [pc, #116]	@ (80046c0 <LL_USART_SetBaudRate+0xb8>)
 800464c:	fba3 0302 	umull	r0, r3, r3, r2
 8004650:	095b      	lsrs	r3, r3, #5
 8004652:	2064      	movs	r0, #100	@ 0x64
 8004654:	fb00 f303 	mul.w	r3, r0, r3
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	011b      	lsls	r3, r3, #4
 800465c:	3332      	adds	r3, #50	@ 0x32
 800465e:	4a18      	ldr	r2, [pc, #96]	@ (80046c0 <LL_USART_SetBaudRate+0xb8>)
 8004660:	fba2 2303 	umull	r2, r3, r2, r3
 8004664:	095b      	lsrs	r3, r3, #5
 8004666:	b29b      	uxth	r3, r3
 8004668:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800466c:	b29b      	uxth	r3, r3
 800466e:	440b      	add	r3, r1
 8004670:	b299      	uxth	r1, r3
 8004672:	68ba      	ldr	r2, [r7, #8]
 8004674:	4613      	mov	r3, r2
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	4413      	add	r3, r2
 800467a:	009a      	lsls	r2, r3, #2
 800467c:	441a      	add	r2, r3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	fbb2 f2f3 	udiv	r2, r2, r3
 8004686:	4b0e      	ldr	r3, [pc, #56]	@ (80046c0 <LL_USART_SetBaudRate+0xb8>)
 8004688:	fba3 0302 	umull	r0, r3, r3, r2
 800468c:	095b      	lsrs	r3, r3, #5
 800468e:	2064      	movs	r0, #100	@ 0x64
 8004690:	fb00 f303 	mul.w	r3, r0, r3
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	011b      	lsls	r3, r3, #4
 8004698:	3332      	adds	r3, #50	@ 0x32
 800469a:	4a09      	ldr	r2, [pc, #36]	@ (80046c0 <LL_USART_SetBaudRate+0xb8>)
 800469c:	fba2 2303 	umull	r2, r3, r2, r3
 80046a0:	095b      	lsrs	r3, r3, #5
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	f003 030f 	and.w	r3, r3, #15
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	440b      	add	r3, r1
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	461a      	mov	r2, r3
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	609a      	str	r2, [r3, #8]
}
 80046b4:	bf00      	nop
 80046b6:	3714      	adds	r7, #20
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bc80      	pop	{r7}
 80046bc:	4770      	bx	lr
 80046be:	bf00      	nop
 80046c0:	51eb851f 	.word	0x51eb851f

080046c4 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b088      	sub	sp, #32
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80046d2:	2300      	movs	r3, #0
 80046d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f7ff ff5e 	bl	8004598 <LL_USART_IsEnabled>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d145      	bne.n	800476e <LL_USART_Init+0xaa>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80046ea:	f023 030c 	bic.w	r3, r3, #12
 80046ee:	683a      	ldr	r2, [r7, #0]
 80046f0:	6851      	ldr	r1, [r2, #4]
 80046f2:	683a      	ldr	r2, [r7, #0]
 80046f4:	68d2      	ldr	r2, [r2, #12]
 80046f6:	4311      	orrs	r1, r2
 80046f8:	683a      	ldr	r2, [r7, #0]
 80046fa:	6912      	ldr	r2, [r2, #16]
 80046fc:	430a      	orrs	r2, r1
 80046fe:	431a      	orrs	r2, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	4619      	mov	r1, r3
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f7ff ff57 	bl	80045be <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	695b      	ldr	r3, [r3, #20]
 8004714:	4619      	mov	r1, r3
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f7ff ff63 	bl	80045e2 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800471c:	f107 0308 	add.w	r3, r7, #8
 8004720:	4618      	mov	r0, r3
 8004722:	f7ff fba7 	bl	8003e74 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a13      	ldr	r2, [pc, #76]	@ (8004778 <LL_USART_Init+0xb4>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d102      	bne.n	8004734 <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	61bb      	str	r3, [r7, #24]
 8004732:	e00c      	b.n	800474e <LL_USART_Init+0x8a>
    }
    else if (USARTx == USART2)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	4a11      	ldr	r2, [pc, #68]	@ (800477c <LL_USART_Init+0xb8>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d102      	bne.n	8004742 <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	61bb      	str	r3, [r7, #24]
 8004740:	e005      	b.n	800474e <LL_USART_Init+0x8a>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a0e      	ldr	r2, [pc, #56]	@ (8004780 <LL_USART_Init+0xbc>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d101      	bne.n	800474e <LL_USART_Init+0x8a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d00c      	beq.n	800476e <LL_USART_Init+0xaa>
        && (USART_InitStruct->BaudRate != 0U))
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d008      	beq.n	800476e <LL_USART_Init+0xaa>
    {
      status = SUCCESS;
 800475c:	2300      	movs	r3, #0
 800475e:	77fb      	strb	r3, [r7, #31]
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->BaudRate);
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8004764:	461a      	mov	r2, r3
 8004766:	69b9      	ldr	r1, [r7, #24]
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f7ff ff4d 	bl	8004608 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800476e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004770:	4618      	mov	r0, r3
 8004772:	3720      	adds	r7, #32
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}
 8004778:	40013800 	.word	0x40013800
 800477c:	40004400 	.word	0x40004400
 8004780:	40004800 	.word	0x40004800

08004784 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	fbb2 f3f3 	udiv	r3, r2, r3
 8004796:	4a07      	ldr	r2, [pc, #28]	@ (80047b4 <LL_InitTick+0x30>)
 8004798:	3b01      	subs	r3, #1
 800479a:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 800479c:	4b05      	ldr	r3, [pc, #20]	@ (80047b4 <LL_InitTick+0x30>)
 800479e:	2200      	movs	r2, #0
 80047a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80047a2:	4b04      	ldr	r3, [pc, #16]	@ (80047b4 <LL_InitTick+0x30>)
 80047a4:	2205      	movs	r2, #5
 80047a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80047a8:	bf00      	nop
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bc80      	pop	{r7}
 80047b0:	4770      	bx	lr
 80047b2:	bf00      	nop
 80047b4:	e000e010 	.word	0xe000e010

080047b8 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b082      	sub	sp, #8
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80047c0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f7ff ffdd 	bl	8004784 <LL_InitTick>
}
 80047ca:	bf00      	nop
 80047cc:	3708      	adds	r7, #8
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
	...

080047d4 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b085      	sub	sp, #20
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80047dc:	4b0e      	ldr	r3, [pc, #56]	@ (8004818 <LL_mDelay+0x44>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80047e2:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ea:	d00c      	beq.n	8004806 <LL_mDelay+0x32>
  {
    Delay++;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	3301      	adds	r3, #1
 80047f0:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 80047f2:	e008      	b.n	8004806 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80047f4:	4b08      	ldr	r3, [pc, #32]	@ (8004818 <LL_mDelay+0x44>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d002      	beq.n	8004806 <LL_mDelay+0x32>
    {
      Delay--;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	3b01      	subs	r3, #1
 8004804:	607b      	str	r3, [r7, #4]
  while (Delay)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d1f3      	bne.n	80047f4 <LL_mDelay+0x20>
    }
  }
}
 800480c:	bf00      	nop
 800480e:	bf00      	nop
 8004810:	3714      	adds	r7, #20
 8004812:	46bd      	mov	sp, r7
 8004814:	bc80      	pop	{r7}
 8004816:	4770      	bx	lr
 8004818:	e000e010 	.word	0xe000e010

0800481c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8004824:	4a03      	ldr	r2, [pc, #12]	@ (8004834 <LL_SetSystemCoreClock+0x18>)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6013      	str	r3, [r2, #0]
}
 800482a:	bf00      	nop
 800482c:	370c      	adds	r7, #12
 800482e:	46bd      	mov	sp, r7
 8004830:	bc80      	pop	{r7}
 8004832:	4770      	bx	lr
 8004834:	200000ac 	.word	0x200000ac

08004838 <CCF_Process>:
/**********************
 *    PUBLIC FUNCTIONS
 **********************/
uint32_t
CCF_Process (float current)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  float temp = -0.172233513 * current + 115.5723622;
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f7fb fdfb 	bl	800043c <__aeabi_f2d>
 8004846:	a310      	add	r3, pc, #64	@ (adr r3, 8004888 <CCF_Process+0x50>)
 8004848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800484c:	f7fb fe4e 	bl	80004ec <__aeabi_dmul>
 8004850:	4602      	mov	r2, r0
 8004852:	460b      	mov	r3, r1
 8004854:	4610      	mov	r0, r2
 8004856:	4619      	mov	r1, r3
 8004858:	a30d      	add	r3, pc, #52	@ (adr r3, 8004890 <CCF_Process+0x58>)
 800485a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800485e:	f7fb fc8f 	bl	8000180 <__adddf3>
 8004862:	4602      	mov	r2, r0
 8004864:	460b      	mov	r3, r1
 8004866:	4610      	mov	r0, r2
 8004868:	4619      	mov	r1, r3
 800486a:	f7fc f937 	bl	8000adc <__aeabi_d2f>
 800486e:	4603      	mov	r3, r0
 8004870:	60fb      	str	r3, [r7, #12]
  return (uint32_t)temp;
 8004872:	68f8      	ldr	r0, [r7, #12]
 8004874:	f7fc fc56 	bl	8001124 <__aeabi_f2uiz>
 8004878:	4603      	mov	r3, r0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3710      	adds	r7, #16
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	f3af 8000 	nop.w
 8004888:	6cce1abc 	.word	0x6cce1abc
 800488c:	bfc60bbf 	.word	0xbfc60bbf
 8004890:	95109ddd 	.word	0x95109ddd
 8004894:	405ce4a1 	.word	0x405ce4a1

08004898 <FCP_PhaseStart>:
 *
 * @param time The time value used to determine the PWM parameters.
 */
void
FCP_PhaseStart (uint8_t time)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b082      	sub	sp, #8
 800489c:	af00      	add	r7, sp, #0
 800489e:	4603      	mov	r3, r0
 80048a0:	71fb      	strb	r3, [r7, #7]
  time = time > 20 ? (time - 20) : 0;
 80048a2:	79fb      	ldrb	r3, [r7, #7]
 80048a4:	2b14      	cmp	r3, #20
 80048a6:	bf38      	it	cc
 80048a8:	2314      	movcc	r3, #20
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	3b14      	subs	r3, #20
 80048ae:	71fb      	strb	r3, [r7, #7]

  // Set the prescaler value
  pwm_control_1->u16_prescaler = table_data_start[time].prescaler_timer - 1;
 80048b0:	79fb      	ldrb	r3, [r7, #7]
 80048b2:	4a16      	ldr	r2, [pc, #88]	@ (800490c <FCP_PhaseStart+0x74>)
 80048b4:	00db      	lsls	r3, r3, #3
 80048b6:	4413      	add	r3, r2
 80048b8:	889b      	ldrh	r3, [r3, #4]
 80048ba:	b29a      	uxth	r2, r3
 80048bc:	4b14      	ldr	r3, [pc, #80]	@ (8004910 <FCP_PhaseStart+0x78>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	3a01      	subs	r2, #1
 80048c2:	b292      	uxth	r2, r2
 80048c4:	811a      	strh	r2, [r3, #8]
  // Set the auto-reload register value
  pwm_control_1->u16_reg_auto_reload
      = table_data_start[time].auto_reload_reg_timer - 1;
 80048c6:	79fb      	ldrb	r3, [r7, #7]
 80048c8:	4a10      	ldr	r2, [pc, #64]	@ (800490c <FCP_PhaseStart+0x74>)
 80048ca:	00db      	lsls	r3, r3, #3
 80048cc:	4413      	add	r3, r2
 80048ce:	88db      	ldrh	r3, [r3, #6]
 80048d0:	b29a      	uxth	r2, r3
  pwm_control_1->u16_reg_auto_reload
 80048d2:	4b0f      	ldr	r3, [pc, #60]	@ (8004910 <FCP_PhaseStart+0x78>)
 80048d4:	681b      	ldr	r3, [r3, #0]
      = table_data_start[time].auto_reload_reg_timer - 1;
 80048d6:	3a01      	subs	r2, #1
 80048d8:	b292      	uxth	r2, r2
 80048da:	809a      	strh	r2, [r3, #4]
  // Set the compare register value
  pwm_control_1->u16_reg_compare
      = table_data_start[time].auto_reload_reg_timer * DUTY_CYCLE / 100;
 80048dc:	79fb      	ldrb	r3, [r7, #7]
 80048de:	4a0b      	ldr	r2, [pc, #44]	@ (800490c <FCP_PhaseStart+0x74>)
 80048e0:	00db      	lsls	r3, r3, #3
 80048e2:	4413      	add	r3, r2
 80048e4:	88db      	ldrh	r3, [r3, #6]
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	0fda      	lsrs	r2, r3, #31
 80048ea:	4413      	add	r3, r2
 80048ec:	105b      	asrs	r3, r3, #1
 80048ee:	461a      	mov	r2, r3
  pwm_control_1->u16_reg_compare
 80048f0:	4b07      	ldr	r3, [pc, #28]	@ (8004910 <FCP_PhaseStart+0x78>)
 80048f2:	681b      	ldr	r3, [r3, #0]
      = table_data_start[time].auto_reload_reg_timer * DUTY_CYCLE / 100;
 80048f4:	b292      	uxth	r2, r2
 80048f6:	80da      	strh	r2, [r3, #6]

  // Apply the PWM parameters
  BSP_PWM_SetParameterProcess(pwm_control_1);
 80048f8:	4b05      	ldr	r3, [pc, #20]	@ (8004910 <FCP_PhaseStart+0x78>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4618      	mov	r0, r3
 80048fe:	f7fd fdea 	bl	80024d6 <BSP_PWM_SetParameterProcess>
}
 8004902:	bf00      	nop
 8004904:	3708      	adds	r7, #8
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	08009c94 	.word	0x08009c94
 8004910:	200000c0 	.word	0x200000c0

08004914 <FCP_PhaseProcess>:
 *
 * @param frequency The frequency value used to determine the PWM parameters.
 */
void
FCP_PhaseProcess (uint32_t frequency)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b086      	sub	sp, #24
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  if (frequency > FRE_END_THRESHOLD)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4a4c      	ldr	r2, [pc, #304]	@ (8004a50 <FCP_PhaseProcess+0x13c>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d91e      	bls.n	8004962 <FCP_PhaseProcess+0x4e>
  {
    // Set the prescaler value
    pwm_control_1->u16_prescaler = PRE_END_THRESHOLD - 1;
 8004924:	4b4b      	ldr	r3, [pc, #300]	@ (8004a54 <FCP_PhaseProcess+0x140>)
 8004926:	f8b3 354c 	ldrh.w	r3, [r3, #1356]	@ 0x54c
 800492a:	b29a      	uxth	r2, r3
 800492c:	4b4a      	ldr	r3, [pc, #296]	@ (8004a58 <FCP_PhaseProcess+0x144>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	3a01      	subs	r2, #1
 8004932:	b292      	uxth	r2, r2
 8004934:	811a      	strh	r2, [r3, #8]
    // Set the auto-reload register value
    pwm_control_1->u16_reg_auto_reload = REG_END_THRESHOLD - 1;
 8004936:	4b47      	ldr	r3, [pc, #284]	@ (8004a54 <FCP_PhaseProcess+0x140>)
 8004938:	f8b3 354e 	ldrh.w	r3, [r3, #1358]	@ 0x54e
 800493c:	b29a      	uxth	r2, r3
 800493e:	4b46      	ldr	r3, [pc, #280]	@ (8004a58 <FCP_PhaseProcess+0x144>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	3a01      	subs	r2, #1
 8004944:	b292      	uxth	r2, r2
 8004946:	809a      	strh	r2, [r3, #4]
    // Set the compare register value
    pwm_control_1->u16_reg_compare = REG_END_THRESHOLD * DUTY_CYCLE / 100;
 8004948:	4b42      	ldr	r3, [pc, #264]	@ (8004a54 <FCP_PhaseProcess+0x140>)
 800494a:	f8b3 354e 	ldrh.w	r3, [r3, #1358]	@ 0x54e
 800494e:	b29b      	uxth	r3, r3
 8004950:	0fda      	lsrs	r2, r3, #31
 8004952:	4413      	add	r3, r2
 8004954:	105b      	asrs	r3, r3, #1
 8004956:	461a      	mov	r2, r3
 8004958:	4b3f      	ldr	r3, [pc, #252]	@ (8004a58 <FCP_PhaseProcess+0x144>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	b292      	uxth	r2, r2
 800495e:	80da      	strh	r2, [r3, #6]
 8004960:	e06d      	b.n	8004a3e <FCP_PhaseProcess+0x12a>
  }
  else if (frequency < FRE_START_THRESHOLD)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a3d      	ldr	r2, [pc, #244]	@ (8004a5c <FCP_PhaseProcess+0x148>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d81b      	bhi.n	80049a2 <FCP_PhaseProcess+0x8e>
  {
    // Set the prescaler value
    pwm_control_1->u16_prescaler = PRE_START_THRESHOLD - 1;
 800496a:	4b3a      	ldr	r3, [pc, #232]	@ (8004a54 <FCP_PhaseProcess+0x140>)
 800496c:	889b      	ldrh	r3, [r3, #4]
 800496e:	b29a      	uxth	r2, r3
 8004970:	4b39      	ldr	r3, [pc, #228]	@ (8004a58 <FCP_PhaseProcess+0x144>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	3a01      	subs	r2, #1
 8004976:	b292      	uxth	r2, r2
 8004978:	811a      	strh	r2, [r3, #8]
    // Set the auto-reload register value
    pwm_control_1->u16_reg_auto_reload = REG_START_THRESHOLD - 1;
 800497a:	4b36      	ldr	r3, [pc, #216]	@ (8004a54 <FCP_PhaseProcess+0x140>)
 800497c:	88db      	ldrh	r3, [r3, #6]
 800497e:	b29a      	uxth	r2, r3
 8004980:	4b35      	ldr	r3, [pc, #212]	@ (8004a58 <FCP_PhaseProcess+0x144>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	3a01      	subs	r2, #1
 8004986:	b292      	uxth	r2, r2
 8004988:	809a      	strh	r2, [r3, #4]
    // Set the compare register value
    pwm_control_1->u16_reg_compare = REG_START_THRESHOLD * DUTY_CYCLE / 100;
 800498a:	4b32      	ldr	r3, [pc, #200]	@ (8004a54 <FCP_PhaseProcess+0x140>)
 800498c:	88db      	ldrh	r3, [r3, #6]
 800498e:	b29b      	uxth	r3, r3
 8004990:	0fda      	lsrs	r2, r3, #31
 8004992:	4413      	add	r3, r2
 8004994:	105b      	asrs	r3, r3, #1
 8004996:	461a      	mov	r2, r3
 8004998:	4b2f      	ldr	r3, [pc, #188]	@ (8004a58 <FCP_PhaseProcess+0x144>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	b292      	uxth	r2, r2
 800499e:	80da      	strh	r2, [r3, #6]
 80049a0:	e04d      	b.n	8004a3e <FCP_PhaseProcess+0x12a>
  }
  else
  {
    uint32_t i;
    int32_t  delta_1 = 0;
 80049a2:	2300      	movs	r3, #0
 80049a4:	613b      	str	r3, [r7, #16]
    int32_t  delta_2 = 0;
 80049a6:	2300      	movs	r3, #0
 80049a8:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < SIZE_TABLE_DATA_PROCESS - 1; i++)
 80049aa:	2300      	movs	r3, #0
 80049ac:	617b      	str	r3, [r7, #20]
 80049ae:	e043      	b.n	8004a38 <FCP_PhaseProcess+0x124>
    {
      delta_1 = abs_32((int32_t)(frequency - table_data_process[i].frequency));
 80049b0:	4a28      	ldr	r2, [pc, #160]	@ (8004a54 <FCP_PhaseProcess+0x140>)
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	4618      	mov	r0, r3
 80049be:	f000 f84f 	bl	8004a60 <abs_32>
 80049c2:	6138      	str	r0, [r7, #16]
      delta_2
          = abs_32((int32_t)(frequency - table_data_process[i + 1].frequency));
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	3301      	adds	r3, #1
 80049c8:	4a22      	ldr	r2, [pc, #136]	@ (8004a54 <FCP_PhaseProcess+0x140>)
 80049ca:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	4618      	mov	r0, r3
 80049d4:	f000 f844 	bl	8004a60 <abs_32>
 80049d8:	60f8      	str	r0, [r7, #12]

      if (delta_1 <= delta_2)
 80049da:	693a      	ldr	r2, [r7, #16]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	429a      	cmp	r2, r3
 80049e0:	dc27      	bgt.n	8004a32 <FCP_PhaseProcess+0x11e>
      {
        // Set the prescaler value
        pwm_control_1->u16_prescaler
            = table_data_process[i - 1].prescaler_timer - 1;
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	3b01      	subs	r3, #1
 80049e6:	4a1b      	ldr	r2, [pc, #108]	@ (8004a54 <FCP_PhaseProcess+0x140>)
 80049e8:	00db      	lsls	r3, r3, #3
 80049ea:	4413      	add	r3, r2
 80049ec:	889b      	ldrh	r3, [r3, #4]
 80049ee:	b29a      	uxth	r2, r3
        pwm_control_1->u16_prescaler
 80049f0:	4b19      	ldr	r3, [pc, #100]	@ (8004a58 <FCP_PhaseProcess+0x144>)
 80049f2:	681b      	ldr	r3, [r3, #0]
            = table_data_process[i - 1].prescaler_timer - 1;
 80049f4:	3a01      	subs	r2, #1
 80049f6:	b292      	uxth	r2, r2
 80049f8:	811a      	strh	r2, [r3, #8]
        // Set the auto-reload register value
        pwm_control_1->u16_reg_auto_reload
            = table_data_process[i - 1].auto_reload_reg_timer - 1;
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	3b01      	subs	r3, #1
 80049fe:	4a15      	ldr	r2, [pc, #84]	@ (8004a54 <FCP_PhaseProcess+0x140>)
 8004a00:	00db      	lsls	r3, r3, #3
 8004a02:	4413      	add	r3, r2
 8004a04:	88db      	ldrh	r3, [r3, #6]
 8004a06:	b29a      	uxth	r2, r3
        pwm_control_1->u16_reg_auto_reload
 8004a08:	4b13      	ldr	r3, [pc, #76]	@ (8004a58 <FCP_PhaseProcess+0x144>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
            = table_data_process[i - 1].auto_reload_reg_timer - 1;
 8004a0c:	3a01      	subs	r2, #1
 8004a0e:	b292      	uxth	r2, r2
 8004a10:	809a      	strh	r2, [r3, #4]
        // Set the compare register value
        pwm_control_1->u16_reg_compare
            = table_data_process[i - 1].auto_reload_reg_timer * DUTY_CYCLE
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	3b01      	subs	r3, #1
 8004a16:	4a0f      	ldr	r2, [pc, #60]	@ (8004a54 <FCP_PhaseProcess+0x140>)
 8004a18:	00db      	lsls	r3, r3, #3
 8004a1a:	4413      	add	r3, r2
 8004a1c:	88db      	ldrh	r3, [r3, #6]
 8004a1e:	b29b      	uxth	r3, r3
              / 100;
 8004a20:	0fda      	lsrs	r2, r3, #31
 8004a22:	4413      	add	r3, r2
 8004a24:	105b      	asrs	r3, r3, #1
 8004a26:	461a      	mov	r2, r3
        pwm_control_1->u16_reg_compare
 8004a28:	4b0b      	ldr	r3, [pc, #44]	@ (8004a58 <FCP_PhaseProcess+0x144>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
            = table_data_process[i - 1].auto_reload_reg_timer * DUTY_CYCLE
 8004a2c:	b292      	uxth	r2, r2
 8004a2e:	80da      	strh	r2, [r3, #6]
        break;
 8004a30:	e005      	b.n	8004a3e <FCP_PhaseProcess+0x12a>
    for (i = 0; i < SIZE_TABLE_DATA_PROCESS - 1; i++)
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	3301      	adds	r3, #1
 8004a36:	617b      	str	r3, [r7, #20]
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	2ba8      	cmp	r3, #168	@ 0xa8
 8004a3c:	d9b8      	bls.n	80049b0 <FCP_PhaseProcess+0x9c>
      }
    }
  }

  BSP_PWM_SetParameterProcess(pwm_control_1);
 8004a3e:	4b06      	ldr	r3, [pc, #24]	@ (8004a58 <FCP_PhaseProcess+0x144>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4618      	mov	r0, r3
 8004a44:	f7fd fd47 	bl	80024d6 <BSP_PWM_SetParameterProcess>
}
 8004a48:	bf00      	nop
 8004a4a:	3718      	adds	r7, #24
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	00020788 	.word	0x00020788
 8004a54:	0800950c 	.word	0x0800950c
 8004a58:	200000c0 	.word	0x200000c0
 8004a5c:	000128df 	.word	0x000128df

08004a60 <abs_32>:
 * @param num The 32-bit integer for which the absolute value is to be computed.
 * @return The absolute value of the input 32-bit integer.
 */
static int32_t
abs_32 (int32_t num)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  if (num >= 0)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	db01      	blt.n	8004a72 <abs_32+0x12>
  {
    return num;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	e001      	b.n	8004a76 <abs_32+0x16>
  }
  else
  {
    return -num;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	425b      	negs	r3, r3
  }
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	370c      	adds	r7, #12
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bc80      	pop	{r7}
 8004a7e:	4770      	bx	lr

08004a80 <PIControl_Reset>:
 *
 * @param p_pi Pointer to the PI controller structure to be reset.
 */
void
PIControl_Reset (pi_control_t *p_pi)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  p_pi->f_p_part    = 0; /**< @brief Reset proportional part. */
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f04f 0200 	mov.w	r2, #0
 8004a8e:	601a      	str	r2, [r3, #0]
  p_pi->f_i_part    = 0; /**< @brief Reset integral part. */
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f04f 0200 	mov.w	r2, #0
 8004a96:	605a      	str	r2, [r3, #4]
  p_pi->f_out       = 0; /**< @brief Reset current output. */
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f04f 0200 	mov.w	r2, #0
 8004a9e:	609a      	str	r2, [r3, #8]
  p_pi->f_pre_out   = 0; /**< @brief Reset previous output. */
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f04f 0200 	mov.w	r2, #0
 8004aa6:	60da      	str	r2, [r3, #12]
  p_pi->f_error     = 0; /**< @brief Reset current error. */
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f04f 0200 	mov.w	r2, #0
 8004aae:	611a      	str	r2, [r3, #16]
  p_pi->f_pre_error = 0; /**< @brief Reset previous error. */
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f04f 0200 	mov.w	r2, #0
 8004ab6:	615a      	str	r2, [r3, #20]
  p_pi->f_setPoint  = 0; /**< @brief Reset set point. */
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f04f 0200 	mov.w	r2, #0
 8004abe:	621a      	str	r2, [r3, #32]
}
 8004ac0:	bf00      	nop
 8004ac2:	370c      	adds	r7, #12
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bc80      	pop	{r7}
 8004ac8:	4770      	bx	lr
	...

08004acc <PIControl_Process>:
 * @param f_new_value New input value (feedback).
 * @param p_pi Pointer to the PI controller structure.
 */
void
PIControl_Process (float f_new_value, pi_control_t *p_pi)
{
 8004acc:	b5b0      	push	{r4, r5, r7, lr}
 8004ace:	b082      	sub	sp, #8
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	6039      	str	r1, [r7, #0]
  /**< @brief Calculate current error. */
  p_pi->f_error = f_new_value - p_pi->f_setPoint;
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	6a1b      	ldr	r3, [r3, #32]
 8004ada:	4619      	mov	r1, r3
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f7fc f851 	bl	8000b84 <__aeabi_fsub>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	611a      	str	r2, [r3, #16]

  /**< @brief Calculate proportional part. */
  p_pi->f_p_part = p_pi->f_Kp * (p_pi->f_error - p_pi->f_pre_error);
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	699c      	ldr	r4, [r3, #24]
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	691a      	ldr	r2, [r3, #16]
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	695b      	ldr	r3, [r3, #20]
 8004af6:	4619      	mov	r1, r3
 8004af8:	4610      	mov	r0, r2
 8004afa:	f7fc f843 	bl	8000b84 <__aeabi_fsub>
 8004afe:	4603      	mov	r3, r0
 8004b00:	4619      	mov	r1, r3
 8004b02:	4620      	mov	r0, r4
 8004b04:	f7fc f948 	bl	8000d98 <__aeabi_fmul>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	601a      	str	r2, [r3, #0]

  /**< @brief Calculate integral part. */
  p_pi->f_i_part = 0.5 * p_pi->f_Ki * CONTROL_PI_TIME_SAMPLE
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	69db      	ldr	r3, [r3, #28]
 8004b14:	4618      	mov	r0, r3
 8004b16:	f7fb fc91 	bl	800043c <__aeabi_f2d>
 8004b1a:	f04f 0200 	mov.w	r2, #0
 8004b1e:	4b25      	ldr	r3, [pc, #148]	@ (8004bb4 <PIControl_Process+0xe8>)
 8004b20:	f7fb fce4 	bl	80004ec <__aeabi_dmul>
 8004b24:	4602      	mov	r2, r0
 8004b26:	460b      	mov	r3, r1
 8004b28:	4610      	mov	r0, r2
 8004b2a:	4619      	mov	r1, r3
 8004b2c:	f04f 0200 	mov.w	r2, #0
 8004b30:	4b21      	ldr	r3, [pc, #132]	@ (8004bb8 <PIControl_Process+0xec>)
 8004b32:	f7fb fcdb 	bl	80004ec <__aeabi_dmul>
 8004b36:	4602      	mov	r2, r0
 8004b38:	460b      	mov	r3, r1
 8004b3a:	4614      	mov	r4, r2
 8004b3c:	461d      	mov	r5, r3
                   * (p_pi->f_error + p_pi->f_pre_error);
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	691a      	ldr	r2, [r3, #16]
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	695b      	ldr	r3, [r3, #20]
 8004b46:	4619      	mov	r1, r3
 8004b48:	4610      	mov	r0, r2
 8004b4a:	f7fc f81d 	bl	8000b88 <__addsf3>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	4618      	mov	r0, r3
 8004b52:	f7fb fc73 	bl	800043c <__aeabi_f2d>
 8004b56:	4602      	mov	r2, r0
 8004b58:	460b      	mov	r3, r1
 8004b5a:	4620      	mov	r0, r4
 8004b5c:	4629      	mov	r1, r5
 8004b5e:	f7fb fcc5 	bl	80004ec <__aeabi_dmul>
 8004b62:	4602      	mov	r2, r0
 8004b64:	460b      	mov	r3, r1
 8004b66:	4610      	mov	r0, r2
 8004b68:	4619      	mov	r1, r3
 8004b6a:	f7fb ffb7 	bl	8000adc <__aeabi_d2f>
 8004b6e:	4602      	mov	r2, r0
  p_pi->f_i_part = 0.5 * p_pi->f_Ki * CONTROL_PI_TIME_SAMPLE
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	605a      	str	r2, [r3, #4]

  /**< @brief Calculate current output. */
  p_pi->f_out = p_pi->f_pre_out + p_pi->f_p_part + p_pi->f_i_part;
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	68da      	ldr	r2, [r3, #12]
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	4610      	mov	r0, r2
 8004b80:	f7fc f802 	bl	8000b88 <__addsf3>
 8004b84:	4603      	mov	r3, r0
 8004b86:	461a      	mov	r2, r3
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	4619      	mov	r1, r3
 8004b8e:	4610      	mov	r0, r2
 8004b90:	f7fb fffa 	bl	8000b88 <__addsf3>
 8004b94:	4603      	mov	r3, r0
 8004b96:	461a      	mov	r2, r3
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	609a      	str	r2, [r3, #8]

  // Update previous error and output for next iteration
  p_pi->f_pre_error = p_pi->f_error; /**< @brief Update previous error. */
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	691a      	ldr	r2, [r3, #16]
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	615a      	str	r2, [r3, #20]
  p_pi->f_pre_out   = p_pi->f_out;   /**< @brief Update previous output. */
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	689a      	ldr	r2, [r3, #8]
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	60da      	str	r2, [r3, #12]
}
 8004bac:	bf00      	nop
 8004bae:	3708      	adds	r7, #8
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bdb0      	pop	{r4, r5, r7, pc}
 8004bb4:	3fe00000 	.word	0x3fe00000
 8004bb8:	40240000 	.word	0x40240000

08004bbc <QUEUE_Init>:
 * @param rb The parameter `rb` is a pointer to a `ring_buffer_t` structure,
 * which is used to implement a queue data structure.
 */
void
QUEUE_Init (ring_buffer_t *rb)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  rb->u8_buffer = (uint8_t *)malloc(RING_BUFFER_SIZE);
 8004bc4:	2080      	movs	r0, #128	@ 0x80
 8004bc6:	f000 f9f5 	bl	8004fb4 <malloc>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	461a      	mov	r2, r3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	601a      	str	r2, [r3, #0]
  rb->u32_in    = 0;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	605a      	str	r2, [r3, #4]
  rb->u32_out   = 0;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	609a      	str	r2, [r3, #8]
  rb->u32_count = 0;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	60da      	str	r2, [r3, #12]
}
 8004be4:	bf00      	nop
 8004be6:	3708      	adds	r7, #8
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}

08004bec <QUEUE_Reset>:
 *
 * @param rb Pointer to the ring buffer to reset.
 */
void
QUEUE_Reset (ring_buffer_t *rb)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  rb->u32_in    = 0;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	605a      	str	r2, [r3, #4]
  rb->u32_out   = 0;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	609a      	str	r2, [r3, #8]
  rb->u32_count = 0;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	60da      	str	r2, [r3, #12]
}
 8004c06:	bf00      	nop
 8004c08:	370c      	adds	r7, #12
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bc80      	pop	{r7}
 8004c0e:	4770      	bx	lr

08004c10 <QUEUE_Is_Empty>:
 * of elements in the ring buffer is 0, indicating that the buffer is empty, and
 * `false` otherwise.
 */
bool
QUEUE_Is_Empty (ring_buffer_t *rb)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b083      	sub	sp, #12
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  return (rb->u32_count == 0);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	bf0c      	ite	eq
 8004c20:	2301      	moveq	r3, #1
 8004c22:	2300      	movne	r3, #0
 8004c24:	b2db      	uxtb	r3, r3
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	370c      	adds	r7, #12
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bc80      	pop	{r7}
 8004c2e:	4770      	bx	lr

08004c30 <QUEUE_Is_Full>:
 * `true` or `false`, based on whether the count of elements in the ring buffer
 * `rb` is equal to the predefined size `RING_BUFFER_SIZE`.
 */
bool
QUEUE_Is_Full (ring_buffer_t *rb)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  return (rb->u32_count == (uint32_t)RING_BUFFER_SIZE);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	2b80      	cmp	r3, #128	@ 0x80
 8004c3e:	bf0c      	ite	eq
 8004c40:	2301      	moveq	r3, #1
 8004c42:	2300      	movne	r3, #0
 8004c44:	b2db      	uxtb	r3, r3
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	370c      	adds	r7, #12
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bc80      	pop	{r7}
 8004c4e:	4770      	bx	lr

08004c50 <QUEUE_Push_Data>:
 * represents the data element that needs to be added to the ring buffer. It is
 * of type `char`, which means it can store a single character (1 byte) of data.
 */
void
QUEUE_Push_Data (ring_buffer_t *rb, char element)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b082      	sub	sp, #8
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	460b      	mov	r3, r1
 8004c5a:	70fb      	strb	r3, [r7, #3]
  if (QUEUE_Is_Full(rb))
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f7ff ffe7 	bl	8004c30 <QUEUE_Is_Full>
 8004c62:	4603      	mov	r3, r0
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d002      	beq.n	8004c6e <QUEUE_Push_Data+0x1e>
  {
    QUEUE_Reset(rb);
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f7ff ffbf 	bl	8004bec <QUEUE_Reset>
  }
  *(rb->u8_buffer + rb->u32_in) = element;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	4413      	add	r3, r2
 8004c78:	78fa      	ldrb	r2, [r7, #3]
 8004c7a:	701a      	strb	r2, [r3, #0]

  rb->u32_in = (rb->u32_in + 1) & ((uint32_t)RING_BUFFER_SIZE - 1);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	3301      	adds	r3, #1
 8004c82:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	605a      	str	r2, [r3, #4]
  rb->u32_count++;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	1c5a      	adds	r2, r3, #1
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	60da      	str	r2, [r3, #12]
}
 8004c94:	bf00      	nop
 8004c96:	3708      	adds	r7, #8
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <QUEUE_Pull_Data>:
 * @return The function `QUEUE_Pull_Data` is returning a `uint8_t` data value
 * from the ring buffer pointed to by the `rb` parameter.
 */
uint8_t
QUEUE_Pull_Data (ring_buffer_t *rb)
{
 8004c9c:	b590      	push	{r4, r7, lr}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  if (QUEUE_Is_Empty(rb))
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f7ff ffb3 	bl	8004c10 <QUEUE_Is_Empty>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d001      	beq.n	8004cb4 <QUEUE_Pull_Data+0x18>
  {
    return 0xFF;
 8004cb0:	23ff      	movs	r3, #255	@ 0xff
 8004cb2:	e013      	b.n	8004cdc <QUEUE_Pull_Data+0x40>
  }
  register uint8_t data = *(rb->u8_buffer + rb->u32_out);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	4413      	add	r3, r2
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	b2dc      	uxtb	r4, r3

  rb->u32_out = (rb->u32_out + 1) & ((uint32_t)RING_BUFFER_SIZE - 1);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	3301      	adds	r3, #1
 8004cc8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	609a      	str	r2, [r3, #8]
  rb->u32_count--;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	1e5a      	subs	r2, r3, #1
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	60da      	str	r2, [r3, #12]

  return data;
 8004cda:	4623      	mov	r3, r4
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	370c      	adds	r7, #12
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd90      	pop	{r4, r7, pc}
 8004ce4:	0000      	movs	r0, r0
	...

08004ce8 <VCF_Process>:
/**********************
 *    PUBLIC FUNCTIONS
 **********************/
uint32_t
VCF_Process (float voltage)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b084      	sub	sp, #16
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  float temp = -0.172233513 * voltage + 115.5723622;
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f7fb fba3 	bl	800043c <__aeabi_f2d>
 8004cf6:	a310      	add	r3, pc, #64	@ (adr r3, 8004d38 <VCF_Process+0x50>)
 8004cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cfc:	f7fb fbf6 	bl	80004ec <__aeabi_dmul>
 8004d00:	4602      	mov	r2, r0
 8004d02:	460b      	mov	r3, r1
 8004d04:	4610      	mov	r0, r2
 8004d06:	4619      	mov	r1, r3
 8004d08:	a30d      	add	r3, pc, #52	@ (adr r3, 8004d40 <VCF_Process+0x58>)
 8004d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d0e:	f7fb fa37 	bl	8000180 <__adddf3>
 8004d12:	4602      	mov	r2, r0
 8004d14:	460b      	mov	r3, r1
 8004d16:	4610      	mov	r0, r2
 8004d18:	4619      	mov	r1, r3
 8004d1a:	f7fb fedf 	bl	8000adc <__aeabi_d2f>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	60fb      	str	r3, [r7, #12]
  return (uint32_t)temp;
 8004d22:	68f8      	ldr	r0, [r7, #12]
 8004d24:	f7fc f9fe 	bl	8001124 <__aeabi_f2uiz>
 8004d28:	4603      	mov	r3, r0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3710      	adds	r7, #16
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	bf00      	nop
 8004d34:	f3af 8000 	nop.w
 8004d38:	6cce1abc 	.word	0x6cce1abc
 8004d3c:	bfc60bbf 	.word	0xbfc60bbf
 8004d40:	95109ddd 	.word	0x95109ddd
 8004d44:	405ce4a1 	.word	0x405ce4a1

08004d48 <SCH_TASK_CreateTask>:
 *         otherwise returns STS_ERROR.
 */
status_t
SCH_TASK_CreateTask (SCH_TASK_HANDLE         *pHandle,
                     SCH_TaskPropertyTypedef *pTaskProperty)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b085      	sub	sp, #20
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
  status_t status
 8004d52:	2301      	movs	r3, #1
 8004d54:	73fb      	strb	r3, [r7, #15]
      = STS_ERROR; /**< @brief Initialize status to indicate error. */

  /**< @brief Ensure valid parameters are provided */
  if (pHandle && pTaskProperty)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d029      	beq.n	8004db0 <SCH_TASK_CreateTask+0x68>
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d026      	beq.n	8004db0 <SCH_TASK_CreateTask+0x68>
  {
    /**< @brief Check if there's room for more tasks */
    if (s_NumOfTaskScheduled < (MAX_TASK - 1))
 8004d62:	4b16      	ldr	r3, [pc, #88]	@ (8004dbc <SCH_TASK_CreateTask+0x74>)
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	2b12      	cmp	r3, #18
 8004d68:	d822      	bhi.n	8004db0 <SCH_TASK_CreateTask+0x68>
    {
      SCH_TaskContextTypedef *pTaskContext
          = &s_TaskContext[s_NumOfTaskScheduled];
 8004d6a:	4b14      	ldr	r3, [pc, #80]	@ (8004dbc <SCH_TASK_CreateTask+0x74>)
 8004d6c:	781b      	ldrb	r3, [r3, #0]
 8004d6e:	461a      	mov	r2, r3
      SCH_TaskContextTypedef *pTaskContext
 8004d70:	4613      	mov	r3, r2
 8004d72:	005b      	lsls	r3, r3, #1
 8004d74:	4413      	add	r3, r2
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	4a11      	ldr	r2, [pc, #68]	@ (8004dc0 <SCH_TASK_CreateTask+0x78>)
 8004d7a:	4413      	add	r3, r2
 8004d7c:	60bb      	str	r3, [r7, #8]

      /**< @brief Set task properties in task context */
      pTaskContext->pTaskProperty = pTaskProperty;
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	683a      	ldr	r2, [r7, #0]
 8004d82:	609a      	str	r2, [r3, #8]
      pTaskContext->taskFlag      = FALSE;
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	2200      	movs	r2, #0
 8004d88:	805a      	strh	r2, [r3, #2]
      pTaskContext->taskTick      = pTaskProperty->taskTick;
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	689a      	ldr	r2, [r3, #8]
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	605a      	str	r2, [r3, #4]
      pTaskContext->taskState     = TASK_StateReady;
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	2201      	movs	r2, #1
 8004d96:	701a      	strb	r2, [r3, #0]

      /**< @brief Provide task handle to caller */
      *pHandle = s_NumOfTaskScheduled;
 8004d98:	4b08      	ldr	r3, [pc, #32]	@ (8004dbc <SCH_TASK_CreateTask+0x74>)
 8004d9a:	781a      	ldrb	r2, [r3, #0]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	701a      	strb	r2, [r3, #0]

      /**< @brief Increment task count */
      s_NumOfTaskScheduled++;
 8004da0:	4b06      	ldr	r3, [pc, #24]	@ (8004dbc <SCH_TASK_CreateTask+0x74>)
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	3301      	adds	r3, #1
 8004da6:	b2da      	uxtb	r2, r3
 8004da8:	4b04      	ldr	r3, [pc, #16]	@ (8004dbc <SCH_TASK_CreateTask+0x74>)
 8004daa:	701a      	strb	r2, [r3, #0]

      /**< @brief Task registered successfully */
      status = STS_DONE;
 8004dac:	2300      	movs	r3, #0
 8004dae:	73fb      	strb	r3, [r7, #15]
    }
  }

  /**< @brief Return the status of the operation. */
  return status;
 8004db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3714      	adds	r7, #20
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bc80      	pop	{r7}
 8004dba:	4770      	bx	lr
 8004dbc:	200005cc 	.word	0x200005cc
 8004dc0:	200004dc 	.word	0x200004dc

08004dc4 <SCH_RunSystemTickTimer>:
 * and timer ticks, checks if their periods have elapsed, and updates their
 * flags accordingly. Additionally, it decrements software timers.
 */
void
SCH_RunSystemTickTimer (void)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b085      	sub	sp, #20
 8004dc8:	af00      	add	r7, sp, #0
  uint8_t                 timerIndex; /**< @brief Index variable for timers. */
  SCH_TimerContextTypedef
      *pTimerContext; /**< @brief Pointer to timer context. */

  /**< @brief Increment System Tick counter */
  s_SystemTick++;
 8004dca:	4b42      	ldr	r3, [pc, #264]	@ (8004ed4 <SCH_RunSystemTickTimer+0x110>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	3301      	adds	r3, #1
 8004dd0:	4a40      	ldr	r2, [pc, #256]	@ (8004ed4 <SCH_RunSystemTickTimer+0x110>)
 8004dd2:	6013      	str	r3, [r2, #0]

  /**< @brief Check Status of periodic tasks */
  for (taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	73fb      	strb	r3, [r7, #15]
 8004dd8:	e025      	b.n	8004e26 <SCH_RunSystemTickTimer+0x62>
  {
    /**< @brief Get Task Context */
    pTaskContext = &s_TaskContext[taskIndex];
 8004dda:	7bfa      	ldrb	r2, [r7, #15]
 8004ddc:	4613      	mov	r3, r2
 8004dde:	005b      	lsls	r3, r3, #1
 8004de0:	4413      	add	r3, r2
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	4a3c      	ldr	r2, [pc, #240]	@ (8004ed8 <SCH_RunSystemTickTimer+0x114>)
 8004de6:	4413      	add	r3, r2
 8004de8:	607b      	str	r3, [r7, #4]

    /**< @brief Check type and State of the task */
    if ((SCH_TASK_SYNC == pTaskContext->pTaskProperty->taskType)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d115      	bne.n	8004e20 <SCH_RunSystemTickTimer+0x5c>
        && (TASK_StateReady == pTaskContext->taskState))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d111      	bne.n	8004e20 <SCH_RunSystemTickTimer+0x5c>
    {
      /**< @brief Increment task tick */
      pTaskContext->taskTick += 1;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	1c5a      	adds	r2, r3, #1
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	605a      	str	r2, [r3, #4]

      /**< @brief Check if we reached task period */
      if (pTaskContext->taskTick >= pTaskContext->pTaskProperty->taskPeriodInMS)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	6892      	ldr	r2, [r2, #8]
 8004e0e:	8852      	ldrh	r2, [r2, #2]
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d305      	bcc.n	8004e20 <SCH_RunSystemTickTimer+0x5c>
      {
        /**< @brief Reset Task tick timer */
        pTaskContext->taskTick = RESET;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	605a      	str	r2, [r3, #4]
        /**< @brief Enable Flag */
        pTaskContext->taskFlag = TRUE;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	805a      	strh	r2, [r3, #2]
  for (taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 8004e20:	7bfb      	ldrb	r3, [r7, #15]
 8004e22:	3301      	adds	r3, #1
 8004e24:	73fb      	strb	r3, [r7, #15]
 8004e26:	4b2d      	ldr	r3, [pc, #180]	@ (8004edc <SCH_RunSystemTickTimer+0x118>)
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	7bfa      	ldrb	r2, [r7, #15]
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d3d4      	bcc.n	8004dda <SCH_RunSystemTickTimer+0x16>
      }
    }
  }

  /**< @brief Check Status of timers */
  for (timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 8004e30:	2300      	movs	r3, #0
 8004e32:	73bb      	strb	r3, [r7, #14]
 8004e34:	e02b      	b.n	8004e8e <SCH_RunSystemTickTimer+0xca>
  {
    /**< @brief Get Timer Context */
    pTimerContext = &s_TimerContext[timerIndex];
 8004e36:	7bba      	ldrb	r2, [r7, #14]
 8004e38:	4613      	mov	r3, r2
 8004e3a:	005b      	lsls	r3, r3, #1
 8004e3c:	4413      	add	r3, r2
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	4a27      	ldr	r2, [pc, #156]	@ (8004ee0 <SCH_RunSystemTickTimer+0x11c>)
 8004e42:	4413      	add	r3, r2
 8004e44:	60bb      	str	r3, [r7, #8]

    /**< @brief Check type and State of the timer */
    if (TIM_StateRun == pTimerContext->timerState)
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d11c      	bne.n	8004e88 <SCH_RunSystemTickTimer+0xc4>
    {
      /**< @brief Increment timer tick */
      pTimerContext->timerTick += 1;
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	1c5a      	adds	r2, r3, #1
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	605a      	str	r2, [r3, #4]

      /**< @brief Check if we reached timer period */
      if (pTimerContext->timerTick
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	685b      	ldr	r3, [r3, #4]
          >= pTimerContext->pTimerProperty->timerPeriodInMS)
 8004e5c:	68ba      	ldr	r2, [r7, #8]
 8004e5e:	6892      	ldr	r2, [r2, #8]
 8004e60:	8852      	ldrh	r2, [r2, #2]
      if (pTimerContext->timerTick
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d310      	bcc.n	8004e88 <SCH_RunSystemTickTimer+0xc4>
      {
        /**< @brief Enable Flag */
        pTimerContext->timerFlag = TRUE;
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	2201      	movs	r2, #1
 8004e6a:	805a      	strh	r2, [r3, #2]
        /**< @brief Reset tick timer */
        pTimerContext->timerTick = RESET;
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	605a      	str	r2, [r3, #4]
        /**< @brief Check timer type and change the state */
        pTimerContext->timerState
            = (SCH_TIMER_PERIODIC == pTimerContext->pTimerProperty->timerType)
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	781b      	ldrb	r3, [r3, #0]
                  ? TIM_StateRun
                  : TIM_StateStop;
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	bf0c      	ite	eq
 8004e7c:	2301      	moveq	r3, #1
 8004e7e:	2300      	movne	r3, #0
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	461a      	mov	r2, r3
            = (SCH_TIMER_PERIODIC == pTimerContext->pTimerProperty->timerType)
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	701a      	strb	r2, [r3, #0]
  for (timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 8004e88:	7bbb      	ldrb	r3, [r7, #14]
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	73bb      	strb	r3, [r7, #14]
 8004e8e:	4b15      	ldr	r3, [pc, #84]	@ (8004ee4 <SCH_RunSystemTickTimer+0x120>)
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	7bba      	ldrb	r2, [r7, #14]
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d3ce      	bcc.n	8004e36 <SCH_RunSystemTickTimer+0x72>
      }
    }
  }

  /**< @brief Update software timers */
  for (timerIndex = 0; timerIndex < SCH_TIM_LAST; timerIndex++)
 8004e98:	2300      	movs	r3, #0
 8004e9a:	73bb      	strb	r3, [r7, #14]
 8004e9c:	e010      	b.n	8004ec0 <SCH_RunSystemTickTimer+0xfc>
  {
    if (s_SoftTimers[timerIndex] > 0)
 8004e9e:	7bbb      	ldrb	r3, [r7, #14]
 8004ea0:	4a11      	ldr	r2, [pc, #68]	@ (8004ee8 <SCH_RunSystemTickTimer+0x124>)
 8004ea2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d007      	beq.n	8004eba <SCH_RunSystemTickTimer+0xf6>
    {
      s_SoftTimers[timerIndex]--;
 8004eaa:	7bbb      	ldrb	r3, [r7, #14]
 8004eac:	4a0e      	ldr	r2, [pc, #56]	@ (8004ee8 <SCH_RunSystemTickTimer+0x124>)
 8004eae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004eb2:	3a01      	subs	r2, #1
 8004eb4:	490c      	ldr	r1, [pc, #48]	@ (8004ee8 <SCH_RunSystemTickTimer+0x124>)
 8004eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (timerIndex = 0; timerIndex < SCH_TIM_LAST; timerIndex++)
 8004eba:	7bbb      	ldrb	r3, [r7, #14]
 8004ebc:	3301      	adds	r3, #1
 8004ebe:	73bb      	strb	r3, [r7, #14]
 8004ec0:	7bbb      	ldrb	r3, [r7, #14]
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d9eb      	bls.n	8004e9e <SCH_RunSystemTickTimer+0xda>
    }
  }
}
 8004ec6:	bf00      	nop
 8004ec8:	bf00      	nop
 8004eca:	3714      	adds	r7, #20
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bc80      	pop	{r7}
 8004ed0:	4770      	bx	lr
 8004ed2:	bf00      	nop
 8004ed4:	200006c4 	.word	0x200006c4
 8004ed8:	200004dc 	.word	0x200004dc
 8004edc:	200005cc 	.word	0x200005cc
 8004ee0:	200005d0 	.word	0x200005d0
 8004ee4:	200006c0 	.word	0x200006c0
 8004ee8:	200006c8 	.word	0x200006c8

08004eec <SCH_StartScheduler>:
 * the system tick timer or performs any necessary operations to begin the
 * scheduling of tasks and timers.
 */
void
SCH_StartScheduler (void)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	af00      	add	r7, sp, #0
  /**< @brief Scheduler by initiating the system tick timer */
  SCH_START;
 8004ef0:	f7fd fb14 	bl	800251c <BSP_SYSTICK_TimerStart>
}
 8004ef4:	bf00      	nop
 8004ef6:	bd80      	pop	{r7, pc}

08004ef8 <SCH_HandleScheduledTask>:
 * is set and it is in the ready state, its associated function is called.
 * Similarly, if a timer's flag is set, its callback function is invoked.
 */
void
SCH_HandleScheduledTask (void)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
  uint8_t                 timerIndex; /**< @brief Index variable for timers. */
  SCH_TimerContextTypedef
      *pTimerContext; /**< @brief Pointer to timer context. */

  /**< @brief Handle scheduled tasks */
  for (taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 8004efe:	2300      	movs	r3, #0
 8004f00:	73fb      	strb	r3, [r7, #15]
 8004f02:	e01e      	b.n	8004f42 <SCH_HandleScheduledTask+0x4a>
  {
    /**< @brief Get Task Context */
    pTaskContext = &s_TaskContext[taskIndex];
 8004f04:	7bfa      	ldrb	r2, [r7, #15]
 8004f06:	4613      	mov	r3, r2
 8004f08:	005b      	lsls	r3, r3, #1
 8004f0a:	4413      	add	r3, r2
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	4a23      	ldr	r2, [pc, #140]	@ (8004f9c <SCH_HandleScheduledTask+0xa4>)
 8004f10:	4413      	add	r3, r2
 8004f12:	607b      	str	r3, [r7, #4]

    /**< @brief Check type and State of the task */
    if ((TRUE == pTaskContext->taskFlag)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	885b      	ldrh	r3, [r3, #2]
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d10f      	bne.n	8004f3c <SCH_HandleScheduledTask+0x44>
        && (TASK_StateReady == pTaskContext->taskState))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d10b      	bne.n	8004f3c <SCH_HandleScheduledTask+0x44>
    {
      pTaskContext->taskFlag = FALSE;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	805a      	strh	r2, [r3, #2]
      /**< @brief Call task function if defined */
      if (pTaskContext->pTaskProperty->taskFunction)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d003      	beq.n	8004f3c <SCH_HandleScheduledTask+0x44>
      {
        pTaskContext->pTaskProperty->taskFunction();
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	4798      	blx	r3
  for (taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 8004f3c:	7bfb      	ldrb	r3, [r7, #15]
 8004f3e:	3301      	adds	r3, #1
 8004f40:	73fb      	strb	r3, [r7, #15]
 8004f42:	4b17      	ldr	r3, [pc, #92]	@ (8004fa0 <SCH_HandleScheduledTask+0xa8>)
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	7bfa      	ldrb	r2, [r7, #15]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d3db      	bcc.n	8004f04 <SCH_HandleScheduledTask+0xc>
      }
    }
  }

  /**< @brief Handle scheduled timers */
  for (timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	73bb      	strb	r3, [r7, #14]
 8004f50:	e01a      	b.n	8004f88 <SCH_HandleScheduledTask+0x90>
  {
    /**< @brief Get Timer Context */
    pTimerContext = &s_TimerContext[timerIndex];
 8004f52:	7bba      	ldrb	r2, [r7, #14]
 8004f54:	4613      	mov	r3, r2
 8004f56:	005b      	lsls	r3, r3, #1
 8004f58:	4413      	add	r3, r2
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	4a11      	ldr	r2, [pc, #68]	@ (8004fa4 <SCH_HandleScheduledTask+0xac>)
 8004f5e:	4413      	add	r3, r2
 8004f60:	60bb      	str	r3, [r7, #8]

    /**< @brief Check timer flag */
    if (TRUE == pTimerContext->timerFlag)
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	885b      	ldrh	r3, [r3, #2]
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d10b      	bne.n	8004f82 <SCH_HandleScheduledTask+0x8a>
    {
      pTimerContext->timerFlag = FALSE;
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	805a      	strh	r2, [r3, #2]
      /**< @brief Call timer callback function if defined */
      if (pTimerContext->pTimerProperty->timerCallbackFunction)
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d003      	beq.n	8004f82 <SCH_HandleScheduledTask+0x8a>
      {
        pTimerContext->pTimerProperty->timerCallbackFunction();
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	4798      	blx	r3
  for (timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 8004f82:	7bbb      	ldrb	r3, [r7, #14]
 8004f84:	3301      	adds	r3, #1
 8004f86:	73bb      	strb	r3, [r7, #14]
 8004f88:	4b07      	ldr	r3, [pc, #28]	@ (8004fa8 <SCH_HandleScheduledTask+0xb0>)
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	7bba      	ldrb	r2, [r7, #14]
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d3df      	bcc.n	8004f52 <SCH_HandleScheduledTask+0x5a>
      }
    }
  }
}
 8004f92:	bf00      	nop
 8004f94:	bf00      	nop
 8004f96:	3710      	adds	r7, #16
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}
 8004f9c:	200004dc 	.word	0x200004dc
 8004fa0:	200005cc 	.word	0x200005cc
 8004fa4:	200005d0 	.word	0x200005d0
 8004fa8:	200006c0 	.word	0x200006c0

08004fac <atof>:
 8004fac:	2100      	movs	r1, #0
 8004fae:	f000 beb3 	b.w	8005d18 <strtod>
	...

08004fb4 <malloc>:
 8004fb4:	4b02      	ldr	r3, [pc, #8]	@ (8004fc0 <malloc+0xc>)
 8004fb6:	4601      	mov	r1, r0
 8004fb8:	6818      	ldr	r0, [r3, #0]
 8004fba:	f000 b825 	b.w	8005008 <_malloc_r>
 8004fbe:	bf00      	nop
 8004fc0:	2000023c 	.word	0x2000023c

08004fc4 <sbrk_aligned>:
 8004fc4:	b570      	push	{r4, r5, r6, lr}
 8004fc6:	4e0f      	ldr	r6, [pc, #60]	@ (8005004 <sbrk_aligned+0x40>)
 8004fc8:	460c      	mov	r4, r1
 8004fca:	6831      	ldr	r1, [r6, #0]
 8004fcc:	4605      	mov	r5, r0
 8004fce:	b911      	cbnz	r1, 8004fd6 <sbrk_aligned+0x12>
 8004fd0:	f001 fc82 	bl	80068d8 <_sbrk_r>
 8004fd4:	6030      	str	r0, [r6, #0]
 8004fd6:	4621      	mov	r1, r4
 8004fd8:	4628      	mov	r0, r5
 8004fda:	f001 fc7d 	bl	80068d8 <_sbrk_r>
 8004fde:	1c43      	adds	r3, r0, #1
 8004fe0:	d103      	bne.n	8004fea <sbrk_aligned+0x26>
 8004fe2:	f04f 34ff 	mov.w	r4, #4294967295
 8004fe6:	4620      	mov	r0, r4
 8004fe8:	bd70      	pop	{r4, r5, r6, pc}
 8004fea:	1cc4      	adds	r4, r0, #3
 8004fec:	f024 0403 	bic.w	r4, r4, #3
 8004ff0:	42a0      	cmp	r0, r4
 8004ff2:	d0f8      	beq.n	8004fe6 <sbrk_aligned+0x22>
 8004ff4:	1a21      	subs	r1, r4, r0
 8004ff6:	4628      	mov	r0, r5
 8004ff8:	f001 fc6e 	bl	80068d8 <_sbrk_r>
 8004ffc:	3001      	adds	r0, #1
 8004ffe:	d1f2      	bne.n	8004fe6 <sbrk_aligned+0x22>
 8005000:	e7ef      	b.n	8004fe2 <sbrk_aligned+0x1e>
 8005002:	bf00      	nop
 8005004:	200006d0 	.word	0x200006d0

08005008 <_malloc_r>:
 8005008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800500c:	1ccd      	adds	r5, r1, #3
 800500e:	f025 0503 	bic.w	r5, r5, #3
 8005012:	3508      	adds	r5, #8
 8005014:	2d0c      	cmp	r5, #12
 8005016:	bf38      	it	cc
 8005018:	250c      	movcc	r5, #12
 800501a:	2d00      	cmp	r5, #0
 800501c:	4606      	mov	r6, r0
 800501e:	db01      	blt.n	8005024 <_malloc_r+0x1c>
 8005020:	42a9      	cmp	r1, r5
 8005022:	d904      	bls.n	800502e <_malloc_r+0x26>
 8005024:	230c      	movs	r3, #12
 8005026:	6033      	str	r3, [r6, #0]
 8005028:	2000      	movs	r0, #0
 800502a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800502e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005104 <_malloc_r+0xfc>
 8005032:	f000 f869 	bl	8005108 <__malloc_lock>
 8005036:	f8d8 3000 	ldr.w	r3, [r8]
 800503a:	461c      	mov	r4, r3
 800503c:	bb44      	cbnz	r4, 8005090 <_malloc_r+0x88>
 800503e:	4629      	mov	r1, r5
 8005040:	4630      	mov	r0, r6
 8005042:	f7ff ffbf 	bl	8004fc4 <sbrk_aligned>
 8005046:	1c43      	adds	r3, r0, #1
 8005048:	4604      	mov	r4, r0
 800504a:	d158      	bne.n	80050fe <_malloc_r+0xf6>
 800504c:	f8d8 4000 	ldr.w	r4, [r8]
 8005050:	4627      	mov	r7, r4
 8005052:	2f00      	cmp	r7, #0
 8005054:	d143      	bne.n	80050de <_malloc_r+0xd6>
 8005056:	2c00      	cmp	r4, #0
 8005058:	d04b      	beq.n	80050f2 <_malloc_r+0xea>
 800505a:	6823      	ldr	r3, [r4, #0]
 800505c:	4639      	mov	r1, r7
 800505e:	4630      	mov	r0, r6
 8005060:	eb04 0903 	add.w	r9, r4, r3
 8005064:	f001 fc38 	bl	80068d8 <_sbrk_r>
 8005068:	4581      	cmp	r9, r0
 800506a:	d142      	bne.n	80050f2 <_malloc_r+0xea>
 800506c:	6821      	ldr	r1, [r4, #0]
 800506e:	4630      	mov	r0, r6
 8005070:	1a6d      	subs	r5, r5, r1
 8005072:	4629      	mov	r1, r5
 8005074:	f7ff ffa6 	bl	8004fc4 <sbrk_aligned>
 8005078:	3001      	adds	r0, #1
 800507a:	d03a      	beq.n	80050f2 <_malloc_r+0xea>
 800507c:	6823      	ldr	r3, [r4, #0]
 800507e:	442b      	add	r3, r5
 8005080:	6023      	str	r3, [r4, #0]
 8005082:	f8d8 3000 	ldr.w	r3, [r8]
 8005086:	685a      	ldr	r2, [r3, #4]
 8005088:	bb62      	cbnz	r2, 80050e4 <_malloc_r+0xdc>
 800508a:	f8c8 7000 	str.w	r7, [r8]
 800508e:	e00f      	b.n	80050b0 <_malloc_r+0xa8>
 8005090:	6822      	ldr	r2, [r4, #0]
 8005092:	1b52      	subs	r2, r2, r5
 8005094:	d420      	bmi.n	80050d8 <_malloc_r+0xd0>
 8005096:	2a0b      	cmp	r2, #11
 8005098:	d917      	bls.n	80050ca <_malloc_r+0xc2>
 800509a:	1961      	adds	r1, r4, r5
 800509c:	42a3      	cmp	r3, r4
 800509e:	6025      	str	r5, [r4, #0]
 80050a0:	bf18      	it	ne
 80050a2:	6059      	strne	r1, [r3, #4]
 80050a4:	6863      	ldr	r3, [r4, #4]
 80050a6:	bf08      	it	eq
 80050a8:	f8c8 1000 	streq.w	r1, [r8]
 80050ac:	5162      	str	r2, [r4, r5]
 80050ae:	604b      	str	r3, [r1, #4]
 80050b0:	4630      	mov	r0, r6
 80050b2:	f000 f82f 	bl	8005114 <__malloc_unlock>
 80050b6:	f104 000b 	add.w	r0, r4, #11
 80050ba:	1d23      	adds	r3, r4, #4
 80050bc:	f020 0007 	bic.w	r0, r0, #7
 80050c0:	1ac2      	subs	r2, r0, r3
 80050c2:	bf1c      	itt	ne
 80050c4:	1a1b      	subne	r3, r3, r0
 80050c6:	50a3      	strne	r3, [r4, r2]
 80050c8:	e7af      	b.n	800502a <_malloc_r+0x22>
 80050ca:	6862      	ldr	r2, [r4, #4]
 80050cc:	42a3      	cmp	r3, r4
 80050ce:	bf0c      	ite	eq
 80050d0:	f8c8 2000 	streq.w	r2, [r8]
 80050d4:	605a      	strne	r2, [r3, #4]
 80050d6:	e7eb      	b.n	80050b0 <_malloc_r+0xa8>
 80050d8:	4623      	mov	r3, r4
 80050da:	6864      	ldr	r4, [r4, #4]
 80050dc:	e7ae      	b.n	800503c <_malloc_r+0x34>
 80050de:	463c      	mov	r4, r7
 80050e0:	687f      	ldr	r7, [r7, #4]
 80050e2:	e7b6      	b.n	8005052 <_malloc_r+0x4a>
 80050e4:	461a      	mov	r2, r3
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	42a3      	cmp	r3, r4
 80050ea:	d1fb      	bne.n	80050e4 <_malloc_r+0xdc>
 80050ec:	2300      	movs	r3, #0
 80050ee:	6053      	str	r3, [r2, #4]
 80050f0:	e7de      	b.n	80050b0 <_malloc_r+0xa8>
 80050f2:	230c      	movs	r3, #12
 80050f4:	4630      	mov	r0, r6
 80050f6:	6033      	str	r3, [r6, #0]
 80050f8:	f000 f80c 	bl	8005114 <__malloc_unlock>
 80050fc:	e794      	b.n	8005028 <_malloc_r+0x20>
 80050fe:	6005      	str	r5, [r0, #0]
 8005100:	e7d6      	b.n	80050b0 <_malloc_r+0xa8>
 8005102:	bf00      	nop
 8005104:	200006d4 	.word	0x200006d4

08005108 <__malloc_lock>:
 8005108:	4801      	ldr	r0, [pc, #4]	@ (8005110 <__malloc_lock+0x8>)
 800510a:	f001 bc32 	b.w	8006972 <__retarget_lock_acquire_recursive>
 800510e:	bf00      	nop
 8005110:	20000818 	.word	0x20000818

08005114 <__malloc_unlock>:
 8005114:	4801      	ldr	r0, [pc, #4]	@ (800511c <__malloc_unlock+0x8>)
 8005116:	f001 bc2d 	b.w	8006974 <__retarget_lock_release_recursive>
 800511a:	bf00      	nop
 800511c:	20000818 	.word	0x20000818

08005120 <sulp>:
 8005120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005124:	460f      	mov	r7, r1
 8005126:	4690      	mov	r8, r2
 8005128:	f003 f9a0 	bl	800846c <__ulp>
 800512c:	4604      	mov	r4, r0
 800512e:	460d      	mov	r5, r1
 8005130:	f1b8 0f00 	cmp.w	r8, #0
 8005134:	d011      	beq.n	800515a <sulp+0x3a>
 8005136:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800513a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800513e:	2b00      	cmp	r3, #0
 8005140:	dd0b      	ble.n	800515a <sulp+0x3a>
 8005142:	2400      	movs	r4, #0
 8005144:	051b      	lsls	r3, r3, #20
 8005146:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800514a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800514e:	4622      	mov	r2, r4
 8005150:	462b      	mov	r3, r5
 8005152:	f7fb f9cb 	bl	80004ec <__aeabi_dmul>
 8005156:	4604      	mov	r4, r0
 8005158:	460d      	mov	r5, r1
 800515a:	4620      	mov	r0, r4
 800515c:	4629      	mov	r1, r5
 800515e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005162:	0000      	movs	r0, r0
 8005164:	0000      	movs	r0, r0
	...

08005168 <_strtod_l>:
 8005168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800516c:	b09f      	sub	sp, #124	@ 0x7c
 800516e:	9217      	str	r2, [sp, #92]	@ 0x5c
 8005170:	2200      	movs	r2, #0
 8005172:	460c      	mov	r4, r1
 8005174:	921a      	str	r2, [sp, #104]	@ 0x68
 8005176:	f04f 0a00 	mov.w	sl, #0
 800517a:	f04f 0b00 	mov.w	fp, #0
 800517e:	460a      	mov	r2, r1
 8005180:	9005      	str	r0, [sp, #20]
 8005182:	9219      	str	r2, [sp, #100]	@ 0x64
 8005184:	7811      	ldrb	r1, [r2, #0]
 8005186:	292b      	cmp	r1, #43	@ 0x2b
 8005188:	d048      	beq.n	800521c <_strtod_l+0xb4>
 800518a:	d836      	bhi.n	80051fa <_strtod_l+0x92>
 800518c:	290d      	cmp	r1, #13
 800518e:	d830      	bhi.n	80051f2 <_strtod_l+0x8a>
 8005190:	2908      	cmp	r1, #8
 8005192:	d830      	bhi.n	80051f6 <_strtod_l+0x8e>
 8005194:	2900      	cmp	r1, #0
 8005196:	d039      	beq.n	800520c <_strtod_l+0xa4>
 8005198:	2200      	movs	r2, #0
 800519a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800519c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800519e:	782a      	ldrb	r2, [r5, #0]
 80051a0:	2a30      	cmp	r2, #48	@ 0x30
 80051a2:	f040 80b1 	bne.w	8005308 <_strtod_l+0x1a0>
 80051a6:	786a      	ldrb	r2, [r5, #1]
 80051a8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80051ac:	2a58      	cmp	r2, #88	@ 0x58
 80051ae:	d16c      	bne.n	800528a <_strtod_l+0x122>
 80051b0:	9302      	str	r3, [sp, #8]
 80051b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80051b4:	4a8e      	ldr	r2, [pc, #568]	@ (80053f0 <_strtod_l+0x288>)
 80051b6:	9301      	str	r3, [sp, #4]
 80051b8:	ab1a      	add	r3, sp, #104	@ 0x68
 80051ba:	9300      	str	r3, [sp, #0]
 80051bc:	9805      	ldr	r0, [sp, #20]
 80051be:	ab1b      	add	r3, sp, #108	@ 0x6c
 80051c0:	a919      	add	r1, sp, #100	@ 0x64
 80051c2:	f002 fafd 	bl	80077c0 <__gethex>
 80051c6:	f010 060f 	ands.w	r6, r0, #15
 80051ca:	4604      	mov	r4, r0
 80051cc:	d005      	beq.n	80051da <_strtod_l+0x72>
 80051ce:	2e06      	cmp	r6, #6
 80051d0:	d126      	bne.n	8005220 <_strtod_l+0xb8>
 80051d2:	2300      	movs	r3, #0
 80051d4:	3501      	adds	r5, #1
 80051d6:	9519      	str	r5, [sp, #100]	@ 0x64
 80051d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80051da:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80051dc:	2b00      	cmp	r3, #0
 80051de:	f040 8584 	bne.w	8005cea <_strtod_l+0xb82>
 80051e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80051e4:	b1bb      	cbz	r3, 8005216 <_strtod_l+0xae>
 80051e6:	4650      	mov	r0, sl
 80051e8:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 80051ec:	b01f      	add	sp, #124	@ 0x7c
 80051ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051f2:	2920      	cmp	r1, #32
 80051f4:	d1d0      	bne.n	8005198 <_strtod_l+0x30>
 80051f6:	3201      	adds	r2, #1
 80051f8:	e7c3      	b.n	8005182 <_strtod_l+0x1a>
 80051fa:	292d      	cmp	r1, #45	@ 0x2d
 80051fc:	d1cc      	bne.n	8005198 <_strtod_l+0x30>
 80051fe:	2101      	movs	r1, #1
 8005200:	910b      	str	r1, [sp, #44]	@ 0x2c
 8005202:	1c51      	adds	r1, r2, #1
 8005204:	9119      	str	r1, [sp, #100]	@ 0x64
 8005206:	7852      	ldrb	r2, [r2, #1]
 8005208:	2a00      	cmp	r2, #0
 800520a:	d1c7      	bne.n	800519c <_strtod_l+0x34>
 800520c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800520e:	9419      	str	r4, [sp, #100]	@ 0x64
 8005210:	2b00      	cmp	r3, #0
 8005212:	f040 8568 	bne.w	8005ce6 <_strtod_l+0xb7e>
 8005216:	4650      	mov	r0, sl
 8005218:	4659      	mov	r1, fp
 800521a:	e7e7      	b.n	80051ec <_strtod_l+0x84>
 800521c:	2100      	movs	r1, #0
 800521e:	e7ef      	b.n	8005200 <_strtod_l+0x98>
 8005220:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005222:	b13a      	cbz	r2, 8005234 <_strtod_l+0xcc>
 8005224:	2135      	movs	r1, #53	@ 0x35
 8005226:	a81c      	add	r0, sp, #112	@ 0x70
 8005228:	f003 fa10 	bl	800864c <__copybits>
 800522c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800522e:	9805      	ldr	r0, [sp, #20]
 8005230:	f002 fdea 	bl	8007e08 <_Bfree>
 8005234:	3e01      	subs	r6, #1
 8005236:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8005238:	2e04      	cmp	r6, #4
 800523a:	d806      	bhi.n	800524a <_strtod_l+0xe2>
 800523c:	e8df f006 	tbb	[pc, r6]
 8005240:	201d0314 	.word	0x201d0314
 8005244:	14          	.byte	0x14
 8005245:	00          	.byte	0x00
 8005246:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800524a:	05e1      	lsls	r1, r4, #23
 800524c:	bf48      	it	mi
 800524e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8005252:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005256:	0d1b      	lsrs	r3, r3, #20
 8005258:	051b      	lsls	r3, r3, #20
 800525a:	2b00      	cmp	r3, #0
 800525c:	d1bd      	bne.n	80051da <_strtod_l+0x72>
 800525e:	f001 fb5d 	bl	800691c <__errno>
 8005262:	2322      	movs	r3, #34	@ 0x22
 8005264:	6003      	str	r3, [r0, #0]
 8005266:	e7b8      	b.n	80051da <_strtod_l+0x72>
 8005268:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800526c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8005270:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005274:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005278:	e7e7      	b.n	800524a <_strtod_l+0xe2>
 800527a:	f8df b178 	ldr.w	fp, [pc, #376]	@ 80053f4 <_strtod_l+0x28c>
 800527e:	e7e4      	b.n	800524a <_strtod_l+0xe2>
 8005280:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8005284:	f04f 3aff 	mov.w	sl, #4294967295
 8005288:	e7df      	b.n	800524a <_strtod_l+0xe2>
 800528a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800528c:	1c5a      	adds	r2, r3, #1
 800528e:	9219      	str	r2, [sp, #100]	@ 0x64
 8005290:	785b      	ldrb	r3, [r3, #1]
 8005292:	2b30      	cmp	r3, #48	@ 0x30
 8005294:	d0f9      	beq.n	800528a <_strtod_l+0x122>
 8005296:	2b00      	cmp	r3, #0
 8005298:	d09f      	beq.n	80051da <_strtod_l+0x72>
 800529a:	2301      	movs	r3, #1
 800529c:	9309      	str	r3, [sp, #36]	@ 0x24
 800529e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80052a0:	220a      	movs	r2, #10
 80052a2:	930c      	str	r3, [sp, #48]	@ 0x30
 80052a4:	2300      	movs	r3, #0
 80052a6:	461f      	mov	r7, r3
 80052a8:	9308      	str	r3, [sp, #32]
 80052aa:	930a      	str	r3, [sp, #40]	@ 0x28
 80052ac:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80052ae:	7805      	ldrb	r5, [r0, #0]
 80052b0:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80052b4:	b2d9      	uxtb	r1, r3
 80052b6:	2909      	cmp	r1, #9
 80052b8:	d928      	bls.n	800530c <_strtod_l+0x1a4>
 80052ba:	2201      	movs	r2, #1
 80052bc:	494e      	ldr	r1, [pc, #312]	@ (80053f8 <_strtod_l+0x290>)
 80052be:	f001 fac0 	bl	8006842 <strncmp>
 80052c2:	2800      	cmp	r0, #0
 80052c4:	d032      	beq.n	800532c <_strtod_l+0x1c4>
 80052c6:	2000      	movs	r0, #0
 80052c8:	462a      	mov	r2, r5
 80052ca:	4681      	mov	r9, r0
 80052cc:	463d      	mov	r5, r7
 80052ce:	4603      	mov	r3, r0
 80052d0:	2a65      	cmp	r2, #101	@ 0x65
 80052d2:	d001      	beq.n	80052d8 <_strtod_l+0x170>
 80052d4:	2a45      	cmp	r2, #69	@ 0x45
 80052d6:	d114      	bne.n	8005302 <_strtod_l+0x19a>
 80052d8:	b91d      	cbnz	r5, 80052e2 <_strtod_l+0x17a>
 80052da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80052dc:	4302      	orrs	r2, r0
 80052de:	d095      	beq.n	800520c <_strtod_l+0xa4>
 80052e0:	2500      	movs	r5, #0
 80052e2:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80052e4:	1c62      	adds	r2, r4, #1
 80052e6:	9219      	str	r2, [sp, #100]	@ 0x64
 80052e8:	7862      	ldrb	r2, [r4, #1]
 80052ea:	2a2b      	cmp	r2, #43	@ 0x2b
 80052ec:	d077      	beq.n	80053de <_strtod_l+0x276>
 80052ee:	2a2d      	cmp	r2, #45	@ 0x2d
 80052f0:	d07b      	beq.n	80053ea <_strtod_l+0x282>
 80052f2:	f04f 0c00 	mov.w	ip, #0
 80052f6:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80052fa:	2909      	cmp	r1, #9
 80052fc:	f240 8082 	bls.w	8005404 <_strtod_l+0x29c>
 8005300:	9419      	str	r4, [sp, #100]	@ 0x64
 8005302:	f04f 0800 	mov.w	r8, #0
 8005306:	e0a2      	b.n	800544e <_strtod_l+0x2e6>
 8005308:	2300      	movs	r3, #0
 800530a:	e7c7      	b.n	800529c <_strtod_l+0x134>
 800530c:	2f08      	cmp	r7, #8
 800530e:	bfd5      	itete	le
 8005310:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8005312:	9908      	ldrgt	r1, [sp, #32]
 8005314:	fb02 3301 	mlale	r3, r2, r1, r3
 8005318:	fb02 3301 	mlagt	r3, r2, r1, r3
 800531c:	f100 0001 	add.w	r0, r0, #1
 8005320:	bfd4      	ite	le
 8005322:	930a      	strle	r3, [sp, #40]	@ 0x28
 8005324:	9308      	strgt	r3, [sp, #32]
 8005326:	3701      	adds	r7, #1
 8005328:	9019      	str	r0, [sp, #100]	@ 0x64
 800532a:	e7bf      	b.n	80052ac <_strtod_l+0x144>
 800532c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800532e:	1c5a      	adds	r2, r3, #1
 8005330:	9219      	str	r2, [sp, #100]	@ 0x64
 8005332:	785a      	ldrb	r2, [r3, #1]
 8005334:	b37f      	cbz	r7, 8005396 <_strtod_l+0x22e>
 8005336:	4681      	mov	r9, r0
 8005338:	463d      	mov	r5, r7
 800533a:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800533e:	2b09      	cmp	r3, #9
 8005340:	d912      	bls.n	8005368 <_strtod_l+0x200>
 8005342:	2301      	movs	r3, #1
 8005344:	e7c4      	b.n	80052d0 <_strtod_l+0x168>
 8005346:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005348:	3001      	adds	r0, #1
 800534a:	1c5a      	adds	r2, r3, #1
 800534c:	9219      	str	r2, [sp, #100]	@ 0x64
 800534e:	785a      	ldrb	r2, [r3, #1]
 8005350:	2a30      	cmp	r2, #48	@ 0x30
 8005352:	d0f8      	beq.n	8005346 <_strtod_l+0x1de>
 8005354:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8005358:	2b08      	cmp	r3, #8
 800535a:	f200 84cb 	bhi.w	8005cf4 <_strtod_l+0xb8c>
 800535e:	4681      	mov	r9, r0
 8005360:	2000      	movs	r0, #0
 8005362:	4605      	mov	r5, r0
 8005364:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005366:	930c      	str	r3, [sp, #48]	@ 0x30
 8005368:	3a30      	subs	r2, #48	@ 0x30
 800536a:	f100 0301 	add.w	r3, r0, #1
 800536e:	d02a      	beq.n	80053c6 <_strtod_l+0x25e>
 8005370:	4499      	add	r9, r3
 8005372:	210a      	movs	r1, #10
 8005374:	462b      	mov	r3, r5
 8005376:	eb00 0c05 	add.w	ip, r0, r5
 800537a:	4563      	cmp	r3, ip
 800537c:	d10d      	bne.n	800539a <_strtod_l+0x232>
 800537e:	1c69      	adds	r1, r5, #1
 8005380:	4401      	add	r1, r0
 8005382:	4428      	add	r0, r5
 8005384:	2808      	cmp	r0, #8
 8005386:	dc16      	bgt.n	80053b6 <_strtod_l+0x24e>
 8005388:	230a      	movs	r3, #10
 800538a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800538c:	fb03 2300 	mla	r3, r3, r0, r2
 8005390:	930a      	str	r3, [sp, #40]	@ 0x28
 8005392:	2300      	movs	r3, #0
 8005394:	e018      	b.n	80053c8 <_strtod_l+0x260>
 8005396:	4638      	mov	r0, r7
 8005398:	e7da      	b.n	8005350 <_strtod_l+0x1e8>
 800539a:	2b08      	cmp	r3, #8
 800539c:	f103 0301 	add.w	r3, r3, #1
 80053a0:	dc03      	bgt.n	80053aa <_strtod_l+0x242>
 80053a2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80053a4:	434e      	muls	r6, r1
 80053a6:	960a      	str	r6, [sp, #40]	@ 0x28
 80053a8:	e7e7      	b.n	800537a <_strtod_l+0x212>
 80053aa:	2b10      	cmp	r3, #16
 80053ac:	bfde      	ittt	le
 80053ae:	9e08      	ldrle	r6, [sp, #32]
 80053b0:	434e      	mulle	r6, r1
 80053b2:	9608      	strle	r6, [sp, #32]
 80053b4:	e7e1      	b.n	800537a <_strtod_l+0x212>
 80053b6:	280f      	cmp	r0, #15
 80053b8:	dceb      	bgt.n	8005392 <_strtod_l+0x22a>
 80053ba:	230a      	movs	r3, #10
 80053bc:	9808      	ldr	r0, [sp, #32]
 80053be:	fb03 2300 	mla	r3, r3, r0, r2
 80053c2:	9308      	str	r3, [sp, #32]
 80053c4:	e7e5      	b.n	8005392 <_strtod_l+0x22a>
 80053c6:	4629      	mov	r1, r5
 80053c8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80053ca:	460d      	mov	r5, r1
 80053cc:	1c50      	adds	r0, r2, #1
 80053ce:	9019      	str	r0, [sp, #100]	@ 0x64
 80053d0:	7852      	ldrb	r2, [r2, #1]
 80053d2:	4618      	mov	r0, r3
 80053d4:	e7b1      	b.n	800533a <_strtod_l+0x1d2>
 80053d6:	f04f 0900 	mov.w	r9, #0
 80053da:	2301      	movs	r3, #1
 80053dc:	e77d      	b.n	80052da <_strtod_l+0x172>
 80053de:	f04f 0c00 	mov.w	ip, #0
 80053e2:	1ca2      	adds	r2, r4, #2
 80053e4:	9219      	str	r2, [sp, #100]	@ 0x64
 80053e6:	78a2      	ldrb	r2, [r4, #2]
 80053e8:	e785      	b.n	80052f6 <_strtod_l+0x18e>
 80053ea:	f04f 0c01 	mov.w	ip, #1
 80053ee:	e7f8      	b.n	80053e2 <_strtod_l+0x27a>
 80053f0:	08009dac 	.word	0x08009dac
 80053f4:	7ff00000 	.word	0x7ff00000
 80053f8:	08009d94 	.word	0x08009d94
 80053fc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80053fe:	1c51      	adds	r1, r2, #1
 8005400:	9119      	str	r1, [sp, #100]	@ 0x64
 8005402:	7852      	ldrb	r2, [r2, #1]
 8005404:	2a30      	cmp	r2, #48	@ 0x30
 8005406:	d0f9      	beq.n	80053fc <_strtod_l+0x294>
 8005408:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800540c:	2908      	cmp	r1, #8
 800540e:	f63f af78 	bhi.w	8005302 <_strtod_l+0x19a>
 8005412:	f04f 080a 	mov.w	r8, #10
 8005416:	3a30      	subs	r2, #48	@ 0x30
 8005418:	920e      	str	r2, [sp, #56]	@ 0x38
 800541a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800541c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800541e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005420:	1c56      	adds	r6, r2, #1
 8005422:	9619      	str	r6, [sp, #100]	@ 0x64
 8005424:	7852      	ldrb	r2, [r2, #1]
 8005426:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800542a:	f1be 0f09 	cmp.w	lr, #9
 800542e:	d939      	bls.n	80054a4 <_strtod_l+0x33c>
 8005430:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005432:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8005436:	1a76      	subs	r6, r6, r1
 8005438:	2e08      	cmp	r6, #8
 800543a:	dc03      	bgt.n	8005444 <_strtod_l+0x2dc>
 800543c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800543e:	4588      	cmp	r8, r1
 8005440:	bfa8      	it	ge
 8005442:	4688      	movge	r8, r1
 8005444:	f1bc 0f00 	cmp.w	ip, #0
 8005448:	d001      	beq.n	800544e <_strtod_l+0x2e6>
 800544a:	f1c8 0800 	rsb	r8, r8, #0
 800544e:	2d00      	cmp	r5, #0
 8005450:	d14e      	bne.n	80054f0 <_strtod_l+0x388>
 8005452:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005454:	4308      	orrs	r0, r1
 8005456:	f47f aec0 	bne.w	80051da <_strtod_l+0x72>
 800545a:	2b00      	cmp	r3, #0
 800545c:	f47f aed6 	bne.w	800520c <_strtod_l+0xa4>
 8005460:	2a69      	cmp	r2, #105	@ 0x69
 8005462:	d028      	beq.n	80054b6 <_strtod_l+0x34e>
 8005464:	dc25      	bgt.n	80054b2 <_strtod_l+0x34a>
 8005466:	2a49      	cmp	r2, #73	@ 0x49
 8005468:	d025      	beq.n	80054b6 <_strtod_l+0x34e>
 800546a:	2a4e      	cmp	r2, #78	@ 0x4e
 800546c:	f47f aece 	bne.w	800520c <_strtod_l+0xa4>
 8005470:	499a      	ldr	r1, [pc, #616]	@ (80056dc <_strtod_l+0x574>)
 8005472:	a819      	add	r0, sp, #100	@ 0x64
 8005474:	f002 fbc6 	bl	8007c04 <__match>
 8005478:	2800      	cmp	r0, #0
 800547a:	f43f aec7 	beq.w	800520c <_strtod_l+0xa4>
 800547e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	2b28      	cmp	r3, #40	@ 0x28
 8005484:	d12e      	bne.n	80054e4 <_strtod_l+0x37c>
 8005486:	4996      	ldr	r1, [pc, #600]	@ (80056e0 <_strtod_l+0x578>)
 8005488:	aa1c      	add	r2, sp, #112	@ 0x70
 800548a:	a819      	add	r0, sp, #100	@ 0x64
 800548c:	f002 fbce 	bl	8007c2c <__hexnan>
 8005490:	2805      	cmp	r0, #5
 8005492:	d127      	bne.n	80054e4 <_strtod_l+0x37c>
 8005494:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005496:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800549a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800549e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80054a2:	e69a      	b.n	80051da <_strtod_l+0x72>
 80054a4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80054a6:	fb08 2101 	mla	r1, r8, r1, r2
 80054aa:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80054ae:	920e      	str	r2, [sp, #56]	@ 0x38
 80054b0:	e7b5      	b.n	800541e <_strtod_l+0x2b6>
 80054b2:	2a6e      	cmp	r2, #110	@ 0x6e
 80054b4:	e7da      	b.n	800546c <_strtod_l+0x304>
 80054b6:	498b      	ldr	r1, [pc, #556]	@ (80056e4 <_strtod_l+0x57c>)
 80054b8:	a819      	add	r0, sp, #100	@ 0x64
 80054ba:	f002 fba3 	bl	8007c04 <__match>
 80054be:	2800      	cmp	r0, #0
 80054c0:	f43f aea4 	beq.w	800520c <_strtod_l+0xa4>
 80054c4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80054c6:	4988      	ldr	r1, [pc, #544]	@ (80056e8 <_strtod_l+0x580>)
 80054c8:	3b01      	subs	r3, #1
 80054ca:	a819      	add	r0, sp, #100	@ 0x64
 80054cc:	9319      	str	r3, [sp, #100]	@ 0x64
 80054ce:	f002 fb99 	bl	8007c04 <__match>
 80054d2:	b910      	cbnz	r0, 80054da <_strtod_l+0x372>
 80054d4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80054d6:	3301      	adds	r3, #1
 80054d8:	9319      	str	r3, [sp, #100]	@ 0x64
 80054da:	f04f 0a00 	mov.w	sl, #0
 80054de:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 80056ec <_strtod_l+0x584>
 80054e2:	e67a      	b.n	80051da <_strtod_l+0x72>
 80054e4:	4882      	ldr	r0, [pc, #520]	@ (80056f0 <_strtod_l+0x588>)
 80054e6:	f001 fa63 	bl	80069b0 <nan>
 80054ea:	4682      	mov	sl, r0
 80054ec:	468b      	mov	fp, r1
 80054ee:	e674      	b.n	80051da <_strtod_l+0x72>
 80054f0:	eba8 0309 	sub.w	r3, r8, r9
 80054f4:	2f00      	cmp	r7, #0
 80054f6:	bf08      	it	eq
 80054f8:	462f      	moveq	r7, r5
 80054fa:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80054fc:	2d10      	cmp	r5, #16
 80054fe:	462c      	mov	r4, r5
 8005500:	9309      	str	r3, [sp, #36]	@ 0x24
 8005502:	bfa8      	it	ge
 8005504:	2410      	movge	r4, #16
 8005506:	f7fa ff77 	bl	80003f8 <__aeabi_ui2d>
 800550a:	2d09      	cmp	r5, #9
 800550c:	4682      	mov	sl, r0
 800550e:	468b      	mov	fp, r1
 8005510:	dc11      	bgt.n	8005536 <_strtod_l+0x3ce>
 8005512:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005514:	2b00      	cmp	r3, #0
 8005516:	f43f ae60 	beq.w	80051da <_strtod_l+0x72>
 800551a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800551c:	dd76      	ble.n	800560c <_strtod_l+0x4a4>
 800551e:	2b16      	cmp	r3, #22
 8005520:	dc5d      	bgt.n	80055de <_strtod_l+0x476>
 8005522:	4974      	ldr	r1, [pc, #464]	@ (80056f4 <_strtod_l+0x58c>)
 8005524:	4652      	mov	r2, sl
 8005526:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800552a:	465b      	mov	r3, fp
 800552c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005530:	f7fa ffdc 	bl	80004ec <__aeabi_dmul>
 8005534:	e7d9      	b.n	80054ea <_strtod_l+0x382>
 8005536:	4b6f      	ldr	r3, [pc, #444]	@ (80056f4 <_strtod_l+0x58c>)
 8005538:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800553c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8005540:	f7fa ffd4 	bl	80004ec <__aeabi_dmul>
 8005544:	4682      	mov	sl, r0
 8005546:	9808      	ldr	r0, [sp, #32]
 8005548:	468b      	mov	fp, r1
 800554a:	f7fa ff55 	bl	80003f8 <__aeabi_ui2d>
 800554e:	4602      	mov	r2, r0
 8005550:	460b      	mov	r3, r1
 8005552:	4650      	mov	r0, sl
 8005554:	4659      	mov	r1, fp
 8005556:	f7fa fe13 	bl	8000180 <__adddf3>
 800555a:	2d0f      	cmp	r5, #15
 800555c:	4682      	mov	sl, r0
 800555e:	468b      	mov	fp, r1
 8005560:	ddd7      	ble.n	8005512 <_strtod_l+0x3aa>
 8005562:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005564:	1b2c      	subs	r4, r5, r4
 8005566:	441c      	add	r4, r3
 8005568:	2c00      	cmp	r4, #0
 800556a:	f340 8096 	ble.w	800569a <_strtod_l+0x532>
 800556e:	f014 030f 	ands.w	r3, r4, #15
 8005572:	d00a      	beq.n	800558a <_strtod_l+0x422>
 8005574:	495f      	ldr	r1, [pc, #380]	@ (80056f4 <_strtod_l+0x58c>)
 8005576:	4652      	mov	r2, sl
 8005578:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800557c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005580:	465b      	mov	r3, fp
 8005582:	f7fa ffb3 	bl	80004ec <__aeabi_dmul>
 8005586:	4682      	mov	sl, r0
 8005588:	468b      	mov	fp, r1
 800558a:	f034 040f 	bics.w	r4, r4, #15
 800558e:	d073      	beq.n	8005678 <_strtod_l+0x510>
 8005590:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8005594:	dd48      	ble.n	8005628 <_strtod_l+0x4c0>
 8005596:	2400      	movs	r4, #0
 8005598:	46a0      	mov	r8, r4
 800559a:	46a1      	mov	r9, r4
 800559c:	940a      	str	r4, [sp, #40]	@ 0x28
 800559e:	2322      	movs	r3, #34	@ 0x22
 80055a0:	f04f 0a00 	mov.w	sl, #0
 80055a4:	9a05      	ldr	r2, [sp, #20]
 80055a6:	f8df b144 	ldr.w	fp, [pc, #324]	@ 80056ec <_strtod_l+0x584>
 80055aa:	6013      	str	r3, [r2, #0]
 80055ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	f43f ae13 	beq.w	80051da <_strtod_l+0x72>
 80055b4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80055b6:	9805      	ldr	r0, [sp, #20]
 80055b8:	f002 fc26 	bl	8007e08 <_Bfree>
 80055bc:	4649      	mov	r1, r9
 80055be:	9805      	ldr	r0, [sp, #20]
 80055c0:	f002 fc22 	bl	8007e08 <_Bfree>
 80055c4:	4641      	mov	r1, r8
 80055c6:	9805      	ldr	r0, [sp, #20]
 80055c8:	f002 fc1e 	bl	8007e08 <_Bfree>
 80055cc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80055ce:	9805      	ldr	r0, [sp, #20]
 80055d0:	f002 fc1a 	bl	8007e08 <_Bfree>
 80055d4:	4621      	mov	r1, r4
 80055d6:	9805      	ldr	r0, [sp, #20]
 80055d8:	f002 fc16 	bl	8007e08 <_Bfree>
 80055dc:	e5fd      	b.n	80051da <_strtod_l+0x72>
 80055de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80055e0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80055e4:	4293      	cmp	r3, r2
 80055e6:	dbbc      	blt.n	8005562 <_strtod_l+0x3fa>
 80055e8:	4c42      	ldr	r4, [pc, #264]	@ (80056f4 <_strtod_l+0x58c>)
 80055ea:	f1c5 050f 	rsb	r5, r5, #15
 80055ee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80055f2:	4652      	mov	r2, sl
 80055f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80055f8:	465b      	mov	r3, fp
 80055fa:	f7fa ff77 	bl	80004ec <__aeabi_dmul>
 80055fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005600:	1b5d      	subs	r5, r3, r5
 8005602:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005606:	e9d4 2300 	ldrd	r2, r3, [r4]
 800560a:	e791      	b.n	8005530 <_strtod_l+0x3c8>
 800560c:	3316      	adds	r3, #22
 800560e:	dba8      	blt.n	8005562 <_strtod_l+0x3fa>
 8005610:	4b38      	ldr	r3, [pc, #224]	@ (80056f4 <_strtod_l+0x58c>)
 8005612:	eba9 0808 	sub.w	r8, r9, r8
 8005616:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800561a:	4650      	mov	r0, sl
 800561c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8005620:	4659      	mov	r1, fp
 8005622:	f7fb f88d 	bl	8000740 <__aeabi_ddiv>
 8005626:	e760      	b.n	80054ea <_strtod_l+0x382>
 8005628:	4b33      	ldr	r3, [pc, #204]	@ (80056f8 <_strtod_l+0x590>)
 800562a:	4650      	mov	r0, sl
 800562c:	9308      	str	r3, [sp, #32]
 800562e:	2300      	movs	r3, #0
 8005630:	4659      	mov	r1, fp
 8005632:	461e      	mov	r6, r3
 8005634:	1124      	asrs	r4, r4, #4
 8005636:	2c01      	cmp	r4, #1
 8005638:	dc21      	bgt.n	800567e <_strtod_l+0x516>
 800563a:	b10b      	cbz	r3, 8005640 <_strtod_l+0x4d8>
 800563c:	4682      	mov	sl, r0
 800563e:	468b      	mov	fp, r1
 8005640:	492d      	ldr	r1, [pc, #180]	@ (80056f8 <_strtod_l+0x590>)
 8005642:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8005646:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800564a:	4652      	mov	r2, sl
 800564c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005650:	465b      	mov	r3, fp
 8005652:	f7fa ff4b 	bl	80004ec <__aeabi_dmul>
 8005656:	4b25      	ldr	r3, [pc, #148]	@ (80056ec <_strtod_l+0x584>)
 8005658:	460a      	mov	r2, r1
 800565a:	400b      	ands	r3, r1
 800565c:	4927      	ldr	r1, [pc, #156]	@ (80056fc <_strtod_l+0x594>)
 800565e:	4682      	mov	sl, r0
 8005660:	428b      	cmp	r3, r1
 8005662:	d898      	bhi.n	8005596 <_strtod_l+0x42e>
 8005664:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8005668:	428b      	cmp	r3, r1
 800566a:	bf86      	itte	hi
 800566c:	f04f 3aff 	movhi.w	sl, #4294967295
 8005670:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8005700 <_strtod_l+0x598>
 8005674:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8005678:	2300      	movs	r3, #0
 800567a:	9308      	str	r3, [sp, #32]
 800567c:	e07a      	b.n	8005774 <_strtod_l+0x60c>
 800567e:	07e2      	lsls	r2, r4, #31
 8005680:	d505      	bpl.n	800568e <_strtod_l+0x526>
 8005682:	9b08      	ldr	r3, [sp, #32]
 8005684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005688:	f7fa ff30 	bl	80004ec <__aeabi_dmul>
 800568c:	2301      	movs	r3, #1
 800568e:	9a08      	ldr	r2, [sp, #32]
 8005690:	3601      	adds	r6, #1
 8005692:	3208      	adds	r2, #8
 8005694:	1064      	asrs	r4, r4, #1
 8005696:	9208      	str	r2, [sp, #32]
 8005698:	e7cd      	b.n	8005636 <_strtod_l+0x4ce>
 800569a:	d0ed      	beq.n	8005678 <_strtod_l+0x510>
 800569c:	4264      	negs	r4, r4
 800569e:	f014 020f 	ands.w	r2, r4, #15
 80056a2:	d00a      	beq.n	80056ba <_strtod_l+0x552>
 80056a4:	4b13      	ldr	r3, [pc, #76]	@ (80056f4 <_strtod_l+0x58c>)
 80056a6:	4650      	mov	r0, sl
 80056a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80056ac:	4659      	mov	r1, fp
 80056ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b2:	f7fb f845 	bl	8000740 <__aeabi_ddiv>
 80056b6:	4682      	mov	sl, r0
 80056b8:	468b      	mov	fp, r1
 80056ba:	1124      	asrs	r4, r4, #4
 80056bc:	d0dc      	beq.n	8005678 <_strtod_l+0x510>
 80056be:	2c1f      	cmp	r4, #31
 80056c0:	dd20      	ble.n	8005704 <_strtod_l+0x59c>
 80056c2:	2400      	movs	r4, #0
 80056c4:	46a0      	mov	r8, r4
 80056c6:	46a1      	mov	r9, r4
 80056c8:	940a      	str	r4, [sp, #40]	@ 0x28
 80056ca:	2322      	movs	r3, #34	@ 0x22
 80056cc:	9a05      	ldr	r2, [sp, #20]
 80056ce:	f04f 0a00 	mov.w	sl, #0
 80056d2:	f04f 0b00 	mov.w	fp, #0
 80056d6:	6013      	str	r3, [r2, #0]
 80056d8:	e768      	b.n	80055ac <_strtod_l+0x444>
 80056da:	bf00      	nop
 80056dc:	08009df5 	.word	0x08009df5
 80056e0:	08009d98 	.word	0x08009d98
 80056e4:	08009ded 	.word	0x08009ded
 80056e8:	08009e27 	.word	0x08009e27
 80056ec:	7ff00000 	.word	0x7ff00000
 80056f0:	0800a1b5 	.word	0x0800a1b5
 80056f4:	08009fa0 	.word	0x08009fa0
 80056f8:	08009f78 	.word	0x08009f78
 80056fc:	7ca00000 	.word	0x7ca00000
 8005700:	7fefffff 	.word	0x7fefffff
 8005704:	f014 0310 	ands.w	r3, r4, #16
 8005708:	bf18      	it	ne
 800570a:	236a      	movne	r3, #106	@ 0x6a
 800570c:	4650      	mov	r0, sl
 800570e:	9308      	str	r3, [sp, #32]
 8005710:	4659      	mov	r1, fp
 8005712:	2300      	movs	r3, #0
 8005714:	4ea9      	ldr	r6, [pc, #676]	@ (80059bc <_strtod_l+0x854>)
 8005716:	07e2      	lsls	r2, r4, #31
 8005718:	d504      	bpl.n	8005724 <_strtod_l+0x5bc>
 800571a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800571e:	f7fa fee5 	bl	80004ec <__aeabi_dmul>
 8005722:	2301      	movs	r3, #1
 8005724:	1064      	asrs	r4, r4, #1
 8005726:	f106 0608 	add.w	r6, r6, #8
 800572a:	d1f4      	bne.n	8005716 <_strtod_l+0x5ae>
 800572c:	b10b      	cbz	r3, 8005732 <_strtod_l+0x5ca>
 800572e:	4682      	mov	sl, r0
 8005730:	468b      	mov	fp, r1
 8005732:	9b08      	ldr	r3, [sp, #32]
 8005734:	b1b3      	cbz	r3, 8005764 <_strtod_l+0x5fc>
 8005736:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800573a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800573e:	2b00      	cmp	r3, #0
 8005740:	4659      	mov	r1, fp
 8005742:	dd0f      	ble.n	8005764 <_strtod_l+0x5fc>
 8005744:	2b1f      	cmp	r3, #31
 8005746:	dd57      	ble.n	80057f8 <_strtod_l+0x690>
 8005748:	2b34      	cmp	r3, #52	@ 0x34
 800574a:	bfd8      	it	le
 800574c:	f04f 33ff 	movle.w	r3, #4294967295
 8005750:	f04f 0a00 	mov.w	sl, #0
 8005754:	bfcf      	iteee	gt
 8005756:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800575a:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800575e:	4093      	lslle	r3, r2
 8005760:	ea03 0b01 	andle.w	fp, r3, r1
 8005764:	2200      	movs	r2, #0
 8005766:	2300      	movs	r3, #0
 8005768:	4650      	mov	r0, sl
 800576a:	4659      	mov	r1, fp
 800576c:	f7fb f926 	bl	80009bc <__aeabi_dcmpeq>
 8005770:	2800      	cmp	r0, #0
 8005772:	d1a6      	bne.n	80056c2 <_strtod_l+0x55a>
 8005774:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005776:	463a      	mov	r2, r7
 8005778:	9300      	str	r3, [sp, #0]
 800577a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800577c:	462b      	mov	r3, r5
 800577e:	9805      	ldr	r0, [sp, #20]
 8005780:	f002 fbaa 	bl	8007ed8 <__s2b>
 8005784:	900a      	str	r0, [sp, #40]	@ 0x28
 8005786:	2800      	cmp	r0, #0
 8005788:	f43f af05 	beq.w	8005596 <_strtod_l+0x42e>
 800578c:	2400      	movs	r4, #0
 800578e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005790:	eba9 0308 	sub.w	r3, r9, r8
 8005794:	2a00      	cmp	r2, #0
 8005796:	bfa8      	it	ge
 8005798:	2300      	movge	r3, #0
 800579a:	46a0      	mov	r8, r4
 800579c:	9312      	str	r3, [sp, #72]	@ 0x48
 800579e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80057a2:	9316      	str	r3, [sp, #88]	@ 0x58
 80057a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80057a6:	9805      	ldr	r0, [sp, #20]
 80057a8:	6859      	ldr	r1, [r3, #4]
 80057aa:	f002 faed 	bl	8007d88 <_Balloc>
 80057ae:	4681      	mov	r9, r0
 80057b0:	2800      	cmp	r0, #0
 80057b2:	f43f aef4 	beq.w	800559e <_strtod_l+0x436>
 80057b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80057b8:	300c      	adds	r0, #12
 80057ba:	691a      	ldr	r2, [r3, #16]
 80057bc:	f103 010c 	add.w	r1, r3, #12
 80057c0:	3202      	adds	r2, #2
 80057c2:	0092      	lsls	r2, r2, #2
 80057c4:	f001 f8e5 	bl	8006992 <memcpy>
 80057c8:	ab1c      	add	r3, sp, #112	@ 0x70
 80057ca:	9301      	str	r3, [sp, #4]
 80057cc:	ab1b      	add	r3, sp, #108	@ 0x6c
 80057ce:	9300      	str	r3, [sp, #0]
 80057d0:	4652      	mov	r2, sl
 80057d2:	465b      	mov	r3, fp
 80057d4:	9805      	ldr	r0, [sp, #20]
 80057d6:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80057da:	f002 feaf 	bl	800853c <__d2b>
 80057de:	901a      	str	r0, [sp, #104]	@ 0x68
 80057e0:	2800      	cmp	r0, #0
 80057e2:	f43f aedc 	beq.w	800559e <_strtod_l+0x436>
 80057e6:	2101      	movs	r1, #1
 80057e8:	9805      	ldr	r0, [sp, #20]
 80057ea:	f002 fc0b 	bl	8008004 <__i2b>
 80057ee:	4680      	mov	r8, r0
 80057f0:	b948      	cbnz	r0, 8005806 <_strtod_l+0x69e>
 80057f2:	f04f 0800 	mov.w	r8, #0
 80057f6:	e6d2      	b.n	800559e <_strtod_l+0x436>
 80057f8:	f04f 32ff 	mov.w	r2, #4294967295
 80057fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005800:	ea03 0a0a 	and.w	sl, r3, sl
 8005804:	e7ae      	b.n	8005764 <_strtod_l+0x5fc>
 8005806:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8005808:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800580a:	2d00      	cmp	r5, #0
 800580c:	bfab      	itete	ge
 800580e:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8005810:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8005812:	18ef      	addge	r7, r5, r3
 8005814:	1b5e      	sublt	r6, r3, r5
 8005816:	9b08      	ldr	r3, [sp, #32]
 8005818:	bfa8      	it	ge
 800581a:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800581c:	eba5 0503 	sub.w	r5, r5, r3
 8005820:	4415      	add	r5, r2
 8005822:	4b67      	ldr	r3, [pc, #412]	@ (80059c0 <_strtod_l+0x858>)
 8005824:	f105 35ff 	add.w	r5, r5, #4294967295
 8005828:	bfb8      	it	lt
 800582a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800582c:	429d      	cmp	r5, r3
 800582e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8005832:	da50      	bge.n	80058d6 <_strtod_l+0x76e>
 8005834:	1b5b      	subs	r3, r3, r5
 8005836:	2b1f      	cmp	r3, #31
 8005838:	f04f 0101 	mov.w	r1, #1
 800583c:	eba2 0203 	sub.w	r2, r2, r3
 8005840:	dc3d      	bgt.n	80058be <_strtod_l+0x756>
 8005842:	fa01 f303 	lsl.w	r3, r1, r3
 8005846:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005848:	2300      	movs	r3, #0
 800584a:	9310      	str	r3, [sp, #64]	@ 0x40
 800584c:	18bd      	adds	r5, r7, r2
 800584e:	9b08      	ldr	r3, [sp, #32]
 8005850:	42af      	cmp	r7, r5
 8005852:	4416      	add	r6, r2
 8005854:	441e      	add	r6, r3
 8005856:	463b      	mov	r3, r7
 8005858:	bfa8      	it	ge
 800585a:	462b      	movge	r3, r5
 800585c:	42b3      	cmp	r3, r6
 800585e:	bfa8      	it	ge
 8005860:	4633      	movge	r3, r6
 8005862:	2b00      	cmp	r3, #0
 8005864:	bfc2      	ittt	gt
 8005866:	1aed      	subgt	r5, r5, r3
 8005868:	1af6      	subgt	r6, r6, r3
 800586a:	1aff      	subgt	r7, r7, r3
 800586c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800586e:	2b00      	cmp	r3, #0
 8005870:	dd16      	ble.n	80058a0 <_strtod_l+0x738>
 8005872:	4641      	mov	r1, r8
 8005874:	461a      	mov	r2, r3
 8005876:	9805      	ldr	r0, [sp, #20]
 8005878:	f002 fc82 	bl	8008180 <__pow5mult>
 800587c:	4680      	mov	r8, r0
 800587e:	2800      	cmp	r0, #0
 8005880:	d0b7      	beq.n	80057f2 <_strtod_l+0x68a>
 8005882:	4601      	mov	r1, r0
 8005884:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005886:	9805      	ldr	r0, [sp, #20]
 8005888:	f002 fbd2 	bl	8008030 <__multiply>
 800588c:	900e      	str	r0, [sp, #56]	@ 0x38
 800588e:	2800      	cmp	r0, #0
 8005890:	f43f ae85 	beq.w	800559e <_strtod_l+0x436>
 8005894:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005896:	9805      	ldr	r0, [sp, #20]
 8005898:	f002 fab6 	bl	8007e08 <_Bfree>
 800589c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800589e:	931a      	str	r3, [sp, #104]	@ 0x68
 80058a0:	2d00      	cmp	r5, #0
 80058a2:	dc1d      	bgt.n	80058e0 <_strtod_l+0x778>
 80058a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	dd23      	ble.n	80058f2 <_strtod_l+0x78a>
 80058aa:	4649      	mov	r1, r9
 80058ac:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80058ae:	9805      	ldr	r0, [sp, #20]
 80058b0:	f002 fc66 	bl	8008180 <__pow5mult>
 80058b4:	4681      	mov	r9, r0
 80058b6:	b9e0      	cbnz	r0, 80058f2 <_strtod_l+0x78a>
 80058b8:	f04f 0900 	mov.w	r9, #0
 80058bc:	e66f      	b.n	800559e <_strtod_l+0x436>
 80058be:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80058c2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80058c6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80058ca:	35e2      	adds	r5, #226	@ 0xe2
 80058cc:	fa01 f305 	lsl.w	r3, r1, r5
 80058d0:	9310      	str	r3, [sp, #64]	@ 0x40
 80058d2:	9113      	str	r1, [sp, #76]	@ 0x4c
 80058d4:	e7ba      	b.n	800584c <_strtod_l+0x6e4>
 80058d6:	2300      	movs	r3, #0
 80058d8:	9310      	str	r3, [sp, #64]	@ 0x40
 80058da:	2301      	movs	r3, #1
 80058dc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80058de:	e7b5      	b.n	800584c <_strtod_l+0x6e4>
 80058e0:	462a      	mov	r2, r5
 80058e2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80058e4:	9805      	ldr	r0, [sp, #20]
 80058e6:	f002 fca5 	bl	8008234 <__lshift>
 80058ea:	901a      	str	r0, [sp, #104]	@ 0x68
 80058ec:	2800      	cmp	r0, #0
 80058ee:	d1d9      	bne.n	80058a4 <_strtod_l+0x73c>
 80058f0:	e655      	b.n	800559e <_strtod_l+0x436>
 80058f2:	2e00      	cmp	r6, #0
 80058f4:	dd07      	ble.n	8005906 <_strtod_l+0x79e>
 80058f6:	4649      	mov	r1, r9
 80058f8:	4632      	mov	r2, r6
 80058fa:	9805      	ldr	r0, [sp, #20]
 80058fc:	f002 fc9a 	bl	8008234 <__lshift>
 8005900:	4681      	mov	r9, r0
 8005902:	2800      	cmp	r0, #0
 8005904:	d0d8      	beq.n	80058b8 <_strtod_l+0x750>
 8005906:	2f00      	cmp	r7, #0
 8005908:	dd08      	ble.n	800591c <_strtod_l+0x7b4>
 800590a:	4641      	mov	r1, r8
 800590c:	463a      	mov	r2, r7
 800590e:	9805      	ldr	r0, [sp, #20]
 8005910:	f002 fc90 	bl	8008234 <__lshift>
 8005914:	4680      	mov	r8, r0
 8005916:	2800      	cmp	r0, #0
 8005918:	f43f ae41 	beq.w	800559e <_strtod_l+0x436>
 800591c:	464a      	mov	r2, r9
 800591e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005920:	9805      	ldr	r0, [sp, #20]
 8005922:	f002 fd0f 	bl	8008344 <__mdiff>
 8005926:	4604      	mov	r4, r0
 8005928:	2800      	cmp	r0, #0
 800592a:	f43f ae38 	beq.w	800559e <_strtod_l+0x436>
 800592e:	68c3      	ldr	r3, [r0, #12]
 8005930:	4641      	mov	r1, r8
 8005932:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005934:	2300      	movs	r3, #0
 8005936:	60c3      	str	r3, [r0, #12]
 8005938:	f002 fce8 	bl	800830c <__mcmp>
 800593c:	2800      	cmp	r0, #0
 800593e:	da45      	bge.n	80059cc <_strtod_l+0x864>
 8005940:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005942:	ea53 030a 	orrs.w	r3, r3, sl
 8005946:	d16b      	bne.n	8005a20 <_strtod_l+0x8b8>
 8005948:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800594c:	2b00      	cmp	r3, #0
 800594e:	d167      	bne.n	8005a20 <_strtod_l+0x8b8>
 8005950:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005954:	0d1b      	lsrs	r3, r3, #20
 8005956:	051b      	lsls	r3, r3, #20
 8005958:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800595c:	d960      	bls.n	8005a20 <_strtod_l+0x8b8>
 800595e:	6963      	ldr	r3, [r4, #20]
 8005960:	b913      	cbnz	r3, 8005968 <_strtod_l+0x800>
 8005962:	6923      	ldr	r3, [r4, #16]
 8005964:	2b01      	cmp	r3, #1
 8005966:	dd5b      	ble.n	8005a20 <_strtod_l+0x8b8>
 8005968:	4621      	mov	r1, r4
 800596a:	2201      	movs	r2, #1
 800596c:	9805      	ldr	r0, [sp, #20]
 800596e:	f002 fc61 	bl	8008234 <__lshift>
 8005972:	4641      	mov	r1, r8
 8005974:	4604      	mov	r4, r0
 8005976:	f002 fcc9 	bl	800830c <__mcmp>
 800597a:	2800      	cmp	r0, #0
 800597c:	dd50      	ble.n	8005a20 <_strtod_l+0x8b8>
 800597e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005982:	9a08      	ldr	r2, [sp, #32]
 8005984:	0d1b      	lsrs	r3, r3, #20
 8005986:	051b      	lsls	r3, r3, #20
 8005988:	2a00      	cmp	r2, #0
 800598a:	d06a      	beq.n	8005a62 <_strtod_l+0x8fa>
 800598c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8005990:	d867      	bhi.n	8005a62 <_strtod_l+0x8fa>
 8005992:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8005996:	f67f ae98 	bls.w	80056ca <_strtod_l+0x562>
 800599a:	4650      	mov	r0, sl
 800599c:	4659      	mov	r1, fp
 800599e:	4b09      	ldr	r3, [pc, #36]	@ (80059c4 <_strtod_l+0x85c>)
 80059a0:	2200      	movs	r2, #0
 80059a2:	f7fa fda3 	bl	80004ec <__aeabi_dmul>
 80059a6:	4b08      	ldr	r3, [pc, #32]	@ (80059c8 <_strtod_l+0x860>)
 80059a8:	4682      	mov	sl, r0
 80059aa:	400b      	ands	r3, r1
 80059ac:	468b      	mov	fp, r1
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	f47f ae00 	bne.w	80055b4 <_strtod_l+0x44c>
 80059b4:	2322      	movs	r3, #34	@ 0x22
 80059b6:	9a05      	ldr	r2, [sp, #20]
 80059b8:	6013      	str	r3, [r2, #0]
 80059ba:	e5fb      	b.n	80055b4 <_strtod_l+0x44c>
 80059bc:	08009dc0 	.word	0x08009dc0
 80059c0:	fffffc02 	.word	0xfffffc02
 80059c4:	39500000 	.word	0x39500000
 80059c8:	7ff00000 	.word	0x7ff00000
 80059cc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80059d0:	d165      	bne.n	8005a9e <_strtod_l+0x936>
 80059d2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80059d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80059d8:	b35a      	cbz	r2, 8005a32 <_strtod_l+0x8ca>
 80059da:	4a99      	ldr	r2, [pc, #612]	@ (8005c40 <_strtod_l+0xad8>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d12b      	bne.n	8005a38 <_strtod_l+0x8d0>
 80059e0:	9b08      	ldr	r3, [sp, #32]
 80059e2:	4651      	mov	r1, sl
 80059e4:	b303      	cbz	r3, 8005a28 <_strtod_l+0x8c0>
 80059e6:	465a      	mov	r2, fp
 80059e8:	4b96      	ldr	r3, [pc, #600]	@ (8005c44 <_strtod_l+0xadc>)
 80059ea:	4013      	ands	r3, r2
 80059ec:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80059f0:	f04f 32ff 	mov.w	r2, #4294967295
 80059f4:	d81b      	bhi.n	8005a2e <_strtod_l+0x8c6>
 80059f6:	0d1b      	lsrs	r3, r3, #20
 80059f8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80059fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005a00:	4299      	cmp	r1, r3
 8005a02:	d119      	bne.n	8005a38 <_strtod_l+0x8d0>
 8005a04:	4b90      	ldr	r3, [pc, #576]	@ (8005c48 <_strtod_l+0xae0>)
 8005a06:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d102      	bne.n	8005a12 <_strtod_l+0x8aa>
 8005a0c:	3101      	adds	r1, #1
 8005a0e:	f43f adc6 	beq.w	800559e <_strtod_l+0x436>
 8005a12:	f04f 0a00 	mov.w	sl, #0
 8005a16:	4b8b      	ldr	r3, [pc, #556]	@ (8005c44 <_strtod_l+0xadc>)
 8005a18:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005a1a:	401a      	ands	r2, r3
 8005a1c:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8005a20:	9b08      	ldr	r3, [sp, #32]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d1b9      	bne.n	800599a <_strtod_l+0x832>
 8005a26:	e5c5      	b.n	80055b4 <_strtod_l+0x44c>
 8005a28:	f04f 33ff 	mov.w	r3, #4294967295
 8005a2c:	e7e8      	b.n	8005a00 <_strtod_l+0x898>
 8005a2e:	4613      	mov	r3, r2
 8005a30:	e7e6      	b.n	8005a00 <_strtod_l+0x898>
 8005a32:	ea53 030a 	orrs.w	r3, r3, sl
 8005a36:	d0a2      	beq.n	800597e <_strtod_l+0x816>
 8005a38:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005a3a:	b1db      	cbz	r3, 8005a74 <_strtod_l+0x90c>
 8005a3c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005a3e:	4213      	tst	r3, r2
 8005a40:	d0ee      	beq.n	8005a20 <_strtod_l+0x8b8>
 8005a42:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005a44:	4650      	mov	r0, sl
 8005a46:	4659      	mov	r1, fp
 8005a48:	9a08      	ldr	r2, [sp, #32]
 8005a4a:	b1bb      	cbz	r3, 8005a7c <_strtod_l+0x914>
 8005a4c:	f7ff fb68 	bl	8005120 <sulp>
 8005a50:	4602      	mov	r2, r0
 8005a52:	460b      	mov	r3, r1
 8005a54:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005a58:	f7fa fb92 	bl	8000180 <__adddf3>
 8005a5c:	4682      	mov	sl, r0
 8005a5e:	468b      	mov	fp, r1
 8005a60:	e7de      	b.n	8005a20 <_strtod_l+0x8b8>
 8005a62:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8005a66:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005a6a:	f04f 3aff 	mov.w	sl, #4294967295
 8005a6e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8005a72:	e7d5      	b.n	8005a20 <_strtod_l+0x8b8>
 8005a74:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005a76:	ea13 0f0a 	tst.w	r3, sl
 8005a7a:	e7e1      	b.n	8005a40 <_strtod_l+0x8d8>
 8005a7c:	f7ff fb50 	bl	8005120 <sulp>
 8005a80:	4602      	mov	r2, r0
 8005a82:	460b      	mov	r3, r1
 8005a84:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005a88:	f7fa fb78 	bl	800017c <__aeabi_dsub>
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	2300      	movs	r3, #0
 8005a90:	4682      	mov	sl, r0
 8005a92:	468b      	mov	fp, r1
 8005a94:	f7fa ff92 	bl	80009bc <__aeabi_dcmpeq>
 8005a98:	2800      	cmp	r0, #0
 8005a9a:	d0c1      	beq.n	8005a20 <_strtod_l+0x8b8>
 8005a9c:	e615      	b.n	80056ca <_strtod_l+0x562>
 8005a9e:	4641      	mov	r1, r8
 8005aa0:	4620      	mov	r0, r4
 8005aa2:	f002 fda3 	bl	80085ec <__ratio>
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005aac:	4606      	mov	r6, r0
 8005aae:	460f      	mov	r7, r1
 8005ab0:	f7fa ff98 	bl	80009e4 <__aeabi_dcmple>
 8005ab4:	2800      	cmp	r0, #0
 8005ab6:	d06d      	beq.n	8005b94 <_strtod_l+0xa2c>
 8005ab8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d178      	bne.n	8005bb0 <_strtod_l+0xa48>
 8005abe:	f1ba 0f00 	cmp.w	sl, #0
 8005ac2:	d156      	bne.n	8005b72 <_strtod_l+0xa0a>
 8005ac4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005ac6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d158      	bne.n	8005b80 <_strtod_l+0xa18>
 8005ace:	2200      	movs	r2, #0
 8005ad0:	4630      	mov	r0, r6
 8005ad2:	4639      	mov	r1, r7
 8005ad4:	4b5d      	ldr	r3, [pc, #372]	@ (8005c4c <_strtod_l+0xae4>)
 8005ad6:	f7fa ff7b 	bl	80009d0 <__aeabi_dcmplt>
 8005ada:	2800      	cmp	r0, #0
 8005adc:	d157      	bne.n	8005b8e <_strtod_l+0xa26>
 8005ade:	4630      	mov	r0, r6
 8005ae0:	4639      	mov	r1, r7
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	4b5a      	ldr	r3, [pc, #360]	@ (8005c50 <_strtod_l+0xae8>)
 8005ae6:	f7fa fd01 	bl	80004ec <__aeabi_dmul>
 8005aea:	4606      	mov	r6, r0
 8005aec:	460f      	mov	r7, r1
 8005aee:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8005af2:	9606      	str	r6, [sp, #24]
 8005af4:	9307      	str	r3, [sp, #28]
 8005af6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005afa:	4d52      	ldr	r5, [pc, #328]	@ (8005c44 <_strtod_l+0xadc>)
 8005afc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8005b00:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005b02:	401d      	ands	r5, r3
 8005b04:	4b53      	ldr	r3, [pc, #332]	@ (8005c54 <_strtod_l+0xaec>)
 8005b06:	429d      	cmp	r5, r3
 8005b08:	f040 80aa 	bne.w	8005c60 <_strtod_l+0xaf8>
 8005b0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005b0e:	4650      	mov	r0, sl
 8005b10:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8005b14:	4659      	mov	r1, fp
 8005b16:	f002 fca9 	bl	800846c <__ulp>
 8005b1a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005b1e:	f7fa fce5 	bl	80004ec <__aeabi_dmul>
 8005b22:	4652      	mov	r2, sl
 8005b24:	465b      	mov	r3, fp
 8005b26:	f7fa fb2b 	bl	8000180 <__adddf3>
 8005b2a:	460b      	mov	r3, r1
 8005b2c:	4945      	ldr	r1, [pc, #276]	@ (8005c44 <_strtod_l+0xadc>)
 8005b2e:	4a4a      	ldr	r2, [pc, #296]	@ (8005c58 <_strtod_l+0xaf0>)
 8005b30:	4019      	ands	r1, r3
 8005b32:	4291      	cmp	r1, r2
 8005b34:	4682      	mov	sl, r0
 8005b36:	d942      	bls.n	8005bbe <_strtod_l+0xa56>
 8005b38:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005b3a:	4b43      	ldr	r3, [pc, #268]	@ (8005c48 <_strtod_l+0xae0>)
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d103      	bne.n	8005b48 <_strtod_l+0x9e0>
 8005b40:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005b42:	3301      	adds	r3, #1
 8005b44:	f43f ad2b 	beq.w	800559e <_strtod_l+0x436>
 8005b48:	f04f 3aff 	mov.w	sl, #4294967295
 8005b4c:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8005c48 <_strtod_l+0xae0>
 8005b50:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005b52:	9805      	ldr	r0, [sp, #20]
 8005b54:	f002 f958 	bl	8007e08 <_Bfree>
 8005b58:	4649      	mov	r1, r9
 8005b5a:	9805      	ldr	r0, [sp, #20]
 8005b5c:	f002 f954 	bl	8007e08 <_Bfree>
 8005b60:	4641      	mov	r1, r8
 8005b62:	9805      	ldr	r0, [sp, #20]
 8005b64:	f002 f950 	bl	8007e08 <_Bfree>
 8005b68:	4621      	mov	r1, r4
 8005b6a:	9805      	ldr	r0, [sp, #20]
 8005b6c:	f002 f94c 	bl	8007e08 <_Bfree>
 8005b70:	e618      	b.n	80057a4 <_strtod_l+0x63c>
 8005b72:	f1ba 0f01 	cmp.w	sl, #1
 8005b76:	d103      	bne.n	8005b80 <_strtod_l+0xa18>
 8005b78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	f43f ada5 	beq.w	80056ca <_strtod_l+0x562>
 8005b80:	2200      	movs	r2, #0
 8005b82:	4b36      	ldr	r3, [pc, #216]	@ (8005c5c <_strtod_l+0xaf4>)
 8005b84:	2600      	movs	r6, #0
 8005b86:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005b8a:	4f30      	ldr	r7, [pc, #192]	@ (8005c4c <_strtod_l+0xae4>)
 8005b8c:	e7b3      	b.n	8005af6 <_strtod_l+0x98e>
 8005b8e:	2600      	movs	r6, #0
 8005b90:	4f2f      	ldr	r7, [pc, #188]	@ (8005c50 <_strtod_l+0xae8>)
 8005b92:	e7ac      	b.n	8005aee <_strtod_l+0x986>
 8005b94:	4630      	mov	r0, r6
 8005b96:	4639      	mov	r1, r7
 8005b98:	4b2d      	ldr	r3, [pc, #180]	@ (8005c50 <_strtod_l+0xae8>)
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f7fa fca6 	bl	80004ec <__aeabi_dmul>
 8005ba0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005ba2:	4606      	mov	r6, r0
 8005ba4:	460f      	mov	r7, r1
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d0a1      	beq.n	8005aee <_strtod_l+0x986>
 8005baa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8005bae:	e7a2      	b.n	8005af6 <_strtod_l+0x98e>
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	4b26      	ldr	r3, [pc, #152]	@ (8005c4c <_strtod_l+0xae4>)
 8005bb4:	4616      	mov	r6, r2
 8005bb6:	461f      	mov	r7, r3
 8005bb8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005bbc:	e79b      	b.n	8005af6 <_strtod_l+0x98e>
 8005bbe:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8005bc2:	9b08      	ldr	r3, [sp, #32]
 8005bc4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d1c1      	bne.n	8005b50 <_strtod_l+0x9e8>
 8005bcc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005bd0:	0d1b      	lsrs	r3, r3, #20
 8005bd2:	051b      	lsls	r3, r3, #20
 8005bd4:	429d      	cmp	r5, r3
 8005bd6:	d1bb      	bne.n	8005b50 <_strtod_l+0x9e8>
 8005bd8:	4630      	mov	r0, r6
 8005bda:	4639      	mov	r1, r7
 8005bdc:	f7fb fac2 	bl	8001164 <__aeabi_d2lz>
 8005be0:	f7fa fc56 	bl	8000490 <__aeabi_l2d>
 8005be4:	4602      	mov	r2, r0
 8005be6:	460b      	mov	r3, r1
 8005be8:	4630      	mov	r0, r6
 8005bea:	4639      	mov	r1, r7
 8005bec:	f7fa fac6 	bl	800017c <__aeabi_dsub>
 8005bf0:	460b      	mov	r3, r1
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8005bf8:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005bfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005bfe:	ea46 060a 	orr.w	r6, r6, sl
 8005c02:	431e      	orrs	r6, r3
 8005c04:	d069      	beq.n	8005cda <_strtod_l+0xb72>
 8005c06:	a30a      	add	r3, pc, #40	@ (adr r3, 8005c30 <_strtod_l+0xac8>)
 8005c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c0c:	f7fa fee0 	bl	80009d0 <__aeabi_dcmplt>
 8005c10:	2800      	cmp	r0, #0
 8005c12:	f47f accf 	bne.w	80055b4 <_strtod_l+0x44c>
 8005c16:	a308      	add	r3, pc, #32	@ (adr r3, 8005c38 <_strtod_l+0xad0>)
 8005c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005c20:	f7fa fef4 	bl	8000a0c <__aeabi_dcmpgt>
 8005c24:	2800      	cmp	r0, #0
 8005c26:	d093      	beq.n	8005b50 <_strtod_l+0x9e8>
 8005c28:	e4c4      	b.n	80055b4 <_strtod_l+0x44c>
 8005c2a:	bf00      	nop
 8005c2c:	f3af 8000 	nop.w
 8005c30:	94a03595 	.word	0x94a03595
 8005c34:	3fdfffff 	.word	0x3fdfffff
 8005c38:	35afe535 	.word	0x35afe535
 8005c3c:	3fe00000 	.word	0x3fe00000
 8005c40:	000fffff 	.word	0x000fffff
 8005c44:	7ff00000 	.word	0x7ff00000
 8005c48:	7fefffff 	.word	0x7fefffff
 8005c4c:	3ff00000 	.word	0x3ff00000
 8005c50:	3fe00000 	.word	0x3fe00000
 8005c54:	7fe00000 	.word	0x7fe00000
 8005c58:	7c9fffff 	.word	0x7c9fffff
 8005c5c:	bff00000 	.word	0xbff00000
 8005c60:	9b08      	ldr	r3, [sp, #32]
 8005c62:	b323      	cbz	r3, 8005cae <_strtod_l+0xb46>
 8005c64:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8005c68:	d821      	bhi.n	8005cae <_strtod_l+0xb46>
 8005c6a:	a327      	add	r3, pc, #156	@ (adr r3, 8005d08 <_strtod_l+0xba0>)
 8005c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c70:	4630      	mov	r0, r6
 8005c72:	4639      	mov	r1, r7
 8005c74:	f7fa feb6 	bl	80009e4 <__aeabi_dcmple>
 8005c78:	b1a0      	cbz	r0, 8005ca4 <_strtod_l+0xb3c>
 8005c7a:	4639      	mov	r1, r7
 8005c7c:	4630      	mov	r0, r6
 8005c7e:	f7fa ff0d 	bl	8000a9c <__aeabi_d2uiz>
 8005c82:	2801      	cmp	r0, #1
 8005c84:	bf38      	it	cc
 8005c86:	2001      	movcc	r0, #1
 8005c88:	f7fa fbb6 	bl	80003f8 <__aeabi_ui2d>
 8005c8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005c8e:	4606      	mov	r6, r0
 8005c90:	460f      	mov	r7, r1
 8005c92:	b9fb      	cbnz	r3, 8005cd4 <_strtod_l+0xb6c>
 8005c94:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005c98:	9014      	str	r0, [sp, #80]	@ 0x50
 8005c9a:	9315      	str	r3, [sp, #84]	@ 0x54
 8005c9c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8005ca0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8005ca4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005ca6:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8005caa:	1b5b      	subs	r3, r3, r5
 8005cac:	9311      	str	r3, [sp, #68]	@ 0x44
 8005cae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005cb2:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8005cb6:	f002 fbd9 	bl	800846c <__ulp>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	460b      	mov	r3, r1
 8005cbe:	4650      	mov	r0, sl
 8005cc0:	4659      	mov	r1, fp
 8005cc2:	f7fa fc13 	bl	80004ec <__aeabi_dmul>
 8005cc6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005cca:	f7fa fa59 	bl	8000180 <__adddf3>
 8005cce:	4682      	mov	sl, r0
 8005cd0:	468b      	mov	fp, r1
 8005cd2:	e776      	b.n	8005bc2 <_strtod_l+0xa5a>
 8005cd4:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8005cd8:	e7e0      	b.n	8005c9c <_strtod_l+0xb34>
 8005cda:	a30d      	add	r3, pc, #52	@ (adr r3, 8005d10 <_strtod_l+0xba8>)
 8005cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce0:	f7fa fe76 	bl	80009d0 <__aeabi_dcmplt>
 8005ce4:	e79e      	b.n	8005c24 <_strtod_l+0xabc>
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005cea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005cec:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8005cee:	6013      	str	r3, [r2, #0]
 8005cf0:	f7ff ba77 	b.w	80051e2 <_strtod_l+0x7a>
 8005cf4:	2a65      	cmp	r2, #101	@ 0x65
 8005cf6:	f43f ab6e 	beq.w	80053d6 <_strtod_l+0x26e>
 8005cfa:	2a45      	cmp	r2, #69	@ 0x45
 8005cfc:	f43f ab6b 	beq.w	80053d6 <_strtod_l+0x26e>
 8005d00:	2301      	movs	r3, #1
 8005d02:	f7ff bba6 	b.w	8005452 <_strtod_l+0x2ea>
 8005d06:	bf00      	nop
 8005d08:	ffc00000 	.word	0xffc00000
 8005d0c:	41dfffff 	.word	0x41dfffff
 8005d10:	94a03595 	.word	0x94a03595
 8005d14:	3fcfffff 	.word	0x3fcfffff

08005d18 <strtod>:
 8005d18:	460a      	mov	r2, r1
 8005d1a:	4601      	mov	r1, r0
 8005d1c:	4802      	ldr	r0, [pc, #8]	@ (8005d28 <strtod+0x10>)
 8005d1e:	4b03      	ldr	r3, [pc, #12]	@ (8005d2c <strtod+0x14>)
 8005d20:	6800      	ldr	r0, [r0, #0]
 8005d22:	f7ff ba21 	b.w	8005168 <_strtod_l>
 8005d26:	bf00      	nop
 8005d28:	2000023c 	.word	0x2000023c
 8005d2c:	200000d0 	.word	0x200000d0

08005d30 <__cvt>:
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d36:	461d      	mov	r5, r3
 8005d38:	bfbb      	ittet	lt
 8005d3a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8005d3e:	461d      	movlt	r5, r3
 8005d40:	2300      	movge	r3, #0
 8005d42:	232d      	movlt	r3, #45	@ 0x2d
 8005d44:	b088      	sub	sp, #32
 8005d46:	4614      	mov	r4, r2
 8005d48:	bfb8      	it	lt
 8005d4a:	4614      	movlt	r4, r2
 8005d4c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005d4e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8005d50:	7013      	strb	r3, [r2, #0]
 8005d52:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005d54:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8005d58:	f023 0820 	bic.w	r8, r3, #32
 8005d5c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005d60:	d005      	beq.n	8005d6e <__cvt+0x3e>
 8005d62:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005d66:	d100      	bne.n	8005d6a <__cvt+0x3a>
 8005d68:	3601      	adds	r6, #1
 8005d6a:	2302      	movs	r3, #2
 8005d6c:	e000      	b.n	8005d70 <__cvt+0x40>
 8005d6e:	2303      	movs	r3, #3
 8005d70:	aa07      	add	r2, sp, #28
 8005d72:	9204      	str	r2, [sp, #16]
 8005d74:	aa06      	add	r2, sp, #24
 8005d76:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005d7a:	e9cd 3600 	strd	r3, r6, [sp]
 8005d7e:	4622      	mov	r2, r4
 8005d80:	462b      	mov	r3, r5
 8005d82:	f000 fea5 	bl	8006ad0 <_dtoa_r>
 8005d86:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005d8a:	4607      	mov	r7, r0
 8005d8c:	d119      	bne.n	8005dc2 <__cvt+0x92>
 8005d8e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005d90:	07db      	lsls	r3, r3, #31
 8005d92:	d50e      	bpl.n	8005db2 <__cvt+0x82>
 8005d94:	eb00 0906 	add.w	r9, r0, r6
 8005d98:	2200      	movs	r2, #0
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	4620      	mov	r0, r4
 8005d9e:	4629      	mov	r1, r5
 8005da0:	f7fa fe0c 	bl	80009bc <__aeabi_dcmpeq>
 8005da4:	b108      	cbz	r0, 8005daa <__cvt+0x7a>
 8005da6:	f8cd 901c 	str.w	r9, [sp, #28]
 8005daa:	2230      	movs	r2, #48	@ 0x30
 8005dac:	9b07      	ldr	r3, [sp, #28]
 8005dae:	454b      	cmp	r3, r9
 8005db0:	d31e      	bcc.n	8005df0 <__cvt+0xc0>
 8005db2:	4638      	mov	r0, r7
 8005db4:	9b07      	ldr	r3, [sp, #28]
 8005db6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005db8:	1bdb      	subs	r3, r3, r7
 8005dba:	6013      	str	r3, [r2, #0]
 8005dbc:	b008      	add	sp, #32
 8005dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dc2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005dc6:	eb00 0906 	add.w	r9, r0, r6
 8005dca:	d1e5      	bne.n	8005d98 <__cvt+0x68>
 8005dcc:	7803      	ldrb	r3, [r0, #0]
 8005dce:	2b30      	cmp	r3, #48	@ 0x30
 8005dd0:	d10a      	bne.n	8005de8 <__cvt+0xb8>
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	4620      	mov	r0, r4
 8005dd8:	4629      	mov	r1, r5
 8005dda:	f7fa fdef 	bl	80009bc <__aeabi_dcmpeq>
 8005dde:	b918      	cbnz	r0, 8005de8 <__cvt+0xb8>
 8005de0:	f1c6 0601 	rsb	r6, r6, #1
 8005de4:	f8ca 6000 	str.w	r6, [sl]
 8005de8:	f8da 3000 	ldr.w	r3, [sl]
 8005dec:	4499      	add	r9, r3
 8005dee:	e7d3      	b.n	8005d98 <__cvt+0x68>
 8005df0:	1c59      	adds	r1, r3, #1
 8005df2:	9107      	str	r1, [sp, #28]
 8005df4:	701a      	strb	r2, [r3, #0]
 8005df6:	e7d9      	b.n	8005dac <__cvt+0x7c>

08005df8 <__exponent>:
 8005df8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005dfa:	2900      	cmp	r1, #0
 8005dfc:	bfb6      	itet	lt
 8005dfe:	232d      	movlt	r3, #45	@ 0x2d
 8005e00:	232b      	movge	r3, #43	@ 0x2b
 8005e02:	4249      	neglt	r1, r1
 8005e04:	2909      	cmp	r1, #9
 8005e06:	7002      	strb	r2, [r0, #0]
 8005e08:	7043      	strb	r3, [r0, #1]
 8005e0a:	dd29      	ble.n	8005e60 <__exponent+0x68>
 8005e0c:	f10d 0307 	add.w	r3, sp, #7
 8005e10:	461d      	mov	r5, r3
 8005e12:	270a      	movs	r7, #10
 8005e14:	fbb1 f6f7 	udiv	r6, r1, r7
 8005e18:	461a      	mov	r2, r3
 8005e1a:	fb07 1416 	mls	r4, r7, r6, r1
 8005e1e:	3430      	adds	r4, #48	@ 0x30
 8005e20:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005e24:	460c      	mov	r4, r1
 8005e26:	2c63      	cmp	r4, #99	@ 0x63
 8005e28:	4631      	mov	r1, r6
 8005e2a:	f103 33ff 	add.w	r3, r3, #4294967295
 8005e2e:	dcf1      	bgt.n	8005e14 <__exponent+0x1c>
 8005e30:	3130      	adds	r1, #48	@ 0x30
 8005e32:	1e94      	subs	r4, r2, #2
 8005e34:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005e38:	4623      	mov	r3, r4
 8005e3a:	1c41      	adds	r1, r0, #1
 8005e3c:	42ab      	cmp	r3, r5
 8005e3e:	d30a      	bcc.n	8005e56 <__exponent+0x5e>
 8005e40:	f10d 0309 	add.w	r3, sp, #9
 8005e44:	1a9b      	subs	r3, r3, r2
 8005e46:	42ac      	cmp	r4, r5
 8005e48:	bf88      	it	hi
 8005e4a:	2300      	movhi	r3, #0
 8005e4c:	3302      	adds	r3, #2
 8005e4e:	4403      	add	r3, r0
 8005e50:	1a18      	subs	r0, r3, r0
 8005e52:	b003      	add	sp, #12
 8005e54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e56:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005e5a:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005e5e:	e7ed      	b.n	8005e3c <__exponent+0x44>
 8005e60:	2330      	movs	r3, #48	@ 0x30
 8005e62:	3130      	adds	r1, #48	@ 0x30
 8005e64:	7083      	strb	r3, [r0, #2]
 8005e66:	70c1      	strb	r1, [r0, #3]
 8005e68:	1d03      	adds	r3, r0, #4
 8005e6a:	e7f1      	b.n	8005e50 <__exponent+0x58>

08005e6c <_printf_float>:
 8005e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e70:	b091      	sub	sp, #68	@ 0x44
 8005e72:	460c      	mov	r4, r1
 8005e74:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8005e78:	4616      	mov	r6, r2
 8005e7a:	461f      	mov	r7, r3
 8005e7c:	4605      	mov	r5, r0
 8005e7e:	f000 fcf3 	bl	8006868 <_localeconv_r>
 8005e82:	6803      	ldr	r3, [r0, #0]
 8005e84:	4618      	mov	r0, r3
 8005e86:	9308      	str	r3, [sp, #32]
 8005e88:	f7fa f96c 	bl	8000164 <strlen>
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	930e      	str	r3, [sp, #56]	@ 0x38
 8005e90:	f8d8 3000 	ldr.w	r3, [r8]
 8005e94:	9009      	str	r0, [sp, #36]	@ 0x24
 8005e96:	3307      	adds	r3, #7
 8005e98:	f023 0307 	bic.w	r3, r3, #7
 8005e9c:	f103 0208 	add.w	r2, r3, #8
 8005ea0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005ea4:	f8d4 b000 	ldr.w	fp, [r4]
 8005ea8:	f8c8 2000 	str.w	r2, [r8]
 8005eac:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005eb0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005eb4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005eb6:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005eba:	f04f 32ff 	mov.w	r2, #4294967295
 8005ebe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005ec2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005ec6:	4b9c      	ldr	r3, [pc, #624]	@ (8006138 <_printf_float+0x2cc>)
 8005ec8:	f7fa fdaa 	bl	8000a20 <__aeabi_dcmpun>
 8005ecc:	bb70      	cbnz	r0, 8005f2c <_printf_float+0xc0>
 8005ece:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005ed2:	f04f 32ff 	mov.w	r2, #4294967295
 8005ed6:	4b98      	ldr	r3, [pc, #608]	@ (8006138 <_printf_float+0x2cc>)
 8005ed8:	f7fa fd84 	bl	80009e4 <__aeabi_dcmple>
 8005edc:	bb30      	cbnz	r0, 8005f2c <_printf_float+0xc0>
 8005ede:	2200      	movs	r2, #0
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	4640      	mov	r0, r8
 8005ee4:	4649      	mov	r1, r9
 8005ee6:	f7fa fd73 	bl	80009d0 <__aeabi_dcmplt>
 8005eea:	b110      	cbz	r0, 8005ef2 <_printf_float+0x86>
 8005eec:	232d      	movs	r3, #45	@ 0x2d
 8005eee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ef2:	4a92      	ldr	r2, [pc, #584]	@ (800613c <_printf_float+0x2d0>)
 8005ef4:	4b92      	ldr	r3, [pc, #584]	@ (8006140 <_printf_float+0x2d4>)
 8005ef6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005efa:	bf94      	ite	ls
 8005efc:	4690      	movls	r8, r2
 8005efe:	4698      	movhi	r8, r3
 8005f00:	2303      	movs	r3, #3
 8005f02:	f04f 0900 	mov.w	r9, #0
 8005f06:	6123      	str	r3, [r4, #16]
 8005f08:	f02b 0304 	bic.w	r3, fp, #4
 8005f0c:	6023      	str	r3, [r4, #0]
 8005f0e:	4633      	mov	r3, r6
 8005f10:	4621      	mov	r1, r4
 8005f12:	4628      	mov	r0, r5
 8005f14:	9700      	str	r7, [sp, #0]
 8005f16:	aa0f      	add	r2, sp, #60	@ 0x3c
 8005f18:	f000 f9d4 	bl	80062c4 <_printf_common>
 8005f1c:	3001      	adds	r0, #1
 8005f1e:	f040 8090 	bne.w	8006042 <_printf_float+0x1d6>
 8005f22:	f04f 30ff 	mov.w	r0, #4294967295
 8005f26:	b011      	add	sp, #68	@ 0x44
 8005f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f2c:	4642      	mov	r2, r8
 8005f2e:	464b      	mov	r3, r9
 8005f30:	4640      	mov	r0, r8
 8005f32:	4649      	mov	r1, r9
 8005f34:	f7fa fd74 	bl	8000a20 <__aeabi_dcmpun>
 8005f38:	b148      	cbz	r0, 8005f4e <_printf_float+0xe2>
 8005f3a:	464b      	mov	r3, r9
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	bfb8      	it	lt
 8005f40:	232d      	movlt	r3, #45	@ 0x2d
 8005f42:	4a80      	ldr	r2, [pc, #512]	@ (8006144 <_printf_float+0x2d8>)
 8005f44:	bfb8      	it	lt
 8005f46:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005f4a:	4b7f      	ldr	r3, [pc, #508]	@ (8006148 <_printf_float+0x2dc>)
 8005f4c:	e7d3      	b.n	8005ef6 <_printf_float+0x8a>
 8005f4e:	6863      	ldr	r3, [r4, #4]
 8005f50:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8005f54:	1c5a      	adds	r2, r3, #1
 8005f56:	d13f      	bne.n	8005fd8 <_printf_float+0x16c>
 8005f58:	2306      	movs	r3, #6
 8005f5a:	6063      	str	r3, [r4, #4]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8005f62:	6023      	str	r3, [r4, #0]
 8005f64:	9206      	str	r2, [sp, #24]
 8005f66:	aa0e      	add	r2, sp, #56	@ 0x38
 8005f68:	e9cd a204 	strd	sl, r2, [sp, #16]
 8005f6c:	aa0d      	add	r2, sp, #52	@ 0x34
 8005f6e:	9203      	str	r2, [sp, #12]
 8005f70:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8005f74:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005f78:	6863      	ldr	r3, [r4, #4]
 8005f7a:	4642      	mov	r2, r8
 8005f7c:	9300      	str	r3, [sp, #0]
 8005f7e:	4628      	mov	r0, r5
 8005f80:	464b      	mov	r3, r9
 8005f82:	910a      	str	r1, [sp, #40]	@ 0x28
 8005f84:	f7ff fed4 	bl	8005d30 <__cvt>
 8005f88:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005f8a:	4680      	mov	r8, r0
 8005f8c:	2947      	cmp	r1, #71	@ 0x47
 8005f8e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005f90:	d128      	bne.n	8005fe4 <_printf_float+0x178>
 8005f92:	1cc8      	adds	r0, r1, #3
 8005f94:	db02      	blt.n	8005f9c <_printf_float+0x130>
 8005f96:	6863      	ldr	r3, [r4, #4]
 8005f98:	4299      	cmp	r1, r3
 8005f9a:	dd40      	ble.n	800601e <_printf_float+0x1b2>
 8005f9c:	f1aa 0a02 	sub.w	sl, sl, #2
 8005fa0:	fa5f fa8a 	uxtb.w	sl, sl
 8005fa4:	4652      	mov	r2, sl
 8005fa6:	3901      	subs	r1, #1
 8005fa8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005fac:	910d      	str	r1, [sp, #52]	@ 0x34
 8005fae:	f7ff ff23 	bl	8005df8 <__exponent>
 8005fb2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005fb4:	4681      	mov	r9, r0
 8005fb6:	1813      	adds	r3, r2, r0
 8005fb8:	2a01      	cmp	r2, #1
 8005fba:	6123      	str	r3, [r4, #16]
 8005fbc:	dc02      	bgt.n	8005fc4 <_printf_float+0x158>
 8005fbe:	6822      	ldr	r2, [r4, #0]
 8005fc0:	07d2      	lsls	r2, r2, #31
 8005fc2:	d501      	bpl.n	8005fc8 <_printf_float+0x15c>
 8005fc4:	3301      	adds	r3, #1
 8005fc6:	6123      	str	r3, [r4, #16]
 8005fc8:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d09e      	beq.n	8005f0e <_printf_float+0xa2>
 8005fd0:	232d      	movs	r3, #45	@ 0x2d
 8005fd2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005fd6:	e79a      	b.n	8005f0e <_printf_float+0xa2>
 8005fd8:	2947      	cmp	r1, #71	@ 0x47
 8005fda:	d1bf      	bne.n	8005f5c <_printf_float+0xf0>
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d1bd      	bne.n	8005f5c <_printf_float+0xf0>
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e7ba      	b.n	8005f5a <_printf_float+0xee>
 8005fe4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005fe8:	d9dc      	bls.n	8005fa4 <_printf_float+0x138>
 8005fea:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005fee:	d118      	bne.n	8006022 <_printf_float+0x1b6>
 8005ff0:	2900      	cmp	r1, #0
 8005ff2:	6863      	ldr	r3, [r4, #4]
 8005ff4:	dd0b      	ble.n	800600e <_printf_float+0x1a2>
 8005ff6:	6121      	str	r1, [r4, #16]
 8005ff8:	b913      	cbnz	r3, 8006000 <_printf_float+0x194>
 8005ffa:	6822      	ldr	r2, [r4, #0]
 8005ffc:	07d0      	lsls	r0, r2, #31
 8005ffe:	d502      	bpl.n	8006006 <_printf_float+0x19a>
 8006000:	3301      	adds	r3, #1
 8006002:	440b      	add	r3, r1
 8006004:	6123      	str	r3, [r4, #16]
 8006006:	f04f 0900 	mov.w	r9, #0
 800600a:	65a1      	str	r1, [r4, #88]	@ 0x58
 800600c:	e7dc      	b.n	8005fc8 <_printf_float+0x15c>
 800600e:	b913      	cbnz	r3, 8006016 <_printf_float+0x1aa>
 8006010:	6822      	ldr	r2, [r4, #0]
 8006012:	07d2      	lsls	r2, r2, #31
 8006014:	d501      	bpl.n	800601a <_printf_float+0x1ae>
 8006016:	3302      	adds	r3, #2
 8006018:	e7f4      	b.n	8006004 <_printf_float+0x198>
 800601a:	2301      	movs	r3, #1
 800601c:	e7f2      	b.n	8006004 <_printf_float+0x198>
 800601e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006022:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006024:	4299      	cmp	r1, r3
 8006026:	db05      	blt.n	8006034 <_printf_float+0x1c8>
 8006028:	6823      	ldr	r3, [r4, #0]
 800602a:	6121      	str	r1, [r4, #16]
 800602c:	07d8      	lsls	r0, r3, #31
 800602e:	d5ea      	bpl.n	8006006 <_printf_float+0x19a>
 8006030:	1c4b      	adds	r3, r1, #1
 8006032:	e7e7      	b.n	8006004 <_printf_float+0x198>
 8006034:	2900      	cmp	r1, #0
 8006036:	bfcc      	ite	gt
 8006038:	2201      	movgt	r2, #1
 800603a:	f1c1 0202 	rsble	r2, r1, #2
 800603e:	4413      	add	r3, r2
 8006040:	e7e0      	b.n	8006004 <_printf_float+0x198>
 8006042:	6823      	ldr	r3, [r4, #0]
 8006044:	055a      	lsls	r2, r3, #21
 8006046:	d407      	bmi.n	8006058 <_printf_float+0x1ec>
 8006048:	6923      	ldr	r3, [r4, #16]
 800604a:	4642      	mov	r2, r8
 800604c:	4631      	mov	r1, r6
 800604e:	4628      	mov	r0, r5
 8006050:	47b8      	blx	r7
 8006052:	3001      	adds	r0, #1
 8006054:	d12b      	bne.n	80060ae <_printf_float+0x242>
 8006056:	e764      	b.n	8005f22 <_printf_float+0xb6>
 8006058:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800605c:	f240 80dc 	bls.w	8006218 <_printf_float+0x3ac>
 8006060:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006064:	2200      	movs	r2, #0
 8006066:	2300      	movs	r3, #0
 8006068:	f7fa fca8 	bl	80009bc <__aeabi_dcmpeq>
 800606c:	2800      	cmp	r0, #0
 800606e:	d033      	beq.n	80060d8 <_printf_float+0x26c>
 8006070:	2301      	movs	r3, #1
 8006072:	4631      	mov	r1, r6
 8006074:	4628      	mov	r0, r5
 8006076:	4a35      	ldr	r2, [pc, #212]	@ (800614c <_printf_float+0x2e0>)
 8006078:	47b8      	blx	r7
 800607a:	3001      	adds	r0, #1
 800607c:	f43f af51 	beq.w	8005f22 <_printf_float+0xb6>
 8006080:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8006084:	4543      	cmp	r3, r8
 8006086:	db02      	blt.n	800608e <_printf_float+0x222>
 8006088:	6823      	ldr	r3, [r4, #0]
 800608a:	07d8      	lsls	r0, r3, #31
 800608c:	d50f      	bpl.n	80060ae <_printf_float+0x242>
 800608e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006092:	4631      	mov	r1, r6
 8006094:	4628      	mov	r0, r5
 8006096:	47b8      	blx	r7
 8006098:	3001      	adds	r0, #1
 800609a:	f43f af42 	beq.w	8005f22 <_printf_float+0xb6>
 800609e:	f04f 0900 	mov.w	r9, #0
 80060a2:	f108 38ff 	add.w	r8, r8, #4294967295
 80060a6:	f104 0a1a 	add.w	sl, r4, #26
 80060aa:	45c8      	cmp	r8, r9
 80060ac:	dc09      	bgt.n	80060c2 <_printf_float+0x256>
 80060ae:	6823      	ldr	r3, [r4, #0]
 80060b0:	079b      	lsls	r3, r3, #30
 80060b2:	f100 8102 	bmi.w	80062ba <_printf_float+0x44e>
 80060b6:	68e0      	ldr	r0, [r4, #12]
 80060b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80060ba:	4298      	cmp	r0, r3
 80060bc:	bfb8      	it	lt
 80060be:	4618      	movlt	r0, r3
 80060c0:	e731      	b.n	8005f26 <_printf_float+0xba>
 80060c2:	2301      	movs	r3, #1
 80060c4:	4652      	mov	r2, sl
 80060c6:	4631      	mov	r1, r6
 80060c8:	4628      	mov	r0, r5
 80060ca:	47b8      	blx	r7
 80060cc:	3001      	adds	r0, #1
 80060ce:	f43f af28 	beq.w	8005f22 <_printf_float+0xb6>
 80060d2:	f109 0901 	add.w	r9, r9, #1
 80060d6:	e7e8      	b.n	80060aa <_printf_float+0x23e>
 80060d8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80060da:	2b00      	cmp	r3, #0
 80060dc:	dc38      	bgt.n	8006150 <_printf_float+0x2e4>
 80060de:	2301      	movs	r3, #1
 80060e0:	4631      	mov	r1, r6
 80060e2:	4628      	mov	r0, r5
 80060e4:	4a19      	ldr	r2, [pc, #100]	@ (800614c <_printf_float+0x2e0>)
 80060e6:	47b8      	blx	r7
 80060e8:	3001      	adds	r0, #1
 80060ea:	f43f af1a 	beq.w	8005f22 <_printf_float+0xb6>
 80060ee:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80060f2:	ea59 0303 	orrs.w	r3, r9, r3
 80060f6:	d102      	bne.n	80060fe <_printf_float+0x292>
 80060f8:	6823      	ldr	r3, [r4, #0]
 80060fa:	07d9      	lsls	r1, r3, #31
 80060fc:	d5d7      	bpl.n	80060ae <_printf_float+0x242>
 80060fe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006102:	4631      	mov	r1, r6
 8006104:	4628      	mov	r0, r5
 8006106:	47b8      	blx	r7
 8006108:	3001      	adds	r0, #1
 800610a:	f43f af0a 	beq.w	8005f22 <_printf_float+0xb6>
 800610e:	f04f 0a00 	mov.w	sl, #0
 8006112:	f104 0b1a 	add.w	fp, r4, #26
 8006116:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006118:	425b      	negs	r3, r3
 800611a:	4553      	cmp	r3, sl
 800611c:	dc01      	bgt.n	8006122 <_printf_float+0x2b6>
 800611e:	464b      	mov	r3, r9
 8006120:	e793      	b.n	800604a <_printf_float+0x1de>
 8006122:	2301      	movs	r3, #1
 8006124:	465a      	mov	r2, fp
 8006126:	4631      	mov	r1, r6
 8006128:	4628      	mov	r0, r5
 800612a:	47b8      	blx	r7
 800612c:	3001      	adds	r0, #1
 800612e:	f43f aef8 	beq.w	8005f22 <_printf_float+0xb6>
 8006132:	f10a 0a01 	add.w	sl, sl, #1
 8006136:	e7ee      	b.n	8006116 <_printf_float+0x2aa>
 8006138:	7fefffff 	.word	0x7fefffff
 800613c:	08009de8 	.word	0x08009de8
 8006140:	08009dec 	.word	0x08009dec
 8006144:	08009df0 	.word	0x08009df0
 8006148:	08009df4 	.word	0x08009df4
 800614c:	08009df8 	.word	0x08009df8
 8006150:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006152:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006156:	4553      	cmp	r3, sl
 8006158:	bfa8      	it	ge
 800615a:	4653      	movge	r3, sl
 800615c:	2b00      	cmp	r3, #0
 800615e:	4699      	mov	r9, r3
 8006160:	dc36      	bgt.n	80061d0 <_printf_float+0x364>
 8006162:	f04f 0b00 	mov.w	fp, #0
 8006166:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800616a:	f104 021a 	add.w	r2, r4, #26
 800616e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006170:	930a      	str	r3, [sp, #40]	@ 0x28
 8006172:	eba3 0309 	sub.w	r3, r3, r9
 8006176:	455b      	cmp	r3, fp
 8006178:	dc31      	bgt.n	80061de <_printf_float+0x372>
 800617a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800617c:	459a      	cmp	sl, r3
 800617e:	dc3a      	bgt.n	80061f6 <_printf_float+0x38a>
 8006180:	6823      	ldr	r3, [r4, #0]
 8006182:	07da      	lsls	r2, r3, #31
 8006184:	d437      	bmi.n	80061f6 <_printf_float+0x38a>
 8006186:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006188:	ebaa 0903 	sub.w	r9, sl, r3
 800618c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800618e:	ebaa 0303 	sub.w	r3, sl, r3
 8006192:	4599      	cmp	r9, r3
 8006194:	bfa8      	it	ge
 8006196:	4699      	movge	r9, r3
 8006198:	f1b9 0f00 	cmp.w	r9, #0
 800619c:	dc33      	bgt.n	8006206 <_printf_float+0x39a>
 800619e:	f04f 0800 	mov.w	r8, #0
 80061a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80061a6:	f104 0b1a 	add.w	fp, r4, #26
 80061aa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80061ac:	ebaa 0303 	sub.w	r3, sl, r3
 80061b0:	eba3 0309 	sub.w	r3, r3, r9
 80061b4:	4543      	cmp	r3, r8
 80061b6:	f77f af7a 	ble.w	80060ae <_printf_float+0x242>
 80061ba:	2301      	movs	r3, #1
 80061bc:	465a      	mov	r2, fp
 80061be:	4631      	mov	r1, r6
 80061c0:	4628      	mov	r0, r5
 80061c2:	47b8      	blx	r7
 80061c4:	3001      	adds	r0, #1
 80061c6:	f43f aeac 	beq.w	8005f22 <_printf_float+0xb6>
 80061ca:	f108 0801 	add.w	r8, r8, #1
 80061ce:	e7ec      	b.n	80061aa <_printf_float+0x33e>
 80061d0:	4642      	mov	r2, r8
 80061d2:	4631      	mov	r1, r6
 80061d4:	4628      	mov	r0, r5
 80061d6:	47b8      	blx	r7
 80061d8:	3001      	adds	r0, #1
 80061da:	d1c2      	bne.n	8006162 <_printf_float+0x2f6>
 80061dc:	e6a1      	b.n	8005f22 <_printf_float+0xb6>
 80061de:	2301      	movs	r3, #1
 80061e0:	4631      	mov	r1, r6
 80061e2:	4628      	mov	r0, r5
 80061e4:	920a      	str	r2, [sp, #40]	@ 0x28
 80061e6:	47b8      	blx	r7
 80061e8:	3001      	adds	r0, #1
 80061ea:	f43f ae9a 	beq.w	8005f22 <_printf_float+0xb6>
 80061ee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80061f0:	f10b 0b01 	add.w	fp, fp, #1
 80061f4:	e7bb      	b.n	800616e <_printf_float+0x302>
 80061f6:	4631      	mov	r1, r6
 80061f8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80061fc:	4628      	mov	r0, r5
 80061fe:	47b8      	blx	r7
 8006200:	3001      	adds	r0, #1
 8006202:	d1c0      	bne.n	8006186 <_printf_float+0x31a>
 8006204:	e68d      	b.n	8005f22 <_printf_float+0xb6>
 8006206:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006208:	464b      	mov	r3, r9
 800620a:	4631      	mov	r1, r6
 800620c:	4628      	mov	r0, r5
 800620e:	4442      	add	r2, r8
 8006210:	47b8      	blx	r7
 8006212:	3001      	adds	r0, #1
 8006214:	d1c3      	bne.n	800619e <_printf_float+0x332>
 8006216:	e684      	b.n	8005f22 <_printf_float+0xb6>
 8006218:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800621c:	f1ba 0f01 	cmp.w	sl, #1
 8006220:	dc01      	bgt.n	8006226 <_printf_float+0x3ba>
 8006222:	07db      	lsls	r3, r3, #31
 8006224:	d536      	bpl.n	8006294 <_printf_float+0x428>
 8006226:	2301      	movs	r3, #1
 8006228:	4642      	mov	r2, r8
 800622a:	4631      	mov	r1, r6
 800622c:	4628      	mov	r0, r5
 800622e:	47b8      	blx	r7
 8006230:	3001      	adds	r0, #1
 8006232:	f43f ae76 	beq.w	8005f22 <_printf_float+0xb6>
 8006236:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800623a:	4631      	mov	r1, r6
 800623c:	4628      	mov	r0, r5
 800623e:	47b8      	blx	r7
 8006240:	3001      	adds	r0, #1
 8006242:	f43f ae6e 	beq.w	8005f22 <_printf_float+0xb6>
 8006246:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800624a:	2200      	movs	r2, #0
 800624c:	2300      	movs	r3, #0
 800624e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006252:	f7fa fbb3 	bl	80009bc <__aeabi_dcmpeq>
 8006256:	b9c0      	cbnz	r0, 800628a <_printf_float+0x41e>
 8006258:	4653      	mov	r3, sl
 800625a:	f108 0201 	add.w	r2, r8, #1
 800625e:	4631      	mov	r1, r6
 8006260:	4628      	mov	r0, r5
 8006262:	47b8      	blx	r7
 8006264:	3001      	adds	r0, #1
 8006266:	d10c      	bne.n	8006282 <_printf_float+0x416>
 8006268:	e65b      	b.n	8005f22 <_printf_float+0xb6>
 800626a:	2301      	movs	r3, #1
 800626c:	465a      	mov	r2, fp
 800626e:	4631      	mov	r1, r6
 8006270:	4628      	mov	r0, r5
 8006272:	47b8      	blx	r7
 8006274:	3001      	adds	r0, #1
 8006276:	f43f ae54 	beq.w	8005f22 <_printf_float+0xb6>
 800627a:	f108 0801 	add.w	r8, r8, #1
 800627e:	45d0      	cmp	r8, sl
 8006280:	dbf3      	blt.n	800626a <_printf_float+0x3fe>
 8006282:	464b      	mov	r3, r9
 8006284:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006288:	e6e0      	b.n	800604c <_printf_float+0x1e0>
 800628a:	f04f 0800 	mov.w	r8, #0
 800628e:	f104 0b1a 	add.w	fp, r4, #26
 8006292:	e7f4      	b.n	800627e <_printf_float+0x412>
 8006294:	2301      	movs	r3, #1
 8006296:	4642      	mov	r2, r8
 8006298:	e7e1      	b.n	800625e <_printf_float+0x3f2>
 800629a:	2301      	movs	r3, #1
 800629c:	464a      	mov	r2, r9
 800629e:	4631      	mov	r1, r6
 80062a0:	4628      	mov	r0, r5
 80062a2:	47b8      	blx	r7
 80062a4:	3001      	adds	r0, #1
 80062a6:	f43f ae3c 	beq.w	8005f22 <_printf_float+0xb6>
 80062aa:	f108 0801 	add.w	r8, r8, #1
 80062ae:	68e3      	ldr	r3, [r4, #12]
 80062b0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80062b2:	1a5b      	subs	r3, r3, r1
 80062b4:	4543      	cmp	r3, r8
 80062b6:	dcf0      	bgt.n	800629a <_printf_float+0x42e>
 80062b8:	e6fd      	b.n	80060b6 <_printf_float+0x24a>
 80062ba:	f04f 0800 	mov.w	r8, #0
 80062be:	f104 0919 	add.w	r9, r4, #25
 80062c2:	e7f4      	b.n	80062ae <_printf_float+0x442>

080062c4 <_printf_common>:
 80062c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062c8:	4616      	mov	r6, r2
 80062ca:	4698      	mov	r8, r3
 80062cc:	688a      	ldr	r2, [r1, #8]
 80062ce:	690b      	ldr	r3, [r1, #16]
 80062d0:	4607      	mov	r7, r0
 80062d2:	4293      	cmp	r3, r2
 80062d4:	bfb8      	it	lt
 80062d6:	4613      	movlt	r3, r2
 80062d8:	6033      	str	r3, [r6, #0]
 80062da:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80062de:	460c      	mov	r4, r1
 80062e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80062e4:	b10a      	cbz	r2, 80062ea <_printf_common+0x26>
 80062e6:	3301      	adds	r3, #1
 80062e8:	6033      	str	r3, [r6, #0]
 80062ea:	6823      	ldr	r3, [r4, #0]
 80062ec:	0699      	lsls	r1, r3, #26
 80062ee:	bf42      	ittt	mi
 80062f0:	6833      	ldrmi	r3, [r6, #0]
 80062f2:	3302      	addmi	r3, #2
 80062f4:	6033      	strmi	r3, [r6, #0]
 80062f6:	6825      	ldr	r5, [r4, #0]
 80062f8:	f015 0506 	ands.w	r5, r5, #6
 80062fc:	d106      	bne.n	800630c <_printf_common+0x48>
 80062fe:	f104 0a19 	add.w	sl, r4, #25
 8006302:	68e3      	ldr	r3, [r4, #12]
 8006304:	6832      	ldr	r2, [r6, #0]
 8006306:	1a9b      	subs	r3, r3, r2
 8006308:	42ab      	cmp	r3, r5
 800630a:	dc2b      	bgt.n	8006364 <_printf_common+0xa0>
 800630c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006310:	6822      	ldr	r2, [r4, #0]
 8006312:	3b00      	subs	r3, #0
 8006314:	bf18      	it	ne
 8006316:	2301      	movne	r3, #1
 8006318:	0692      	lsls	r2, r2, #26
 800631a:	d430      	bmi.n	800637e <_printf_common+0xba>
 800631c:	4641      	mov	r1, r8
 800631e:	4638      	mov	r0, r7
 8006320:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006324:	47c8      	blx	r9
 8006326:	3001      	adds	r0, #1
 8006328:	d023      	beq.n	8006372 <_printf_common+0xae>
 800632a:	6823      	ldr	r3, [r4, #0]
 800632c:	6922      	ldr	r2, [r4, #16]
 800632e:	f003 0306 	and.w	r3, r3, #6
 8006332:	2b04      	cmp	r3, #4
 8006334:	bf14      	ite	ne
 8006336:	2500      	movne	r5, #0
 8006338:	6833      	ldreq	r3, [r6, #0]
 800633a:	f04f 0600 	mov.w	r6, #0
 800633e:	bf08      	it	eq
 8006340:	68e5      	ldreq	r5, [r4, #12]
 8006342:	f104 041a 	add.w	r4, r4, #26
 8006346:	bf08      	it	eq
 8006348:	1aed      	subeq	r5, r5, r3
 800634a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800634e:	bf08      	it	eq
 8006350:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006354:	4293      	cmp	r3, r2
 8006356:	bfc4      	itt	gt
 8006358:	1a9b      	subgt	r3, r3, r2
 800635a:	18ed      	addgt	r5, r5, r3
 800635c:	42b5      	cmp	r5, r6
 800635e:	d11a      	bne.n	8006396 <_printf_common+0xd2>
 8006360:	2000      	movs	r0, #0
 8006362:	e008      	b.n	8006376 <_printf_common+0xb2>
 8006364:	2301      	movs	r3, #1
 8006366:	4652      	mov	r2, sl
 8006368:	4641      	mov	r1, r8
 800636a:	4638      	mov	r0, r7
 800636c:	47c8      	blx	r9
 800636e:	3001      	adds	r0, #1
 8006370:	d103      	bne.n	800637a <_printf_common+0xb6>
 8006372:	f04f 30ff 	mov.w	r0, #4294967295
 8006376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800637a:	3501      	adds	r5, #1
 800637c:	e7c1      	b.n	8006302 <_printf_common+0x3e>
 800637e:	2030      	movs	r0, #48	@ 0x30
 8006380:	18e1      	adds	r1, r4, r3
 8006382:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006386:	1c5a      	adds	r2, r3, #1
 8006388:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800638c:	4422      	add	r2, r4
 800638e:	3302      	adds	r3, #2
 8006390:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006394:	e7c2      	b.n	800631c <_printf_common+0x58>
 8006396:	2301      	movs	r3, #1
 8006398:	4622      	mov	r2, r4
 800639a:	4641      	mov	r1, r8
 800639c:	4638      	mov	r0, r7
 800639e:	47c8      	blx	r9
 80063a0:	3001      	adds	r0, #1
 80063a2:	d0e6      	beq.n	8006372 <_printf_common+0xae>
 80063a4:	3601      	adds	r6, #1
 80063a6:	e7d9      	b.n	800635c <_printf_common+0x98>

080063a8 <_printf_i>:
 80063a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063ac:	7e0f      	ldrb	r7, [r1, #24]
 80063ae:	4691      	mov	r9, r2
 80063b0:	2f78      	cmp	r7, #120	@ 0x78
 80063b2:	4680      	mov	r8, r0
 80063b4:	460c      	mov	r4, r1
 80063b6:	469a      	mov	sl, r3
 80063b8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80063ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80063be:	d807      	bhi.n	80063d0 <_printf_i+0x28>
 80063c0:	2f62      	cmp	r7, #98	@ 0x62
 80063c2:	d80a      	bhi.n	80063da <_printf_i+0x32>
 80063c4:	2f00      	cmp	r7, #0
 80063c6:	f000 80d3 	beq.w	8006570 <_printf_i+0x1c8>
 80063ca:	2f58      	cmp	r7, #88	@ 0x58
 80063cc:	f000 80ba 	beq.w	8006544 <_printf_i+0x19c>
 80063d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80063d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80063d8:	e03a      	b.n	8006450 <_printf_i+0xa8>
 80063da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80063de:	2b15      	cmp	r3, #21
 80063e0:	d8f6      	bhi.n	80063d0 <_printf_i+0x28>
 80063e2:	a101      	add	r1, pc, #4	@ (adr r1, 80063e8 <_printf_i+0x40>)
 80063e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80063e8:	08006441 	.word	0x08006441
 80063ec:	08006455 	.word	0x08006455
 80063f0:	080063d1 	.word	0x080063d1
 80063f4:	080063d1 	.word	0x080063d1
 80063f8:	080063d1 	.word	0x080063d1
 80063fc:	080063d1 	.word	0x080063d1
 8006400:	08006455 	.word	0x08006455
 8006404:	080063d1 	.word	0x080063d1
 8006408:	080063d1 	.word	0x080063d1
 800640c:	080063d1 	.word	0x080063d1
 8006410:	080063d1 	.word	0x080063d1
 8006414:	08006557 	.word	0x08006557
 8006418:	0800647f 	.word	0x0800647f
 800641c:	08006511 	.word	0x08006511
 8006420:	080063d1 	.word	0x080063d1
 8006424:	080063d1 	.word	0x080063d1
 8006428:	08006579 	.word	0x08006579
 800642c:	080063d1 	.word	0x080063d1
 8006430:	0800647f 	.word	0x0800647f
 8006434:	080063d1 	.word	0x080063d1
 8006438:	080063d1 	.word	0x080063d1
 800643c:	08006519 	.word	0x08006519
 8006440:	6833      	ldr	r3, [r6, #0]
 8006442:	1d1a      	adds	r2, r3, #4
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	6032      	str	r2, [r6, #0]
 8006448:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800644c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006450:	2301      	movs	r3, #1
 8006452:	e09e      	b.n	8006592 <_printf_i+0x1ea>
 8006454:	6833      	ldr	r3, [r6, #0]
 8006456:	6820      	ldr	r0, [r4, #0]
 8006458:	1d19      	adds	r1, r3, #4
 800645a:	6031      	str	r1, [r6, #0]
 800645c:	0606      	lsls	r6, r0, #24
 800645e:	d501      	bpl.n	8006464 <_printf_i+0xbc>
 8006460:	681d      	ldr	r5, [r3, #0]
 8006462:	e003      	b.n	800646c <_printf_i+0xc4>
 8006464:	0645      	lsls	r5, r0, #25
 8006466:	d5fb      	bpl.n	8006460 <_printf_i+0xb8>
 8006468:	f9b3 5000 	ldrsh.w	r5, [r3]
 800646c:	2d00      	cmp	r5, #0
 800646e:	da03      	bge.n	8006478 <_printf_i+0xd0>
 8006470:	232d      	movs	r3, #45	@ 0x2d
 8006472:	426d      	negs	r5, r5
 8006474:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006478:	230a      	movs	r3, #10
 800647a:	4859      	ldr	r0, [pc, #356]	@ (80065e0 <_printf_i+0x238>)
 800647c:	e011      	b.n	80064a2 <_printf_i+0xfa>
 800647e:	6821      	ldr	r1, [r4, #0]
 8006480:	6833      	ldr	r3, [r6, #0]
 8006482:	0608      	lsls	r0, r1, #24
 8006484:	f853 5b04 	ldr.w	r5, [r3], #4
 8006488:	d402      	bmi.n	8006490 <_printf_i+0xe8>
 800648a:	0649      	lsls	r1, r1, #25
 800648c:	bf48      	it	mi
 800648e:	b2ad      	uxthmi	r5, r5
 8006490:	2f6f      	cmp	r7, #111	@ 0x6f
 8006492:	6033      	str	r3, [r6, #0]
 8006494:	bf14      	ite	ne
 8006496:	230a      	movne	r3, #10
 8006498:	2308      	moveq	r3, #8
 800649a:	4851      	ldr	r0, [pc, #324]	@ (80065e0 <_printf_i+0x238>)
 800649c:	2100      	movs	r1, #0
 800649e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80064a2:	6866      	ldr	r6, [r4, #4]
 80064a4:	2e00      	cmp	r6, #0
 80064a6:	bfa8      	it	ge
 80064a8:	6821      	ldrge	r1, [r4, #0]
 80064aa:	60a6      	str	r6, [r4, #8]
 80064ac:	bfa4      	itt	ge
 80064ae:	f021 0104 	bicge.w	r1, r1, #4
 80064b2:	6021      	strge	r1, [r4, #0]
 80064b4:	b90d      	cbnz	r5, 80064ba <_printf_i+0x112>
 80064b6:	2e00      	cmp	r6, #0
 80064b8:	d04b      	beq.n	8006552 <_printf_i+0x1aa>
 80064ba:	4616      	mov	r6, r2
 80064bc:	fbb5 f1f3 	udiv	r1, r5, r3
 80064c0:	fb03 5711 	mls	r7, r3, r1, r5
 80064c4:	5dc7      	ldrb	r7, [r0, r7]
 80064c6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80064ca:	462f      	mov	r7, r5
 80064cc:	42bb      	cmp	r3, r7
 80064ce:	460d      	mov	r5, r1
 80064d0:	d9f4      	bls.n	80064bc <_printf_i+0x114>
 80064d2:	2b08      	cmp	r3, #8
 80064d4:	d10b      	bne.n	80064ee <_printf_i+0x146>
 80064d6:	6823      	ldr	r3, [r4, #0]
 80064d8:	07df      	lsls	r7, r3, #31
 80064da:	d508      	bpl.n	80064ee <_printf_i+0x146>
 80064dc:	6923      	ldr	r3, [r4, #16]
 80064de:	6861      	ldr	r1, [r4, #4]
 80064e0:	4299      	cmp	r1, r3
 80064e2:	bfde      	ittt	le
 80064e4:	2330      	movle	r3, #48	@ 0x30
 80064e6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80064ea:	f106 36ff 	addle.w	r6, r6, #4294967295
 80064ee:	1b92      	subs	r2, r2, r6
 80064f0:	6122      	str	r2, [r4, #16]
 80064f2:	464b      	mov	r3, r9
 80064f4:	4621      	mov	r1, r4
 80064f6:	4640      	mov	r0, r8
 80064f8:	f8cd a000 	str.w	sl, [sp]
 80064fc:	aa03      	add	r2, sp, #12
 80064fe:	f7ff fee1 	bl	80062c4 <_printf_common>
 8006502:	3001      	adds	r0, #1
 8006504:	d14a      	bne.n	800659c <_printf_i+0x1f4>
 8006506:	f04f 30ff 	mov.w	r0, #4294967295
 800650a:	b004      	add	sp, #16
 800650c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006510:	6823      	ldr	r3, [r4, #0]
 8006512:	f043 0320 	orr.w	r3, r3, #32
 8006516:	6023      	str	r3, [r4, #0]
 8006518:	2778      	movs	r7, #120	@ 0x78
 800651a:	4832      	ldr	r0, [pc, #200]	@ (80065e4 <_printf_i+0x23c>)
 800651c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006520:	6823      	ldr	r3, [r4, #0]
 8006522:	6831      	ldr	r1, [r6, #0]
 8006524:	061f      	lsls	r7, r3, #24
 8006526:	f851 5b04 	ldr.w	r5, [r1], #4
 800652a:	d402      	bmi.n	8006532 <_printf_i+0x18a>
 800652c:	065f      	lsls	r7, r3, #25
 800652e:	bf48      	it	mi
 8006530:	b2ad      	uxthmi	r5, r5
 8006532:	6031      	str	r1, [r6, #0]
 8006534:	07d9      	lsls	r1, r3, #31
 8006536:	bf44      	itt	mi
 8006538:	f043 0320 	orrmi.w	r3, r3, #32
 800653c:	6023      	strmi	r3, [r4, #0]
 800653e:	b11d      	cbz	r5, 8006548 <_printf_i+0x1a0>
 8006540:	2310      	movs	r3, #16
 8006542:	e7ab      	b.n	800649c <_printf_i+0xf4>
 8006544:	4826      	ldr	r0, [pc, #152]	@ (80065e0 <_printf_i+0x238>)
 8006546:	e7e9      	b.n	800651c <_printf_i+0x174>
 8006548:	6823      	ldr	r3, [r4, #0]
 800654a:	f023 0320 	bic.w	r3, r3, #32
 800654e:	6023      	str	r3, [r4, #0]
 8006550:	e7f6      	b.n	8006540 <_printf_i+0x198>
 8006552:	4616      	mov	r6, r2
 8006554:	e7bd      	b.n	80064d2 <_printf_i+0x12a>
 8006556:	6833      	ldr	r3, [r6, #0]
 8006558:	6825      	ldr	r5, [r4, #0]
 800655a:	1d18      	adds	r0, r3, #4
 800655c:	6961      	ldr	r1, [r4, #20]
 800655e:	6030      	str	r0, [r6, #0]
 8006560:	062e      	lsls	r6, r5, #24
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	d501      	bpl.n	800656a <_printf_i+0x1c2>
 8006566:	6019      	str	r1, [r3, #0]
 8006568:	e002      	b.n	8006570 <_printf_i+0x1c8>
 800656a:	0668      	lsls	r0, r5, #25
 800656c:	d5fb      	bpl.n	8006566 <_printf_i+0x1be>
 800656e:	8019      	strh	r1, [r3, #0]
 8006570:	2300      	movs	r3, #0
 8006572:	4616      	mov	r6, r2
 8006574:	6123      	str	r3, [r4, #16]
 8006576:	e7bc      	b.n	80064f2 <_printf_i+0x14a>
 8006578:	6833      	ldr	r3, [r6, #0]
 800657a:	2100      	movs	r1, #0
 800657c:	1d1a      	adds	r2, r3, #4
 800657e:	6032      	str	r2, [r6, #0]
 8006580:	681e      	ldr	r6, [r3, #0]
 8006582:	6862      	ldr	r2, [r4, #4]
 8006584:	4630      	mov	r0, r6
 8006586:	f000 f9f6 	bl	8006976 <memchr>
 800658a:	b108      	cbz	r0, 8006590 <_printf_i+0x1e8>
 800658c:	1b80      	subs	r0, r0, r6
 800658e:	6060      	str	r0, [r4, #4]
 8006590:	6863      	ldr	r3, [r4, #4]
 8006592:	6123      	str	r3, [r4, #16]
 8006594:	2300      	movs	r3, #0
 8006596:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800659a:	e7aa      	b.n	80064f2 <_printf_i+0x14a>
 800659c:	4632      	mov	r2, r6
 800659e:	4649      	mov	r1, r9
 80065a0:	4640      	mov	r0, r8
 80065a2:	6923      	ldr	r3, [r4, #16]
 80065a4:	47d0      	blx	sl
 80065a6:	3001      	adds	r0, #1
 80065a8:	d0ad      	beq.n	8006506 <_printf_i+0x15e>
 80065aa:	6823      	ldr	r3, [r4, #0]
 80065ac:	079b      	lsls	r3, r3, #30
 80065ae:	d413      	bmi.n	80065d8 <_printf_i+0x230>
 80065b0:	68e0      	ldr	r0, [r4, #12]
 80065b2:	9b03      	ldr	r3, [sp, #12]
 80065b4:	4298      	cmp	r0, r3
 80065b6:	bfb8      	it	lt
 80065b8:	4618      	movlt	r0, r3
 80065ba:	e7a6      	b.n	800650a <_printf_i+0x162>
 80065bc:	2301      	movs	r3, #1
 80065be:	4632      	mov	r2, r6
 80065c0:	4649      	mov	r1, r9
 80065c2:	4640      	mov	r0, r8
 80065c4:	47d0      	blx	sl
 80065c6:	3001      	adds	r0, #1
 80065c8:	d09d      	beq.n	8006506 <_printf_i+0x15e>
 80065ca:	3501      	adds	r5, #1
 80065cc:	68e3      	ldr	r3, [r4, #12]
 80065ce:	9903      	ldr	r1, [sp, #12]
 80065d0:	1a5b      	subs	r3, r3, r1
 80065d2:	42ab      	cmp	r3, r5
 80065d4:	dcf2      	bgt.n	80065bc <_printf_i+0x214>
 80065d6:	e7eb      	b.n	80065b0 <_printf_i+0x208>
 80065d8:	2500      	movs	r5, #0
 80065da:	f104 0619 	add.w	r6, r4, #25
 80065de:	e7f5      	b.n	80065cc <_printf_i+0x224>
 80065e0:	08009dfa 	.word	0x08009dfa
 80065e4:	08009e0b 	.word	0x08009e0b

080065e8 <std>:
 80065e8:	2300      	movs	r3, #0
 80065ea:	b510      	push	{r4, lr}
 80065ec:	4604      	mov	r4, r0
 80065ee:	e9c0 3300 	strd	r3, r3, [r0]
 80065f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80065f6:	6083      	str	r3, [r0, #8]
 80065f8:	8181      	strh	r1, [r0, #12]
 80065fa:	6643      	str	r3, [r0, #100]	@ 0x64
 80065fc:	81c2      	strh	r2, [r0, #14]
 80065fe:	6183      	str	r3, [r0, #24]
 8006600:	4619      	mov	r1, r3
 8006602:	2208      	movs	r2, #8
 8006604:	305c      	adds	r0, #92	@ 0x5c
 8006606:	f000 f914 	bl	8006832 <memset>
 800660a:	4b0d      	ldr	r3, [pc, #52]	@ (8006640 <std+0x58>)
 800660c:	6224      	str	r4, [r4, #32]
 800660e:	6263      	str	r3, [r4, #36]	@ 0x24
 8006610:	4b0c      	ldr	r3, [pc, #48]	@ (8006644 <std+0x5c>)
 8006612:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006614:	4b0c      	ldr	r3, [pc, #48]	@ (8006648 <std+0x60>)
 8006616:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006618:	4b0c      	ldr	r3, [pc, #48]	@ (800664c <std+0x64>)
 800661a:	6323      	str	r3, [r4, #48]	@ 0x30
 800661c:	4b0c      	ldr	r3, [pc, #48]	@ (8006650 <std+0x68>)
 800661e:	429c      	cmp	r4, r3
 8006620:	d006      	beq.n	8006630 <std+0x48>
 8006622:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006626:	4294      	cmp	r4, r2
 8006628:	d002      	beq.n	8006630 <std+0x48>
 800662a:	33d0      	adds	r3, #208	@ 0xd0
 800662c:	429c      	cmp	r4, r3
 800662e:	d105      	bne.n	800663c <std+0x54>
 8006630:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006638:	f000 b99a 	b.w	8006970 <__retarget_lock_init_recursive>
 800663c:	bd10      	pop	{r4, pc}
 800663e:	bf00      	nop
 8006640:	080067ad 	.word	0x080067ad
 8006644:	080067cf 	.word	0x080067cf
 8006648:	08006807 	.word	0x08006807
 800664c:	0800682b 	.word	0x0800682b
 8006650:	200006d8 	.word	0x200006d8

08006654 <stdio_exit_handler>:
 8006654:	4a02      	ldr	r2, [pc, #8]	@ (8006660 <stdio_exit_handler+0xc>)
 8006656:	4903      	ldr	r1, [pc, #12]	@ (8006664 <stdio_exit_handler+0x10>)
 8006658:	4803      	ldr	r0, [pc, #12]	@ (8006668 <stdio_exit_handler+0x14>)
 800665a:	f000 b869 	b.w	8006730 <_fwalk_sglue>
 800665e:	bf00      	nop
 8006660:	200000c4 	.word	0x200000c4
 8006664:	08008a9d 	.word	0x08008a9d
 8006668:	20000240 	.word	0x20000240

0800666c <cleanup_stdio>:
 800666c:	6841      	ldr	r1, [r0, #4]
 800666e:	4b0c      	ldr	r3, [pc, #48]	@ (80066a0 <cleanup_stdio+0x34>)
 8006670:	b510      	push	{r4, lr}
 8006672:	4299      	cmp	r1, r3
 8006674:	4604      	mov	r4, r0
 8006676:	d001      	beq.n	800667c <cleanup_stdio+0x10>
 8006678:	f002 fa10 	bl	8008a9c <_fflush_r>
 800667c:	68a1      	ldr	r1, [r4, #8]
 800667e:	4b09      	ldr	r3, [pc, #36]	@ (80066a4 <cleanup_stdio+0x38>)
 8006680:	4299      	cmp	r1, r3
 8006682:	d002      	beq.n	800668a <cleanup_stdio+0x1e>
 8006684:	4620      	mov	r0, r4
 8006686:	f002 fa09 	bl	8008a9c <_fflush_r>
 800668a:	68e1      	ldr	r1, [r4, #12]
 800668c:	4b06      	ldr	r3, [pc, #24]	@ (80066a8 <cleanup_stdio+0x3c>)
 800668e:	4299      	cmp	r1, r3
 8006690:	d004      	beq.n	800669c <cleanup_stdio+0x30>
 8006692:	4620      	mov	r0, r4
 8006694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006698:	f002 ba00 	b.w	8008a9c <_fflush_r>
 800669c:	bd10      	pop	{r4, pc}
 800669e:	bf00      	nop
 80066a0:	200006d8 	.word	0x200006d8
 80066a4:	20000740 	.word	0x20000740
 80066a8:	200007a8 	.word	0x200007a8

080066ac <global_stdio_init.part.0>:
 80066ac:	b510      	push	{r4, lr}
 80066ae:	4b0b      	ldr	r3, [pc, #44]	@ (80066dc <global_stdio_init.part.0+0x30>)
 80066b0:	4c0b      	ldr	r4, [pc, #44]	@ (80066e0 <global_stdio_init.part.0+0x34>)
 80066b2:	4a0c      	ldr	r2, [pc, #48]	@ (80066e4 <global_stdio_init.part.0+0x38>)
 80066b4:	4620      	mov	r0, r4
 80066b6:	601a      	str	r2, [r3, #0]
 80066b8:	2104      	movs	r1, #4
 80066ba:	2200      	movs	r2, #0
 80066bc:	f7ff ff94 	bl	80065e8 <std>
 80066c0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80066c4:	2201      	movs	r2, #1
 80066c6:	2109      	movs	r1, #9
 80066c8:	f7ff ff8e 	bl	80065e8 <std>
 80066cc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80066d0:	2202      	movs	r2, #2
 80066d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066d6:	2112      	movs	r1, #18
 80066d8:	f7ff bf86 	b.w	80065e8 <std>
 80066dc:	20000810 	.word	0x20000810
 80066e0:	200006d8 	.word	0x200006d8
 80066e4:	08006655 	.word	0x08006655

080066e8 <__sfp_lock_acquire>:
 80066e8:	4801      	ldr	r0, [pc, #4]	@ (80066f0 <__sfp_lock_acquire+0x8>)
 80066ea:	f000 b942 	b.w	8006972 <__retarget_lock_acquire_recursive>
 80066ee:	bf00      	nop
 80066f0:	20000819 	.word	0x20000819

080066f4 <__sfp_lock_release>:
 80066f4:	4801      	ldr	r0, [pc, #4]	@ (80066fc <__sfp_lock_release+0x8>)
 80066f6:	f000 b93d 	b.w	8006974 <__retarget_lock_release_recursive>
 80066fa:	bf00      	nop
 80066fc:	20000819 	.word	0x20000819

08006700 <__sinit>:
 8006700:	b510      	push	{r4, lr}
 8006702:	4604      	mov	r4, r0
 8006704:	f7ff fff0 	bl	80066e8 <__sfp_lock_acquire>
 8006708:	6a23      	ldr	r3, [r4, #32]
 800670a:	b11b      	cbz	r3, 8006714 <__sinit+0x14>
 800670c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006710:	f7ff bff0 	b.w	80066f4 <__sfp_lock_release>
 8006714:	4b04      	ldr	r3, [pc, #16]	@ (8006728 <__sinit+0x28>)
 8006716:	6223      	str	r3, [r4, #32]
 8006718:	4b04      	ldr	r3, [pc, #16]	@ (800672c <__sinit+0x2c>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d1f5      	bne.n	800670c <__sinit+0xc>
 8006720:	f7ff ffc4 	bl	80066ac <global_stdio_init.part.0>
 8006724:	e7f2      	b.n	800670c <__sinit+0xc>
 8006726:	bf00      	nop
 8006728:	0800666d 	.word	0x0800666d
 800672c:	20000810 	.word	0x20000810

08006730 <_fwalk_sglue>:
 8006730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006734:	4607      	mov	r7, r0
 8006736:	4688      	mov	r8, r1
 8006738:	4614      	mov	r4, r2
 800673a:	2600      	movs	r6, #0
 800673c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006740:	f1b9 0901 	subs.w	r9, r9, #1
 8006744:	d505      	bpl.n	8006752 <_fwalk_sglue+0x22>
 8006746:	6824      	ldr	r4, [r4, #0]
 8006748:	2c00      	cmp	r4, #0
 800674a:	d1f7      	bne.n	800673c <_fwalk_sglue+0xc>
 800674c:	4630      	mov	r0, r6
 800674e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006752:	89ab      	ldrh	r3, [r5, #12]
 8006754:	2b01      	cmp	r3, #1
 8006756:	d907      	bls.n	8006768 <_fwalk_sglue+0x38>
 8006758:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800675c:	3301      	adds	r3, #1
 800675e:	d003      	beq.n	8006768 <_fwalk_sglue+0x38>
 8006760:	4629      	mov	r1, r5
 8006762:	4638      	mov	r0, r7
 8006764:	47c0      	blx	r8
 8006766:	4306      	orrs	r6, r0
 8006768:	3568      	adds	r5, #104	@ 0x68
 800676a:	e7e9      	b.n	8006740 <_fwalk_sglue+0x10>

0800676c <siprintf>:
 800676c:	b40e      	push	{r1, r2, r3}
 800676e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006772:	b500      	push	{lr}
 8006774:	b09c      	sub	sp, #112	@ 0x70
 8006776:	ab1d      	add	r3, sp, #116	@ 0x74
 8006778:	9002      	str	r0, [sp, #8]
 800677a:	9006      	str	r0, [sp, #24]
 800677c:	9107      	str	r1, [sp, #28]
 800677e:	9104      	str	r1, [sp, #16]
 8006780:	4808      	ldr	r0, [pc, #32]	@ (80067a4 <siprintf+0x38>)
 8006782:	4909      	ldr	r1, [pc, #36]	@ (80067a8 <siprintf+0x3c>)
 8006784:	f853 2b04 	ldr.w	r2, [r3], #4
 8006788:	9105      	str	r1, [sp, #20]
 800678a:	6800      	ldr	r0, [r0, #0]
 800678c:	a902      	add	r1, sp, #8
 800678e:	9301      	str	r3, [sp, #4]
 8006790:	f002 f808 	bl	80087a4 <_svfiprintf_r>
 8006794:	2200      	movs	r2, #0
 8006796:	9b02      	ldr	r3, [sp, #8]
 8006798:	701a      	strb	r2, [r3, #0]
 800679a:	b01c      	add	sp, #112	@ 0x70
 800679c:	f85d eb04 	ldr.w	lr, [sp], #4
 80067a0:	b003      	add	sp, #12
 80067a2:	4770      	bx	lr
 80067a4:	2000023c 	.word	0x2000023c
 80067a8:	ffff0208 	.word	0xffff0208

080067ac <__sread>:
 80067ac:	b510      	push	{r4, lr}
 80067ae:	460c      	mov	r4, r1
 80067b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067b4:	f000 f87e 	bl	80068b4 <_read_r>
 80067b8:	2800      	cmp	r0, #0
 80067ba:	bfab      	itete	ge
 80067bc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80067be:	89a3      	ldrhlt	r3, [r4, #12]
 80067c0:	181b      	addge	r3, r3, r0
 80067c2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80067c6:	bfac      	ite	ge
 80067c8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80067ca:	81a3      	strhlt	r3, [r4, #12]
 80067cc:	bd10      	pop	{r4, pc}

080067ce <__swrite>:
 80067ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067d2:	461f      	mov	r7, r3
 80067d4:	898b      	ldrh	r3, [r1, #12]
 80067d6:	4605      	mov	r5, r0
 80067d8:	05db      	lsls	r3, r3, #23
 80067da:	460c      	mov	r4, r1
 80067dc:	4616      	mov	r6, r2
 80067de:	d505      	bpl.n	80067ec <__swrite+0x1e>
 80067e0:	2302      	movs	r3, #2
 80067e2:	2200      	movs	r2, #0
 80067e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067e8:	f000 f852 	bl	8006890 <_lseek_r>
 80067ec:	89a3      	ldrh	r3, [r4, #12]
 80067ee:	4632      	mov	r2, r6
 80067f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80067f4:	81a3      	strh	r3, [r4, #12]
 80067f6:	4628      	mov	r0, r5
 80067f8:	463b      	mov	r3, r7
 80067fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80067fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006802:	f000 b879 	b.w	80068f8 <_write_r>

08006806 <__sseek>:
 8006806:	b510      	push	{r4, lr}
 8006808:	460c      	mov	r4, r1
 800680a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800680e:	f000 f83f 	bl	8006890 <_lseek_r>
 8006812:	1c43      	adds	r3, r0, #1
 8006814:	89a3      	ldrh	r3, [r4, #12]
 8006816:	bf15      	itete	ne
 8006818:	6560      	strne	r0, [r4, #84]	@ 0x54
 800681a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800681e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006822:	81a3      	strheq	r3, [r4, #12]
 8006824:	bf18      	it	ne
 8006826:	81a3      	strhne	r3, [r4, #12]
 8006828:	bd10      	pop	{r4, pc}

0800682a <__sclose>:
 800682a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800682e:	f000 b81f 	b.w	8006870 <_close_r>

08006832 <memset>:
 8006832:	4603      	mov	r3, r0
 8006834:	4402      	add	r2, r0
 8006836:	4293      	cmp	r3, r2
 8006838:	d100      	bne.n	800683c <memset+0xa>
 800683a:	4770      	bx	lr
 800683c:	f803 1b01 	strb.w	r1, [r3], #1
 8006840:	e7f9      	b.n	8006836 <memset+0x4>

08006842 <strncmp>:
 8006842:	b510      	push	{r4, lr}
 8006844:	b16a      	cbz	r2, 8006862 <strncmp+0x20>
 8006846:	3901      	subs	r1, #1
 8006848:	1884      	adds	r4, r0, r2
 800684a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800684e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006852:	429a      	cmp	r2, r3
 8006854:	d103      	bne.n	800685e <strncmp+0x1c>
 8006856:	42a0      	cmp	r0, r4
 8006858:	d001      	beq.n	800685e <strncmp+0x1c>
 800685a:	2a00      	cmp	r2, #0
 800685c:	d1f5      	bne.n	800684a <strncmp+0x8>
 800685e:	1ad0      	subs	r0, r2, r3
 8006860:	bd10      	pop	{r4, pc}
 8006862:	4610      	mov	r0, r2
 8006864:	e7fc      	b.n	8006860 <strncmp+0x1e>
	...

08006868 <_localeconv_r>:
 8006868:	4800      	ldr	r0, [pc, #0]	@ (800686c <_localeconv_r+0x4>)
 800686a:	4770      	bx	lr
 800686c:	200001c0 	.word	0x200001c0

08006870 <_close_r>:
 8006870:	b538      	push	{r3, r4, r5, lr}
 8006872:	2300      	movs	r3, #0
 8006874:	4d05      	ldr	r5, [pc, #20]	@ (800688c <_close_r+0x1c>)
 8006876:	4604      	mov	r4, r0
 8006878:	4608      	mov	r0, r1
 800687a:	602b      	str	r3, [r5, #0]
 800687c:	f7fc ff2b 	bl	80036d6 <_close>
 8006880:	1c43      	adds	r3, r0, #1
 8006882:	d102      	bne.n	800688a <_close_r+0x1a>
 8006884:	682b      	ldr	r3, [r5, #0]
 8006886:	b103      	cbz	r3, 800688a <_close_r+0x1a>
 8006888:	6023      	str	r3, [r4, #0]
 800688a:	bd38      	pop	{r3, r4, r5, pc}
 800688c:	20000814 	.word	0x20000814

08006890 <_lseek_r>:
 8006890:	b538      	push	{r3, r4, r5, lr}
 8006892:	4604      	mov	r4, r0
 8006894:	4608      	mov	r0, r1
 8006896:	4611      	mov	r1, r2
 8006898:	2200      	movs	r2, #0
 800689a:	4d05      	ldr	r5, [pc, #20]	@ (80068b0 <_lseek_r+0x20>)
 800689c:	602a      	str	r2, [r5, #0]
 800689e:	461a      	mov	r2, r3
 80068a0:	f7fc ff3d 	bl	800371e <_lseek>
 80068a4:	1c43      	adds	r3, r0, #1
 80068a6:	d102      	bne.n	80068ae <_lseek_r+0x1e>
 80068a8:	682b      	ldr	r3, [r5, #0]
 80068aa:	b103      	cbz	r3, 80068ae <_lseek_r+0x1e>
 80068ac:	6023      	str	r3, [r4, #0]
 80068ae:	bd38      	pop	{r3, r4, r5, pc}
 80068b0:	20000814 	.word	0x20000814

080068b4 <_read_r>:
 80068b4:	b538      	push	{r3, r4, r5, lr}
 80068b6:	4604      	mov	r4, r0
 80068b8:	4608      	mov	r0, r1
 80068ba:	4611      	mov	r1, r2
 80068bc:	2200      	movs	r2, #0
 80068be:	4d05      	ldr	r5, [pc, #20]	@ (80068d4 <_read_r+0x20>)
 80068c0:	602a      	str	r2, [r5, #0]
 80068c2:	461a      	mov	r2, r3
 80068c4:	f7fc fece 	bl	8003664 <_read>
 80068c8:	1c43      	adds	r3, r0, #1
 80068ca:	d102      	bne.n	80068d2 <_read_r+0x1e>
 80068cc:	682b      	ldr	r3, [r5, #0]
 80068ce:	b103      	cbz	r3, 80068d2 <_read_r+0x1e>
 80068d0:	6023      	str	r3, [r4, #0]
 80068d2:	bd38      	pop	{r3, r4, r5, pc}
 80068d4:	20000814 	.word	0x20000814

080068d8 <_sbrk_r>:
 80068d8:	b538      	push	{r3, r4, r5, lr}
 80068da:	2300      	movs	r3, #0
 80068dc:	4d05      	ldr	r5, [pc, #20]	@ (80068f4 <_sbrk_r+0x1c>)
 80068de:	4604      	mov	r4, r0
 80068e0:	4608      	mov	r0, r1
 80068e2:	602b      	str	r3, [r5, #0]
 80068e4:	f7fc ff28 	bl	8003738 <_sbrk>
 80068e8:	1c43      	adds	r3, r0, #1
 80068ea:	d102      	bne.n	80068f2 <_sbrk_r+0x1a>
 80068ec:	682b      	ldr	r3, [r5, #0]
 80068ee:	b103      	cbz	r3, 80068f2 <_sbrk_r+0x1a>
 80068f0:	6023      	str	r3, [r4, #0]
 80068f2:	bd38      	pop	{r3, r4, r5, pc}
 80068f4:	20000814 	.word	0x20000814

080068f8 <_write_r>:
 80068f8:	b538      	push	{r3, r4, r5, lr}
 80068fa:	4604      	mov	r4, r0
 80068fc:	4608      	mov	r0, r1
 80068fe:	4611      	mov	r1, r2
 8006900:	2200      	movs	r2, #0
 8006902:	4d05      	ldr	r5, [pc, #20]	@ (8006918 <_write_r+0x20>)
 8006904:	602a      	str	r2, [r5, #0]
 8006906:	461a      	mov	r2, r3
 8006908:	f7fc fec9 	bl	800369e <_write>
 800690c:	1c43      	adds	r3, r0, #1
 800690e:	d102      	bne.n	8006916 <_write_r+0x1e>
 8006910:	682b      	ldr	r3, [r5, #0]
 8006912:	b103      	cbz	r3, 8006916 <_write_r+0x1e>
 8006914:	6023      	str	r3, [r4, #0]
 8006916:	bd38      	pop	{r3, r4, r5, pc}
 8006918:	20000814 	.word	0x20000814

0800691c <__errno>:
 800691c:	4b01      	ldr	r3, [pc, #4]	@ (8006924 <__errno+0x8>)
 800691e:	6818      	ldr	r0, [r3, #0]
 8006920:	4770      	bx	lr
 8006922:	bf00      	nop
 8006924:	2000023c 	.word	0x2000023c

08006928 <__libc_init_array>:
 8006928:	b570      	push	{r4, r5, r6, lr}
 800692a:	2600      	movs	r6, #0
 800692c:	4d0c      	ldr	r5, [pc, #48]	@ (8006960 <__libc_init_array+0x38>)
 800692e:	4c0d      	ldr	r4, [pc, #52]	@ (8006964 <__libc_init_array+0x3c>)
 8006930:	1b64      	subs	r4, r4, r5
 8006932:	10a4      	asrs	r4, r4, #2
 8006934:	42a6      	cmp	r6, r4
 8006936:	d109      	bne.n	800694c <__libc_init_array+0x24>
 8006938:	f002 fc0e 	bl	8009158 <_init>
 800693c:	2600      	movs	r6, #0
 800693e:	4d0a      	ldr	r5, [pc, #40]	@ (8006968 <__libc_init_array+0x40>)
 8006940:	4c0a      	ldr	r4, [pc, #40]	@ (800696c <__libc_init_array+0x44>)
 8006942:	1b64      	subs	r4, r4, r5
 8006944:	10a4      	asrs	r4, r4, #2
 8006946:	42a6      	cmp	r6, r4
 8006948:	d105      	bne.n	8006956 <__libc_init_array+0x2e>
 800694a:	bd70      	pop	{r4, r5, r6, pc}
 800694c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006950:	4798      	blx	r3
 8006952:	3601      	adds	r6, #1
 8006954:	e7ee      	b.n	8006934 <__libc_init_array+0xc>
 8006956:	f855 3b04 	ldr.w	r3, [r5], #4
 800695a:	4798      	blx	r3
 800695c:	3601      	adds	r6, #1
 800695e:	e7f2      	b.n	8006946 <__libc_init_array+0x1e>
 8006960:	0800a1c0 	.word	0x0800a1c0
 8006964:	0800a1c0 	.word	0x0800a1c0
 8006968:	0800a1c0 	.word	0x0800a1c0
 800696c:	0800a1c4 	.word	0x0800a1c4

08006970 <__retarget_lock_init_recursive>:
 8006970:	4770      	bx	lr

08006972 <__retarget_lock_acquire_recursive>:
 8006972:	4770      	bx	lr

08006974 <__retarget_lock_release_recursive>:
 8006974:	4770      	bx	lr

08006976 <memchr>:
 8006976:	4603      	mov	r3, r0
 8006978:	b510      	push	{r4, lr}
 800697a:	b2c9      	uxtb	r1, r1
 800697c:	4402      	add	r2, r0
 800697e:	4293      	cmp	r3, r2
 8006980:	4618      	mov	r0, r3
 8006982:	d101      	bne.n	8006988 <memchr+0x12>
 8006984:	2000      	movs	r0, #0
 8006986:	e003      	b.n	8006990 <memchr+0x1a>
 8006988:	7804      	ldrb	r4, [r0, #0]
 800698a:	3301      	adds	r3, #1
 800698c:	428c      	cmp	r4, r1
 800698e:	d1f6      	bne.n	800697e <memchr+0x8>
 8006990:	bd10      	pop	{r4, pc}

08006992 <memcpy>:
 8006992:	440a      	add	r2, r1
 8006994:	4291      	cmp	r1, r2
 8006996:	f100 33ff 	add.w	r3, r0, #4294967295
 800699a:	d100      	bne.n	800699e <memcpy+0xc>
 800699c:	4770      	bx	lr
 800699e:	b510      	push	{r4, lr}
 80069a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069a4:	4291      	cmp	r1, r2
 80069a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80069aa:	d1f9      	bne.n	80069a0 <memcpy+0xe>
 80069ac:	bd10      	pop	{r4, pc}
	...

080069b0 <nan>:
 80069b0:	2000      	movs	r0, #0
 80069b2:	4901      	ldr	r1, [pc, #4]	@ (80069b8 <nan+0x8>)
 80069b4:	4770      	bx	lr
 80069b6:	bf00      	nop
 80069b8:	7ff80000 	.word	0x7ff80000

080069bc <quorem>:
 80069bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069c0:	6903      	ldr	r3, [r0, #16]
 80069c2:	690c      	ldr	r4, [r1, #16]
 80069c4:	4607      	mov	r7, r0
 80069c6:	42a3      	cmp	r3, r4
 80069c8:	db7e      	blt.n	8006ac8 <quorem+0x10c>
 80069ca:	3c01      	subs	r4, #1
 80069cc:	00a3      	lsls	r3, r4, #2
 80069ce:	f100 0514 	add.w	r5, r0, #20
 80069d2:	f101 0814 	add.w	r8, r1, #20
 80069d6:	9300      	str	r3, [sp, #0]
 80069d8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80069dc:	9301      	str	r3, [sp, #4]
 80069de:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80069e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80069e6:	3301      	adds	r3, #1
 80069e8:	429a      	cmp	r2, r3
 80069ea:	fbb2 f6f3 	udiv	r6, r2, r3
 80069ee:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80069f2:	d32e      	bcc.n	8006a52 <quorem+0x96>
 80069f4:	f04f 0a00 	mov.w	sl, #0
 80069f8:	46c4      	mov	ip, r8
 80069fa:	46ae      	mov	lr, r5
 80069fc:	46d3      	mov	fp, sl
 80069fe:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006a02:	b298      	uxth	r0, r3
 8006a04:	fb06 a000 	mla	r0, r6, r0, sl
 8006a08:	0c1b      	lsrs	r3, r3, #16
 8006a0a:	0c02      	lsrs	r2, r0, #16
 8006a0c:	fb06 2303 	mla	r3, r6, r3, r2
 8006a10:	f8de 2000 	ldr.w	r2, [lr]
 8006a14:	b280      	uxth	r0, r0
 8006a16:	b292      	uxth	r2, r2
 8006a18:	1a12      	subs	r2, r2, r0
 8006a1a:	445a      	add	r2, fp
 8006a1c:	f8de 0000 	ldr.w	r0, [lr]
 8006a20:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006a2a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006a2e:	b292      	uxth	r2, r2
 8006a30:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006a34:	45e1      	cmp	r9, ip
 8006a36:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006a3a:	f84e 2b04 	str.w	r2, [lr], #4
 8006a3e:	d2de      	bcs.n	80069fe <quorem+0x42>
 8006a40:	9b00      	ldr	r3, [sp, #0]
 8006a42:	58eb      	ldr	r3, [r5, r3]
 8006a44:	b92b      	cbnz	r3, 8006a52 <quorem+0x96>
 8006a46:	9b01      	ldr	r3, [sp, #4]
 8006a48:	3b04      	subs	r3, #4
 8006a4a:	429d      	cmp	r5, r3
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	d32f      	bcc.n	8006ab0 <quorem+0xf4>
 8006a50:	613c      	str	r4, [r7, #16]
 8006a52:	4638      	mov	r0, r7
 8006a54:	f001 fc5a 	bl	800830c <__mcmp>
 8006a58:	2800      	cmp	r0, #0
 8006a5a:	db25      	blt.n	8006aa8 <quorem+0xec>
 8006a5c:	4629      	mov	r1, r5
 8006a5e:	2000      	movs	r0, #0
 8006a60:	f858 2b04 	ldr.w	r2, [r8], #4
 8006a64:	f8d1 c000 	ldr.w	ip, [r1]
 8006a68:	fa1f fe82 	uxth.w	lr, r2
 8006a6c:	fa1f f38c 	uxth.w	r3, ip
 8006a70:	eba3 030e 	sub.w	r3, r3, lr
 8006a74:	4403      	add	r3, r0
 8006a76:	0c12      	lsrs	r2, r2, #16
 8006a78:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006a7c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006a86:	45c1      	cmp	r9, r8
 8006a88:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006a8c:	f841 3b04 	str.w	r3, [r1], #4
 8006a90:	d2e6      	bcs.n	8006a60 <quorem+0xa4>
 8006a92:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006a96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006a9a:	b922      	cbnz	r2, 8006aa6 <quorem+0xea>
 8006a9c:	3b04      	subs	r3, #4
 8006a9e:	429d      	cmp	r5, r3
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	d30b      	bcc.n	8006abc <quorem+0x100>
 8006aa4:	613c      	str	r4, [r7, #16]
 8006aa6:	3601      	adds	r6, #1
 8006aa8:	4630      	mov	r0, r6
 8006aaa:	b003      	add	sp, #12
 8006aac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ab0:	6812      	ldr	r2, [r2, #0]
 8006ab2:	3b04      	subs	r3, #4
 8006ab4:	2a00      	cmp	r2, #0
 8006ab6:	d1cb      	bne.n	8006a50 <quorem+0x94>
 8006ab8:	3c01      	subs	r4, #1
 8006aba:	e7c6      	b.n	8006a4a <quorem+0x8e>
 8006abc:	6812      	ldr	r2, [r2, #0]
 8006abe:	3b04      	subs	r3, #4
 8006ac0:	2a00      	cmp	r2, #0
 8006ac2:	d1ef      	bne.n	8006aa4 <quorem+0xe8>
 8006ac4:	3c01      	subs	r4, #1
 8006ac6:	e7ea      	b.n	8006a9e <quorem+0xe2>
 8006ac8:	2000      	movs	r0, #0
 8006aca:	e7ee      	b.n	8006aaa <quorem+0xee>
 8006acc:	0000      	movs	r0, r0
	...

08006ad0 <_dtoa_r>:
 8006ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ad4:	4614      	mov	r4, r2
 8006ad6:	461d      	mov	r5, r3
 8006ad8:	69c7      	ldr	r7, [r0, #28]
 8006ada:	b097      	sub	sp, #92	@ 0x5c
 8006adc:	4683      	mov	fp, r0
 8006ade:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006ae2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8006ae4:	b97f      	cbnz	r7, 8006b06 <_dtoa_r+0x36>
 8006ae6:	2010      	movs	r0, #16
 8006ae8:	f7fe fa64 	bl	8004fb4 <malloc>
 8006aec:	4602      	mov	r2, r0
 8006aee:	f8cb 001c 	str.w	r0, [fp, #28]
 8006af2:	b920      	cbnz	r0, 8006afe <_dtoa_r+0x2e>
 8006af4:	21ef      	movs	r1, #239	@ 0xef
 8006af6:	4ba8      	ldr	r3, [pc, #672]	@ (8006d98 <_dtoa_r+0x2c8>)
 8006af8:	48a8      	ldr	r0, [pc, #672]	@ (8006d9c <_dtoa_r+0x2cc>)
 8006afa:	f002 f811 	bl	8008b20 <__assert_func>
 8006afe:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006b02:	6007      	str	r7, [r0, #0]
 8006b04:	60c7      	str	r7, [r0, #12]
 8006b06:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006b0a:	6819      	ldr	r1, [r3, #0]
 8006b0c:	b159      	cbz	r1, 8006b26 <_dtoa_r+0x56>
 8006b0e:	685a      	ldr	r2, [r3, #4]
 8006b10:	2301      	movs	r3, #1
 8006b12:	4093      	lsls	r3, r2
 8006b14:	604a      	str	r2, [r1, #4]
 8006b16:	608b      	str	r3, [r1, #8]
 8006b18:	4658      	mov	r0, fp
 8006b1a:	f001 f975 	bl	8007e08 <_Bfree>
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006b24:	601a      	str	r2, [r3, #0]
 8006b26:	1e2b      	subs	r3, r5, #0
 8006b28:	bfaf      	iteee	ge
 8006b2a:	2300      	movge	r3, #0
 8006b2c:	2201      	movlt	r2, #1
 8006b2e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006b32:	9303      	strlt	r3, [sp, #12]
 8006b34:	bfa8      	it	ge
 8006b36:	6033      	strge	r3, [r6, #0]
 8006b38:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006b3c:	4b98      	ldr	r3, [pc, #608]	@ (8006da0 <_dtoa_r+0x2d0>)
 8006b3e:	bfb8      	it	lt
 8006b40:	6032      	strlt	r2, [r6, #0]
 8006b42:	ea33 0308 	bics.w	r3, r3, r8
 8006b46:	d112      	bne.n	8006b6e <_dtoa_r+0x9e>
 8006b48:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006b4c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006b4e:	6013      	str	r3, [r2, #0]
 8006b50:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006b54:	4323      	orrs	r3, r4
 8006b56:	f000 8550 	beq.w	80075fa <_dtoa_r+0xb2a>
 8006b5a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006b5c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8006da4 <_dtoa_r+0x2d4>
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	f000 8552 	beq.w	800760a <_dtoa_r+0xb3a>
 8006b66:	f10a 0303 	add.w	r3, sl, #3
 8006b6a:	f000 bd4c 	b.w	8007606 <_dtoa_r+0xb36>
 8006b6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006b72:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006b76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	f7f9 ff1d 	bl	80009bc <__aeabi_dcmpeq>
 8006b82:	4607      	mov	r7, r0
 8006b84:	b158      	cbz	r0, 8006b9e <_dtoa_r+0xce>
 8006b86:	2301      	movs	r3, #1
 8006b88:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006b8a:	6013      	str	r3, [r2, #0]
 8006b8c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006b8e:	b113      	cbz	r3, 8006b96 <_dtoa_r+0xc6>
 8006b90:	4b85      	ldr	r3, [pc, #532]	@ (8006da8 <_dtoa_r+0x2d8>)
 8006b92:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006b94:	6013      	str	r3, [r2, #0]
 8006b96:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8006dac <_dtoa_r+0x2dc>
 8006b9a:	f000 bd36 	b.w	800760a <_dtoa_r+0xb3a>
 8006b9e:	ab14      	add	r3, sp, #80	@ 0x50
 8006ba0:	9301      	str	r3, [sp, #4]
 8006ba2:	ab15      	add	r3, sp, #84	@ 0x54
 8006ba4:	9300      	str	r3, [sp, #0]
 8006ba6:	4658      	mov	r0, fp
 8006ba8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006bac:	f001 fcc6 	bl	800853c <__d2b>
 8006bb0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8006bb4:	4681      	mov	r9, r0
 8006bb6:	2e00      	cmp	r6, #0
 8006bb8:	d077      	beq.n	8006caa <_dtoa_r+0x1da>
 8006bba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006bbe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006bc0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006bc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006bc8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006bcc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006bd0:	9712      	str	r7, [sp, #72]	@ 0x48
 8006bd2:	4619      	mov	r1, r3
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	4b76      	ldr	r3, [pc, #472]	@ (8006db0 <_dtoa_r+0x2e0>)
 8006bd8:	f7f9 fad0 	bl	800017c <__aeabi_dsub>
 8006bdc:	a368      	add	r3, pc, #416	@ (adr r3, 8006d80 <_dtoa_r+0x2b0>)
 8006bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be2:	f7f9 fc83 	bl	80004ec <__aeabi_dmul>
 8006be6:	a368      	add	r3, pc, #416	@ (adr r3, 8006d88 <_dtoa_r+0x2b8>)
 8006be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bec:	f7f9 fac8 	bl	8000180 <__adddf3>
 8006bf0:	4604      	mov	r4, r0
 8006bf2:	4630      	mov	r0, r6
 8006bf4:	460d      	mov	r5, r1
 8006bf6:	f7f9 fc0f 	bl	8000418 <__aeabi_i2d>
 8006bfa:	a365      	add	r3, pc, #404	@ (adr r3, 8006d90 <_dtoa_r+0x2c0>)
 8006bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c00:	f7f9 fc74 	bl	80004ec <__aeabi_dmul>
 8006c04:	4602      	mov	r2, r0
 8006c06:	460b      	mov	r3, r1
 8006c08:	4620      	mov	r0, r4
 8006c0a:	4629      	mov	r1, r5
 8006c0c:	f7f9 fab8 	bl	8000180 <__adddf3>
 8006c10:	4604      	mov	r4, r0
 8006c12:	460d      	mov	r5, r1
 8006c14:	f7f9 ff1a 	bl	8000a4c <__aeabi_d2iz>
 8006c18:	2200      	movs	r2, #0
 8006c1a:	4607      	mov	r7, r0
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	4620      	mov	r0, r4
 8006c20:	4629      	mov	r1, r5
 8006c22:	f7f9 fed5 	bl	80009d0 <__aeabi_dcmplt>
 8006c26:	b140      	cbz	r0, 8006c3a <_dtoa_r+0x16a>
 8006c28:	4638      	mov	r0, r7
 8006c2a:	f7f9 fbf5 	bl	8000418 <__aeabi_i2d>
 8006c2e:	4622      	mov	r2, r4
 8006c30:	462b      	mov	r3, r5
 8006c32:	f7f9 fec3 	bl	80009bc <__aeabi_dcmpeq>
 8006c36:	b900      	cbnz	r0, 8006c3a <_dtoa_r+0x16a>
 8006c38:	3f01      	subs	r7, #1
 8006c3a:	2f16      	cmp	r7, #22
 8006c3c:	d853      	bhi.n	8006ce6 <_dtoa_r+0x216>
 8006c3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006c42:	4b5c      	ldr	r3, [pc, #368]	@ (8006db4 <_dtoa_r+0x2e4>)
 8006c44:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c4c:	f7f9 fec0 	bl	80009d0 <__aeabi_dcmplt>
 8006c50:	2800      	cmp	r0, #0
 8006c52:	d04a      	beq.n	8006cea <_dtoa_r+0x21a>
 8006c54:	2300      	movs	r3, #0
 8006c56:	3f01      	subs	r7, #1
 8006c58:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006c5a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006c5c:	1b9b      	subs	r3, r3, r6
 8006c5e:	1e5a      	subs	r2, r3, #1
 8006c60:	bf46      	itte	mi
 8006c62:	f1c3 0801 	rsbmi	r8, r3, #1
 8006c66:	2300      	movmi	r3, #0
 8006c68:	f04f 0800 	movpl.w	r8, #0
 8006c6c:	9209      	str	r2, [sp, #36]	@ 0x24
 8006c6e:	bf48      	it	mi
 8006c70:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8006c72:	2f00      	cmp	r7, #0
 8006c74:	db3b      	blt.n	8006cee <_dtoa_r+0x21e>
 8006c76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c78:	970e      	str	r7, [sp, #56]	@ 0x38
 8006c7a:	443b      	add	r3, r7
 8006c7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c7e:	2300      	movs	r3, #0
 8006c80:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c82:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006c84:	2b09      	cmp	r3, #9
 8006c86:	d866      	bhi.n	8006d56 <_dtoa_r+0x286>
 8006c88:	2b05      	cmp	r3, #5
 8006c8a:	bfc4      	itt	gt
 8006c8c:	3b04      	subgt	r3, #4
 8006c8e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8006c90:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006c92:	bfc8      	it	gt
 8006c94:	2400      	movgt	r4, #0
 8006c96:	f1a3 0302 	sub.w	r3, r3, #2
 8006c9a:	bfd8      	it	le
 8006c9c:	2401      	movle	r4, #1
 8006c9e:	2b03      	cmp	r3, #3
 8006ca0:	d864      	bhi.n	8006d6c <_dtoa_r+0x29c>
 8006ca2:	e8df f003 	tbb	[pc, r3]
 8006ca6:	382b      	.short	0x382b
 8006ca8:	5636      	.short	0x5636
 8006caa:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006cae:	441e      	add	r6, r3
 8006cb0:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006cb4:	2b20      	cmp	r3, #32
 8006cb6:	bfc1      	itttt	gt
 8006cb8:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006cbc:	fa08 f803 	lslgt.w	r8, r8, r3
 8006cc0:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006cc4:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006cc8:	bfd6      	itet	le
 8006cca:	f1c3 0320 	rsble	r3, r3, #32
 8006cce:	ea48 0003 	orrgt.w	r0, r8, r3
 8006cd2:	fa04 f003 	lslle.w	r0, r4, r3
 8006cd6:	f7f9 fb8f 	bl	80003f8 <__aeabi_ui2d>
 8006cda:	2201      	movs	r2, #1
 8006cdc:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006ce0:	3e01      	subs	r6, #1
 8006ce2:	9212      	str	r2, [sp, #72]	@ 0x48
 8006ce4:	e775      	b.n	8006bd2 <_dtoa_r+0x102>
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	e7b6      	b.n	8006c58 <_dtoa_r+0x188>
 8006cea:	900f      	str	r0, [sp, #60]	@ 0x3c
 8006cec:	e7b5      	b.n	8006c5a <_dtoa_r+0x18a>
 8006cee:	427b      	negs	r3, r7
 8006cf0:	930a      	str	r3, [sp, #40]	@ 0x28
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	eba8 0807 	sub.w	r8, r8, r7
 8006cf8:	930e      	str	r3, [sp, #56]	@ 0x38
 8006cfa:	e7c2      	b.n	8006c82 <_dtoa_r+0x1b2>
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006d00:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	dc35      	bgt.n	8006d72 <_dtoa_r+0x2a2>
 8006d06:	2301      	movs	r3, #1
 8006d08:	461a      	mov	r2, r3
 8006d0a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006d0e:	9221      	str	r2, [sp, #132]	@ 0x84
 8006d10:	e00b      	b.n	8006d2a <_dtoa_r+0x25a>
 8006d12:	2301      	movs	r3, #1
 8006d14:	e7f3      	b.n	8006cfe <_dtoa_r+0x22e>
 8006d16:	2300      	movs	r3, #0
 8006d18:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006d1a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006d1c:	18fb      	adds	r3, r7, r3
 8006d1e:	9308      	str	r3, [sp, #32]
 8006d20:	3301      	adds	r3, #1
 8006d22:	2b01      	cmp	r3, #1
 8006d24:	9307      	str	r3, [sp, #28]
 8006d26:	bfb8      	it	lt
 8006d28:	2301      	movlt	r3, #1
 8006d2a:	2100      	movs	r1, #0
 8006d2c:	2204      	movs	r2, #4
 8006d2e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006d32:	f102 0514 	add.w	r5, r2, #20
 8006d36:	429d      	cmp	r5, r3
 8006d38:	d91f      	bls.n	8006d7a <_dtoa_r+0x2aa>
 8006d3a:	6041      	str	r1, [r0, #4]
 8006d3c:	4658      	mov	r0, fp
 8006d3e:	f001 f823 	bl	8007d88 <_Balloc>
 8006d42:	4682      	mov	sl, r0
 8006d44:	2800      	cmp	r0, #0
 8006d46:	d139      	bne.n	8006dbc <_dtoa_r+0x2ec>
 8006d48:	4602      	mov	r2, r0
 8006d4a:	f240 11af 	movw	r1, #431	@ 0x1af
 8006d4e:	4b1a      	ldr	r3, [pc, #104]	@ (8006db8 <_dtoa_r+0x2e8>)
 8006d50:	e6d2      	b.n	8006af8 <_dtoa_r+0x28>
 8006d52:	2301      	movs	r3, #1
 8006d54:	e7e0      	b.n	8006d18 <_dtoa_r+0x248>
 8006d56:	2401      	movs	r4, #1
 8006d58:	2300      	movs	r3, #0
 8006d5a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006d5c:	9320      	str	r3, [sp, #128]	@ 0x80
 8006d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8006d62:	2200      	movs	r2, #0
 8006d64:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006d68:	2312      	movs	r3, #18
 8006d6a:	e7d0      	b.n	8006d0e <_dtoa_r+0x23e>
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006d70:	e7f5      	b.n	8006d5e <_dtoa_r+0x28e>
 8006d72:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006d74:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006d78:	e7d7      	b.n	8006d2a <_dtoa_r+0x25a>
 8006d7a:	3101      	adds	r1, #1
 8006d7c:	0052      	lsls	r2, r2, #1
 8006d7e:	e7d8      	b.n	8006d32 <_dtoa_r+0x262>
 8006d80:	636f4361 	.word	0x636f4361
 8006d84:	3fd287a7 	.word	0x3fd287a7
 8006d88:	8b60c8b3 	.word	0x8b60c8b3
 8006d8c:	3fc68a28 	.word	0x3fc68a28
 8006d90:	509f79fb 	.word	0x509f79fb
 8006d94:	3fd34413 	.word	0x3fd34413
 8006d98:	08009e31 	.word	0x08009e31
 8006d9c:	08009e48 	.word	0x08009e48
 8006da0:	7ff00000 	.word	0x7ff00000
 8006da4:	08009e2d 	.word	0x08009e2d
 8006da8:	08009df9 	.word	0x08009df9
 8006dac:	08009df8 	.word	0x08009df8
 8006db0:	3ff80000 	.word	0x3ff80000
 8006db4:	08009fa0 	.word	0x08009fa0
 8006db8:	08009ea0 	.word	0x08009ea0
 8006dbc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006dc0:	6018      	str	r0, [r3, #0]
 8006dc2:	9b07      	ldr	r3, [sp, #28]
 8006dc4:	2b0e      	cmp	r3, #14
 8006dc6:	f200 80a4 	bhi.w	8006f12 <_dtoa_r+0x442>
 8006dca:	2c00      	cmp	r4, #0
 8006dcc:	f000 80a1 	beq.w	8006f12 <_dtoa_r+0x442>
 8006dd0:	2f00      	cmp	r7, #0
 8006dd2:	dd33      	ble.n	8006e3c <_dtoa_r+0x36c>
 8006dd4:	4b86      	ldr	r3, [pc, #536]	@ (8006ff0 <_dtoa_r+0x520>)
 8006dd6:	f007 020f 	and.w	r2, r7, #15
 8006dda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006dde:	05f8      	lsls	r0, r7, #23
 8006de0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006de4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006de8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006dec:	d516      	bpl.n	8006e1c <_dtoa_r+0x34c>
 8006dee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006df2:	4b80      	ldr	r3, [pc, #512]	@ (8006ff4 <_dtoa_r+0x524>)
 8006df4:	2603      	movs	r6, #3
 8006df6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006dfa:	f7f9 fca1 	bl	8000740 <__aeabi_ddiv>
 8006dfe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e02:	f004 040f 	and.w	r4, r4, #15
 8006e06:	4d7b      	ldr	r5, [pc, #492]	@ (8006ff4 <_dtoa_r+0x524>)
 8006e08:	b954      	cbnz	r4, 8006e20 <_dtoa_r+0x350>
 8006e0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e12:	f7f9 fc95 	bl	8000740 <__aeabi_ddiv>
 8006e16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e1a:	e028      	b.n	8006e6e <_dtoa_r+0x39e>
 8006e1c:	2602      	movs	r6, #2
 8006e1e:	e7f2      	b.n	8006e06 <_dtoa_r+0x336>
 8006e20:	07e1      	lsls	r1, r4, #31
 8006e22:	d508      	bpl.n	8006e36 <_dtoa_r+0x366>
 8006e24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e28:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006e2c:	f7f9 fb5e 	bl	80004ec <__aeabi_dmul>
 8006e30:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006e34:	3601      	adds	r6, #1
 8006e36:	1064      	asrs	r4, r4, #1
 8006e38:	3508      	adds	r5, #8
 8006e3a:	e7e5      	b.n	8006e08 <_dtoa_r+0x338>
 8006e3c:	f000 80d2 	beq.w	8006fe4 <_dtoa_r+0x514>
 8006e40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006e44:	427c      	negs	r4, r7
 8006e46:	4b6a      	ldr	r3, [pc, #424]	@ (8006ff0 <_dtoa_r+0x520>)
 8006e48:	f004 020f 	and.w	r2, r4, #15
 8006e4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e54:	f7f9 fb4a 	bl	80004ec <__aeabi_dmul>
 8006e58:	2602      	movs	r6, #2
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e60:	4d64      	ldr	r5, [pc, #400]	@ (8006ff4 <_dtoa_r+0x524>)
 8006e62:	1124      	asrs	r4, r4, #4
 8006e64:	2c00      	cmp	r4, #0
 8006e66:	f040 80b2 	bne.w	8006fce <_dtoa_r+0x4fe>
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d1d3      	bne.n	8006e16 <_dtoa_r+0x346>
 8006e6e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006e72:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	f000 80b7 	beq.w	8006fe8 <_dtoa_r+0x518>
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	4620      	mov	r0, r4
 8006e7e:	4629      	mov	r1, r5
 8006e80:	4b5d      	ldr	r3, [pc, #372]	@ (8006ff8 <_dtoa_r+0x528>)
 8006e82:	f7f9 fda5 	bl	80009d0 <__aeabi_dcmplt>
 8006e86:	2800      	cmp	r0, #0
 8006e88:	f000 80ae 	beq.w	8006fe8 <_dtoa_r+0x518>
 8006e8c:	9b07      	ldr	r3, [sp, #28]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	f000 80aa 	beq.w	8006fe8 <_dtoa_r+0x518>
 8006e94:	9b08      	ldr	r3, [sp, #32]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	dd37      	ble.n	8006f0a <_dtoa_r+0x43a>
 8006e9a:	1e7b      	subs	r3, r7, #1
 8006e9c:	4620      	mov	r0, r4
 8006e9e:	9304      	str	r3, [sp, #16]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	4629      	mov	r1, r5
 8006ea4:	4b55      	ldr	r3, [pc, #340]	@ (8006ffc <_dtoa_r+0x52c>)
 8006ea6:	f7f9 fb21 	bl	80004ec <__aeabi_dmul>
 8006eaa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006eae:	9c08      	ldr	r4, [sp, #32]
 8006eb0:	3601      	adds	r6, #1
 8006eb2:	4630      	mov	r0, r6
 8006eb4:	f7f9 fab0 	bl	8000418 <__aeabi_i2d>
 8006eb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006ebc:	f7f9 fb16 	bl	80004ec <__aeabi_dmul>
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	4b4f      	ldr	r3, [pc, #316]	@ (8007000 <_dtoa_r+0x530>)
 8006ec4:	f7f9 f95c 	bl	8000180 <__adddf3>
 8006ec8:	4605      	mov	r5, r0
 8006eca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006ece:	2c00      	cmp	r4, #0
 8006ed0:	f040 809a 	bne.w	8007008 <_dtoa_r+0x538>
 8006ed4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	4b4a      	ldr	r3, [pc, #296]	@ (8007004 <_dtoa_r+0x534>)
 8006edc:	f7f9 f94e 	bl	800017c <__aeabi_dsub>
 8006ee0:	4602      	mov	r2, r0
 8006ee2:	460b      	mov	r3, r1
 8006ee4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006ee8:	462a      	mov	r2, r5
 8006eea:	4633      	mov	r3, r6
 8006eec:	f7f9 fd8e 	bl	8000a0c <__aeabi_dcmpgt>
 8006ef0:	2800      	cmp	r0, #0
 8006ef2:	f040 828e 	bne.w	8007412 <_dtoa_r+0x942>
 8006ef6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006efa:	462a      	mov	r2, r5
 8006efc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006f00:	f7f9 fd66 	bl	80009d0 <__aeabi_dcmplt>
 8006f04:	2800      	cmp	r0, #0
 8006f06:	f040 8127 	bne.w	8007158 <_dtoa_r+0x688>
 8006f0a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006f0e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006f12:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	f2c0 8163 	blt.w	80071e0 <_dtoa_r+0x710>
 8006f1a:	2f0e      	cmp	r7, #14
 8006f1c:	f300 8160 	bgt.w	80071e0 <_dtoa_r+0x710>
 8006f20:	4b33      	ldr	r3, [pc, #204]	@ (8006ff0 <_dtoa_r+0x520>)
 8006f22:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006f26:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006f2a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006f2e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	da03      	bge.n	8006f3c <_dtoa_r+0x46c>
 8006f34:	9b07      	ldr	r3, [sp, #28]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	f340 8100 	ble.w	800713c <_dtoa_r+0x66c>
 8006f3c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006f40:	4656      	mov	r6, sl
 8006f42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f46:	4620      	mov	r0, r4
 8006f48:	4629      	mov	r1, r5
 8006f4a:	f7f9 fbf9 	bl	8000740 <__aeabi_ddiv>
 8006f4e:	f7f9 fd7d 	bl	8000a4c <__aeabi_d2iz>
 8006f52:	4680      	mov	r8, r0
 8006f54:	f7f9 fa60 	bl	8000418 <__aeabi_i2d>
 8006f58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f5c:	f7f9 fac6 	bl	80004ec <__aeabi_dmul>
 8006f60:	4602      	mov	r2, r0
 8006f62:	460b      	mov	r3, r1
 8006f64:	4620      	mov	r0, r4
 8006f66:	4629      	mov	r1, r5
 8006f68:	f7f9 f908 	bl	800017c <__aeabi_dsub>
 8006f6c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006f70:	9d07      	ldr	r5, [sp, #28]
 8006f72:	f806 4b01 	strb.w	r4, [r6], #1
 8006f76:	eba6 040a 	sub.w	r4, r6, sl
 8006f7a:	42a5      	cmp	r5, r4
 8006f7c:	4602      	mov	r2, r0
 8006f7e:	460b      	mov	r3, r1
 8006f80:	f040 8116 	bne.w	80071b0 <_dtoa_r+0x6e0>
 8006f84:	f7f9 f8fc 	bl	8000180 <__adddf3>
 8006f88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f8c:	4604      	mov	r4, r0
 8006f8e:	460d      	mov	r5, r1
 8006f90:	f7f9 fd3c 	bl	8000a0c <__aeabi_dcmpgt>
 8006f94:	2800      	cmp	r0, #0
 8006f96:	f040 80f8 	bne.w	800718a <_dtoa_r+0x6ba>
 8006f9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f9e:	4620      	mov	r0, r4
 8006fa0:	4629      	mov	r1, r5
 8006fa2:	f7f9 fd0b 	bl	80009bc <__aeabi_dcmpeq>
 8006fa6:	b118      	cbz	r0, 8006fb0 <_dtoa_r+0x4e0>
 8006fa8:	f018 0f01 	tst.w	r8, #1
 8006fac:	f040 80ed 	bne.w	800718a <_dtoa_r+0x6ba>
 8006fb0:	4649      	mov	r1, r9
 8006fb2:	4658      	mov	r0, fp
 8006fb4:	f000 ff28 	bl	8007e08 <_Bfree>
 8006fb8:	2300      	movs	r3, #0
 8006fba:	7033      	strb	r3, [r6, #0]
 8006fbc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006fbe:	3701      	adds	r7, #1
 8006fc0:	601f      	str	r7, [r3, #0]
 8006fc2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	f000 8320 	beq.w	800760a <_dtoa_r+0xb3a>
 8006fca:	601e      	str	r6, [r3, #0]
 8006fcc:	e31d      	b.n	800760a <_dtoa_r+0xb3a>
 8006fce:	07e2      	lsls	r2, r4, #31
 8006fd0:	d505      	bpl.n	8006fde <_dtoa_r+0x50e>
 8006fd2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006fd6:	f7f9 fa89 	bl	80004ec <__aeabi_dmul>
 8006fda:	2301      	movs	r3, #1
 8006fdc:	3601      	adds	r6, #1
 8006fde:	1064      	asrs	r4, r4, #1
 8006fe0:	3508      	adds	r5, #8
 8006fe2:	e73f      	b.n	8006e64 <_dtoa_r+0x394>
 8006fe4:	2602      	movs	r6, #2
 8006fe6:	e742      	b.n	8006e6e <_dtoa_r+0x39e>
 8006fe8:	9c07      	ldr	r4, [sp, #28]
 8006fea:	9704      	str	r7, [sp, #16]
 8006fec:	e761      	b.n	8006eb2 <_dtoa_r+0x3e2>
 8006fee:	bf00      	nop
 8006ff0:	08009fa0 	.word	0x08009fa0
 8006ff4:	08009f78 	.word	0x08009f78
 8006ff8:	3ff00000 	.word	0x3ff00000
 8006ffc:	40240000 	.word	0x40240000
 8007000:	401c0000 	.word	0x401c0000
 8007004:	40140000 	.word	0x40140000
 8007008:	4b70      	ldr	r3, [pc, #448]	@ (80071cc <_dtoa_r+0x6fc>)
 800700a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800700c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007010:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007014:	4454      	add	r4, sl
 8007016:	2900      	cmp	r1, #0
 8007018:	d045      	beq.n	80070a6 <_dtoa_r+0x5d6>
 800701a:	2000      	movs	r0, #0
 800701c:	496c      	ldr	r1, [pc, #432]	@ (80071d0 <_dtoa_r+0x700>)
 800701e:	f7f9 fb8f 	bl	8000740 <__aeabi_ddiv>
 8007022:	4633      	mov	r3, r6
 8007024:	462a      	mov	r2, r5
 8007026:	f7f9 f8a9 	bl	800017c <__aeabi_dsub>
 800702a:	4656      	mov	r6, sl
 800702c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007030:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007034:	f7f9 fd0a 	bl	8000a4c <__aeabi_d2iz>
 8007038:	4605      	mov	r5, r0
 800703a:	f7f9 f9ed 	bl	8000418 <__aeabi_i2d>
 800703e:	4602      	mov	r2, r0
 8007040:	460b      	mov	r3, r1
 8007042:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007046:	f7f9 f899 	bl	800017c <__aeabi_dsub>
 800704a:	4602      	mov	r2, r0
 800704c:	460b      	mov	r3, r1
 800704e:	3530      	adds	r5, #48	@ 0x30
 8007050:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007054:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007058:	f806 5b01 	strb.w	r5, [r6], #1
 800705c:	f7f9 fcb8 	bl	80009d0 <__aeabi_dcmplt>
 8007060:	2800      	cmp	r0, #0
 8007062:	d163      	bne.n	800712c <_dtoa_r+0x65c>
 8007064:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007068:	2000      	movs	r0, #0
 800706a:	495a      	ldr	r1, [pc, #360]	@ (80071d4 <_dtoa_r+0x704>)
 800706c:	f7f9 f886 	bl	800017c <__aeabi_dsub>
 8007070:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007074:	f7f9 fcac 	bl	80009d0 <__aeabi_dcmplt>
 8007078:	2800      	cmp	r0, #0
 800707a:	f040 8087 	bne.w	800718c <_dtoa_r+0x6bc>
 800707e:	42a6      	cmp	r6, r4
 8007080:	f43f af43 	beq.w	8006f0a <_dtoa_r+0x43a>
 8007084:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007088:	2200      	movs	r2, #0
 800708a:	4b53      	ldr	r3, [pc, #332]	@ (80071d8 <_dtoa_r+0x708>)
 800708c:	f7f9 fa2e 	bl	80004ec <__aeabi_dmul>
 8007090:	2200      	movs	r2, #0
 8007092:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007096:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800709a:	4b4f      	ldr	r3, [pc, #316]	@ (80071d8 <_dtoa_r+0x708>)
 800709c:	f7f9 fa26 	bl	80004ec <__aeabi_dmul>
 80070a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80070a4:	e7c4      	b.n	8007030 <_dtoa_r+0x560>
 80070a6:	4631      	mov	r1, r6
 80070a8:	4628      	mov	r0, r5
 80070aa:	f7f9 fa1f 	bl	80004ec <__aeabi_dmul>
 80070ae:	4656      	mov	r6, sl
 80070b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80070b4:	9413      	str	r4, [sp, #76]	@ 0x4c
 80070b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070ba:	f7f9 fcc7 	bl	8000a4c <__aeabi_d2iz>
 80070be:	4605      	mov	r5, r0
 80070c0:	f7f9 f9aa 	bl	8000418 <__aeabi_i2d>
 80070c4:	4602      	mov	r2, r0
 80070c6:	460b      	mov	r3, r1
 80070c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070cc:	f7f9 f856 	bl	800017c <__aeabi_dsub>
 80070d0:	4602      	mov	r2, r0
 80070d2:	460b      	mov	r3, r1
 80070d4:	3530      	adds	r5, #48	@ 0x30
 80070d6:	f806 5b01 	strb.w	r5, [r6], #1
 80070da:	42a6      	cmp	r6, r4
 80070dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80070e0:	f04f 0200 	mov.w	r2, #0
 80070e4:	d124      	bne.n	8007130 <_dtoa_r+0x660>
 80070e6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80070ea:	4b39      	ldr	r3, [pc, #228]	@ (80071d0 <_dtoa_r+0x700>)
 80070ec:	f7f9 f848 	bl	8000180 <__adddf3>
 80070f0:	4602      	mov	r2, r0
 80070f2:	460b      	mov	r3, r1
 80070f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070f8:	f7f9 fc88 	bl	8000a0c <__aeabi_dcmpgt>
 80070fc:	2800      	cmp	r0, #0
 80070fe:	d145      	bne.n	800718c <_dtoa_r+0x6bc>
 8007100:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007104:	2000      	movs	r0, #0
 8007106:	4932      	ldr	r1, [pc, #200]	@ (80071d0 <_dtoa_r+0x700>)
 8007108:	f7f9 f838 	bl	800017c <__aeabi_dsub>
 800710c:	4602      	mov	r2, r0
 800710e:	460b      	mov	r3, r1
 8007110:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007114:	f7f9 fc5c 	bl	80009d0 <__aeabi_dcmplt>
 8007118:	2800      	cmp	r0, #0
 800711a:	f43f aef6 	beq.w	8006f0a <_dtoa_r+0x43a>
 800711e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007120:	1e73      	subs	r3, r6, #1
 8007122:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007124:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007128:	2b30      	cmp	r3, #48	@ 0x30
 800712a:	d0f8      	beq.n	800711e <_dtoa_r+0x64e>
 800712c:	9f04      	ldr	r7, [sp, #16]
 800712e:	e73f      	b.n	8006fb0 <_dtoa_r+0x4e0>
 8007130:	4b29      	ldr	r3, [pc, #164]	@ (80071d8 <_dtoa_r+0x708>)
 8007132:	f7f9 f9db 	bl	80004ec <__aeabi_dmul>
 8007136:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800713a:	e7bc      	b.n	80070b6 <_dtoa_r+0x5e6>
 800713c:	d10c      	bne.n	8007158 <_dtoa_r+0x688>
 800713e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007142:	2200      	movs	r2, #0
 8007144:	4b25      	ldr	r3, [pc, #148]	@ (80071dc <_dtoa_r+0x70c>)
 8007146:	f7f9 f9d1 	bl	80004ec <__aeabi_dmul>
 800714a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800714e:	f7f9 fc53 	bl	80009f8 <__aeabi_dcmpge>
 8007152:	2800      	cmp	r0, #0
 8007154:	f000 815b 	beq.w	800740e <_dtoa_r+0x93e>
 8007158:	2400      	movs	r4, #0
 800715a:	4625      	mov	r5, r4
 800715c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800715e:	4656      	mov	r6, sl
 8007160:	43db      	mvns	r3, r3
 8007162:	9304      	str	r3, [sp, #16]
 8007164:	2700      	movs	r7, #0
 8007166:	4621      	mov	r1, r4
 8007168:	4658      	mov	r0, fp
 800716a:	f000 fe4d 	bl	8007e08 <_Bfree>
 800716e:	2d00      	cmp	r5, #0
 8007170:	d0dc      	beq.n	800712c <_dtoa_r+0x65c>
 8007172:	b12f      	cbz	r7, 8007180 <_dtoa_r+0x6b0>
 8007174:	42af      	cmp	r7, r5
 8007176:	d003      	beq.n	8007180 <_dtoa_r+0x6b0>
 8007178:	4639      	mov	r1, r7
 800717a:	4658      	mov	r0, fp
 800717c:	f000 fe44 	bl	8007e08 <_Bfree>
 8007180:	4629      	mov	r1, r5
 8007182:	4658      	mov	r0, fp
 8007184:	f000 fe40 	bl	8007e08 <_Bfree>
 8007188:	e7d0      	b.n	800712c <_dtoa_r+0x65c>
 800718a:	9704      	str	r7, [sp, #16]
 800718c:	4633      	mov	r3, r6
 800718e:	461e      	mov	r6, r3
 8007190:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007194:	2a39      	cmp	r2, #57	@ 0x39
 8007196:	d107      	bne.n	80071a8 <_dtoa_r+0x6d8>
 8007198:	459a      	cmp	sl, r3
 800719a:	d1f8      	bne.n	800718e <_dtoa_r+0x6be>
 800719c:	9a04      	ldr	r2, [sp, #16]
 800719e:	3201      	adds	r2, #1
 80071a0:	9204      	str	r2, [sp, #16]
 80071a2:	2230      	movs	r2, #48	@ 0x30
 80071a4:	f88a 2000 	strb.w	r2, [sl]
 80071a8:	781a      	ldrb	r2, [r3, #0]
 80071aa:	3201      	adds	r2, #1
 80071ac:	701a      	strb	r2, [r3, #0]
 80071ae:	e7bd      	b.n	800712c <_dtoa_r+0x65c>
 80071b0:	2200      	movs	r2, #0
 80071b2:	4b09      	ldr	r3, [pc, #36]	@ (80071d8 <_dtoa_r+0x708>)
 80071b4:	f7f9 f99a 	bl	80004ec <__aeabi_dmul>
 80071b8:	2200      	movs	r2, #0
 80071ba:	2300      	movs	r3, #0
 80071bc:	4604      	mov	r4, r0
 80071be:	460d      	mov	r5, r1
 80071c0:	f7f9 fbfc 	bl	80009bc <__aeabi_dcmpeq>
 80071c4:	2800      	cmp	r0, #0
 80071c6:	f43f aebc 	beq.w	8006f42 <_dtoa_r+0x472>
 80071ca:	e6f1      	b.n	8006fb0 <_dtoa_r+0x4e0>
 80071cc:	08009fa0 	.word	0x08009fa0
 80071d0:	3fe00000 	.word	0x3fe00000
 80071d4:	3ff00000 	.word	0x3ff00000
 80071d8:	40240000 	.word	0x40240000
 80071dc:	40140000 	.word	0x40140000
 80071e0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80071e2:	2a00      	cmp	r2, #0
 80071e4:	f000 80db 	beq.w	800739e <_dtoa_r+0x8ce>
 80071e8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80071ea:	2a01      	cmp	r2, #1
 80071ec:	f300 80bf 	bgt.w	800736e <_dtoa_r+0x89e>
 80071f0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80071f2:	2a00      	cmp	r2, #0
 80071f4:	f000 80b7 	beq.w	8007366 <_dtoa_r+0x896>
 80071f8:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80071fc:	4646      	mov	r6, r8
 80071fe:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007200:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007202:	2101      	movs	r1, #1
 8007204:	441a      	add	r2, r3
 8007206:	4658      	mov	r0, fp
 8007208:	4498      	add	r8, r3
 800720a:	9209      	str	r2, [sp, #36]	@ 0x24
 800720c:	f000 fefa 	bl	8008004 <__i2b>
 8007210:	4605      	mov	r5, r0
 8007212:	b15e      	cbz	r6, 800722c <_dtoa_r+0x75c>
 8007214:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007216:	2b00      	cmp	r3, #0
 8007218:	dd08      	ble.n	800722c <_dtoa_r+0x75c>
 800721a:	42b3      	cmp	r3, r6
 800721c:	bfa8      	it	ge
 800721e:	4633      	movge	r3, r6
 8007220:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007222:	eba8 0803 	sub.w	r8, r8, r3
 8007226:	1af6      	subs	r6, r6, r3
 8007228:	1ad3      	subs	r3, r2, r3
 800722a:	9309      	str	r3, [sp, #36]	@ 0x24
 800722c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800722e:	b1f3      	cbz	r3, 800726e <_dtoa_r+0x79e>
 8007230:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007232:	2b00      	cmp	r3, #0
 8007234:	f000 80b7 	beq.w	80073a6 <_dtoa_r+0x8d6>
 8007238:	b18c      	cbz	r4, 800725e <_dtoa_r+0x78e>
 800723a:	4629      	mov	r1, r5
 800723c:	4622      	mov	r2, r4
 800723e:	4658      	mov	r0, fp
 8007240:	f000 ff9e 	bl	8008180 <__pow5mult>
 8007244:	464a      	mov	r2, r9
 8007246:	4601      	mov	r1, r0
 8007248:	4605      	mov	r5, r0
 800724a:	4658      	mov	r0, fp
 800724c:	f000 fef0 	bl	8008030 <__multiply>
 8007250:	4649      	mov	r1, r9
 8007252:	9004      	str	r0, [sp, #16]
 8007254:	4658      	mov	r0, fp
 8007256:	f000 fdd7 	bl	8007e08 <_Bfree>
 800725a:	9b04      	ldr	r3, [sp, #16]
 800725c:	4699      	mov	r9, r3
 800725e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007260:	1b1a      	subs	r2, r3, r4
 8007262:	d004      	beq.n	800726e <_dtoa_r+0x79e>
 8007264:	4649      	mov	r1, r9
 8007266:	4658      	mov	r0, fp
 8007268:	f000 ff8a 	bl	8008180 <__pow5mult>
 800726c:	4681      	mov	r9, r0
 800726e:	2101      	movs	r1, #1
 8007270:	4658      	mov	r0, fp
 8007272:	f000 fec7 	bl	8008004 <__i2b>
 8007276:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007278:	4604      	mov	r4, r0
 800727a:	2b00      	cmp	r3, #0
 800727c:	f000 81c9 	beq.w	8007612 <_dtoa_r+0xb42>
 8007280:	461a      	mov	r2, r3
 8007282:	4601      	mov	r1, r0
 8007284:	4658      	mov	r0, fp
 8007286:	f000 ff7b 	bl	8008180 <__pow5mult>
 800728a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800728c:	4604      	mov	r4, r0
 800728e:	2b01      	cmp	r3, #1
 8007290:	f300 808f 	bgt.w	80073b2 <_dtoa_r+0x8e2>
 8007294:	9b02      	ldr	r3, [sp, #8]
 8007296:	2b00      	cmp	r3, #0
 8007298:	f040 8087 	bne.w	80073aa <_dtoa_r+0x8da>
 800729c:	9b03      	ldr	r3, [sp, #12]
 800729e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	f040 8083 	bne.w	80073ae <_dtoa_r+0x8de>
 80072a8:	9b03      	ldr	r3, [sp, #12]
 80072aa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80072ae:	0d1b      	lsrs	r3, r3, #20
 80072b0:	051b      	lsls	r3, r3, #20
 80072b2:	b12b      	cbz	r3, 80072c0 <_dtoa_r+0x7f0>
 80072b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072b6:	f108 0801 	add.w	r8, r8, #1
 80072ba:	3301      	adds	r3, #1
 80072bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80072be:	2301      	movs	r3, #1
 80072c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80072c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	f000 81aa 	beq.w	800761e <_dtoa_r+0xb4e>
 80072ca:	6923      	ldr	r3, [r4, #16]
 80072cc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80072d0:	6918      	ldr	r0, [r3, #16]
 80072d2:	f000 fe4b 	bl	8007f6c <__hi0bits>
 80072d6:	f1c0 0020 	rsb	r0, r0, #32
 80072da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072dc:	4418      	add	r0, r3
 80072de:	f010 001f 	ands.w	r0, r0, #31
 80072e2:	d071      	beq.n	80073c8 <_dtoa_r+0x8f8>
 80072e4:	f1c0 0320 	rsb	r3, r0, #32
 80072e8:	2b04      	cmp	r3, #4
 80072ea:	dd65      	ble.n	80073b8 <_dtoa_r+0x8e8>
 80072ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072ee:	f1c0 001c 	rsb	r0, r0, #28
 80072f2:	4403      	add	r3, r0
 80072f4:	4480      	add	r8, r0
 80072f6:	4406      	add	r6, r0
 80072f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80072fa:	f1b8 0f00 	cmp.w	r8, #0
 80072fe:	dd05      	ble.n	800730c <_dtoa_r+0x83c>
 8007300:	4649      	mov	r1, r9
 8007302:	4642      	mov	r2, r8
 8007304:	4658      	mov	r0, fp
 8007306:	f000 ff95 	bl	8008234 <__lshift>
 800730a:	4681      	mov	r9, r0
 800730c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800730e:	2b00      	cmp	r3, #0
 8007310:	dd05      	ble.n	800731e <_dtoa_r+0x84e>
 8007312:	4621      	mov	r1, r4
 8007314:	461a      	mov	r2, r3
 8007316:	4658      	mov	r0, fp
 8007318:	f000 ff8c 	bl	8008234 <__lshift>
 800731c:	4604      	mov	r4, r0
 800731e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007320:	2b00      	cmp	r3, #0
 8007322:	d053      	beq.n	80073cc <_dtoa_r+0x8fc>
 8007324:	4621      	mov	r1, r4
 8007326:	4648      	mov	r0, r9
 8007328:	f000 fff0 	bl	800830c <__mcmp>
 800732c:	2800      	cmp	r0, #0
 800732e:	da4d      	bge.n	80073cc <_dtoa_r+0x8fc>
 8007330:	1e7b      	subs	r3, r7, #1
 8007332:	4649      	mov	r1, r9
 8007334:	9304      	str	r3, [sp, #16]
 8007336:	220a      	movs	r2, #10
 8007338:	2300      	movs	r3, #0
 800733a:	4658      	mov	r0, fp
 800733c:	f000 fd86 	bl	8007e4c <__multadd>
 8007340:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007342:	4681      	mov	r9, r0
 8007344:	2b00      	cmp	r3, #0
 8007346:	f000 816c 	beq.w	8007622 <_dtoa_r+0xb52>
 800734a:	2300      	movs	r3, #0
 800734c:	4629      	mov	r1, r5
 800734e:	220a      	movs	r2, #10
 8007350:	4658      	mov	r0, fp
 8007352:	f000 fd7b 	bl	8007e4c <__multadd>
 8007356:	9b08      	ldr	r3, [sp, #32]
 8007358:	4605      	mov	r5, r0
 800735a:	2b00      	cmp	r3, #0
 800735c:	dc61      	bgt.n	8007422 <_dtoa_r+0x952>
 800735e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007360:	2b02      	cmp	r3, #2
 8007362:	dc3b      	bgt.n	80073dc <_dtoa_r+0x90c>
 8007364:	e05d      	b.n	8007422 <_dtoa_r+0x952>
 8007366:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007368:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800736c:	e746      	b.n	80071fc <_dtoa_r+0x72c>
 800736e:	9b07      	ldr	r3, [sp, #28]
 8007370:	1e5c      	subs	r4, r3, #1
 8007372:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007374:	42a3      	cmp	r3, r4
 8007376:	bfbf      	itttt	lt
 8007378:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800737a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800737c:	1ae3      	sublt	r3, r4, r3
 800737e:	18d2      	addlt	r2, r2, r3
 8007380:	bfa8      	it	ge
 8007382:	1b1c      	subge	r4, r3, r4
 8007384:	9b07      	ldr	r3, [sp, #28]
 8007386:	bfbe      	ittt	lt
 8007388:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800738a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800738c:	2400      	movlt	r4, #0
 800738e:	2b00      	cmp	r3, #0
 8007390:	bfb5      	itete	lt
 8007392:	eba8 0603 	sublt.w	r6, r8, r3
 8007396:	4646      	movge	r6, r8
 8007398:	2300      	movlt	r3, #0
 800739a:	9b07      	ldrge	r3, [sp, #28]
 800739c:	e730      	b.n	8007200 <_dtoa_r+0x730>
 800739e:	4646      	mov	r6, r8
 80073a0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80073a2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80073a4:	e735      	b.n	8007212 <_dtoa_r+0x742>
 80073a6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80073a8:	e75c      	b.n	8007264 <_dtoa_r+0x794>
 80073aa:	2300      	movs	r3, #0
 80073ac:	e788      	b.n	80072c0 <_dtoa_r+0x7f0>
 80073ae:	9b02      	ldr	r3, [sp, #8]
 80073b0:	e786      	b.n	80072c0 <_dtoa_r+0x7f0>
 80073b2:	2300      	movs	r3, #0
 80073b4:	930a      	str	r3, [sp, #40]	@ 0x28
 80073b6:	e788      	b.n	80072ca <_dtoa_r+0x7fa>
 80073b8:	d09f      	beq.n	80072fa <_dtoa_r+0x82a>
 80073ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80073bc:	331c      	adds	r3, #28
 80073be:	441a      	add	r2, r3
 80073c0:	4498      	add	r8, r3
 80073c2:	441e      	add	r6, r3
 80073c4:	9209      	str	r2, [sp, #36]	@ 0x24
 80073c6:	e798      	b.n	80072fa <_dtoa_r+0x82a>
 80073c8:	4603      	mov	r3, r0
 80073ca:	e7f6      	b.n	80073ba <_dtoa_r+0x8ea>
 80073cc:	9b07      	ldr	r3, [sp, #28]
 80073ce:	9704      	str	r7, [sp, #16]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	dc20      	bgt.n	8007416 <_dtoa_r+0x946>
 80073d4:	9308      	str	r3, [sp, #32]
 80073d6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80073d8:	2b02      	cmp	r3, #2
 80073da:	dd1e      	ble.n	800741a <_dtoa_r+0x94a>
 80073dc:	9b08      	ldr	r3, [sp, #32]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	f47f aebc 	bne.w	800715c <_dtoa_r+0x68c>
 80073e4:	4621      	mov	r1, r4
 80073e6:	2205      	movs	r2, #5
 80073e8:	4658      	mov	r0, fp
 80073ea:	f000 fd2f 	bl	8007e4c <__multadd>
 80073ee:	4601      	mov	r1, r0
 80073f0:	4604      	mov	r4, r0
 80073f2:	4648      	mov	r0, r9
 80073f4:	f000 ff8a 	bl	800830c <__mcmp>
 80073f8:	2800      	cmp	r0, #0
 80073fa:	f77f aeaf 	ble.w	800715c <_dtoa_r+0x68c>
 80073fe:	2331      	movs	r3, #49	@ 0x31
 8007400:	4656      	mov	r6, sl
 8007402:	f806 3b01 	strb.w	r3, [r6], #1
 8007406:	9b04      	ldr	r3, [sp, #16]
 8007408:	3301      	adds	r3, #1
 800740a:	9304      	str	r3, [sp, #16]
 800740c:	e6aa      	b.n	8007164 <_dtoa_r+0x694>
 800740e:	9c07      	ldr	r4, [sp, #28]
 8007410:	9704      	str	r7, [sp, #16]
 8007412:	4625      	mov	r5, r4
 8007414:	e7f3      	b.n	80073fe <_dtoa_r+0x92e>
 8007416:	9b07      	ldr	r3, [sp, #28]
 8007418:	9308      	str	r3, [sp, #32]
 800741a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800741c:	2b00      	cmp	r3, #0
 800741e:	f000 8104 	beq.w	800762a <_dtoa_r+0xb5a>
 8007422:	2e00      	cmp	r6, #0
 8007424:	dd05      	ble.n	8007432 <_dtoa_r+0x962>
 8007426:	4629      	mov	r1, r5
 8007428:	4632      	mov	r2, r6
 800742a:	4658      	mov	r0, fp
 800742c:	f000 ff02 	bl	8008234 <__lshift>
 8007430:	4605      	mov	r5, r0
 8007432:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007434:	2b00      	cmp	r3, #0
 8007436:	d05a      	beq.n	80074ee <_dtoa_r+0xa1e>
 8007438:	4658      	mov	r0, fp
 800743a:	6869      	ldr	r1, [r5, #4]
 800743c:	f000 fca4 	bl	8007d88 <_Balloc>
 8007440:	4606      	mov	r6, r0
 8007442:	b928      	cbnz	r0, 8007450 <_dtoa_r+0x980>
 8007444:	4602      	mov	r2, r0
 8007446:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800744a:	4b83      	ldr	r3, [pc, #524]	@ (8007658 <_dtoa_r+0xb88>)
 800744c:	f7ff bb54 	b.w	8006af8 <_dtoa_r+0x28>
 8007450:	692a      	ldr	r2, [r5, #16]
 8007452:	f105 010c 	add.w	r1, r5, #12
 8007456:	3202      	adds	r2, #2
 8007458:	0092      	lsls	r2, r2, #2
 800745a:	300c      	adds	r0, #12
 800745c:	f7ff fa99 	bl	8006992 <memcpy>
 8007460:	2201      	movs	r2, #1
 8007462:	4631      	mov	r1, r6
 8007464:	4658      	mov	r0, fp
 8007466:	f000 fee5 	bl	8008234 <__lshift>
 800746a:	462f      	mov	r7, r5
 800746c:	4605      	mov	r5, r0
 800746e:	f10a 0301 	add.w	r3, sl, #1
 8007472:	9307      	str	r3, [sp, #28]
 8007474:	9b08      	ldr	r3, [sp, #32]
 8007476:	4453      	add	r3, sl
 8007478:	930b      	str	r3, [sp, #44]	@ 0x2c
 800747a:	9b02      	ldr	r3, [sp, #8]
 800747c:	f003 0301 	and.w	r3, r3, #1
 8007480:	930a      	str	r3, [sp, #40]	@ 0x28
 8007482:	9b07      	ldr	r3, [sp, #28]
 8007484:	4621      	mov	r1, r4
 8007486:	3b01      	subs	r3, #1
 8007488:	4648      	mov	r0, r9
 800748a:	9302      	str	r3, [sp, #8]
 800748c:	f7ff fa96 	bl	80069bc <quorem>
 8007490:	4639      	mov	r1, r7
 8007492:	9008      	str	r0, [sp, #32]
 8007494:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007498:	4648      	mov	r0, r9
 800749a:	f000 ff37 	bl	800830c <__mcmp>
 800749e:	462a      	mov	r2, r5
 80074a0:	9009      	str	r0, [sp, #36]	@ 0x24
 80074a2:	4621      	mov	r1, r4
 80074a4:	4658      	mov	r0, fp
 80074a6:	f000 ff4d 	bl	8008344 <__mdiff>
 80074aa:	68c2      	ldr	r2, [r0, #12]
 80074ac:	4606      	mov	r6, r0
 80074ae:	bb02      	cbnz	r2, 80074f2 <_dtoa_r+0xa22>
 80074b0:	4601      	mov	r1, r0
 80074b2:	4648      	mov	r0, r9
 80074b4:	f000 ff2a 	bl	800830c <__mcmp>
 80074b8:	4602      	mov	r2, r0
 80074ba:	4631      	mov	r1, r6
 80074bc:	4658      	mov	r0, fp
 80074be:	920c      	str	r2, [sp, #48]	@ 0x30
 80074c0:	f000 fca2 	bl	8007e08 <_Bfree>
 80074c4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80074c6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80074c8:	9e07      	ldr	r6, [sp, #28]
 80074ca:	ea43 0102 	orr.w	r1, r3, r2
 80074ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80074d0:	4319      	orrs	r1, r3
 80074d2:	d110      	bne.n	80074f6 <_dtoa_r+0xa26>
 80074d4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80074d8:	d029      	beq.n	800752e <_dtoa_r+0xa5e>
 80074da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074dc:	2b00      	cmp	r3, #0
 80074de:	dd02      	ble.n	80074e6 <_dtoa_r+0xa16>
 80074e0:	9b08      	ldr	r3, [sp, #32]
 80074e2:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80074e6:	9b02      	ldr	r3, [sp, #8]
 80074e8:	f883 8000 	strb.w	r8, [r3]
 80074ec:	e63b      	b.n	8007166 <_dtoa_r+0x696>
 80074ee:	4628      	mov	r0, r5
 80074f0:	e7bb      	b.n	800746a <_dtoa_r+0x99a>
 80074f2:	2201      	movs	r2, #1
 80074f4:	e7e1      	b.n	80074ba <_dtoa_r+0x9ea>
 80074f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	db04      	blt.n	8007506 <_dtoa_r+0xa36>
 80074fc:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80074fe:	430b      	orrs	r3, r1
 8007500:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007502:	430b      	orrs	r3, r1
 8007504:	d120      	bne.n	8007548 <_dtoa_r+0xa78>
 8007506:	2a00      	cmp	r2, #0
 8007508:	dded      	ble.n	80074e6 <_dtoa_r+0xa16>
 800750a:	4649      	mov	r1, r9
 800750c:	2201      	movs	r2, #1
 800750e:	4658      	mov	r0, fp
 8007510:	f000 fe90 	bl	8008234 <__lshift>
 8007514:	4621      	mov	r1, r4
 8007516:	4681      	mov	r9, r0
 8007518:	f000 fef8 	bl	800830c <__mcmp>
 800751c:	2800      	cmp	r0, #0
 800751e:	dc03      	bgt.n	8007528 <_dtoa_r+0xa58>
 8007520:	d1e1      	bne.n	80074e6 <_dtoa_r+0xa16>
 8007522:	f018 0f01 	tst.w	r8, #1
 8007526:	d0de      	beq.n	80074e6 <_dtoa_r+0xa16>
 8007528:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800752c:	d1d8      	bne.n	80074e0 <_dtoa_r+0xa10>
 800752e:	2339      	movs	r3, #57	@ 0x39
 8007530:	9a02      	ldr	r2, [sp, #8]
 8007532:	7013      	strb	r3, [r2, #0]
 8007534:	4633      	mov	r3, r6
 8007536:	461e      	mov	r6, r3
 8007538:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800753c:	3b01      	subs	r3, #1
 800753e:	2a39      	cmp	r2, #57	@ 0x39
 8007540:	d052      	beq.n	80075e8 <_dtoa_r+0xb18>
 8007542:	3201      	adds	r2, #1
 8007544:	701a      	strb	r2, [r3, #0]
 8007546:	e60e      	b.n	8007166 <_dtoa_r+0x696>
 8007548:	2a00      	cmp	r2, #0
 800754a:	dd07      	ble.n	800755c <_dtoa_r+0xa8c>
 800754c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007550:	d0ed      	beq.n	800752e <_dtoa_r+0xa5e>
 8007552:	9a02      	ldr	r2, [sp, #8]
 8007554:	f108 0301 	add.w	r3, r8, #1
 8007558:	7013      	strb	r3, [r2, #0]
 800755a:	e604      	b.n	8007166 <_dtoa_r+0x696>
 800755c:	9b07      	ldr	r3, [sp, #28]
 800755e:	9a07      	ldr	r2, [sp, #28]
 8007560:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007564:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007566:	4293      	cmp	r3, r2
 8007568:	d028      	beq.n	80075bc <_dtoa_r+0xaec>
 800756a:	4649      	mov	r1, r9
 800756c:	2300      	movs	r3, #0
 800756e:	220a      	movs	r2, #10
 8007570:	4658      	mov	r0, fp
 8007572:	f000 fc6b 	bl	8007e4c <__multadd>
 8007576:	42af      	cmp	r7, r5
 8007578:	4681      	mov	r9, r0
 800757a:	f04f 0300 	mov.w	r3, #0
 800757e:	f04f 020a 	mov.w	r2, #10
 8007582:	4639      	mov	r1, r7
 8007584:	4658      	mov	r0, fp
 8007586:	d107      	bne.n	8007598 <_dtoa_r+0xac8>
 8007588:	f000 fc60 	bl	8007e4c <__multadd>
 800758c:	4607      	mov	r7, r0
 800758e:	4605      	mov	r5, r0
 8007590:	9b07      	ldr	r3, [sp, #28]
 8007592:	3301      	adds	r3, #1
 8007594:	9307      	str	r3, [sp, #28]
 8007596:	e774      	b.n	8007482 <_dtoa_r+0x9b2>
 8007598:	f000 fc58 	bl	8007e4c <__multadd>
 800759c:	4629      	mov	r1, r5
 800759e:	4607      	mov	r7, r0
 80075a0:	2300      	movs	r3, #0
 80075a2:	220a      	movs	r2, #10
 80075a4:	4658      	mov	r0, fp
 80075a6:	f000 fc51 	bl	8007e4c <__multadd>
 80075aa:	4605      	mov	r5, r0
 80075ac:	e7f0      	b.n	8007590 <_dtoa_r+0xac0>
 80075ae:	9b08      	ldr	r3, [sp, #32]
 80075b0:	2700      	movs	r7, #0
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	bfcc      	ite	gt
 80075b6:	461e      	movgt	r6, r3
 80075b8:	2601      	movle	r6, #1
 80075ba:	4456      	add	r6, sl
 80075bc:	4649      	mov	r1, r9
 80075be:	2201      	movs	r2, #1
 80075c0:	4658      	mov	r0, fp
 80075c2:	f000 fe37 	bl	8008234 <__lshift>
 80075c6:	4621      	mov	r1, r4
 80075c8:	4681      	mov	r9, r0
 80075ca:	f000 fe9f 	bl	800830c <__mcmp>
 80075ce:	2800      	cmp	r0, #0
 80075d0:	dcb0      	bgt.n	8007534 <_dtoa_r+0xa64>
 80075d2:	d102      	bne.n	80075da <_dtoa_r+0xb0a>
 80075d4:	f018 0f01 	tst.w	r8, #1
 80075d8:	d1ac      	bne.n	8007534 <_dtoa_r+0xa64>
 80075da:	4633      	mov	r3, r6
 80075dc:	461e      	mov	r6, r3
 80075de:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80075e2:	2a30      	cmp	r2, #48	@ 0x30
 80075e4:	d0fa      	beq.n	80075dc <_dtoa_r+0xb0c>
 80075e6:	e5be      	b.n	8007166 <_dtoa_r+0x696>
 80075e8:	459a      	cmp	sl, r3
 80075ea:	d1a4      	bne.n	8007536 <_dtoa_r+0xa66>
 80075ec:	9b04      	ldr	r3, [sp, #16]
 80075ee:	3301      	adds	r3, #1
 80075f0:	9304      	str	r3, [sp, #16]
 80075f2:	2331      	movs	r3, #49	@ 0x31
 80075f4:	f88a 3000 	strb.w	r3, [sl]
 80075f8:	e5b5      	b.n	8007166 <_dtoa_r+0x696>
 80075fa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80075fc:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800765c <_dtoa_r+0xb8c>
 8007600:	b11b      	cbz	r3, 800760a <_dtoa_r+0xb3a>
 8007602:	f10a 0308 	add.w	r3, sl, #8
 8007606:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007608:	6013      	str	r3, [r2, #0]
 800760a:	4650      	mov	r0, sl
 800760c:	b017      	add	sp, #92	@ 0x5c
 800760e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007612:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007614:	2b01      	cmp	r3, #1
 8007616:	f77f ae3d 	ble.w	8007294 <_dtoa_r+0x7c4>
 800761a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800761c:	930a      	str	r3, [sp, #40]	@ 0x28
 800761e:	2001      	movs	r0, #1
 8007620:	e65b      	b.n	80072da <_dtoa_r+0x80a>
 8007622:	9b08      	ldr	r3, [sp, #32]
 8007624:	2b00      	cmp	r3, #0
 8007626:	f77f aed6 	ble.w	80073d6 <_dtoa_r+0x906>
 800762a:	4656      	mov	r6, sl
 800762c:	4621      	mov	r1, r4
 800762e:	4648      	mov	r0, r9
 8007630:	f7ff f9c4 	bl	80069bc <quorem>
 8007634:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007638:	9b08      	ldr	r3, [sp, #32]
 800763a:	f806 8b01 	strb.w	r8, [r6], #1
 800763e:	eba6 020a 	sub.w	r2, r6, sl
 8007642:	4293      	cmp	r3, r2
 8007644:	ddb3      	ble.n	80075ae <_dtoa_r+0xade>
 8007646:	4649      	mov	r1, r9
 8007648:	2300      	movs	r3, #0
 800764a:	220a      	movs	r2, #10
 800764c:	4658      	mov	r0, fp
 800764e:	f000 fbfd 	bl	8007e4c <__multadd>
 8007652:	4681      	mov	r9, r0
 8007654:	e7ea      	b.n	800762c <_dtoa_r+0xb5c>
 8007656:	bf00      	nop
 8007658:	08009ea0 	.word	0x08009ea0
 800765c:	08009e24 	.word	0x08009e24

08007660 <_free_r>:
 8007660:	b538      	push	{r3, r4, r5, lr}
 8007662:	4605      	mov	r5, r0
 8007664:	2900      	cmp	r1, #0
 8007666:	d040      	beq.n	80076ea <_free_r+0x8a>
 8007668:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800766c:	1f0c      	subs	r4, r1, #4
 800766e:	2b00      	cmp	r3, #0
 8007670:	bfb8      	it	lt
 8007672:	18e4      	addlt	r4, r4, r3
 8007674:	f7fd fd48 	bl	8005108 <__malloc_lock>
 8007678:	4a1c      	ldr	r2, [pc, #112]	@ (80076ec <_free_r+0x8c>)
 800767a:	6813      	ldr	r3, [r2, #0]
 800767c:	b933      	cbnz	r3, 800768c <_free_r+0x2c>
 800767e:	6063      	str	r3, [r4, #4]
 8007680:	6014      	str	r4, [r2, #0]
 8007682:	4628      	mov	r0, r5
 8007684:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007688:	f7fd bd44 	b.w	8005114 <__malloc_unlock>
 800768c:	42a3      	cmp	r3, r4
 800768e:	d908      	bls.n	80076a2 <_free_r+0x42>
 8007690:	6820      	ldr	r0, [r4, #0]
 8007692:	1821      	adds	r1, r4, r0
 8007694:	428b      	cmp	r3, r1
 8007696:	bf01      	itttt	eq
 8007698:	6819      	ldreq	r1, [r3, #0]
 800769a:	685b      	ldreq	r3, [r3, #4]
 800769c:	1809      	addeq	r1, r1, r0
 800769e:	6021      	streq	r1, [r4, #0]
 80076a0:	e7ed      	b.n	800767e <_free_r+0x1e>
 80076a2:	461a      	mov	r2, r3
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	b10b      	cbz	r3, 80076ac <_free_r+0x4c>
 80076a8:	42a3      	cmp	r3, r4
 80076aa:	d9fa      	bls.n	80076a2 <_free_r+0x42>
 80076ac:	6811      	ldr	r1, [r2, #0]
 80076ae:	1850      	adds	r0, r2, r1
 80076b0:	42a0      	cmp	r0, r4
 80076b2:	d10b      	bne.n	80076cc <_free_r+0x6c>
 80076b4:	6820      	ldr	r0, [r4, #0]
 80076b6:	4401      	add	r1, r0
 80076b8:	1850      	adds	r0, r2, r1
 80076ba:	4283      	cmp	r3, r0
 80076bc:	6011      	str	r1, [r2, #0]
 80076be:	d1e0      	bne.n	8007682 <_free_r+0x22>
 80076c0:	6818      	ldr	r0, [r3, #0]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	4408      	add	r0, r1
 80076c6:	6010      	str	r0, [r2, #0]
 80076c8:	6053      	str	r3, [r2, #4]
 80076ca:	e7da      	b.n	8007682 <_free_r+0x22>
 80076cc:	d902      	bls.n	80076d4 <_free_r+0x74>
 80076ce:	230c      	movs	r3, #12
 80076d0:	602b      	str	r3, [r5, #0]
 80076d2:	e7d6      	b.n	8007682 <_free_r+0x22>
 80076d4:	6820      	ldr	r0, [r4, #0]
 80076d6:	1821      	adds	r1, r4, r0
 80076d8:	428b      	cmp	r3, r1
 80076da:	bf01      	itttt	eq
 80076dc:	6819      	ldreq	r1, [r3, #0]
 80076de:	685b      	ldreq	r3, [r3, #4]
 80076e0:	1809      	addeq	r1, r1, r0
 80076e2:	6021      	streq	r1, [r4, #0]
 80076e4:	6063      	str	r3, [r4, #4]
 80076e6:	6054      	str	r4, [r2, #4]
 80076e8:	e7cb      	b.n	8007682 <_free_r+0x22>
 80076ea:	bd38      	pop	{r3, r4, r5, pc}
 80076ec:	200006d4 	.word	0x200006d4

080076f0 <rshift>:
 80076f0:	6903      	ldr	r3, [r0, #16]
 80076f2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80076f6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80076fa:	f100 0414 	add.w	r4, r0, #20
 80076fe:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007702:	dd46      	ble.n	8007792 <rshift+0xa2>
 8007704:	f011 011f 	ands.w	r1, r1, #31
 8007708:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800770c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007710:	d10c      	bne.n	800772c <rshift+0x3c>
 8007712:	4629      	mov	r1, r5
 8007714:	f100 0710 	add.w	r7, r0, #16
 8007718:	42b1      	cmp	r1, r6
 800771a:	d335      	bcc.n	8007788 <rshift+0x98>
 800771c:	1a9b      	subs	r3, r3, r2
 800771e:	009b      	lsls	r3, r3, #2
 8007720:	1eea      	subs	r2, r5, #3
 8007722:	4296      	cmp	r6, r2
 8007724:	bf38      	it	cc
 8007726:	2300      	movcc	r3, #0
 8007728:	4423      	add	r3, r4
 800772a:	e015      	b.n	8007758 <rshift+0x68>
 800772c:	46a1      	mov	r9, r4
 800772e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007732:	f1c1 0820 	rsb	r8, r1, #32
 8007736:	40cf      	lsrs	r7, r1
 8007738:	f105 0e04 	add.w	lr, r5, #4
 800773c:	4576      	cmp	r6, lr
 800773e:	46f4      	mov	ip, lr
 8007740:	d816      	bhi.n	8007770 <rshift+0x80>
 8007742:	1a9a      	subs	r2, r3, r2
 8007744:	0092      	lsls	r2, r2, #2
 8007746:	3a04      	subs	r2, #4
 8007748:	3501      	adds	r5, #1
 800774a:	42ae      	cmp	r6, r5
 800774c:	bf38      	it	cc
 800774e:	2200      	movcc	r2, #0
 8007750:	18a3      	adds	r3, r4, r2
 8007752:	50a7      	str	r7, [r4, r2]
 8007754:	b107      	cbz	r7, 8007758 <rshift+0x68>
 8007756:	3304      	adds	r3, #4
 8007758:	42a3      	cmp	r3, r4
 800775a:	eba3 0204 	sub.w	r2, r3, r4
 800775e:	bf08      	it	eq
 8007760:	2300      	moveq	r3, #0
 8007762:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007766:	6102      	str	r2, [r0, #16]
 8007768:	bf08      	it	eq
 800776a:	6143      	streq	r3, [r0, #20]
 800776c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007770:	f8dc c000 	ldr.w	ip, [ip]
 8007774:	fa0c fc08 	lsl.w	ip, ip, r8
 8007778:	ea4c 0707 	orr.w	r7, ip, r7
 800777c:	f849 7b04 	str.w	r7, [r9], #4
 8007780:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007784:	40cf      	lsrs	r7, r1
 8007786:	e7d9      	b.n	800773c <rshift+0x4c>
 8007788:	f851 cb04 	ldr.w	ip, [r1], #4
 800778c:	f847 cf04 	str.w	ip, [r7, #4]!
 8007790:	e7c2      	b.n	8007718 <rshift+0x28>
 8007792:	4623      	mov	r3, r4
 8007794:	e7e0      	b.n	8007758 <rshift+0x68>

08007796 <__hexdig_fun>:
 8007796:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800779a:	2b09      	cmp	r3, #9
 800779c:	d802      	bhi.n	80077a4 <__hexdig_fun+0xe>
 800779e:	3820      	subs	r0, #32
 80077a0:	b2c0      	uxtb	r0, r0
 80077a2:	4770      	bx	lr
 80077a4:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80077a8:	2b05      	cmp	r3, #5
 80077aa:	d801      	bhi.n	80077b0 <__hexdig_fun+0x1a>
 80077ac:	3847      	subs	r0, #71	@ 0x47
 80077ae:	e7f7      	b.n	80077a0 <__hexdig_fun+0xa>
 80077b0:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80077b4:	2b05      	cmp	r3, #5
 80077b6:	d801      	bhi.n	80077bc <__hexdig_fun+0x26>
 80077b8:	3827      	subs	r0, #39	@ 0x27
 80077ba:	e7f1      	b.n	80077a0 <__hexdig_fun+0xa>
 80077bc:	2000      	movs	r0, #0
 80077be:	4770      	bx	lr

080077c0 <__gethex>:
 80077c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077c4:	468a      	mov	sl, r1
 80077c6:	4690      	mov	r8, r2
 80077c8:	b085      	sub	sp, #20
 80077ca:	9302      	str	r3, [sp, #8]
 80077cc:	680b      	ldr	r3, [r1, #0]
 80077ce:	9001      	str	r0, [sp, #4]
 80077d0:	1c9c      	adds	r4, r3, #2
 80077d2:	46a1      	mov	r9, r4
 80077d4:	f814 0b01 	ldrb.w	r0, [r4], #1
 80077d8:	2830      	cmp	r0, #48	@ 0x30
 80077da:	d0fa      	beq.n	80077d2 <__gethex+0x12>
 80077dc:	eba9 0303 	sub.w	r3, r9, r3
 80077e0:	f1a3 0b02 	sub.w	fp, r3, #2
 80077e4:	f7ff ffd7 	bl	8007796 <__hexdig_fun>
 80077e8:	4605      	mov	r5, r0
 80077ea:	2800      	cmp	r0, #0
 80077ec:	d168      	bne.n	80078c0 <__gethex+0x100>
 80077ee:	2201      	movs	r2, #1
 80077f0:	4648      	mov	r0, r9
 80077f2:	499f      	ldr	r1, [pc, #636]	@ (8007a70 <__gethex+0x2b0>)
 80077f4:	f7ff f825 	bl	8006842 <strncmp>
 80077f8:	4607      	mov	r7, r0
 80077fa:	2800      	cmp	r0, #0
 80077fc:	d167      	bne.n	80078ce <__gethex+0x10e>
 80077fe:	f899 0001 	ldrb.w	r0, [r9, #1]
 8007802:	4626      	mov	r6, r4
 8007804:	f7ff ffc7 	bl	8007796 <__hexdig_fun>
 8007808:	2800      	cmp	r0, #0
 800780a:	d062      	beq.n	80078d2 <__gethex+0x112>
 800780c:	4623      	mov	r3, r4
 800780e:	7818      	ldrb	r0, [r3, #0]
 8007810:	4699      	mov	r9, r3
 8007812:	2830      	cmp	r0, #48	@ 0x30
 8007814:	f103 0301 	add.w	r3, r3, #1
 8007818:	d0f9      	beq.n	800780e <__gethex+0x4e>
 800781a:	f7ff ffbc 	bl	8007796 <__hexdig_fun>
 800781e:	fab0 f580 	clz	r5, r0
 8007822:	f04f 0b01 	mov.w	fp, #1
 8007826:	096d      	lsrs	r5, r5, #5
 8007828:	464a      	mov	r2, r9
 800782a:	4616      	mov	r6, r2
 800782c:	7830      	ldrb	r0, [r6, #0]
 800782e:	3201      	adds	r2, #1
 8007830:	f7ff ffb1 	bl	8007796 <__hexdig_fun>
 8007834:	2800      	cmp	r0, #0
 8007836:	d1f8      	bne.n	800782a <__gethex+0x6a>
 8007838:	2201      	movs	r2, #1
 800783a:	4630      	mov	r0, r6
 800783c:	498c      	ldr	r1, [pc, #560]	@ (8007a70 <__gethex+0x2b0>)
 800783e:	f7ff f800 	bl	8006842 <strncmp>
 8007842:	2800      	cmp	r0, #0
 8007844:	d13f      	bne.n	80078c6 <__gethex+0x106>
 8007846:	b944      	cbnz	r4, 800785a <__gethex+0x9a>
 8007848:	1c74      	adds	r4, r6, #1
 800784a:	4622      	mov	r2, r4
 800784c:	4616      	mov	r6, r2
 800784e:	7830      	ldrb	r0, [r6, #0]
 8007850:	3201      	adds	r2, #1
 8007852:	f7ff ffa0 	bl	8007796 <__hexdig_fun>
 8007856:	2800      	cmp	r0, #0
 8007858:	d1f8      	bne.n	800784c <__gethex+0x8c>
 800785a:	1ba4      	subs	r4, r4, r6
 800785c:	00a7      	lsls	r7, r4, #2
 800785e:	7833      	ldrb	r3, [r6, #0]
 8007860:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8007864:	2b50      	cmp	r3, #80	@ 0x50
 8007866:	d13e      	bne.n	80078e6 <__gethex+0x126>
 8007868:	7873      	ldrb	r3, [r6, #1]
 800786a:	2b2b      	cmp	r3, #43	@ 0x2b
 800786c:	d033      	beq.n	80078d6 <__gethex+0x116>
 800786e:	2b2d      	cmp	r3, #45	@ 0x2d
 8007870:	d034      	beq.n	80078dc <__gethex+0x11c>
 8007872:	2400      	movs	r4, #0
 8007874:	1c71      	adds	r1, r6, #1
 8007876:	7808      	ldrb	r0, [r1, #0]
 8007878:	f7ff ff8d 	bl	8007796 <__hexdig_fun>
 800787c:	1e43      	subs	r3, r0, #1
 800787e:	b2db      	uxtb	r3, r3
 8007880:	2b18      	cmp	r3, #24
 8007882:	d830      	bhi.n	80078e6 <__gethex+0x126>
 8007884:	f1a0 0210 	sub.w	r2, r0, #16
 8007888:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800788c:	f7ff ff83 	bl	8007796 <__hexdig_fun>
 8007890:	f100 3cff 	add.w	ip, r0, #4294967295
 8007894:	fa5f fc8c 	uxtb.w	ip, ip
 8007898:	f1bc 0f18 	cmp.w	ip, #24
 800789c:	f04f 030a 	mov.w	r3, #10
 80078a0:	d91e      	bls.n	80078e0 <__gethex+0x120>
 80078a2:	b104      	cbz	r4, 80078a6 <__gethex+0xe6>
 80078a4:	4252      	negs	r2, r2
 80078a6:	4417      	add	r7, r2
 80078a8:	f8ca 1000 	str.w	r1, [sl]
 80078ac:	b1ed      	cbz	r5, 80078ea <__gethex+0x12a>
 80078ae:	f1bb 0f00 	cmp.w	fp, #0
 80078b2:	bf0c      	ite	eq
 80078b4:	2506      	moveq	r5, #6
 80078b6:	2500      	movne	r5, #0
 80078b8:	4628      	mov	r0, r5
 80078ba:	b005      	add	sp, #20
 80078bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078c0:	2500      	movs	r5, #0
 80078c2:	462c      	mov	r4, r5
 80078c4:	e7b0      	b.n	8007828 <__gethex+0x68>
 80078c6:	2c00      	cmp	r4, #0
 80078c8:	d1c7      	bne.n	800785a <__gethex+0x9a>
 80078ca:	4627      	mov	r7, r4
 80078cc:	e7c7      	b.n	800785e <__gethex+0x9e>
 80078ce:	464e      	mov	r6, r9
 80078d0:	462f      	mov	r7, r5
 80078d2:	2501      	movs	r5, #1
 80078d4:	e7c3      	b.n	800785e <__gethex+0x9e>
 80078d6:	2400      	movs	r4, #0
 80078d8:	1cb1      	adds	r1, r6, #2
 80078da:	e7cc      	b.n	8007876 <__gethex+0xb6>
 80078dc:	2401      	movs	r4, #1
 80078de:	e7fb      	b.n	80078d8 <__gethex+0x118>
 80078e0:	fb03 0002 	mla	r0, r3, r2, r0
 80078e4:	e7ce      	b.n	8007884 <__gethex+0xc4>
 80078e6:	4631      	mov	r1, r6
 80078e8:	e7de      	b.n	80078a8 <__gethex+0xe8>
 80078ea:	4629      	mov	r1, r5
 80078ec:	eba6 0309 	sub.w	r3, r6, r9
 80078f0:	3b01      	subs	r3, #1
 80078f2:	2b07      	cmp	r3, #7
 80078f4:	dc0a      	bgt.n	800790c <__gethex+0x14c>
 80078f6:	9801      	ldr	r0, [sp, #4]
 80078f8:	f000 fa46 	bl	8007d88 <_Balloc>
 80078fc:	4604      	mov	r4, r0
 80078fe:	b940      	cbnz	r0, 8007912 <__gethex+0x152>
 8007900:	4602      	mov	r2, r0
 8007902:	21e4      	movs	r1, #228	@ 0xe4
 8007904:	4b5b      	ldr	r3, [pc, #364]	@ (8007a74 <__gethex+0x2b4>)
 8007906:	485c      	ldr	r0, [pc, #368]	@ (8007a78 <__gethex+0x2b8>)
 8007908:	f001 f90a 	bl	8008b20 <__assert_func>
 800790c:	3101      	adds	r1, #1
 800790e:	105b      	asrs	r3, r3, #1
 8007910:	e7ef      	b.n	80078f2 <__gethex+0x132>
 8007912:	2300      	movs	r3, #0
 8007914:	f100 0a14 	add.w	sl, r0, #20
 8007918:	4655      	mov	r5, sl
 800791a:	469b      	mov	fp, r3
 800791c:	45b1      	cmp	r9, r6
 800791e:	d337      	bcc.n	8007990 <__gethex+0x1d0>
 8007920:	f845 bb04 	str.w	fp, [r5], #4
 8007924:	eba5 050a 	sub.w	r5, r5, sl
 8007928:	10ad      	asrs	r5, r5, #2
 800792a:	6125      	str	r5, [r4, #16]
 800792c:	4658      	mov	r0, fp
 800792e:	f000 fb1d 	bl	8007f6c <__hi0bits>
 8007932:	016d      	lsls	r5, r5, #5
 8007934:	f8d8 6000 	ldr.w	r6, [r8]
 8007938:	1a2d      	subs	r5, r5, r0
 800793a:	42b5      	cmp	r5, r6
 800793c:	dd54      	ble.n	80079e8 <__gethex+0x228>
 800793e:	1bad      	subs	r5, r5, r6
 8007940:	4629      	mov	r1, r5
 8007942:	4620      	mov	r0, r4
 8007944:	f000 fea5 	bl	8008692 <__any_on>
 8007948:	4681      	mov	r9, r0
 800794a:	b178      	cbz	r0, 800796c <__gethex+0x1ac>
 800794c:	f04f 0901 	mov.w	r9, #1
 8007950:	1e6b      	subs	r3, r5, #1
 8007952:	1159      	asrs	r1, r3, #5
 8007954:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007958:	f003 021f 	and.w	r2, r3, #31
 800795c:	fa09 f202 	lsl.w	r2, r9, r2
 8007960:	420a      	tst	r2, r1
 8007962:	d003      	beq.n	800796c <__gethex+0x1ac>
 8007964:	454b      	cmp	r3, r9
 8007966:	dc36      	bgt.n	80079d6 <__gethex+0x216>
 8007968:	f04f 0902 	mov.w	r9, #2
 800796c:	4629      	mov	r1, r5
 800796e:	4620      	mov	r0, r4
 8007970:	f7ff febe 	bl	80076f0 <rshift>
 8007974:	442f      	add	r7, r5
 8007976:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800797a:	42bb      	cmp	r3, r7
 800797c:	da42      	bge.n	8007a04 <__gethex+0x244>
 800797e:	4621      	mov	r1, r4
 8007980:	9801      	ldr	r0, [sp, #4]
 8007982:	f000 fa41 	bl	8007e08 <_Bfree>
 8007986:	2300      	movs	r3, #0
 8007988:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800798a:	25a3      	movs	r5, #163	@ 0xa3
 800798c:	6013      	str	r3, [r2, #0]
 800798e:	e793      	b.n	80078b8 <__gethex+0xf8>
 8007990:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8007994:	2a2e      	cmp	r2, #46	@ 0x2e
 8007996:	d012      	beq.n	80079be <__gethex+0x1fe>
 8007998:	2b20      	cmp	r3, #32
 800799a:	d104      	bne.n	80079a6 <__gethex+0x1e6>
 800799c:	f845 bb04 	str.w	fp, [r5], #4
 80079a0:	f04f 0b00 	mov.w	fp, #0
 80079a4:	465b      	mov	r3, fp
 80079a6:	7830      	ldrb	r0, [r6, #0]
 80079a8:	9303      	str	r3, [sp, #12]
 80079aa:	f7ff fef4 	bl	8007796 <__hexdig_fun>
 80079ae:	9b03      	ldr	r3, [sp, #12]
 80079b0:	f000 000f 	and.w	r0, r0, #15
 80079b4:	4098      	lsls	r0, r3
 80079b6:	ea4b 0b00 	orr.w	fp, fp, r0
 80079ba:	3304      	adds	r3, #4
 80079bc:	e7ae      	b.n	800791c <__gethex+0x15c>
 80079be:	45b1      	cmp	r9, r6
 80079c0:	d8ea      	bhi.n	8007998 <__gethex+0x1d8>
 80079c2:	2201      	movs	r2, #1
 80079c4:	4630      	mov	r0, r6
 80079c6:	492a      	ldr	r1, [pc, #168]	@ (8007a70 <__gethex+0x2b0>)
 80079c8:	9303      	str	r3, [sp, #12]
 80079ca:	f7fe ff3a 	bl	8006842 <strncmp>
 80079ce:	9b03      	ldr	r3, [sp, #12]
 80079d0:	2800      	cmp	r0, #0
 80079d2:	d1e1      	bne.n	8007998 <__gethex+0x1d8>
 80079d4:	e7a2      	b.n	800791c <__gethex+0x15c>
 80079d6:	4620      	mov	r0, r4
 80079d8:	1ea9      	subs	r1, r5, #2
 80079da:	f000 fe5a 	bl	8008692 <__any_on>
 80079de:	2800      	cmp	r0, #0
 80079e0:	d0c2      	beq.n	8007968 <__gethex+0x1a8>
 80079e2:	f04f 0903 	mov.w	r9, #3
 80079e6:	e7c1      	b.n	800796c <__gethex+0x1ac>
 80079e8:	da09      	bge.n	80079fe <__gethex+0x23e>
 80079ea:	1b75      	subs	r5, r6, r5
 80079ec:	4621      	mov	r1, r4
 80079ee:	462a      	mov	r2, r5
 80079f0:	9801      	ldr	r0, [sp, #4]
 80079f2:	f000 fc1f 	bl	8008234 <__lshift>
 80079f6:	4604      	mov	r4, r0
 80079f8:	1b7f      	subs	r7, r7, r5
 80079fa:	f100 0a14 	add.w	sl, r0, #20
 80079fe:	f04f 0900 	mov.w	r9, #0
 8007a02:	e7b8      	b.n	8007976 <__gethex+0x1b6>
 8007a04:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007a08:	42bd      	cmp	r5, r7
 8007a0a:	dd6f      	ble.n	8007aec <__gethex+0x32c>
 8007a0c:	1bed      	subs	r5, r5, r7
 8007a0e:	42ae      	cmp	r6, r5
 8007a10:	dc34      	bgt.n	8007a7c <__gethex+0x2bc>
 8007a12:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007a16:	2b02      	cmp	r3, #2
 8007a18:	d022      	beq.n	8007a60 <__gethex+0x2a0>
 8007a1a:	2b03      	cmp	r3, #3
 8007a1c:	d024      	beq.n	8007a68 <__gethex+0x2a8>
 8007a1e:	2b01      	cmp	r3, #1
 8007a20:	d115      	bne.n	8007a4e <__gethex+0x28e>
 8007a22:	42ae      	cmp	r6, r5
 8007a24:	d113      	bne.n	8007a4e <__gethex+0x28e>
 8007a26:	2e01      	cmp	r6, #1
 8007a28:	d10b      	bne.n	8007a42 <__gethex+0x282>
 8007a2a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007a2e:	9a02      	ldr	r2, [sp, #8]
 8007a30:	2562      	movs	r5, #98	@ 0x62
 8007a32:	6013      	str	r3, [r2, #0]
 8007a34:	2301      	movs	r3, #1
 8007a36:	6123      	str	r3, [r4, #16]
 8007a38:	f8ca 3000 	str.w	r3, [sl]
 8007a3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a3e:	601c      	str	r4, [r3, #0]
 8007a40:	e73a      	b.n	80078b8 <__gethex+0xf8>
 8007a42:	4620      	mov	r0, r4
 8007a44:	1e71      	subs	r1, r6, #1
 8007a46:	f000 fe24 	bl	8008692 <__any_on>
 8007a4a:	2800      	cmp	r0, #0
 8007a4c:	d1ed      	bne.n	8007a2a <__gethex+0x26a>
 8007a4e:	4621      	mov	r1, r4
 8007a50:	9801      	ldr	r0, [sp, #4]
 8007a52:	f000 f9d9 	bl	8007e08 <_Bfree>
 8007a56:	2300      	movs	r3, #0
 8007a58:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007a5a:	2550      	movs	r5, #80	@ 0x50
 8007a5c:	6013      	str	r3, [r2, #0]
 8007a5e:	e72b      	b.n	80078b8 <__gethex+0xf8>
 8007a60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d1f3      	bne.n	8007a4e <__gethex+0x28e>
 8007a66:	e7e0      	b.n	8007a2a <__gethex+0x26a>
 8007a68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d1dd      	bne.n	8007a2a <__gethex+0x26a>
 8007a6e:	e7ee      	b.n	8007a4e <__gethex+0x28e>
 8007a70:	08009d94 	.word	0x08009d94
 8007a74:	08009ea0 	.word	0x08009ea0
 8007a78:	08009eb1 	.word	0x08009eb1
 8007a7c:	1e6f      	subs	r7, r5, #1
 8007a7e:	f1b9 0f00 	cmp.w	r9, #0
 8007a82:	d130      	bne.n	8007ae6 <__gethex+0x326>
 8007a84:	b127      	cbz	r7, 8007a90 <__gethex+0x2d0>
 8007a86:	4639      	mov	r1, r7
 8007a88:	4620      	mov	r0, r4
 8007a8a:	f000 fe02 	bl	8008692 <__any_on>
 8007a8e:	4681      	mov	r9, r0
 8007a90:	2301      	movs	r3, #1
 8007a92:	4629      	mov	r1, r5
 8007a94:	1b76      	subs	r6, r6, r5
 8007a96:	2502      	movs	r5, #2
 8007a98:	117a      	asrs	r2, r7, #5
 8007a9a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007a9e:	f007 071f 	and.w	r7, r7, #31
 8007aa2:	40bb      	lsls	r3, r7
 8007aa4:	4213      	tst	r3, r2
 8007aa6:	4620      	mov	r0, r4
 8007aa8:	bf18      	it	ne
 8007aaa:	f049 0902 	orrne.w	r9, r9, #2
 8007aae:	f7ff fe1f 	bl	80076f0 <rshift>
 8007ab2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8007ab6:	f1b9 0f00 	cmp.w	r9, #0
 8007aba:	d047      	beq.n	8007b4c <__gethex+0x38c>
 8007abc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007ac0:	2b02      	cmp	r3, #2
 8007ac2:	d015      	beq.n	8007af0 <__gethex+0x330>
 8007ac4:	2b03      	cmp	r3, #3
 8007ac6:	d017      	beq.n	8007af8 <__gethex+0x338>
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	d109      	bne.n	8007ae0 <__gethex+0x320>
 8007acc:	f019 0f02 	tst.w	r9, #2
 8007ad0:	d006      	beq.n	8007ae0 <__gethex+0x320>
 8007ad2:	f8da 3000 	ldr.w	r3, [sl]
 8007ad6:	ea49 0903 	orr.w	r9, r9, r3
 8007ada:	f019 0f01 	tst.w	r9, #1
 8007ade:	d10e      	bne.n	8007afe <__gethex+0x33e>
 8007ae0:	f045 0510 	orr.w	r5, r5, #16
 8007ae4:	e032      	b.n	8007b4c <__gethex+0x38c>
 8007ae6:	f04f 0901 	mov.w	r9, #1
 8007aea:	e7d1      	b.n	8007a90 <__gethex+0x2d0>
 8007aec:	2501      	movs	r5, #1
 8007aee:	e7e2      	b.n	8007ab6 <__gethex+0x2f6>
 8007af0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007af2:	f1c3 0301 	rsb	r3, r3, #1
 8007af6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007af8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d0f0      	beq.n	8007ae0 <__gethex+0x320>
 8007afe:	f04f 0c00 	mov.w	ip, #0
 8007b02:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007b06:	f104 0314 	add.w	r3, r4, #20
 8007b0a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007b0e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007b12:	4618      	mov	r0, r3
 8007b14:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b18:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007b1c:	d01b      	beq.n	8007b56 <__gethex+0x396>
 8007b1e:	3201      	adds	r2, #1
 8007b20:	6002      	str	r2, [r0, #0]
 8007b22:	2d02      	cmp	r5, #2
 8007b24:	f104 0314 	add.w	r3, r4, #20
 8007b28:	d13c      	bne.n	8007ba4 <__gethex+0x3e4>
 8007b2a:	f8d8 2000 	ldr.w	r2, [r8]
 8007b2e:	3a01      	subs	r2, #1
 8007b30:	42b2      	cmp	r2, r6
 8007b32:	d109      	bne.n	8007b48 <__gethex+0x388>
 8007b34:	2201      	movs	r2, #1
 8007b36:	1171      	asrs	r1, r6, #5
 8007b38:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007b3c:	f006 061f 	and.w	r6, r6, #31
 8007b40:	fa02 f606 	lsl.w	r6, r2, r6
 8007b44:	421e      	tst	r6, r3
 8007b46:	d13a      	bne.n	8007bbe <__gethex+0x3fe>
 8007b48:	f045 0520 	orr.w	r5, r5, #32
 8007b4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b4e:	601c      	str	r4, [r3, #0]
 8007b50:	9b02      	ldr	r3, [sp, #8]
 8007b52:	601f      	str	r7, [r3, #0]
 8007b54:	e6b0      	b.n	80078b8 <__gethex+0xf8>
 8007b56:	4299      	cmp	r1, r3
 8007b58:	f843 cc04 	str.w	ip, [r3, #-4]
 8007b5c:	d8d9      	bhi.n	8007b12 <__gethex+0x352>
 8007b5e:	68a3      	ldr	r3, [r4, #8]
 8007b60:	459b      	cmp	fp, r3
 8007b62:	db17      	blt.n	8007b94 <__gethex+0x3d4>
 8007b64:	6861      	ldr	r1, [r4, #4]
 8007b66:	9801      	ldr	r0, [sp, #4]
 8007b68:	3101      	adds	r1, #1
 8007b6a:	f000 f90d 	bl	8007d88 <_Balloc>
 8007b6e:	4681      	mov	r9, r0
 8007b70:	b918      	cbnz	r0, 8007b7a <__gethex+0x3ba>
 8007b72:	4602      	mov	r2, r0
 8007b74:	2184      	movs	r1, #132	@ 0x84
 8007b76:	4b19      	ldr	r3, [pc, #100]	@ (8007bdc <__gethex+0x41c>)
 8007b78:	e6c5      	b.n	8007906 <__gethex+0x146>
 8007b7a:	6922      	ldr	r2, [r4, #16]
 8007b7c:	f104 010c 	add.w	r1, r4, #12
 8007b80:	3202      	adds	r2, #2
 8007b82:	0092      	lsls	r2, r2, #2
 8007b84:	300c      	adds	r0, #12
 8007b86:	f7fe ff04 	bl	8006992 <memcpy>
 8007b8a:	4621      	mov	r1, r4
 8007b8c:	9801      	ldr	r0, [sp, #4]
 8007b8e:	f000 f93b 	bl	8007e08 <_Bfree>
 8007b92:	464c      	mov	r4, r9
 8007b94:	6923      	ldr	r3, [r4, #16]
 8007b96:	1c5a      	adds	r2, r3, #1
 8007b98:	6122      	str	r2, [r4, #16]
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007ba0:	615a      	str	r2, [r3, #20]
 8007ba2:	e7be      	b.n	8007b22 <__gethex+0x362>
 8007ba4:	6922      	ldr	r2, [r4, #16]
 8007ba6:	455a      	cmp	r2, fp
 8007ba8:	dd0b      	ble.n	8007bc2 <__gethex+0x402>
 8007baa:	2101      	movs	r1, #1
 8007bac:	4620      	mov	r0, r4
 8007bae:	f7ff fd9f 	bl	80076f0 <rshift>
 8007bb2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007bb6:	3701      	adds	r7, #1
 8007bb8:	42bb      	cmp	r3, r7
 8007bba:	f6ff aee0 	blt.w	800797e <__gethex+0x1be>
 8007bbe:	2501      	movs	r5, #1
 8007bc0:	e7c2      	b.n	8007b48 <__gethex+0x388>
 8007bc2:	f016 061f 	ands.w	r6, r6, #31
 8007bc6:	d0fa      	beq.n	8007bbe <__gethex+0x3fe>
 8007bc8:	4453      	add	r3, sl
 8007bca:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007bce:	f000 f9cd 	bl	8007f6c <__hi0bits>
 8007bd2:	f1c6 0620 	rsb	r6, r6, #32
 8007bd6:	42b0      	cmp	r0, r6
 8007bd8:	dbe7      	blt.n	8007baa <__gethex+0x3ea>
 8007bda:	e7f0      	b.n	8007bbe <__gethex+0x3fe>
 8007bdc:	08009ea0 	.word	0x08009ea0

08007be0 <L_shift>:
 8007be0:	f1c2 0208 	rsb	r2, r2, #8
 8007be4:	0092      	lsls	r2, r2, #2
 8007be6:	b570      	push	{r4, r5, r6, lr}
 8007be8:	f1c2 0620 	rsb	r6, r2, #32
 8007bec:	6843      	ldr	r3, [r0, #4]
 8007bee:	6804      	ldr	r4, [r0, #0]
 8007bf0:	fa03 f506 	lsl.w	r5, r3, r6
 8007bf4:	432c      	orrs	r4, r5
 8007bf6:	40d3      	lsrs	r3, r2
 8007bf8:	6004      	str	r4, [r0, #0]
 8007bfa:	f840 3f04 	str.w	r3, [r0, #4]!
 8007bfe:	4288      	cmp	r0, r1
 8007c00:	d3f4      	bcc.n	8007bec <L_shift+0xc>
 8007c02:	bd70      	pop	{r4, r5, r6, pc}

08007c04 <__match>:
 8007c04:	b530      	push	{r4, r5, lr}
 8007c06:	6803      	ldr	r3, [r0, #0]
 8007c08:	3301      	adds	r3, #1
 8007c0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c0e:	b914      	cbnz	r4, 8007c16 <__match+0x12>
 8007c10:	6003      	str	r3, [r0, #0]
 8007c12:	2001      	movs	r0, #1
 8007c14:	bd30      	pop	{r4, r5, pc}
 8007c16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c1a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8007c1e:	2d19      	cmp	r5, #25
 8007c20:	bf98      	it	ls
 8007c22:	3220      	addls	r2, #32
 8007c24:	42a2      	cmp	r2, r4
 8007c26:	d0f0      	beq.n	8007c0a <__match+0x6>
 8007c28:	2000      	movs	r0, #0
 8007c2a:	e7f3      	b.n	8007c14 <__match+0x10>

08007c2c <__hexnan>:
 8007c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c30:	2500      	movs	r5, #0
 8007c32:	680b      	ldr	r3, [r1, #0]
 8007c34:	4682      	mov	sl, r0
 8007c36:	115e      	asrs	r6, r3, #5
 8007c38:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007c3c:	f013 031f 	ands.w	r3, r3, #31
 8007c40:	bf18      	it	ne
 8007c42:	3604      	addne	r6, #4
 8007c44:	1f37      	subs	r7, r6, #4
 8007c46:	4690      	mov	r8, r2
 8007c48:	46b9      	mov	r9, r7
 8007c4a:	463c      	mov	r4, r7
 8007c4c:	46ab      	mov	fp, r5
 8007c4e:	b087      	sub	sp, #28
 8007c50:	6801      	ldr	r1, [r0, #0]
 8007c52:	9301      	str	r3, [sp, #4]
 8007c54:	f846 5c04 	str.w	r5, [r6, #-4]
 8007c58:	9502      	str	r5, [sp, #8]
 8007c5a:	784a      	ldrb	r2, [r1, #1]
 8007c5c:	1c4b      	adds	r3, r1, #1
 8007c5e:	9303      	str	r3, [sp, #12]
 8007c60:	b342      	cbz	r2, 8007cb4 <__hexnan+0x88>
 8007c62:	4610      	mov	r0, r2
 8007c64:	9105      	str	r1, [sp, #20]
 8007c66:	9204      	str	r2, [sp, #16]
 8007c68:	f7ff fd95 	bl	8007796 <__hexdig_fun>
 8007c6c:	2800      	cmp	r0, #0
 8007c6e:	d151      	bne.n	8007d14 <__hexnan+0xe8>
 8007c70:	9a04      	ldr	r2, [sp, #16]
 8007c72:	9905      	ldr	r1, [sp, #20]
 8007c74:	2a20      	cmp	r2, #32
 8007c76:	d818      	bhi.n	8007caa <__hexnan+0x7e>
 8007c78:	9b02      	ldr	r3, [sp, #8]
 8007c7a:	459b      	cmp	fp, r3
 8007c7c:	dd13      	ble.n	8007ca6 <__hexnan+0x7a>
 8007c7e:	454c      	cmp	r4, r9
 8007c80:	d206      	bcs.n	8007c90 <__hexnan+0x64>
 8007c82:	2d07      	cmp	r5, #7
 8007c84:	dc04      	bgt.n	8007c90 <__hexnan+0x64>
 8007c86:	462a      	mov	r2, r5
 8007c88:	4649      	mov	r1, r9
 8007c8a:	4620      	mov	r0, r4
 8007c8c:	f7ff ffa8 	bl	8007be0 <L_shift>
 8007c90:	4544      	cmp	r4, r8
 8007c92:	d952      	bls.n	8007d3a <__hexnan+0x10e>
 8007c94:	2300      	movs	r3, #0
 8007c96:	f1a4 0904 	sub.w	r9, r4, #4
 8007c9a:	f844 3c04 	str.w	r3, [r4, #-4]
 8007c9e:	461d      	mov	r5, r3
 8007ca0:	464c      	mov	r4, r9
 8007ca2:	f8cd b008 	str.w	fp, [sp, #8]
 8007ca6:	9903      	ldr	r1, [sp, #12]
 8007ca8:	e7d7      	b.n	8007c5a <__hexnan+0x2e>
 8007caa:	2a29      	cmp	r2, #41	@ 0x29
 8007cac:	d157      	bne.n	8007d5e <__hexnan+0x132>
 8007cae:	3102      	adds	r1, #2
 8007cb0:	f8ca 1000 	str.w	r1, [sl]
 8007cb4:	f1bb 0f00 	cmp.w	fp, #0
 8007cb8:	d051      	beq.n	8007d5e <__hexnan+0x132>
 8007cba:	454c      	cmp	r4, r9
 8007cbc:	d206      	bcs.n	8007ccc <__hexnan+0xa0>
 8007cbe:	2d07      	cmp	r5, #7
 8007cc0:	dc04      	bgt.n	8007ccc <__hexnan+0xa0>
 8007cc2:	462a      	mov	r2, r5
 8007cc4:	4649      	mov	r1, r9
 8007cc6:	4620      	mov	r0, r4
 8007cc8:	f7ff ff8a 	bl	8007be0 <L_shift>
 8007ccc:	4544      	cmp	r4, r8
 8007cce:	d936      	bls.n	8007d3e <__hexnan+0x112>
 8007cd0:	4623      	mov	r3, r4
 8007cd2:	f1a8 0204 	sub.w	r2, r8, #4
 8007cd6:	f853 1b04 	ldr.w	r1, [r3], #4
 8007cda:	429f      	cmp	r7, r3
 8007cdc:	f842 1f04 	str.w	r1, [r2, #4]!
 8007ce0:	d2f9      	bcs.n	8007cd6 <__hexnan+0xaa>
 8007ce2:	1b3b      	subs	r3, r7, r4
 8007ce4:	f023 0303 	bic.w	r3, r3, #3
 8007ce8:	3304      	adds	r3, #4
 8007cea:	3401      	adds	r4, #1
 8007cec:	3e03      	subs	r6, #3
 8007cee:	42b4      	cmp	r4, r6
 8007cf0:	bf88      	it	hi
 8007cf2:	2304      	movhi	r3, #4
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	4443      	add	r3, r8
 8007cf8:	f843 2b04 	str.w	r2, [r3], #4
 8007cfc:	429f      	cmp	r7, r3
 8007cfe:	d2fb      	bcs.n	8007cf8 <__hexnan+0xcc>
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	b91b      	cbnz	r3, 8007d0c <__hexnan+0xe0>
 8007d04:	4547      	cmp	r7, r8
 8007d06:	d128      	bne.n	8007d5a <__hexnan+0x12e>
 8007d08:	2301      	movs	r3, #1
 8007d0a:	603b      	str	r3, [r7, #0]
 8007d0c:	2005      	movs	r0, #5
 8007d0e:	b007      	add	sp, #28
 8007d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d14:	3501      	adds	r5, #1
 8007d16:	2d08      	cmp	r5, #8
 8007d18:	f10b 0b01 	add.w	fp, fp, #1
 8007d1c:	dd06      	ble.n	8007d2c <__hexnan+0x100>
 8007d1e:	4544      	cmp	r4, r8
 8007d20:	d9c1      	bls.n	8007ca6 <__hexnan+0x7a>
 8007d22:	2300      	movs	r3, #0
 8007d24:	2501      	movs	r5, #1
 8007d26:	f844 3c04 	str.w	r3, [r4, #-4]
 8007d2a:	3c04      	subs	r4, #4
 8007d2c:	6822      	ldr	r2, [r4, #0]
 8007d2e:	f000 000f 	and.w	r0, r0, #15
 8007d32:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007d36:	6020      	str	r0, [r4, #0]
 8007d38:	e7b5      	b.n	8007ca6 <__hexnan+0x7a>
 8007d3a:	2508      	movs	r5, #8
 8007d3c:	e7b3      	b.n	8007ca6 <__hexnan+0x7a>
 8007d3e:	9b01      	ldr	r3, [sp, #4]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d0dd      	beq.n	8007d00 <__hexnan+0xd4>
 8007d44:	f04f 32ff 	mov.w	r2, #4294967295
 8007d48:	f1c3 0320 	rsb	r3, r3, #32
 8007d4c:	40da      	lsrs	r2, r3
 8007d4e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007d52:	4013      	ands	r3, r2
 8007d54:	f846 3c04 	str.w	r3, [r6, #-4]
 8007d58:	e7d2      	b.n	8007d00 <__hexnan+0xd4>
 8007d5a:	3f04      	subs	r7, #4
 8007d5c:	e7d0      	b.n	8007d00 <__hexnan+0xd4>
 8007d5e:	2004      	movs	r0, #4
 8007d60:	e7d5      	b.n	8007d0e <__hexnan+0xe2>

08007d62 <__ascii_mbtowc>:
 8007d62:	b082      	sub	sp, #8
 8007d64:	b901      	cbnz	r1, 8007d68 <__ascii_mbtowc+0x6>
 8007d66:	a901      	add	r1, sp, #4
 8007d68:	b142      	cbz	r2, 8007d7c <__ascii_mbtowc+0x1a>
 8007d6a:	b14b      	cbz	r3, 8007d80 <__ascii_mbtowc+0x1e>
 8007d6c:	7813      	ldrb	r3, [r2, #0]
 8007d6e:	600b      	str	r3, [r1, #0]
 8007d70:	7812      	ldrb	r2, [r2, #0]
 8007d72:	1e10      	subs	r0, r2, #0
 8007d74:	bf18      	it	ne
 8007d76:	2001      	movne	r0, #1
 8007d78:	b002      	add	sp, #8
 8007d7a:	4770      	bx	lr
 8007d7c:	4610      	mov	r0, r2
 8007d7e:	e7fb      	b.n	8007d78 <__ascii_mbtowc+0x16>
 8007d80:	f06f 0001 	mvn.w	r0, #1
 8007d84:	e7f8      	b.n	8007d78 <__ascii_mbtowc+0x16>
	...

08007d88 <_Balloc>:
 8007d88:	b570      	push	{r4, r5, r6, lr}
 8007d8a:	69c6      	ldr	r6, [r0, #28]
 8007d8c:	4604      	mov	r4, r0
 8007d8e:	460d      	mov	r5, r1
 8007d90:	b976      	cbnz	r6, 8007db0 <_Balloc+0x28>
 8007d92:	2010      	movs	r0, #16
 8007d94:	f7fd f90e 	bl	8004fb4 <malloc>
 8007d98:	4602      	mov	r2, r0
 8007d9a:	61e0      	str	r0, [r4, #28]
 8007d9c:	b920      	cbnz	r0, 8007da8 <_Balloc+0x20>
 8007d9e:	216b      	movs	r1, #107	@ 0x6b
 8007da0:	4b17      	ldr	r3, [pc, #92]	@ (8007e00 <_Balloc+0x78>)
 8007da2:	4818      	ldr	r0, [pc, #96]	@ (8007e04 <_Balloc+0x7c>)
 8007da4:	f000 febc 	bl	8008b20 <__assert_func>
 8007da8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007dac:	6006      	str	r6, [r0, #0]
 8007dae:	60c6      	str	r6, [r0, #12]
 8007db0:	69e6      	ldr	r6, [r4, #28]
 8007db2:	68f3      	ldr	r3, [r6, #12]
 8007db4:	b183      	cbz	r3, 8007dd8 <_Balloc+0x50>
 8007db6:	69e3      	ldr	r3, [r4, #28]
 8007db8:	68db      	ldr	r3, [r3, #12]
 8007dba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007dbe:	b9b8      	cbnz	r0, 8007df0 <_Balloc+0x68>
 8007dc0:	2101      	movs	r1, #1
 8007dc2:	fa01 f605 	lsl.w	r6, r1, r5
 8007dc6:	1d72      	adds	r2, r6, #5
 8007dc8:	4620      	mov	r0, r4
 8007dca:	0092      	lsls	r2, r2, #2
 8007dcc:	f000 fec6 	bl	8008b5c <_calloc_r>
 8007dd0:	b160      	cbz	r0, 8007dec <_Balloc+0x64>
 8007dd2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007dd6:	e00e      	b.n	8007df6 <_Balloc+0x6e>
 8007dd8:	2221      	movs	r2, #33	@ 0x21
 8007dda:	2104      	movs	r1, #4
 8007ddc:	4620      	mov	r0, r4
 8007dde:	f000 febd 	bl	8008b5c <_calloc_r>
 8007de2:	69e3      	ldr	r3, [r4, #28]
 8007de4:	60f0      	str	r0, [r6, #12]
 8007de6:	68db      	ldr	r3, [r3, #12]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d1e4      	bne.n	8007db6 <_Balloc+0x2e>
 8007dec:	2000      	movs	r0, #0
 8007dee:	bd70      	pop	{r4, r5, r6, pc}
 8007df0:	6802      	ldr	r2, [r0, #0]
 8007df2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007df6:	2300      	movs	r3, #0
 8007df8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007dfc:	e7f7      	b.n	8007dee <_Balloc+0x66>
 8007dfe:	bf00      	nop
 8007e00:	08009e31 	.word	0x08009e31
 8007e04:	08009f11 	.word	0x08009f11

08007e08 <_Bfree>:
 8007e08:	b570      	push	{r4, r5, r6, lr}
 8007e0a:	69c6      	ldr	r6, [r0, #28]
 8007e0c:	4605      	mov	r5, r0
 8007e0e:	460c      	mov	r4, r1
 8007e10:	b976      	cbnz	r6, 8007e30 <_Bfree+0x28>
 8007e12:	2010      	movs	r0, #16
 8007e14:	f7fd f8ce 	bl	8004fb4 <malloc>
 8007e18:	4602      	mov	r2, r0
 8007e1a:	61e8      	str	r0, [r5, #28]
 8007e1c:	b920      	cbnz	r0, 8007e28 <_Bfree+0x20>
 8007e1e:	218f      	movs	r1, #143	@ 0x8f
 8007e20:	4b08      	ldr	r3, [pc, #32]	@ (8007e44 <_Bfree+0x3c>)
 8007e22:	4809      	ldr	r0, [pc, #36]	@ (8007e48 <_Bfree+0x40>)
 8007e24:	f000 fe7c 	bl	8008b20 <__assert_func>
 8007e28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007e2c:	6006      	str	r6, [r0, #0]
 8007e2e:	60c6      	str	r6, [r0, #12]
 8007e30:	b13c      	cbz	r4, 8007e42 <_Bfree+0x3a>
 8007e32:	69eb      	ldr	r3, [r5, #28]
 8007e34:	6862      	ldr	r2, [r4, #4]
 8007e36:	68db      	ldr	r3, [r3, #12]
 8007e38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007e3c:	6021      	str	r1, [r4, #0]
 8007e3e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007e42:	bd70      	pop	{r4, r5, r6, pc}
 8007e44:	08009e31 	.word	0x08009e31
 8007e48:	08009f11 	.word	0x08009f11

08007e4c <__multadd>:
 8007e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e50:	4607      	mov	r7, r0
 8007e52:	460c      	mov	r4, r1
 8007e54:	461e      	mov	r6, r3
 8007e56:	2000      	movs	r0, #0
 8007e58:	690d      	ldr	r5, [r1, #16]
 8007e5a:	f101 0c14 	add.w	ip, r1, #20
 8007e5e:	f8dc 3000 	ldr.w	r3, [ip]
 8007e62:	3001      	adds	r0, #1
 8007e64:	b299      	uxth	r1, r3
 8007e66:	fb02 6101 	mla	r1, r2, r1, r6
 8007e6a:	0c1e      	lsrs	r6, r3, #16
 8007e6c:	0c0b      	lsrs	r3, r1, #16
 8007e6e:	fb02 3306 	mla	r3, r2, r6, r3
 8007e72:	b289      	uxth	r1, r1
 8007e74:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007e78:	4285      	cmp	r5, r0
 8007e7a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007e7e:	f84c 1b04 	str.w	r1, [ip], #4
 8007e82:	dcec      	bgt.n	8007e5e <__multadd+0x12>
 8007e84:	b30e      	cbz	r6, 8007eca <__multadd+0x7e>
 8007e86:	68a3      	ldr	r3, [r4, #8]
 8007e88:	42ab      	cmp	r3, r5
 8007e8a:	dc19      	bgt.n	8007ec0 <__multadd+0x74>
 8007e8c:	6861      	ldr	r1, [r4, #4]
 8007e8e:	4638      	mov	r0, r7
 8007e90:	3101      	adds	r1, #1
 8007e92:	f7ff ff79 	bl	8007d88 <_Balloc>
 8007e96:	4680      	mov	r8, r0
 8007e98:	b928      	cbnz	r0, 8007ea6 <__multadd+0x5a>
 8007e9a:	4602      	mov	r2, r0
 8007e9c:	21ba      	movs	r1, #186	@ 0xba
 8007e9e:	4b0c      	ldr	r3, [pc, #48]	@ (8007ed0 <__multadd+0x84>)
 8007ea0:	480c      	ldr	r0, [pc, #48]	@ (8007ed4 <__multadd+0x88>)
 8007ea2:	f000 fe3d 	bl	8008b20 <__assert_func>
 8007ea6:	6922      	ldr	r2, [r4, #16]
 8007ea8:	f104 010c 	add.w	r1, r4, #12
 8007eac:	3202      	adds	r2, #2
 8007eae:	0092      	lsls	r2, r2, #2
 8007eb0:	300c      	adds	r0, #12
 8007eb2:	f7fe fd6e 	bl	8006992 <memcpy>
 8007eb6:	4621      	mov	r1, r4
 8007eb8:	4638      	mov	r0, r7
 8007eba:	f7ff ffa5 	bl	8007e08 <_Bfree>
 8007ebe:	4644      	mov	r4, r8
 8007ec0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007ec4:	3501      	adds	r5, #1
 8007ec6:	615e      	str	r6, [r3, #20]
 8007ec8:	6125      	str	r5, [r4, #16]
 8007eca:	4620      	mov	r0, r4
 8007ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ed0:	08009ea0 	.word	0x08009ea0
 8007ed4:	08009f11 	.word	0x08009f11

08007ed8 <__s2b>:
 8007ed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007edc:	4615      	mov	r5, r2
 8007ede:	2209      	movs	r2, #9
 8007ee0:	461f      	mov	r7, r3
 8007ee2:	3308      	adds	r3, #8
 8007ee4:	460c      	mov	r4, r1
 8007ee6:	fb93 f3f2 	sdiv	r3, r3, r2
 8007eea:	4606      	mov	r6, r0
 8007eec:	2201      	movs	r2, #1
 8007eee:	2100      	movs	r1, #0
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	db09      	blt.n	8007f08 <__s2b+0x30>
 8007ef4:	4630      	mov	r0, r6
 8007ef6:	f7ff ff47 	bl	8007d88 <_Balloc>
 8007efa:	b940      	cbnz	r0, 8007f0e <__s2b+0x36>
 8007efc:	4602      	mov	r2, r0
 8007efe:	21d3      	movs	r1, #211	@ 0xd3
 8007f00:	4b18      	ldr	r3, [pc, #96]	@ (8007f64 <__s2b+0x8c>)
 8007f02:	4819      	ldr	r0, [pc, #100]	@ (8007f68 <__s2b+0x90>)
 8007f04:	f000 fe0c 	bl	8008b20 <__assert_func>
 8007f08:	0052      	lsls	r2, r2, #1
 8007f0a:	3101      	adds	r1, #1
 8007f0c:	e7f0      	b.n	8007ef0 <__s2b+0x18>
 8007f0e:	9b08      	ldr	r3, [sp, #32]
 8007f10:	2d09      	cmp	r5, #9
 8007f12:	6143      	str	r3, [r0, #20]
 8007f14:	f04f 0301 	mov.w	r3, #1
 8007f18:	6103      	str	r3, [r0, #16]
 8007f1a:	dd16      	ble.n	8007f4a <__s2b+0x72>
 8007f1c:	f104 0909 	add.w	r9, r4, #9
 8007f20:	46c8      	mov	r8, r9
 8007f22:	442c      	add	r4, r5
 8007f24:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007f28:	4601      	mov	r1, r0
 8007f2a:	220a      	movs	r2, #10
 8007f2c:	4630      	mov	r0, r6
 8007f2e:	3b30      	subs	r3, #48	@ 0x30
 8007f30:	f7ff ff8c 	bl	8007e4c <__multadd>
 8007f34:	45a0      	cmp	r8, r4
 8007f36:	d1f5      	bne.n	8007f24 <__s2b+0x4c>
 8007f38:	f1a5 0408 	sub.w	r4, r5, #8
 8007f3c:	444c      	add	r4, r9
 8007f3e:	1b2d      	subs	r5, r5, r4
 8007f40:	1963      	adds	r3, r4, r5
 8007f42:	42bb      	cmp	r3, r7
 8007f44:	db04      	blt.n	8007f50 <__s2b+0x78>
 8007f46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f4a:	2509      	movs	r5, #9
 8007f4c:	340a      	adds	r4, #10
 8007f4e:	e7f6      	b.n	8007f3e <__s2b+0x66>
 8007f50:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007f54:	4601      	mov	r1, r0
 8007f56:	220a      	movs	r2, #10
 8007f58:	4630      	mov	r0, r6
 8007f5a:	3b30      	subs	r3, #48	@ 0x30
 8007f5c:	f7ff ff76 	bl	8007e4c <__multadd>
 8007f60:	e7ee      	b.n	8007f40 <__s2b+0x68>
 8007f62:	bf00      	nop
 8007f64:	08009ea0 	.word	0x08009ea0
 8007f68:	08009f11 	.word	0x08009f11

08007f6c <__hi0bits>:
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007f72:	bf3a      	itte	cc
 8007f74:	0403      	lslcc	r3, r0, #16
 8007f76:	2010      	movcc	r0, #16
 8007f78:	2000      	movcs	r0, #0
 8007f7a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007f7e:	bf3c      	itt	cc
 8007f80:	021b      	lslcc	r3, r3, #8
 8007f82:	3008      	addcc	r0, #8
 8007f84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007f88:	bf3c      	itt	cc
 8007f8a:	011b      	lslcc	r3, r3, #4
 8007f8c:	3004      	addcc	r0, #4
 8007f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f92:	bf3c      	itt	cc
 8007f94:	009b      	lslcc	r3, r3, #2
 8007f96:	3002      	addcc	r0, #2
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	db05      	blt.n	8007fa8 <__hi0bits+0x3c>
 8007f9c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007fa0:	f100 0001 	add.w	r0, r0, #1
 8007fa4:	bf08      	it	eq
 8007fa6:	2020      	moveq	r0, #32
 8007fa8:	4770      	bx	lr

08007faa <__lo0bits>:
 8007faa:	6803      	ldr	r3, [r0, #0]
 8007fac:	4602      	mov	r2, r0
 8007fae:	f013 0007 	ands.w	r0, r3, #7
 8007fb2:	d00b      	beq.n	8007fcc <__lo0bits+0x22>
 8007fb4:	07d9      	lsls	r1, r3, #31
 8007fb6:	d421      	bmi.n	8007ffc <__lo0bits+0x52>
 8007fb8:	0798      	lsls	r0, r3, #30
 8007fba:	bf49      	itett	mi
 8007fbc:	085b      	lsrmi	r3, r3, #1
 8007fbe:	089b      	lsrpl	r3, r3, #2
 8007fc0:	2001      	movmi	r0, #1
 8007fc2:	6013      	strmi	r3, [r2, #0]
 8007fc4:	bf5c      	itt	pl
 8007fc6:	2002      	movpl	r0, #2
 8007fc8:	6013      	strpl	r3, [r2, #0]
 8007fca:	4770      	bx	lr
 8007fcc:	b299      	uxth	r1, r3
 8007fce:	b909      	cbnz	r1, 8007fd4 <__lo0bits+0x2a>
 8007fd0:	2010      	movs	r0, #16
 8007fd2:	0c1b      	lsrs	r3, r3, #16
 8007fd4:	b2d9      	uxtb	r1, r3
 8007fd6:	b909      	cbnz	r1, 8007fdc <__lo0bits+0x32>
 8007fd8:	3008      	adds	r0, #8
 8007fda:	0a1b      	lsrs	r3, r3, #8
 8007fdc:	0719      	lsls	r1, r3, #28
 8007fde:	bf04      	itt	eq
 8007fe0:	091b      	lsreq	r3, r3, #4
 8007fe2:	3004      	addeq	r0, #4
 8007fe4:	0799      	lsls	r1, r3, #30
 8007fe6:	bf04      	itt	eq
 8007fe8:	089b      	lsreq	r3, r3, #2
 8007fea:	3002      	addeq	r0, #2
 8007fec:	07d9      	lsls	r1, r3, #31
 8007fee:	d403      	bmi.n	8007ff8 <__lo0bits+0x4e>
 8007ff0:	085b      	lsrs	r3, r3, #1
 8007ff2:	f100 0001 	add.w	r0, r0, #1
 8007ff6:	d003      	beq.n	8008000 <__lo0bits+0x56>
 8007ff8:	6013      	str	r3, [r2, #0]
 8007ffa:	4770      	bx	lr
 8007ffc:	2000      	movs	r0, #0
 8007ffe:	4770      	bx	lr
 8008000:	2020      	movs	r0, #32
 8008002:	4770      	bx	lr

08008004 <__i2b>:
 8008004:	b510      	push	{r4, lr}
 8008006:	460c      	mov	r4, r1
 8008008:	2101      	movs	r1, #1
 800800a:	f7ff febd 	bl	8007d88 <_Balloc>
 800800e:	4602      	mov	r2, r0
 8008010:	b928      	cbnz	r0, 800801e <__i2b+0x1a>
 8008012:	f240 1145 	movw	r1, #325	@ 0x145
 8008016:	4b04      	ldr	r3, [pc, #16]	@ (8008028 <__i2b+0x24>)
 8008018:	4804      	ldr	r0, [pc, #16]	@ (800802c <__i2b+0x28>)
 800801a:	f000 fd81 	bl	8008b20 <__assert_func>
 800801e:	2301      	movs	r3, #1
 8008020:	6144      	str	r4, [r0, #20]
 8008022:	6103      	str	r3, [r0, #16]
 8008024:	bd10      	pop	{r4, pc}
 8008026:	bf00      	nop
 8008028:	08009ea0 	.word	0x08009ea0
 800802c:	08009f11 	.word	0x08009f11

08008030 <__multiply>:
 8008030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008034:	4614      	mov	r4, r2
 8008036:	690a      	ldr	r2, [r1, #16]
 8008038:	6923      	ldr	r3, [r4, #16]
 800803a:	460f      	mov	r7, r1
 800803c:	429a      	cmp	r2, r3
 800803e:	bfa2      	ittt	ge
 8008040:	4623      	movge	r3, r4
 8008042:	460c      	movge	r4, r1
 8008044:	461f      	movge	r7, r3
 8008046:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800804a:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800804e:	68a3      	ldr	r3, [r4, #8]
 8008050:	6861      	ldr	r1, [r4, #4]
 8008052:	eb0a 0609 	add.w	r6, sl, r9
 8008056:	42b3      	cmp	r3, r6
 8008058:	b085      	sub	sp, #20
 800805a:	bfb8      	it	lt
 800805c:	3101      	addlt	r1, #1
 800805e:	f7ff fe93 	bl	8007d88 <_Balloc>
 8008062:	b930      	cbnz	r0, 8008072 <__multiply+0x42>
 8008064:	4602      	mov	r2, r0
 8008066:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800806a:	4b43      	ldr	r3, [pc, #268]	@ (8008178 <__multiply+0x148>)
 800806c:	4843      	ldr	r0, [pc, #268]	@ (800817c <__multiply+0x14c>)
 800806e:	f000 fd57 	bl	8008b20 <__assert_func>
 8008072:	f100 0514 	add.w	r5, r0, #20
 8008076:	462b      	mov	r3, r5
 8008078:	2200      	movs	r2, #0
 800807a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800807e:	4543      	cmp	r3, r8
 8008080:	d321      	bcc.n	80080c6 <__multiply+0x96>
 8008082:	f107 0114 	add.w	r1, r7, #20
 8008086:	f104 0214 	add.w	r2, r4, #20
 800808a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800808e:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008092:	9302      	str	r3, [sp, #8]
 8008094:	1b13      	subs	r3, r2, r4
 8008096:	3b15      	subs	r3, #21
 8008098:	f023 0303 	bic.w	r3, r3, #3
 800809c:	3304      	adds	r3, #4
 800809e:	f104 0715 	add.w	r7, r4, #21
 80080a2:	42ba      	cmp	r2, r7
 80080a4:	bf38      	it	cc
 80080a6:	2304      	movcc	r3, #4
 80080a8:	9301      	str	r3, [sp, #4]
 80080aa:	9b02      	ldr	r3, [sp, #8]
 80080ac:	9103      	str	r1, [sp, #12]
 80080ae:	428b      	cmp	r3, r1
 80080b0:	d80c      	bhi.n	80080cc <__multiply+0x9c>
 80080b2:	2e00      	cmp	r6, #0
 80080b4:	dd03      	ble.n	80080be <__multiply+0x8e>
 80080b6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d05a      	beq.n	8008174 <__multiply+0x144>
 80080be:	6106      	str	r6, [r0, #16]
 80080c0:	b005      	add	sp, #20
 80080c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080c6:	f843 2b04 	str.w	r2, [r3], #4
 80080ca:	e7d8      	b.n	800807e <__multiply+0x4e>
 80080cc:	f8b1 a000 	ldrh.w	sl, [r1]
 80080d0:	f1ba 0f00 	cmp.w	sl, #0
 80080d4:	d023      	beq.n	800811e <__multiply+0xee>
 80080d6:	46a9      	mov	r9, r5
 80080d8:	f04f 0c00 	mov.w	ip, #0
 80080dc:	f104 0e14 	add.w	lr, r4, #20
 80080e0:	f85e 7b04 	ldr.w	r7, [lr], #4
 80080e4:	f8d9 3000 	ldr.w	r3, [r9]
 80080e8:	fa1f fb87 	uxth.w	fp, r7
 80080ec:	b29b      	uxth	r3, r3
 80080ee:	fb0a 330b 	mla	r3, sl, fp, r3
 80080f2:	4463      	add	r3, ip
 80080f4:	f8d9 c000 	ldr.w	ip, [r9]
 80080f8:	0c3f      	lsrs	r7, r7, #16
 80080fa:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80080fe:	fb0a c707 	mla	r7, sl, r7, ip
 8008102:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008106:	b29b      	uxth	r3, r3
 8008108:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800810c:	4572      	cmp	r2, lr
 800810e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008112:	f849 3b04 	str.w	r3, [r9], #4
 8008116:	d8e3      	bhi.n	80080e0 <__multiply+0xb0>
 8008118:	9b01      	ldr	r3, [sp, #4]
 800811a:	f845 c003 	str.w	ip, [r5, r3]
 800811e:	9b03      	ldr	r3, [sp, #12]
 8008120:	3104      	adds	r1, #4
 8008122:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008126:	f1b9 0f00 	cmp.w	r9, #0
 800812a:	d021      	beq.n	8008170 <__multiply+0x140>
 800812c:	46ae      	mov	lr, r5
 800812e:	f04f 0a00 	mov.w	sl, #0
 8008132:	682b      	ldr	r3, [r5, #0]
 8008134:	f104 0c14 	add.w	ip, r4, #20
 8008138:	f8bc b000 	ldrh.w	fp, [ip]
 800813c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008140:	b29b      	uxth	r3, r3
 8008142:	fb09 770b 	mla	r7, r9, fp, r7
 8008146:	4457      	add	r7, sl
 8008148:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800814c:	f84e 3b04 	str.w	r3, [lr], #4
 8008150:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008154:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008158:	f8be 3000 	ldrh.w	r3, [lr]
 800815c:	4562      	cmp	r2, ip
 800815e:	fb09 330a 	mla	r3, r9, sl, r3
 8008162:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008166:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800816a:	d8e5      	bhi.n	8008138 <__multiply+0x108>
 800816c:	9f01      	ldr	r7, [sp, #4]
 800816e:	51eb      	str	r3, [r5, r7]
 8008170:	3504      	adds	r5, #4
 8008172:	e79a      	b.n	80080aa <__multiply+0x7a>
 8008174:	3e01      	subs	r6, #1
 8008176:	e79c      	b.n	80080b2 <__multiply+0x82>
 8008178:	08009ea0 	.word	0x08009ea0
 800817c:	08009f11 	.word	0x08009f11

08008180 <__pow5mult>:
 8008180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008184:	4615      	mov	r5, r2
 8008186:	f012 0203 	ands.w	r2, r2, #3
 800818a:	4607      	mov	r7, r0
 800818c:	460e      	mov	r6, r1
 800818e:	d007      	beq.n	80081a0 <__pow5mult+0x20>
 8008190:	4c25      	ldr	r4, [pc, #148]	@ (8008228 <__pow5mult+0xa8>)
 8008192:	3a01      	subs	r2, #1
 8008194:	2300      	movs	r3, #0
 8008196:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800819a:	f7ff fe57 	bl	8007e4c <__multadd>
 800819e:	4606      	mov	r6, r0
 80081a0:	10ad      	asrs	r5, r5, #2
 80081a2:	d03d      	beq.n	8008220 <__pow5mult+0xa0>
 80081a4:	69fc      	ldr	r4, [r7, #28]
 80081a6:	b97c      	cbnz	r4, 80081c8 <__pow5mult+0x48>
 80081a8:	2010      	movs	r0, #16
 80081aa:	f7fc ff03 	bl	8004fb4 <malloc>
 80081ae:	4602      	mov	r2, r0
 80081b0:	61f8      	str	r0, [r7, #28]
 80081b2:	b928      	cbnz	r0, 80081c0 <__pow5mult+0x40>
 80081b4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80081b8:	4b1c      	ldr	r3, [pc, #112]	@ (800822c <__pow5mult+0xac>)
 80081ba:	481d      	ldr	r0, [pc, #116]	@ (8008230 <__pow5mult+0xb0>)
 80081bc:	f000 fcb0 	bl	8008b20 <__assert_func>
 80081c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80081c4:	6004      	str	r4, [r0, #0]
 80081c6:	60c4      	str	r4, [r0, #12]
 80081c8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80081cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80081d0:	b94c      	cbnz	r4, 80081e6 <__pow5mult+0x66>
 80081d2:	f240 2171 	movw	r1, #625	@ 0x271
 80081d6:	4638      	mov	r0, r7
 80081d8:	f7ff ff14 	bl	8008004 <__i2b>
 80081dc:	2300      	movs	r3, #0
 80081de:	4604      	mov	r4, r0
 80081e0:	f8c8 0008 	str.w	r0, [r8, #8]
 80081e4:	6003      	str	r3, [r0, #0]
 80081e6:	f04f 0900 	mov.w	r9, #0
 80081ea:	07eb      	lsls	r3, r5, #31
 80081ec:	d50a      	bpl.n	8008204 <__pow5mult+0x84>
 80081ee:	4631      	mov	r1, r6
 80081f0:	4622      	mov	r2, r4
 80081f2:	4638      	mov	r0, r7
 80081f4:	f7ff ff1c 	bl	8008030 <__multiply>
 80081f8:	4680      	mov	r8, r0
 80081fa:	4631      	mov	r1, r6
 80081fc:	4638      	mov	r0, r7
 80081fe:	f7ff fe03 	bl	8007e08 <_Bfree>
 8008202:	4646      	mov	r6, r8
 8008204:	106d      	asrs	r5, r5, #1
 8008206:	d00b      	beq.n	8008220 <__pow5mult+0xa0>
 8008208:	6820      	ldr	r0, [r4, #0]
 800820a:	b938      	cbnz	r0, 800821c <__pow5mult+0x9c>
 800820c:	4622      	mov	r2, r4
 800820e:	4621      	mov	r1, r4
 8008210:	4638      	mov	r0, r7
 8008212:	f7ff ff0d 	bl	8008030 <__multiply>
 8008216:	6020      	str	r0, [r4, #0]
 8008218:	f8c0 9000 	str.w	r9, [r0]
 800821c:	4604      	mov	r4, r0
 800821e:	e7e4      	b.n	80081ea <__pow5mult+0x6a>
 8008220:	4630      	mov	r0, r6
 8008222:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008226:	bf00      	nop
 8008228:	08009f6c 	.word	0x08009f6c
 800822c:	08009e31 	.word	0x08009e31
 8008230:	08009f11 	.word	0x08009f11

08008234 <__lshift>:
 8008234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008238:	460c      	mov	r4, r1
 800823a:	4607      	mov	r7, r0
 800823c:	4691      	mov	r9, r2
 800823e:	6923      	ldr	r3, [r4, #16]
 8008240:	6849      	ldr	r1, [r1, #4]
 8008242:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008246:	68a3      	ldr	r3, [r4, #8]
 8008248:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800824c:	f108 0601 	add.w	r6, r8, #1
 8008250:	42b3      	cmp	r3, r6
 8008252:	db0b      	blt.n	800826c <__lshift+0x38>
 8008254:	4638      	mov	r0, r7
 8008256:	f7ff fd97 	bl	8007d88 <_Balloc>
 800825a:	4605      	mov	r5, r0
 800825c:	b948      	cbnz	r0, 8008272 <__lshift+0x3e>
 800825e:	4602      	mov	r2, r0
 8008260:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008264:	4b27      	ldr	r3, [pc, #156]	@ (8008304 <__lshift+0xd0>)
 8008266:	4828      	ldr	r0, [pc, #160]	@ (8008308 <__lshift+0xd4>)
 8008268:	f000 fc5a 	bl	8008b20 <__assert_func>
 800826c:	3101      	adds	r1, #1
 800826e:	005b      	lsls	r3, r3, #1
 8008270:	e7ee      	b.n	8008250 <__lshift+0x1c>
 8008272:	2300      	movs	r3, #0
 8008274:	f100 0114 	add.w	r1, r0, #20
 8008278:	f100 0210 	add.w	r2, r0, #16
 800827c:	4618      	mov	r0, r3
 800827e:	4553      	cmp	r3, sl
 8008280:	db33      	blt.n	80082ea <__lshift+0xb6>
 8008282:	6920      	ldr	r0, [r4, #16]
 8008284:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008288:	f104 0314 	add.w	r3, r4, #20
 800828c:	f019 091f 	ands.w	r9, r9, #31
 8008290:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008294:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008298:	d02b      	beq.n	80082f2 <__lshift+0xbe>
 800829a:	468a      	mov	sl, r1
 800829c:	2200      	movs	r2, #0
 800829e:	f1c9 0e20 	rsb	lr, r9, #32
 80082a2:	6818      	ldr	r0, [r3, #0]
 80082a4:	fa00 f009 	lsl.w	r0, r0, r9
 80082a8:	4310      	orrs	r0, r2
 80082aa:	f84a 0b04 	str.w	r0, [sl], #4
 80082ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80082b2:	459c      	cmp	ip, r3
 80082b4:	fa22 f20e 	lsr.w	r2, r2, lr
 80082b8:	d8f3      	bhi.n	80082a2 <__lshift+0x6e>
 80082ba:	ebac 0304 	sub.w	r3, ip, r4
 80082be:	3b15      	subs	r3, #21
 80082c0:	f023 0303 	bic.w	r3, r3, #3
 80082c4:	3304      	adds	r3, #4
 80082c6:	f104 0015 	add.w	r0, r4, #21
 80082ca:	4584      	cmp	ip, r0
 80082cc:	bf38      	it	cc
 80082ce:	2304      	movcc	r3, #4
 80082d0:	50ca      	str	r2, [r1, r3]
 80082d2:	b10a      	cbz	r2, 80082d8 <__lshift+0xa4>
 80082d4:	f108 0602 	add.w	r6, r8, #2
 80082d8:	3e01      	subs	r6, #1
 80082da:	4638      	mov	r0, r7
 80082dc:	4621      	mov	r1, r4
 80082de:	612e      	str	r6, [r5, #16]
 80082e0:	f7ff fd92 	bl	8007e08 <_Bfree>
 80082e4:	4628      	mov	r0, r5
 80082e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082ea:	f842 0f04 	str.w	r0, [r2, #4]!
 80082ee:	3301      	adds	r3, #1
 80082f0:	e7c5      	b.n	800827e <__lshift+0x4a>
 80082f2:	3904      	subs	r1, #4
 80082f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80082f8:	459c      	cmp	ip, r3
 80082fa:	f841 2f04 	str.w	r2, [r1, #4]!
 80082fe:	d8f9      	bhi.n	80082f4 <__lshift+0xc0>
 8008300:	e7ea      	b.n	80082d8 <__lshift+0xa4>
 8008302:	bf00      	nop
 8008304:	08009ea0 	.word	0x08009ea0
 8008308:	08009f11 	.word	0x08009f11

0800830c <__mcmp>:
 800830c:	4603      	mov	r3, r0
 800830e:	690a      	ldr	r2, [r1, #16]
 8008310:	6900      	ldr	r0, [r0, #16]
 8008312:	b530      	push	{r4, r5, lr}
 8008314:	1a80      	subs	r0, r0, r2
 8008316:	d10e      	bne.n	8008336 <__mcmp+0x2a>
 8008318:	3314      	adds	r3, #20
 800831a:	3114      	adds	r1, #20
 800831c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008320:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008324:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008328:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800832c:	4295      	cmp	r5, r2
 800832e:	d003      	beq.n	8008338 <__mcmp+0x2c>
 8008330:	d205      	bcs.n	800833e <__mcmp+0x32>
 8008332:	f04f 30ff 	mov.w	r0, #4294967295
 8008336:	bd30      	pop	{r4, r5, pc}
 8008338:	42a3      	cmp	r3, r4
 800833a:	d3f3      	bcc.n	8008324 <__mcmp+0x18>
 800833c:	e7fb      	b.n	8008336 <__mcmp+0x2a>
 800833e:	2001      	movs	r0, #1
 8008340:	e7f9      	b.n	8008336 <__mcmp+0x2a>
	...

08008344 <__mdiff>:
 8008344:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008348:	4689      	mov	r9, r1
 800834a:	4606      	mov	r6, r0
 800834c:	4611      	mov	r1, r2
 800834e:	4648      	mov	r0, r9
 8008350:	4614      	mov	r4, r2
 8008352:	f7ff ffdb 	bl	800830c <__mcmp>
 8008356:	1e05      	subs	r5, r0, #0
 8008358:	d112      	bne.n	8008380 <__mdiff+0x3c>
 800835a:	4629      	mov	r1, r5
 800835c:	4630      	mov	r0, r6
 800835e:	f7ff fd13 	bl	8007d88 <_Balloc>
 8008362:	4602      	mov	r2, r0
 8008364:	b928      	cbnz	r0, 8008372 <__mdiff+0x2e>
 8008366:	f240 2137 	movw	r1, #567	@ 0x237
 800836a:	4b3e      	ldr	r3, [pc, #248]	@ (8008464 <__mdiff+0x120>)
 800836c:	483e      	ldr	r0, [pc, #248]	@ (8008468 <__mdiff+0x124>)
 800836e:	f000 fbd7 	bl	8008b20 <__assert_func>
 8008372:	2301      	movs	r3, #1
 8008374:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008378:	4610      	mov	r0, r2
 800837a:	b003      	add	sp, #12
 800837c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008380:	bfbc      	itt	lt
 8008382:	464b      	movlt	r3, r9
 8008384:	46a1      	movlt	r9, r4
 8008386:	4630      	mov	r0, r6
 8008388:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800838c:	bfba      	itte	lt
 800838e:	461c      	movlt	r4, r3
 8008390:	2501      	movlt	r5, #1
 8008392:	2500      	movge	r5, #0
 8008394:	f7ff fcf8 	bl	8007d88 <_Balloc>
 8008398:	4602      	mov	r2, r0
 800839a:	b918      	cbnz	r0, 80083a4 <__mdiff+0x60>
 800839c:	f240 2145 	movw	r1, #581	@ 0x245
 80083a0:	4b30      	ldr	r3, [pc, #192]	@ (8008464 <__mdiff+0x120>)
 80083a2:	e7e3      	b.n	800836c <__mdiff+0x28>
 80083a4:	f100 0b14 	add.w	fp, r0, #20
 80083a8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80083ac:	f109 0310 	add.w	r3, r9, #16
 80083b0:	60c5      	str	r5, [r0, #12]
 80083b2:	f04f 0c00 	mov.w	ip, #0
 80083b6:	f109 0514 	add.w	r5, r9, #20
 80083ba:	46d9      	mov	r9, fp
 80083bc:	6926      	ldr	r6, [r4, #16]
 80083be:	f104 0e14 	add.w	lr, r4, #20
 80083c2:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80083c6:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80083ca:	9301      	str	r3, [sp, #4]
 80083cc:	9b01      	ldr	r3, [sp, #4]
 80083ce:	f85e 0b04 	ldr.w	r0, [lr], #4
 80083d2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80083d6:	b281      	uxth	r1, r0
 80083d8:	9301      	str	r3, [sp, #4]
 80083da:	fa1f f38a 	uxth.w	r3, sl
 80083de:	1a5b      	subs	r3, r3, r1
 80083e0:	0c00      	lsrs	r0, r0, #16
 80083e2:	4463      	add	r3, ip
 80083e4:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80083e8:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80083ec:	b29b      	uxth	r3, r3
 80083ee:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80083f2:	4576      	cmp	r6, lr
 80083f4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80083f8:	f849 3b04 	str.w	r3, [r9], #4
 80083fc:	d8e6      	bhi.n	80083cc <__mdiff+0x88>
 80083fe:	1b33      	subs	r3, r6, r4
 8008400:	3b15      	subs	r3, #21
 8008402:	f023 0303 	bic.w	r3, r3, #3
 8008406:	3415      	adds	r4, #21
 8008408:	3304      	adds	r3, #4
 800840a:	42a6      	cmp	r6, r4
 800840c:	bf38      	it	cc
 800840e:	2304      	movcc	r3, #4
 8008410:	441d      	add	r5, r3
 8008412:	445b      	add	r3, fp
 8008414:	461e      	mov	r6, r3
 8008416:	462c      	mov	r4, r5
 8008418:	4544      	cmp	r4, r8
 800841a:	d30e      	bcc.n	800843a <__mdiff+0xf6>
 800841c:	f108 0103 	add.w	r1, r8, #3
 8008420:	1b49      	subs	r1, r1, r5
 8008422:	f021 0103 	bic.w	r1, r1, #3
 8008426:	3d03      	subs	r5, #3
 8008428:	45a8      	cmp	r8, r5
 800842a:	bf38      	it	cc
 800842c:	2100      	movcc	r1, #0
 800842e:	440b      	add	r3, r1
 8008430:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008434:	b199      	cbz	r1, 800845e <__mdiff+0x11a>
 8008436:	6117      	str	r7, [r2, #16]
 8008438:	e79e      	b.n	8008378 <__mdiff+0x34>
 800843a:	46e6      	mov	lr, ip
 800843c:	f854 1b04 	ldr.w	r1, [r4], #4
 8008440:	fa1f fc81 	uxth.w	ip, r1
 8008444:	44f4      	add	ip, lr
 8008446:	0c08      	lsrs	r0, r1, #16
 8008448:	4471      	add	r1, lr
 800844a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800844e:	b289      	uxth	r1, r1
 8008450:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008454:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008458:	f846 1b04 	str.w	r1, [r6], #4
 800845c:	e7dc      	b.n	8008418 <__mdiff+0xd4>
 800845e:	3f01      	subs	r7, #1
 8008460:	e7e6      	b.n	8008430 <__mdiff+0xec>
 8008462:	bf00      	nop
 8008464:	08009ea0 	.word	0x08009ea0
 8008468:	08009f11 	.word	0x08009f11

0800846c <__ulp>:
 800846c:	4b0e      	ldr	r3, [pc, #56]	@ (80084a8 <__ulp+0x3c>)
 800846e:	400b      	ands	r3, r1
 8008470:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008474:	2b00      	cmp	r3, #0
 8008476:	dc08      	bgt.n	800848a <__ulp+0x1e>
 8008478:	425b      	negs	r3, r3
 800847a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800847e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008482:	da04      	bge.n	800848e <__ulp+0x22>
 8008484:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008488:	4113      	asrs	r3, r2
 800848a:	2200      	movs	r2, #0
 800848c:	e008      	b.n	80084a0 <__ulp+0x34>
 800848e:	f1a2 0314 	sub.w	r3, r2, #20
 8008492:	2b1e      	cmp	r3, #30
 8008494:	bfd6      	itet	le
 8008496:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800849a:	2201      	movgt	r2, #1
 800849c:	40da      	lsrle	r2, r3
 800849e:	2300      	movs	r3, #0
 80084a0:	4619      	mov	r1, r3
 80084a2:	4610      	mov	r0, r2
 80084a4:	4770      	bx	lr
 80084a6:	bf00      	nop
 80084a8:	7ff00000 	.word	0x7ff00000

080084ac <__b2d>:
 80084ac:	6902      	ldr	r2, [r0, #16]
 80084ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084b0:	f100 0614 	add.w	r6, r0, #20
 80084b4:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 80084b8:	f852 4c04 	ldr.w	r4, [r2, #-4]
 80084bc:	4f1e      	ldr	r7, [pc, #120]	@ (8008538 <__b2d+0x8c>)
 80084be:	4620      	mov	r0, r4
 80084c0:	f7ff fd54 	bl	8007f6c <__hi0bits>
 80084c4:	4603      	mov	r3, r0
 80084c6:	f1c0 0020 	rsb	r0, r0, #32
 80084ca:	2b0a      	cmp	r3, #10
 80084cc:	f1a2 0504 	sub.w	r5, r2, #4
 80084d0:	6008      	str	r0, [r1, #0]
 80084d2:	dc12      	bgt.n	80084fa <__b2d+0x4e>
 80084d4:	42ae      	cmp	r6, r5
 80084d6:	bf2c      	ite	cs
 80084d8:	2200      	movcs	r2, #0
 80084da:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80084de:	f1c3 0c0b 	rsb	ip, r3, #11
 80084e2:	3315      	adds	r3, #21
 80084e4:	fa24 fe0c 	lsr.w	lr, r4, ip
 80084e8:	fa04 f303 	lsl.w	r3, r4, r3
 80084ec:	fa22 f20c 	lsr.w	r2, r2, ip
 80084f0:	ea4e 0107 	orr.w	r1, lr, r7
 80084f4:	431a      	orrs	r2, r3
 80084f6:	4610      	mov	r0, r2
 80084f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084fa:	42ae      	cmp	r6, r5
 80084fc:	bf36      	itet	cc
 80084fe:	f1a2 0508 	subcc.w	r5, r2, #8
 8008502:	2200      	movcs	r2, #0
 8008504:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8008508:	3b0b      	subs	r3, #11
 800850a:	d012      	beq.n	8008532 <__b2d+0x86>
 800850c:	f1c3 0720 	rsb	r7, r3, #32
 8008510:	fa22 f107 	lsr.w	r1, r2, r7
 8008514:	409c      	lsls	r4, r3
 8008516:	430c      	orrs	r4, r1
 8008518:	42b5      	cmp	r5, r6
 800851a:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800851e:	bf94      	ite	ls
 8008520:	2400      	movls	r4, #0
 8008522:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8008526:	409a      	lsls	r2, r3
 8008528:	40fc      	lsrs	r4, r7
 800852a:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800852e:	4322      	orrs	r2, r4
 8008530:	e7e1      	b.n	80084f6 <__b2d+0x4a>
 8008532:	ea44 0107 	orr.w	r1, r4, r7
 8008536:	e7de      	b.n	80084f6 <__b2d+0x4a>
 8008538:	3ff00000 	.word	0x3ff00000

0800853c <__d2b>:
 800853c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8008540:	2101      	movs	r1, #1
 8008542:	4690      	mov	r8, r2
 8008544:	4699      	mov	r9, r3
 8008546:	9e08      	ldr	r6, [sp, #32]
 8008548:	f7ff fc1e 	bl	8007d88 <_Balloc>
 800854c:	4604      	mov	r4, r0
 800854e:	b930      	cbnz	r0, 800855e <__d2b+0x22>
 8008550:	4602      	mov	r2, r0
 8008552:	f240 310f 	movw	r1, #783	@ 0x30f
 8008556:	4b23      	ldr	r3, [pc, #140]	@ (80085e4 <__d2b+0xa8>)
 8008558:	4823      	ldr	r0, [pc, #140]	@ (80085e8 <__d2b+0xac>)
 800855a:	f000 fae1 	bl	8008b20 <__assert_func>
 800855e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008562:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008566:	b10d      	cbz	r5, 800856c <__d2b+0x30>
 8008568:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800856c:	9301      	str	r3, [sp, #4]
 800856e:	f1b8 0300 	subs.w	r3, r8, #0
 8008572:	d024      	beq.n	80085be <__d2b+0x82>
 8008574:	4668      	mov	r0, sp
 8008576:	9300      	str	r3, [sp, #0]
 8008578:	f7ff fd17 	bl	8007faa <__lo0bits>
 800857c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008580:	b1d8      	cbz	r0, 80085ba <__d2b+0x7e>
 8008582:	f1c0 0320 	rsb	r3, r0, #32
 8008586:	fa02 f303 	lsl.w	r3, r2, r3
 800858a:	430b      	orrs	r3, r1
 800858c:	40c2      	lsrs	r2, r0
 800858e:	6163      	str	r3, [r4, #20]
 8008590:	9201      	str	r2, [sp, #4]
 8008592:	9b01      	ldr	r3, [sp, #4]
 8008594:	2b00      	cmp	r3, #0
 8008596:	bf0c      	ite	eq
 8008598:	2201      	moveq	r2, #1
 800859a:	2202      	movne	r2, #2
 800859c:	61a3      	str	r3, [r4, #24]
 800859e:	6122      	str	r2, [r4, #16]
 80085a0:	b1ad      	cbz	r5, 80085ce <__d2b+0x92>
 80085a2:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80085a6:	4405      	add	r5, r0
 80085a8:	6035      	str	r5, [r6, #0]
 80085aa:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80085ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085b0:	6018      	str	r0, [r3, #0]
 80085b2:	4620      	mov	r0, r4
 80085b4:	b002      	add	sp, #8
 80085b6:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80085ba:	6161      	str	r1, [r4, #20]
 80085bc:	e7e9      	b.n	8008592 <__d2b+0x56>
 80085be:	a801      	add	r0, sp, #4
 80085c0:	f7ff fcf3 	bl	8007faa <__lo0bits>
 80085c4:	9b01      	ldr	r3, [sp, #4]
 80085c6:	2201      	movs	r2, #1
 80085c8:	6163      	str	r3, [r4, #20]
 80085ca:	3020      	adds	r0, #32
 80085cc:	e7e7      	b.n	800859e <__d2b+0x62>
 80085ce:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80085d2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80085d6:	6030      	str	r0, [r6, #0]
 80085d8:	6918      	ldr	r0, [r3, #16]
 80085da:	f7ff fcc7 	bl	8007f6c <__hi0bits>
 80085de:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80085e2:	e7e4      	b.n	80085ae <__d2b+0x72>
 80085e4:	08009ea0 	.word	0x08009ea0
 80085e8:	08009f11 	.word	0x08009f11

080085ec <__ratio>:
 80085ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085f0:	b085      	sub	sp, #20
 80085f2:	e9cd 1000 	strd	r1, r0, [sp]
 80085f6:	a902      	add	r1, sp, #8
 80085f8:	f7ff ff58 	bl	80084ac <__b2d>
 80085fc:	468b      	mov	fp, r1
 80085fe:	4606      	mov	r6, r0
 8008600:	460f      	mov	r7, r1
 8008602:	9800      	ldr	r0, [sp, #0]
 8008604:	a903      	add	r1, sp, #12
 8008606:	f7ff ff51 	bl	80084ac <__b2d>
 800860a:	460d      	mov	r5, r1
 800860c:	9b01      	ldr	r3, [sp, #4]
 800860e:	4689      	mov	r9, r1
 8008610:	6919      	ldr	r1, [r3, #16]
 8008612:	9b00      	ldr	r3, [sp, #0]
 8008614:	4604      	mov	r4, r0
 8008616:	691b      	ldr	r3, [r3, #16]
 8008618:	4630      	mov	r0, r6
 800861a:	1ac9      	subs	r1, r1, r3
 800861c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008620:	1a9b      	subs	r3, r3, r2
 8008622:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008626:	2b00      	cmp	r3, #0
 8008628:	bfcd      	iteet	gt
 800862a:	463a      	movgt	r2, r7
 800862c:	462a      	movle	r2, r5
 800862e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008632:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8008636:	bfd8      	it	le
 8008638:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800863c:	464b      	mov	r3, r9
 800863e:	4622      	mov	r2, r4
 8008640:	4659      	mov	r1, fp
 8008642:	f7f8 f87d 	bl	8000740 <__aeabi_ddiv>
 8008646:	b005      	add	sp, #20
 8008648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800864c <__copybits>:
 800864c:	3901      	subs	r1, #1
 800864e:	b570      	push	{r4, r5, r6, lr}
 8008650:	1149      	asrs	r1, r1, #5
 8008652:	6914      	ldr	r4, [r2, #16]
 8008654:	3101      	adds	r1, #1
 8008656:	f102 0314 	add.w	r3, r2, #20
 800865a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800865e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008662:	1f05      	subs	r5, r0, #4
 8008664:	42a3      	cmp	r3, r4
 8008666:	d30c      	bcc.n	8008682 <__copybits+0x36>
 8008668:	1aa3      	subs	r3, r4, r2
 800866a:	3b11      	subs	r3, #17
 800866c:	f023 0303 	bic.w	r3, r3, #3
 8008670:	3211      	adds	r2, #17
 8008672:	42a2      	cmp	r2, r4
 8008674:	bf88      	it	hi
 8008676:	2300      	movhi	r3, #0
 8008678:	4418      	add	r0, r3
 800867a:	2300      	movs	r3, #0
 800867c:	4288      	cmp	r0, r1
 800867e:	d305      	bcc.n	800868c <__copybits+0x40>
 8008680:	bd70      	pop	{r4, r5, r6, pc}
 8008682:	f853 6b04 	ldr.w	r6, [r3], #4
 8008686:	f845 6f04 	str.w	r6, [r5, #4]!
 800868a:	e7eb      	b.n	8008664 <__copybits+0x18>
 800868c:	f840 3b04 	str.w	r3, [r0], #4
 8008690:	e7f4      	b.n	800867c <__copybits+0x30>

08008692 <__any_on>:
 8008692:	f100 0214 	add.w	r2, r0, #20
 8008696:	6900      	ldr	r0, [r0, #16]
 8008698:	114b      	asrs	r3, r1, #5
 800869a:	4298      	cmp	r0, r3
 800869c:	b510      	push	{r4, lr}
 800869e:	db11      	blt.n	80086c4 <__any_on+0x32>
 80086a0:	dd0a      	ble.n	80086b8 <__any_on+0x26>
 80086a2:	f011 011f 	ands.w	r1, r1, #31
 80086a6:	d007      	beq.n	80086b8 <__any_on+0x26>
 80086a8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80086ac:	fa24 f001 	lsr.w	r0, r4, r1
 80086b0:	fa00 f101 	lsl.w	r1, r0, r1
 80086b4:	428c      	cmp	r4, r1
 80086b6:	d10b      	bne.n	80086d0 <__any_on+0x3e>
 80086b8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80086bc:	4293      	cmp	r3, r2
 80086be:	d803      	bhi.n	80086c8 <__any_on+0x36>
 80086c0:	2000      	movs	r0, #0
 80086c2:	bd10      	pop	{r4, pc}
 80086c4:	4603      	mov	r3, r0
 80086c6:	e7f7      	b.n	80086b8 <__any_on+0x26>
 80086c8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80086cc:	2900      	cmp	r1, #0
 80086ce:	d0f5      	beq.n	80086bc <__any_on+0x2a>
 80086d0:	2001      	movs	r0, #1
 80086d2:	e7f6      	b.n	80086c2 <__any_on+0x30>

080086d4 <__ascii_wctomb>:
 80086d4:	4603      	mov	r3, r0
 80086d6:	4608      	mov	r0, r1
 80086d8:	b141      	cbz	r1, 80086ec <__ascii_wctomb+0x18>
 80086da:	2aff      	cmp	r2, #255	@ 0xff
 80086dc:	d904      	bls.n	80086e8 <__ascii_wctomb+0x14>
 80086de:	228a      	movs	r2, #138	@ 0x8a
 80086e0:	f04f 30ff 	mov.w	r0, #4294967295
 80086e4:	601a      	str	r2, [r3, #0]
 80086e6:	4770      	bx	lr
 80086e8:	2001      	movs	r0, #1
 80086ea:	700a      	strb	r2, [r1, #0]
 80086ec:	4770      	bx	lr

080086ee <__ssputs_r>:
 80086ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086f2:	461f      	mov	r7, r3
 80086f4:	688e      	ldr	r6, [r1, #8]
 80086f6:	4682      	mov	sl, r0
 80086f8:	42be      	cmp	r6, r7
 80086fa:	460c      	mov	r4, r1
 80086fc:	4690      	mov	r8, r2
 80086fe:	680b      	ldr	r3, [r1, #0]
 8008700:	d82d      	bhi.n	800875e <__ssputs_r+0x70>
 8008702:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008706:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800870a:	d026      	beq.n	800875a <__ssputs_r+0x6c>
 800870c:	6965      	ldr	r5, [r4, #20]
 800870e:	6909      	ldr	r1, [r1, #16]
 8008710:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008714:	eba3 0901 	sub.w	r9, r3, r1
 8008718:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800871c:	1c7b      	adds	r3, r7, #1
 800871e:	444b      	add	r3, r9
 8008720:	106d      	asrs	r5, r5, #1
 8008722:	429d      	cmp	r5, r3
 8008724:	bf38      	it	cc
 8008726:	461d      	movcc	r5, r3
 8008728:	0553      	lsls	r3, r2, #21
 800872a:	d527      	bpl.n	800877c <__ssputs_r+0x8e>
 800872c:	4629      	mov	r1, r5
 800872e:	f7fc fc6b 	bl	8005008 <_malloc_r>
 8008732:	4606      	mov	r6, r0
 8008734:	b360      	cbz	r0, 8008790 <__ssputs_r+0xa2>
 8008736:	464a      	mov	r2, r9
 8008738:	6921      	ldr	r1, [r4, #16]
 800873a:	f7fe f92a 	bl	8006992 <memcpy>
 800873e:	89a3      	ldrh	r3, [r4, #12]
 8008740:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008744:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008748:	81a3      	strh	r3, [r4, #12]
 800874a:	6126      	str	r6, [r4, #16]
 800874c:	444e      	add	r6, r9
 800874e:	6026      	str	r6, [r4, #0]
 8008750:	463e      	mov	r6, r7
 8008752:	6165      	str	r5, [r4, #20]
 8008754:	eba5 0509 	sub.w	r5, r5, r9
 8008758:	60a5      	str	r5, [r4, #8]
 800875a:	42be      	cmp	r6, r7
 800875c:	d900      	bls.n	8008760 <__ssputs_r+0x72>
 800875e:	463e      	mov	r6, r7
 8008760:	4632      	mov	r2, r6
 8008762:	4641      	mov	r1, r8
 8008764:	6820      	ldr	r0, [r4, #0]
 8008766:	f000 f9c1 	bl	8008aec <memmove>
 800876a:	2000      	movs	r0, #0
 800876c:	68a3      	ldr	r3, [r4, #8]
 800876e:	1b9b      	subs	r3, r3, r6
 8008770:	60a3      	str	r3, [r4, #8]
 8008772:	6823      	ldr	r3, [r4, #0]
 8008774:	4433      	add	r3, r6
 8008776:	6023      	str	r3, [r4, #0]
 8008778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800877c:	462a      	mov	r2, r5
 800877e:	f000 fa01 	bl	8008b84 <_realloc_r>
 8008782:	4606      	mov	r6, r0
 8008784:	2800      	cmp	r0, #0
 8008786:	d1e0      	bne.n	800874a <__ssputs_r+0x5c>
 8008788:	4650      	mov	r0, sl
 800878a:	6921      	ldr	r1, [r4, #16]
 800878c:	f7fe ff68 	bl	8007660 <_free_r>
 8008790:	230c      	movs	r3, #12
 8008792:	f8ca 3000 	str.w	r3, [sl]
 8008796:	89a3      	ldrh	r3, [r4, #12]
 8008798:	f04f 30ff 	mov.w	r0, #4294967295
 800879c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087a0:	81a3      	strh	r3, [r4, #12]
 80087a2:	e7e9      	b.n	8008778 <__ssputs_r+0x8a>

080087a4 <_svfiprintf_r>:
 80087a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087a8:	4698      	mov	r8, r3
 80087aa:	898b      	ldrh	r3, [r1, #12]
 80087ac:	4607      	mov	r7, r0
 80087ae:	061b      	lsls	r3, r3, #24
 80087b0:	460d      	mov	r5, r1
 80087b2:	4614      	mov	r4, r2
 80087b4:	b09d      	sub	sp, #116	@ 0x74
 80087b6:	d510      	bpl.n	80087da <_svfiprintf_r+0x36>
 80087b8:	690b      	ldr	r3, [r1, #16]
 80087ba:	b973      	cbnz	r3, 80087da <_svfiprintf_r+0x36>
 80087bc:	2140      	movs	r1, #64	@ 0x40
 80087be:	f7fc fc23 	bl	8005008 <_malloc_r>
 80087c2:	6028      	str	r0, [r5, #0]
 80087c4:	6128      	str	r0, [r5, #16]
 80087c6:	b930      	cbnz	r0, 80087d6 <_svfiprintf_r+0x32>
 80087c8:	230c      	movs	r3, #12
 80087ca:	603b      	str	r3, [r7, #0]
 80087cc:	f04f 30ff 	mov.w	r0, #4294967295
 80087d0:	b01d      	add	sp, #116	@ 0x74
 80087d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087d6:	2340      	movs	r3, #64	@ 0x40
 80087d8:	616b      	str	r3, [r5, #20]
 80087da:	2300      	movs	r3, #0
 80087dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80087de:	2320      	movs	r3, #32
 80087e0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80087e4:	2330      	movs	r3, #48	@ 0x30
 80087e6:	f04f 0901 	mov.w	r9, #1
 80087ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80087ee:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8008988 <_svfiprintf_r+0x1e4>
 80087f2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80087f6:	4623      	mov	r3, r4
 80087f8:	469a      	mov	sl, r3
 80087fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087fe:	b10a      	cbz	r2, 8008804 <_svfiprintf_r+0x60>
 8008800:	2a25      	cmp	r2, #37	@ 0x25
 8008802:	d1f9      	bne.n	80087f8 <_svfiprintf_r+0x54>
 8008804:	ebba 0b04 	subs.w	fp, sl, r4
 8008808:	d00b      	beq.n	8008822 <_svfiprintf_r+0x7e>
 800880a:	465b      	mov	r3, fp
 800880c:	4622      	mov	r2, r4
 800880e:	4629      	mov	r1, r5
 8008810:	4638      	mov	r0, r7
 8008812:	f7ff ff6c 	bl	80086ee <__ssputs_r>
 8008816:	3001      	adds	r0, #1
 8008818:	f000 80a7 	beq.w	800896a <_svfiprintf_r+0x1c6>
 800881c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800881e:	445a      	add	r2, fp
 8008820:	9209      	str	r2, [sp, #36]	@ 0x24
 8008822:	f89a 3000 	ldrb.w	r3, [sl]
 8008826:	2b00      	cmp	r3, #0
 8008828:	f000 809f 	beq.w	800896a <_svfiprintf_r+0x1c6>
 800882c:	2300      	movs	r3, #0
 800882e:	f04f 32ff 	mov.w	r2, #4294967295
 8008832:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008836:	f10a 0a01 	add.w	sl, sl, #1
 800883a:	9304      	str	r3, [sp, #16]
 800883c:	9307      	str	r3, [sp, #28]
 800883e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008842:	931a      	str	r3, [sp, #104]	@ 0x68
 8008844:	4654      	mov	r4, sl
 8008846:	2205      	movs	r2, #5
 8008848:	f814 1b01 	ldrb.w	r1, [r4], #1
 800884c:	484e      	ldr	r0, [pc, #312]	@ (8008988 <_svfiprintf_r+0x1e4>)
 800884e:	f7fe f892 	bl	8006976 <memchr>
 8008852:	9a04      	ldr	r2, [sp, #16]
 8008854:	b9d8      	cbnz	r0, 800888e <_svfiprintf_r+0xea>
 8008856:	06d0      	lsls	r0, r2, #27
 8008858:	bf44      	itt	mi
 800885a:	2320      	movmi	r3, #32
 800885c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008860:	0711      	lsls	r1, r2, #28
 8008862:	bf44      	itt	mi
 8008864:	232b      	movmi	r3, #43	@ 0x2b
 8008866:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800886a:	f89a 3000 	ldrb.w	r3, [sl]
 800886e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008870:	d015      	beq.n	800889e <_svfiprintf_r+0xfa>
 8008872:	4654      	mov	r4, sl
 8008874:	2000      	movs	r0, #0
 8008876:	f04f 0c0a 	mov.w	ip, #10
 800887a:	9a07      	ldr	r2, [sp, #28]
 800887c:	4621      	mov	r1, r4
 800887e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008882:	3b30      	subs	r3, #48	@ 0x30
 8008884:	2b09      	cmp	r3, #9
 8008886:	d94b      	bls.n	8008920 <_svfiprintf_r+0x17c>
 8008888:	b1b0      	cbz	r0, 80088b8 <_svfiprintf_r+0x114>
 800888a:	9207      	str	r2, [sp, #28]
 800888c:	e014      	b.n	80088b8 <_svfiprintf_r+0x114>
 800888e:	eba0 0308 	sub.w	r3, r0, r8
 8008892:	fa09 f303 	lsl.w	r3, r9, r3
 8008896:	4313      	orrs	r3, r2
 8008898:	46a2      	mov	sl, r4
 800889a:	9304      	str	r3, [sp, #16]
 800889c:	e7d2      	b.n	8008844 <_svfiprintf_r+0xa0>
 800889e:	9b03      	ldr	r3, [sp, #12]
 80088a0:	1d19      	adds	r1, r3, #4
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	9103      	str	r1, [sp, #12]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	bfbb      	ittet	lt
 80088aa:	425b      	neglt	r3, r3
 80088ac:	f042 0202 	orrlt.w	r2, r2, #2
 80088b0:	9307      	strge	r3, [sp, #28]
 80088b2:	9307      	strlt	r3, [sp, #28]
 80088b4:	bfb8      	it	lt
 80088b6:	9204      	strlt	r2, [sp, #16]
 80088b8:	7823      	ldrb	r3, [r4, #0]
 80088ba:	2b2e      	cmp	r3, #46	@ 0x2e
 80088bc:	d10a      	bne.n	80088d4 <_svfiprintf_r+0x130>
 80088be:	7863      	ldrb	r3, [r4, #1]
 80088c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80088c2:	d132      	bne.n	800892a <_svfiprintf_r+0x186>
 80088c4:	9b03      	ldr	r3, [sp, #12]
 80088c6:	3402      	adds	r4, #2
 80088c8:	1d1a      	adds	r2, r3, #4
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	9203      	str	r2, [sp, #12]
 80088ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80088d2:	9305      	str	r3, [sp, #20]
 80088d4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800898c <_svfiprintf_r+0x1e8>
 80088d8:	2203      	movs	r2, #3
 80088da:	4650      	mov	r0, sl
 80088dc:	7821      	ldrb	r1, [r4, #0]
 80088de:	f7fe f84a 	bl	8006976 <memchr>
 80088e2:	b138      	cbz	r0, 80088f4 <_svfiprintf_r+0x150>
 80088e4:	2240      	movs	r2, #64	@ 0x40
 80088e6:	9b04      	ldr	r3, [sp, #16]
 80088e8:	eba0 000a 	sub.w	r0, r0, sl
 80088ec:	4082      	lsls	r2, r0
 80088ee:	4313      	orrs	r3, r2
 80088f0:	3401      	adds	r4, #1
 80088f2:	9304      	str	r3, [sp, #16]
 80088f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088f8:	2206      	movs	r2, #6
 80088fa:	4825      	ldr	r0, [pc, #148]	@ (8008990 <_svfiprintf_r+0x1ec>)
 80088fc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008900:	f7fe f839 	bl	8006976 <memchr>
 8008904:	2800      	cmp	r0, #0
 8008906:	d036      	beq.n	8008976 <_svfiprintf_r+0x1d2>
 8008908:	4b22      	ldr	r3, [pc, #136]	@ (8008994 <_svfiprintf_r+0x1f0>)
 800890a:	bb1b      	cbnz	r3, 8008954 <_svfiprintf_r+0x1b0>
 800890c:	9b03      	ldr	r3, [sp, #12]
 800890e:	3307      	adds	r3, #7
 8008910:	f023 0307 	bic.w	r3, r3, #7
 8008914:	3308      	adds	r3, #8
 8008916:	9303      	str	r3, [sp, #12]
 8008918:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800891a:	4433      	add	r3, r6
 800891c:	9309      	str	r3, [sp, #36]	@ 0x24
 800891e:	e76a      	b.n	80087f6 <_svfiprintf_r+0x52>
 8008920:	460c      	mov	r4, r1
 8008922:	2001      	movs	r0, #1
 8008924:	fb0c 3202 	mla	r2, ip, r2, r3
 8008928:	e7a8      	b.n	800887c <_svfiprintf_r+0xd8>
 800892a:	2300      	movs	r3, #0
 800892c:	f04f 0c0a 	mov.w	ip, #10
 8008930:	4619      	mov	r1, r3
 8008932:	3401      	adds	r4, #1
 8008934:	9305      	str	r3, [sp, #20]
 8008936:	4620      	mov	r0, r4
 8008938:	f810 2b01 	ldrb.w	r2, [r0], #1
 800893c:	3a30      	subs	r2, #48	@ 0x30
 800893e:	2a09      	cmp	r2, #9
 8008940:	d903      	bls.n	800894a <_svfiprintf_r+0x1a6>
 8008942:	2b00      	cmp	r3, #0
 8008944:	d0c6      	beq.n	80088d4 <_svfiprintf_r+0x130>
 8008946:	9105      	str	r1, [sp, #20]
 8008948:	e7c4      	b.n	80088d4 <_svfiprintf_r+0x130>
 800894a:	4604      	mov	r4, r0
 800894c:	2301      	movs	r3, #1
 800894e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008952:	e7f0      	b.n	8008936 <_svfiprintf_r+0x192>
 8008954:	ab03      	add	r3, sp, #12
 8008956:	9300      	str	r3, [sp, #0]
 8008958:	462a      	mov	r2, r5
 800895a:	4638      	mov	r0, r7
 800895c:	4b0e      	ldr	r3, [pc, #56]	@ (8008998 <_svfiprintf_r+0x1f4>)
 800895e:	a904      	add	r1, sp, #16
 8008960:	f7fd fa84 	bl	8005e6c <_printf_float>
 8008964:	1c42      	adds	r2, r0, #1
 8008966:	4606      	mov	r6, r0
 8008968:	d1d6      	bne.n	8008918 <_svfiprintf_r+0x174>
 800896a:	89ab      	ldrh	r3, [r5, #12]
 800896c:	065b      	lsls	r3, r3, #25
 800896e:	f53f af2d 	bmi.w	80087cc <_svfiprintf_r+0x28>
 8008972:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008974:	e72c      	b.n	80087d0 <_svfiprintf_r+0x2c>
 8008976:	ab03      	add	r3, sp, #12
 8008978:	9300      	str	r3, [sp, #0]
 800897a:	462a      	mov	r2, r5
 800897c:	4638      	mov	r0, r7
 800897e:	4b06      	ldr	r3, [pc, #24]	@ (8008998 <_svfiprintf_r+0x1f4>)
 8008980:	a904      	add	r1, sp, #16
 8008982:	f7fd fd11 	bl	80063a8 <_printf_i>
 8008986:	e7ed      	b.n	8008964 <_svfiprintf_r+0x1c0>
 8008988:	0800a169 	.word	0x0800a169
 800898c:	0800a16f 	.word	0x0800a16f
 8008990:	0800a173 	.word	0x0800a173
 8008994:	08005e6d 	.word	0x08005e6d
 8008998:	080086ef 	.word	0x080086ef

0800899c <__sflush_r>:
 800899c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80089a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089a2:	0716      	lsls	r6, r2, #28
 80089a4:	4605      	mov	r5, r0
 80089a6:	460c      	mov	r4, r1
 80089a8:	d454      	bmi.n	8008a54 <__sflush_r+0xb8>
 80089aa:	684b      	ldr	r3, [r1, #4]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	dc02      	bgt.n	80089b6 <__sflush_r+0x1a>
 80089b0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	dd48      	ble.n	8008a48 <__sflush_r+0xac>
 80089b6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80089b8:	2e00      	cmp	r6, #0
 80089ba:	d045      	beq.n	8008a48 <__sflush_r+0xac>
 80089bc:	2300      	movs	r3, #0
 80089be:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80089c2:	682f      	ldr	r7, [r5, #0]
 80089c4:	6a21      	ldr	r1, [r4, #32]
 80089c6:	602b      	str	r3, [r5, #0]
 80089c8:	d030      	beq.n	8008a2c <__sflush_r+0x90>
 80089ca:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80089cc:	89a3      	ldrh	r3, [r4, #12]
 80089ce:	0759      	lsls	r1, r3, #29
 80089d0:	d505      	bpl.n	80089de <__sflush_r+0x42>
 80089d2:	6863      	ldr	r3, [r4, #4]
 80089d4:	1ad2      	subs	r2, r2, r3
 80089d6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80089d8:	b10b      	cbz	r3, 80089de <__sflush_r+0x42>
 80089da:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80089dc:	1ad2      	subs	r2, r2, r3
 80089de:	2300      	movs	r3, #0
 80089e0:	4628      	mov	r0, r5
 80089e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80089e4:	6a21      	ldr	r1, [r4, #32]
 80089e6:	47b0      	blx	r6
 80089e8:	1c43      	adds	r3, r0, #1
 80089ea:	89a3      	ldrh	r3, [r4, #12]
 80089ec:	d106      	bne.n	80089fc <__sflush_r+0x60>
 80089ee:	6829      	ldr	r1, [r5, #0]
 80089f0:	291d      	cmp	r1, #29
 80089f2:	d82b      	bhi.n	8008a4c <__sflush_r+0xb0>
 80089f4:	4a28      	ldr	r2, [pc, #160]	@ (8008a98 <__sflush_r+0xfc>)
 80089f6:	410a      	asrs	r2, r1
 80089f8:	07d6      	lsls	r6, r2, #31
 80089fa:	d427      	bmi.n	8008a4c <__sflush_r+0xb0>
 80089fc:	2200      	movs	r2, #0
 80089fe:	6062      	str	r2, [r4, #4]
 8008a00:	6922      	ldr	r2, [r4, #16]
 8008a02:	04d9      	lsls	r1, r3, #19
 8008a04:	6022      	str	r2, [r4, #0]
 8008a06:	d504      	bpl.n	8008a12 <__sflush_r+0x76>
 8008a08:	1c42      	adds	r2, r0, #1
 8008a0a:	d101      	bne.n	8008a10 <__sflush_r+0x74>
 8008a0c:	682b      	ldr	r3, [r5, #0]
 8008a0e:	b903      	cbnz	r3, 8008a12 <__sflush_r+0x76>
 8008a10:	6560      	str	r0, [r4, #84]	@ 0x54
 8008a12:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008a14:	602f      	str	r7, [r5, #0]
 8008a16:	b1b9      	cbz	r1, 8008a48 <__sflush_r+0xac>
 8008a18:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008a1c:	4299      	cmp	r1, r3
 8008a1e:	d002      	beq.n	8008a26 <__sflush_r+0x8a>
 8008a20:	4628      	mov	r0, r5
 8008a22:	f7fe fe1d 	bl	8007660 <_free_r>
 8008a26:	2300      	movs	r3, #0
 8008a28:	6363      	str	r3, [r4, #52]	@ 0x34
 8008a2a:	e00d      	b.n	8008a48 <__sflush_r+0xac>
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	4628      	mov	r0, r5
 8008a30:	47b0      	blx	r6
 8008a32:	4602      	mov	r2, r0
 8008a34:	1c50      	adds	r0, r2, #1
 8008a36:	d1c9      	bne.n	80089cc <__sflush_r+0x30>
 8008a38:	682b      	ldr	r3, [r5, #0]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d0c6      	beq.n	80089cc <__sflush_r+0x30>
 8008a3e:	2b1d      	cmp	r3, #29
 8008a40:	d001      	beq.n	8008a46 <__sflush_r+0xaa>
 8008a42:	2b16      	cmp	r3, #22
 8008a44:	d11d      	bne.n	8008a82 <__sflush_r+0xe6>
 8008a46:	602f      	str	r7, [r5, #0]
 8008a48:	2000      	movs	r0, #0
 8008a4a:	e021      	b.n	8008a90 <__sflush_r+0xf4>
 8008a4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a50:	b21b      	sxth	r3, r3
 8008a52:	e01a      	b.n	8008a8a <__sflush_r+0xee>
 8008a54:	690f      	ldr	r7, [r1, #16]
 8008a56:	2f00      	cmp	r7, #0
 8008a58:	d0f6      	beq.n	8008a48 <__sflush_r+0xac>
 8008a5a:	0793      	lsls	r3, r2, #30
 8008a5c:	bf18      	it	ne
 8008a5e:	2300      	movne	r3, #0
 8008a60:	680e      	ldr	r6, [r1, #0]
 8008a62:	bf08      	it	eq
 8008a64:	694b      	ldreq	r3, [r1, #20]
 8008a66:	1bf6      	subs	r6, r6, r7
 8008a68:	600f      	str	r7, [r1, #0]
 8008a6a:	608b      	str	r3, [r1, #8]
 8008a6c:	2e00      	cmp	r6, #0
 8008a6e:	ddeb      	ble.n	8008a48 <__sflush_r+0xac>
 8008a70:	4633      	mov	r3, r6
 8008a72:	463a      	mov	r2, r7
 8008a74:	4628      	mov	r0, r5
 8008a76:	6a21      	ldr	r1, [r4, #32]
 8008a78:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8008a7c:	47e0      	blx	ip
 8008a7e:	2800      	cmp	r0, #0
 8008a80:	dc07      	bgt.n	8008a92 <__sflush_r+0xf6>
 8008a82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a8a:	f04f 30ff 	mov.w	r0, #4294967295
 8008a8e:	81a3      	strh	r3, [r4, #12]
 8008a90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a92:	4407      	add	r7, r0
 8008a94:	1a36      	subs	r6, r6, r0
 8008a96:	e7e9      	b.n	8008a6c <__sflush_r+0xd0>
 8008a98:	dfbffffe 	.word	0xdfbffffe

08008a9c <_fflush_r>:
 8008a9c:	b538      	push	{r3, r4, r5, lr}
 8008a9e:	690b      	ldr	r3, [r1, #16]
 8008aa0:	4605      	mov	r5, r0
 8008aa2:	460c      	mov	r4, r1
 8008aa4:	b913      	cbnz	r3, 8008aac <_fflush_r+0x10>
 8008aa6:	2500      	movs	r5, #0
 8008aa8:	4628      	mov	r0, r5
 8008aaa:	bd38      	pop	{r3, r4, r5, pc}
 8008aac:	b118      	cbz	r0, 8008ab6 <_fflush_r+0x1a>
 8008aae:	6a03      	ldr	r3, [r0, #32]
 8008ab0:	b90b      	cbnz	r3, 8008ab6 <_fflush_r+0x1a>
 8008ab2:	f7fd fe25 	bl	8006700 <__sinit>
 8008ab6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d0f3      	beq.n	8008aa6 <_fflush_r+0xa>
 8008abe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008ac0:	07d0      	lsls	r0, r2, #31
 8008ac2:	d404      	bmi.n	8008ace <_fflush_r+0x32>
 8008ac4:	0599      	lsls	r1, r3, #22
 8008ac6:	d402      	bmi.n	8008ace <_fflush_r+0x32>
 8008ac8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008aca:	f7fd ff52 	bl	8006972 <__retarget_lock_acquire_recursive>
 8008ace:	4628      	mov	r0, r5
 8008ad0:	4621      	mov	r1, r4
 8008ad2:	f7ff ff63 	bl	800899c <__sflush_r>
 8008ad6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008ad8:	4605      	mov	r5, r0
 8008ada:	07da      	lsls	r2, r3, #31
 8008adc:	d4e4      	bmi.n	8008aa8 <_fflush_r+0xc>
 8008ade:	89a3      	ldrh	r3, [r4, #12]
 8008ae0:	059b      	lsls	r3, r3, #22
 8008ae2:	d4e1      	bmi.n	8008aa8 <_fflush_r+0xc>
 8008ae4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008ae6:	f7fd ff45 	bl	8006974 <__retarget_lock_release_recursive>
 8008aea:	e7dd      	b.n	8008aa8 <_fflush_r+0xc>

08008aec <memmove>:
 8008aec:	4288      	cmp	r0, r1
 8008aee:	b510      	push	{r4, lr}
 8008af0:	eb01 0402 	add.w	r4, r1, r2
 8008af4:	d902      	bls.n	8008afc <memmove+0x10>
 8008af6:	4284      	cmp	r4, r0
 8008af8:	4623      	mov	r3, r4
 8008afa:	d807      	bhi.n	8008b0c <memmove+0x20>
 8008afc:	1e43      	subs	r3, r0, #1
 8008afe:	42a1      	cmp	r1, r4
 8008b00:	d008      	beq.n	8008b14 <memmove+0x28>
 8008b02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008b0a:	e7f8      	b.n	8008afe <memmove+0x12>
 8008b0c:	4601      	mov	r1, r0
 8008b0e:	4402      	add	r2, r0
 8008b10:	428a      	cmp	r2, r1
 8008b12:	d100      	bne.n	8008b16 <memmove+0x2a>
 8008b14:	bd10      	pop	{r4, pc}
 8008b16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008b1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008b1e:	e7f7      	b.n	8008b10 <memmove+0x24>

08008b20 <__assert_func>:
 8008b20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008b22:	4614      	mov	r4, r2
 8008b24:	461a      	mov	r2, r3
 8008b26:	4b09      	ldr	r3, [pc, #36]	@ (8008b4c <__assert_func+0x2c>)
 8008b28:	4605      	mov	r5, r0
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	68d8      	ldr	r0, [r3, #12]
 8008b2e:	b954      	cbnz	r4, 8008b46 <__assert_func+0x26>
 8008b30:	4b07      	ldr	r3, [pc, #28]	@ (8008b50 <__assert_func+0x30>)
 8008b32:	461c      	mov	r4, r3
 8008b34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008b38:	9100      	str	r1, [sp, #0]
 8008b3a:	462b      	mov	r3, r5
 8008b3c:	4905      	ldr	r1, [pc, #20]	@ (8008b54 <__assert_func+0x34>)
 8008b3e:	f000 f84f 	bl	8008be0 <fiprintf>
 8008b42:	f000 f85f 	bl	8008c04 <abort>
 8008b46:	4b04      	ldr	r3, [pc, #16]	@ (8008b58 <__assert_func+0x38>)
 8008b48:	e7f4      	b.n	8008b34 <__assert_func+0x14>
 8008b4a:	bf00      	nop
 8008b4c:	2000023c 	.word	0x2000023c
 8008b50:	0800a1b5 	.word	0x0800a1b5
 8008b54:	0800a187 	.word	0x0800a187
 8008b58:	0800a17a 	.word	0x0800a17a

08008b5c <_calloc_r>:
 8008b5c:	b570      	push	{r4, r5, r6, lr}
 8008b5e:	fba1 5402 	umull	r5, r4, r1, r2
 8008b62:	b93c      	cbnz	r4, 8008b74 <_calloc_r+0x18>
 8008b64:	4629      	mov	r1, r5
 8008b66:	f7fc fa4f 	bl	8005008 <_malloc_r>
 8008b6a:	4606      	mov	r6, r0
 8008b6c:	b928      	cbnz	r0, 8008b7a <_calloc_r+0x1e>
 8008b6e:	2600      	movs	r6, #0
 8008b70:	4630      	mov	r0, r6
 8008b72:	bd70      	pop	{r4, r5, r6, pc}
 8008b74:	220c      	movs	r2, #12
 8008b76:	6002      	str	r2, [r0, #0]
 8008b78:	e7f9      	b.n	8008b6e <_calloc_r+0x12>
 8008b7a:	462a      	mov	r2, r5
 8008b7c:	4621      	mov	r1, r4
 8008b7e:	f7fd fe58 	bl	8006832 <memset>
 8008b82:	e7f5      	b.n	8008b70 <_calloc_r+0x14>

08008b84 <_realloc_r>:
 8008b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b88:	4680      	mov	r8, r0
 8008b8a:	4615      	mov	r5, r2
 8008b8c:	460c      	mov	r4, r1
 8008b8e:	b921      	cbnz	r1, 8008b9a <_realloc_r+0x16>
 8008b90:	4611      	mov	r1, r2
 8008b92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b96:	f7fc ba37 	b.w	8005008 <_malloc_r>
 8008b9a:	b92a      	cbnz	r2, 8008ba8 <_realloc_r+0x24>
 8008b9c:	f7fe fd60 	bl	8007660 <_free_r>
 8008ba0:	2400      	movs	r4, #0
 8008ba2:	4620      	mov	r0, r4
 8008ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ba8:	f000 f833 	bl	8008c12 <_malloc_usable_size_r>
 8008bac:	4285      	cmp	r5, r0
 8008bae:	4606      	mov	r6, r0
 8008bb0:	d802      	bhi.n	8008bb8 <_realloc_r+0x34>
 8008bb2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008bb6:	d8f4      	bhi.n	8008ba2 <_realloc_r+0x1e>
 8008bb8:	4629      	mov	r1, r5
 8008bba:	4640      	mov	r0, r8
 8008bbc:	f7fc fa24 	bl	8005008 <_malloc_r>
 8008bc0:	4607      	mov	r7, r0
 8008bc2:	2800      	cmp	r0, #0
 8008bc4:	d0ec      	beq.n	8008ba0 <_realloc_r+0x1c>
 8008bc6:	42b5      	cmp	r5, r6
 8008bc8:	462a      	mov	r2, r5
 8008bca:	4621      	mov	r1, r4
 8008bcc:	bf28      	it	cs
 8008bce:	4632      	movcs	r2, r6
 8008bd0:	f7fd fedf 	bl	8006992 <memcpy>
 8008bd4:	4621      	mov	r1, r4
 8008bd6:	4640      	mov	r0, r8
 8008bd8:	f7fe fd42 	bl	8007660 <_free_r>
 8008bdc:	463c      	mov	r4, r7
 8008bde:	e7e0      	b.n	8008ba2 <_realloc_r+0x1e>

08008be0 <fiprintf>:
 8008be0:	b40e      	push	{r1, r2, r3}
 8008be2:	b503      	push	{r0, r1, lr}
 8008be4:	4601      	mov	r1, r0
 8008be6:	ab03      	add	r3, sp, #12
 8008be8:	4805      	ldr	r0, [pc, #20]	@ (8008c00 <fiprintf+0x20>)
 8008bea:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bee:	6800      	ldr	r0, [r0, #0]
 8008bf0:	9301      	str	r3, [sp, #4]
 8008bf2:	f000 f83d 	bl	8008c70 <_vfiprintf_r>
 8008bf6:	b002      	add	sp, #8
 8008bf8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008bfc:	b003      	add	sp, #12
 8008bfe:	4770      	bx	lr
 8008c00:	2000023c 	.word	0x2000023c

08008c04 <abort>:
 8008c04:	2006      	movs	r0, #6
 8008c06:	b508      	push	{r3, lr}
 8008c08:	f000 fa06 	bl	8009018 <raise>
 8008c0c:	2001      	movs	r0, #1
 8008c0e:	f7fa fd1e 	bl	800364e <_exit>

08008c12 <_malloc_usable_size_r>:
 8008c12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c16:	1f18      	subs	r0, r3, #4
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	bfbc      	itt	lt
 8008c1c:	580b      	ldrlt	r3, [r1, r0]
 8008c1e:	18c0      	addlt	r0, r0, r3
 8008c20:	4770      	bx	lr

08008c22 <__sfputc_r>:
 8008c22:	6893      	ldr	r3, [r2, #8]
 8008c24:	b410      	push	{r4}
 8008c26:	3b01      	subs	r3, #1
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	6093      	str	r3, [r2, #8]
 8008c2c:	da07      	bge.n	8008c3e <__sfputc_r+0x1c>
 8008c2e:	6994      	ldr	r4, [r2, #24]
 8008c30:	42a3      	cmp	r3, r4
 8008c32:	db01      	blt.n	8008c38 <__sfputc_r+0x16>
 8008c34:	290a      	cmp	r1, #10
 8008c36:	d102      	bne.n	8008c3e <__sfputc_r+0x1c>
 8008c38:	bc10      	pop	{r4}
 8008c3a:	f000 b931 	b.w	8008ea0 <__swbuf_r>
 8008c3e:	6813      	ldr	r3, [r2, #0]
 8008c40:	1c58      	adds	r0, r3, #1
 8008c42:	6010      	str	r0, [r2, #0]
 8008c44:	7019      	strb	r1, [r3, #0]
 8008c46:	4608      	mov	r0, r1
 8008c48:	bc10      	pop	{r4}
 8008c4a:	4770      	bx	lr

08008c4c <__sfputs_r>:
 8008c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c4e:	4606      	mov	r6, r0
 8008c50:	460f      	mov	r7, r1
 8008c52:	4614      	mov	r4, r2
 8008c54:	18d5      	adds	r5, r2, r3
 8008c56:	42ac      	cmp	r4, r5
 8008c58:	d101      	bne.n	8008c5e <__sfputs_r+0x12>
 8008c5a:	2000      	movs	r0, #0
 8008c5c:	e007      	b.n	8008c6e <__sfputs_r+0x22>
 8008c5e:	463a      	mov	r2, r7
 8008c60:	4630      	mov	r0, r6
 8008c62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c66:	f7ff ffdc 	bl	8008c22 <__sfputc_r>
 8008c6a:	1c43      	adds	r3, r0, #1
 8008c6c:	d1f3      	bne.n	8008c56 <__sfputs_r+0xa>
 8008c6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008c70 <_vfiprintf_r>:
 8008c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c74:	460d      	mov	r5, r1
 8008c76:	4614      	mov	r4, r2
 8008c78:	4698      	mov	r8, r3
 8008c7a:	4606      	mov	r6, r0
 8008c7c:	b09d      	sub	sp, #116	@ 0x74
 8008c7e:	b118      	cbz	r0, 8008c88 <_vfiprintf_r+0x18>
 8008c80:	6a03      	ldr	r3, [r0, #32]
 8008c82:	b90b      	cbnz	r3, 8008c88 <_vfiprintf_r+0x18>
 8008c84:	f7fd fd3c 	bl	8006700 <__sinit>
 8008c88:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008c8a:	07d9      	lsls	r1, r3, #31
 8008c8c:	d405      	bmi.n	8008c9a <_vfiprintf_r+0x2a>
 8008c8e:	89ab      	ldrh	r3, [r5, #12]
 8008c90:	059a      	lsls	r2, r3, #22
 8008c92:	d402      	bmi.n	8008c9a <_vfiprintf_r+0x2a>
 8008c94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008c96:	f7fd fe6c 	bl	8006972 <__retarget_lock_acquire_recursive>
 8008c9a:	89ab      	ldrh	r3, [r5, #12]
 8008c9c:	071b      	lsls	r3, r3, #28
 8008c9e:	d501      	bpl.n	8008ca4 <_vfiprintf_r+0x34>
 8008ca0:	692b      	ldr	r3, [r5, #16]
 8008ca2:	b99b      	cbnz	r3, 8008ccc <_vfiprintf_r+0x5c>
 8008ca4:	4629      	mov	r1, r5
 8008ca6:	4630      	mov	r0, r6
 8008ca8:	f000 f938 	bl	8008f1c <__swsetup_r>
 8008cac:	b170      	cbz	r0, 8008ccc <_vfiprintf_r+0x5c>
 8008cae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008cb0:	07dc      	lsls	r4, r3, #31
 8008cb2:	d504      	bpl.n	8008cbe <_vfiprintf_r+0x4e>
 8008cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8008cb8:	b01d      	add	sp, #116	@ 0x74
 8008cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cbe:	89ab      	ldrh	r3, [r5, #12]
 8008cc0:	0598      	lsls	r0, r3, #22
 8008cc2:	d4f7      	bmi.n	8008cb4 <_vfiprintf_r+0x44>
 8008cc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008cc6:	f7fd fe55 	bl	8006974 <__retarget_lock_release_recursive>
 8008cca:	e7f3      	b.n	8008cb4 <_vfiprintf_r+0x44>
 8008ccc:	2300      	movs	r3, #0
 8008cce:	9309      	str	r3, [sp, #36]	@ 0x24
 8008cd0:	2320      	movs	r3, #32
 8008cd2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008cd6:	2330      	movs	r3, #48	@ 0x30
 8008cd8:	f04f 0901 	mov.w	r9, #1
 8008cdc:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ce0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8008e8c <_vfiprintf_r+0x21c>
 8008ce4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008ce8:	4623      	mov	r3, r4
 8008cea:	469a      	mov	sl, r3
 8008cec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008cf0:	b10a      	cbz	r2, 8008cf6 <_vfiprintf_r+0x86>
 8008cf2:	2a25      	cmp	r2, #37	@ 0x25
 8008cf4:	d1f9      	bne.n	8008cea <_vfiprintf_r+0x7a>
 8008cf6:	ebba 0b04 	subs.w	fp, sl, r4
 8008cfa:	d00b      	beq.n	8008d14 <_vfiprintf_r+0xa4>
 8008cfc:	465b      	mov	r3, fp
 8008cfe:	4622      	mov	r2, r4
 8008d00:	4629      	mov	r1, r5
 8008d02:	4630      	mov	r0, r6
 8008d04:	f7ff ffa2 	bl	8008c4c <__sfputs_r>
 8008d08:	3001      	adds	r0, #1
 8008d0a:	f000 80a7 	beq.w	8008e5c <_vfiprintf_r+0x1ec>
 8008d0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d10:	445a      	add	r2, fp
 8008d12:	9209      	str	r2, [sp, #36]	@ 0x24
 8008d14:	f89a 3000 	ldrb.w	r3, [sl]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	f000 809f 	beq.w	8008e5c <_vfiprintf_r+0x1ec>
 8008d1e:	2300      	movs	r3, #0
 8008d20:	f04f 32ff 	mov.w	r2, #4294967295
 8008d24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d28:	f10a 0a01 	add.w	sl, sl, #1
 8008d2c:	9304      	str	r3, [sp, #16]
 8008d2e:	9307      	str	r3, [sp, #28]
 8008d30:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008d34:	931a      	str	r3, [sp, #104]	@ 0x68
 8008d36:	4654      	mov	r4, sl
 8008d38:	2205      	movs	r2, #5
 8008d3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d3e:	4853      	ldr	r0, [pc, #332]	@ (8008e8c <_vfiprintf_r+0x21c>)
 8008d40:	f7fd fe19 	bl	8006976 <memchr>
 8008d44:	9a04      	ldr	r2, [sp, #16]
 8008d46:	b9d8      	cbnz	r0, 8008d80 <_vfiprintf_r+0x110>
 8008d48:	06d1      	lsls	r1, r2, #27
 8008d4a:	bf44      	itt	mi
 8008d4c:	2320      	movmi	r3, #32
 8008d4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d52:	0713      	lsls	r3, r2, #28
 8008d54:	bf44      	itt	mi
 8008d56:	232b      	movmi	r3, #43	@ 0x2b
 8008d58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d5c:	f89a 3000 	ldrb.w	r3, [sl]
 8008d60:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d62:	d015      	beq.n	8008d90 <_vfiprintf_r+0x120>
 8008d64:	4654      	mov	r4, sl
 8008d66:	2000      	movs	r0, #0
 8008d68:	f04f 0c0a 	mov.w	ip, #10
 8008d6c:	9a07      	ldr	r2, [sp, #28]
 8008d6e:	4621      	mov	r1, r4
 8008d70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d74:	3b30      	subs	r3, #48	@ 0x30
 8008d76:	2b09      	cmp	r3, #9
 8008d78:	d94b      	bls.n	8008e12 <_vfiprintf_r+0x1a2>
 8008d7a:	b1b0      	cbz	r0, 8008daa <_vfiprintf_r+0x13a>
 8008d7c:	9207      	str	r2, [sp, #28]
 8008d7e:	e014      	b.n	8008daa <_vfiprintf_r+0x13a>
 8008d80:	eba0 0308 	sub.w	r3, r0, r8
 8008d84:	fa09 f303 	lsl.w	r3, r9, r3
 8008d88:	4313      	orrs	r3, r2
 8008d8a:	46a2      	mov	sl, r4
 8008d8c:	9304      	str	r3, [sp, #16]
 8008d8e:	e7d2      	b.n	8008d36 <_vfiprintf_r+0xc6>
 8008d90:	9b03      	ldr	r3, [sp, #12]
 8008d92:	1d19      	adds	r1, r3, #4
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	9103      	str	r1, [sp, #12]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	bfbb      	ittet	lt
 8008d9c:	425b      	neglt	r3, r3
 8008d9e:	f042 0202 	orrlt.w	r2, r2, #2
 8008da2:	9307      	strge	r3, [sp, #28]
 8008da4:	9307      	strlt	r3, [sp, #28]
 8008da6:	bfb8      	it	lt
 8008da8:	9204      	strlt	r2, [sp, #16]
 8008daa:	7823      	ldrb	r3, [r4, #0]
 8008dac:	2b2e      	cmp	r3, #46	@ 0x2e
 8008dae:	d10a      	bne.n	8008dc6 <_vfiprintf_r+0x156>
 8008db0:	7863      	ldrb	r3, [r4, #1]
 8008db2:	2b2a      	cmp	r3, #42	@ 0x2a
 8008db4:	d132      	bne.n	8008e1c <_vfiprintf_r+0x1ac>
 8008db6:	9b03      	ldr	r3, [sp, #12]
 8008db8:	3402      	adds	r4, #2
 8008dba:	1d1a      	adds	r2, r3, #4
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	9203      	str	r2, [sp, #12]
 8008dc0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008dc4:	9305      	str	r3, [sp, #20]
 8008dc6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8008e90 <_vfiprintf_r+0x220>
 8008dca:	2203      	movs	r2, #3
 8008dcc:	4650      	mov	r0, sl
 8008dce:	7821      	ldrb	r1, [r4, #0]
 8008dd0:	f7fd fdd1 	bl	8006976 <memchr>
 8008dd4:	b138      	cbz	r0, 8008de6 <_vfiprintf_r+0x176>
 8008dd6:	2240      	movs	r2, #64	@ 0x40
 8008dd8:	9b04      	ldr	r3, [sp, #16]
 8008dda:	eba0 000a 	sub.w	r0, r0, sl
 8008dde:	4082      	lsls	r2, r0
 8008de0:	4313      	orrs	r3, r2
 8008de2:	3401      	adds	r4, #1
 8008de4:	9304      	str	r3, [sp, #16]
 8008de6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dea:	2206      	movs	r2, #6
 8008dec:	4829      	ldr	r0, [pc, #164]	@ (8008e94 <_vfiprintf_r+0x224>)
 8008dee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008df2:	f7fd fdc0 	bl	8006976 <memchr>
 8008df6:	2800      	cmp	r0, #0
 8008df8:	d03f      	beq.n	8008e7a <_vfiprintf_r+0x20a>
 8008dfa:	4b27      	ldr	r3, [pc, #156]	@ (8008e98 <_vfiprintf_r+0x228>)
 8008dfc:	bb1b      	cbnz	r3, 8008e46 <_vfiprintf_r+0x1d6>
 8008dfe:	9b03      	ldr	r3, [sp, #12]
 8008e00:	3307      	adds	r3, #7
 8008e02:	f023 0307 	bic.w	r3, r3, #7
 8008e06:	3308      	adds	r3, #8
 8008e08:	9303      	str	r3, [sp, #12]
 8008e0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e0c:	443b      	add	r3, r7
 8008e0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e10:	e76a      	b.n	8008ce8 <_vfiprintf_r+0x78>
 8008e12:	460c      	mov	r4, r1
 8008e14:	2001      	movs	r0, #1
 8008e16:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e1a:	e7a8      	b.n	8008d6e <_vfiprintf_r+0xfe>
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	f04f 0c0a 	mov.w	ip, #10
 8008e22:	4619      	mov	r1, r3
 8008e24:	3401      	adds	r4, #1
 8008e26:	9305      	str	r3, [sp, #20]
 8008e28:	4620      	mov	r0, r4
 8008e2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e2e:	3a30      	subs	r2, #48	@ 0x30
 8008e30:	2a09      	cmp	r2, #9
 8008e32:	d903      	bls.n	8008e3c <_vfiprintf_r+0x1cc>
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d0c6      	beq.n	8008dc6 <_vfiprintf_r+0x156>
 8008e38:	9105      	str	r1, [sp, #20]
 8008e3a:	e7c4      	b.n	8008dc6 <_vfiprintf_r+0x156>
 8008e3c:	4604      	mov	r4, r0
 8008e3e:	2301      	movs	r3, #1
 8008e40:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e44:	e7f0      	b.n	8008e28 <_vfiprintf_r+0x1b8>
 8008e46:	ab03      	add	r3, sp, #12
 8008e48:	9300      	str	r3, [sp, #0]
 8008e4a:	462a      	mov	r2, r5
 8008e4c:	4630      	mov	r0, r6
 8008e4e:	4b13      	ldr	r3, [pc, #76]	@ (8008e9c <_vfiprintf_r+0x22c>)
 8008e50:	a904      	add	r1, sp, #16
 8008e52:	f7fd f80b 	bl	8005e6c <_printf_float>
 8008e56:	4607      	mov	r7, r0
 8008e58:	1c78      	adds	r0, r7, #1
 8008e5a:	d1d6      	bne.n	8008e0a <_vfiprintf_r+0x19a>
 8008e5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008e5e:	07d9      	lsls	r1, r3, #31
 8008e60:	d405      	bmi.n	8008e6e <_vfiprintf_r+0x1fe>
 8008e62:	89ab      	ldrh	r3, [r5, #12]
 8008e64:	059a      	lsls	r2, r3, #22
 8008e66:	d402      	bmi.n	8008e6e <_vfiprintf_r+0x1fe>
 8008e68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008e6a:	f7fd fd83 	bl	8006974 <__retarget_lock_release_recursive>
 8008e6e:	89ab      	ldrh	r3, [r5, #12]
 8008e70:	065b      	lsls	r3, r3, #25
 8008e72:	f53f af1f 	bmi.w	8008cb4 <_vfiprintf_r+0x44>
 8008e76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008e78:	e71e      	b.n	8008cb8 <_vfiprintf_r+0x48>
 8008e7a:	ab03      	add	r3, sp, #12
 8008e7c:	9300      	str	r3, [sp, #0]
 8008e7e:	462a      	mov	r2, r5
 8008e80:	4630      	mov	r0, r6
 8008e82:	4b06      	ldr	r3, [pc, #24]	@ (8008e9c <_vfiprintf_r+0x22c>)
 8008e84:	a904      	add	r1, sp, #16
 8008e86:	f7fd fa8f 	bl	80063a8 <_printf_i>
 8008e8a:	e7e4      	b.n	8008e56 <_vfiprintf_r+0x1e6>
 8008e8c:	0800a169 	.word	0x0800a169
 8008e90:	0800a16f 	.word	0x0800a16f
 8008e94:	0800a173 	.word	0x0800a173
 8008e98:	08005e6d 	.word	0x08005e6d
 8008e9c:	08008c4d 	.word	0x08008c4d

08008ea0 <__swbuf_r>:
 8008ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ea2:	460e      	mov	r6, r1
 8008ea4:	4614      	mov	r4, r2
 8008ea6:	4605      	mov	r5, r0
 8008ea8:	b118      	cbz	r0, 8008eb2 <__swbuf_r+0x12>
 8008eaa:	6a03      	ldr	r3, [r0, #32]
 8008eac:	b90b      	cbnz	r3, 8008eb2 <__swbuf_r+0x12>
 8008eae:	f7fd fc27 	bl	8006700 <__sinit>
 8008eb2:	69a3      	ldr	r3, [r4, #24]
 8008eb4:	60a3      	str	r3, [r4, #8]
 8008eb6:	89a3      	ldrh	r3, [r4, #12]
 8008eb8:	071a      	lsls	r2, r3, #28
 8008eba:	d501      	bpl.n	8008ec0 <__swbuf_r+0x20>
 8008ebc:	6923      	ldr	r3, [r4, #16]
 8008ebe:	b943      	cbnz	r3, 8008ed2 <__swbuf_r+0x32>
 8008ec0:	4621      	mov	r1, r4
 8008ec2:	4628      	mov	r0, r5
 8008ec4:	f000 f82a 	bl	8008f1c <__swsetup_r>
 8008ec8:	b118      	cbz	r0, 8008ed2 <__swbuf_r+0x32>
 8008eca:	f04f 37ff 	mov.w	r7, #4294967295
 8008ece:	4638      	mov	r0, r7
 8008ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ed2:	6823      	ldr	r3, [r4, #0]
 8008ed4:	6922      	ldr	r2, [r4, #16]
 8008ed6:	b2f6      	uxtb	r6, r6
 8008ed8:	1a98      	subs	r0, r3, r2
 8008eda:	6963      	ldr	r3, [r4, #20]
 8008edc:	4637      	mov	r7, r6
 8008ede:	4283      	cmp	r3, r0
 8008ee0:	dc05      	bgt.n	8008eee <__swbuf_r+0x4e>
 8008ee2:	4621      	mov	r1, r4
 8008ee4:	4628      	mov	r0, r5
 8008ee6:	f7ff fdd9 	bl	8008a9c <_fflush_r>
 8008eea:	2800      	cmp	r0, #0
 8008eec:	d1ed      	bne.n	8008eca <__swbuf_r+0x2a>
 8008eee:	68a3      	ldr	r3, [r4, #8]
 8008ef0:	3b01      	subs	r3, #1
 8008ef2:	60a3      	str	r3, [r4, #8]
 8008ef4:	6823      	ldr	r3, [r4, #0]
 8008ef6:	1c5a      	adds	r2, r3, #1
 8008ef8:	6022      	str	r2, [r4, #0]
 8008efa:	701e      	strb	r6, [r3, #0]
 8008efc:	6962      	ldr	r2, [r4, #20]
 8008efe:	1c43      	adds	r3, r0, #1
 8008f00:	429a      	cmp	r2, r3
 8008f02:	d004      	beq.n	8008f0e <__swbuf_r+0x6e>
 8008f04:	89a3      	ldrh	r3, [r4, #12]
 8008f06:	07db      	lsls	r3, r3, #31
 8008f08:	d5e1      	bpl.n	8008ece <__swbuf_r+0x2e>
 8008f0a:	2e0a      	cmp	r6, #10
 8008f0c:	d1df      	bne.n	8008ece <__swbuf_r+0x2e>
 8008f0e:	4621      	mov	r1, r4
 8008f10:	4628      	mov	r0, r5
 8008f12:	f7ff fdc3 	bl	8008a9c <_fflush_r>
 8008f16:	2800      	cmp	r0, #0
 8008f18:	d0d9      	beq.n	8008ece <__swbuf_r+0x2e>
 8008f1a:	e7d6      	b.n	8008eca <__swbuf_r+0x2a>

08008f1c <__swsetup_r>:
 8008f1c:	b538      	push	{r3, r4, r5, lr}
 8008f1e:	4b29      	ldr	r3, [pc, #164]	@ (8008fc4 <__swsetup_r+0xa8>)
 8008f20:	4605      	mov	r5, r0
 8008f22:	6818      	ldr	r0, [r3, #0]
 8008f24:	460c      	mov	r4, r1
 8008f26:	b118      	cbz	r0, 8008f30 <__swsetup_r+0x14>
 8008f28:	6a03      	ldr	r3, [r0, #32]
 8008f2a:	b90b      	cbnz	r3, 8008f30 <__swsetup_r+0x14>
 8008f2c:	f7fd fbe8 	bl	8006700 <__sinit>
 8008f30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f34:	0719      	lsls	r1, r3, #28
 8008f36:	d422      	bmi.n	8008f7e <__swsetup_r+0x62>
 8008f38:	06da      	lsls	r2, r3, #27
 8008f3a:	d407      	bmi.n	8008f4c <__swsetup_r+0x30>
 8008f3c:	2209      	movs	r2, #9
 8008f3e:	602a      	str	r2, [r5, #0]
 8008f40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f44:	f04f 30ff 	mov.w	r0, #4294967295
 8008f48:	81a3      	strh	r3, [r4, #12]
 8008f4a:	e033      	b.n	8008fb4 <__swsetup_r+0x98>
 8008f4c:	0758      	lsls	r0, r3, #29
 8008f4e:	d512      	bpl.n	8008f76 <__swsetup_r+0x5a>
 8008f50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008f52:	b141      	cbz	r1, 8008f66 <__swsetup_r+0x4a>
 8008f54:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008f58:	4299      	cmp	r1, r3
 8008f5a:	d002      	beq.n	8008f62 <__swsetup_r+0x46>
 8008f5c:	4628      	mov	r0, r5
 8008f5e:	f7fe fb7f 	bl	8007660 <_free_r>
 8008f62:	2300      	movs	r3, #0
 8008f64:	6363      	str	r3, [r4, #52]	@ 0x34
 8008f66:	89a3      	ldrh	r3, [r4, #12]
 8008f68:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008f6c:	81a3      	strh	r3, [r4, #12]
 8008f6e:	2300      	movs	r3, #0
 8008f70:	6063      	str	r3, [r4, #4]
 8008f72:	6923      	ldr	r3, [r4, #16]
 8008f74:	6023      	str	r3, [r4, #0]
 8008f76:	89a3      	ldrh	r3, [r4, #12]
 8008f78:	f043 0308 	orr.w	r3, r3, #8
 8008f7c:	81a3      	strh	r3, [r4, #12]
 8008f7e:	6923      	ldr	r3, [r4, #16]
 8008f80:	b94b      	cbnz	r3, 8008f96 <__swsetup_r+0x7a>
 8008f82:	89a3      	ldrh	r3, [r4, #12]
 8008f84:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008f88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f8c:	d003      	beq.n	8008f96 <__swsetup_r+0x7a>
 8008f8e:	4621      	mov	r1, r4
 8008f90:	4628      	mov	r0, r5
 8008f92:	f000 f882 	bl	800909a <__smakebuf_r>
 8008f96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f9a:	f013 0201 	ands.w	r2, r3, #1
 8008f9e:	d00a      	beq.n	8008fb6 <__swsetup_r+0x9a>
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	60a2      	str	r2, [r4, #8]
 8008fa4:	6962      	ldr	r2, [r4, #20]
 8008fa6:	4252      	negs	r2, r2
 8008fa8:	61a2      	str	r2, [r4, #24]
 8008faa:	6922      	ldr	r2, [r4, #16]
 8008fac:	b942      	cbnz	r2, 8008fc0 <__swsetup_r+0xa4>
 8008fae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008fb2:	d1c5      	bne.n	8008f40 <__swsetup_r+0x24>
 8008fb4:	bd38      	pop	{r3, r4, r5, pc}
 8008fb6:	0799      	lsls	r1, r3, #30
 8008fb8:	bf58      	it	pl
 8008fba:	6962      	ldrpl	r2, [r4, #20]
 8008fbc:	60a2      	str	r2, [r4, #8]
 8008fbe:	e7f4      	b.n	8008faa <__swsetup_r+0x8e>
 8008fc0:	2000      	movs	r0, #0
 8008fc2:	e7f7      	b.n	8008fb4 <__swsetup_r+0x98>
 8008fc4:	2000023c 	.word	0x2000023c

08008fc8 <_raise_r>:
 8008fc8:	291f      	cmp	r1, #31
 8008fca:	b538      	push	{r3, r4, r5, lr}
 8008fcc:	4605      	mov	r5, r0
 8008fce:	460c      	mov	r4, r1
 8008fd0:	d904      	bls.n	8008fdc <_raise_r+0x14>
 8008fd2:	2316      	movs	r3, #22
 8008fd4:	6003      	str	r3, [r0, #0]
 8008fd6:	f04f 30ff 	mov.w	r0, #4294967295
 8008fda:	bd38      	pop	{r3, r4, r5, pc}
 8008fdc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008fde:	b112      	cbz	r2, 8008fe6 <_raise_r+0x1e>
 8008fe0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008fe4:	b94b      	cbnz	r3, 8008ffa <_raise_r+0x32>
 8008fe6:	4628      	mov	r0, r5
 8008fe8:	f000 f830 	bl	800904c <_getpid_r>
 8008fec:	4622      	mov	r2, r4
 8008fee:	4601      	mov	r1, r0
 8008ff0:	4628      	mov	r0, r5
 8008ff2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ff6:	f000 b817 	b.w	8009028 <_kill_r>
 8008ffa:	2b01      	cmp	r3, #1
 8008ffc:	d00a      	beq.n	8009014 <_raise_r+0x4c>
 8008ffe:	1c59      	adds	r1, r3, #1
 8009000:	d103      	bne.n	800900a <_raise_r+0x42>
 8009002:	2316      	movs	r3, #22
 8009004:	6003      	str	r3, [r0, #0]
 8009006:	2001      	movs	r0, #1
 8009008:	e7e7      	b.n	8008fda <_raise_r+0x12>
 800900a:	2100      	movs	r1, #0
 800900c:	4620      	mov	r0, r4
 800900e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009012:	4798      	blx	r3
 8009014:	2000      	movs	r0, #0
 8009016:	e7e0      	b.n	8008fda <_raise_r+0x12>

08009018 <raise>:
 8009018:	4b02      	ldr	r3, [pc, #8]	@ (8009024 <raise+0xc>)
 800901a:	4601      	mov	r1, r0
 800901c:	6818      	ldr	r0, [r3, #0]
 800901e:	f7ff bfd3 	b.w	8008fc8 <_raise_r>
 8009022:	bf00      	nop
 8009024:	2000023c 	.word	0x2000023c

08009028 <_kill_r>:
 8009028:	b538      	push	{r3, r4, r5, lr}
 800902a:	2300      	movs	r3, #0
 800902c:	4d06      	ldr	r5, [pc, #24]	@ (8009048 <_kill_r+0x20>)
 800902e:	4604      	mov	r4, r0
 8009030:	4608      	mov	r0, r1
 8009032:	4611      	mov	r1, r2
 8009034:	602b      	str	r3, [r5, #0]
 8009036:	f7fa fafa 	bl	800362e <_kill>
 800903a:	1c43      	adds	r3, r0, #1
 800903c:	d102      	bne.n	8009044 <_kill_r+0x1c>
 800903e:	682b      	ldr	r3, [r5, #0]
 8009040:	b103      	cbz	r3, 8009044 <_kill_r+0x1c>
 8009042:	6023      	str	r3, [r4, #0]
 8009044:	bd38      	pop	{r3, r4, r5, pc}
 8009046:	bf00      	nop
 8009048:	20000814 	.word	0x20000814

0800904c <_getpid_r>:
 800904c:	f7fa bae8 	b.w	8003620 <_getpid>

08009050 <__swhatbuf_r>:
 8009050:	b570      	push	{r4, r5, r6, lr}
 8009052:	460c      	mov	r4, r1
 8009054:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009058:	4615      	mov	r5, r2
 800905a:	2900      	cmp	r1, #0
 800905c:	461e      	mov	r6, r3
 800905e:	b096      	sub	sp, #88	@ 0x58
 8009060:	da0c      	bge.n	800907c <__swhatbuf_r+0x2c>
 8009062:	89a3      	ldrh	r3, [r4, #12]
 8009064:	2100      	movs	r1, #0
 8009066:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800906a:	bf14      	ite	ne
 800906c:	2340      	movne	r3, #64	@ 0x40
 800906e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009072:	2000      	movs	r0, #0
 8009074:	6031      	str	r1, [r6, #0]
 8009076:	602b      	str	r3, [r5, #0]
 8009078:	b016      	add	sp, #88	@ 0x58
 800907a:	bd70      	pop	{r4, r5, r6, pc}
 800907c:	466a      	mov	r2, sp
 800907e:	f000 f849 	bl	8009114 <_fstat_r>
 8009082:	2800      	cmp	r0, #0
 8009084:	dbed      	blt.n	8009062 <__swhatbuf_r+0x12>
 8009086:	9901      	ldr	r1, [sp, #4]
 8009088:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800908c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009090:	4259      	negs	r1, r3
 8009092:	4159      	adcs	r1, r3
 8009094:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009098:	e7eb      	b.n	8009072 <__swhatbuf_r+0x22>

0800909a <__smakebuf_r>:
 800909a:	898b      	ldrh	r3, [r1, #12]
 800909c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800909e:	079d      	lsls	r5, r3, #30
 80090a0:	4606      	mov	r6, r0
 80090a2:	460c      	mov	r4, r1
 80090a4:	d507      	bpl.n	80090b6 <__smakebuf_r+0x1c>
 80090a6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80090aa:	6023      	str	r3, [r4, #0]
 80090ac:	6123      	str	r3, [r4, #16]
 80090ae:	2301      	movs	r3, #1
 80090b0:	6163      	str	r3, [r4, #20]
 80090b2:	b003      	add	sp, #12
 80090b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090b6:	466a      	mov	r2, sp
 80090b8:	ab01      	add	r3, sp, #4
 80090ba:	f7ff ffc9 	bl	8009050 <__swhatbuf_r>
 80090be:	9f00      	ldr	r7, [sp, #0]
 80090c0:	4605      	mov	r5, r0
 80090c2:	4639      	mov	r1, r7
 80090c4:	4630      	mov	r0, r6
 80090c6:	f7fb ff9f 	bl	8005008 <_malloc_r>
 80090ca:	b948      	cbnz	r0, 80090e0 <__smakebuf_r+0x46>
 80090cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090d0:	059a      	lsls	r2, r3, #22
 80090d2:	d4ee      	bmi.n	80090b2 <__smakebuf_r+0x18>
 80090d4:	f023 0303 	bic.w	r3, r3, #3
 80090d8:	f043 0302 	orr.w	r3, r3, #2
 80090dc:	81a3      	strh	r3, [r4, #12]
 80090de:	e7e2      	b.n	80090a6 <__smakebuf_r+0xc>
 80090e0:	89a3      	ldrh	r3, [r4, #12]
 80090e2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80090e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090ea:	81a3      	strh	r3, [r4, #12]
 80090ec:	9b01      	ldr	r3, [sp, #4]
 80090ee:	6020      	str	r0, [r4, #0]
 80090f0:	b15b      	cbz	r3, 800910a <__smakebuf_r+0x70>
 80090f2:	4630      	mov	r0, r6
 80090f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80090f8:	f000 f81e 	bl	8009138 <_isatty_r>
 80090fc:	b128      	cbz	r0, 800910a <__smakebuf_r+0x70>
 80090fe:	89a3      	ldrh	r3, [r4, #12]
 8009100:	f023 0303 	bic.w	r3, r3, #3
 8009104:	f043 0301 	orr.w	r3, r3, #1
 8009108:	81a3      	strh	r3, [r4, #12]
 800910a:	89a3      	ldrh	r3, [r4, #12]
 800910c:	431d      	orrs	r5, r3
 800910e:	81a5      	strh	r5, [r4, #12]
 8009110:	e7cf      	b.n	80090b2 <__smakebuf_r+0x18>
	...

08009114 <_fstat_r>:
 8009114:	b538      	push	{r3, r4, r5, lr}
 8009116:	2300      	movs	r3, #0
 8009118:	4d06      	ldr	r5, [pc, #24]	@ (8009134 <_fstat_r+0x20>)
 800911a:	4604      	mov	r4, r0
 800911c:	4608      	mov	r0, r1
 800911e:	4611      	mov	r1, r2
 8009120:	602b      	str	r3, [r5, #0]
 8009122:	f7fa fae3 	bl	80036ec <_fstat>
 8009126:	1c43      	adds	r3, r0, #1
 8009128:	d102      	bne.n	8009130 <_fstat_r+0x1c>
 800912a:	682b      	ldr	r3, [r5, #0]
 800912c:	b103      	cbz	r3, 8009130 <_fstat_r+0x1c>
 800912e:	6023      	str	r3, [r4, #0]
 8009130:	bd38      	pop	{r3, r4, r5, pc}
 8009132:	bf00      	nop
 8009134:	20000814 	.word	0x20000814

08009138 <_isatty_r>:
 8009138:	b538      	push	{r3, r4, r5, lr}
 800913a:	2300      	movs	r3, #0
 800913c:	4d05      	ldr	r5, [pc, #20]	@ (8009154 <_isatty_r+0x1c>)
 800913e:	4604      	mov	r4, r0
 8009140:	4608      	mov	r0, r1
 8009142:	602b      	str	r3, [r5, #0]
 8009144:	f7fa fae1 	bl	800370a <_isatty>
 8009148:	1c43      	adds	r3, r0, #1
 800914a:	d102      	bne.n	8009152 <_isatty_r+0x1a>
 800914c:	682b      	ldr	r3, [r5, #0]
 800914e:	b103      	cbz	r3, 8009152 <_isatty_r+0x1a>
 8009150:	6023      	str	r3, [r4, #0]
 8009152:	bd38      	pop	{r3, r4, r5, pc}
 8009154:	20000814 	.word	0x20000814

08009158 <_init>:
 8009158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800915a:	bf00      	nop
 800915c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800915e:	bc08      	pop	{r3}
 8009160:	469e      	mov	lr, r3
 8009162:	4770      	bx	lr

08009164 <_fini>:
 8009164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009166:	bf00      	nop
 8009168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800916a:	bc08      	pop	{r3}
 800916c:	469e      	mov	lr, r3
 800916e:	4770      	bx	lr
