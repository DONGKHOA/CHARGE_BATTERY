
Control_LLC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024a8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080025b4  080025b4  000035b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025e4  080025e4  00004004  2**0
                  CONTENTS
  4 .ARM          00000000  080025e4  080025e4  00004004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080025e4  080025e4  00004004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025e4  080025e4  000035e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080025e8  080025e8  000035e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  080025ec  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  20000004  080025f0  00004004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000140  080025f0  00004140  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006377  00000000  00000000  0000402d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017dd  00000000  00000000  0000a3a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008f8  00000000  00000000  0000bb88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000699  00000000  00000000  0000c480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003145  00000000  00000000  0000cb19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006894  00000000  00000000  0000fc5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00068868  00000000  00000000  000164f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0007ed5a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024f8  00000000  00000000  0007eda0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  00081298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	0800259c 	.word	0x0800259c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	0800259c 	.word	0x0800259c

0800014c <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 800014c:	b480      	push	{r7}
 800014e:	b089      	sub	sp, #36	@ 0x24
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	330c      	adds	r3, #12
 8000158:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800015a:	68fb      	ldr	r3, [r7, #12]
 800015c:	e853 3f00 	ldrex	r3, [r3]
 8000160:	60bb      	str	r3, [r7, #8]
   return(result);
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	f043 0320 	orr.w	r3, r3, #32
 8000168:	61fb      	str	r3, [r7, #28]
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	330c      	adds	r3, #12
 800016e:	69fa      	ldr	r2, [r7, #28]
 8000170:	61ba      	str	r2, [r7, #24]
 8000172:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000174:	6979      	ldr	r1, [r7, #20]
 8000176:	69ba      	ldr	r2, [r7, #24]
 8000178:	e841 2300 	strex	r3, r2, [r1]
 800017c:	613b      	str	r3, [r7, #16]
   return(result);
 800017e:	693b      	ldr	r3, [r7, #16]
 8000180:	2b00      	cmp	r3, #0
 8000182:	d1e7      	bne.n	8000154 <LL_USART_EnableIT_RXNE+0x8>
}
 8000184:	bf00      	nop
 8000186:	bf00      	nop
 8000188:	3724      	adds	r7, #36	@ 0x24
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr

08000190 <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 8000190:	b480      	push	{r7}
 8000192:	b089      	sub	sp, #36	@ 0x24
 8000194:	af00      	add	r7, sp, #0
 8000196:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	3314      	adds	r3, #20
 800019c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800019e:	68fb      	ldr	r3, [r7, #12]
 80001a0:	e853 3f00 	ldrex	r3, [r3]
 80001a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80001a6:	68bb      	ldr	r3, [r7, #8]
 80001a8:	f043 0301 	orr.w	r3, r3, #1
 80001ac:	61fb      	str	r3, [r7, #28]
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	3314      	adds	r3, #20
 80001b2:	69fa      	ldr	r2, [r7, #28]
 80001b4:	61ba      	str	r2, [r7, #24]
 80001b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80001b8:	6979      	ldr	r1, [r7, #20]
 80001ba:	69ba      	ldr	r2, [r7, #24]
 80001bc:	e841 2300 	strex	r3, r2, [r1]
 80001c0:	613b      	str	r3, [r7, #16]
   return(result);
 80001c2:	693b      	ldr	r3, [r7, #16]
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d1e7      	bne.n	8000198 <LL_USART_EnableIT_ERROR+0x8>
}
 80001c8:	bf00      	nop
 80001ca:	bf00      	nop
 80001cc:	3724      	adds	r7, #36	@ 0x24
 80001ce:	46bd      	mov	sp, r7
 80001d0:	bc80      	pop	{r7}
 80001d2:	4770      	bx	lr

080001d4 <UART_Config>:
 * @param uart             Pointer to the UART peripheral.
 * @param uart_irqn        UART interrupt number.
 */
void UART_Config(uart_cfg_t *uartstdio_device, USART_TypeDef *uart,
                IRQn_Type uart_irqn)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b084      	sub	sp, #16
 80001d8:	af00      	add	r7, sp, #0
 80001da:	60f8      	str	r0, [r7, #12]
 80001dc:	60b9      	str	r1, [r7, #8]
 80001de:	4613      	mov	r3, r2
 80001e0:	71fb      	strb	r3, [r7, #7]
    uartstdio_device->uart = uart;
 80001e2:	68fb      	ldr	r3, [r7, #12]
 80001e4:	68ba      	ldr	r2, [r7, #8]
 80001e6:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
    uartstdio_device->uart_irqn = uart_irqn;
 80001ea:	68fb      	ldr	r3, [r7, #12]
 80001ec:	79fa      	ldrb	r2, [r7, #7]
 80001ee:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c

    QUEUE_Init((ring_buffer_t *)&uartstdio_device->tx_buffer);
 80001f2:	68fb      	ldr	r3, [r7, #12]
 80001f4:	338c      	adds	r3, #140	@ 0x8c
 80001f6:	4618      	mov	r0, r3
 80001f8:	f000 f80e 	bl	8000218 <QUEUE_Init>
    QUEUE_Init((ring_buffer_t *)&uartstdio_device->rx_buffer);
 80001fc:	68fb      	ldr	r3, [r7, #12]
 80001fe:	4618      	mov	r0, r3
 8000200:	f000 f80a 	bl	8000218 <QUEUE_Init>

    /**
     * Enable the UART Error Interrupt:
     * (Frame error, noise error, overrun error)
     */
    LL_USART_EnableIT_ERROR(uart);
 8000204:	68b8      	ldr	r0, [r7, #8]
 8000206:	f7ff ffc3 	bl	8000190 <LL_USART_EnableIT_ERROR>

    /* Enable the UART Data Register not empty Interrupt */
    LL_USART_EnableIT_RXNE(uart);
 800020a:	68b8      	ldr	r0, [r7, #8]
 800020c:	f7ff ff9e 	bl	800014c <LL_USART_EnableIT_RXNE>
}
 8000210:	bf00      	nop
 8000212:	3710      	adds	r7, #16
 8000214:	46bd      	mov	sp, r7
 8000216:	bd80      	pop	{r7, pc}

08000218 <QUEUE_Init>:
 * 
 * @param rb The parameter `rb` is a pointer to a `ring_buffer_t` structure, which is used to implement
 * a queue data structure.
 */
static inline void QUEUE_Init(ring_buffer_t *rb)
{
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
    rb->in = 0;
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	2200      	movs	r2, #0
 8000224:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    rb->out = 0;
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	2200      	movs	r2, #0
 800022c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    rb->count = 0;
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	2200      	movs	r2, #0
 8000234:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8000238:	bf00      	nop
 800023a:	370c      	adds	r7, #12
 800023c:	46bd      	mov	sp, r7
 800023e:	bc80      	pop	{r7}
 8000240:	4770      	bx	lr
	...

08000244 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000244:	b480      	push	{r7}
 8000246:	b085      	sub	sp, #20
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	f003 0307 	and.w	r3, r3, #7
 8000252:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000254:	4b0c      	ldr	r3, [pc, #48]	@ (8000288 <__NVIC_SetPriorityGrouping+0x44>)
 8000256:	68db      	ldr	r3, [r3, #12]
 8000258:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800025a:	68ba      	ldr	r2, [r7, #8]
 800025c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000260:	4013      	ands	r3, r2
 8000262:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000264:	68fb      	ldr	r3, [r7, #12]
 8000266:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000268:	68bb      	ldr	r3, [r7, #8]
 800026a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800026c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000270:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000274:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000276:	4a04      	ldr	r2, [pc, #16]	@ (8000288 <__NVIC_SetPriorityGrouping+0x44>)
 8000278:	68bb      	ldr	r3, [r7, #8]
 800027a:	60d3      	str	r3, [r2, #12]
}
 800027c:	bf00      	nop
 800027e:	3714      	adds	r7, #20
 8000280:	46bd      	mov	sp, r7
 8000282:	bc80      	pop	{r7}
 8000284:	4770      	bx	lr
 8000286:	bf00      	nop
 8000288:	e000ed00 	.word	0xe000ed00

0800028c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800028c:	b480      	push	{r7}
 800028e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000290:	4b04      	ldr	r3, [pc, #16]	@ (80002a4 <__NVIC_GetPriorityGrouping+0x18>)
 8000292:	68db      	ldr	r3, [r3, #12]
 8000294:	0a1b      	lsrs	r3, r3, #8
 8000296:	f003 0307 	and.w	r3, r3, #7
}
 800029a:	4618      	mov	r0, r3
 800029c:	46bd      	mov	sp, r7
 800029e:	bc80      	pop	{r7}
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop
 80002a4:	e000ed00 	.word	0xe000ed00

080002a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002a8:	b480      	push	{r7}
 80002aa:	b083      	sub	sp, #12
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	4603      	mov	r3, r0
 80002b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	db0b      	blt.n	80002d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002ba:	79fb      	ldrb	r3, [r7, #7]
 80002bc:	f003 021f 	and.w	r2, r3, #31
 80002c0:	4906      	ldr	r1, [pc, #24]	@ (80002dc <__NVIC_EnableIRQ+0x34>)
 80002c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c6:	095b      	lsrs	r3, r3, #5
 80002c8:	2001      	movs	r0, #1
 80002ca:	fa00 f202 	lsl.w	r2, r0, r2
 80002ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002d2:	bf00      	nop
 80002d4:	370c      	adds	r7, #12
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bc80      	pop	{r7}
 80002da:	4770      	bx	lr
 80002dc:	e000e100 	.word	0xe000e100

080002e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002e0:	b480      	push	{r7}
 80002e2:	b083      	sub	sp, #12
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	4603      	mov	r3, r0
 80002e8:	6039      	str	r1, [r7, #0]
 80002ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	db0a      	blt.n	800030a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002f4:	683b      	ldr	r3, [r7, #0]
 80002f6:	b2da      	uxtb	r2, r3
 80002f8:	490c      	ldr	r1, [pc, #48]	@ (800032c <__NVIC_SetPriority+0x4c>)
 80002fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002fe:	0112      	lsls	r2, r2, #4
 8000300:	b2d2      	uxtb	r2, r2
 8000302:	440b      	add	r3, r1
 8000304:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000308:	e00a      	b.n	8000320 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800030a:	683b      	ldr	r3, [r7, #0]
 800030c:	b2da      	uxtb	r2, r3
 800030e:	4908      	ldr	r1, [pc, #32]	@ (8000330 <__NVIC_SetPriority+0x50>)
 8000310:	79fb      	ldrb	r3, [r7, #7]
 8000312:	f003 030f 	and.w	r3, r3, #15
 8000316:	3b04      	subs	r3, #4
 8000318:	0112      	lsls	r2, r2, #4
 800031a:	b2d2      	uxtb	r2, r2
 800031c:	440b      	add	r3, r1
 800031e:	761a      	strb	r2, [r3, #24]
}
 8000320:	bf00      	nop
 8000322:	370c      	adds	r7, #12
 8000324:	46bd      	mov	sp, r7
 8000326:	bc80      	pop	{r7}
 8000328:	4770      	bx	lr
 800032a:	bf00      	nop
 800032c:	e000e100 	.word	0xe000e100
 8000330:	e000ed00 	.word	0xe000ed00

08000334 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000334:	b480      	push	{r7}
 8000336:	b089      	sub	sp, #36	@ 0x24
 8000338:	af00      	add	r7, sp, #0
 800033a:	60f8      	str	r0, [r7, #12]
 800033c:	60b9      	str	r1, [r7, #8]
 800033e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000340:	68fb      	ldr	r3, [r7, #12]
 8000342:	f003 0307 	and.w	r3, r3, #7
 8000346:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000348:	69fb      	ldr	r3, [r7, #28]
 800034a:	f1c3 0307 	rsb	r3, r3, #7
 800034e:	2b04      	cmp	r3, #4
 8000350:	bf28      	it	cs
 8000352:	2304      	movcs	r3, #4
 8000354:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000356:	69fb      	ldr	r3, [r7, #28]
 8000358:	3304      	adds	r3, #4
 800035a:	2b06      	cmp	r3, #6
 800035c:	d902      	bls.n	8000364 <NVIC_EncodePriority+0x30>
 800035e:	69fb      	ldr	r3, [r7, #28]
 8000360:	3b03      	subs	r3, #3
 8000362:	e000      	b.n	8000366 <NVIC_EncodePriority+0x32>
 8000364:	2300      	movs	r3, #0
 8000366:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000368:	f04f 32ff 	mov.w	r2, #4294967295
 800036c:	69bb      	ldr	r3, [r7, #24]
 800036e:	fa02 f303 	lsl.w	r3, r2, r3
 8000372:	43da      	mvns	r2, r3
 8000374:	68bb      	ldr	r3, [r7, #8]
 8000376:	401a      	ands	r2, r3
 8000378:	697b      	ldr	r3, [r7, #20]
 800037a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800037c:	f04f 31ff 	mov.w	r1, #4294967295
 8000380:	697b      	ldr	r3, [r7, #20]
 8000382:	fa01 f303 	lsl.w	r3, r1, r3
 8000386:	43d9      	mvns	r1, r3
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800038c:	4313      	orrs	r3, r2
         );
}
 800038e:	4618      	mov	r0, r3
 8000390:	3724      	adds	r7, #36	@ 0x24
 8000392:	46bd      	mov	sp, r7
 8000394:	bc80      	pop	{r7}
 8000396:	4770      	bx	lr

08000398 <LL_ADC_REG_SetSequencerRanks>:
  *         
  *         (1) On STM32F1, parameter available only on ADC instance: ADC1.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000398:	b480      	push	{r7}
 800039a:	b089      	sub	sp, #36	@ 0x24
 800039c:	af00      	add	r7, sp, #0
 800039e:	60f8      	str	r0, [r7, #12]
 80003a0:	60b9      	str	r1, [r7, #8]
 80003a2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80003a4:	68fb      	ldr	r3, [r7, #12]
 80003a6:	332c      	adds	r3, #44	@ 0x2c
 80003a8:	4619      	mov	r1, r3
 80003aa:	68bb      	ldr	r3, [r7, #8]
 80003ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80003b0:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80003b4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003b6:	69ba      	ldr	r2, [r7, #24]
 80003b8:	fa92 f2a2 	rbit	r2, r2
 80003bc:	617a      	str	r2, [r7, #20]
  return result;
 80003be:	697a      	ldr	r2, [r7, #20]
 80003c0:	fab2 f282 	clz	r2, r2
 80003c4:	b2d2      	uxtb	r2, r2
 80003c6:	40d3      	lsrs	r3, r2
 80003c8:	009b      	lsls	r3, r3, #2
 80003ca:	440b      	add	r3, r1
 80003cc:	61fb      	str	r3, [r7, #28]
  
  MODIFY_REG(*preg,
 80003ce:	69fb      	ldr	r3, [r7, #28]
 80003d0:	681a      	ldr	r2, [r3, #0]
 80003d2:	68bb      	ldr	r3, [r7, #8]
 80003d4:	f003 031f 	and.w	r3, r3, #31
 80003d8:	211f      	movs	r1, #31
 80003da:	fa01 f303 	lsl.w	r3, r1, r3
 80003de:	43db      	mvns	r3, r3
 80003e0:	401a      	ands	r2, r3
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	f003 011f 	and.w	r1, r3, #31
 80003e8:	68bb      	ldr	r3, [r7, #8]
 80003ea:	f003 031f 	and.w	r3, r3, #31
 80003ee:	fa01 f303 	lsl.w	r3, r1, r3
 80003f2:	431a      	orrs	r2, r3
 80003f4:	69fb      	ldr	r3, [r7, #28]
 80003f6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80003f8:	bf00      	nop
 80003fa:	3724      	adds	r7, #36	@ 0x24
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bc80      	pop	{r7}
 8000400:	4770      	bx	lr

08000402 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_71CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_239CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000402:	b480      	push	{r7}
 8000404:	b08d      	sub	sp, #52	@ 0x34
 8000406:	af00      	add	r7, sp, #0
 8000408:	60f8      	str	r0, [r7, #12]
 800040a:	60b9      	str	r1, [r7, #8]
 800040c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 800040e:	68fb      	ldr	r3, [r7, #12]
 8000410:	330c      	adds	r3, #12
 8000412:	4619      	mov	r1, r3
 8000414:	68bb      	ldr	r3, [r7, #8]
 8000416:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800041a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800041e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000420:	69ba      	ldr	r2, [r7, #24]
 8000422:	fa92 f2a2 	rbit	r2, r2
 8000426:	617a      	str	r2, [r7, #20]
  return result;
 8000428:	697a      	ldr	r2, [r7, #20]
 800042a:	fab2 f282 	clz	r2, r2
 800042e:	b2d2      	uxtb	r2, r2
 8000430:	40d3      	lsrs	r3, r2
 8000432:	009b      	lsls	r3, r3, #2
 8000434:	440b      	add	r3, r1
 8000436:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  MODIFY_REG(*preg,
 8000438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800043a:	681a      	ldr	r2, [r3, #0]
 800043c:	68bb      	ldr	r3, [r7, #8]
 800043e:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 8000442:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 8000446:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000448:	6a39      	ldr	r1, [r7, #32]
 800044a:	fa91 f1a1 	rbit	r1, r1
 800044e:	61f9      	str	r1, [r7, #28]
  return result;
 8000450:	69f9      	ldr	r1, [r7, #28]
 8000452:	fab1 f181 	clz	r1, r1
 8000456:	b2c9      	uxtb	r1, r1
 8000458:	40cb      	lsrs	r3, r1
 800045a:	2107      	movs	r1, #7
 800045c:	fa01 f303 	lsl.w	r3, r1, r3
 8000460:	43db      	mvns	r3, r3
 8000462:	401a      	ands	r2, r3
 8000464:	68bb      	ldr	r3, [r7, #8]
 8000466:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 800046a:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 800046e:	62b9      	str	r1, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000470:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000472:	fa91 f1a1 	rbit	r1, r1
 8000476:	6279      	str	r1, [r7, #36]	@ 0x24
  return result;
 8000478:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800047a:	fab1 f181 	clz	r1, r1
 800047e:	b2c9      	uxtb	r1, r1
 8000480:	40cb      	lsrs	r3, r1
 8000482:	6879      	ldr	r1, [r7, #4]
 8000484:	fa01 f303 	lsl.w	r3, r1, r3
 8000488:	431a      	orrs	r2, r3
 800048a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800048c:	601a      	str	r2, [r3, #0]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 800048e:	bf00      	nop
 8000490:	3734      	adds	r7, #52	@ 0x34
 8000492:	46bd      	mov	sp, r7
 8000494:	bc80      	pop	{r7}
 8000496:	4770      	bx	lr

08000498 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8000498:	b480      	push	{r7}
 800049a:	b085      	sub	sp, #20
 800049c:	af00      	add	r7, sp, #0
 800049e:	60f8      	str	r0, [r7, #12]
 80004a0:	60b9      	str	r1, [r7, #8]
 80004a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 80004a4:	68bb      	ldr	r3, [r7, #8]
 80004a6:	3b01      	subs	r3, #1
 80004a8:	4a0c      	ldr	r2, [pc, #48]	@ (80004dc <LL_DMA_SetDataTransferDirection+0x44>)
 80004aa:	5cd3      	ldrb	r3, [r2, r3]
 80004ac:	461a      	mov	r2, r3
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	4413      	add	r3, r2
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80004b8:	f023 0310 	bic.w	r3, r3, #16
 80004bc:	68ba      	ldr	r2, [r7, #8]
 80004be:	3a01      	subs	r2, #1
 80004c0:	4906      	ldr	r1, [pc, #24]	@ (80004dc <LL_DMA_SetDataTransferDirection+0x44>)
 80004c2:	5c8a      	ldrb	r2, [r1, r2]
 80004c4:	4611      	mov	r1, r2
 80004c6:	68fa      	ldr	r2, [r7, #12]
 80004c8:	440a      	add	r2, r1
 80004ca:	4611      	mov	r1, r2
 80004cc:	687a      	ldr	r2, [r7, #4]
 80004ce:	4313      	orrs	r3, r2
 80004d0:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 80004d2:	bf00      	nop
 80004d4:	3714      	adds	r7, #20
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bc80      	pop	{r7}
 80004da:	4770      	bx	lr
 80004dc:	080025b4 	.word	0x080025b4

080004e0 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	60f8      	str	r0, [r7, #12]
 80004e8:	60b9      	str	r1, [r7, #8]
 80004ea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 80004ec:	68bb      	ldr	r3, [r7, #8]
 80004ee:	3b01      	subs	r3, #1
 80004f0:	4a0b      	ldr	r2, [pc, #44]	@ (8000520 <LL_DMA_SetMode+0x40>)
 80004f2:	5cd3      	ldrb	r3, [r2, r3]
 80004f4:	461a      	mov	r2, r3
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	4413      	add	r3, r2
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	f023 0220 	bic.w	r2, r3, #32
 8000500:	68bb      	ldr	r3, [r7, #8]
 8000502:	3b01      	subs	r3, #1
 8000504:	4906      	ldr	r1, [pc, #24]	@ (8000520 <LL_DMA_SetMode+0x40>)
 8000506:	5ccb      	ldrb	r3, [r1, r3]
 8000508:	4619      	mov	r1, r3
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	440b      	add	r3, r1
 800050e:	4619      	mov	r1, r3
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	4313      	orrs	r3, r2
 8000514:	600b      	str	r3, [r1, #0]
             Mode);
}
 8000516:	bf00      	nop
 8000518:	3714      	adds	r7, #20
 800051a:	46bd      	mov	sp, r7
 800051c:	bc80      	pop	{r7}
 800051e:	4770      	bx	lr
 8000520:	080025b4 	.word	0x080025b4

08000524 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8000524:	b480      	push	{r7}
 8000526:	b085      	sub	sp, #20
 8000528:	af00      	add	r7, sp, #0
 800052a:	60f8      	str	r0, [r7, #12]
 800052c:	60b9      	str	r1, [r7, #8]
 800052e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8000530:	68bb      	ldr	r3, [r7, #8]
 8000532:	3b01      	subs	r3, #1
 8000534:	4a0b      	ldr	r2, [pc, #44]	@ (8000564 <LL_DMA_SetPeriphIncMode+0x40>)
 8000536:	5cd3      	ldrb	r3, [r2, r3]
 8000538:	461a      	mov	r2, r3
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	4413      	add	r3, r2
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8000544:	68bb      	ldr	r3, [r7, #8]
 8000546:	3b01      	subs	r3, #1
 8000548:	4906      	ldr	r1, [pc, #24]	@ (8000564 <LL_DMA_SetPeriphIncMode+0x40>)
 800054a:	5ccb      	ldrb	r3, [r1, r3]
 800054c:	4619      	mov	r1, r3
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	440b      	add	r3, r1
 8000552:	4619      	mov	r1, r3
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	4313      	orrs	r3, r2
 8000558:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 800055a:	bf00      	nop
 800055c:	3714      	adds	r7, #20
 800055e:	46bd      	mov	sp, r7
 8000560:	bc80      	pop	{r7}
 8000562:	4770      	bx	lr
 8000564:	080025b4 	.word	0x080025b4

08000568 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8000568:	b480      	push	{r7}
 800056a:	b085      	sub	sp, #20
 800056c:	af00      	add	r7, sp, #0
 800056e:	60f8      	str	r0, [r7, #12]
 8000570:	60b9      	str	r1, [r7, #8]
 8000572:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8000574:	68bb      	ldr	r3, [r7, #8]
 8000576:	3b01      	subs	r3, #1
 8000578:	4a0b      	ldr	r2, [pc, #44]	@ (80005a8 <LL_DMA_SetMemoryIncMode+0x40>)
 800057a:	5cd3      	ldrb	r3, [r2, r3]
 800057c:	461a      	mov	r2, r3
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	4413      	add	r3, r2
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8000588:	68bb      	ldr	r3, [r7, #8]
 800058a:	3b01      	subs	r3, #1
 800058c:	4906      	ldr	r1, [pc, #24]	@ (80005a8 <LL_DMA_SetMemoryIncMode+0x40>)
 800058e:	5ccb      	ldrb	r3, [r1, r3]
 8000590:	4619      	mov	r1, r3
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	440b      	add	r3, r1
 8000596:	4619      	mov	r1, r3
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	4313      	orrs	r3, r2
 800059c:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 800059e:	bf00      	nop
 80005a0:	3714      	adds	r7, #20
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bc80      	pop	{r7}
 80005a6:	4770      	bx	lr
 80005a8:	080025b4 	.word	0x080025b4

080005ac <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	3b01      	subs	r3, #1
 80005bc:	4a0b      	ldr	r2, [pc, #44]	@ (80005ec <LL_DMA_SetPeriphSize+0x40>)
 80005be:	5cd3      	ldrb	r3, [r2, r3]
 80005c0:	461a      	mov	r2, r3
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	4413      	add	r3, r2
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80005cc:	68bb      	ldr	r3, [r7, #8]
 80005ce:	3b01      	subs	r3, #1
 80005d0:	4906      	ldr	r1, [pc, #24]	@ (80005ec <LL_DMA_SetPeriphSize+0x40>)
 80005d2:	5ccb      	ldrb	r3, [r1, r3]
 80005d4:	4619      	mov	r1, r3
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	440b      	add	r3, r1
 80005da:	4619      	mov	r1, r3
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	4313      	orrs	r3, r2
 80005e0:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 80005e2:	bf00      	nop
 80005e4:	3714      	adds	r7, #20
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bc80      	pop	{r7}
 80005ea:	4770      	bx	lr
 80005ec:	080025b4 	.word	0x080025b4

080005f0 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	60f8      	str	r0, [r7, #12]
 80005f8:	60b9      	str	r1, [r7, #8]
 80005fa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 80005fc:	68bb      	ldr	r3, [r7, #8]
 80005fe:	3b01      	subs	r3, #1
 8000600:	4a0b      	ldr	r2, [pc, #44]	@ (8000630 <LL_DMA_SetMemorySize+0x40>)
 8000602:	5cd3      	ldrb	r3, [r2, r3]
 8000604:	461a      	mov	r2, r3
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	4413      	add	r3, r2
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	3b01      	subs	r3, #1
 8000614:	4906      	ldr	r1, [pc, #24]	@ (8000630 <LL_DMA_SetMemorySize+0x40>)
 8000616:	5ccb      	ldrb	r3, [r1, r3]
 8000618:	4619      	mov	r1, r3
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	440b      	add	r3, r1
 800061e:	4619      	mov	r1, r3
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	4313      	orrs	r3, r2
 8000624:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 8000626:	bf00      	nop
 8000628:	3714      	adds	r7, #20
 800062a:	46bd      	mov	sp, r7
 800062c:	bc80      	pop	{r7}
 800062e:	4770      	bx	lr
 8000630:	080025b4 	.word	0x080025b4

08000634 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8000634:	b480      	push	{r7}
 8000636:	b085      	sub	sp, #20
 8000638:	af00      	add	r7, sp, #0
 800063a:	60f8      	str	r0, [r7, #12]
 800063c:	60b9      	str	r1, [r7, #8]
 800063e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8000640:	68bb      	ldr	r3, [r7, #8]
 8000642:	3b01      	subs	r3, #1
 8000644:	4a0b      	ldr	r2, [pc, #44]	@ (8000674 <LL_DMA_SetChannelPriorityLevel+0x40>)
 8000646:	5cd3      	ldrb	r3, [r2, r3]
 8000648:	461a      	mov	r2, r3
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	4413      	add	r3, r2
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8000654:	68bb      	ldr	r3, [r7, #8]
 8000656:	3b01      	subs	r3, #1
 8000658:	4906      	ldr	r1, [pc, #24]	@ (8000674 <LL_DMA_SetChannelPriorityLevel+0x40>)
 800065a:	5ccb      	ldrb	r3, [r1, r3]
 800065c:	4619      	mov	r1, r3
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	440b      	add	r3, r1
 8000662:	4619      	mov	r1, r3
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	4313      	orrs	r3, r2
 8000668:	600b      	str	r3, [r1, #0]
             Priority);
}
 800066a:	bf00      	nop
 800066c:	3714      	adds	r7, #20
 800066e:	46bd      	mov	sp, r7
 8000670:	bc80      	pop	{r7}
 8000672:	4770      	bx	lr
 8000674:	080025b4 	.word	0x080025b4

08000678 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8000678:	b480      	push	{r7}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	601a      	str	r2, [r3, #0]
}
 800068c:	bf00      	nop
 800068e:	370c      	adds	r7, #12
 8000690:	46bd      	mov	sp, r7
 8000692:	bc80      	pop	{r7}
 8000694:	4770      	bx	lr

08000696 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          ENGC          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8000696:	b480      	push	{r7}
 8000698:	b083      	sub	sp, #12
 800069a:	af00      	add	r7, sp, #0
 800069c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	601a      	str	r2, [r3, #0]
}
 80006aa:	bf00      	nop
 80006ac:	370c      	adds	r7, #12
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bc80      	pop	{r7}
 80006b2:	4770      	bx	lr

080006b4 <LL_I2C_SetOwnAddress2>:
  * @param  I2Cx I2C Instance.
  * @param  OwnAddress2 This parameter must be a value between Min_Data=0 and Max_Data=0x7F.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
 80006bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	68db      	ldr	r3, [r3, #12]
 80006c2:	f023 02fe 	bic.w	r2, r3, #254	@ 0xfe
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	431a      	orrs	r2, r3
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	60da      	str	r2, [r3, #12]
}
 80006ce:	bf00      	nop
 80006d0:	370c      	adds	r7, #12
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bc80      	pop	{r7}
 80006d6:	4770      	bx	lr

080006d8 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         ENDUAL        LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	68db      	ldr	r3, [r3, #12]
 80006e4:	f023 0201 	bic.w	r2, r3, #1
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	60da      	str	r2, [r3, #12]
}
 80006ec:	bf00      	nop
 80006ee:	370c      	adds	r7, #12
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bc80      	pop	{r7}
 80006f4:	4770      	bx	lr
	...

080006f8 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80006fc:	4b04      	ldr	r3, [pc, #16]	@ (8000710 <LL_RCC_HSE_Enable+0x18>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a03      	ldr	r2, [pc, #12]	@ (8000710 <LL_RCC_HSE_Enable+0x18>)
 8000702:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000706:	6013      	str	r3, [r2, #0]
}
 8000708:	bf00      	nop
 800070a:	46bd      	mov	sp, r7
 800070c:	bc80      	pop	{r7}
 800070e:	4770      	bx	lr
 8000710:	40021000 	.word	0x40021000

08000714 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000718:	4b06      	ldr	r3, [pc, #24]	@ (8000734 <LL_RCC_HSE_IsReady+0x20>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000720:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8000724:	bf0c      	ite	eq
 8000726:	2301      	moveq	r3, #1
 8000728:	2300      	movne	r3, #0
 800072a:	b2db      	uxtb	r3, r3
}
 800072c:	4618      	mov	r0, r3
 800072e:	46bd      	mov	sp, r7
 8000730:	bc80      	pop	{r7}
 8000732:	4770      	bx	lr
 8000734:	40021000 	.word	0x40021000

08000738 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000740:	4b06      	ldr	r3, [pc, #24]	@ (800075c <LL_RCC_SetSysClkSource+0x24>)
 8000742:	685b      	ldr	r3, [r3, #4]
 8000744:	f023 0203 	bic.w	r2, r3, #3
 8000748:	4904      	ldr	r1, [pc, #16]	@ (800075c <LL_RCC_SetSysClkSource+0x24>)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	4313      	orrs	r3, r2
 800074e:	604b      	str	r3, [r1, #4]
}
 8000750:	bf00      	nop
 8000752:	370c      	adds	r7, #12
 8000754:	46bd      	mov	sp, r7
 8000756:	bc80      	pop	{r7}
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	40021000 	.word	0x40021000

08000760 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000764:	4b03      	ldr	r3, [pc, #12]	@ (8000774 <LL_RCC_GetSysClkSource+0x14>)
 8000766:	685b      	ldr	r3, [r3, #4]
 8000768:	f003 030c 	and.w	r3, r3, #12
}
 800076c:	4618      	mov	r0, r3
 800076e:	46bd      	mov	sp, r7
 8000770:	bc80      	pop	{r7}
 8000772:	4770      	bx	lr
 8000774:	40021000 	.word	0x40021000

08000778 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000780:	4b06      	ldr	r3, [pc, #24]	@ (800079c <LL_RCC_SetAHBPrescaler+0x24>)
 8000782:	685b      	ldr	r3, [r3, #4]
 8000784:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000788:	4904      	ldr	r1, [pc, #16]	@ (800079c <LL_RCC_SetAHBPrescaler+0x24>)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	4313      	orrs	r3, r2
 800078e:	604b      	str	r3, [r1, #4]
}
 8000790:	bf00      	nop
 8000792:	370c      	adds	r7, #12
 8000794:	46bd      	mov	sp, r7
 8000796:	bc80      	pop	{r7}
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	40021000 	.word	0x40021000

080007a0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80007a8:	4b06      	ldr	r3, [pc, #24]	@ (80007c4 <LL_RCC_SetAPB1Prescaler+0x24>)
 80007aa:	685b      	ldr	r3, [r3, #4]
 80007ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80007b0:	4904      	ldr	r1, [pc, #16]	@ (80007c4 <LL_RCC_SetAPB1Prescaler+0x24>)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	4313      	orrs	r3, r2
 80007b6:	604b      	str	r3, [r1, #4]
}
 80007b8:	bf00      	nop
 80007ba:	370c      	adds	r7, #12
 80007bc:	46bd      	mov	sp, r7
 80007be:	bc80      	pop	{r7}
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	40021000 	.word	0x40021000

080007c8 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80007d0:	4b06      	ldr	r3, [pc, #24]	@ (80007ec <LL_RCC_SetAPB2Prescaler+0x24>)
 80007d2:	685b      	ldr	r3, [r3, #4]
 80007d4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80007d8:	4904      	ldr	r1, [pc, #16]	@ (80007ec <LL_RCC_SetAPB2Prescaler+0x24>)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	4313      	orrs	r3, r2
 80007de:	604b      	str	r3, [r1, #4]
}
 80007e0:	bf00      	nop
 80007e2:	370c      	adds	r7, #12
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bc80      	pop	{r7}
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	40021000 	.word	0x40021000

080007f0 <LL_RCC_SetADCClockSource>:
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_6
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_ADCPRE, ADCxSource);
 80007f8:	4b06      	ldr	r3, [pc, #24]	@ (8000814 <LL_RCC_SetADCClockSource+0x24>)
 80007fa:	685b      	ldr	r3, [r3, #4]
 80007fc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8000800:	4904      	ldr	r1, [pc, #16]	@ (8000814 <LL_RCC_SetADCClockSource+0x24>)
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	4313      	orrs	r3, r2
 8000806:	604b      	str	r3, [r1, #4]
}
 8000808:	bf00      	nop
 800080a:	370c      	adds	r7, #12
 800080c:	46bd      	mov	sp, r7
 800080e:	bc80      	pop	{r7}
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	40021000 	.word	0x40021000

08000818 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800081c:	4b04      	ldr	r3, [pc, #16]	@ (8000830 <LL_RCC_PLL_Enable+0x18>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a03      	ldr	r2, [pc, #12]	@ (8000830 <LL_RCC_PLL_Enable+0x18>)
 8000822:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000826:	6013      	str	r3, [r2, #0]
}
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	bc80      	pop	{r7}
 800082e:	4770      	bx	lr
 8000830:	40021000 	.word	0x40021000

08000834 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000838:	4b06      	ldr	r3, [pc, #24]	@ (8000854 <LL_RCC_PLL_IsReady+0x20>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000840:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8000844:	bf0c      	ite	eq
 8000846:	2301      	moveq	r3, #1
 8000848:	2300      	movne	r3, #0
 800084a:	b2db      	uxtb	r3, r3
}
 800084c:	4618      	mov	r0, r3
 800084e:	46bd      	mov	sp, r7
 8000850:	bc80      	pop	{r7}
 8000852:	4770      	bx	lr
 8000854:	40021000 	.word	0x40021000

08000858 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
 8000860:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 8000862:	4b08      	ldr	r3, [pc, #32]	@ (8000884 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 8000864:	685b      	ldr	r3, [r3, #4]
 8000866:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	430b      	orrs	r3, r1
 8000874:	4903      	ldr	r1, [pc, #12]	@ (8000884 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 8000876:	4313      	orrs	r3, r2
 8000878:	604b      	str	r3, [r1, #4]
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 800087a:	bf00      	nop
 800087c:	370c      	adds	r7, #12
 800087e:	46bd      	mov	sp, r7
 8000880:	bc80      	pop	{r7}
 8000882:	4770      	bx	lr
 8000884:	40021000 	.word	0x40021000

08000888 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000888:	b480      	push	{r7}
 800088a:	b085      	sub	sp, #20
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000890:	4b08      	ldr	r3, [pc, #32]	@ (80008b4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000892:	695a      	ldr	r2, [r3, #20]
 8000894:	4907      	ldr	r1, [pc, #28]	@ (80008b4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	4313      	orrs	r3, r2
 800089a:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800089c:	4b05      	ldr	r3, [pc, #20]	@ (80008b4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800089e:	695a      	ldr	r2, [r3, #20]
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	4013      	ands	r3, r2
 80008a4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008a6:	68fb      	ldr	r3, [r7, #12]
}
 80008a8:	bf00      	nop
 80008aa:	3714      	adds	r7, #20
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bc80      	pop	{r7}
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	40021000 	.word	0x40021000

080008b8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b085      	sub	sp, #20
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80008c0:	4b08      	ldr	r3, [pc, #32]	@ (80008e4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80008c2:	69da      	ldr	r2, [r3, #28]
 80008c4:	4907      	ldr	r1, [pc, #28]	@ (80008e4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	4313      	orrs	r3, r2
 80008ca:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80008cc:	4b05      	ldr	r3, [pc, #20]	@ (80008e4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80008ce:	69da      	ldr	r2, [r3, #28]
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	4013      	ands	r3, r2
 80008d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008d6:	68fb      	ldr	r3, [r7, #12]
}
 80008d8:	bf00      	nop
 80008da:	3714      	adds	r7, #20
 80008dc:	46bd      	mov	sp, r7
 80008de:	bc80      	pop	{r7}
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	40021000 	.word	0x40021000

080008e8 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b085      	sub	sp, #20
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80008f0:	4b08      	ldr	r3, [pc, #32]	@ (8000914 <LL_APB2_GRP1_EnableClock+0x2c>)
 80008f2:	699a      	ldr	r2, [r3, #24]
 80008f4:	4907      	ldr	r1, [pc, #28]	@ (8000914 <LL_APB2_GRP1_EnableClock+0x2c>)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4313      	orrs	r3, r2
 80008fa:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80008fc:	4b05      	ldr	r3, [pc, #20]	@ (8000914 <LL_APB2_GRP1_EnableClock+0x2c>)
 80008fe:	699a      	ldr	r2, [r3, #24]
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	4013      	ands	r3, r2
 8000904:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000906:	68fb      	ldr	r3, [r7, #12]
}
 8000908:	bf00      	nop
 800090a:	3714      	adds	r7, #20
 800090c:	46bd      	mov	sp, r7
 800090e:	bc80      	pop	{r7}
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	40021000 	.word	0x40021000

08000918 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000920:	4b06      	ldr	r3, [pc, #24]	@ (800093c <LL_FLASH_SetLatency+0x24>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	f023 0207 	bic.w	r2, r3, #7
 8000928:	4904      	ldr	r1, [pc, #16]	@ (800093c <LL_FLASH_SetLatency+0x24>)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	4313      	orrs	r3, r2
 800092e:	600b      	str	r3, [r1, #0]
}
 8000930:	bf00      	nop
 8000932:	370c      	adds	r7, #12
 8000934:	46bd      	mov	sp, r7
 8000936:	bc80      	pop	{r7}
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	40022000 	.word	0x40022000

08000940 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000944:	4b03      	ldr	r3, [pc, #12]	@ (8000954 <LL_FLASH_GetLatency+0x14>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	f003 0307 	and.w	r3, r3, #7
}
 800094c:	4618      	mov	r0, r3
 800094e:	46bd      	mov	sp, r7
 8000950:	bc80      	pop	{r7}
 8000952:	4770      	bx	lr
 8000954:	40022000 	.word	0x40022000

08000958 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	601a      	str	r2, [r3, #0]
}
 800096c:	bf00      	nop
 800096e:	370c      	adds	r7, #12
 8000970:	46bd      	mov	sp, r7
 8000972:	bc80      	pop	{r7}
 8000974:	4770      	bx	lr
	...

08000978 <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000978:	b480      	push	{r7}
 800097a:	b085      	sub	sp, #20
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
 8000980:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	2b01      	cmp	r3, #1
 8000986:	d01c      	beq.n	80009c2 <LL_TIM_OC_DisableFast+0x4a>
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	2b04      	cmp	r3, #4
 800098c:	d017      	beq.n	80009be <LL_TIM_OC_DisableFast+0x46>
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	2b10      	cmp	r3, #16
 8000992:	d012      	beq.n	80009ba <LL_TIM_OC_DisableFast+0x42>
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	2b40      	cmp	r3, #64	@ 0x40
 8000998:	d00d      	beq.n	80009b6 <LL_TIM_OC_DisableFast+0x3e>
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80009a0:	d007      	beq.n	80009b2 <LL_TIM_OC_DisableFast+0x3a>
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80009a8:	d101      	bne.n	80009ae <LL_TIM_OC_DisableFast+0x36>
 80009aa:	2305      	movs	r3, #5
 80009ac:	e00a      	b.n	80009c4 <LL_TIM_OC_DisableFast+0x4c>
 80009ae:	2306      	movs	r3, #6
 80009b0:	e008      	b.n	80009c4 <LL_TIM_OC_DisableFast+0x4c>
 80009b2:	2304      	movs	r3, #4
 80009b4:	e006      	b.n	80009c4 <LL_TIM_OC_DisableFast+0x4c>
 80009b6:	2303      	movs	r3, #3
 80009b8:	e004      	b.n	80009c4 <LL_TIM_OC_DisableFast+0x4c>
 80009ba:	2302      	movs	r3, #2
 80009bc:	e002      	b.n	80009c4 <LL_TIM_OC_DisableFast+0x4c>
 80009be:	2301      	movs	r3, #1
 80009c0:	e000      	b.n	80009c4 <LL_TIM_OC_DisableFast+0x4c>
 80009c2:	2300      	movs	r3, #0
 80009c4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	3318      	adds	r3, #24
 80009ca:	4619      	mov	r1, r3
 80009cc:	7bfb      	ldrb	r3, [r7, #15]
 80009ce:	4a0a      	ldr	r2, [pc, #40]	@ (80009f8 <LL_TIM_OC_DisableFast+0x80>)
 80009d0:	5cd3      	ldrb	r3, [r2, r3]
 80009d2:	440b      	add	r3, r1
 80009d4:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80009d6:	68bb      	ldr	r3, [r7, #8]
 80009d8:	681a      	ldr	r2, [r3, #0]
 80009da:	7bfb      	ldrb	r3, [r7, #15]
 80009dc:	4907      	ldr	r1, [pc, #28]	@ (80009fc <LL_TIM_OC_DisableFast+0x84>)
 80009de:	5ccb      	ldrb	r3, [r1, r3]
 80009e0:	4619      	mov	r1, r3
 80009e2:	2304      	movs	r3, #4
 80009e4:	408b      	lsls	r3, r1
 80009e6:	43db      	mvns	r3, r3
 80009e8:	401a      	ands	r2, r3
 80009ea:	68bb      	ldr	r3, [r7, #8]
 80009ec:	601a      	str	r2, [r3, #0]

}
 80009ee:	bf00      	nop
 80009f0:	3714      	adds	r7, #20
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bc80      	pop	{r7}
 80009f6:	4770      	bx	lr
 80009f8:	080025bc 	.word	0x080025bc
 80009fc:	080025c4 	.word	0x080025c4

08000a00 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b085      	sub	sp, #20
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
 8000a08:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	d01c      	beq.n	8000a4a <LL_TIM_OC_EnablePreload+0x4a>
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	2b04      	cmp	r3, #4
 8000a14:	d017      	beq.n	8000a46 <LL_TIM_OC_EnablePreload+0x46>
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	2b10      	cmp	r3, #16
 8000a1a:	d012      	beq.n	8000a42 <LL_TIM_OC_EnablePreload+0x42>
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	2b40      	cmp	r3, #64	@ 0x40
 8000a20:	d00d      	beq.n	8000a3e <LL_TIM_OC_EnablePreload+0x3e>
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000a28:	d007      	beq.n	8000a3a <LL_TIM_OC_EnablePreload+0x3a>
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000a30:	d101      	bne.n	8000a36 <LL_TIM_OC_EnablePreload+0x36>
 8000a32:	2305      	movs	r3, #5
 8000a34:	e00a      	b.n	8000a4c <LL_TIM_OC_EnablePreload+0x4c>
 8000a36:	2306      	movs	r3, #6
 8000a38:	e008      	b.n	8000a4c <LL_TIM_OC_EnablePreload+0x4c>
 8000a3a:	2304      	movs	r3, #4
 8000a3c:	e006      	b.n	8000a4c <LL_TIM_OC_EnablePreload+0x4c>
 8000a3e:	2303      	movs	r3, #3
 8000a40:	e004      	b.n	8000a4c <LL_TIM_OC_EnablePreload+0x4c>
 8000a42:	2302      	movs	r3, #2
 8000a44:	e002      	b.n	8000a4c <LL_TIM_OC_EnablePreload+0x4c>
 8000a46:	2301      	movs	r3, #1
 8000a48:	e000      	b.n	8000a4c <LL_TIM_OC_EnablePreload+0x4c>
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	3318      	adds	r3, #24
 8000a52:	4619      	mov	r1, r3
 8000a54:	7bfb      	ldrb	r3, [r7, #15]
 8000a56:	4a0a      	ldr	r2, [pc, #40]	@ (8000a80 <LL_TIM_OC_EnablePreload+0x80>)
 8000a58:	5cd3      	ldrb	r3, [r2, r3]
 8000a5a:	440b      	add	r3, r1
 8000a5c:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8000a5e:	68bb      	ldr	r3, [r7, #8]
 8000a60:	681a      	ldr	r2, [r3, #0]
 8000a62:	7bfb      	ldrb	r3, [r7, #15]
 8000a64:	4907      	ldr	r1, [pc, #28]	@ (8000a84 <LL_TIM_OC_EnablePreload+0x84>)
 8000a66:	5ccb      	ldrb	r3, [r1, r3]
 8000a68:	4619      	mov	r1, r3
 8000a6a:	2308      	movs	r3, #8
 8000a6c:	408b      	lsls	r3, r1
 8000a6e:	431a      	orrs	r2, r3
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	601a      	str	r2, [r3, #0]
}
 8000a74:	bf00      	nop
 8000a76:	3714      	adds	r7, #20
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bc80      	pop	{r7}
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	080025bc 	.word	0x080025bc
 8000a84:	080025c4 	.word	0x080025c4

08000a88 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	689b      	ldr	r3, [r3, #8]
 8000a96:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000a9a:	f023 0307 	bic.w	r3, r3, #7
 8000a9e:	683a      	ldr	r2, [r7, #0]
 8000aa0:	431a      	orrs	r2, r3
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	609a      	str	r2, [r3, #8]
}
 8000aa6:	bf00      	nop
 8000aa8:	370c      	adds	r7, #12
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bc80      	pop	{r7}
 8000aae:	4770      	bx	lr

08000ab0 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
 8000ab8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	431a      	orrs	r2, r3
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	605a      	str	r2, [r3, #4]
}
 8000aca:	bf00      	nop
 8000acc:	370c      	adds	r7, #12
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bc80      	pop	{r7}
 8000ad2:	4770      	bx	lr

08000ad4 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	689b      	ldr	r3, [r3, #8]
 8000ae0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	609a      	str	r2, [r3, #8]
}
 8000ae8:	bf00      	nop
 8000aea:	370c      	adds	r7, #12
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bc80      	pop	{r7}
 8000af0:	4770      	bx	lr

08000af2 <LL_USART_Enable>:
{
 8000af2:	b480      	push	{r7}
 8000af4:	b083      	sub	sp, #12
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	68db      	ldr	r3, [r3, #12]
 8000afe:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	60da      	str	r2, [r3, #12]
}
 8000b06:	bf00      	nop
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bc80      	pop	{r7}
 8000b0e:	4770      	bx	lr

08000b10 <LL_USART_ConfigAsyncMode>:
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	691b      	ldr	r3, [r3, #16]
 8000b1c:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	695b      	ldr	r3, [r3, #20]
 8000b28:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	615a      	str	r2, [r3, #20]
}
 8000b30:	bf00      	nop
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bc80      	pop	{r7}
 8000b38:	4770      	bx	lr

08000b3a <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_OUTPUT
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000b3a:	b490      	push	{r4, r7}
 8000b3c:	b088      	sub	sp, #32
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	60f8      	str	r0, [r7, #12]
 8000b42:	60b9      	str	r1, [r7, #8]
 8000b44:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	461a      	mov	r2, r3
 8000b4a:	68bb      	ldr	r3, [r7, #8]
 8000b4c:	0e1b      	lsrs	r3, r3, #24
 8000b4e:	4413      	add	r3, r2
 8000b50:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8000b52:	6822      	ldr	r2, [r4, #0]
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	fa93 f3a3 	rbit	r3, r3
 8000b5e:	613b      	str	r3, [r7, #16]
  return result;
 8000b60:	693b      	ldr	r3, [r7, #16]
 8000b62:	fab3 f383 	clz	r3, r3
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	009b      	lsls	r3, r3, #2
 8000b6a:	210f      	movs	r1, #15
 8000b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b70:	43db      	mvns	r3, r3
 8000b72:	401a      	ands	r2, r3
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b78:	69fb      	ldr	r3, [r7, #28]
 8000b7a:	fa93 f3a3 	rbit	r3, r3
 8000b7e:	61bb      	str	r3, [r7, #24]
  return result;
 8000b80:	69bb      	ldr	r3, [r7, #24]
 8000b82:	fab3 f383 	clz	r3, r3
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	009b      	lsls	r3, r3, #2
 8000b8a:	6879      	ldr	r1, [r7, #4]
 8000b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b90:	4313      	orrs	r3, r2
 8000b92:	6023      	str	r3, [r4, #0]
}
 8000b94:	bf00      	nop
 8000b96:	3720      	adds	r7, #32
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bc90      	pop	{r4, r7}
 8000b9c:	4770      	bx	lr

08000b9e <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	b083      	sub	sp, #12
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]
 8000ba6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	0a1b      	lsrs	r3, r3, #8
 8000bac:	b29a      	uxth	r2, r3
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	615a      	str	r2, [r3, #20]
}
 8000bb2:	bf00      	nop
 8000bb4:	370c      	adds	r7, #12
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bc80      	pop	{r7}
 8000bba:	4770      	bx	lr

08000bbc <LL_GPIO_AF_Remap_SWJ_NOJTAG>:
  * @rmtoll MAPR          SWJ_CFG           LL_GPIO_AF_Remap_SWJ_NOJTAG
  * @note  NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_Remap_SWJ_NOJTAG(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  MODIFY_REG(AFIO->MAPR, AFIO_MAPR_SWJ_CFG, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 8000bc0:	4b05      	ldr	r3, [pc, #20]	@ (8000bd8 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x1c>)
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000bc8:	4a03      	ldr	r2, [pc, #12]	@ (8000bd8 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x1c>)
 8000bca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000bce:	6053      	str	r3, [r2, #4]
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bc80      	pop	{r7}
 8000bd6:	4770      	bx	lr
 8000bd8:	40010000 	.word	0x40010000

08000bdc <LL_GPIO_AF_SetEXTISource>:
  *         @arg @ref LL_GPIO_AF_EXTI_LINE14
  *         @arg @ref LL_GPIO_AF_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(AFIO->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8000be6:	4a13      	ldr	r2, [pc, #76]	@ (8000c34 <LL_GPIO_AF_SetEXTISource+0x58>)
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	3302      	adds	r3, #2
 8000bee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	0c1b      	lsrs	r3, r3, #16
 8000bf6:	43db      	mvns	r3, r3
 8000bf8:	ea02 0103 	and.w	r1, r2, r3
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	0c1b      	lsrs	r3, r3, #16
 8000c00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	fa93 f3a3 	rbit	r3, r3
 8000c08:	60bb      	str	r3, [r7, #8]
  return result;
 8000c0a:	68bb      	ldr	r3, [r7, #8]
 8000c0c:	fab3 f383 	clz	r3, r3
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	461a      	mov	r2, r3
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	fa03 f202 	lsl.w	r2, r3, r2
 8000c1a:	4806      	ldr	r0, [pc, #24]	@ (8000c34 <LL_GPIO_AF_SetEXTISource+0x58>)
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	b2db      	uxtb	r3, r3
 8000c20:	430a      	orrs	r2, r1
 8000c22:	3302      	adds	r3, #2
 8000c24:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000c28:	bf00      	nop
 8000c2a:	3714      	adds	r7, #20
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bc80      	pop	{r7}
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	40010000 	.word	0x40010000

08000c38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 8000c3c:	2001      	movs	r0, #1
 8000c3e:	f7ff fe53 	bl	80008e8 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000c42:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8000c46:	f7ff fe37 	bl	80008b8 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c4a:	2003      	movs	r0, #3
 8000c4c:	f7ff fafa 	bl	8000244 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8000c50:	f7ff fb1c 	bl	800028c <__NVIC_GetPriorityGrouping>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2200      	movs	r2, #0
 8000c58:	210f      	movs	r1, #15
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff fb6a 	bl	8000334 <NVIC_EncodePriority>
 8000c60:	4603      	mov	r3, r0
 8000c62:	4619      	mov	r1, r3
 8000c64:	f04f 30ff 	mov.w	r0, #4294967295
 8000c68:	f7ff fb3a 	bl	80002e0 <__NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  LL_GPIO_AF_Remap_SWJ_NOJTAG();
 8000c6c:	f7ff ffa6 	bl	8000bbc <LL_GPIO_AF_Remap_SWJ_NOJTAG>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c70:	f000 f81a 	bl	8000ca8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c74:	f000 fa90 	bl	8001198 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c78:	f000 fa76 	bl	8001168 <MX_DMA_Init>
  MX_ADC1_Init();
 8000c7c:	f000 f856 	bl	8000d2c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000c80:	f000 fa0a 	bl	8001098 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000c84:	f000 f9d6 	bl	8001034 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000c88:	f000 f93e 	bl	8000f08 <MX_TIM1_Init>
  MX_I2C1_Init();
 8000c8c:	f000 f8e8 	bl	8000e60 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  UART_Config(&uart_cfg_1, USART1, USART1_IRQn);
 8000c90:	2225      	movs	r2, #37	@ 0x25
 8000c92:	4903      	ldr	r1, [pc, #12]	@ (8000ca0 <main+0x68>)
 8000c94:	4803      	ldr	r0, [pc, #12]	@ (8000ca4 <main+0x6c>)
 8000c96:	f7ff fa9d 	bl	80001d4 <UART_Config>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c9a:	bf00      	nop
 8000c9c:	e7fd      	b.n	8000c9a <main+0x62>
 8000c9e:	bf00      	nop
 8000ca0:	40013800 	.word	0x40013800
 8000ca4:	20000020 	.word	0x20000020

08000ca8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8000cac:	2002      	movs	r0, #2
 8000cae:	f7ff fe33 	bl	8000918 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 8000cb2:	bf00      	nop
 8000cb4:	f7ff fe44 	bl	8000940 <LL_FLASH_GetLatency>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b02      	cmp	r3, #2
 8000cbc:	d1fa      	bne.n	8000cb4 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSE_Enable();
 8000cbe:	f7ff fd1b 	bl	80006f8 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8000cc2:	bf00      	nop
 8000cc4:	f7ff fd26 	bl	8000714 <LL_RCC_HSE_IsReady>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d1fa      	bne.n	8000cc4 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_2, LL_RCC_PLL_MUL_15);
 8000cce:	f44f 1150 	mov.w	r1, #3407872	@ 0x340000
 8000cd2:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8000cd6:	f7ff fdbf 	bl	8000858 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000cda:	f7ff fd9d 	bl	8000818 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000cde:	bf00      	nop
 8000ce0:	f7ff fda8 	bl	8000834 <LL_RCC_PLL_IsReady>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d1fa      	bne.n	8000ce0 <SystemClock_Config+0x38>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000cea:	2000      	movs	r0, #0
 8000cec:	f7ff fd44 	bl	8000778 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8000cf0:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000cf4:	f7ff fd54 	bl	80007a0 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000cf8:	2000      	movs	r0, #0
 8000cfa:	f7ff fd65 	bl	80007c8 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000cfe:	2002      	movs	r0, #2
 8000d00:	f7ff fd1a 	bl	8000738 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000d04:	bf00      	nop
 8000d06:	f7ff fd2b 	bl	8000760 <LL_RCC_GetSysClkSource>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b08      	cmp	r3, #8
 8000d0e:	d1fa      	bne.n	8000d06 <SystemClock_Config+0x5e>
  {

  }
  LL_Init1msTick(60000000);
 8000d10:	4805      	ldr	r0, [pc, #20]	@ (8000d28 <SystemClock_Config+0x80>)
 8000d12:	f001 fbfb 	bl	800250c <LL_Init1msTick>
  LL_SetSystemCoreClock(60000000);
 8000d16:	4804      	ldr	r0, [pc, #16]	@ (8000d28 <SystemClock_Config+0x80>)
 8000d18:	f001 fc06 	bl	8002528 <LL_SetSystemCoreClock>
  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSRC_PCLK2_DIV_6);
 8000d1c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000d20:	f7ff fd66 	bl	80007f0 <LL_RCC_SetADCClockSource>
}
 8000d24:	bf00      	nop
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	03938700 	.word	0x03938700

08000d2c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b08e      	sub	sp, #56	@ 0x38
 8000d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8000d32:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
 8000d3a:	605a      	str	r2, [r3, #4]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8000d40:	f107 0318 	add.w	r3, r7, #24
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
 8000d4c:	60da      	str	r2, [r3, #12]
 8000d4e:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d50:	1d3b      	adds	r3, r7, #4
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	605a      	str	r2, [r3, #4]
 8000d58:	609a      	str	r2, [r3, #8]
 8000d5a:	60da      	str	r2, [r3, #12]
 8000d5c:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8000d5e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000d62:	f7ff fdc1 	bl	80008e8 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8000d66:	2004      	movs	r0, #4
 8000d68:	f7ff fdbe 	bl	80008e8 <LL_APB2_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PA0-WKUP   ------> ADC1_IN0
  PA1   ------> ADC1_IN1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 8000d6c:	f240 3303 	movw	r3, #771	@ 0x303
 8000d70:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000d72:	2300      	movs	r3, #0
 8000d74:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d76:	1d3b      	adds	r3, r7, #4
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4835      	ldr	r0, [pc, #212]	@ (8000e50 <MX_ADC1_Init+0x124>)
 8000d7c:	f000 fd47 	bl	800180e <LL_GPIO_Init>

  /* ADC1 DMA Init */

  /* ADC1 Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8000d80:	2200      	movs	r2, #0
 8000d82:	2101      	movs	r1, #1
 8000d84:	4833      	ldr	r0, [pc, #204]	@ (8000e54 <MX_ADC1_Init+0x128>)
 8000d86:	f7ff fb87 	bl	8000498 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_LOW);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	4831      	ldr	r0, [pc, #196]	@ (8000e54 <MX_ADC1_Init+0x128>)
 8000d90:	f7ff fc50 	bl	8000634 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_CIRCULAR);
 8000d94:	2220      	movs	r2, #32
 8000d96:	2101      	movs	r1, #1
 8000d98:	482e      	ldr	r0, [pc, #184]	@ (8000e54 <MX_ADC1_Init+0x128>)
 8000d9a:	f7ff fba1 	bl	80004e0 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	2101      	movs	r1, #1
 8000da2:	482c      	ldr	r0, [pc, #176]	@ (8000e54 <MX_ADC1_Init+0x128>)
 8000da4:	f7ff fbbe 	bl	8000524 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 8000da8:	2280      	movs	r2, #128	@ 0x80
 8000daa:	2101      	movs	r1, #1
 8000dac:	4829      	ldr	r0, [pc, #164]	@ (8000e54 <MX_ADC1_Init+0x128>)
 8000dae:	f7ff fbdb 	bl	8000568 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_WORD);
 8000db2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000db6:	2101      	movs	r1, #1
 8000db8:	4826      	ldr	r0, [pc, #152]	@ (8000e54 <MX_ADC1_Init+0x128>)
 8000dba:	f7ff fbf7 	bl	80005ac <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_WORD);
 8000dbe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	4823      	ldr	r0, [pc, #140]	@ (8000e54 <MX_ADC1_Init+0x128>)
 8000dc6:	f7ff fc13 	bl	80005f0 <LL_DMA_SetMemorySize>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	633b      	str	r3, [r7, #48]	@ 0x30
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 8000dce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000dd2:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8000dd4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000dd8:	4619      	mov	r1, r3
 8000dda:	481f      	ldr	r0, [pc, #124]	@ (8000e58 <MX_ADC1_Init+0x12c>)
 8000ddc:	f000 fae2 	bl	80013a4 <LL_ADC_Init>
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8000de0:	2300      	movs	r3, #0
 8000de2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8000de4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000de8:	4619      	mov	r1, r3
 8000dea:	481b      	ldr	r0, [pc, #108]	@ (8000e58 <MX_ADC1_Init+0x12c>)
 8000dec:	f000 faa8 	bl	8001340 <LL_ADC_CommonInit>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8000df0:	f44f 2360 	mov.w	r3, #917504	@ 0xe0000
 8000df4:	61bb      	str	r3, [r7, #24]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS;
 8000df6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000dfa:	61fb      	str	r3, [r7, #28]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8000e00:	2300      	movs	r3, #0
 8000e02:	627b      	str	r3, [r7, #36]	@ 0x24
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 8000e04:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e08:	62bb      	str	r3, [r7, #40]	@ 0x28
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8000e0a:	f107 0318 	add.w	r3, r7, #24
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4811      	ldr	r0, [pc, #68]	@ (8000e58 <MX_ADC1_Init+0x12c>)
 8000e12:	f000 faee 	bl	80013f2 <LL_ADC_REG_Init>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_0);
 8000e16:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000e1a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e1e:	480e      	ldr	r0, [pc, #56]	@ (8000e58 <MX_ADC1_Init+0x12c>)
 8000e20:	f7ff faba 	bl	8000398 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8000e24:	2207      	movs	r2, #7
 8000e26:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8000e2a:	480b      	ldr	r0, [pc, #44]	@ (8000e58 <MX_ADC1_Init+0x12c>)
 8000e2c:	f7ff fae9 	bl	8000402 <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_1);
 8000e30:	4a0a      	ldr	r2, [pc, #40]	@ (8000e5c <MX_ADC1_Init+0x130>)
 8000e32:	f240 2105 	movw	r1, #517	@ 0x205
 8000e36:	4808      	ldr	r0, [pc, #32]	@ (8000e58 <MX_ADC1_Init+0x12c>)
 8000e38:	f7ff faae 	bl	8000398 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8000e3c:	2207      	movs	r2, #7
 8000e3e:	4907      	ldr	r1, [pc, #28]	@ (8000e5c <MX_ADC1_Init+0x130>)
 8000e40:	4805      	ldr	r0, [pc, #20]	@ (8000e58 <MX_ADC1_Init+0x12c>)
 8000e42:	f7ff fade 	bl	8000402 <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e46:	bf00      	nop
 8000e48:	3738      	adds	r7, #56	@ 0x38
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40010800 	.word	0x40010800
 8000e54:	40020000 	.word	0x40020000
 8000e58:	40012400 	.word	0x40012400
 8000e5c:	02300001 	.word	0x02300001

08000e60 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b08c      	sub	sp, #48	@ 0x30
 8000e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8000e66:	f107 0318 	add.w	r3, r7, #24
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	601a      	str	r2, [r3, #0]
 8000e6e:	605a      	str	r2, [r3, #4]
 8000e70:	609a      	str	r2, [r3, #8]
 8000e72:	60da      	str	r2, [r3, #12]
 8000e74:	611a      	str	r2, [r3, #16]
 8000e76:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e78:	1d3b      	adds	r3, r7, #4
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	605a      	str	r2, [r3, #4]
 8000e80:	609a      	str	r2, [r3, #8]
 8000e82:	60da      	str	r2, [r3, #12]
 8000e84:	611a      	str	r2, [r3, #16]

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8000e86:	2008      	movs	r0, #8
 8000e88:	f7ff fd2e 	bl	80008e8 <LL_APB2_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8000e8c:	f24c 03c0 	movw	r3, #49344	@ 0xc0c0
 8000e90:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000e92:	2309      	movs	r3, #9
 8000e94:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000e96:	2303      	movs	r3, #3
 8000e98:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000e9a:	2304      	movs	r3, #4
 8000e9c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9e:	1d3b      	adds	r3, r7, #4
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4816      	ldr	r0, [pc, #88]	@ (8000efc <MX_I2C1_Init+0x9c>)
 8000ea4:	f000 fcb3 	bl	800180e <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8000ea8:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8000eac:	f7ff fd04 	bl	80008b8 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C1_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C1);
 8000eb0:	4813      	ldr	r0, [pc, #76]	@ (8000f00 <MX_I2C1_Init+0xa0>)
 8000eb2:	f7ff fc11 	bl	80006d8 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8000eb6:	4812      	ldr	r0, [pc, #72]	@ (8000f00 <MX_I2C1_Init+0xa0>)
 8000eb8:	f7ff fbed 	bl	8000696 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8000ebc:	4810      	ldr	r0, [pc, #64]	@ (8000f00 <MX_I2C1_Init+0xa0>)
 8000ebe:	f7ff fbdb 	bl	8000678 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 8000ec6:	4b0f      	ldr	r3, [pc, #60]	@ (8000f04 <MX_I2C1_Init+0xa4>)
 8000ec8:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	627b      	str	r3, [r7, #36]	@ 0x24
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8000ed2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ed6:	62bb      	str	r3, [r7, #40]	@ 0x28
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8000ed8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000edc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8000ede:	f107 0318 	add.w	r3, r7, #24
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4806      	ldr	r0, [pc, #24]	@ (8000f00 <MX_I2C1_Init+0xa0>)
 8000ee6:	f000 fde7 	bl	8001ab8 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0);
 8000eea:	2100      	movs	r1, #0
 8000eec:	4804      	ldr	r0, [pc, #16]	@ (8000f00 <MX_I2C1_Init+0xa0>)
 8000eee:	f7ff fbe1 	bl	80006b4 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ef2:	bf00      	nop
 8000ef4:	3730      	adds	r7, #48	@ 0x30
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40010c00 	.word	0x40010c00
 8000f00:	40005400 	.word	0x40005400
 8000f04:	000186a0 	.word	0x000186a0

08000f08 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b098      	sub	sp, #96	@ 0x60
 8000f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000f0e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	605a      	str	r2, [r3, #4]
 8000f18:	609a      	str	r2, [r3, #8]
 8000f1a:	60da      	str	r2, [r3, #12]
 8000f1c:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8000f1e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f22:	2220      	movs	r2, #32
 8000f24:	2100      	movs	r1, #0
 8000f26:	4618      	mov	r0, r3
 8000f28:	f001 fb0c 	bl	8002544 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8000f2c:	f107 0314 	add.w	r3, r7, #20
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]
 8000f3a:	611a      	str	r2, [r3, #16]
 8000f3c:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3e:	463b      	mov	r3, r7
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8000f4c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8000f50:	f7ff fcca 	bl	80008e8 <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8000f54:	2300      	movs	r3, #0
 8000f56:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	653b      	str	r3, [r7, #80]	@ 0x50
  TIM_InitStruct.Autoreload = 65535;
 8000f5e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f62:	657b      	str	r3, [r7, #84]	@ 0x54
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000f64:	2300      	movs	r3, #0
 8000f66:	65bb      	str	r3, [r7, #88]	@ 0x58
  TIM_InitStruct.RepetitionCounter = 0;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8000f6c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000f70:	4619      	mov	r1, r3
 8000f72:	482d      	ldr	r0, [pc, #180]	@ (8001028 <MX_TIM1_Init+0x120>)
 8000f74:	f000 ff4e 	bl	8001e14 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8000f78:	482b      	ldr	r0, [pc, #172]	@ (8001028 <MX_TIM1_Init+0x120>)
 8000f7a:	f7ff fced 	bl	8000958 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 8000f7e:	2100      	movs	r1, #0
 8000f80:	4829      	ldr	r0, [pc, #164]	@ (8001028 <MX_TIM1_Init+0x120>)
 8000f82:	f7ff fd81 	bl	8000a88 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 8000f86:	2101      	movs	r1, #1
 8000f88:	4827      	ldr	r0, [pc, #156]	@ (8001028 <MX_TIM1_Init+0x120>)
 8000f8a:	f7ff fd39 	bl	8000a00 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8000f8e:	2360      	movs	r3, #96	@ 0x60
 8000f90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8000f92:	2300      	movs	r3, #0
 8000f94:	633b      	str	r3, [r7, #48]	@ 0x30
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8000f96:	2300      	movs	r3, #0
 8000f98:	637b      	str	r3, [r7, #52]	@ 0x34
  TIM_OC_InitStruct.CompareValue = 0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	63bb      	str	r3, [r7, #56]	@ 0x38
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8000faa:	2300      	movs	r3, #0
 8000fac:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8000fae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	2101      	movs	r1, #1
 8000fb6:	481c      	ldr	r0, [pc, #112]	@ (8001028 <MX_TIM1_Init+0x120>)
 8000fb8:	f000 ff8a 	bl	8001ed0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 8000fbc:	2101      	movs	r1, #1
 8000fbe:	481a      	ldr	r0, [pc, #104]	@ (8001028 <MX_TIM1_Init+0x120>)
 8000fc0:	f7ff fcda 	bl	8000978 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	4818      	ldr	r0, [pc, #96]	@ (8001028 <MX_TIM1_Init+0x120>)
 8000fc8:	f7ff fd72 	bl	8000ab0 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8000fcc:	4816      	ldr	r0, [pc, #88]	@ (8001028 <MX_TIM1_Init+0x120>)
 8000fce:	f7ff fd81 	bl	8000ad4 <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	617b      	str	r3, [r7, #20]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61bb      	str	r3, [r7, #24]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.DeadTime = 0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	f887 3020 	strb.w	r3, [r7, #32]
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	847b      	strh	r3, [r7, #34]	@ 0x22
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8000fe8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fec:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	62bb      	str	r3, [r7, #40]	@ 0x28
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8000ff2:	f107 0314 	add.w	r3, r7, #20
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	480b      	ldr	r0, [pc, #44]	@ (8001028 <MX_TIM1_Init+0x120>)
 8000ffa:	f000 ffaa 	bl	8001f52 <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8000ffe:	2004      	movs	r0, #4
 8001000:	f7ff fc72 	bl	80008e8 <LL_APB2_GRP1_EnableClock>
  /**TIM1 GPIO Configuration
  PA8   ------> TIM1_CH1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8001004:	4b09      	ldr	r3, [pc, #36]	@ (800102c <MX_TIM1_Init+0x124>)
 8001006:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001008:	2309      	movs	r3, #9
 800100a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800100c:	2302      	movs	r3, #2
 800100e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001014:	463b      	mov	r3, r7
 8001016:	4619      	mov	r1, r3
 8001018:	4805      	ldr	r0, [pc, #20]	@ (8001030 <MX_TIM1_Init+0x128>)
 800101a:	f000 fbf8 	bl	800180e <LL_GPIO_Init>

}
 800101e:	bf00      	nop
 8001020:	3760      	adds	r7, #96	@ 0x60
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40012c00 	.word	0x40012c00
 800102c:	04010001 	.word	0x04010001
 8001030:	40010800 	.word	0x40010800

08001034 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800103a:	1d3b      	adds	r3, r7, #4
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
 8001046:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8001048:	2001      	movs	r0, #1
 800104a:	f7ff fc35 	bl	80008b8 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 59;
 800104e:	233b      	movs	r3, #59	@ 0x3b
 8001050:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001052:	2300      	movs	r3, #0
 8001054:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 65535;
 8001056:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800105a:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800105c:	2300      	movs	r3, #0
 800105e:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8001060:	1d3b      	adds	r3, r7, #4
 8001062:	4619      	mov	r1, r3
 8001064:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001068:	f000 fed4 	bl	8001e14 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 800106c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001070:	f7ff fc72 	bl	8000958 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001074:	2100      	movs	r1, #0
 8001076:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800107a:	f7ff fd05 	bl	8000a88 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 800107e:	2100      	movs	r1, #0
 8001080:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001084:	f7ff fd14 	bl	8000ab0 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8001088:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800108c:	f7ff fd22 	bl	8000ad4 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001090:	bf00      	nop
 8001092:	3718      	adds	r7, #24
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}

08001098 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b08c      	sub	sp, #48	@ 0x30
 800109c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800109e:	f107 0314 	add.w	r3, r7, #20
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	605a      	str	r2, [r3, #4]
 80010a8:	609a      	str	r2, [r3, #8]
 80010aa:	60da      	str	r2, [r3, #12]
 80010ac:	611a      	str	r2, [r3, #16]
 80010ae:	615a      	str	r2, [r3, #20]
 80010b0:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b2:	463b      	mov	r3, r7
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 80010c0:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80010c4:	f7ff fc10 	bl	80008e8 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80010c8:	2004      	movs	r0, #4
 80010ca:	f7ff fc0d 	bl	80008e8 <LL_APB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 80010ce:	4b22      	ldr	r3, [pc, #136]	@ (8001158 <MX_USART1_UART_Init+0xc0>)
 80010d0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80010d2:	2309      	movs	r3, #9
 80010d4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80010d6:	2303      	movs	r3, #3
 80010d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010de:	463b      	mov	r3, r7
 80010e0:	4619      	mov	r1, r3
 80010e2:	481e      	ldr	r0, [pc, #120]	@ (800115c <MX_USART1_UART_Init+0xc4>)
 80010e4:	f000 fb93 	bl	800180e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 80010e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001160 <MX_USART1_UART_Init+0xc8>)
 80010ea:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 80010ec:	2304      	movs	r3, #4
 80010ee:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f0:	463b      	mov	r3, r7
 80010f2:	4619      	mov	r1, r3
 80010f4:	4819      	ldr	r0, [pc, #100]	@ (800115c <MX_USART1_UART_Init+0xc4>)
 80010f6:	f000 fb8a 	bl	800180e <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 80010fa:	f7ff f8c7 	bl	800028c <__NVIC_GetPriorityGrouping>
 80010fe:	4603      	mov	r3, r0
 8001100:	2200      	movs	r2, #0
 8001102:	2102      	movs	r1, #2
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff f915 	bl	8000334 <NVIC_EncodePriority>
 800110a:	4603      	mov	r3, r0
 800110c:	4619      	mov	r1, r3
 800110e:	2025      	movs	r0, #37	@ 0x25
 8001110:	f7ff f8e6 	bl	80002e0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8001114:	2025      	movs	r0, #37	@ 0x25
 8001116:	f7ff f8c7 	bl	80002a8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800111a:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800111e:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001120:	2300      	movs	r3, #0
 8001122:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001124:	2300      	movs	r3, #0
 8001126:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001128:	2300      	movs	r3, #0
 800112a:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800112c:	230c      	movs	r3, #12
 800112e:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001130:	2300      	movs	r3, #0
 8001132:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001134:	2300      	movs	r3, #0
 8001136:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_USART_Init(USART1, &USART_InitStruct);
 8001138:	f107 0314 	add.w	r3, r7, #20
 800113c:	4619      	mov	r1, r3
 800113e:	4809      	ldr	r0, [pc, #36]	@ (8001164 <MX_USART1_UART_Init+0xcc>)
 8001140:	f001 f96a 	bl	8002418 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8001144:	4807      	ldr	r0, [pc, #28]	@ (8001164 <MX_USART1_UART_Init+0xcc>)
 8001146:	f7ff fce3 	bl	8000b10 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 800114a:	4806      	ldr	r0, [pc, #24]	@ (8001164 <MX_USART1_UART_Init+0xcc>)
 800114c:	f7ff fcd1 	bl	8000af2 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001150:	bf00      	nop
 8001152:	3730      	adds	r7, #48	@ 0x30
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	04020002 	.word	0x04020002
 800115c:	40010800 	.word	0x40010800
 8001160:	04040004 	.word	0x04040004
 8001164:	40013800 	.word	0x40013800

08001168 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 800116c:	2001      	movs	r0, #1
 800116e:	f7ff fb8b 	bl	8000888 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8001172:	f7ff f88b 	bl	800028c <__NVIC_GetPriorityGrouping>
 8001176:	4603      	mov	r3, r0
 8001178:	2200      	movs	r2, #0
 800117a:	2101      	movs	r1, #1
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff f8d9 	bl	8000334 <NVIC_EncodePriority>
 8001182:	4603      	mov	r3, r0
 8001184:	4619      	mov	r1, r3
 8001186:	200b      	movs	r0, #11
 8001188:	f7ff f8aa 	bl	80002e0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800118c:	200b      	movs	r0, #11
 800118e:	f7ff f88b 	bl	80002a8 <__NVIC_EnableIRQ>

}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
	...

08001198 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b088      	sub	sp, #32
 800119c:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800119e:	f107 0318 	add.w	r3, r7, #24
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a8:	1d3b      	adds	r3, r7, #4
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	609a      	str	r2, [r3, #8]
 80011b2:	60da      	str	r2, [r3, #12]
 80011b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 80011b6:	2020      	movs	r0, #32
 80011b8:	f7ff fb96 	bl	80008e8 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80011bc:	2004      	movs	r0, #4
 80011be:	f7ff fb93 	bl	80008e8 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 80011c2:	2008      	movs	r0, #8
 80011c4:	f7ff fb90 	bl	80008e8 <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2);
 80011c8:	f240 7107 	movw	r1, #1799	@ 0x707
 80011cc:	4815      	ldr	r0, [pc, #84]	@ (8001224 <MX_GPIO_Init+0x8c>)
 80011ce:	f7ff fce6 	bl	8000b9e <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTA, LL_GPIO_AF_EXTI_LINE4);
 80011d2:	4915      	ldr	r1, [pc, #84]	@ (8001228 <MX_GPIO_Init+0x90>)
 80011d4:	2000      	movs	r0, #0
 80011d6:	f7ff fd01 	bl	8000bdc <LL_GPIO_AF_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_4;
 80011da:	2310      	movs	r3, #16
 80011dc:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 80011de:	2301      	movs	r3, #1
 80011e0:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80011e2:	2300      	movs	r3, #0
 80011e4:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80011e6:	2301      	movs	r3, #1
 80011e8:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 80011ea:	f107 0318 	add.w	r3, r7, #24
 80011ee:	4618      	mov	r0, r3
 80011f0:	f000 f9d6 	bl	80015a0 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_4, LL_GPIO_MODE_FLOATING);
 80011f4:	2204      	movs	r2, #4
 80011f6:	f241 0110 	movw	r1, #4112	@ 0x1010
 80011fa:	480c      	ldr	r0, [pc, #48]	@ (800122c <MX_GPIO_Init+0x94>)
 80011fc:	f7ff fc9d 	bl	8000b3a <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2;
 8001200:	f240 7307 	movw	r3, #1799	@ 0x707
 8001204:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001206:	2301      	movs	r3, #1
 8001208:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800120a:	2302      	movs	r3, #2
 800120c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001212:	1d3b      	adds	r3, r7, #4
 8001214:	4619      	mov	r1, r3
 8001216:	4803      	ldr	r0, [pc, #12]	@ (8001224 <MX_GPIO_Init+0x8c>)
 8001218:	f000 faf9 	bl	800180e <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800121c:	bf00      	nop
 800121e:	3720      	adds	r7, #32
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40010c00 	.word	0x40010c00
 8001228:	000f0001 	.word	0x000f0001
 800122c:	40010800 	.word	0x40010800

08001230 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001234:	bf00      	nop
 8001236:	e7fd      	b.n	8001234 <NMI_Handler+0x4>

08001238 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800123c:	bf00      	nop
 800123e:	e7fd      	b.n	800123c <HardFault_Handler+0x4>

08001240 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001244:	bf00      	nop
 8001246:	e7fd      	b.n	8001244 <MemManage_Handler+0x4>

08001248 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800124c:	bf00      	nop
 800124e:	e7fd      	b.n	800124c <BusFault_Handler+0x4>

08001250 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001254:	bf00      	nop
 8001256:	e7fd      	b.n	8001254 <UsageFault_Handler+0x4>

08001258 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	bc80      	pop	{r7}
 8001262:	4770      	bx	lr

08001264 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001268:	bf00      	nop
 800126a:	46bd      	mov	sp, r7
 800126c:	bc80      	pop	{r7}
 800126e:	4770      	bx	lr

08001270 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	bc80      	pop	{r7}
 800127a:	4770      	bx	lr

0800127c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001280:	bf00      	nop
 8001282:	46bd      	mov	sp, r7
 8001284:	bc80      	pop	{r7}
 8001286:	4770      	bx	lr

08001288 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	bc80      	pop	{r7}
 8001292:	4770      	bx	lr

08001294 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	bc80      	pop	{r7}
 800129e:	4770      	bx	lr

080012a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012a4:	bf00      	nop
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bc80      	pop	{r7}
 80012aa:	4770      	bx	lr

080012ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012ac:	f7ff fff8 	bl	80012a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012b0:	480b      	ldr	r0, [pc, #44]	@ (80012e0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80012b2:	490c      	ldr	r1, [pc, #48]	@ (80012e4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80012b4:	4a0c      	ldr	r2, [pc, #48]	@ (80012e8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80012b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012b8:	e002      	b.n	80012c0 <LoopCopyDataInit>

080012ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012be:	3304      	adds	r3, #4

080012c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012c4:	d3f9      	bcc.n	80012ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012c6:	4a09      	ldr	r2, [pc, #36]	@ (80012ec <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80012c8:	4c09      	ldr	r4, [pc, #36]	@ (80012f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012cc:	e001      	b.n	80012d2 <LoopFillZerobss>

080012ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012d0:	3204      	adds	r2, #4

080012d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012d4:	d3fb      	bcc.n	80012ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012d6:	f001 f93d 	bl	8002554 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012da:	f7ff fcad 	bl	8000c38 <main>
  bx lr
 80012de:	4770      	bx	lr
  ldr r0, =_sdata
 80012e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012e4:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80012e8:	080025ec 	.word	0x080025ec
  ldr r2, =_sbss
 80012ec:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80012f0:	20000140 	.word	0x20000140

080012f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012f4:	e7fe      	b.n	80012f4 <ADC1_2_IRQHandler>

080012f6 <LL_ADC_REG_SetSequencerLength>:
{
 80012f6:	b480      	push	{r7}
 80012f8:	b083      	sub	sp, #12
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
 80012fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001304:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	431a      	orrs	r2, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8001310:	bf00      	nop
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	bc80      	pop	{r7}
 8001318:	4770      	bx	lr

0800131a <LL_ADC_IsEnabled>:
  * @rmtoll CR2      ADON           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800131a:	b480      	push	{r7}
 800131c:	b083      	sub	sp, #12
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	2b01      	cmp	r3, #1
 800132c:	bf0c      	ite	eq
 800132e:	2301      	moveq	r3, #1
 8001330:	2300      	movne	r3, #0
 8001332:	b2db      	uxtb	r3, r3
}
 8001334:	4618      	mov	r0, r3
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	bc80      	pop	{r7}
 800133c:	4770      	bx	lr
	...

08001340 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8001340:	b590      	push	{r4, r7, lr}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800134a:	2300      	movs	r3, #0
 800134c:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 800134e:	4813      	ldr	r0, [pc, #76]	@ (800139c <LL_ADC_CommonInit+0x5c>)
 8001350:	f7ff ffe3 	bl	800131a <LL_ADC_IsEnabled>
 8001354:	4604      	mov	r4, r0
 8001356:	4812      	ldr	r0, [pc, #72]	@ (80013a0 <LL_ADC_CommonInit+0x60>)
 8001358:	f7ff ffdf 	bl	800131a <LL_ADC_IsEnabled>
 800135c:	4603      	mov	r3, r0
 800135e:	4323      	orrs	r3, r4
 8001360:	2b00      	cmp	r3, #0
 8001362:	d114      	bne.n	800138e <LL_ADC_CommonInit+0x4e>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d009      	beq.n	8001380 <LL_ADC_CommonInit+0x40>
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	431a      	orrs	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	e008      	b.n	8001392 <LL_ADC_CommonInit+0x52>
                 ADC_CommonInitStruct->Multimode
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	605a      	str	r2, [r3, #4]
 800138c:	e001      	b.n	8001392 <LL_ADC_CommonInit+0x52>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8001392:	7bfb      	ldrb	r3, [r7, #15]
}
 8001394:	4618      	mov	r0, r3
 8001396:	3714      	adds	r7, #20
 8001398:	46bd      	mov	sp, r7
 800139a:	bd90      	pop	{r4, r7, pc}
 800139c:	40012400 	.word	0x40012400
 80013a0:	40012800 	.word	0x40012800

080013a4 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80013ae:	2300      	movs	r3, #0
 80013b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f7ff ffb1 	bl	800131a <LL_ADC_IsEnabled>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d112      	bne.n	80013e4 <LL_ADC_Init+0x40>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	431a      	orrs	r2, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	605a      	str	r2, [r3, #4]
                 ADC_CR1_SCAN
              ,
                 ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	431a      	orrs	r2, r3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	609a      	str	r2, [r3, #8]
 80013e2:	e001      	b.n	80013e8 <LL_ADC_Init+0x44>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80013e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b084      	sub	sp, #16
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
 80013fa:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80013fc:	2300      	movs	r3, #0
 80013fe:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f7ff ff8a 	bl	800131a <LL_ADC_IsEnabled>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d131      	bne.n	8001470 <LL_ADC_REG_Init+0x7e>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 series, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d00c      	beq.n	800142e <LL_ADC_REG_Init+0x3c>
    {
      MODIFY_REG(ADCx->CR1,
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	6859      	ldr	r1, [r3, #4]
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	430b      	orrs	r3, r1
 8001426:	431a      	orrs	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	605a      	str	r2, [r3, #4]
 800142c:	e008      	b.n	8001440 <LL_ADC_REG_Init+0x4e>
                 | ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	431a      	orrs	r2, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	605a      	str	r2, [r3, #4]
                   ADC_REG_InitStruct->SequencerLength
                 | LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	f423 2360 	bic.w	r3, r3, #917504	@ 0xe0000
 8001448:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800144c:	683a      	ldr	r2, [r7, #0]
 800144e:	6811      	ldr	r1, [r2, #0]
 8001450:	683a      	ldr	r2, [r7, #0]
 8001452:	68d2      	ldr	r2, [r2, #12]
 8001454:	4311      	orrs	r1, r2
 8001456:	683a      	ldr	r2, [r7, #0]
 8001458:	6912      	ldr	r2, [r2, #16]
 800145a:	430a      	orrs	r2, r1
 800145c:	431a      	orrs	r2, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	4619      	mov	r1, r3
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f7ff ff44 	bl	80012f6 <LL_ADC_REG_SetSequencerLength>
 800146e:	e001      	b.n	8001474 <LL_ADC_REG_Init+0x82>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8001474:	7bfb      	ldrb	r3, [r7, #15]
}
 8001476:	4618      	mov	r0, r3
 8001478:	3710      	adds	r7, #16
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
	...

08001480 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8001488:	4b05      	ldr	r3, [pc, #20]	@ (80014a0 <LL_EXTI_EnableIT_0_31+0x20>)
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	4904      	ldr	r1, [pc, #16]	@ (80014a0 <LL_EXTI_EnableIT_0_31+0x20>)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4313      	orrs	r3, r2
 8001492:	600b      	str	r3, [r1, #0]
}
 8001494:	bf00      	nop
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	bc80      	pop	{r7}
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	40010400 	.word	0x40010400

080014a4 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80014ac:	4b05      	ldr	r3, [pc, #20]	@ (80014c4 <LL_EXTI_DisableIT_0_31+0x20>)
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	43db      	mvns	r3, r3
 80014b4:	4903      	ldr	r1, [pc, #12]	@ (80014c4 <LL_EXTI_DisableIT_0_31+0x20>)
 80014b6:	4013      	ands	r3, r2
 80014b8:	600b      	str	r3, [r1, #0]
}
 80014ba:	bf00      	nop
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	bc80      	pop	{r7}
 80014c2:	4770      	bx	lr
 80014c4:	40010400 	.word	0x40010400

080014c8 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 80014d0:	4b05      	ldr	r3, [pc, #20]	@ (80014e8 <LL_EXTI_EnableEvent_0_31+0x20>)
 80014d2:	685a      	ldr	r2, [r3, #4]
 80014d4:	4904      	ldr	r1, [pc, #16]	@ (80014e8 <LL_EXTI_EnableEvent_0_31+0x20>)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4313      	orrs	r3, r2
 80014da:	604b      	str	r3, [r1, #4]

}
 80014dc:	bf00      	nop
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bc80      	pop	{r7}
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	40010400 	.word	0x40010400

080014ec <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 80014f4:	4b05      	ldr	r3, [pc, #20]	@ (800150c <LL_EXTI_DisableEvent_0_31+0x20>)
 80014f6:	685a      	ldr	r2, [r3, #4]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	43db      	mvns	r3, r3
 80014fc:	4903      	ldr	r1, [pc, #12]	@ (800150c <LL_EXTI_DisableEvent_0_31+0x20>)
 80014fe:	4013      	ands	r3, r2
 8001500:	604b      	str	r3, [r1, #4]
}
 8001502:	bf00      	nop
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	bc80      	pop	{r7}
 800150a:	4770      	bx	lr
 800150c:	40010400 	.word	0x40010400

08001510 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8001518:	4b05      	ldr	r3, [pc, #20]	@ (8001530 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800151a:	689a      	ldr	r2, [r3, #8]
 800151c:	4904      	ldr	r1, [pc, #16]	@ (8001530 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4313      	orrs	r3, r2
 8001522:	608b      	str	r3, [r1, #8]

}
 8001524:	bf00      	nop
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	bc80      	pop	{r7}
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	40010400 	.word	0x40010400

08001534 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 800153c:	4b05      	ldr	r3, [pc, #20]	@ (8001554 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 800153e:	689a      	ldr	r2, [r3, #8]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	43db      	mvns	r3, r3
 8001544:	4903      	ldr	r1, [pc, #12]	@ (8001554 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8001546:	4013      	ands	r3, r2
 8001548:	608b      	str	r3, [r1, #8]

}
 800154a:	bf00      	nop
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	bc80      	pop	{r7}
 8001552:	4770      	bx	lr
 8001554:	40010400 	.word	0x40010400

08001558 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8001560:	4b05      	ldr	r3, [pc, #20]	@ (8001578 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001562:	68da      	ldr	r2, [r3, #12]
 8001564:	4904      	ldr	r1, [pc, #16]	@ (8001578 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4313      	orrs	r3, r2
 800156a:	60cb      	str	r3, [r1, #12]
}
 800156c:	bf00      	nop
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	bc80      	pop	{r7}
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	40010400 	.word	0x40010400

0800157c <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8001584:	4b05      	ldr	r3, [pc, #20]	@ (800159c <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8001586:	68da      	ldr	r2, [r3, #12]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	43db      	mvns	r3, r3
 800158c:	4903      	ldr	r1, [pc, #12]	@ (800159c <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 800158e:	4013      	ands	r3, r2
 8001590:	60cb      	str	r3, [r1, #12]
}
 8001592:	bf00      	nop
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	bc80      	pop	{r7}
 800159a:	4770      	bx	lr
 800159c:	40010400 	.word	0x40010400

080015a0 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 80015a8:	2300      	movs	r3, #0
 80015aa:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	791b      	ldrb	r3, [r3, #4]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d065      	beq.n	8001680 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d06b      	beq.n	8001694 <LL_EXTI_Init+0xf4>
    {
      switch (EXTI_InitStruct->Mode)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	795b      	ldrb	r3, [r3, #5]
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d01c      	beq.n	80015fe <LL_EXTI_Init+0x5e>
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	dc25      	bgt.n	8001614 <LL_EXTI_Init+0x74>
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d002      	beq.n	80015d2 <LL_EXTI_Init+0x32>
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d00b      	beq.n	80015e8 <LL_EXTI_Init+0x48>
 80015d0:	e020      	b.n	8001614 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff ff88 	bl	80014ec <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff ff4d 	bl	8001480 <LL_EXTI_EnableIT_0_31>
          break;
 80015e6:	e018      	b.n	800161a <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7ff ff59 	bl	80014a4 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff ff66 	bl	80014c8 <LL_EXTI_EnableEvent_0_31>
          break;
 80015fc:	e00d      	b.n	800161a <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff ff3c 	bl	8001480 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff ff5b 	bl	80014c8 <LL_EXTI_EnableEvent_0_31>
          break;
 8001612:	e002      	b.n	800161a <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	73fb      	strb	r3, [r7, #15]
          break;
 8001618:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	799b      	ldrb	r3, [r3, #6]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d038      	beq.n	8001694 <LL_EXTI_Init+0xf4>
      {
        switch (EXTI_InitStruct->Trigger)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	799b      	ldrb	r3, [r3, #6]
 8001626:	2b03      	cmp	r3, #3
 8001628:	d01c      	beq.n	8001664 <LL_EXTI_Init+0xc4>
 800162a:	2b03      	cmp	r3, #3
 800162c:	dc25      	bgt.n	800167a <LL_EXTI_Init+0xda>
 800162e:	2b01      	cmp	r3, #1
 8001630:	d002      	beq.n	8001638 <LL_EXTI_Init+0x98>
 8001632:	2b02      	cmp	r3, #2
 8001634:	d00b      	beq.n	800164e <LL_EXTI_Init+0xae>
 8001636:	e020      	b.n	800167a <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff ff9d 	bl	800157c <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff ff62 	bl	8001510 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800164c:	e022      	b.n	8001694 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff ff6e 	bl	8001534 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff ff7b 	bl	8001558 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001662:	e017      	b.n	8001694 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff ff51 	bl	8001510 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4618      	mov	r0, r3
 8001674:	f7ff ff70 	bl	8001558 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001678:	e00c      	b.n	8001694 <LL_EXTI_Init+0xf4>
          default:
            status = ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	73fb      	strb	r3, [r7, #15]
            break;
 800167e:	e009      	b.n	8001694 <LL_EXTI_Init+0xf4>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff ff0d 	bl	80014a4 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff ff2c 	bl	80014ec <LL_EXTI_DisableEvent_0_31>
  }
  return status;
 8001694:	7bfb      	ldrb	r3, [r7, #15]
}
 8001696:	4618      	mov	r0, r3
 8001698:	3710      	adds	r7, #16
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <LL_GPIO_SetPinMode>:
{
 800169e:	b490      	push	{r4, r7}
 80016a0:	b088      	sub	sp, #32
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	60f8      	str	r0, [r7, #12]
 80016a6:	60b9      	str	r1, [r7, #8]
 80016a8:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	461a      	mov	r2, r3
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	0e1b      	lsrs	r3, r3, #24
 80016b2:	4413      	add	r3, r2
 80016b4:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 80016b6:	6822      	ldr	r2, [r4, #0]
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	fa93 f3a3 	rbit	r3, r3
 80016c2:	613b      	str	r3, [r7, #16]
  return result;
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	fab3 f383 	clz	r3, r3
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	210f      	movs	r1, #15
 80016d0:	fa01 f303 	lsl.w	r3, r1, r3
 80016d4:	43db      	mvns	r3, r3
 80016d6:	401a      	ands	r2, r3
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	fa93 f3a3 	rbit	r3, r3
 80016e2:	61bb      	str	r3, [r7, #24]
  return result;
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	fab3 f383 	clz	r3, r3
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	6879      	ldr	r1, [r7, #4]
 80016f0:	fa01 f303 	lsl.w	r3, r1, r3
 80016f4:	4313      	orrs	r3, r2
 80016f6:	6023      	str	r3, [r4, #0]
}
 80016f8:	bf00      	nop
 80016fa:	3720      	adds	r7, #32
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bc90      	pop	{r4, r7}
 8001700:	4770      	bx	lr

08001702 <LL_GPIO_SetPinSpeed>:
{
 8001702:	b490      	push	{r4, r7}
 8001704:	b088      	sub	sp, #32
 8001706:	af00      	add	r7, sp, #0
 8001708:	60f8      	str	r0, [r7, #12]
 800170a:	60b9      	str	r1, [r7, #8]
 800170c:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	461a      	mov	r2, r3
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	0e1b      	lsrs	r3, r3, #24
 8001716:	4413      	add	r3, r2
 8001718:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 800171a:	6822      	ldr	r2, [r4, #0]
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	fa93 f3a3 	rbit	r3, r3
 8001726:	613b      	str	r3, [r7, #16]
  return result;
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	fab3 f383 	clz	r3, r3
 800172e:	b2db      	uxtb	r3, r3
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	2103      	movs	r1, #3
 8001734:	fa01 f303 	lsl.w	r3, r1, r3
 8001738:	43db      	mvns	r3, r3
 800173a:	401a      	ands	r2, r3
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	fa93 f3a3 	rbit	r3, r3
 8001746:	61bb      	str	r3, [r7, #24]
  return result;
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	fab3 f383 	clz	r3, r3
 800174e:	b2db      	uxtb	r3, r3
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	6879      	ldr	r1, [r7, #4]
 8001754:	fa01 f303 	lsl.w	r3, r1, r3
 8001758:	4313      	orrs	r3, r2
 800175a:	6023      	str	r3, [r4, #0]
}
 800175c:	bf00      	nop
 800175e:	3720      	adds	r7, #32
 8001760:	46bd      	mov	sp, r7
 8001762:	bc90      	pop	{r4, r7}
 8001764:	4770      	bx	lr

08001766 <LL_GPIO_SetPinOutputType>:
{
 8001766:	b490      	push	{r4, r7}
 8001768:	b088      	sub	sp, #32
 800176a:	af00      	add	r7, sp, #0
 800176c:	60f8      	str	r0, [r7, #12]
 800176e:	60b9      	str	r1, [r7, #8]
 8001770:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	461a      	mov	r2, r3
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	0e1b      	lsrs	r3, r3, #24
 800177a:	4413      	add	r3, r2
 800177c:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 800177e:	6822      	ldr	r2, [r4, #0]
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	fa93 f3a3 	rbit	r3, r3
 800178a:	613b      	str	r3, [r7, #16]
  return result;
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	fab3 f383 	clz	r3, r3
 8001792:	b2db      	uxtb	r3, r3
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	2104      	movs	r1, #4
 8001798:	fa01 f303 	lsl.w	r3, r1, r3
 800179c:	43db      	mvns	r3, r3
 800179e:	401a      	ands	r2, r3
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	fa93 f3a3 	rbit	r3, r3
 80017aa:	61bb      	str	r3, [r7, #24]
  return result;
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	fab3 f383 	clz	r3, r3
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	6879      	ldr	r1, [r7, #4]
 80017b8:	fa01 f303 	lsl.w	r3, r1, r3
 80017bc:	4313      	orrs	r3, r2
 80017be:	6023      	str	r3, [r4, #0]
}
 80017c0:	bf00      	nop
 80017c2:	3720      	adds	r7, #32
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bc90      	pop	{r4, r7}
 80017c8:	4770      	bx	lr

080017ca <LL_GPIO_SetPinPull>:
{
 80017ca:	b480      	push	{r7}
 80017cc:	b087      	sub	sp, #28
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	60f8      	str	r0, [r7, #12]
 80017d2:	60b9      	str	r1, [r7, #8]
 80017d4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	68da      	ldr	r2, [r3, #12]
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	0a1b      	lsrs	r3, r3, #8
 80017de:	43db      	mvns	r3, r3
 80017e0:	401a      	ands	r2, r3
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	0a1b      	lsrs	r3, r3, #8
 80017e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	fa93 f3a3 	rbit	r3, r3
 80017ee:	613b      	str	r3, [r7, #16]
  return result;
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	fab3 f383 	clz	r3, r3
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	4619      	mov	r1, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	408b      	lsls	r3, r1
 80017fe:	431a      	orrs	r2, r3
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	60da      	str	r2, [r3, #12]
}
 8001804:	bf00      	nop
 8001806:	371c      	adds	r7, #28
 8001808:	46bd      	mov	sp, r7
 800180a:	bc80      	pop	{r7}
 800180c:	4770      	bx	lr

0800180e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b088      	sub	sp, #32
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
 8001816:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	021b      	lsls	r3, r3, #8
 800181e:	0c1b      	lsrs	r3, r3, #16
 8001820:	617b      	str	r3, [r7, #20]
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	fa93 f3a3 	rbit	r3, r3
 800182c:	60fb      	str	r3, [r7, #12]
  return result;
 800182e:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8001830:	fab3 f383 	clz	r3, r3
 8001834:	b2db      	uxtb	r3, r3
 8001836:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 8001838:	e044      	b.n	80018c4 <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 800183a:	2201      	movs	r2, #1
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	409a      	lsls	r2, r3
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	4013      	ands	r3, r2
 8001844:	2b00      	cmp	r3, #0
 8001846:	d03a      	beq.n	80018be <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	2b07      	cmp	r3, #7
 800184c:	d806      	bhi.n	800185c <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 800184e:	f240 1201 	movw	r2, #257	@ 0x101
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	61bb      	str	r3, [r7, #24]
 800185a:	e008      	b.n	800186e <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	3b08      	subs	r3, #8
 8001860:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800186c:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	2b08      	cmp	r3, #8
 8001874:	d106      	bne.n	8001884 <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	691b      	ldr	r3, [r3, #16]
 800187a:	461a      	mov	r2, r3
 800187c:	69b9      	ldr	r1, [r7, #24]
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f7ff ffa3 	bl	80017ca <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	461a      	mov	r2, r3
 800188a:	69b9      	ldr	r1, [r7, #24]
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f7ff ff06 	bl	800169e <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	2b01      	cmp	r3, #1
 8001898:	d003      	beq.n	80018a2 <LL_GPIO_Init+0x94>
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	2b09      	cmp	r3, #9
 80018a0:	d10d      	bne.n	80018be <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	461a      	mov	r2, r3
 80018a8:	69b9      	ldr	r1, [r7, #24]
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f7ff ff29 	bl	8001702 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	461a      	mov	r2, r3
 80018b6:	69b9      	ldr	r1, [r7, #24]
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f7ff ff54 	bl	8001766 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	3301      	adds	r3, #1
 80018c2:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 80018c4:	697a      	ldr	r2, [r7, #20]
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	fa22 f303 	lsr.w	r3, r2, r3
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d1b4      	bne.n	800183a <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3720      	adds	r7, #32
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <LL_I2C_Enable>:
{
 80018da:	b480      	push	{r7}
 80018dc:	b083      	sub	sp, #12
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f043 0201 	orr.w	r2, r3, #1
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	601a      	str	r2, [r3, #0]
}
 80018ee:	bf00      	nop
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bc80      	pop	{r7}
 80018f6:	4770      	bx	lr

080018f8 <LL_I2C_Disable>:
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f023 0201 	bic.w	r2, r3, #1
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	601a      	str	r2, [r3, #0]
}
 800190c:	bf00      	nop
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	bc80      	pop	{r7}
 8001914:	4770      	bx	lr

08001916 <LL_I2C_SetOwnAddress1>:
{
 8001916:	b480      	push	{r7}
 8001918:	b085      	sub	sp, #20
 800191a:	af00      	add	r7, sp, #0
 800191c:	60f8      	str	r0, [r7, #12]
 800191e:	60b9      	str	r1, [r7, #8]
 8001920:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800192a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800192e:	68b9      	ldr	r1, [r7, #8]
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	430a      	orrs	r2, r1
 8001934:	431a      	orrs	r2, r3
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	609a      	str	r2, [r3, #8]
}
 800193a:	bf00      	nop
 800193c:	3714      	adds	r7, #20
 800193e:	46bd      	mov	sp, r7
 8001940:	bc80      	pop	{r7}
 8001942:	4770      	bx	lr

08001944 <LL_I2C_ConfigSpeed>:
  *         @arg @ref LL_I2C_DUTYCYCLE_16_9
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigSpeed(I2C_TypeDef *I2Cx, uint32_t PeriphClock, uint32_t ClockSpeed,
                                        uint32_t DutyCycle)
{
 8001944:	b480      	push	{r7}
 8001946:	b087      	sub	sp, #28
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
 8001950:	603b      	str	r3, [r7, #0]
  uint32_t freqrange = 0x0U;
 8001952:	2300      	movs	r3, #0
 8001954:	613b      	str	r3, [r7, #16]
  uint32_t clockconfig = 0x0U;
 8001956:	2300      	movs	r3, #0
 8001958:	617b      	str	r3, [r7, #20]

  /* Compute frequency range */
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	4a41      	ldr	r2, [pc, #260]	@ (8001a64 <LL_I2C_ConfigSpeed+0x120>)
 800195e:	fba2 2303 	umull	r2, r3, r2, r3
 8001962:	0c9b      	lsrs	r3, r3, #18
 8001964:	613b      	str	r3, [r7, #16]

  /* Configure I2Cx: Frequency range register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	431a      	orrs	r2, r3
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	605a      	str	r2, [r3, #4]

  /* Configure I2Cx: Rise Time register */
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	6a1b      	ldr	r3, [r3, #32]
 800197a:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4939      	ldr	r1, [pc, #228]	@ (8001a68 <LL_I2C_ConfigSpeed+0x124>)
 8001982:	428b      	cmp	r3, r1
 8001984:	d802      	bhi.n	800198c <LL_I2C_ConfigSpeed+0x48>
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	3301      	adds	r3, #1
 800198a:	e009      	b.n	80019a0 <LL_I2C_ConfigSpeed+0x5c>
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001992:	fb01 f303 	mul.w	r3, r1, r3
 8001996:	4935      	ldr	r1, [pc, #212]	@ (8001a6c <LL_I2C_ConfigSpeed+0x128>)
 8001998:	fba1 1303 	umull	r1, r3, r1, r3
 800199c:	099b      	lsrs	r3, r3, #6
 800199e:	3301      	adds	r3, #1
 80019a0:	431a      	orrs	r2, r3
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	621a      	str	r2, [r3, #32]

  /* Configure Speed mode, Duty Cycle and Clock control register value */
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a2f      	ldr	r2, [pc, #188]	@ (8001a68 <LL_I2C_ConfigSpeed+0x124>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d939      	bls.n	8001a22 <LL_I2C_ConfigSpeed+0xde>
  {
    /* Set Speed mode at fast and duty cycle for Clock Speed request in fast clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d117      	bne.n	80019e4 <LL_I2C_ConfigSpeed+0xa0>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	4613      	mov	r3, r2
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	4413      	add	r3, r2
 80019bc:	68ba      	ldr	r2, [r7, #8]
 80019be:	fbb2 f3f3 	udiv	r3, r2, r3
 80019c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d009      	beq.n	80019de <LL_I2C_ConfigSpeed+0x9a>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	4613      	mov	r3, r2
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	4413      	add	r3, r2
 80019d2:	68ba      	ldr	r2, [r7, #8]
 80019d4:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80019d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80019dc:	e01d      	b.n	8001a1a <LL_I2C_ConfigSpeed+0xd6>
 80019de:	f248 0301 	movw	r3, #32769	@ 0x8001
 80019e2:	e01a      	b.n	8001a1a <LL_I2C_ConfigSpeed+0xd6>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	4613      	mov	r3, r2
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	4413      	add	r3, r2
 80019ec:	009a      	lsls	r2, r3, #2
 80019ee:	4413      	add	r3, r2
 80019f0:	68ba      	ldr	r2, [r7, #8]
 80019f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d00b      	beq.n	8001a16 <LL_I2C_ConfigSpeed+0xd2>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	4613      	mov	r3, r2
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	4413      	add	r3, r2
 8001a06:	009a      	lsls	r2, r3, #2
 8001a08:	4413      	add	r3, r2
 8001a0a:	68ba      	ldr	r2, [r7, #8]
 8001a0c:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8001a10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a14:	e001      	b.n	8001a1a <LL_I2C_ConfigSpeed+0xd6>
 8001a16:	f248 0301 	movw	r3, #32769	@ 0x8001
 8001a1a:	683a      	ldr	r2, [r7, #0]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	617b      	str	r3, [r7, #20]
 8001a20:	e011      	b.n	8001a46 <LL_I2C_ConfigSpeed+0x102>
  }
  else
  {
    /* Set Speed mode at standard for Clock Speed request in standard clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	68ba      	ldr	r2, [r7, #8]
 8001a28:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a2c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001a30:	4013      	ands	r3, r2
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d005      	beq.n	8001a42 <LL_I2C_ConfigSpeed+0xfe>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8001a3a:	68ba      	ldr	r2, [r7, #8]
 8001a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a40:	e000      	b.n	8001a44 <LL_I2C_ConfigSpeed+0x100>
 8001a42:	2304      	movs	r3, #4
 8001a44:	617b      	str	r3, [r7, #20]
  }

  /* Configure I2Cx: Clock control register */
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	69db      	ldr	r3, [r3, #28]
 8001a4a:	f423 434f 	bic.w	r3, r3, #52992	@ 0xcf00
 8001a4e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001a52:	697a      	ldr	r2, [r7, #20]
 8001a54:	431a      	orrs	r2, r3
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	61da      	str	r2, [r3, #28]
}
 8001a5a:	bf00      	nop
 8001a5c:	371c      	adds	r7, #28
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bc80      	pop	{r7}
 8001a62:	4770      	bx	lr
 8001a64:	431bde83 	.word	0x431bde83
 8001a68:	000186a0 	.word	0x000186a0
 8001a6c:	10624dd3 	.word	0x10624dd3

08001a70 <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f023 021a 	bic.w	r2, r3, #26
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	431a      	orrs	r2, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	601a      	str	r2, [r3, #0]
}
 8001a8a:	bf00      	nop
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bc80      	pop	{r7}
 8001a92:	4770      	bx	lr

08001a94 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	431a      	orrs	r2, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	601a      	str	r2, [r3, #0]
}
 8001aae:	bf00      	nop
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bc80      	pop	{r7}
 8001ab6:	4770      	bx	lr

08001ab8 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f7ff ff18 	bl	80018f8 <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8001ac8:	f107 0308 	add.w	r3, r7, #8
 8001acc:	4618      	mov	r0, r3
 8001ace:	f000 f87b 	bl	8001bc8 <LL_RCC_GetSystemClocksFreq>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 8001ad2:	6939      	ldr	r1, [r7, #16]
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685a      	ldr	r2, [r3, #4]
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f7ff ff31 	bl	8001944 <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	68d9      	ldr	r1, [r3, #12]
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	695b      	ldr	r3, [r3, #20]
 8001aea:	461a      	mov	r2, r3
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f7ff ff12 	bl	8001916 <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4619      	mov	r1, r3
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f7ff ffb9 	bl	8001a70 <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f7ff feeb 	bl	80018da <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	691b      	ldr	r3, [r3, #16]
 8001b08:	4619      	mov	r1, r3
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f7ff ffc2 	bl	8001a94 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3718      	adds	r7, #24
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
	...

08001b1c <LL_RCC_GetSysClkSource>:
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001b20:	4b03      	ldr	r3, [pc, #12]	@ (8001b30 <LL_RCC_GetSysClkSource+0x14>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f003 030c 	and.w	r3, r3, #12
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bc80      	pop	{r7}
 8001b2e:	4770      	bx	lr
 8001b30:	40021000 	.word	0x40021000

08001b34 <LL_RCC_GetAHBPrescaler>:
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001b38:	4b03      	ldr	r3, [pc, #12]	@ (8001b48 <LL_RCC_GetAHBPrescaler+0x14>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr
 8001b48:	40021000 	.word	0x40021000

08001b4c <LL_RCC_GetAPB1Prescaler>:
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001b50:	4b03      	ldr	r3, [pc, #12]	@ (8001b60 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bc80      	pop	{r7}
 8001b5e:	4770      	bx	lr
 8001b60:	40021000 	.word	0x40021000

08001b64 <LL_RCC_GetAPB2Prescaler>:
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001b68:	4b03      	ldr	r3, [pc, #12]	@ (8001b78 <LL_RCC_GetAPB2Prescaler+0x14>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bc80      	pop	{r7}
 8001b76:	4770      	bx	lr
 8001b78:	40021000 	.word	0x40021000

08001b7c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8001b80:	4b03      	ldr	r3, [pc, #12]	@ (8001b90 <LL_RCC_PLL_GetMainSource+0x14>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bc80      	pop	{r7}
 8001b8e:	4770      	bx	lr
 8001b90:	40021000 	.word	0x40021000

08001b94 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8001b98:	4b03      	ldr	r3, [pc, #12]	@ (8001ba8 <LL_RCC_PLL_GetMultiplicator+0x14>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bc80      	pop	{r7}
 8001ba6:	4770      	bx	lr
 8001ba8:	40021000 	.word	0x40021000

08001bac <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 8001bb0:	4b04      	ldr	r3, [pc, #16]	@ (8001bc4 <LL_RCC_PLL_GetPrediv+0x18>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	0c5b      	lsrs	r3, r3, #17
 8001bb6:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bc80      	pop	{r7}
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	40021000 	.word	0x40021000

08001bc8 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8001bd0:	f000 f820 	bl	8001c14 <RCC_GetSystemClockFreq>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f000 f83e 	bl	8001c60 <RCC_GetHCLKClockFreq>
 8001be4:	4602      	mov	r2, r0
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f000 f84c 	bl	8001c8c <RCC_GetPCLK1ClockFreq>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f000 f858 	bl	8001cb4 <RCC_GetPCLK2ClockFreq>
 8001c04:	4602      	mov	r2, r0
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	60da      	str	r2, [r3, #12]
}
 8001c0a:	bf00      	nop
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
	...

08001c14 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8001c1e:	f7ff ff7d 	bl	8001b1c <LL_RCC_GetSysClkSource>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b08      	cmp	r3, #8
 8001c26:	d00c      	beq.n	8001c42 <RCC_GetSystemClockFreq+0x2e>
 8001c28:	2b08      	cmp	r3, #8
 8001c2a:	d80e      	bhi.n	8001c4a <RCC_GetSystemClockFreq+0x36>
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d002      	beq.n	8001c36 <RCC_GetSystemClockFreq+0x22>
 8001c30:	2b04      	cmp	r3, #4
 8001c32:	d003      	beq.n	8001c3c <RCC_GetSystemClockFreq+0x28>
 8001c34:	e009      	b.n	8001c4a <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8001c36:	4b09      	ldr	r3, [pc, #36]	@ (8001c5c <RCC_GetSystemClockFreq+0x48>)
 8001c38:	607b      	str	r3, [r7, #4]
      break;
 8001c3a:	e009      	b.n	8001c50 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8001c3c:	4b07      	ldr	r3, [pc, #28]	@ (8001c5c <RCC_GetSystemClockFreq+0x48>)
 8001c3e:	607b      	str	r3, [r7, #4]
      break;
 8001c40:	e006      	b.n	8001c50 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8001c42:	f000 f84b 	bl	8001cdc <RCC_PLL_GetFreqDomain_SYS>
 8001c46:	6078      	str	r0, [r7, #4]
      break;
 8001c48:	e002      	b.n	8001c50 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 8001c4a:	4b04      	ldr	r3, [pc, #16]	@ (8001c5c <RCC_GetSystemClockFreq+0x48>)
 8001c4c:	607b      	str	r3, [r7, #4]
      break;
 8001c4e:	bf00      	nop
  }

  return frequency;
 8001c50:	687b      	ldr	r3, [r7, #4]
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	007a1200 	.word	0x007a1200

08001c60 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001c68:	f7ff ff64 	bl	8001b34 <LL_RCC_GetAHBPrescaler>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	091b      	lsrs	r3, r3, #4
 8001c70:	f003 030f 	and.w	r3, r3, #15
 8001c74:	4a04      	ldr	r2, [pc, #16]	@ (8001c88 <RCC_GetHCLKClockFreq+0x28>)
 8001c76:	5cd3      	ldrb	r3, [r2, r3]
 8001c78:	461a      	mov	r2, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	40d3      	lsrs	r3, r2
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	080025cc 	.word	0x080025cc

08001c8c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001c94:	f7ff ff5a 	bl	8001b4c <LL_RCC_GetAPB1Prescaler>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	0a1b      	lsrs	r3, r3, #8
 8001c9c:	4a04      	ldr	r2, [pc, #16]	@ (8001cb0 <RCC_GetPCLK1ClockFreq+0x24>)
 8001c9e:	5cd3      	ldrb	r3, [r2, r3]
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	40d3      	lsrs	r3, r2
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	080025dc 	.word	0x080025dc

08001cb4 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8001cbc:	f7ff ff52 	bl	8001b64 <LL_RCC_GetAPB2Prescaler>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	0adb      	lsrs	r3, r3, #11
 8001cc4:	4a04      	ldr	r2, [pc, #16]	@ (8001cd8 <RCC_GetPCLK2ClockFreq+0x24>)
 8001cc6:	5cd3      	ldrb	r3, [r2, r3]
 8001cc8:	461a      	mov	r2, r3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	40d3      	lsrs	r3, r2
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	080025dc 	.word	0x080025dc

08001cdc <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	607b      	str	r3, [r7, #4]
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8001cea:	f7ff ff47 	bl	8001b7c <LL_RCC_PLL_GetMainSource>
 8001cee:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d004      	beq.n	8001d00 <RCC_PLL_GetFreqDomain_SYS+0x24>
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cfc:	d003      	beq.n	8001d06 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8001cfe:	e00b      	b.n	8001d18 <RCC_PLL_GetFreqDomain_SYS+0x3c>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8001d00:	4b0d      	ldr	r3, [pc, #52]	@ (8001d38 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8001d02:	607b      	str	r3, [r7, #4]
      break;
 8001d04:	e00b      	b.n	8001d1e <RCC_PLL_GetFreqDomain_SYS+0x42>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 8001d06:	f7ff ff51 	bl	8001bac <LL_RCC_PLL_GetPrediv>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	4a0b      	ldr	r2, [pc, #44]	@ (8001d3c <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8001d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d14:	607b      	str	r3, [r7, #4]
      break;
 8001d16:	e002      	b.n	8001d1e <RCC_PLL_GetFreqDomain_SYS+0x42>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 8001d18:	4b07      	ldr	r3, [pc, #28]	@ (8001d38 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8001d1a:	607b      	str	r3, [r7, #4]
      break;
 8001d1c:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 8001d1e:	f7ff ff39 	bl	8001b94 <LL_RCC_PLL_GetMultiplicator>
 8001d22:	4603      	mov	r3, r0
 8001d24:	0c9b      	lsrs	r3, r3, #18
 8001d26:	3302      	adds	r3, #2
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	fb02 f303 	mul.w	r3, r2, r3
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	003d0900 	.word	0x003d0900
 8001d3c:	007a1200 	.word	0x007a1200

08001d40 <LL_TIM_SetPrescaler>:
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	683a      	ldr	r2, [r7, #0]
 8001d4e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001d50:	bf00      	nop
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bc80      	pop	{r7}
 8001d58:	4770      	bx	lr

08001d5a <LL_TIM_SetAutoReload>:
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	b083      	sub	sp, #12
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
 8001d62:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	683a      	ldr	r2, [r7, #0]
 8001d68:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8001d6a:	bf00      	nop
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bc80      	pop	{r7}
 8001d72:	4770      	bx	lr

08001d74 <LL_TIM_SetRepetitionCounter>:
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	683a      	ldr	r2, [r7, #0]
 8001d82:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bc80      	pop	{r7}
 8001d8c:	4770      	bx	lr

08001d8e <LL_TIM_OC_SetCompareCH1>:
{
 8001d8e:	b480      	push	{r7}
 8001d90:	b083      	sub	sp, #12
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
 8001d96:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	683a      	ldr	r2, [r7, #0]
 8001d9c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bc80      	pop	{r7}
 8001da6:	4770      	bx	lr

08001da8 <LL_TIM_OC_SetCompareCH2>:
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	683a      	ldr	r2, [r7, #0]
 8001db6:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bc80      	pop	{r7}
 8001dc0:	4770      	bx	lr

08001dc2 <LL_TIM_OC_SetCompareCH3>:
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	b083      	sub	sp, #12
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
 8001dca:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	683a      	ldr	r2, [r7, #0]
 8001dd0:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001dd2:	bf00      	nop
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bc80      	pop	{r7}
 8001dda:	4770      	bx	lr

08001ddc <LL_TIM_OC_SetCompareCH4>:
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	683a      	ldr	r2, [r7, #0]
 8001dea:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001dec:	bf00      	nop
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bc80      	pop	{r7}
 8001df4:	4770      	bx	lr

08001df6 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8001df6:	b480      	push	{r7}
 8001df8:	b083      	sub	sp, #12
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	695b      	ldr	r3, [r3, #20]
 8001e02:	f043 0201 	orr.w	r2, r3, #1
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	615a      	str	r2, [r3, #20]
}
 8001e0a:	bf00      	nop
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bc80      	pop	{r7}
 8001e12:	4770      	bx	lr

08001e14 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4a27      	ldr	r2, [pc, #156]	@ (8001ec4 <LL_TIM_Init+0xb0>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d00b      	beq.n	8001e44 <LL_TIM_Init+0x30>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e32:	d007      	beq.n	8001e44 <LL_TIM_Init+0x30>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4a24      	ldr	r2, [pc, #144]	@ (8001ec8 <LL_TIM_Init+0xb4>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d003      	beq.n	8001e44 <LL_TIM_Init+0x30>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a23      	ldr	r2, [pc, #140]	@ (8001ecc <LL_TIM_Init+0xb8>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d106      	bne.n	8001e52 <LL_TIM_Init+0x3e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a1b      	ldr	r2, [pc, #108]	@ (8001ec4 <LL_TIM_Init+0xb0>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d00b      	beq.n	8001e72 <LL_TIM_Init+0x5e>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e60:	d007      	beq.n	8001e72 <LL_TIM_Init+0x5e>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a18      	ldr	r2, [pc, #96]	@ (8001ec8 <LL_TIM_Init+0xb4>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d003      	beq.n	8001e72 <LL_TIM_Init+0x5e>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a17      	ldr	r2, [pc, #92]	@ (8001ecc <LL_TIM_Init+0xb8>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d106      	bne.n	8001e80 <LL_TIM_Init+0x6c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	68fa      	ldr	r2, [r7, #12]
 8001e84:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f7ff ff64 	bl	8001d5a <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	881b      	ldrh	r3, [r3, #0]
 8001e96:	4619      	mov	r1, r3
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f7ff ff51 	bl	8001d40 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a08      	ldr	r2, [pc, #32]	@ (8001ec4 <LL_TIM_Init+0xb0>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d105      	bne.n	8001eb2 <LL_TIM_Init+0x9e>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	4619      	mov	r1, r3
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f7ff ff61 	bl	8001d74 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f7ff ff9f 	bl	8001df6 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40012c00 	.word	0x40012c00
 8001ec8:	40000400 	.word	0x40000400
 8001ecc:	40000800 	.word	0x40000800

08001ed0 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ee6:	d027      	beq.n	8001f38 <LL_TIM_OC_Init+0x68>
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001eee:	d82a      	bhi.n	8001f46 <LL_TIM_OC_Init+0x76>
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ef6:	d018      	beq.n	8001f2a <LL_TIM_OC_Init+0x5a>
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001efe:	d822      	bhi.n	8001f46 <LL_TIM_OC_Init+0x76>
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d003      	beq.n	8001f0e <LL_TIM_OC_Init+0x3e>
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	2b10      	cmp	r3, #16
 8001f0a:	d007      	beq.n	8001f1c <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8001f0c:	e01b      	b.n	8001f46 <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8001f0e:	6879      	ldr	r1, [r7, #4]
 8001f10:	68f8      	ldr	r0, [r7, #12]
 8001f12:	f000 f85f 	bl	8001fd4 <OC1Config>
 8001f16:	4603      	mov	r3, r0
 8001f18:	75fb      	strb	r3, [r7, #23]
      break;
 8001f1a:	e015      	b.n	8001f48 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8001f1c:	6879      	ldr	r1, [r7, #4]
 8001f1e:	68f8      	ldr	r0, [r7, #12]
 8001f20:	f000 f8be 	bl	80020a0 <OC2Config>
 8001f24:	4603      	mov	r3, r0
 8001f26:	75fb      	strb	r3, [r7, #23]
      break;
 8001f28:	e00e      	b.n	8001f48 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8001f2a:	6879      	ldr	r1, [r7, #4]
 8001f2c:	68f8      	ldr	r0, [r7, #12]
 8001f2e:	f000 f921 	bl	8002174 <OC3Config>
 8001f32:	4603      	mov	r3, r0
 8001f34:	75fb      	strb	r3, [r7, #23]
      break;
 8001f36:	e007      	b.n	8001f48 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8001f38:	6879      	ldr	r1, [r7, #4]
 8001f3a:	68f8      	ldr	r0, [r7, #12]
 8001f3c:	f000 f984 	bl	8002248 <OC4Config>
 8001f40:	4603      	mov	r3, r0
 8001f42:	75fb      	strb	r3, [r7, #23]
      break;
 8001f44:	e000      	b.n	8001f48 <LL_TIM_OC_Init+0x78>
      break;
 8001f46:	bf00      	nop
  }

  return result;
 8001f48:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3718      	adds	r7, #24
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, const LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 8001f52:	b480      	push	{r7}
 8001f54:	b085      	sub	sp, #20
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
 8001f5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001f66:	683a      	ldr	r2, [r7, #0]
 8001f68:	7b12      	ldrb	r2, [r2, #12]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001f9e:	683a      	ldr	r2, [r7, #0]
 8001fa0:	89d2      	ldrh	r2, [r2, #14]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	691b      	ldr	r3, [r3, #16]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	695b      	ldr	r3, [r3, #20]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	68fa      	ldr	r2, [r7, #12]
 8001fc6:	645a      	str	r2, [r3, #68]	@ 0x44

  return SUCCESS;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3714      	adds	r7, #20
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bc80      	pop	{r7}
 8001fd2:	4770      	bx	lr

08001fd4 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a1b      	ldr	r3, [r3, #32]
 8001fe2:	f023 0201 	bic.w	r2, r3, #1
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a1b      	ldr	r3, [r3, #32]
 8001fee:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	699b      	ldr	r3, [r3, #24]
 8001ffa:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f023 0303 	bic.w	r3, r3, #3
 8002002:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4313      	orrs	r3, r2
 8002010:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	f023 0202 	bic.w	r2, r3, #2
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	691b      	ldr	r3, [r3, #16]
 800201c:	4313      	orrs	r3, r2
 800201e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	f023 0201 	bic.w	r2, r3, #1
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	4313      	orrs	r3, r2
 800202c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a1a      	ldr	r2, [pc, #104]	@ (800209c <OC1Config+0xc8>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d11e      	bne.n	8002074 <OC1Config+0xa0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	f023 0208 	bic.w	r2, r3, #8
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	695b      	ldr	r3, [r3, #20]
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	4313      	orrs	r3, r2
 8002044:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	f023 0204 	bic.w	r2, r3, #4
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	4313      	orrs	r3, r2
 8002054:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	699b      	ldr	r3, [r3, #24]
 8002060:	4313      	orrs	r3, r2
 8002062:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	69db      	ldr	r3, [r3, #28]
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	4313      	orrs	r3, r2
 8002072:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	68fa      	ldr	r2, [r7, #12]
 800207e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	4619      	mov	r1, r3
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f7ff fe81 	bl	8001d8e <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	697a      	ldr	r2, [r7, #20]
 8002090:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002092:	2300      	movs	r3, #0
}
 8002094:	4618      	mov	r0, r3
 8002096:	3718      	adds	r7, #24
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	40012c00 	.word	0x40012c00

080020a0 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b086      	sub	sp, #24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a1b      	ldr	r3, [r3, #32]
 80020ae:	f023 0210 	bic.w	r2, r3, #16
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a1b      	ldr	r3, [r3, #32]
 80020ba:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	699b      	ldr	r3, [r3, #24]
 80020c6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80020ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	021b      	lsls	r3, r3, #8
 80020dc:	4313      	orrs	r3, r2
 80020de:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	f023 0220 	bic.w	r2, r3, #32
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	011b      	lsls	r3, r3, #4
 80020ec:	4313      	orrs	r3, r2
 80020ee:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	f023 0210 	bic.w	r2, r3, #16
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	011b      	lsls	r3, r3, #4
 80020fc:	4313      	orrs	r3, r2
 80020fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4a1b      	ldr	r2, [pc, #108]	@ (8002170 <OC2Config+0xd0>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d11f      	bne.n	8002148 <OC2Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	695b      	ldr	r3, [r3, #20]
 8002112:	019b      	lsls	r3, r3, #6
 8002114:	4313      	orrs	r3, r2
 8002116:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	019b      	lsls	r3, r3, #6
 8002124:	4313      	orrs	r3, r2
 8002126:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	699b      	ldr	r3, [r3, #24]
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	4313      	orrs	r3, r2
 8002136:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	69db      	ldr	r3, [r3, #28]
 8002142:	00db      	lsls	r3, r3, #3
 8002144:	4313      	orrs	r3, r2
 8002146:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	68fa      	ldr	r2, [r7, #12]
 8002152:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	4619      	mov	r1, r3
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f7ff fe24 	bl	8001da8 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	697a      	ldr	r2, [r7, #20]
 8002164:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002166:	2300      	movs	r3, #0
}
 8002168:	4618      	mov	r0, r3
 800216a:	3718      	adds	r7, #24
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40012c00 	.word	0x40012c00

08002174 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b086      	sub	sp, #24
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a1b      	ldr	r3, [r3, #32]
 8002182:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a1b      	ldr	r3, [r3, #32]
 800218e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	69db      	ldr	r3, [r3, #28]
 800219a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f023 0303 	bic.w	r3, r3, #3
 80021a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	691b      	ldr	r3, [r3, #16]
 80021bc:	021b      	lsls	r3, r3, #8
 80021be:	4313      	orrs	r3, r2
 80021c0:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	021b      	lsls	r3, r3, #8
 80021ce:	4313      	orrs	r3, r2
 80021d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a1b      	ldr	r2, [pc, #108]	@ (8002244 <OC3Config+0xd0>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d11f      	bne.n	800221a <OC3Config+0xa6>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	695b      	ldr	r3, [r3, #20]
 80021e4:	029b      	lsls	r3, r3, #10
 80021e6:	4313      	orrs	r3, r2
 80021e8:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	029b      	lsls	r3, r3, #10
 80021f6:	4313      	orrs	r3, r2
 80021f8:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	011b      	lsls	r3, r3, #4
 8002206:	4313      	orrs	r3, r2
 8002208:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	69db      	ldr	r3, [r3, #28]
 8002214:	015b      	lsls	r3, r3, #5
 8002216:	4313      	orrs	r3, r2
 8002218:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	693a      	ldr	r2, [r7, #16]
 800221e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	4619      	mov	r1, r3
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f7ff fdc8 	bl	8001dc2 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	697a      	ldr	r2, [r7, #20]
 8002236:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3718      	adds	r7, #24
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	40012c00 	.word	0x40012c00

08002248 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a1b      	ldr	r3, [r3, #32]
 8002256:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a1b      	ldr	r3, [r3, #32]
 8002262:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	69db      	ldr	r3, [r3, #28]
 800226e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002276:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	021b      	lsls	r3, r3, #8
 8002284:	4313      	orrs	r3, r2
 8002286:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	031b      	lsls	r3, r3, #12
 8002294:	4313      	orrs	r3, r2
 8002296:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	031b      	lsls	r3, r3, #12
 80022a4:	4313      	orrs	r3, r2
 80022a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4a0f      	ldr	r2, [pc, #60]	@ (80022e8 <OC4Config+0xa0>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d107      	bne.n	80022c0 <OC4Config+0x78>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	699b      	ldr	r3, [r3, #24]
 80022ba:	019b      	lsls	r3, r3, #6
 80022bc:	4313      	orrs	r3, r2
 80022be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	697a      	ldr	r2, [r7, #20]
 80022c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	68fa      	ldr	r2, [r7, #12]
 80022ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	4619      	mov	r1, r3
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f7ff fd82 	bl	8001ddc <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	693a      	ldr	r2, [r7, #16]
 80022dc:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80022de:	2300      	movs	r3, #0
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3718      	adds	r7, #24
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	40012c00 	.word	0x40012c00

080022ec <LL_USART_IsEnabled>:
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002300:	bf0c      	ite	eq
 8002302:	2301      	moveq	r3, #1
 8002304:	2300      	movne	r3, #0
 8002306:	b2db      	uxtb	r3, r3
}
 8002308:	4618      	mov	r0, r3
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	bc80      	pop	{r7}
 8002310:	4770      	bx	lr

08002312 <LL_USART_SetStopBitsLength>:
{
 8002312:	b480      	push	{r7}
 8002314:	b083      	sub	sp, #12
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
 800231a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	691b      	ldr	r3, [r3, #16]
 8002320:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	431a      	orrs	r2, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	611a      	str	r2, [r3, #16]
}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	bc80      	pop	{r7}
 8002334:	4770      	bx	lr

08002336 <LL_USART_SetHWFlowCtrl>:
{
 8002336:	b480      	push	{r7}
 8002338:	b083      	sub	sp, #12
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
 800233e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	695b      	ldr	r3, [r3, #20]
 8002344:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	431a      	orrs	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	615a      	str	r2, [r3, #20]
}
 8002350:	bf00      	nop
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	bc80      	pop	{r7}
 8002358:	4770      	bx	lr
	...

0800235c <LL_USART_SetBaudRate>:
{
 800235c:	b480      	push	{r7}
 800235e:	b085      	sub	sp, #20
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002368:	68ba      	ldr	r2, [r7, #8]
 800236a:	4613      	mov	r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	4413      	add	r3, r2
 8002370:	009a      	lsls	r2, r3, #2
 8002372:	441a      	add	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	fbb2 f3f3 	udiv	r3, r2, r3
 800237c:	4a25      	ldr	r2, [pc, #148]	@ (8002414 <LL_USART_SetBaudRate+0xb8>)
 800237e:	fba2 2303 	umull	r2, r3, r2, r3
 8002382:	095b      	lsrs	r3, r3, #5
 8002384:	b29b      	uxth	r3, r3
 8002386:	011b      	lsls	r3, r3, #4
 8002388:	b299      	uxth	r1, r3
 800238a:	68ba      	ldr	r2, [r7, #8]
 800238c:	4613      	mov	r3, r2
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	4413      	add	r3, r2
 8002392:	009a      	lsls	r2, r3, #2
 8002394:	441a      	add	r2, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	fbb2 f2f3 	udiv	r2, r2, r3
 800239e:	4b1d      	ldr	r3, [pc, #116]	@ (8002414 <LL_USART_SetBaudRate+0xb8>)
 80023a0:	fba3 0302 	umull	r0, r3, r3, r2
 80023a4:	095b      	lsrs	r3, r3, #5
 80023a6:	2064      	movs	r0, #100	@ 0x64
 80023a8:	fb00 f303 	mul.w	r3, r0, r3
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	011b      	lsls	r3, r3, #4
 80023b0:	3332      	adds	r3, #50	@ 0x32
 80023b2:	4a18      	ldr	r2, [pc, #96]	@ (8002414 <LL_USART_SetBaudRate+0xb8>)
 80023b4:	fba2 2303 	umull	r2, r3, r2, r3
 80023b8:	095b      	lsrs	r3, r3, #5
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	440b      	add	r3, r1
 80023c4:	b299      	uxth	r1, r3
 80023c6:	68ba      	ldr	r2, [r7, #8]
 80023c8:	4613      	mov	r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	4413      	add	r3, r2
 80023ce:	009a      	lsls	r2, r3, #2
 80023d0:	441a      	add	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	fbb2 f2f3 	udiv	r2, r2, r3
 80023da:	4b0e      	ldr	r3, [pc, #56]	@ (8002414 <LL_USART_SetBaudRate+0xb8>)
 80023dc:	fba3 0302 	umull	r0, r3, r3, r2
 80023e0:	095b      	lsrs	r3, r3, #5
 80023e2:	2064      	movs	r0, #100	@ 0x64
 80023e4:	fb00 f303 	mul.w	r3, r0, r3
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	011b      	lsls	r3, r3, #4
 80023ec:	3332      	adds	r3, #50	@ 0x32
 80023ee:	4a09      	ldr	r2, [pc, #36]	@ (8002414 <LL_USART_SetBaudRate+0xb8>)
 80023f0:	fba2 2303 	umull	r2, r3, r2, r3
 80023f4:	095b      	lsrs	r3, r3, #5
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	f003 030f 	and.w	r3, r3, #15
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	440b      	add	r3, r1
 8002400:	b29b      	uxth	r3, r3
 8002402:	461a      	mov	r2, r3
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	609a      	str	r2, [r3, #8]
}
 8002408:	bf00      	nop
 800240a:	3714      	adds	r7, #20
 800240c:	46bd      	mov	sp, r7
 800240e:	bc80      	pop	{r7}
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	51eb851f 	.word	0x51eb851f

08002418 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b088      	sub	sp, #32
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002426:	2300      	movs	r3, #0
 8002428:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f7ff ff5e 	bl	80022ec <LL_USART_IsEnabled>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d145      	bne.n	80024c2 <LL_USART_Init+0xaa>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800243e:	f023 030c 	bic.w	r3, r3, #12
 8002442:	683a      	ldr	r2, [r7, #0]
 8002444:	6851      	ldr	r1, [r2, #4]
 8002446:	683a      	ldr	r2, [r7, #0]
 8002448:	68d2      	ldr	r2, [r2, #12]
 800244a:	4311      	orrs	r1, r2
 800244c:	683a      	ldr	r2, [r7, #0]
 800244e:	6912      	ldr	r2, [r2, #16]
 8002450:	430a      	orrs	r2, r1
 8002452:	431a      	orrs	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	4619      	mov	r1, r3
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f7ff ff57 	bl	8002312 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	695b      	ldr	r3, [r3, #20]
 8002468:	4619      	mov	r1, r3
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f7ff ff63 	bl	8002336 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8002470:	f107 0308 	add.w	r3, r7, #8
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff fba7 	bl	8001bc8 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a13      	ldr	r2, [pc, #76]	@ (80024cc <LL_USART_Init+0xb4>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d102      	bne.n	8002488 <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	61bb      	str	r3, [r7, #24]
 8002486:	e00c      	b.n	80024a2 <LL_USART_Init+0x8a>
    }
    else if (USARTx == USART2)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	4a11      	ldr	r2, [pc, #68]	@ (80024d0 <LL_USART_Init+0xb8>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d102      	bne.n	8002496 <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	61bb      	str	r3, [r7, #24]
 8002494:	e005      	b.n	80024a2 <LL_USART_Init+0x8a>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a0e      	ldr	r2, [pc, #56]	@ (80024d4 <LL_USART_Init+0xbc>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d101      	bne.n	80024a2 <LL_USART_Init+0x8a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d00c      	beq.n	80024c2 <LL_USART_Init+0xaa>
        && (USART_InitStruct->BaudRate != 0U))
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d008      	beq.n	80024c2 <LL_USART_Init+0xaa>
    {
      status = SUCCESS;
 80024b0:	2300      	movs	r3, #0
 80024b2:	77fb      	strb	r3, [r7, #31]
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->BaudRate);
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 80024b8:	461a      	mov	r2, r3
 80024ba:	69b9      	ldr	r1, [r7, #24]
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f7ff ff4d 	bl	800235c <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80024c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3720      	adds	r7, #32
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	40013800 	.word	0x40013800
 80024d0:	40004400 	.word	0x40004400
 80024d4:	40004800 	.word	0x40004800

080024d8 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ea:	4a07      	ldr	r2, [pc, #28]	@ (8002508 <LL_InitTick+0x30>)
 80024ec:	3b01      	subs	r3, #1
 80024ee:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80024f0:	4b05      	ldr	r3, [pc, #20]	@ (8002508 <LL_InitTick+0x30>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024f6:	4b04      	ldr	r3, [pc, #16]	@ (8002508 <LL_InitTick+0x30>)
 80024f8:	2205      	movs	r2, #5
 80024fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80024fc:	bf00      	nop
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	bc80      	pop	{r7}
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	e000e010 	.word	0xe000e010

0800250c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002514:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f7ff ffdd 	bl	80024d8 <LL_InitTick>
}
 800251e:	bf00      	nop
 8002520:	3708      	adds	r7, #8
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
	...

08002528 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002530:	4a03      	ldr	r2, [pc, #12]	@ (8002540 <LL_SetSystemCoreClock+0x18>)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6013      	str	r3, [r2, #0]
}
 8002536:	bf00      	nop
 8002538:	370c      	adds	r7, #12
 800253a:	46bd      	mov	sp, r7
 800253c:	bc80      	pop	{r7}
 800253e:	4770      	bx	lr
 8002540:	20000000 	.word	0x20000000

08002544 <memset>:
 8002544:	4603      	mov	r3, r0
 8002546:	4402      	add	r2, r0
 8002548:	4293      	cmp	r3, r2
 800254a:	d100      	bne.n	800254e <memset+0xa>
 800254c:	4770      	bx	lr
 800254e:	f803 1b01 	strb.w	r1, [r3], #1
 8002552:	e7f9      	b.n	8002548 <memset+0x4>

08002554 <__libc_init_array>:
 8002554:	b570      	push	{r4, r5, r6, lr}
 8002556:	2600      	movs	r6, #0
 8002558:	4d0c      	ldr	r5, [pc, #48]	@ (800258c <__libc_init_array+0x38>)
 800255a:	4c0d      	ldr	r4, [pc, #52]	@ (8002590 <__libc_init_array+0x3c>)
 800255c:	1b64      	subs	r4, r4, r5
 800255e:	10a4      	asrs	r4, r4, #2
 8002560:	42a6      	cmp	r6, r4
 8002562:	d109      	bne.n	8002578 <__libc_init_array+0x24>
 8002564:	f000 f81a 	bl	800259c <_init>
 8002568:	2600      	movs	r6, #0
 800256a:	4d0a      	ldr	r5, [pc, #40]	@ (8002594 <__libc_init_array+0x40>)
 800256c:	4c0a      	ldr	r4, [pc, #40]	@ (8002598 <__libc_init_array+0x44>)
 800256e:	1b64      	subs	r4, r4, r5
 8002570:	10a4      	asrs	r4, r4, #2
 8002572:	42a6      	cmp	r6, r4
 8002574:	d105      	bne.n	8002582 <__libc_init_array+0x2e>
 8002576:	bd70      	pop	{r4, r5, r6, pc}
 8002578:	f855 3b04 	ldr.w	r3, [r5], #4
 800257c:	4798      	blx	r3
 800257e:	3601      	adds	r6, #1
 8002580:	e7ee      	b.n	8002560 <__libc_init_array+0xc>
 8002582:	f855 3b04 	ldr.w	r3, [r5], #4
 8002586:	4798      	blx	r3
 8002588:	3601      	adds	r6, #1
 800258a:	e7f2      	b.n	8002572 <__libc_init_array+0x1e>
 800258c:	080025e4 	.word	0x080025e4
 8002590:	080025e4 	.word	0x080025e4
 8002594:	080025e4 	.word	0x080025e4
 8002598:	080025e8 	.word	0x080025e8

0800259c <_init>:
 800259c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800259e:	bf00      	nop
 80025a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025a2:	bc08      	pop	{r3}
 80025a4:	469e      	mov	lr, r3
 80025a6:	4770      	bx	lr

080025a8 <_fini>:
 80025a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025aa:	bf00      	nop
 80025ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025ae:	bc08      	pop	{r3}
 80025b0:	469e      	mov	lr, r3
 80025b2:	4770      	bx	lr
