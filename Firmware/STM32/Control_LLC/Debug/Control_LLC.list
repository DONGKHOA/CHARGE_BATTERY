
Control_LLC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c74  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08001d80  08001d80  00002d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001da8  08001da8  00003004  2**0
                  CONTENTS
  4 .ARM          00000000  08001da8  08001da8  00003004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001da8  08001da8  00003004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001da8  08001da8  00002da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001dac  08001dac  00002dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08001db0  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  08001db4  00003004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08001db4  00003020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00003004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004d80  00000000  00000000  0000302d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000012da  00000000  00000000  00007dad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006f8  00000000  00000000  00009088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000520  00000000  00000000  00009780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003047  00000000  00000000  00009ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004cdd  00000000  00000000  0000cce7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000672c7  00000000  00000000  000119c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00078c8b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c0c  00000000  00000000  00078cd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  0007a8dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	08001d68 	.word	0x08001d68

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	08001d68 	.word	0x08001d68

0800014c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	f003 0307 	and.w	r3, r3, #7
 800015a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800015c:	4b0c      	ldr	r3, [pc, #48]	@ (8000190 <__NVIC_SetPriorityGrouping+0x44>)
 800015e:	68db      	ldr	r3, [r3, #12]
 8000160:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000162:	68ba      	ldr	r2, [r7, #8]
 8000164:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000168:	4013      	ands	r3, r2
 800016a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000170:	68bb      	ldr	r3, [r7, #8]
 8000172:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000174:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000178:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800017c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800017e:	4a04      	ldr	r2, [pc, #16]	@ (8000190 <__NVIC_SetPriorityGrouping+0x44>)
 8000180:	68bb      	ldr	r3, [r7, #8]
 8000182:	60d3      	str	r3, [r2, #12]
}
 8000184:	bf00      	nop
 8000186:	3714      	adds	r7, #20
 8000188:	46bd      	mov	sp, r7
 800018a:	bc80      	pop	{r7}
 800018c:	4770      	bx	lr
 800018e:	bf00      	nop
 8000190:	e000ed00 	.word	0xe000ed00

08000194 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__NVIC_GetPriorityGrouping+0x18>)
 800019a:	68db      	ldr	r3, [r3, #12]
 800019c:	0a1b      	lsrs	r3, r3, #8
 800019e:	f003 0307 	and.w	r3, r3, #7
}
 80001a2:	4618      	mov	r0, r3
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bc80      	pop	{r7}
 80001a8:	4770      	bx	lr
 80001aa:	bf00      	nop
 80001ac:	e000ed00 	.word	0xe000ed00

080001b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001b0:	b480      	push	{r7}
 80001b2:	b083      	sub	sp, #12
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	4603      	mov	r3, r0
 80001b8:	6039      	str	r1, [r7, #0]
 80001ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001c0:	2b00      	cmp	r3, #0
 80001c2:	db0a      	blt.n	80001da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001c4:	683b      	ldr	r3, [r7, #0]
 80001c6:	b2da      	uxtb	r2, r3
 80001c8:	490c      	ldr	r1, [pc, #48]	@ (80001fc <__NVIC_SetPriority+0x4c>)
 80001ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001ce:	0112      	lsls	r2, r2, #4
 80001d0:	b2d2      	uxtb	r2, r2
 80001d2:	440b      	add	r3, r1
 80001d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001d8:	e00a      	b.n	80001f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001da:	683b      	ldr	r3, [r7, #0]
 80001dc:	b2da      	uxtb	r2, r3
 80001de:	4908      	ldr	r1, [pc, #32]	@ (8000200 <__NVIC_SetPriority+0x50>)
 80001e0:	79fb      	ldrb	r3, [r7, #7]
 80001e2:	f003 030f 	and.w	r3, r3, #15
 80001e6:	3b04      	subs	r3, #4
 80001e8:	0112      	lsls	r2, r2, #4
 80001ea:	b2d2      	uxtb	r2, r2
 80001ec:	440b      	add	r3, r1
 80001ee:	761a      	strb	r2, [r3, #24]
}
 80001f0:	bf00      	nop
 80001f2:	370c      	adds	r7, #12
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bc80      	pop	{r7}
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	e000e100 	.word	0xe000e100
 8000200:	e000ed00 	.word	0xe000ed00

08000204 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000204:	b480      	push	{r7}
 8000206:	b089      	sub	sp, #36	@ 0x24
 8000208:	af00      	add	r7, sp, #0
 800020a:	60f8      	str	r0, [r7, #12]
 800020c:	60b9      	str	r1, [r7, #8]
 800020e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000210:	68fb      	ldr	r3, [r7, #12]
 8000212:	f003 0307 	and.w	r3, r3, #7
 8000216:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000218:	69fb      	ldr	r3, [r7, #28]
 800021a:	f1c3 0307 	rsb	r3, r3, #7
 800021e:	2b04      	cmp	r3, #4
 8000220:	bf28      	it	cs
 8000222:	2304      	movcs	r3, #4
 8000224:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000226:	69fb      	ldr	r3, [r7, #28]
 8000228:	3304      	adds	r3, #4
 800022a:	2b06      	cmp	r3, #6
 800022c:	d902      	bls.n	8000234 <NVIC_EncodePriority+0x30>
 800022e:	69fb      	ldr	r3, [r7, #28]
 8000230:	3b03      	subs	r3, #3
 8000232:	e000      	b.n	8000236 <NVIC_EncodePriority+0x32>
 8000234:	2300      	movs	r3, #0
 8000236:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000238:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800023c:	69bb      	ldr	r3, [r7, #24]
 800023e:	fa02 f303 	lsl.w	r3, r2, r3
 8000242:	43da      	mvns	r2, r3
 8000244:	68bb      	ldr	r3, [r7, #8]
 8000246:	401a      	ands	r2, r3
 8000248:	697b      	ldr	r3, [r7, #20]
 800024a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800024c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000250:	697b      	ldr	r3, [r7, #20]
 8000252:	fa01 f303 	lsl.w	r3, r1, r3
 8000256:	43d9      	mvns	r1, r3
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800025c:	4313      	orrs	r3, r2
         );
}
 800025e:	4618      	mov	r0, r3
 8000260:	3724      	adds	r7, #36	@ 0x24
 8000262:	46bd      	mov	sp, r7
 8000264:	bc80      	pop	{r7}
 8000266:	4770      	bx	lr

08000268 <LL_ADC_REG_SetSequencerRanks>:
  *         
  *         (1) On STM32F1, parameter available only on ADC instance: ADC1.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000268:	b480      	push	{r7}
 800026a:	b089      	sub	sp, #36	@ 0x24
 800026c:	af00      	add	r7, sp, #0
 800026e:	60f8      	str	r0, [r7, #12]
 8000270:	60b9      	str	r1, [r7, #8]
 8000272:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	332c      	adds	r3, #44	@ 0x2c
 8000278:	4619      	mov	r1, r3
 800027a:	68bb      	ldr	r3, [r7, #8]
 800027c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8000280:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000284:	61ba      	str	r2, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000286:	69ba      	ldr	r2, [r7, #24]
 8000288:	fa92 f2a2 	rbit	r2, r2
 800028c:	617a      	str	r2, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800028e:	697a      	ldr	r2, [r7, #20]
 8000290:	fab2 f282 	clz	r2, r2
 8000294:	b2d2      	uxtb	r2, r2
 8000296:	40d3      	lsrs	r3, r2
 8000298:	009b      	lsls	r3, r3, #2
 800029a:	440b      	add	r3, r1
 800029c:	61fb      	str	r3, [r7, #28]
  
  MODIFY_REG(*preg,
 800029e:	69fb      	ldr	r3, [r7, #28]
 80002a0:	681a      	ldr	r2, [r3, #0]
 80002a2:	68bb      	ldr	r3, [r7, #8]
 80002a4:	f003 031f 	and.w	r3, r3, #31
 80002a8:	211f      	movs	r1, #31
 80002aa:	fa01 f303 	lsl.w	r3, r1, r3
 80002ae:	43db      	mvns	r3, r3
 80002b0:	401a      	ands	r2, r3
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	f003 011f 	and.w	r1, r3, #31
 80002b8:	68bb      	ldr	r3, [r7, #8]
 80002ba:	f003 031f 	and.w	r3, r3, #31
 80002be:	fa01 f303 	lsl.w	r3, r1, r3
 80002c2:	431a      	orrs	r2, r3
 80002c4:	69fb      	ldr	r3, [r7, #28]
 80002c6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80002c8:	bf00      	nop
 80002ca:	3724      	adds	r7, #36	@ 0x24
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bc80      	pop	{r7}
 80002d0:	4770      	bx	lr

080002d2 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_71CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_239CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80002d2:	b480      	push	{r7}
 80002d4:	b08d      	sub	sp, #52	@ 0x34
 80002d6:	af00      	add	r7, sp, #0
 80002d8:	60f8      	str	r0, [r7, #12]
 80002da:	60b9      	str	r1, [r7, #8]
 80002dc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	330c      	adds	r3, #12
 80002e2:	4619      	mov	r1, r3
 80002e4:	68bb      	ldr	r3, [r7, #8]
 80002e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80002ea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80002ee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80002f0:	69ba      	ldr	r2, [r7, #24]
 80002f2:	fa92 f2a2 	rbit	r2, r2
 80002f6:	617a      	str	r2, [r7, #20]
  return result;
 80002f8:	697a      	ldr	r2, [r7, #20]
 80002fa:	fab2 f282 	clz	r2, r2
 80002fe:	b2d2      	uxtb	r2, r2
 8000300:	40d3      	lsrs	r3, r2
 8000302:	009b      	lsls	r3, r3, #2
 8000304:	440b      	add	r3, r1
 8000306:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  MODIFY_REG(*preg,
 8000308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800030a:	681a      	ldr	r2, [r3, #0]
 800030c:	68bb      	ldr	r3, [r7, #8]
 800030e:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 8000312:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 8000316:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000318:	6a39      	ldr	r1, [r7, #32]
 800031a:	fa91 f1a1 	rbit	r1, r1
 800031e:	61f9      	str	r1, [r7, #28]
  return result;
 8000320:	69f9      	ldr	r1, [r7, #28]
 8000322:	fab1 f181 	clz	r1, r1
 8000326:	b2c9      	uxtb	r1, r1
 8000328:	40cb      	lsrs	r3, r1
 800032a:	2107      	movs	r1, #7
 800032c:	fa01 f303 	lsl.w	r3, r1, r3
 8000330:	43db      	mvns	r3, r3
 8000332:	401a      	ands	r2, r3
 8000334:	68bb      	ldr	r3, [r7, #8]
 8000336:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 800033a:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 800033e:	62b9      	str	r1, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000340:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000342:	fa91 f1a1 	rbit	r1, r1
 8000346:	6279      	str	r1, [r7, #36]	@ 0x24
  return result;
 8000348:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800034a:	fab1 f181 	clz	r1, r1
 800034e:	b2c9      	uxtb	r1, r1
 8000350:	40cb      	lsrs	r3, r1
 8000352:	6879      	ldr	r1, [r7, #4]
 8000354:	fa01 f303 	lsl.w	r3, r1, r3
 8000358:	431a      	orrs	r2, r3
 800035a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800035c:	601a      	str	r2, [r3, #0]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 800035e:	bf00      	nop
 8000360:	3734      	adds	r7, #52	@ 0x34
 8000362:	46bd      	mov	sp, r7
 8000364:	bc80      	pop	{r7}
 8000366:	4770      	bx	lr

08000368 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800036c:	4b04      	ldr	r3, [pc, #16]	@ (8000380 <LL_RCC_HSE_Enable+0x18>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	4a03      	ldr	r2, [pc, #12]	@ (8000380 <LL_RCC_HSE_Enable+0x18>)
 8000372:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000376:	6013      	str	r3, [r2, #0]
}
 8000378:	bf00      	nop
 800037a:	46bd      	mov	sp, r7
 800037c:	bc80      	pop	{r7}
 800037e:	4770      	bx	lr
 8000380:	40021000 	.word	0x40021000

08000384 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000384:	b480      	push	{r7}
 8000386:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000388:	4b06      	ldr	r3, [pc, #24]	@ (80003a4 <LL_RCC_HSE_IsReady+0x20>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000390:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8000394:	bf0c      	ite	eq
 8000396:	2301      	moveq	r3, #1
 8000398:	2300      	movne	r3, #0
 800039a:	b2db      	uxtb	r3, r3
}
 800039c:	4618      	mov	r0, r3
 800039e:	46bd      	mov	sp, r7
 80003a0:	bc80      	pop	{r7}
 80003a2:	4770      	bx	lr
 80003a4:	40021000 	.word	0x40021000

080003a8 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b083      	sub	sp, #12
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80003b0:	4b06      	ldr	r3, [pc, #24]	@ (80003cc <LL_RCC_SetSysClkSource+0x24>)
 80003b2:	685b      	ldr	r3, [r3, #4]
 80003b4:	f023 0203 	bic.w	r2, r3, #3
 80003b8:	4904      	ldr	r1, [pc, #16]	@ (80003cc <LL_RCC_SetSysClkSource+0x24>)
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	4313      	orrs	r3, r2
 80003be:	604b      	str	r3, [r1, #4]
}
 80003c0:	bf00      	nop
 80003c2:	370c      	adds	r7, #12
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bc80      	pop	{r7}
 80003c8:	4770      	bx	lr
 80003ca:	bf00      	nop
 80003cc:	40021000 	.word	0x40021000

080003d0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80003d4:	4b03      	ldr	r3, [pc, #12]	@ (80003e4 <LL_RCC_GetSysClkSource+0x14>)
 80003d6:	685b      	ldr	r3, [r3, #4]
 80003d8:	f003 030c 	and.w	r3, r3, #12
}
 80003dc:	4618      	mov	r0, r3
 80003de:	46bd      	mov	sp, r7
 80003e0:	bc80      	pop	{r7}
 80003e2:	4770      	bx	lr
 80003e4:	40021000 	.word	0x40021000

080003e8 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80003e8:	b480      	push	{r7}
 80003ea:	b083      	sub	sp, #12
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80003f0:	4b06      	ldr	r3, [pc, #24]	@ (800040c <LL_RCC_SetAHBPrescaler+0x24>)
 80003f2:	685b      	ldr	r3, [r3, #4]
 80003f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80003f8:	4904      	ldr	r1, [pc, #16]	@ (800040c <LL_RCC_SetAHBPrescaler+0x24>)
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	4313      	orrs	r3, r2
 80003fe:	604b      	str	r3, [r1, #4]
}
 8000400:	bf00      	nop
 8000402:	370c      	adds	r7, #12
 8000404:	46bd      	mov	sp, r7
 8000406:	bc80      	pop	{r7}
 8000408:	4770      	bx	lr
 800040a:	bf00      	nop
 800040c:	40021000 	.word	0x40021000

08000410 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000418:	4b06      	ldr	r3, [pc, #24]	@ (8000434 <LL_RCC_SetAPB1Prescaler+0x24>)
 800041a:	685b      	ldr	r3, [r3, #4]
 800041c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8000420:	4904      	ldr	r1, [pc, #16]	@ (8000434 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	4313      	orrs	r3, r2
 8000426:	604b      	str	r3, [r1, #4]
}
 8000428:	bf00      	nop
 800042a:	370c      	adds	r7, #12
 800042c:	46bd      	mov	sp, r7
 800042e:	bc80      	pop	{r7}
 8000430:	4770      	bx	lr
 8000432:	bf00      	nop
 8000434:	40021000 	.word	0x40021000

08000438 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000438:	b480      	push	{r7}
 800043a:	b083      	sub	sp, #12
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000440:	4b06      	ldr	r3, [pc, #24]	@ (800045c <LL_RCC_SetAPB2Prescaler+0x24>)
 8000442:	685b      	ldr	r3, [r3, #4]
 8000444:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8000448:	4904      	ldr	r1, [pc, #16]	@ (800045c <LL_RCC_SetAPB2Prescaler+0x24>)
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	4313      	orrs	r3, r2
 800044e:	604b      	str	r3, [r1, #4]
}
 8000450:	bf00      	nop
 8000452:	370c      	adds	r7, #12
 8000454:	46bd      	mov	sp, r7
 8000456:	bc80      	pop	{r7}
 8000458:	4770      	bx	lr
 800045a:	bf00      	nop
 800045c:	40021000 	.word	0x40021000

08000460 <LL_RCC_SetADCClockSource>:
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_6
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
 8000460:	b480      	push	{r7}
 8000462:	b083      	sub	sp, #12
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_ADCPRE, ADCxSource);
 8000468:	4b06      	ldr	r3, [pc, #24]	@ (8000484 <LL_RCC_SetADCClockSource+0x24>)
 800046a:	685b      	ldr	r3, [r3, #4]
 800046c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8000470:	4904      	ldr	r1, [pc, #16]	@ (8000484 <LL_RCC_SetADCClockSource+0x24>)
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	4313      	orrs	r3, r2
 8000476:	604b      	str	r3, [r1, #4]
}
 8000478:	bf00      	nop
 800047a:	370c      	adds	r7, #12
 800047c:	46bd      	mov	sp, r7
 800047e:	bc80      	pop	{r7}
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop
 8000484:	40021000 	.word	0x40021000

08000488 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800048c:	4b04      	ldr	r3, [pc, #16]	@ (80004a0 <LL_RCC_PLL_Enable+0x18>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4a03      	ldr	r2, [pc, #12]	@ (80004a0 <LL_RCC_PLL_Enable+0x18>)
 8000492:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000496:	6013      	str	r3, [r2, #0]
}
 8000498:	bf00      	nop
 800049a:	46bd      	mov	sp, r7
 800049c:	bc80      	pop	{r7}
 800049e:	4770      	bx	lr
 80004a0:	40021000 	.word	0x40021000

080004a4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80004a8:	4b06      	ldr	r3, [pc, #24]	@ (80004c4 <LL_RCC_PLL_IsReady+0x20>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80004b0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80004b4:	bf0c      	ite	eq
 80004b6:	2301      	moveq	r3, #1
 80004b8:	2300      	movne	r3, #0
 80004ba:	b2db      	uxtb	r3, r3
}
 80004bc:	4618      	mov	r0, r3
 80004be:	46bd      	mov	sp, r7
 80004c0:	bc80      	pop	{r7}
 80004c2:	4770      	bx	lr
 80004c4:	40021000 	.word	0x40021000

080004c8 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
 80004d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 80004d2:	4b08      	ldr	r3, [pc, #32]	@ (80004f4 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 80004d4:	685b      	ldr	r3, [r3, #4]
 80004d6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 80004e0:	683b      	ldr	r3, [r7, #0]
 80004e2:	430b      	orrs	r3, r1
 80004e4:	4903      	ldr	r1, [pc, #12]	@ (80004f4 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 80004e6:	4313      	orrs	r3, r2
 80004e8:	604b      	str	r3, [r1, #4]
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 80004ea:	bf00      	nop
 80004ec:	370c      	adds	r7, #12
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bc80      	pop	{r7}
 80004f2:	4770      	bx	lr
 80004f4:	40021000 	.word	0x40021000

080004f8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80004f8:	b480      	push	{r7}
 80004fa:	b085      	sub	sp, #20
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000500:	4b08      	ldr	r3, [pc, #32]	@ (8000524 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000502:	69da      	ldr	r2, [r3, #28]
 8000504:	4907      	ldr	r1, [pc, #28]	@ (8000524 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	4313      	orrs	r3, r2
 800050a:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800050c:	4b05      	ldr	r3, [pc, #20]	@ (8000524 <LL_APB1_GRP1_EnableClock+0x2c>)
 800050e:	69da      	ldr	r2, [r3, #28]
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	4013      	ands	r3, r2
 8000514:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000516:	68fb      	ldr	r3, [r7, #12]
}
 8000518:	bf00      	nop
 800051a:	3714      	adds	r7, #20
 800051c:	46bd      	mov	sp, r7
 800051e:	bc80      	pop	{r7}
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	40021000 	.word	0x40021000

08000528 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000528:	b480      	push	{r7}
 800052a:	b085      	sub	sp, #20
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000530:	4b08      	ldr	r3, [pc, #32]	@ (8000554 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000532:	699a      	ldr	r2, [r3, #24]
 8000534:	4907      	ldr	r1, [pc, #28]	@ (8000554 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	4313      	orrs	r3, r2
 800053a:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800053c:	4b05      	ldr	r3, [pc, #20]	@ (8000554 <LL_APB2_GRP1_EnableClock+0x2c>)
 800053e:	699a      	ldr	r2, [r3, #24]
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	4013      	ands	r3, r2
 8000544:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000546:	68fb      	ldr	r3, [r7, #12]
}
 8000548:	bf00      	nop
 800054a:	3714      	adds	r7, #20
 800054c:	46bd      	mov	sp, r7
 800054e:	bc80      	pop	{r7}
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	40021000 	.word	0x40021000

08000558 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000560:	4b06      	ldr	r3, [pc, #24]	@ (800057c <LL_FLASH_SetLatency+0x24>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	f023 0207 	bic.w	r2, r3, #7
 8000568:	4904      	ldr	r1, [pc, #16]	@ (800057c <LL_FLASH_SetLatency+0x24>)
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	4313      	orrs	r3, r2
 800056e:	600b      	str	r3, [r1, #0]
}
 8000570:	bf00      	nop
 8000572:	370c      	adds	r7, #12
 8000574:	46bd      	mov	sp, r7
 8000576:	bc80      	pop	{r7}
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	40022000 	.word	0x40022000

08000580 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000584:	4b03      	ldr	r3, [pc, #12]	@ (8000594 <LL_FLASH_GetLatency+0x14>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f003 0307 	and.w	r3, r3, #7
}
 800058c:	4618      	mov	r0, r3
 800058e:	46bd      	mov	sp, r7
 8000590:	bc80      	pop	{r7}
 8000592:	4770      	bx	lr
 8000594:	40022000 	.word	0x40022000

08000598 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	601a      	str	r2, [r3, #0]
}
 80005ac:	bf00      	nop
 80005ae:	370c      	adds	r7, #12
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bc80      	pop	{r7}
 80005b4:	4770      	bx	lr
	...

080005b8 <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
 80005c0:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80005c2:	683b      	ldr	r3, [r7, #0]
 80005c4:	2b01      	cmp	r3, #1
 80005c6:	d01c      	beq.n	8000602 <LL_TIM_OC_DisableFast+0x4a>
 80005c8:	683b      	ldr	r3, [r7, #0]
 80005ca:	2b04      	cmp	r3, #4
 80005cc:	d017      	beq.n	80005fe <LL_TIM_OC_DisableFast+0x46>
 80005ce:	683b      	ldr	r3, [r7, #0]
 80005d0:	2b10      	cmp	r3, #16
 80005d2:	d012      	beq.n	80005fa <LL_TIM_OC_DisableFast+0x42>
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	2b40      	cmp	r3, #64	@ 0x40
 80005d8:	d00d      	beq.n	80005f6 <LL_TIM_OC_DisableFast+0x3e>
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80005e0:	d007      	beq.n	80005f2 <LL_TIM_OC_DisableFast+0x3a>
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80005e8:	d101      	bne.n	80005ee <LL_TIM_OC_DisableFast+0x36>
 80005ea:	2305      	movs	r3, #5
 80005ec:	e00a      	b.n	8000604 <LL_TIM_OC_DisableFast+0x4c>
 80005ee:	2306      	movs	r3, #6
 80005f0:	e008      	b.n	8000604 <LL_TIM_OC_DisableFast+0x4c>
 80005f2:	2304      	movs	r3, #4
 80005f4:	e006      	b.n	8000604 <LL_TIM_OC_DisableFast+0x4c>
 80005f6:	2303      	movs	r3, #3
 80005f8:	e004      	b.n	8000604 <LL_TIM_OC_DisableFast+0x4c>
 80005fa:	2302      	movs	r3, #2
 80005fc:	e002      	b.n	8000604 <LL_TIM_OC_DisableFast+0x4c>
 80005fe:	2301      	movs	r3, #1
 8000600:	e000      	b.n	8000604 <LL_TIM_OC_DisableFast+0x4c>
 8000602:	2300      	movs	r3, #0
 8000604:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	3318      	adds	r3, #24
 800060a:	4619      	mov	r1, r3
 800060c:	7bfb      	ldrb	r3, [r7, #15]
 800060e:	4a0a      	ldr	r2, [pc, #40]	@ (8000638 <LL_TIM_OC_DisableFast+0x80>)
 8000610:	5cd3      	ldrb	r3, [r2, r3]
 8000612:	440b      	add	r3, r1
 8000614:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8000616:	68bb      	ldr	r3, [r7, #8]
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	7bfb      	ldrb	r3, [r7, #15]
 800061c:	4907      	ldr	r1, [pc, #28]	@ (800063c <LL_TIM_OC_DisableFast+0x84>)
 800061e:	5ccb      	ldrb	r3, [r1, r3]
 8000620:	4619      	mov	r1, r3
 8000622:	2304      	movs	r3, #4
 8000624:	408b      	lsls	r3, r1
 8000626:	43db      	mvns	r3, r3
 8000628:	401a      	ands	r2, r3
 800062a:	68bb      	ldr	r3, [r7, #8]
 800062c:	601a      	str	r2, [r3, #0]

}
 800062e:	bf00      	nop
 8000630:	3714      	adds	r7, #20
 8000632:	46bd      	mov	sp, r7
 8000634:	bc80      	pop	{r7}
 8000636:	4770      	bx	lr
 8000638:	08001d80 	.word	0x08001d80
 800063c:	08001d88 	.word	0x08001d88

08000640 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000640:	b480      	push	{r7}
 8000642:	b085      	sub	sp, #20
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
 8000648:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	2b01      	cmp	r3, #1
 800064e:	d01c      	beq.n	800068a <LL_TIM_OC_EnablePreload+0x4a>
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	2b04      	cmp	r3, #4
 8000654:	d017      	beq.n	8000686 <LL_TIM_OC_EnablePreload+0x46>
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	2b10      	cmp	r3, #16
 800065a:	d012      	beq.n	8000682 <LL_TIM_OC_EnablePreload+0x42>
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	2b40      	cmp	r3, #64	@ 0x40
 8000660:	d00d      	beq.n	800067e <LL_TIM_OC_EnablePreload+0x3e>
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000668:	d007      	beq.n	800067a <LL_TIM_OC_EnablePreload+0x3a>
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000670:	d101      	bne.n	8000676 <LL_TIM_OC_EnablePreload+0x36>
 8000672:	2305      	movs	r3, #5
 8000674:	e00a      	b.n	800068c <LL_TIM_OC_EnablePreload+0x4c>
 8000676:	2306      	movs	r3, #6
 8000678:	e008      	b.n	800068c <LL_TIM_OC_EnablePreload+0x4c>
 800067a:	2304      	movs	r3, #4
 800067c:	e006      	b.n	800068c <LL_TIM_OC_EnablePreload+0x4c>
 800067e:	2303      	movs	r3, #3
 8000680:	e004      	b.n	800068c <LL_TIM_OC_EnablePreload+0x4c>
 8000682:	2302      	movs	r3, #2
 8000684:	e002      	b.n	800068c <LL_TIM_OC_EnablePreload+0x4c>
 8000686:	2301      	movs	r3, #1
 8000688:	e000      	b.n	800068c <LL_TIM_OC_EnablePreload+0x4c>
 800068a:	2300      	movs	r3, #0
 800068c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	3318      	adds	r3, #24
 8000692:	4619      	mov	r1, r3
 8000694:	7bfb      	ldrb	r3, [r7, #15]
 8000696:	4a0a      	ldr	r2, [pc, #40]	@ (80006c0 <LL_TIM_OC_EnablePreload+0x80>)
 8000698:	5cd3      	ldrb	r3, [r2, r3]
 800069a:	440b      	add	r3, r1
 800069c:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800069e:	68bb      	ldr	r3, [r7, #8]
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	7bfb      	ldrb	r3, [r7, #15]
 80006a4:	4907      	ldr	r1, [pc, #28]	@ (80006c4 <LL_TIM_OC_EnablePreload+0x84>)
 80006a6:	5ccb      	ldrb	r3, [r1, r3]
 80006a8:	4619      	mov	r1, r3
 80006aa:	2308      	movs	r3, #8
 80006ac:	408b      	lsls	r3, r1
 80006ae:	431a      	orrs	r2, r3
 80006b0:	68bb      	ldr	r3, [r7, #8]
 80006b2:	601a      	str	r2, [r3, #0]
}
 80006b4:	bf00      	nop
 80006b6:	3714      	adds	r7, #20
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bc80      	pop	{r7}
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	08001d80 	.word	0x08001d80
 80006c4:	08001d88 	.word	0x08001d88

080006c8 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
 80006d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	685b      	ldr	r3, [r3, #4]
 80006d6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	431a      	orrs	r2, r3
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	605a      	str	r2, [r3, #4]
}
 80006e2:	bf00      	nop
 80006e4:	370c      	adds	r7, #12
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bc80      	pop	{r7}
 80006ea:	4770      	bx	lr

080006ec <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	689b      	ldr	r3, [r3, #8]
 80006f8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	609a      	str	r2, [r3, #8]
}
 8000700:	bf00      	nop
 8000702:	370c      	adds	r7, #12
 8000704:	46bd      	mov	sp, r7
 8000706:	bc80      	pop	{r7}
 8000708:	4770      	bx	lr

0800070a <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800070a:	b480      	push	{r7}
 800070c:	b083      	sub	sp, #12
 800070e:	af00      	add	r7, sp, #0
 8000710:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	68db      	ldr	r3, [r3, #12]
 8000716:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	60da      	str	r2, [r3, #12]
}
 800071e:	bf00      	nop
 8000720:	370c      	adds	r7, #12
 8000722:	46bd      	mov	sp, r7
 8000724:	bc80      	pop	{r7}
 8000726:	4770      	bx	lr

08000728 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	691b      	ldr	r3, [r3, #16]
 8000734:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	695b      	ldr	r3, [r3, #20]
 8000740:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	615a      	str	r2, [r3, #20]
}
 8000748:	bf00      	nop
 800074a:	370c      	adds	r7, #12
 800074c:	46bd      	mov	sp, r7
 800074e:	bc80      	pop	{r7}
 8000750:	4770      	bx	lr

08000752 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_OUTPUT
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000752:	b490      	push	{r4, r7}
 8000754:	b088      	sub	sp, #32
 8000756:	af00      	add	r7, sp, #0
 8000758:	60f8      	str	r0, [r7, #12]
 800075a:	60b9      	str	r1, [r7, #8]
 800075c:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	461a      	mov	r2, r3
 8000762:	68bb      	ldr	r3, [r7, #8]
 8000764:	0e1b      	lsrs	r3, r3, #24
 8000766:	4413      	add	r3, r2
 8000768:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 800076a:	6822      	ldr	r2, [r4, #0]
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	fa93 f3a3 	rbit	r3, r3
 8000776:	613b      	str	r3, [r7, #16]
  return result;
 8000778:	693b      	ldr	r3, [r7, #16]
 800077a:	fab3 f383 	clz	r3, r3
 800077e:	b2db      	uxtb	r3, r3
 8000780:	009b      	lsls	r3, r3, #2
 8000782:	210f      	movs	r1, #15
 8000784:	fa01 f303 	lsl.w	r3, r1, r3
 8000788:	43db      	mvns	r3, r3
 800078a:	401a      	ands	r2, r3
 800078c:	68bb      	ldr	r3, [r7, #8]
 800078e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000790:	69fb      	ldr	r3, [r7, #28]
 8000792:	fa93 f3a3 	rbit	r3, r3
 8000796:	61bb      	str	r3, [r7, #24]
  return result;
 8000798:	69bb      	ldr	r3, [r7, #24]
 800079a:	fab3 f383 	clz	r3, r3
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	009b      	lsls	r3, r3, #2
 80007a2:	6879      	ldr	r1, [r7, #4]
 80007a4:	fa01 f303 	lsl.w	r3, r1, r3
 80007a8:	4313      	orrs	r3, r2
 80007aa:	6023      	str	r3, [r4, #0]
}
 80007ac:	bf00      	nop
 80007ae:	3720      	adds	r7, #32
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bc90      	pop	{r4, r7}
 80007b4:	4770      	bx	lr

080007b6 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80007b6:	b480      	push	{r7}
 80007b8:	b083      	sub	sp, #12
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	6078      	str	r0, [r7, #4]
 80007be:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	0a1b      	lsrs	r3, r3, #8
 80007c4:	b29a      	uxth	r2, r3
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	615a      	str	r2, [r3, #20]
}
 80007ca:	bf00      	nop
 80007cc:	370c      	adds	r7, #12
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bc80      	pop	{r7}
 80007d2:	4770      	bx	lr

080007d4 <LL_GPIO_AF_Remap_SWJ_NOJTAG>:
  * @rmtoll MAPR          SWJ_CFG           LL_GPIO_AF_Remap_SWJ_NOJTAG
  * @note  NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_Remap_SWJ_NOJTAG(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  MODIFY_REG(AFIO->MAPR, AFIO_MAPR_SWJ_CFG, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 80007d8:	4b05      	ldr	r3, [pc, #20]	@ (80007f0 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x1c>)
 80007da:	685b      	ldr	r3, [r3, #4]
 80007dc:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80007e0:	4a03      	ldr	r2, [pc, #12]	@ (80007f0 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x1c>)
 80007e2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80007e6:	6053      	str	r3, [r2, #4]
}
 80007e8:	bf00      	nop
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bc80      	pop	{r7}
 80007ee:	4770      	bx	lr
 80007f0:	40010000 	.word	0x40010000

080007f4 <LL_GPIO_AF_SetEXTISource>:
  *         @arg @ref LL_GPIO_AF_EXTI_LINE14
  *         @arg @ref LL_GPIO_AF_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b085      	sub	sp, #20
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
 80007fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(AFIO->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 80007fe:	4a13      	ldr	r2, [pc, #76]	@ (800084c <LL_GPIO_AF_SetEXTISource+0x58>)
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	b2db      	uxtb	r3, r3
 8000804:	3302      	adds	r3, #2
 8000806:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	0c1b      	lsrs	r3, r3, #16
 800080e:	43db      	mvns	r3, r3
 8000810:	ea02 0103 	and.w	r1, r2, r3
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	0c1b      	lsrs	r3, r3, #16
 8000818:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	fa93 f3a3 	rbit	r3, r3
 8000820:	60bb      	str	r3, [r7, #8]
  return result;
 8000822:	68bb      	ldr	r3, [r7, #8]
 8000824:	fab3 f383 	clz	r3, r3
 8000828:	b2db      	uxtb	r3, r3
 800082a:	461a      	mov	r2, r3
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	fa03 f202 	lsl.w	r2, r3, r2
 8000832:	4806      	ldr	r0, [pc, #24]	@ (800084c <LL_GPIO_AF_SetEXTISource+0x58>)
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	b2db      	uxtb	r3, r3
 8000838:	430a      	orrs	r2, r1
 800083a:	3302      	adds	r3, #2
 800083c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000840:	bf00      	nop
 8000842:	3714      	adds	r7, #20
 8000844:	46bd      	mov	sp, r7
 8000846:	bc80      	pop	{r7}
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	40010000 	.word	0x40010000

08000850 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 8000854:	2001      	movs	r0, #1
 8000856:	f7ff fe67 	bl	8000528 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800085a:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 800085e:	f7ff fe4b 	bl	80004f8 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000862:	2003      	movs	r0, #3
 8000864:	f7ff fc72 	bl	800014c <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8000868:	f7ff fc94 	bl	8000194 <__NVIC_GetPriorityGrouping>
 800086c:	4603      	mov	r3, r0
 800086e:	2200      	movs	r2, #0
 8000870:	210f      	movs	r1, #15
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff fcc6 	bl	8000204 <NVIC_EncodePriority>
 8000878:	4603      	mov	r3, r0
 800087a:	4619      	mov	r1, r3
 800087c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000880:	f7ff fc96 	bl	80001b0 <__NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  LL_GPIO_AF_Remap_SWJ_NOJTAG();
 8000884:	f7ff ffa6 	bl	80007d4 <LL_GPIO_AF_Remap_SWJ_NOJTAG>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000888:	f000 f80a 	bl	80008a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800088c:	f000 f996 	bl	8000bbc <MX_GPIO_Init>
  MX_TIM1_Init();
 8000890:	f000 f8aa 	bl	80009e8 <MX_TIM1_Init>
  MX_ADC1_Init();
 8000894:	f000 f846 	bl	8000924 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000898:	f000 f938 	bl	8000b0c <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800089c:	bf00      	nop
 800089e:	e7fd      	b.n	800089c <main+0x4c>

080008a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 80008a4:	2002      	movs	r0, #2
 80008a6:	f7ff fe57 	bl	8000558 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 80008aa:	bf00      	nop
 80008ac:	f7ff fe68 	bl	8000580 <LL_FLASH_GetLatency>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b02      	cmp	r3, #2
 80008b4:	d1fa      	bne.n	80008ac <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSE_Enable();
 80008b6:	f7ff fd57 	bl	8000368 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 80008ba:	bf00      	nop
 80008bc:	f7ff fd62 	bl	8000384 <LL_RCC_HSE_IsReady>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b01      	cmp	r3, #1
 80008c4:	d1fa      	bne.n	80008bc <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_2, LL_RCC_PLL_MUL_15);
 80008c6:	f44f 1150 	mov.w	r1, #3407872	@ 0x340000
 80008ca:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 80008ce:	f7ff fdfb 	bl	80004c8 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 80008d2:	f7ff fdd9 	bl	8000488 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80008d6:	bf00      	nop
 80008d8:	f7ff fde4 	bl	80004a4 <LL_RCC_PLL_IsReady>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d1fa      	bne.n	80008d8 <SystemClock_Config+0x38>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80008e2:	2000      	movs	r0, #0
 80008e4:	f7ff fd80 	bl	80003e8 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 80008e8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80008ec:	f7ff fd90 	bl	8000410 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80008f0:	2000      	movs	r0, #0
 80008f2:	f7ff fda1 	bl	8000438 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80008f6:	2002      	movs	r0, #2
 80008f8:	f7ff fd56 	bl	80003a8 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80008fc:	bf00      	nop
 80008fe:	f7ff fd67 	bl	80003d0 <LL_RCC_GetSysClkSource>
 8000902:	4603      	mov	r3, r0
 8000904:	2b08      	cmp	r3, #8
 8000906:	d1fa      	bne.n	80008fe <SystemClock_Config+0x5e>
  {

  }
  LL_Init1msTick(60000000);
 8000908:	4805      	ldr	r0, [pc, #20]	@ (8000920 <SystemClock_Config+0x80>)
 800090a:	f001 f9e5 	bl	8001cd8 <LL_Init1msTick>
  LL_SetSystemCoreClock(60000000);
 800090e:	4804      	ldr	r0, [pc, #16]	@ (8000920 <SystemClock_Config+0x80>)
 8000910:	f001 f9f0 	bl	8001cf4 <LL_SetSystemCoreClock>
  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSRC_PCLK2_DIV_6);
 8000914:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000918:	f7ff fda2 	bl	8000460 <LL_RCC_SetADCClockSource>
}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}
 8000920:	03938700 	.word	0x03938700

08000924 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b08e      	sub	sp, #56	@ 0x38
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 800092a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	605a      	str	r2, [r3, #4]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8000934:	2300      	movs	r3, #0
 8000936:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8000938:	f107 0318 	add.w	r3, r7, #24
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
 8000944:	60da      	str	r2, [r3, #12]
 8000946:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000948:	1d3b      	adds	r3, r7, #4
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	605a      	str	r2, [r3, #4]
 8000950:	609a      	str	r2, [r3, #8]
 8000952:	60da      	str	r2, [r3, #12]
 8000954:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8000956:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800095a:	f7ff fde5 	bl	8000528 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 800095e:	2004      	movs	r0, #4
 8000960:	f7ff fde2 	bl	8000528 <LL_APB2_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PA0-WKUP   ------> ADC1_IN0
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8000964:	f240 1301 	movw	r3, #257	@ 0x101
 8000968:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800096a:	2300      	movs	r3, #0
 800096c:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096e:	1d3b      	adds	r3, r7, #4
 8000970:	4619      	mov	r1, r3
 8000972:	481b      	ldr	r0, [pc, #108]	@ (80009e0 <MX_ADC1_Init+0xbc>)
 8000974:	f000 fc51 	bl	800121a <LL_GPIO_Init>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000978:	2300      	movs	r3, #0
 800097a:	633b      	str	r3, [r7, #48]	@ 0x30
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_DISABLE;
 800097c:	2300      	movs	r3, #0
 800097e:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8000980:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000984:	4619      	mov	r1, r3
 8000986:	4817      	ldr	r0, [pc, #92]	@ (80009e4 <MX_ADC1_Init+0xc0>)
 8000988:	f000 fa12 	bl	8000db0 <LL_ADC_Init>
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 800098c:	2300      	movs	r3, #0
 800098e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8000990:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000994:	4619      	mov	r1, r3
 8000996:	4813      	ldr	r0, [pc, #76]	@ (80009e4 <MX_ADC1_Init+0xc0>)
 8000998:	f000 f9d8 	bl	8000d4c <LL_ADC_CommonInit>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 800099c:	f44f 2360 	mov.w	r3, #917504	@ 0xe0000
 80009a0:	61bb      	str	r3, [r7, #24]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 80009a2:	2300      	movs	r3, #0
 80009a4:	61fb      	str	r3, [r7, #28]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 80009a6:	2300      	movs	r3, #0
 80009a8:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 80009aa:	2300      	movs	r3, #0
 80009ac:	627b      	str	r3, [r7, #36]	@ 0x24
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 80009ae:	2300      	movs	r3, #0
 80009b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 80009b2:	f107 0318 	add.w	r3, r7, #24
 80009b6:	4619      	mov	r1, r3
 80009b8:	480a      	ldr	r0, [pc, #40]	@ (80009e4 <MX_ADC1_Init+0xc0>)
 80009ba:	f000 fa20 	bl	8000dfe <LL_ADC_REG_Init>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_0);
 80009be:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80009c2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009c6:	4807      	ldr	r0, [pc, #28]	@ (80009e4 <MX_ADC1_Init+0xc0>)
 80009c8:	f7ff fc4e 	bl	8000268 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 80009cc:	2200      	movs	r2, #0
 80009ce:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80009d2:	4804      	ldr	r0, [pc, #16]	@ (80009e4 <MX_ADC1_Init+0xc0>)
 80009d4:	f7ff fc7d 	bl	80002d2 <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009d8:	bf00      	nop
 80009da:	3738      	adds	r7, #56	@ 0x38
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	40010800 	.word	0x40010800
 80009e4:	40012400 	.word	0x40012400

080009e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b098      	sub	sp, #96	@ 0x60
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80009ee:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	605a      	str	r2, [r3, #4]
 80009f8:	609a      	str	r2, [r3, #8]
 80009fa:	60da      	str	r2, [r3, #12]
 80009fc:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80009fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a02:	2220      	movs	r2, #32
 8000a04:	2100      	movs	r1, #0
 8000a06:	4618      	mov	r0, r3
 8000a08:	f001 f982 	bl	8001d10 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8000a0c:	f107 0314 	add.w	r3, r7, #20
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	60da      	str	r2, [r3, #12]
 8000a1a:	611a      	str	r2, [r3, #16]
 8000a1c:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1e:	463b      	mov	r3, r7
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]
 8000a2a:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8000a2c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8000a30:	f7ff fd7a 	bl	8000528 <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8000a34:	2300      	movs	r3, #0
 8000a36:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	653b      	str	r3, [r7, #80]	@ 0x50
  TIM_InitStruct.Autoreload = 65535;
 8000a3e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a42:	657b      	str	r3, [r7, #84]	@ 0x54
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000a44:	2300      	movs	r3, #0
 8000a46:	65bb      	str	r3, [r7, #88]	@ 0x58
  TIM_InitStruct.RepetitionCounter = 0;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8000a4c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000a50:	4619      	mov	r1, r3
 8000a52:	482b      	ldr	r0, [pc, #172]	@ (8000b00 <MX_TIM1_Init+0x118>)
 8000a54:	f000 fdc4 	bl	80015e0 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8000a58:	4829      	ldr	r0, [pc, #164]	@ (8000b00 <MX_TIM1_Init+0x118>)
 8000a5a:	f7ff fd9d 	bl	8000598 <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 8000a5e:	2101      	movs	r1, #1
 8000a60:	4827      	ldr	r0, [pc, #156]	@ (8000b00 <MX_TIM1_Init+0x118>)
 8000a62:	f7ff fded 	bl	8000640 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8000a66:	2360      	movs	r3, #96	@ 0x60
 8000a68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	633b      	str	r3, [r7, #48]	@ 0x30
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	637b      	str	r3, [r7, #52]	@ 0x34
  TIM_OC_InitStruct.CompareValue = 0;
 8000a72:	2300      	movs	r3, #0
 8000a74:	63bb      	str	r3, [r7, #56]	@ 0x38
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8000a76:	2300      	movs	r3, #0
 8000a78:	63fb      	str	r3, [r7, #60]	@ 0x3c
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8000a82:	2300      	movs	r3, #0
 8000a84:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8000a86:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	2101      	movs	r1, #1
 8000a8e:	481c      	ldr	r0, [pc, #112]	@ (8000b00 <MX_TIM1_Init+0x118>)
 8000a90:	f000 fe04 	bl	800169c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 8000a94:	2101      	movs	r1, #1
 8000a96:	481a      	ldr	r0, [pc, #104]	@ (8000b00 <MX_TIM1_Init+0x118>)
 8000a98:	f7ff fd8e 	bl	80005b8 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	4818      	ldr	r0, [pc, #96]	@ (8000b00 <MX_TIM1_Init+0x118>)
 8000aa0:	f7ff fe12 	bl	80006c8 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8000aa4:	4816      	ldr	r0, [pc, #88]	@ (8000b00 <MX_TIM1_Init+0x118>)
 8000aa6:	f7ff fe21 	bl	80006ec <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	617b      	str	r3, [r7, #20]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61bb      	str	r3, [r7, #24]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.DeadTime = 0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	f887 3020 	strb.w	r3, [r7, #32]
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8000abc:	2300      	movs	r3, #0
 8000abe:	847b      	strh	r3, [r7, #34]	@ 0x22
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8000ac0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ac4:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8000aca:	f107 0314 	add.w	r3, r7, #20
 8000ace:	4619      	mov	r1, r3
 8000ad0:	480b      	ldr	r0, [pc, #44]	@ (8000b00 <MX_TIM1_Init+0x118>)
 8000ad2:	f000 fe24 	bl	800171e <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8000ad6:	2004      	movs	r0, #4
 8000ad8:	f7ff fd26 	bl	8000528 <LL_APB2_GRP1_EnableClock>
  /**TIM1 GPIO Configuration
  PA8   ------> TIM1_CH1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8000adc:	4b09      	ldr	r3, [pc, #36]	@ (8000b04 <MX_TIM1_Init+0x11c>)
 8000ade:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000ae0:	2309      	movs	r3, #9
 8000ae2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aec:	463b      	mov	r3, r7
 8000aee:	4619      	mov	r1, r3
 8000af0:	4805      	ldr	r0, [pc, #20]	@ (8000b08 <MX_TIM1_Init+0x120>)
 8000af2:	f000 fb92 	bl	800121a <LL_GPIO_Init>

}
 8000af6:	bf00      	nop
 8000af8:	3760      	adds	r7, #96	@ 0x60
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40012c00 	.word	0x40012c00
 8000b04:	04010001 	.word	0x04010001
 8000b08:	40010800 	.word	0x40010800

08000b0c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08c      	sub	sp, #48	@ 0x30
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000b12:	f107 0314 	add.w	r3, r7, #20
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	605a      	str	r2, [r3, #4]
 8000b1c:	609a      	str	r2, [r3, #8]
 8000b1e:	60da      	str	r2, [r3, #12]
 8000b20:	611a      	str	r2, [r3, #16]
 8000b22:	615a      	str	r2, [r3, #20]
 8000b24:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b26:	463b      	mov	r3, r7
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]
 8000b32:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8000b34:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000b38:	f7ff fcf6 	bl	8000528 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8000b3c:	2004      	movs	r0, #4
 8000b3e:	f7ff fcf3 	bl	8000528 <LL_APB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8000b42:	4b1a      	ldr	r3, [pc, #104]	@ (8000bac <MX_USART1_UART_Init+0xa0>)
 8000b44:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000b46:	2309      	movs	r3, #9
 8000b48:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000b4a:	2303      	movs	r3, #3
 8000b4c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b52:	463b      	mov	r3, r7
 8000b54:	4619      	mov	r1, r3
 8000b56:	4816      	ldr	r0, [pc, #88]	@ (8000bb0 <MX_USART1_UART_Init+0xa4>)
 8000b58:	f000 fb5f 	bl	800121a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8000b5c:	4b15      	ldr	r3, [pc, #84]	@ (8000bb4 <MX_USART1_UART_Init+0xa8>)
 8000b5e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8000b60:	2304      	movs	r3, #4
 8000b62:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b64:	463b      	mov	r3, r7
 8000b66:	4619      	mov	r1, r3
 8000b68:	4811      	ldr	r0, [pc, #68]	@ (8000bb0 <MX_USART1_UART_Init+0xa4>)
 8000b6a:	f000 fb56 	bl	800121a <LL_GPIO_Init>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000b6e:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000b72:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000b74:	2300      	movs	r3, #0
 8000b76:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000b80:	230c      	movs	r3, #12
 8000b82:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000b84:	2300      	movs	r3, #0
 8000b86:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_USART_Init(USART1, &USART_InitStruct);
 8000b8c:	f107 0314 	add.w	r3, r7, #20
 8000b90:	4619      	mov	r1, r3
 8000b92:	4809      	ldr	r0, [pc, #36]	@ (8000bb8 <MX_USART1_UART_Init+0xac>)
 8000b94:	f001 f826 	bl	8001be4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8000b98:	4807      	ldr	r0, [pc, #28]	@ (8000bb8 <MX_USART1_UART_Init+0xac>)
 8000b9a:	f7ff fdc5 	bl	8000728 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8000b9e:	4806      	ldr	r0, [pc, #24]	@ (8000bb8 <MX_USART1_UART_Init+0xac>)
 8000ba0:	f7ff fdb3 	bl	800070a <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ba4:	bf00      	nop
 8000ba6:	3730      	adds	r7, #48	@ 0x30
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	04020002 	.word	0x04020002
 8000bb0:	40010800 	.word	0x40010800
 8000bb4:	04040004 	.word	0x04040004
 8000bb8:	40013800 	.word	0x40013800

08000bbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b088      	sub	sp, #32
 8000bc0:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000bc2:	f107 0318 	add.w	r3, r7, #24
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bcc:	1d3b      	adds	r3, r7, #4
 8000bce:	2200      	movs	r2, #0
 8000bd0:	601a      	str	r2, [r3, #0]
 8000bd2:	605a      	str	r2, [r3, #4]
 8000bd4:	609a      	str	r2, [r3, #8]
 8000bd6:	60da      	str	r2, [r3, #12]
 8000bd8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 8000bda:	2020      	movs	r0, #32
 8000bdc:	f7ff fca4 	bl	8000528 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8000be0:	2004      	movs	r0, #4
 8000be2:	f7ff fca1 	bl	8000528 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8000be6:	2008      	movs	r0, #8
 8000be8:	f7ff fc9e 	bl	8000528 <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2);
 8000bec:	f240 7107 	movw	r1, #1799	@ 0x707
 8000bf0:	4816      	ldr	r0, [pc, #88]	@ (8000c4c <MX_GPIO_Init+0x90>)
 8000bf2:	f7ff fde0 	bl	80007b6 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTA, LL_GPIO_AF_EXTI_LINE1);
 8000bf6:	f44f 0170 	mov.w	r1, #15728640	@ 0xf00000
 8000bfa:	2000      	movs	r0, #0
 8000bfc:	f7ff fdfa 	bl	80007f4 <LL_GPIO_AF_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 8000c00:	2302      	movs	r3, #2
 8000c02:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000c04:	2301      	movs	r3, #1
 8000c06:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000c10:	f107 0318 	add.w	r3, r7, #24
 8000c14:	4618      	mov	r0, r3
 8000c16:	f000 f9c9 	bl	8000fac <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_1, LL_GPIO_MODE_FLOATING);
 8000c1a:	2204      	movs	r2, #4
 8000c1c:	f240 2102 	movw	r1, #514	@ 0x202
 8000c20:	480b      	ldr	r0, [pc, #44]	@ (8000c50 <MX_GPIO_Init+0x94>)
 8000c22:	f7ff fd96 	bl	8000752 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2;
 8000c26:	f240 7307 	movw	r3, #1799	@ 0x707
 8000c2a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000c30:	2302      	movs	r3, #2
 8000c32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c38:	1d3b      	adds	r3, r7, #4
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4803      	ldr	r0, [pc, #12]	@ (8000c4c <MX_GPIO_Init+0x90>)
 8000c3e:	f000 faec 	bl	800121a <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c42:	bf00      	nop
 8000c44:	3720      	adds	r7, #32
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40010c00 	.word	0x40010c00
 8000c50:	40010800 	.word	0x40010800

08000c54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c58:	bf00      	nop
 8000c5a:	e7fd      	b.n	8000c58 <NMI_Handler+0x4>

08000c5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c60:	bf00      	nop
 8000c62:	e7fd      	b.n	8000c60 <HardFault_Handler+0x4>

08000c64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c68:	bf00      	nop
 8000c6a:	e7fd      	b.n	8000c68 <MemManage_Handler+0x4>

08000c6c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c70:	bf00      	nop
 8000c72:	e7fd      	b.n	8000c70 <BusFault_Handler+0x4>

08000c74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c78:	bf00      	nop
 8000c7a:	e7fd      	b.n	8000c78 <UsageFault_Handler+0x4>

08000c7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bc80      	pop	{r7}
 8000c86:	4770      	bx	lr

08000c88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bc80      	pop	{r7}
 8000c92:	4770      	bx	lr

08000c94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bc80      	pop	{r7}
 8000c9e:	4770      	bx	lr

08000ca0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bc80      	pop	{r7}
 8000caa:	4770      	bx	lr

08000cac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bc80      	pop	{r7}
 8000cb6:	4770      	bx	lr

08000cb8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cb8:	f7ff fff8 	bl	8000cac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cbc:	480b      	ldr	r0, [pc, #44]	@ (8000cec <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000cbe:	490c      	ldr	r1, [pc, #48]	@ (8000cf0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000cc0:	4a0c      	ldr	r2, [pc, #48]	@ (8000cf4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000cc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc4:	e002      	b.n	8000ccc <LoopCopyDataInit>

08000cc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cca:	3304      	adds	r3, #4

08000ccc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ccc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd0:	d3f9      	bcc.n	8000cc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cd2:	4a09      	ldr	r2, [pc, #36]	@ (8000cf8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000cd4:	4c09      	ldr	r4, [pc, #36]	@ (8000cfc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd8:	e001      	b.n	8000cde <LoopFillZerobss>

08000cda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cdc:	3204      	adds	r2, #4

08000cde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce0:	d3fb      	bcc.n	8000cda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ce2:	f001 f81d 	bl	8001d20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ce6:	f7ff fdb3 	bl	8000850 <main>
  bx lr
 8000cea:	4770      	bx	lr
  ldr r0, =_sdata
 8000cec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf0:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000cf4:	08001db0 	.word	0x08001db0
  ldr r2, =_sbss
 8000cf8:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000cfc:	20000020 	.word	0x20000020

08000d00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d00:	e7fe      	b.n	8000d00 <ADC1_2_IRQHandler>

08000d02 <LL_ADC_REG_SetSequencerLength>:
{
 8000d02:	b480      	push	{r7}
 8000d04:	b083      	sub	sp, #12
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
 8000d0a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d10:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	431a      	orrs	r2, r3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8000d1c:	bf00      	nop
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bc80      	pop	{r7}
 8000d24:	4770      	bx	lr

08000d26 <LL_ADC_IsEnabled>:
  * @rmtoll CR2      ADON           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000d26:	b480      	push	{r7}
 8000d28:	b083      	sub	sp, #12
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	689b      	ldr	r3, [r3, #8]
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	bf0c      	ite	eq
 8000d3a:	2301      	moveq	r3, #1
 8000d3c:	2300      	movne	r3, #0
 8000d3e:	b2db      	uxtb	r3, r3
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bc80      	pop	{r7}
 8000d48:	4770      	bx	lr
	...

08000d4c <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8000d4c:	b590      	push	{r4, r7, lr}
 8000d4e:	b085      	sub	sp, #20
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8000d56:	2300      	movs	r3, #0
 8000d58:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 8000d5a:	4813      	ldr	r0, [pc, #76]	@ (8000da8 <LL_ADC_CommonInit+0x5c>)
 8000d5c:	f7ff ffe3 	bl	8000d26 <LL_ADC_IsEnabled>
 8000d60:	4604      	mov	r4, r0
 8000d62:	4812      	ldr	r0, [pc, #72]	@ (8000dac <LL_ADC_CommonInit+0x60>)
 8000d64:	f7ff ffdf 	bl	8000d26 <LL_ADC_IsEnabled>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	4323      	orrs	r3, r4
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d114      	bne.n	8000d9a <LL_ADC_CommonInit+0x4e>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d009      	beq.n	8000d8c <LL_ADC_CommonInit+0x40>
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	431a      	orrs	r2, r3
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	e008      	b.n	8000d9e <LL_ADC_CommonInit+0x52>
                 ADC_CommonInitStruct->Multimode
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	605a      	str	r2, [r3, #4]
 8000d98:	e001      	b.n	8000d9e <LL_ADC_CommonInit+0x52>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8000d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3714      	adds	r7, #20
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd90      	pop	{r4, r7, pc}
 8000da8:	40012400 	.word	0x40012400
 8000dac:	40012800 	.word	0x40012800

08000db0 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f7ff ffb1 	bl	8000d26 <LL_ADC_IsEnabled>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d112      	bne.n	8000df0 <LL_ADC_Init+0x40>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	431a      	orrs	r2, r3
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	605a      	str	r2, [r3, #4]
                 ADC_CR1_SCAN
              ,
                 ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	689b      	ldr	r3, [r3, #8]
 8000de0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	431a      	orrs	r2, r3
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	609a      	str	r2, [r3, #8]
 8000dee:	e001      	b.n	8000df4 <LL_ADC_Init+0x44>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8000df0:	2301      	movs	r3, #1
 8000df2:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8000df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3710      	adds	r7, #16
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b084      	sub	sp, #16
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
 8000e06:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8000e0c:	6878      	ldr	r0, [r7, #4]
 8000e0e:	f7ff ff8a 	bl	8000d26 <LL_ADC_IsEnabled>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d131      	bne.n	8000e7c <LL_ADC_REG_Init+0x7e>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 series, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d00c      	beq.n	8000e3a <LL_ADC_REG_Init+0x3c>
    {
      MODIFY_REG(ADCx->CR1,
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	6859      	ldr	r1, [r3, #4]
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	689b      	ldr	r3, [r3, #8]
 8000e30:	430b      	orrs	r3, r1
 8000e32:	431a      	orrs	r2, r3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	605a      	str	r2, [r3, #4]
 8000e38:	e008      	b.n	8000e4c <LL_ADC_REG_Init+0x4e>
                 | ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	431a      	orrs	r2, r3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	605a      	str	r2, [r3, #4]
                   ADC_REG_InitStruct->SequencerLength
                 | LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	689b      	ldr	r3, [r3, #8]
 8000e50:	f423 2360 	bic.w	r3, r3, #917504	@ 0xe0000
 8000e54:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8000e58:	683a      	ldr	r2, [r7, #0]
 8000e5a:	6811      	ldr	r1, [r2, #0]
 8000e5c:	683a      	ldr	r2, [r7, #0]
 8000e5e:	68d2      	ldr	r2, [r2, #12]
 8000e60:	4311      	orrs	r1, r2
 8000e62:	683a      	ldr	r2, [r7, #0]
 8000e64:	6912      	ldr	r2, [r2, #16]
 8000e66:	430a      	orrs	r2, r1
 8000e68:	431a      	orrs	r2, r3
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	4619      	mov	r1, r3
 8000e74:	6878      	ldr	r0, [r7, #4]
 8000e76:	f7ff ff44 	bl	8000d02 <LL_ADC_REG_SetSequencerLength>
 8000e7a:	e001      	b.n	8000e80 <LL_ADC_REG_Init+0x82>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8000e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3710      	adds	r7, #16
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
	...

08000e8c <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8000e94:	4b05      	ldr	r3, [pc, #20]	@ (8000eac <LL_EXTI_EnableIT_0_31+0x20>)
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	4904      	ldr	r1, [pc, #16]	@ (8000eac <LL_EXTI_EnableIT_0_31+0x20>)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	600b      	str	r3, [r1, #0]
}
 8000ea0:	bf00      	nop
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bc80      	pop	{r7}
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	40010400 	.word	0x40010400

08000eb0 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8000eb8:	4b05      	ldr	r3, [pc, #20]	@ (8000ed0 <LL_EXTI_DisableIT_0_31+0x20>)
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	43db      	mvns	r3, r3
 8000ec0:	4903      	ldr	r1, [pc, #12]	@ (8000ed0 <LL_EXTI_DisableIT_0_31+0x20>)
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	600b      	str	r3, [r1, #0]
}
 8000ec6:	bf00      	nop
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bc80      	pop	{r7}
 8000ece:	4770      	bx	lr
 8000ed0:	40010400 	.word	0x40010400

08000ed4 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8000edc:	4b05      	ldr	r3, [pc, #20]	@ (8000ef4 <LL_EXTI_EnableEvent_0_31+0x20>)
 8000ede:	685a      	ldr	r2, [r3, #4]
 8000ee0:	4904      	ldr	r1, [pc, #16]	@ (8000ef4 <LL_EXTI_EnableEvent_0_31+0x20>)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	604b      	str	r3, [r1, #4]

}
 8000ee8:	bf00      	nop
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bc80      	pop	{r7}
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	40010400 	.word	0x40010400

08000ef8 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8000f00:	4b05      	ldr	r3, [pc, #20]	@ (8000f18 <LL_EXTI_DisableEvent_0_31+0x20>)
 8000f02:	685a      	ldr	r2, [r3, #4]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	43db      	mvns	r3, r3
 8000f08:	4903      	ldr	r1, [pc, #12]	@ (8000f18 <LL_EXTI_DisableEvent_0_31+0x20>)
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	604b      	str	r3, [r1, #4]
}
 8000f0e:	bf00      	nop
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bc80      	pop	{r7}
 8000f16:	4770      	bx	lr
 8000f18:	40010400 	.word	0x40010400

08000f1c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8000f24:	4b05      	ldr	r3, [pc, #20]	@ (8000f3c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000f26:	689a      	ldr	r2, [r3, #8]
 8000f28:	4904      	ldr	r1, [pc, #16]	@ (8000f3c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	608b      	str	r3, [r1, #8]

}
 8000f30:	bf00      	nop
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bc80      	pop	{r7}
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	40010400 	.word	0x40010400

08000f40 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8000f48:	4b05      	ldr	r3, [pc, #20]	@ (8000f60 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8000f4a:	689a      	ldr	r2, [r3, #8]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	43db      	mvns	r3, r3
 8000f50:	4903      	ldr	r1, [pc, #12]	@ (8000f60 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8000f52:	4013      	ands	r3, r2
 8000f54:	608b      	str	r3, [r1, #8]

}
 8000f56:	bf00      	nop
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bc80      	pop	{r7}
 8000f5e:	4770      	bx	lr
 8000f60:	40010400 	.word	0x40010400

08000f64 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8000f6c:	4b05      	ldr	r3, [pc, #20]	@ (8000f84 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8000f6e:	68da      	ldr	r2, [r3, #12]
 8000f70:	4904      	ldr	r1, [pc, #16]	@ (8000f84 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4313      	orrs	r3, r2
 8000f76:	60cb      	str	r3, [r1, #12]
}
 8000f78:	bf00      	nop
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bc80      	pop	{r7}
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	40010400 	.word	0x40010400

08000f88 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8000f90:	4b05      	ldr	r3, [pc, #20]	@ (8000fa8 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8000f92:	68da      	ldr	r2, [r3, #12]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	43db      	mvns	r3, r3
 8000f98:	4903      	ldr	r1, [pc, #12]	@ (8000fa8 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	60cb      	str	r3, [r1, #12]
}
 8000f9e:	bf00      	nop
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bc80      	pop	{r7}
 8000fa6:	4770      	bx	lr
 8000fa8:	40010400 	.word	0x40010400

08000fac <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	791b      	ldrb	r3, [r3, #4]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d065      	beq.n	800108c <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d06b      	beq.n	80010a0 <LL_EXTI_Init+0xf4>
    {
      switch (EXTI_InitStruct->Mode)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	795b      	ldrb	r3, [r3, #5]
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d01c      	beq.n	800100a <LL_EXTI_Init+0x5e>
 8000fd0:	2b02      	cmp	r3, #2
 8000fd2:	dc25      	bgt.n	8001020 <LL_EXTI_Init+0x74>
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d002      	beq.n	8000fde <LL_EXTI_Init+0x32>
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d00b      	beq.n	8000ff4 <LL_EXTI_Init+0x48>
 8000fdc:	e020      	b.n	8001020 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff ff88 	bl	8000ef8 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff ff4d 	bl	8000e8c <LL_EXTI_EnableIT_0_31>
          break;
 8000ff2:	e018      	b.n	8001026 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff ff59 	bl	8000eb0 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff ff66 	bl	8000ed4 <LL_EXTI_EnableEvent_0_31>
          break;
 8001008:	e00d      	b.n	8001026 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff ff3c 	bl	8000e8c <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff ff5b 	bl	8000ed4 <LL_EXTI_EnableEvent_0_31>
          break;
 800101e:	e002      	b.n	8001026 <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 8001020:	2301      	movs	r3, #1
 8001022:	73fb      	strb	r3, [r7, #15]
          break;
 8001024:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	799b      	ldrb	r3, [r3, #6]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d038      	beq.n	80010a0 <LL_EXTI_Init+0xf4>
      {
        switch (EXTI_InitStruct->Trigger)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	799b      	ldrb	r3, [r3, #6]
 8001032:	2b03      	cmp	r3, #3
 8001034:	d01c      	beq.n	8001070 <LL_EXTI_Init+0xc4>
 8001036:	2b03      	cmp	r3, #3
 8001038:	dc25      	bgt.n	8001086 <LL_EXTI_Init+0xda>
 800103a:	2b01      	cmp	r3, #1
 800103c:	d002      	beq.n	8001044 <LL_EXTI_Init+0x98>
 800103e:	2b02      	cmp	r3, #2
 8001040:	d00b      	beq.n	800105a <LL_EXTI_Init+0xae>
 8001042:	e020      	b.n	8001086 <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff ff9d 	bl	8000f88 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff ff62 	bl	8000f1c <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8001058:	e022      	b.n	80010a0 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff ff6e 	bl	8000f40 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff ff7b 	bl	8000f64 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800106e:	e017      	b.n	80010a0 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff ff51 	bl	8000f1c <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff ff70 	bl	8000f64 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001084:	e00c      	b.n	80010a0 <LL_EXTI_Init+0xf4>
          default:
            status = ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	73fb      	strb	r3, [r7, #15]
            break;
 800108a:	e009      	b.n	80010a0 <LL_EXTI_Init+0xf4>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff ff0d 	bl	8000eb0 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff ff2c 	bl	8000ef8 <LL_EXTI_DisableEvent_0_31>
  }
  return status;
 80010a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3710      	adds	r7, #16
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <LL_GPIO_SetPinMode>:
{
 80010aa:	b490      	push	{r4, r7}
 80010ac:	b088      	sub	sp, #32
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	60f8      	str	r0, [r7, #12]
 80010b2:	60b9      	str	r1, [r7, #8]
 80010b4:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	461a      	mov	r2, r3
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	0e1b      	lsrs	r3, r3, #24
 80010be:	4413      	add	r3, r2
 80010c0:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 80010c2:	6822      	ldr	r2, [r4, #0]
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	fa93 f3a3 	rbit	r3, r3
 80010ce:	613b      	str	r3, [r7, #16]
  return result;
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	fab3 f383 	clz	r3, r3
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	210f      	movs	r1, #15
 80010dc:	fa01 f303 	lsl.w	r3, r1, r3
 80010e0:	43db      	mvns	r3, r3
 80010e2:	401a      	ands	r2, r3
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	fa93 f3a3 	rbit	r3, r3
 80010ee:	61bb      	str	r3, [r7, #24]
  return result;
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	fab3 f383 	clz	r3, r3
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	6879      	ldr	r1, [r7, #4]
 80010fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001100:	4313      	orrs	r3, r2
 8001102:	6023      	str	r3, [r4, #0]
}
 8001104:	bf00      	nop
 8001106:	3720      	adds	r7, #32
 8001108:	46bd      	mov	sp, r7
 800110a:	bc90      	pop	{r4, r7}
 800110c:	4770      	bx	lr

0800110e <LL_GPIO_SetPinSpeed>:
{
 800110e:	b490      	push	{r4, r7}
 8001110:	b088      	sub	sp, #32
 8001112:	af00      	add	r7, sp, #0
 8001114:	60f8      	str	r0, [r7, #12]
 8001116:	60b9      	str	r1, [r7, #8]
 8001118:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	461a      	mov	r2, r3
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	0e1b      	lsrs	r3, r3, #24
 8001122:	4413      	add	r3, r2
 8001124:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8001126:	6822      	ldr	r2, [r4, #0]
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	fa93 f3a3 	rbit	r3, r3
 8001132:	613b      	str	r3, [r7, #16]
  return result;
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	fab3 f383 	clz	r3, r3
 800113a:	b2db      	uxtb	r3, r3
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	2103      	movs	r1, #3
 8001140:	fa01 f303 	lsl.w	r3, r1, r3
 8001144:	43db      	mvns	r3, r3
 8001146:	401a      	ands	r2, r3
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	fa93 f3a3 	rbit	r3, r3
 8001152:	61bb      	str	r3, [r7, #24]
  return result;
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	fab3 f383 	clz	r3, r3
 800115a:	b2db      	uxtb	r3, r3
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	6879      	ldr	r1, [r7, #4]
 8001160:	fa01 f303 	lsl.w	r3, r1, r3
 8001164:	4313      	orrs	r3, r2
 8001166:	6023      	str	r3, [r4, #0]
}
 8001168:	bf00      	nop
 800116a:	3720      	adds	r7, #32
 800116c:	46bd      	mov	sp, r7
 800116e:	bc90      	pop	{r4, r7}
 8001170:	4770      	bx	lr

08001172 <LL_GPIO_SetPinOutputType>:
{
 8001172:	b490      	push	{r4, r7}
 8001174:	b088      	sub	sp, #32
 8001176:	af00      	add	r7, sp, #0
 8001178:	60f8      	str	r0, [r7, #12]
 800117a:	60b9      	str	r1, [r7, #8]
 800117c:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	461a      	mov	r2, r3
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	0e1b      	lsrs	r3, r3, #24
 8001186:	4413      	add	r3, r2
 8001188:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 800118a:	6822      	ldr	r2, [r4, #0]
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	fa93 f3a3 	rbit	r3, r3
 8001196:	613b      	str	r3, [r7, #16]
  return result;
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	fab3 f383 	clz	r3, r3
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	2104      	movs	r1, #4
 80011a4:	fa01 f303 	lsl.w	r3, r1, r3
 80011a8:	43db      	mvns	r3, r3
 80011aa:	401a      	ands	r2, r3
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	fa93 f3a3 	rbit	r3, r3
 80011b6:	61bb      	str	r3, [r7, #24]
  return result;
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	fab3 f383 	clz	r3, r3
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	6879      	ldr	r1, [r7, #4]
 80011c4:	fa01 f303 	lsl.w	r3, r1, r3
 80011c8:	4313      	orrs	r3, r2
 80011ca:	6023      	str	r3, [r4, #0]
}
 80011cc:	bf00      	nop
 80011ce:	3720      	adds	r7, #32
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bc90      	pop	{r4, r7}
 80011d4:	4770      	bx	lr

080011d6 <LL_GPIO_SetPinPull>:
{
 80011d6:	b480      	push	{r7}
 80011d8:	b087      	sub	sp, #28
 80011da:	af00      	add	r7, sp, #0
 80011dc:	60f8      	str	r0, [r7, #12]
 80011de:	60b9      	str	r1, [r7, #8]
 80011e0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	68da      	ldr	r2, [r3, #12]
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	0a1b      	lsrs	r3, r3, #8
 80011ea:	43db      	mvns	r3, r3
 80011ec:	401a      	ands	r2, r3
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	0a1b      	lsrs	r3, r3, #8
 80011f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	fa93 f3a3 	rbit	r3, r3
 80011fa:	613b      	str	r3, [r7, #16]
  return result;
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	fab3 f383 	clz	r3, r3
 8001202:	b2db      	uxtb	r3, r3
 8001204:	4619      	mov	r1, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	408b      	lsls	r3, r1
 800120a:	431a      	orrs	r2, r3
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	60da      	str	r2, [r3, #12]
}
 8001210:	bf00      	nop
 8001212:	371c      	adds	r7, #28
 8001214:	46bd      	mov	sp, r7
 8001216:	bc80      	pop	{r7}
 8001218:	4770      	bx	lr

0800121a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b088      	sub	sp, #32
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
 8001222:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	021b      	lsls	r3, r3, #8
 800122a:	0c1b      	lsrs	r3, r3, #16
 800122c:	617b      	str	r3, [r7, #20]
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	fa93 f3a3 	rbit	r3, r3
 8001238:	60fb      	str	r3, [r7, #12]
  return result;
 800123a:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 800123c:	fab3 f383 	clz	r3, r3
 8001240:	b2db      	uxtb	r3, r3
 8001242:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 8001244:	e044      	b.n	80012d0 <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8001246:	2201      	movs	r2, #1
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	409a      	lsls	r2, r3
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	4013      	ands	r3, r2
 8001250:	2b00      	cmp	r3, #0
 8001252:	d03a      	beq.n	80012ca <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	2b07      	cmp	r3, #7
 8001258:	d806      	bhi.n	8001268 <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 800125a:	f240 1201 	movw	r2, #257	@ 0x101
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	61bb      	str	r3, [r7, #24]
 8001266:	e008      	b.n	800127a <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	3b08      	subs	r3, #8
 800126c:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001278:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	2b08      	cmp	r3, #8
 8001280:	d106      	bne.n	8001290 <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	691b      	ldr	r3, [r3, #16]
 8001286:	461a      	mov	r2, r3
 8001288:	69b9      	ldr	r1, [r7, #24]
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f7ff ffa3 	bl	80011d6 <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	461a      	mov	r2, r3
 8001296:	69b9      	ldr	r1, [r7, #24]
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f7ff ff06 	bl	80010aa <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d003      	beq.n	80012ae <LL_GPIO_Init+0x94>
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	2b09      	cmp	r3, #9
 80012ac:	d10d      	bne.n	80012ca <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	461a      	mov	r2, r3
 80012b4:	69b9      	ldr	r1, [r7, #24]
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f7ff ff29 	bl	800110e <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	461a      	mov	r2, r3
 80012c2:	69b9      	ldr	r1, [r7, #24]
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f7ff ff54 	bl	8001172 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	3301      	adds	r3, #1
 80012ce:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 80012d0:	697a      	ldr	r2, [r7, #20]
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	fa22 f303 	lsr.w	r3, r2, r3
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d1b4      	bne.n	8001246 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 80012dc:	2300      	movs	r3, #0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3720      	adds	r7, #32
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
	...

080012e8 <LL_RCC_GetSysClkSource>:
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80012ec:	4b03      	ldr	r3, [pc, #12]	@ (80012fc <LL_RCC_GetSysClkSource+0x14>)
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f003 030c 	and.w	r3, r3, #12
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bc80      	pop	{r7}
 80012fa:	4770      	bx	lr
 80012fc:	40021000 	.word	0x40021000

08001300 <LL_RCC_GetAHBPrescaler>:
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001304:	4b03      	ldr	r3, [pc, #12]	@ (8001314 <LL_RCC_GetAHBPrescaler+0x14>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800130c:	4618      	mov	r0, r3
 800130e:	46bd      	mov	sp, r7
 8001310:	bc80      	pop	{r7}
 8001312:	4770      	bx	lr
 8001314:	40021000 	.word	0x40021000

08001318 <LL_RCC_GetAPB1Prescaler>:
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800131c:	4b03      	ldr	r3, [pc, #12]	@ (800132c <LL_RCC_GetAPB1Prescaler+0x14>)
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8001324:	4618      	mov	r0, r3
 8001326:	46bd      	mov	sp, r7
 8001328:	bc80      	pop	{r7}
 800132a:	4770      	bx	lr
 800132c:	40021000 	.word	0x40021000

08001330 <LL_RCC_GetAPB2Prescaler>:
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001334:	4b03      	ldr	r3, [pc, #12]	@ (8001344 <LL_RCC_GetAPB2Prescaler+0x14>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800133c:	4618      	mov	r0, r3
 800133e:	46bd      	mov	sp, r7
 8001340:	bc80      	pop	{r7}
 8001342:	4770      	bx	lr
 8001344:	40021000 	.word	0x40021000

08001348 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 800134c:	4b03      	ldr	r3, [pc, #12]	@ (800135c <LL_RCC_PLL_GetMainSource+0x14>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 8001354:	4618      	mov	r0, r3
 8001356:	46bd      	mov	sp, r7
 8001358:	bc80      	pop	{r7}
 800135a:	4770      	bx	lr
 800135c:	40021000 	.word	0x40021000

08001360 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8001364:	4b03      	ldr	r3, [pc, #12]	@ (8001374 <LL_RCC_PLL_GetMultiplicator+0x14>)
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
}
 800136c:	4618      	mov	r0, r3
 800136e:	46bd      	mov	sp, r7
 8001370:	bc80      	pop	{r7}
 8001372:	4770      	bx	lr
 8001374:	40021000 	.word	0x40021000

08001378 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 800137c:	4b04      	ldr	r3, [pc, #16]	@ (8001390 <LL_RCC_PLL_GetPrediv+0x18>)
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	0c5b      	lsrs	r3, r3, #17
 8001382:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 8001386:	4618      	mov	r0, r3
 8001388:	46bd      	mov	sp, r7
 800138a:	bc80      	pop	{r7}
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	40021000 	.word	0x40021000

08001394 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800139c:	f000 f820 	bl	80013e0 <RCC_GetSystemClockFreq>
 80013a0:	4602      	mov	r2, r0
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f000 f83e 	bl	800142c <RCC_GetHCLKClockFreq>
 80013b0:	4602      	mov	r2, r0
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f000 f84c 	bl	8001458 <RCC_GetPCLK1ClockFreq>
 80013c0:	4602      	mov	r2, r0
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f000 f858 	bl	8001480 <RCC_GetPCLK2ClockFreq>
 80013d0:	4602      	mov	r2, r0
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	60da      	str	r2, [r3, #12]
}
 80013d6:	bf00      	nop
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
	...

080013e0 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80013e6:	2300      	movs	r3, #0
 80013e8:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80013ea:	f7ff ff7d 	bl	80012e8 <LL_RCC_GetSysClkSource>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b08      	cmp	r3, #8
 80013f2:	d00c      	beq.n	800140e <RCC_GetSystemClockFreq+0x2e>
 80013f4:	2b08      	cmp	r3, #8
 80013f6:	d80e      	bhi.n	8001416 <RCC_GetSystemClockFreq+0x36>
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d002      	beq.n	8001402 <RCC_GetSystemClockFreq+0x22>
 80013fc:	2b04      	cmp	r3, #4
 80013fe:	d003      	beq.n	8001408 <RCC_GetSystemClockFreq+0x28>
 8001400:	e009      	b.n	8001416 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8001402:	4b09      	ldr	r3, [pc, #36]	@ (8001428 <RCC_GetSystemClockFreq+0x48>)
 8001404:	607b      	str	r3, [r7, #4]
      break;
 8001406:	e009      	b.n	800141c <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8001408:	4b07      	ldr	r3, [pc, #28]	@ (8001428 <RCC_GetSystemClockFreq+0x48>)
 800140a:	607b      	str	r3, [r7, #4]
      break;
 800140c:	e006      	b.n	800141c <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800140e:	f000 f84b 	bl	80014a8 <RCC_PLL_GetFreqDomain_SYS>
 8001412:	6078      	str	r0, [r7, #4]
      break;
 8001414:	e002      	b.n	800141c <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 8001416:	4b04      	ldr	r3, [pc, #16]	@ (8001428 <RCC_GetSystemClockFreq+0x48>)
 8001418:	607b      	str	r3, [r7, #4]
      break;
 800141a:	bf00      	nop
  }

  return frequency;
 800141c:	687b      	ldr	r3, [r7, #4]
}
 800141e:	4618      	mov	r0, r3
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	007a1200 	.word	0x007a1200

0800142c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001434:	f7ff ff64 	bl	8001300 <LL_RCC_GetAHBPrescaler>
 8001438:	4603      	mov	r3, r0
 800143a:	091b      	lsrs	r3, r3, #4
 800143c:	f003 030f 	and.w	r3, r3, #15
 8001440:	4a04      	ldr	r2, [pc, #16]	@ (8001454 <RCC_GetHCLKClockFreq+0x28>)
 8001442:	5cd3      	ldrb	r3, [r2, r3]
 8001444:	461a      	mov	r2, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	40d3      	lsrs	r3, r2
}
 800144a:	4618      	mov	r0, r3
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	08001d90 	.word	0x08001d90

08001458 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001460:	f7ff ff5a 	bl	8001318 <LL_RCC_GetAPB1Prescaler>
 8001464:	4603      	mov	r3, r0
 8001466:	0a1b      	lsrs	r3, r3, #8
 8001468:	4a04      	ldr	r2, [pc, #16]	@ (800147c <RCC_GetPCLK1ClockFreq+0x24>)
 800146a:	5cd3      	ldrb	r3, [r2, r3]
 800146c:	461a      	mov	r2, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	40d3      	lsrs	r3, r2
}
 8001472:	4618      	mov	r0, r3
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	08001da0 	.word	0x08001da0

08001480 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8001488:	f7ff ff52 	bl	8001330 <LL_RCC_GetAPB2Prescaler>
 800148c:	4603      	mov	r3, r0
 800148e:	0adb      	lsrs	r3, r3, #11
 8001490:	4a04      	ldr	r2, [pc, #16]	@ (80014a4 <RCC_GetPCLK2ClockFreq+0x24>)
 8001492:	5cd3      	ldrb	r3, [r2, r3]
 8001494:	461a      	mov	r2, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	40d3      	lsrs	r3, r2
}
 800149a:	4618      	mov	r0, r3
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	08001da0 	.word	0x08001da0

080014a8 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 80014ae:	2300      	movs	r3, #0
 80014b0:	607b      	str	r3, [r7, #4]
 80014b2:	2300      	movs	r3, #0
 80014b4:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 80014b6:	f7ff ff47 	bl	8001348 <LL_RCC_PLL_GetMainSource>
 80014ba:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d004      	beq.n	80014cc <RCC_PLL_GetFreqDomain_SYS+0x24>
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014c8:	d003      	beq.n	80014d2 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80014ca:	e00b      	b.n	80014e4 <RCC_PLL_GetFreqDomain_SYS+0x3c>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 80014cc:	4b0d      	ldr	r3, [pc, #52]	@ (8001504 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 80014ce:	607b      	str	r3, [r7, #4]
      break;
 80014d0:	e00b      	b.n	80014ea <RCC_PLL_GetFreqDomain_SYS+0x42>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 80014d2:	f7ff ff51 	bl	8001378 <LL_RCC_PLL_GetPrediv>
 80014d6:	4603      	mov	r3, r0
 80014d8:	3301      	adds	r3, #1
 80014da:	4a0b      	ldr	r2, [pc, #44]	@ (8001508 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 80014dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80014e0:	607b      	str	r3, [r7, #4]
      break;
 80014e2:	e002      	b.n	80014ea <RCC_PLL_GetFreqDomain_SYS+0x42>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 80014e4:	4b07      	ldr	r3, [pc, #28]	@ (8001504 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 80014e6:	607b      	str	r3, [r7, #4]
      break;
 80014e8:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 80014ea:	f7ff ff39 	bl	8001360 <LL_RCC_PLL_GetMultiplicator>
 80014ee:	4603      	mov	r3, r0
 80014f0:	0c9b      	lsrs	r3, r3, #18
 80014f2:	3302      	adds	r3, #2
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	fb02 f303 	mul.w	r3, r2, r3
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	003d0900 	.word	0x003d0900
 8001508:	007a1200 	.word	0x007a1200

0800150c <LL_TIM_SetPrescaler>:
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	683a      	ldr	r2, [r7, #0]
 800151a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800151c:	bf00      	nop
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	bc80      	pop	{r7}
 8001524:	4770      	bx	lr

08001526 <LL_TIM_SetAutoReload>:
{
 8001526:	b480      	push	{r7}
 8001528:	b083      	sub	sp, #12
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
 800152e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	683a      	ldr	r2, [r7, #0]
 8001534:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8001536:	bf00      	nop
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr

08001540 <LL_TIM_SetRepetitionCounter>:
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	683a      	ldr	r2, [r7, #0]
 800154e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001550:	bf00      	nop
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	bc80      	pop	{r7}
 8001558:	4770      	bx	lr

0800155a <LL_TIM_OC_SetCompareCH1>:
{
 800155a:	b480      	push	{r7}
 800155c:	b083      	sub	sp, #12
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
 8001562:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	683a      	ldr	r2, [r7, #0]
 8001568:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800156a:	bf00      	nop
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	bc80      	pop	{r7}
 8001572:	4770      	bx	lr

08001574 <LL_TIM_OC_SetCompareCH2>:
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	683a      	ldr	r2, [r7, #0]
 8001582:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001584:	bf00      	nop
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	bc80      	pop	{r7}
 800158c:	4770      	bx	lr

0800158e <LL_TIM_OC_SetCompareCH3>:
{
 800158e:	b480      	push	{r7}
 8001590:	b083      	sub	sp, #12
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
 8001596:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	683a      	ldr	r2, [r7, #0]
 800159c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800159e:	bf00      	nop
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bc80      	pop	{r7}
 80015a6:	4770      	bx	lr

080015a8 <LL_TIM_OC_SetCompareCH4>:
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	683a      	ldr	r2, [r7, #0]
 80015b6:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	bc80      	pop	{r7}
 80015c0:	4770      	bx	lr

080015c2 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80015c2:	b480      	push	{r7}
 80015c4:	b083      	sub	sp, #12
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	695b      	ldr	r3, [r3, #20]
 80015ce:	f043 0201 	orr.w	r2, r3, #1
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	615a      	str	r2, [r3, #20]
}
 80015d6:	bf00      	nop
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	bc80      	pop	{r7}
 80015de:	4770      	bx	lr

080015e0 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4a27      	ldr	r2, [pc, #156]	@ (8001690 <LL_TIM_Init+0xb0>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d00b      	beq.n	8001610 <LL_TIM_Init+0x30>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80015fe:	d007      	beq.n	8001610 <LL_TIM_Init+0x30>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	4a24      	ldr	r2, [pc, #144]	@ (8001694 <LL_TIM_Init+0xb4>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d003      	beq.n	8001610 <LL_TIM_Init+0x30>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	4a23      	ldr	r2, [pc, #140]	@ (8001698 <LL_TIM_Init+0xb8>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d106      	bne.n	800161e <LL_TIM_Init+0x3e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	4313      	orrs	r3, r2
 800161c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a1b      	ldr	r2, [pc, #108]	@ (8001690 <LL_TIM_Init+0xb0>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d00b      	beq.n	800163e <LL_TIM_Init+0x5e>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800162c:	d007      	beq.n	800163e <LL_TIM_Init+0x5e>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4a18      	ldr	r2, [pc, #96]	@ (8001694 <LL_TIM_Init+0xb4>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d003      	beq.n	800163e <LL_TIM_Init+0x5e>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4a17      	ldr	r2, [pc, #92]	@ (8001698 <LL_TIM_Init+0xb8>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d106      	bne.n	800164c <LL_TIM_Init+0x6c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	4313      	orrs	r3, r2
 800164a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	4619      	mov	r1, r3
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f7ff ff64 	bl	8001526 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	881b      	ldrh	r3, [r3, #0]
 8001662:	4619      	mov	r1, r3
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f7ff ff51 	bl	800150c <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4a08      	ldr	r2, [pc, #32]	@ (8001690 <LL_TIM_Init+0xb0>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d105      	bne.n	800167e <LL_TIM_Init+0x9e>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	691b      	ldr	r3, [r3, #16]
 8001676:	4619      	mov	r1, r3
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f7ff ff61 	bl	8001540 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f7ff ff9f 	bl	80015c2 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	3710      	adds	r7, #16
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40012c00 	.word	0x40012c00
 8001694:	40000400 	.word	0x40000400
 8001698:	40000800 	.word	0x40000800

0800169c <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b086      	sub	sp, #24
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	60b9      	str	r1, [r7, #8]
 80016a6:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80016b2:	d027      	beq.n	8001704 <LL_TIM_OC_Init+0x68>
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80016ba:	d82a      	bhi.n	8001712 <LL_TIM_OC_Init+0x76>
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80016c2:	d018      	beq.n	80016f6 <LL_TIM_OC_Init+0x5a>
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80016ca:	d822      	bhi.n	8001712 <LL_TIM_OC_Init+0x76>
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d003      	beq.n	80016da <LL_TIM_OC_Init+0x3e>
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	2b10      	cmp	r3, #16
 80016d6:	d007      	beq.n	80016e8 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 80016d8:	e01b      	b.n	8001712 <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80016da:	6879      	ldr	r1, [r7, #4]
 80016dc:	68f8      	ldr	r0, [r7, #12]
 80016de:	f000 f85f 	bl	80017a0 <OC1Config>
 80016e2:	4603      	mov	r3, r0
 80016e4:	75fb      	strb	r3, [r7, #23]
      break;
 80016e6:	e015      	b.n	8001714 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80016e8:	6879      	ldr	r1, [r7, #4]
 80016ea:	68f8      	ldr	r0, [r7, #12]
 80016ec:	f000 f8be 	bl	800186c <OC2Config>
 80016f0:	4603      	mov	r3, r0
 80016f2:	75fb      	strb	r3, [r7, #23]
      break;
 80016f4:	e00e      	b.n	8001714 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80016f6:	6879      	ldr	r1, [r7, #4]
 80016f8:	68f8      	ldr	r0, [r7, #12]
 80016fa:	f000 f921 	bl	8001940 <OC3Config>
 80016fe:	4603      	mov	r3, r0
 8001700:	75fb      	strb	r3, [r7, #23]
      break;
 8001702:	e007      	b.n	8001714 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8001704:	6879      	ldr	r1, [r7, #4]
 8001706:	68f8      	ldr	r0, [r7, #12]
 8001708:	f000 f984 	bl	8001a14 <OC4Config>
 800170c:	4603      	mov	r3, r0
 800170e:	75fb      	strb	r3, [r7, #23]
      break;
 8001710:	e000      	b.n	8001714 <LL_TIM_OC_Init+0x78>
      break;
 8001712:	bf00      	nop
  }

  return result;
 8001714:	7dfb      	ldrb	r3, [r7, #23]
}
 8001716:	4618      	mov	r0, r3
 8001718:	3718      	adds	r7, #24
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, const LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 800171e:	b480      	push	{r7}
 8001720:	b085      	sub	sp, #20
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
 8001726:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 8001728:	2300      	movs	r3, #0
 800172a:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001732:	683a      	ldr	r2, [r7, #0]
 8001734:	7b12      	ldrb	r2, [r2, #12]
 8001736:	4313      	orrs	r3, r2
 8001738:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	4313      	orrs	r3, r2
 8001746:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	4313      	orrs	r3, r2
 8001754:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4313      	orrs	r3, r2
 8001762:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800176a:	683a      	ldr	r2, [r7, #0]
 800176c:	89d2      	ldrh	r2, [r2, #14]
 800176e:	4313      	orrs	r3, r2
 8001770:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	691b      	ldr	r3, [r3, #16]
 800177c:	4313      	orrs	r3, r2
 800177e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	695b      	ldr	r3, [r3, #20]
 800178a:	4313      	orrs	r3, r2
 800178c:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	68fa      	ldr	r2, [r7, #12]
 8001792:	645a      	str	r2, [r3, #68]	@ 0x44

  return SUCCESS;
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3714      	adds	r7, #20
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr

080017a0 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6a1b      	ldr	r3, [r3, #32]
 80017ae:	f023 0201 	bic.w	r2, r3, #1
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6a1b      	ldr	r3, [r3, #32]
 80017ba:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	699b      	ldr	r3, [r3, #24]
 80017c6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	f023 0303 	bic.w	r3, r3, #3
 80017ce:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4313      	orrs	r3, r2
 80017dc:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	f023 0202 	bic.w	r2, r3, #2
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	691b      	ldr	r3, [r3, #16]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	f023 0201 	bic.w	r2, r3, #1
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a1a      	ldr	r2, [pc, #104]	@ (8001868 <OC1Config+0xc8>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d11e      	bne.n	8001840 <OC1Config+0xa0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	f023 0208 	bic.w	r2, r3, #8
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	695b      	ldr	r3, [r3, #20]
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	4313      	orrs	r3, r2
 8001810:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	f023 0204 	bic.w	r2, r3, #4
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	4313      	orrs	r3, r2
 8001820:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	699b      	ldr	r3, [r3, #24]
 800182c:	4313      	orrs	r3, r2
 800182e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	69db      	ldr	r3, [r3, #28]
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	4313      	orrs	r3, r2
 800183e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	68fa      	ldr	r2, [r7, #12]
 800184a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	4619      	mov	r1, r3
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f7ff fe81 	bl	800155a <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	697a      	ldr	r2, [r7, #20]
 800185c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800185e:	2300      	movs	r3, #0
}
 8001860:	4618      	mov	r0, r3
 8001862:	3718      	adds	r7, #24
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	40012c00 	.word	0x40012c00

0800186c <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b086      	sub	sp, #24
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6a1b      	ldr	r3, [r3, #32]
 800187a:	f023 0210 	bic.w	r2, r3, #16
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6a1b      	ldr	r3, [r3, #32]
 8001886:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	699b      	ldr	r3, [r3, #24]
 8001892:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800189a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	021b      	lsls	r3, r3, #8
 80018a8:	4313      	orrs	r3, r2
 80018aa:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	f023 0220 	bic.w	r2, r3, #32
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	691b      	ldr	r3, [r3, #16]
 80018b6:	011b      	lsls	r3, r3, #4
 80018b8:	4313      	orrs	r3, r2
 80018ba:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	f023 0210 	bic.w	r2, r3, #16
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	011b      	lsls	r3, r3, #4
 80018c8:	4313      	orrs	r3, r2
 80018ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	4a1b      	ldr	r2, [pc, #108]	@ (800193c <OC2Config+0xd0>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d11f      	bne.n	8001914 <OC2Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	695b      	ldr	r3, [r3, #20]
 80018de:	019b      	lsls	r3, r3, #6
 80018e0:	4313      	orrs	r3, r2
 80018e2:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	019b      	lsls	r3, r3, #6
 80018f0:	4313      	orrs	r3, r2
 80018f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	699b      	ldr	r3, [r3, #24]
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	4313      	orrs	r3, r2
 8001902:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	69db      	ldr	r3, [r3, #28]
 800190e:	00db      	lsls	r3, r3, #3
 8001910:	4313      	orrs	r3, r2
 8001912:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	68fa      	ldr	r2, [r7, #12]
 800191e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	4619      	mov	r1, r3
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f7ff fe24 	bl	8001574 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	697a      	ldr	r2, [r7, #20]
 8001930:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001932:	2300      	movs	r3, #0
}
 8001934:	4618      	mov	r0, r3
 8001936:	3718      	adds	r7, #24
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40012c00 	.word	0x40012c00

08001940 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b086      	sub	sp, #24
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a1b      	ldr	r3, [r3, #32]
 800194e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6a1b      	ldr	r3, [r3, #32]
 800195a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	69db      	ldr	r3, [r3, #28]
 8001966:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f023 0303 	bic.w	r3, r3, #3
 800196e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4313      	orrs	r3, r2
 800197c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	691b      	ldr	r3, [r3, #16]
 8001988:	021b      	lsls	r3, r3, #8
 800198a:	4313      	orrs	r3, r2
 800198c:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	021b      	lsls	r3, r3, #8
 800199a:	4313      	orrs	r3, r2
 800199c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a1b      	ldr	r2, [pc, #108]	@ (8001a10 <OC3Config+0xd0>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d11f      	bne.n	80019e6 <OC3Config+0xa6>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	695b      	ldr	r3, [r3, #20]
 80019b0:	029b      	lsls	r3, r3, #10
 80019b2:	4313      	orrs	r3, r2
 80019b4:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	029b      	lsls	r3, r3, #10
 80019c2:	4313      	orrs	r3, r2
 80019c4:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	699b      	ldr	r3, [r3, #24]
 80019d0:	011b      	lsls	r3, r3, #4
 80019d2:	4313      	orrs	r3, r2
 80019d4:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	69db      	ldr	r3, [r3, #28]
 80019e0:	015b      	lsls	r3, r3, #5
 80019e2:	4313      	orrs	r3, r2
 80019e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	68fa      	ldr	r2, [r7, #12]
 80019f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	68db      	ldr	r3, [r3, #12]
 80019f6:	4619      	mov	r1, r3
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f7ff fdc8 	bl	800158e <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	697a      	ldr	r2, [r7, #20]
 8001a02:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3718      	adds	r7, #24
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	40012c00 	.word	0x40012c00

08001a14 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6a1b      	ldr	r3, [r3, #32]
 8001a22:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6a1b      	ldr	r3, [r3, #32]
 8001a2e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	69db      	ldr	r3, [r3, #28]
 8001a3a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001a42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	021b      	lsls	r3, r3, #8
 8001a50:	4313      	orrs	r3, r2
 8001a52:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	691b      	ldr	r3, [r3, #16]
 8001a5e:	031b      	lsls	r3, r3, #12
 8001a60:	4313      	orrs	r3, r2
 8001a62:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	031b      	lsls	r3, r3, #12
 8001a70:	4313      	orrs	r3, r2
 8001a72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	4a0f      	ldr	r2, [pc, #60]	@ (8001ab4 <OC4Config+0xa0>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d107      	bne.n	8001a8c <OC4Config+0x78>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	699b      	ldr	r3, [r3, #24]
 8001a86:	019b      	lsls	r3, r3, #6
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	697a      	ldr	r2, [r7, #20]
 8001a90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	68fa      	ldr	r2, [r7, #12]
 8001a96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f7ff fd82 	bl	80015a8 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001aaa:	2300      	movs	r3, #0
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3718      	adds	r7, #24
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40012c00 	.word	0x40012c00

08001ab8 <LL_USART_IsEnabled>:
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ac8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001acc:	bf0c      	ite	eq
 8001ace:	2301      	moveq	r3, #1
 8001ad0:	2300      	movne	r3, #0
 8001ad2:	b2db      	uxtb	r3, r3
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bc80      	pop	{r7}
 8001adc:	4770      	bx	lr

08001ade <LL_USART_SetStopBitsLength>:
{
 8001ade:	b480      	push	{r7}
 8001ae0:	b083      	sub	sp, #12
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
 8001ae6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	691b      	ldr	r3, [r3, #16]
 8001aec:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	431a      	orrs	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	611a      	str	r2, [r3, #16]
}
 8001af8:	bf00      	nop
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bc80      	pop	{r7}
 8001b00:	4770      	bx	lr

08001b02 <LL_USART_SetHWFlowCtrl>:
{
 8001b02:	b480      	push	{r7}
 8001b04:	b083      	sub	sp, #12
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
 8001b0a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	695b      	ldr	r3, [r3, #20]
 8001b10:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	431a      	orrs	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	615a      	str	r2, [r3, #20]
}
 8001b1c:	bf00      	nop
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bc80      	pop	{r7}
 8001b24:	4770      	bx	lr
	...

08001b28 <LL_USART_SetBaudRate>:
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8001b34:	68ba      	ldr	r2, [r7, #8]
 8001b36:	4613      	mov	r3, r2
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	4413      	add	r3, r2
 8001b3c:	009a      	lsls	r2, r3, #2
 8001b3e:	441a      	add	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b48:	4a25      	ldr	r2, [pc, #148]	@ (8001be0 <LL_USART_SetBaudRate+0xb8>)
 8001b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b4e:	095b      	lsrs	r3, r3, #5
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	011b      	lsls	r3, r3, #4
 8001b54:	b299      	uxth	r1, r3
 8001b56:	68ba      	ldr	r2, [r7, #8]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	4413      	add	r3, r2
 8001b5e:	009a      	lsls	r2, r3, #2
 8001b60:	441a      	add	r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b6a:	4b1d      	ldr	r3, [pc, #116]	@ (8001be0 <LL_USART_SetBaudRate+0xb8>)
 8001b6c:	fba3 0302 	umull	r0, r3, r3, r2
 8001b70:	095b      	lsrs	r3, r3, #5
 8001b72:	2064      	movs	r0, #100	@ 0x64
 8001b74:	fb00 f303 	mul.w	r3, r0, r3
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	011b      	lsls	r3, r3, #4
 8001b7c:	3332      	adds	r3, #50	@ 0x32
 8001b7e:	4a18      	ldr	r2, [pc, #96]	@ (8001be0 <LL_USART_SetBaudRate+0xb8>)
 8001b80:	fba2 2303 	umull	r2, r3, r2, r3
 8001b84:	095b      	lsrs	r3, r3, #5
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	440b      	add	r3, r1
 8001b90:	b299      	uxth	r1, r3
 8001b92:	68ba      	ldr	r2, [r7, #8]
 8001b94:	4613      	mov	r3, r2
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	4413      	add	r3, r2
 8001b9a:	009a      	lsls	r2, r3, #2
 8001b9c:	441a      	add	r2, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ba6:	4b0e      	ldr	r3, [pc, #56]	@ (8001be0 <LL_USART_SetBaudRate+0xb8>)
 8001ba8:	fba3 0302 	umull	r0, r3, r3, r2
 8001bac:	095b      	lsrs	r3, r3, #5
 8001bae:	2064      	movs	r0, #100	@ 0x64
 8001bb0:	fb00 f303 	mul.w	r3, r0, r3
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	011b      	lsls	r3, r3, #4
 8001bb8:	3332      	adds	r3, #50	@ 0x32
 8001bba:	4a09      	ldr	r2, [pc, #36]	@ (8001be0 <LL_USART_SetBaudRate+0xb8>)
 8001bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8001bc0:	095b      	lsrs	r3, r3, #5
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	f003 030f 	and.w	r3, r3, #15
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	440b      	add	r3, r1
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	461a      	mov	r2, r3
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	609a      	str	r2, [r3, #8]
}
 8001bd4:	bf00      	nop
 8001bd6:	3714      	adds	r7, #20
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bc80      	pop	{r7}
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	51eb851f 	.word	0x51eb851f

08001be4 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b088      	sub	sp, #32
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f7ff ff5e 	bl	8001ab8 <LL_USART_IsEnabled>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d145      	bne.n	8001c8e <LL_USART_Init+0xaa>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001c0a:	f023 030c 	bic.w	r3, r3, #12
 8001c0e:	683a      	ldr	r2, [r7, #0]
 8001c10:	6851      	ldr	r1, [r2, #4]
 8001c12:	683a      	ldr	r2, [r7, #0]
 8001c14:	68d2      	ldr	r2, [r2, #12]
 8001c16:	4311      	orrs	r1, r2
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	6912      	ldr	r2, [r2, #16]
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	431a      	orrs	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	4619      	mov	r1, r3
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f7ff ff57 	bl	8001ade <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	695b      	ldr	r3, [r3, #20]
 8001c34:	4619      	mov	r1, r3
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f7ff ff63 	bl	8001b02 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8001c3c:	f107 0308 	add.w	r3, r7, #8
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff fba7 	bl	8001394 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a13      	ldr	r2, [pc, #76]	@ (8001c98 <LL_USART_Init+0xb4>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d102      	bne.n	8001c54 <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	61bb      	str	r3, [r7, #24]
 8001c52:	e00c      	b.n	8001c6e <LL_USART_Init+0x8a>
    }
    else if (USARTx == USART2)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	4a11      	ldr	r2, [pc, #68]	@ (8001c9c <LL_USART_Init+0xb8>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d102      	bne.n	8001c62 <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	61bb      	str	r3, [r7, #24]
 8001c60:	e005      	b.n	8001c6e <LL_USART_Init+0x8a>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a0e      	ldr	r2, [pc, #56]	@ (8001ca0 <LL_USART_Init+0xbc>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d101      	bne.n	8001c6e <LL_USART_Init+0x8a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d00c      	beq.n	8001c8e <LL_USART_Init+0xaa>
        && (USART_InitStruct->BaudRate != 0U))
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d008      	beq.n	8001c8e <LL_USART_Init+0xaa>
    {
      status = SUCCESS;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	77fb      	strb	r3, [r7, #31]
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->BaudRate);
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8001c84:	461a      	mov	r2, r3
 8001c86:	69b9      	ldr	r1, [r7, #24]
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f7ff ff4d 	bl	8001b28 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8001c8e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3720      	adds	r7, #32
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40013800 	.word	0x40013800
 8001c9c:	40004400 	.word	0x40004400
 8001ca0:	40004800 	.word	0x40004800

08001ca4 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb6:	4a07      	ldr	r2, [pc, #28]	@ (8001cd4 <LL_InitTick+0x30>)
 8001cb8:	3b01      	subs	r3, #1
 8001cba:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001cbc:	4b05      	ldr	r3, [pc, #20]	@ (8001cd4 <LL_InitTick+0x30>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cc2:	4b04      	ldr	r3, [pc, #16]	@ (8001cd4 <LL_InitTick+0x30>)
 8001cc4:	2205      	movs	r2, #5
 8001cc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001cc8:	bf00      	nop
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bc80      	pop	{r7}
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	e000e010 	.word	0xe000e010

08001cd8 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001ce0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f7ff ffdd 	bl	8001ca4 <LL_InitTick>
}
 8001cea:	bf00      	nop
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
	...

08001cf4 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001cfc:	4a03      	ldr	r2, [pc, #12]	@ (8001d0c <LL_SetSystemCoreClock+0x18>)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6013      	str	r3, [r2, #0]
}
 8001d02:	bf00      	nop
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bc80      	pop	{r7}
 8001d0a:	4770      	bx	lr
 8001d0c:	20000000 	.word	0x20000000

08001d10 <memset>:
 8001d10:	4603      	mov	r3, r0
 8001d12:	4402      	add	r2, r0
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d100      	bne.n	8001d1a <memset+0xa>
 8001d18:	4770      	bx	lr
 8001d1a:	f803 1b01 	strb.w	r1, [r3], #1
 8001d1e:	e7f9      	b.n	8001d14 <memset+0x4>

08001d20 <__libc_init_array>:
 8001d20:	b570      	push	{r4, r5, r6, lr}
 8001d22:	2600      	movs	r6, #0
 8001d24:	4d0c      	ldr	r5, [pc, #48]	@ (8001d58 <__libc_init_array+0x38>)
 8001d26:	4c0d      	ldr	r4, [pc, #52]	@ (8001d5c <__libc_init_array+0x3c>)
 8001d28:	1b64      	subs	r4, r4, r5
 8001d2a:	10a4      	asrs	r4, r4, #2
 8001d2c:	42a6      	cmp	r6, r4
 8001d2e:	d109      	bne.n	8001d44 <__libc_init_array+0x24>
 8001d30:	f000 f81a 	bl	8001d68 <_init>
 8001d34:	2600      	movs	r6, #0
 8001d36:	4d0a      	ldr	r5, [pc, #40]	@ (8001d60 <__libc_init_array+0x40>)
 8001d38:	4c0a      	ldr	r4, [pc, #40]	@ (8001d64 <__libc_init_array+0x44>)
 8001d3a:	1b64      	subs	r4, r4, r5
 8001d3c:	10a4      	asrs	r4, r4, #2
 8001d3e:	42a6      	cmp	r6, r4
 8001d40:	d105      	bne.n	8001d4e <__libc_init_array+0x2e>
 8001d42:	bd70      	pop	{r4, r5, r6, pc}
 8001d44:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d48:	4798      	blx	r3
 8001d4a:	3601      	adds	r6, #1
 8001d4c:	e7ee      	b.n	8001d2c <__libc_init_array+0xc>
 8001d4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d52:	4798      	blx	r3
 8001d54:	3601      	adds	r6, #1
 8001d56:	e7f2      	b.n	8001d3e <__libc_init_array+0x1e>
 8001d58:	08001da8 	.word	0x08001da8
 8001d5c:	08001da8 	.word	0x08001da8
 8001d60:	08001da8 	.word	0x08001da8
 8001d64:	08001dac 	.word	0x08001dac

08001d68 <_init>:
 8001d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d6a:	bf00      	nop
 8001d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d6e:	bc08      	pop	{r3}
 8001d70:	469e      	mov	lr, r3
 8001d72:	4770      	bx	lr

08001d74 <_fini>:
 8001d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d76:	bf00      	nop
 8001d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d7a:	bc08      	pop	{r3}
 8001d7c:	469e      	mov	lr, r3
 8001d7e:	4770      	bx	lr
