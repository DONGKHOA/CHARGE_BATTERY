
Control_LLC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075c8  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d80  080076d8  080076d8  000086d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008458  08008458  0000a244  2**0
                  CONTENTS
  4 .ARM          00000008  08008458  08008458  00009458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008460  08008460  0000a244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008460  08008460  00009460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008464  08008464  00009464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000244  20000000  08008468  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000058c  20000244  080086ac  0000a244  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007d0  080086ac  0000a7d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a244  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000adc8  00000000  00000000  0000a26d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e13  00000000  00000000  00015035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c38  00000000  00000000  00017e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008aa  00000000  00000000  00018a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001611a  00000000  00000000  0001932a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f493  00000000  00000000  0002f444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006889d  00000000  00000000  0003e8d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a7174  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004084  00000000  00000000  000a71b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000ab23c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000244 	.word	0x20000244
 800012c:	00000000 	.word	0x00000000
 8000130:	080076c0 	.word	0x080076c0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000248 	.word	0x20000248
 800014c:	080076c0 	.word	0x080076c0

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	@ 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2f>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000aa4:	bf24      	itt	cs
 8000aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aae:	d90d      	bls.n	8000acc <__aeabi_d2f+0x30>
 8000ab0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000abc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac4:	bf08      	it	eq
 8000ac6:	f020 0001 	biceq.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ad0:	d121      	bne.n	8000b16 <__aeabi_d2f+0x7a>
 8000ad2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ad6:	bfbc      	itt	lt
 8000ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000adc:	4770      	bxlt	lr
 8000ade:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae6:	f1c2 0218 	rsb	r2, r2, #24
 8000aea:	f1c2 0c20 	rsb	ip, r2, #32
 8000aee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af2:	fa20 f002 	lsr.w	r0, r0, r2
 8000af6:	bf18      	it	ne
 8000af8:	f040 0001 	orrne.w	r0, r0, #1
 8000afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b08:	ea40 000c 	orr.w	r0, r0, ip
 8000b0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b14:	e7cc      	b.n	8000ab0 <__aeabi_d2f+0x14>
 8000b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1a:	d107      	bne.n	8000b2c <__aeabi_d2f+0x90>
 8000b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b20:	bf1e      	ittt	ne
 8000b22:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b26:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b2a:	4770      	bxne	lr
 8000b2c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b30:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b34:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <__aeabi_frsub>:
 8000b3c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b40:	e002      	b.n	8000b48 <__addsf3>
 8000b42:	bf00      	nop

08000b44 <__aeabi_fsub>:
 8000b44:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b48 <__addsf3>:
 8000b48:	0042      	lsls	r2, r0, #1
 8000b4a:	bf1f      	itttt	ne
 8000b4c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b50:	ea92 0f03 	teqne	r2, r3
 8000b54:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b58:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b5c:	d06a      	beq.n	8000c34 <__addsf3+0xec>
 8000b5e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b62:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b66:	bfc1      	itttt	gt
 8000b68:	18d2      	addgt	r2, r2, r3
 8000b6a:	4041      	eorgt	r1, r0
 8000b6c:	4048      	eorgt	r0, r1
 8000b6e:	4041      	eorgt	r1, r0
 8000b70:	bfb8      	it	lt
 8000b72:	425b      	neglt	r3, r3
 8000b74:	2b19      	cmp	r3, #25
 8000b76:	bf88      	it	hi
 8000b78:	4770      	bxhi	lr
 8000b7a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b7e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b82:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b92:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b96:	bf18      	it	ne
 8000b98:	4249      	negne	r1, r1
 8000b9a:	ea92 0f03 	teq	r2, r3
 8000b9e:	d03f      	beq.n	8000c20 <__addsf3+0xd8>
 8000ba0:	f1a2 0201 	sub.w	r2, r2, #1
 8000ba4:	fa41 fc03 	asr.w	ip, r1, r3
 8000ba8:	eb10 000c 	adds.w	r0, r0, ip
 8000bac:	f1c3 0320 	rsb	r3, r3, #32
 8000bb0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bb4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bb8:	d502      	bpl.n	8000bc0 <__addsf3+0x78>
 8000bba:	4249      	negs	r1, r1
 8000bbc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bc0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bc4:	d313      	bcc.n	8000bee <__addsf3+0xa6>
 8000bc6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bca:	d306      	bcc.n	8000bda <__addsf3+0x92>
 8000bcc:	0840      	lsrs	r0, r0, #1
 8000bce:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bd2:	f102 0201 	add.w	r2, r2, #1
 8000bd6:	2afe      	cmp	r2, #254	@ 0xfe
 8000bd8:	d251      	bcs.n	8000c7e <__addsf3+0x136>
 8000bda:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000be2:	bf08      	it	eq
 8000be4:	f020 0001 	biceq.w	r0, r0, #1
 8000be8:	ea40 0003 	orr.w	r0, r0, r3
 8000bec:	4770      	bx	lr
 8000bee:	0049      	lsls	r1, r1, #1
 8000bf0:	eb40 0000 	adc.w	r0, r0, r0
 8000bf4:	3a01      	subs	r2, #1
 8000bf6:	bf28      	it	cs
 8000bf8:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000bfc:	d2ed      	bcs.n	8000bda <__addsf3+0x92>
 8000bfe:	fab0 fc80 	clz	ip, r0
 8000c02:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c06:	ebb2 020c 	subs.w	r2, r2, ip
 8000c0a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c0e:	bfaa      	itet	ge
 8000c10:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c14:	4252      	neglt	r2, r2
 8000c16:	4318      	orrge	r0, r3
 8000c18:	bfbc      	itt	lt
 8000c1a:	40d0      	lsrlt	r0, r2
 8000c1c:	4318      	orrlt	r0, r3
 8000c1e:	4770      	bx	lr
 8000c20:	f092 0f00 	teq	r2, #0
 8000c24:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c28:	bf06      	itte	eq
 8000c2a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c2e:	3201      	addeq	r2, #1
 8000c30:	3b01      	subne	r3, #1
 8000c32:	e7b5      	b.n	8000ba0 <__addsf3+0x58>
 8000c34:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c3c:	bf18      	it	ne
 8000c3e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c42:	d021      	beq.n	8000c88 <__addsf3+0x140>
 8000c44:	ea92 0f03 	teq	r2, r3
 8000c48:	d004      	beq.n	8000c54 <__addsf3+0x10c>
 8000c4a:	f092 0f00 	teq	r2, #0
 8000c4e:	bf08      	it	eq
 8000c50:	4608      	moveq	r0, r1
 8000c52:	4770      	bx	lr
 8000c54:	ea90 0f01 	teq	r0, r1
 8000c58:	bf1c      	itt	ne
 8000c5a:	2000      	movne	r0, #0
 8000c5c:	4770      	bxne	lr
 8000c5e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c62:	d104      	bne.n	8000c6e <__addsf3+0x126>
 8000c64:	0040      	lsls	r0, r0, #1
 8000c66:	bf28      	it	cs
 8000c68:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c6c:	4770      	bx	lr
 8000c6e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c72:	bf3c      	itt	cc
 8000c74:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c78:	4770      	bxcc	lr
 8000c7a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c7e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c86:	4770      	bx	lr
 8000c88:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c8c:	bf16      	itet	ne
 8000c8e:	4608      	movne	r0, r1
 8000c90:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c94:	4601      	movne	r1, r0
 8000c96:	0242      	lsls	r2, r0, #9
 8000c98:	bf06      	itte	eq
 8000c9a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c9e:	ea90 0f01 	teqeq	r0, r1
 8000ca2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_ui2f>:
 8000ca8:	f04f 0300 	mov.w	r3, #0
 8000cac:	e004      	b.n	8000cb8 <__aeabi_i2f+0x8>
 8000cae:	bf00      	nop

08000cb0 <__aeabi_i2f>:
 8000cb0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cb4:	bf48      	it	mi
 8000cb6:	4240      	negmi	r0, r0
 8000cb8:	ea5f 0c00 	movs.w	ip, r0
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cc4:	4601      	mov	r1, r0
 8000cc6:	f04f 0000 	mov.w	r0, #0
 8000cca:	e01c      	b.n	8000d06 <__aeabi_l2f+0x2a>

08000ccc <__aeabi_ul2f>:
 8000ccc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e00a      	b.n	8000cf0 <__aeabi_l2f+0x14>
 8000cda:	bf00      	nop

08000cdc <__aeabi_l2f>:
 8000cdc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce0:	bf08      	it	eq
 8000ce2:	4770      	bxeq	lr
 8000ce4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000ce8:	d502      	bpl.n	8000cf0 <__aeabi_l2f+0x14>
 8000cea:	4240      	negs	r0, r0
 8000cec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf0:	ea5f 0c01 	movs.w	ip, r1
 8000cf4:	bf02      	ittt	eq
 8000cf6:	4684      	moveq	ip, r0
 8000cf8:	4601      	moveq	r1, r0
 8000cfa:	2000      	moveq	r0, #0
 8000cfc:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d00:	bf08      	it	eq
 8000d02:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d06:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d0a:	fabc f28c 	clz	r2, ip
 8000d0e:	3a08      	subs	r2, #8
 8000d10:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d14:	db10      	blt.n	8000d38 <__aeabi_l2f+0x5c>
 8000d16:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d20:	f1c2 0220 	rsb	r2, r2, #32
 8000d24:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d28:	fa20 f202 	lsr.w	r2, r0, r2
 8000d2c:	eb43 0002 	adc.w	r0, r3, r2
 8000d30:	bf08      	it	eq
 8000d32:	f020 0001 	biceq.w	r0, r0, #1
 8000d36:	4770      	bx	lr
 8000d38:	f102 0220 	add.w	r2, r2, #32
 8000d3c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d40:	f1c2 0220 	rsb	r2, r2, #32
 8000d44:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d48:	fa21 f202 	lsr.w	r2, r1, r2
 8000d4c:	eb43 0002 	adc.w	r0, r3, r2
 8000d50:	bf08      	it	eq
 8000d52:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_fmul>:
 8000d58:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d5c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d60:	bf1e      	ittt	ne
 8000d62:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d66:	ea92 0f0c 	teqne	r2, ip
 8000d6a:	ea93 0f0c 	teqne	r3, ip
 8000d6e:	d06f      	beq.n	8000e50 <__aeabi_fmul+0xf8>
 8000d70:	441a      	add	r2, r3
 8000d72:	ea80 0c01 	eor.w	ip, r0, r1
 8000d76:	0240      	lsls	r0, r0, #9
 8000d78:	bf18      	it	ne
 8000d7a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d7e:	d01e      	beq.n	8000dbe <__aeabi_fmul+0x66>
 8000d80:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d84:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d88:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d8c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d90:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d94:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d98:	bf3e      	ittt	cc
 8000d9a:	0049      	lslcc	r1, r1, #1
 8000d9c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000da0:	005b      	lslcc	r3, r3, #1
 8000da2:	ea40 0001 	orr.w	r0, r0, r1
 8000da6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000daa:	2afd      	cmp	r2, #253	@ 0xfd
 8000dac:	d81d      	bhi.n	8000dea <__aeabi_fmul+0x92>
 8000dae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000db2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000db6:	bf08      	it	eq
 8000db8:	f020 0001 	biceq.w	r0, r0, #1
 8000dbc:	4770      	bx	lr
 8000dbe:	f090 0f00 	teq	r0, #0
 8000dc2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000dc6:	bf08      	it	eq
 8000dc8:	0249      	lsleq	r1, r1, #9
 8000dca:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dce:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dd2:	3a7f      	subs	r2, #127	@ 0x7f
 8000dd4:	bfc2      	ittt	gt
 8000dd6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dda:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dde:	4770      	bxgt	lr
 8000de0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000de4:	f04f 0300 	mov.w	r3, #0
 8000de8:	3a01      	subs	r2, #1
 8000dea:	dc5d      	bgt.n	8000ea8 <__aeabi_fmul+0x150>
 8000dec:	f112 0f19 	cmn.w	r2, #25
 8000df0:	bfdc      	itt	le
 8000df2:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000df6:	4770      	bxle	lr
 8000df8:	f1c2 0200 	rsb	r2, r2, #0
 8000dfc:	0041      	lsls	r1, r0, #1
 8000dfe:	fa21 f102 	lsr.w	r1, r1, r2
 8000e02:	f1c2 0220 	rsb	r2, r2, #32
 8000e06:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e0a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e0e:	f140 0000 	adc.w	r0, r0, #0
 8000e12:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e16:	bf08      	it	eq
 8000e18:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e1c:	4770      	bx	lr
 8000e1e:	f092 0f00 	teq	r2, #0
 8000e22:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e26:	bf02      	ittt	eq
 8000e28:	0040      	lsleq	r0, r0, #1
 8000e2a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e2e:	3a01      	subeq	r2, #1
 8000e30:	d0f9      	beq.n	8000e26 <__aeabi_fmul+0xce>
 8000e32:	ea40 000c 	orr.w	r0, r0, ip
 8000e36:	f093 0f00 	teq	r3, #0
 8000e3a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e3e:	bf02      	ittt	eq
 8000e40:	0049      	lsleq	r1, r1, #1
 8000e42:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e46:	3b01      	subeq	r3, #1
 8000e48:	d0f9      	beq.n	8000e3e <__aeabi_fmul+0xe6>
 8000e4a:	ea41 010c 	orr.w	r1, r1, ip
 8000e4e:	e78f      	b.n	8000d70 <__aeabi_fmul+0x18>
 8000e50:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e54:	ea92 0f0c 	teq	r2, ip
 8000e58:	bf18      	it	ne
 8000e5a:	ea93 0f0c 	teqne	r3, ip
 8000e5e:	d00a      	beq.n	8000e76 <__aeabi_fmul+0x11e>
 8000e60:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e64:	bf18      	it	ne
 8000e66:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	d1d8      	bne.n	8000e1e <__aeabi_fmul+0xc6>
 8000e6c:	ea80 0001 	eor.w	r0, r0, r1
 8000e70:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e74:	4770      	bx	lr
 8000e76:	f090 0f00 	teq	r0, #0
 8000e7a:	bf17      	itett	ne
 8000e7c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e80:	4608      	moveq	r0, r1
 8000e82:	f091 0f00 	teqne	r1, #0
 8000e86:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e8a:	d014      	beq.n	8000eb6 <__aeabi_fmul+0x15e>
 8000e8c:	ea92 0f0c 	teq	r2, ip
 8000e90:	d101      	bne.n	8000e96 <__aeabi_fmul+0x13e>
 8000e92:	0242      	lsls	r2, r0, #9
 8000e94:	d10f      	bne.n	8000eb6 <__aeabi_fmul+0x15e>
 8000e96:	ea93 0f0c 	teq	r3, ip
 8000e9a:	d103      	bne.n	8000ea4 <__aeabi_fmul+0x14c>
 8000e9c:	024b      	lsls	r3, r1, #9
 8000e9e:	bf18      	it	ne
 8000ea0:	4608      	movne	r0, r1
 8000ea2:	d108      	bne.n	8000eb6 <__aeabi_fmul+0x15e>
 8000ea4:	ea80 0001 	eor.w	r0, r0, r1
 8000ea8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000eac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000eb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000eb4:	4770      	bx	lr
 8000eb6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000eba:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000ebe:	4770      	bx	lr

08000ec0 <__aeabi_fdiv>:
 8000ec0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ec4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ec8:	bf1e      	ittt	ne
 8000eca:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ece:	ea92 0f0c 	teqne	r2, ip
 8000ed2:	ea93 0f0c 	teqne	r3, ip
 8000ed6:	d069      	beq.n	8000fac <__aeabi_fdiv+0xec>
 8000ed8:	eba2 0203 	sub.w	r2, r2, r3
 8000edc:	ea80 0c01 	eor.w	ip, r0, r1
 8000ee0:	0249      	lsls	r1, r1, #9
 8000ee2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ee6:	d037      	beq.n	8000f58 <__aeabi_fdiv+0x98>
 8000ee8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000eec:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ef0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ef4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ef8:	428b      	cmp	r3, r1
 8000efa:	bf38      	it	cc
 8000efc:	005b      	lslcc	r3, r3, #1
 8000efe:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f02:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f06:	428b      	cmp	r3, r1
 8000f08:	bf24      	itt	cs
 8000f0a:	1a5b      	subcs	r3, r3, r1
 8000f0c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f10:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f14:	bf24      	itt	cs
 8000f16:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f1a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f1e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f22:	bf24      	itt	cs
 8000f24:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f28:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f2c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f30:	bf24      	itt	cs
 8000f32:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f36:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f3a:	011b      	lsls	r3, r3, #4
 8000f3c:	bf18      	it	ne
 8000f3e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f42:	d1e0      	bne.n	8000f06 <__aeabi_fdiv+0x46>
 8000f44:	2afd      	cmp	r2, #253	@ 0xfd
 8000f46:	f63f af50 	bhi.w	8000dea <__aeabi_fmul+0x92>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f50:	bf08      	it	eq
 8000f52:	f020 0001 	biceq.w	r0, r0, #1
 8000f56:	4770      	bx	lr
 8000f58:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f5c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f60:	327f      	adds	r2, #127	@ 0x7f
 8000f62:	bfc2      	ittt	gt
 8000f64:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f68:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f6c:	4770      	bxgt	lr
 8000f6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f72:	f04f 0300 	mov.w	r3, #0
 8000f76:	3a01      	subs	r2, #1
 8000f78:	e737      	b.n	8000dea <__aeabi_fmul+0x92>
 8000f7a:	f092 0f00 	teq	r2, #0
 8000f7e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f82:	bf02      	ittt	eq
 8000f84:	0040      	lsleq	r0, r0, #1
 8000f86:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f8a:	3a01      	subeq	r2, #1
 8000f8c:	d0f9      	beq.n	8000f82 <__aeabi_fdiv+0xc2>
 8000f8e:	ea40 000c 	orr.w	r0, r0, ip
 8000f92:	f093 0f00 	teq	r3, #0
 8000f96:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f9a:	bf02      	ittt	eq
 8000f9c:	0049      	lsleq	r1, r1, #1
 8000f9e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fa2:	3b01      	subeq	r3, #1
 8000fa4:	d0f9      	beq.n	8000f9a <__aeabi_fdiv+0xda>
 8000fa6:	ea41 010c 	orr.w	r1, r1, ip
 8000faa:	e795      	b.n	8000ed8 <__aeabi_fdiv+0x18>
 8000fac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fb0:	ea92 0f0c 	teq	r2, ip
 8000fb4:	d108      	bne.n	8000fc8 <__aeabi_fdiv+0x108>
 8000fb6:	0242      	lsls	r2, r0, #9
 8000fb8:	f47f af7d 	bne.w	8000eb6 <__aeabi_fmul+0x15e>
 8000fbc:	ea93 0f0c 	teq	r3, ip
 8000fc0:	f47f af70 	bne.w	8000ea4 <__aeabi_fmul+0x14c>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e776      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000fc8:	ea93 0f0c 	teq	r3, ip
 8000fcc:	d104      	bne.n	8000fd8 <__aeabi_fdiv+0x118>
 8000fce:	024b      	lsls	r3, r1, #9
 8000fd0:	f43f af4c 	beq.w	8000e6c <__aeabi_fmul+0x114>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e76e      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000fd8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fdc:	bf18      	it	ne
 8000fde:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fe2:	d1ca      	bne.n	8000f7a <__aeabi_fdiv+0xba>
 8000fe4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fe8:	f47f af5c 	bne.w	8000ea4 <__aeabi_fmul+0x14c>
 8000fec:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000ff0:	f47f af3c 	bne.w	8000e6c <__aeabi_fmul+0x114>
 8000ff4:	e75f      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000ff6:	bf00      	nop

08000ff8 <__gesf2>:
 8000ff8:	f04f 3cff 	mov.w	ip, #4294967295
 8000ffc:	e006      	b.n	800100c <__cmpsf2+0x4>
 8000ffe:	bf00      	nop

08001000 <__lesf2>:
 8001000:	f04f 0c01 	mov.w	ip, #1
 8001004:	e002      	b.n	800100c <__cmpsf2+0x4>
 8001006:	bf00      	nop

08001008 <__cmpsf2>:
 8001008:	f04f 0c01 	mov.w	ip, #1
 800100c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001010:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001014:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001018:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800101c:	bf18      	it	ne
 800101e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001022:	d011      	beq.n	8001048 <__cmpsf2+0x40>
 8001024:	b001      	add	sp, #4
 8001026:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800102a:	bf18      	it	ne
 800102c:	ea90 0f01 	teqne	r0, r1
 8001030:	bf58      	it	pl
 8001032:	ebb2 0003 	subspl.w	r0, r2, r3
 8001036:	bf88      	it	hi
 8001038:	17c8      	asrhi	r0, r1, #31
 800103a:	bf38      	it	cc
 800103c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001040:	bf18      	it	ne
 8001042:	f040 0001 	orrne.w	r0, r0, #1
 8001046:	4770      	bx	lr
 8001048:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800104c:	d102      	bne.n	8001054 <__cmpsf2+0x4c>
 800104e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001052:	d105      	bne.n	8001060 <__cmpsf2+0x58>
 8001054:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001058:	d1e4      	bne.n	8001024 <__cmpsf2+0x1c>
 800105a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800105e:	d0e1      	beq.n	8001024 <__cmpsf2+0x1c>
 8001060:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop

08001068 <__aeabi_cfrcmple>:
 8001068:	4684      	mov	ip, r0
 800106a:	4608      	mov	r0, r1
 800106c:	4661      	mov	r1, ip
 800106e:	e7ff      	b.n	8001070 <__aeabi_cfcmpeq>

08001070 <__aeabi_cfcmpeq>:
 8001070:	b50f      	push	{r0, r1, r2, r3, lr}
 8001072:	f7ff ffc9 	bl	8001008 <__cmpsf2>
 8001076:	2800      	cmp	r0, #0
 8001078:	bf48      	it	mi
 800107a:	f110 0f00 	cmnmi.w	r0, #0
 800107e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001080 <__aeabi_fcmpeq>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff fff4 	bl	8001070 <__aeabi_cfcmpeq>
 8001088:	bf0c      	ite	eq
 800108a:	2001      	moveq	r0, #1
 800108c:	2000      	movne	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmplt>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffea 	bl	8001070 <__aeabi_cfcmpeq>
 800109c:	bf34      	ite	cc
 800109e:	2001      	movcc	r0, #1
 80010a0:	2000      	movcs	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmple>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffe0 	bl	8001070 <__aeabi_cfcmpeq>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpge>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffd2 	bl	8001068 <__aeabi_cfrcmple>
 80010c4:	bf94      	ite	ls
 80010c6:	2001      	movls	r0, #1
 80010c8:	2000      	movhi	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_fcmpgt>:
 80010d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d4:	f7ff ffc8 	bl	8001068 <__aeabi_cfrcmple>
 80010d8:	bf34      	ite	cc
 80010da:	2001      	movcc	r0, #1
 80010dc:	2000      	movcs	r0, #0
 80010de:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e2:	bf00      	nop

080010e4 <__aeabi_f2uiz>:
 80010e4:	0042      	lsls	r2, r0, #1
 80010e6:	d20e      	bcs.n	8001106 <__aeabi_f2uiz+0x22>
 80010e8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80010ec:	d30b      	bcc.n	8001106 <__aeabi_f2uiz+0x22>
 80010ee:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010f2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010f6:	d409      	bmi.n	800110c <__aeabi_f2uiz+0x28>
 80010f8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010fc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001100:	fa23 f002 	lsr.w	r0, r3, r2
 8001104:	4770      	bx	lr
 8001106:	f04f 0000 	mov.w	r0, #0
 800110a:	4770      	bx	lr
 800110c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001110:	d101      	bne.n	8001116 <__aeabi_f2uiz+0x32>
 8001112:	0242      	lsls	r2, r0, #9
 8001114:	d102      	bne.n	800111c <__aeabi_f2uiz+0x38>
 8001116:	f04f 30ff 	mov.w	r0, #4294967295
 800111a:	4770      	bx	lr
 800111c:	f04f 0000 	mov.w	r0, #0
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop

08001124 <CmdLineProcess>:
 * @return Returns CMDLINE_OK if successful, or an error code if an issue
 *         occurs (e.g., command not found, too many arguments).
 */
uint8_t
CmdLineProcess (char *pcCmdLine)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
    char          *pcChar;
    uint_fast8_t   ui8Argc;
    bool           bFindArg = true;
 800112c:	2301      	movs	r3, #1
 800112e:	73fb      	strb	r3, [r7, #15]

    /**
     * Initialize the argument counter, and point to the beginning of the
     * command line string.
     */
    ui8Argc = 0;
 8001130:	2300      	movs	r3, #0
 8001132:	613b      	str	r3, [r7, #16]
    pcChar  = pcCmdLine;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	617b      	str	r3, [r7, #20]

    /**
     * Advance through the command line until a zero character is found.
     */
    while (*pcChar)
 8001138:	e01f      	b.n	800117a <CmdLineProcess+0x56>
    {
        /**
         * If there is a space, then replace it with a zero, and set the flag
         * to search for the next argument.
         */
        if (*pcChar == ' ')
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	2b20      	cmp	r3, #32
 8001140:	d105      	bne.n	800114e <CmdLineProcess+0x2a>
        {
            *pcChar  = 0;
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	2200      	movs	r2, #0
 8001146:	701a      	strb	r2, [r3, #0]
            bFindArg = true;
 8001148:	2301      	movs	r3, #1
 800114a:	73fb      	strb	r3, [r7, #15]
 800114c:	e012      	b.n	8001174 <CmdLineProcess+0x50>
        {
            /**
             * If bFindArg is set, then that means we are looking for the start
             * of the next argument.
             */
            if (bFindArg)
 800114e:	7bfb      	ldrb	r3, [r7, #15]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d00f      	beq.n	8001174 <CmdLineProcess+0x50>
                /**
                 * As long as the maximum number of arguments has not been
                 * reached, then save the pointer to the start of this new arg
                 * in the argv array, and increment the count of args, argc.
                 */
                if (ui8Argc < CMDLINE_MAX_ARGS)
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	2b07      	cmp	r3, #7
 8001158:	d80a      	bhi.n	8001170 <CmdLineProcess+0x4c>
                {
                    g_ppcArgv[ui8Argc] = pcChar;
 800115a:	491d      	ldr	r1, [pc, #116]	@ (80011d0 <CmdLineProcess+0xac>)
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	697a      	ldr	r2, [r7, #20]
 8001160:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    ui8Argc++;
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	3301      	adds	r3, #1
 8001168:	613b      	str	r3, [r7, #16]
                    bFindArg = false;
 800116a:	2300      	movs	r3, #0
 800116c:	73fb      	strb	r3, [r7, #15]
 800116e:	e001      	b.n	8001174 <CmdLineProcess+0x50>
                 * The maximum number of arguments has been reached so return
                 * the error.
                 */
                else
                {
                    return (CMDLINE_TOO_MANY_ARGS);
 8001170:	2302      	movs	r3, #2
 8001172:	e028      	b.n	80011c6 <CmdLineProcess+0xa2>
            }
        }
        /**
         * Advance to the next character in the command line.
         */
        pcChar++;
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	3301      	adds	r3, #1
 8001178:	617b      	str	r3, [r7, #20]
    while (*pcChar)
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d1db      	bne.n	800113a <CmdLineProcess+0x16>
    }

    /**
     * If one or more arguments was found, then process the command.
     */
    if (ui8Argc)
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d01d      	beq.n	80011c4 <CmdLineProcess+0xa0>
    {
        /**
         * Start at the beginning of the command table, to look for a matching
         * command.
         */
        psCmdEntry = &g_psCmdTable[0];
 8001188:	4b12      	ldr	r3, [pc, #72]	@ (80011d4 <CmdLineProcess+0xb0>)
 800118a:	60bb      	str	r3, [r7, #8]

        /**
         * Search through the command table until a null command string is
         * found, which marks the end of the table.
         */
        while (psCmdEntry->pcCmd)
 800118c:	e016      	b.n	80011bc <CmdLineProcess+0x98>
            /**
             * If this command entry command string matches argv[0], then call
             * the function for this command, passing the command line
             * arguments.
             */
            if (!strcmp(g_ppcArgv[0], psCmdEntry->pcCmd))
 800118e:	4b10      	ldr	r3, [pc, #64]	@ (80011d0 <CmdLineProcess+0xac>)
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4619      	mov	r1, r3
 8001198:	4610      	mov	r0, r2
 800119a:	f7fe ffd9 	bl	8000150 <strcmp>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d108      	bne.n	80011b6 <CmdLineProcess+0x92>
            {
                return (psCmdEntry->pfnCmd(ui8Argc, g_ppcArgv));
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	693a      	ldr	r2, [r7, #16]
 80011aa:	4909      	ldr	r1, [pc, #36]	@ (80011d0 <CmdLineProcess+0xac>)
 80011ac:	4610      	mov	r0, r2
 80011ae:	4798      	blx	r3
 80011b0:	4603      	mov	r3, r0
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	e007      	b.n	80011c6 <CmdLineProcess+0xa2>
            }
            /**
             * Not found, so advance to the next entry.
             */
            psCmdEntry++;
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	330c      	adds	r3, #12
 80011ba:	60bb      	str	r3, [r7, #8]
        while (psCmdEntry->pcCmd)
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d1e4      	bne.n	800118e <CmdLineProcess+0x6a>

    /**
     * Fall through to here means that no matching command was found, so return
     * an error.
     */
    return (CMDLINE_BAD_CMD);
 80011c4:	2301      	movs	r3, #1
 80011c6:	4618      	mov	r0, r3
 80011c8:	3718      	adds	r7, #24
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20000260 	.word	0x20000260
 80011d4:	20000028 	.word	0x20000028

080011d8 <APP_COMMAND_Init>:
 *   PUBLIC FUNCTIONS
 **********************/

void
APP_COMMAND_Init (void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  BSP_UART_Config(&uart_cfg_cml, USART1, USART1_IRQn);
 80011dc:	2225      	movs	r2, #37	@ 0x25
 80011de:	4906      	ldr	r1, [pc, #24]	@ (80011f8 <APP_COMMAND_Init+0x20>)
 80011e0:	4806      	ldr	r0, [pc, #24]	@ (80011fc <APP_COMMAND_Init+0x24>)
 80011e2:	f000 fffe 	bl	80021e2 <BSP_UART_Config>
  BSP_UART_SendString(&uart_cfg_cml, "> LLC CONTROL FIRMWARE\r\n");
 80011e6:	4906      	ldr	r1, [pc, #24]	@ (8001200 <APP_COMMAND_Init+0x28>)
 80011e8:	4804      	ldr	r0, [pc, #16]	@ (80011fc <APP_COMMAND_Init+0x24>)
 80011ea:	f001 f860 	bl	80022ae <BSP_UART_SendString>

  // Reset Data
  s_commandBufferIndex = 0;
 80011ee:	4b05      	ldr	r3, [pc, #20]	@ (8001204 <APP_COMMAND_Init+0x2c>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	701a      	strb	r2, [r3, #0]
}
 80011f4:	bf00      	nop
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40013800 	.word	0x40013800
 80011fc:	20000384 	.word	0x20000384
 8001200:	080077c0 	.word	0x080077c0
 8001204:	20000383 	.word	0x20000383

08001208 <APP_COMMAND_CreateTask>:

void
APP_COMMAND_CreateTask (void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  SCH_TASK_CreateTask(&s_CommandTaskContext.taskHandle,
 800120c:	4902      	ldr	r1, [pc, #8]	@ (8001218 <APP_COMMAND_CreateTask+0x10>)
 800120e:	4803      	ldr	r0, [pc, #12]	@ (800121c <APP_COMMAND_CreateTask+0x14>)
 8001210:	f003 fad2 	bl	80047b8 <SCH_TASK_CreateTask>
                      &s_CommandTaskContext.taskProperty);
}
 8001214:	bf00      	nop
 8001216:	bd80      	pop	{r7, pc}
 8001218:	2000001c 	.word	0x2000001c
 800121c:	20000018 	.word	0x20000018

08001220 <APP_COMMAND_Help>:
 * @param argv The argument list.
 * @return CMDLINE_OK on success.
 */
int
APP_COMMAND_Help (int argc, char *argv[])
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
  tCmdLineEntry *pEntry;

  BSP_UART_SendString(&uart_cfg_cml, "\nAvailable commands\r\n");
 800122a:	4913      	ldr	r1, [pc, #76]	@ (8001278 <APP_COMMAND_Help+0x58>)
 800122c:	4813      	ldr	r0, [pc, #76]	@ (800127c <APP_COMMAND_Help+0x5c>)
 800122e:	f001 f83e 	bl	80022ae <BSP_UART_SendString>
  BSP_UART_SendString(&uart_cfg_cml, "------------------\r\n");
 8001232:	4913      	ldr	r1, [pc, #76]	@ (8001280 <APP_COMMAND_Help+0x60>)
 8001234:	4811      	ldr	r0, [pc, #68]	@ (800127c <APP_COMMAND_Help+0x5c>)
 8001236:	f001 f83a 	bl	80022ae <BSP_UART_SendString>

  // Point at the beginning of the command table.
  pEntry = &g_psCmdTable[0];
 800123a:	4b12      	ldr	r3, [pc, #72]	@ (8001284 <APP_COMMAND_Help+0x64>)
 800123c:	60fb      	str	r3, [r7, #12]

  while (pEntry->pcCmd)
 800123e:	e012      	b.n	8001266 <APP_COMMAND_Help+0x46>
  {
    // Print the command name and the brief description.
    BSP_UART_SendString(&uart_cfg_cml, pEntry->pcCmd);
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4619      	mov	r1, r3
 8001246:	480d      	ldr	r0, [pc, #52]	@ (800127c <APP_COMMAND_Help+0x5c>)
 8001248:	f001 f831 	bl	80022ae <BSP_UART_SendString>
    BSP_UART_SendString(&uart_cfg_cml, pEntry->pcHelp);
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	4619      	mov	r1, r3
 8001252:	480a      	ldr	r0, [pc, #40]	@ (800127c <APP_COMMAND_Help+0x5c>)
 8001254:	f001 f82b 	bl	80022ae <BSP_UART_SendString>
    BSP_UART_SendString(&uart_cfg_cml, "\r\n");
 8001258:	490b      	ldr	r1, [pc, #44]	@ (8001288 <APP_COMMAND_Help+0x68>)
 800125a:	4808      	ldr	r0, [pc, #32]	@ (800127c <APP_COMMAND_Help+0x5c>)
 800125c:	f001 f827 	bl	80022ae <BSP_UART_SendString>

    // Advance to the next entry in the table.
    pEntry++;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	330c      	adds	r3, #12
 8001264:	60fb      	str	r3, [r7, #12]
  while (pEntry->pcCmd)
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d1e8      	bne.n	8001240 <APP_COMMAND_Help+0x20>
  }

  return (CMDLINE_OK);
 800126e:	2300      	movs	r3, #0
}
 8001270:	4618      	mov	r0, r3
 8001272:	3710      	adds	r7, #16
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	080077dc 	.word	0x080077dc
 800127c:	20000384 	.word	0x20000384
 8001280:	080077f4 	.word	0x080077f4
 8001284:	20000028 	.word	0x20000028
 8001288:	0800780c 	.word	0x0800780c

0800128c <APP_COMMAND_ReadVoltageOutput>:
}

// Format: read_voltage
int
APP_COMMAND_ReadVoltageOutput (int argc, char *argv[])
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]
	if (argc < 1) return CMDLINE_TOO_FEW_ARGS;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2b00      	cmp	r3, #0
 800129a:	dc01      	bgt.n	80012a0 <APP_COMMAND_ReadVoltageOutput+0x14>
 800129c:	2303      	movs	r3, #3
 800129e:	e018      	b.n	80012d2 <APP_COMMAND_ReadVoltageOutput+0x46>
	if (argc > 1) return CMDLINE_TOO_MANY_ARGS;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	dd01      	ble.n	80012aa <APP_COMMAND_ReadVoltageOutput+0x1e>
 80012a6:	2302      	movs	r3, #2
 80012a8:	e013      	b.n	80012d2 <APP_COMMAND_ReadVoltageOutput+0x46>

	char voltage[10];
	sprintf(voltage, "%.2f", s_control_llc_data.f_output_voltage);
 80012aa:	4b0c      	ldr	r3, [pc, #48]	@ (80012dc <APP_COMMAND_ReadVoltageOutput+0x50>)
 80012ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff f8c3 	bl	800043c <__aeabi_f2d>
 80012b6:	4602      	mov	r2, r0
 80012b8:	460b      	mov	r3, r1
 80012ba:	f107 000c 	add.w	r0, r7, #12
 80012be:	4908      	ldr	r1, [pc, #32]	@ (80012e0 <APP_COMMAND_ReadVoltageOutput+0x54>)
 80012c0:	f004 f980 	bl	80055c4 <siprintf>

	BSP_UART_SendString(&uart_cfg_cml, voltage);
 80012c4:	f107 030c 	add.w	r3, r7, #12
 80012c8:	4619      	mov	r1, r3
 80012ca:	4806      	ldr	r0, [pc, #24]	@ (80012e4 <APP_COMMAND_ReadVoltageOutput+0x58>)
 80012cc:	f000 ffef 	bl	80022ae <BSP_UART_SendString>

  return (CMDLINE_OK);
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3718      	adds	r7, #24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	200003cc 	.word	0x200003cc
 80012e0:	08007810 	.word	0x08007810
 80012e4:	20000384 	.word	0x20000384

080012e8 <APP_COMMAND_TaskUpdate>:
 *  PRIVATE FUNCTION
 ********************/

static void
APP_COMMAND_TaskUpdate (void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
  char   rxData;
  int8_t retVal;

  while (BSP_UART_IsAvailableDataReceive(&uart_cfg_cml))
 80012ee:	e05b      	b.n	80013a8 <APP_COMMAND_TaskUpdate+0xc0>
  {
    rxData = BSP_UART_ReadChar(&uart_cfg_cml);
 80012f0:	4833      	ldr	r0, [pc, #204]	@ (80013c0 <APP_COMMAND_TaskUpdate+0xd8>)
 80012f2:	f000 fff3 	bl	80022dc <BSP_UART_ReadChar>
 80012f6:	4603      	mov	r3, r0
 80012f8:	71fb      	strb	r3, [r7, #7]
    BSP_UART_SendChar(&uart_cfg_cml, rxData);
 80012fa:	79fb      	ldrb	r3, [r7, #7]
 80012fc:	4619      	mov	r1, r3
 80012fe:	4830      	ldr	r0, [pc, #192]	@ (80013c0 <APP_COMMAND_TaskUpdate+0xd8>)
 8001300:	f000 ffa2 	bl	8002248 <BSP_UART_SendChar>
    // Check rxData is ESC key.
    if (rxData == 27)
    {
    }

    if ((rxData == '\r') || (rxData == '\n'))
 8001304:	79fb      	ldrb	r3, [r7, #7]
 8001306:	2b0d      	cmp	r3, #13
 8001308:	d002      	beq.n	8001310 <APP_COMMAND_TaskUpdate+0x28>
 800130a:	79fb      	ldrb	r3, [r7, #7]
 800130c:	2b0a      	cmp	r3, #10
 800130e:	d12e      	bne.n	800136e <APP_COMMAND_TaskUpdate+0x86>
    {
      if (s_commandBufferIndex > 0)
 8001310:	4b2c      	ldr	r3, [pc, #176]	@ (80013c4 <APP_COMMAND_TaskUpdate+0xdc>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d025      	beq.n	8001364 <APP_COMMAND_TaskUpdate+0x7c>
      {
        // Processing command form terminal.
        s_commandBuffer[s_commandBufferIndex] = 0;
 8001318:	4b2a      	ldr	r3, [pc, #168]	@ (80013c4 <APP_COMMAND_TaskUpdate+0xdc>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	461a      	mov	r2, r3
 800131e:	4b2a      	ldr	r3, [pc, #168]	@ (80013c8 <APP_COMMAND_TaskUpdate+0xe0>)
 8001320:	2100      	movs	r1, #0
 8001322:	5499      	strb	r1, [r3, r2]
        s_commandBufferIndex++;
 8001324:	4b27      	ldr	r3, [pc, #156]	@ (80013c4 <APP_COMMAND_TaskUpdate+0xdc>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	3301      	adds	r3, #1
 800132a:	b2da      	uxtb	r2, r3
 800132c:	4b25      	ldr	r3, [pc, #148]	@ (80013c4 <APP_COMMAND_TaskUpdate+0xdc>)
 800132e:	701a      	strb	r2, [r3, #0]
        retVal               = CmdLineProcess(s_commandBuffer);
 8001330:	4825      	ldr	r0, [pc, #148]	@ (80013c8 <APP_COMMAND_TaskUpdate+0xe0>)
 8001332:	f7ff fef7 	bl	8001124 <CmdLineProcess>
 8001336:	4603      	mov	r3, r0
 8001338:	71bb      	strb	r3, [r7, #6]
        s_commandBufferIndex = 0;
 800133a:	4b22      	ldr	r3, [pc, #136]	@ (80013c4 <APP_COMMAND_TaskUpdate+0xdc>)
 800133c:	2200      	movs	r2, #0
 800133e:	701a      	strb	r2, [r3, #0]

        //Send status command in terminal.
        BSP_UART_SendString(&uart_cfg_cml, "\r\n> ");
 8001340:	4922      	ldr	r1, [pc, #136]	@ (80013cc <APP_COMMAND_TaskUpdate+0xe4>)
 8001342:	481f      	ldr	r0, [pc, #124]	@ (80013c0 <APP_COMMAND_TaskUpdate+0xd8>)
 8001344:	f000 ffb3 	bl	80022ae <BSP_UART_SendString>
        BSP_UART_SendString(&uart_cfg_cml, ErrorCode[retVal]);
 8001348:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800134c:	4a20      	ldr	r2, [pc, #128]	@ (80013d0 <APP_COMMAND_TaskUpdate+0xe8>)
 800134e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001352:	4619      	mov	r1, r3
 8001354:	481a      	ldr	r0, [pc, #104]	@ (80013c0 <APP_COMMAND_TaskUpdate+0xd8>)
 8001356:	f000 ffaa 	bl	80022ae <BSP_UART_SendString>
        BSP_UART_SendString(&uart_cfg_cml, "> ");
 800135a:	491e      	ldr	r1, [pc, #120]	@ (80013d4 <APP_COMMAND_TaskUpdate+0xec>)
 800135c:	4818      	ldr	r0, [pc, #96]	@ (80013c0 <APP_COMMAND_TaskUpdate+0xd8>)
 800135e:	f000 ffa6 	bl	80022ae <BSP_UART_SendString>
      if (s_commandBufferIndex > 0)
 8001362:	e021      	b.n	80013a8 <APP_COMMAND_TaskUpdate+0xc0>
      }
      else
      {
        BSP_UART_SendString(&uart_cfg_cml, "\r\n> ");
 8001364:	4919      	ldr	r1, [pc, #100]	@ (80013cc <APP_COMMAND_TaskUpdate+0xe4>)
 8001366:	4816      	ldr	r0, [pc, #88]	@ (80013c0 <APP_COMMAND_TaskUpdate+0xd8>)
 8001368:	f000 ffa1 	bl	80022ae <BSP_UART_SendString>
      if (s_commandBufferIndex > 0)
 800136c:	e01c      	b.n	80013a8 <APP_COMMAND_TaskUpdate+0xc0>
      }
    }
    else if ((rxData == 8)
 800136e:	79fb      	ldrb	r3, [r7, #7]
 8001370:	2b08      	cmp	r3, #8
 8001372:	d002      	beq.n	800137a <APP_COMMAND_TaskUpdate+0x92>
             || (rxData == 127)) // ASCII code for key Delete, Backspace.
 8001374:	79fb      	ldrb	r3, [r7, #7]
 8001376:	2b7f      	cmp	r3, #127	@ 0x7f
 8001378:	d10a      	bne.n	8001390 <APP_COMMAND_TaskUpdate+0xa8>
    {
      if (s_commandBufferIndex > 0)
 800137a:	4b12      	ldr	r3, [pc, #72]	@ (80013c4 <APP_COMMAND_TaskUpdate+0xdc>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d012      	beq.n	80013a8 <APP_COMMAND_TaskUpdate+0xc0>
      {
        s_commandBufferIndex--;
 8001382:	4b10      	ldr	r3, [pc, #64]	@ (80013c4 <APP_COMMAND_TaskUpdate+0xdc>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	3b01      	subs	r3, #1
 8001388:	b2da      	uxtb	r2, r3
 800138a:	4b0e      	ldr	r3, [pc, #56]	@ (80013c4 <APP_COMMAND_TaskUpdate+0xdc>)
 800138c:	701a      	strb	r2, [r3, #0]
      if (s_commandBufferIndex > 0)
 800138e:	e00b      	b.n	80013a8 <APP_COMMAND_TaskUpdate+0xc0>
      }
    }
    else
    {
      s_commandBuffer[s_commandBufferIndex] = rxData;
 8001390:	4b0c      	ldr	r3, [pc, #48]	@ (80013c4 <APP_COMMAND_TaskUpdate+0xdc>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	4619      	mov	r1, r3
 8001396:	4a0c      	ldr	r2, [pc, #48]	@ (80013c8 <APP_COMMAND_TaskUpdate+0xe0>)
 8001398:	79fb      	ldrb	r3, [r7, #7]
 800139a:	5453      	strb	r3, [r2, r1]
      s_commandBufferIndex++;
 800139c:	4b09      	ldr	r3, [pc, #36]	@ (80013c4 <APP_COMMAND_TaskUpdate+0xdc>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	3301      	adds	r3, #1
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	4b07      	ldr	r3, [pc, #28]	@ (80013c4 <APP_COMMAND_TaskUpdate+0xdc>)
 80013a6:	701a      	strb	r2, [r3, #0]
  while (BSP_UART_IsAvailableDataReceive(&uart_cfg_cml))
 80013a8:	4805      	ldr	r0, [pc, #20]	@ (80013c0 <APP_COMMAND_TaskUpdate+0xd8>)
 80013aa:	f000 ff3b 	bl	8002224 <BSP_UART_IsAvailableDataReceive>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d19d      	bne.n	80012f0 <APP_COMMAND_TaskUpdate+0x8>
      {
        s_commandBufferIndex = 0;
      }
    }
  }
}
 80013b4:	bf00      	nop
 80013b6:	bf00      	nop
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	20000384 	.word	0x20000384
 80013c4:	20000383 	.word	0x20000383
 80013c8:	20000284 	.word	0x20000284
 80013cc:	08007818 	.word	0x08007818
 80013d0:	20000000 	.word	0x20000000
 80013d4:	08007820 	.word	0x08007820

080013d8 <ACS712_CurrentConverterVoltage>:
  /**********************
   *   PUBLIC FUNCTIONS
   **********************/

  static inline float ACS712_CurrentConverterVoltage(float current)
  {
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
	  return 2.5f + 0.1f * current;
 80013e0:	4906      	ldr	r1, [pc, #24]	@ (80013fc <ACS712_CurrentConverterVoltage+0x24>)
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f7ff fcb8 	bl	8000d58 <__aeabi_fmul>
 80013e8:	4603      	mov	r3, r0
 80013ea:	4905      	ldr	r1, [pc, #20]	@ (8001400 <ACS712_CurrentConverterVoltage+0x28>)
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff fbab 	bl	8000b48 <__addsf3>
 80013f2:	4603      	mov	r3, r0
  }
 80013f4:	4618      	mov	r0, r3
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	3dcccccd 	.word	0x3dcccccd
 8001400:	40200000 	.word	0x40200000

08001404 <APP_CONTROL_Init>:
 * PI control parameters, PWM configuration, ADC configuration, and resetting
 * relevant data.
 */
void
APP_CONTROL_Init (void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  // Link pointer to variable
  s_control_power.p_state = (CONTROL_STATE_t *)&s_control_llc_data.s_state_data;
 8001408:	4b27      	ldr	r3, [pc, #156]	@ (80014a8 <APP_CONTROL_Init+0xa4>)
 800140a:	4a28      	ldr	r2, [pc, #160]	@ (80014ac <APP_CONTROL_Init+0xa8>)
 800140c:	601a      	str	r2, [r3, #0]
  s_control_power.p_control_voltage
      = (pi_control_t *)&s_control_llc_data.s_control_voltage;
 800140e:	4b26      	ldr	r3, [pc, #152]	@ (80014a8 <APP_CONTROL_Init+0xa4>)
 8001410:	4a27      	ldr	r2, [pc, #156]	@ (80014b0 <APP_CONTROL_Init+0xac>)
 8001412:	605a      	str	r2, [r3, #4]
  s_control_power.p_control_current
      = (pi_control_t *)&s_control_llc_data.s_control_current;
 8001414:	4b24      	ldr	r3, [pc, #144]	@ (80014a8 <APP_CONTROL_Init+0xa4>)
 8001416:	4a27      	ldr	r2, [pc, #156]	@ (80014b4 <APP_CONTROL_Init+0xb0>)
 8001418:	609a      	str	r2, [r3, #8]
  s_control_power.p_pwm_control_1
      = (pwm_cfg_t *)&s_control_llc_data.s_control_gate;
 800141a:	4b23      	ldr	r3, [pc, #140]	@ (80014a8 <APP_CONTROL_Init+0xa4>)
 800141c:	4a26      	ldr	r2, [pc, #152]	@ (80014b8 <APP_CONTROL_Init+0xb4>)
 800141e:	60da      	str	r2, [r3, #12]
  s_control_power.p_output_voltage
      = (float *)&s_control_llc_data.f_output_voltage;
 8001420:	4b21      	ldr	r3, [pc, #132]	@ (80014a8 <APP_CONTROL_Init+0xa4>)
 8001422:	4a26      	ldr	r2, [pc, #152]	@ (80014bc <APP_CONTROL_Init+0xb8>)
 8001424:	615a      	str	r2, [r3, #20]
  s_control_power.p_output_current
      = (float *)&s_control_llc_data.f_output_current;
 8001426:	4b20      	ldr	r3, [pc, #128]	@ (80014a8 <APP_CONTROL_Init+0xa4>)
 8001428:	4a25      	ldr	r2, [pc, #148]	@ (80014c0 <APP_CONTROL_Init+0xbc>)
 800142a:	611a      	str	r2, [r3, #16]

  // Prepare data task control power
  *s_control_power.p_state = WAIT_INPUT_VOLTAGE;
 800142c:	4b1e      	ldr	r3, [pc, #120]	@ (80014a8 <APP_CONTROL_Init+0xa4>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2200      	movs	r2, #0
 8001432:	701a      	strb	r2, [r3, #0]

  // Initialize PI control parameters of control voltage
  s_control_power.p_control_voltage->f_Ki       = KI_VOLTAGE;
 8001434:	4b1c      	ldr	r3, [pc, #112]	@ (80014a8 <APP_CONTROL_Init+0xa4>)
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	4a22      	ldr	r2, [pc, #136]	@ (80014c4 <APP_CONTROL_Init+0xc0>)
 800143a:	61da      	str	r2, [r3, #28]
  s_control_power.p_control_voltage->f_Kp       = KP_VOLTAGE;
 800143c:	4b1a      	ldr	r3, [pc, #104]	@ (80014a8 <APP_CONTROL_Init+0xa4>)
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	4a20      	ldr	r2, [pc, #128]	@ (80014c4 <APP_CONTROL_Init+0xc0>)
 8001442:	619a      	str	r2, [r3, #24]
  s_control_power.p_control_voltage->f_setPoint = VOLTAGE_END_THRESHOLD;
 8001444:	4b18      	ldr	r3, [pc, #96]	@ (80014a8 <APP_CONTROL_Init+0xa4>)
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	4a1f      	ldr	r2, [pc, #124]	@ (80014c8 <APP_CONTROL_Init+0xc4>)
 800144a:	621a      	str	r2, [r3, #32]

  // Initialize PI control parameters of control current
  s_control_power.p_control_current->f_Ki       = KI_CURRENT;
 800144c:	4b16      	ldr	r3, [pc, #88]	@ (80014a8 <APP_CONTROL_Init+0xa4>)
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	4a1c      	ldr	r2, [pc, #112]	@ (80014c4 <APP_CONTROL_Init+0xc0>)
 8001452:	61da      	str	r2, [r3, #28]
  s_control_power.p_control_current->f_Kp       = KP_CURRENT;
 8001454:	4b14      	ldr	r3, [pc, #80]	@ (80014a8 <APP_CONTROL_Init+0xa4>)
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	4a1a      	ldr	r2, [pc, #104]	@ (80014c4 <APP_CONTROL_Init+0xc0>)
 800145a:	619a      	str	r2, [r3, #24]
  s_control_power.p_control_current->f_setPoint = CURRENT_START_THRESHOLD;
 800145c:	4b12      	ldr	r3, [pc, #72]	@ (80014a8 <APP_CONTROL_Init+0xa4>)
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	4a1a      	ldr	r2, [pc, #104]	@ (80014cc <APP_CONTROL_Init+0xc8>)
 8001462:	621a      	str	r2, [r3, #32]

  // Initialize PWM control parameters
  s_control_power.p_pwm_control_1->channel = PWM_CHANNEL_1;
 8001464:	4b10      	ldr	r3, [pc, #64]	@ (80014a8 <APP_CONTROL_Init+0xa4>)
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	2201      	movs	r2, #1
 800146a:	60da      	str	r2, [r3, #12]
  s_control_power.p_pwm_control_1->output  = PWM_POSITIVE_NEGATIVE;
 800146c:	4b0e      	ldr	r3, [pc, #56]	@ (80014a8 <APP_CONTROL_Init+0xa4>)
 800146e:	68da      	ldr	r2, [r3, #12]
 8001470:	7c13      	ldrb	r3, [r2, #16]
 8001472:	2101      	movs	r1, #1
 8001474:	f361 0301 	bfi	r3, r1, #0, #2
 8001478:	7413      	strb	r3, [r2, #16]
  s_control_power.p_pwm_control_1->p_tim   = TIM1;
 800147a:	4b0b      	ldr	r3, [pc, #44]	@ (80014a8 <APP_CONTROL_Init+0xa4>)
 800147c:	68db      	ldr	r3, [r3, #12]
 800147e:	4a14      	ldr	r2, [pc, #80]	@ (80014d0 <APP_CONTROL_Init+0xcc>)
 8001480:	601a      	str	r2, [r3, #0]

  // Reset control data
  APP_CONTROL_ResetData();
 8001482:	f000 f905 	bl	8001690 <APP_CONTROL_ResetData>

  // Enable PWM timer
  BSP_PWM_EnableTimer(s_control_power.p_pwm_control_1);
 8001486:	4b08      	ldr	r3, [pc, #32]	@ (80014a8 <APP_CONTROL_Init+0xa4>)
 8001488:	68db      	ldr	r3, [r3, #12]
 800148a:	4618      	mov	r0, r3
 800148c:	f000 fc94 	bl	8001db8 <BSP_PWM_EnableTimer>

  // Reset PI control
  PIControl_Reset(s_control_power.p_control_voltage);
 8001490:	4b05      	ldr	r3, [pc, #20]	@ (80014a8 <APP_CONTROL_Init+0xa4>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	4618      	mov	r0, r3
 8001496:	f003 f82b 	bl	80044f0 <PIControl_Reset>
  PIControl_Reset(s_control_power.p_control_current);
 800149a:	4b03      	ldr	r3, [pc, #12]	@ (80014a8 <APP_CONTROL_Init+0xa4>)
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	4618      	mov	r0, r3
 80014a0:	f003 f826 	bl	80044f0 <PIControl_Reset>
}
 80014a4:	bf00      	nop
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	200003ac 	.word	0x200003ac
 80014ac:	200003cc 	.word	0x200003cc
 80014b0:	200003d0 	.word	0x200003d0
 80014b4:	200003f4 	.word	0x200003f4
 80014b8:	20000418 	.word	0x20000418
 80014bc:	20000454 	.word	0x20000454
 80014c0:	20000458 	.word	0x20000458
 80014c4:	3dcccccd 	.word	0x3dcccccd
 80014c8:	42680000 	.word	0x42680000
 80014cc:	40c00000 	.word	0x40c00000
 80014d0:	40012c00 	.word	0x40012c00

080014d4 <APP_CONTROL_CreateTask>:
 * This function creates a control task using the scheduler's task creation
 * function, initializing the task handle and task properties.
 */
void
APP_CONTROL_CreateTask (void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  SCH_TASK_CreateTask(&s_ControlTaskContext.taskHandle,
 80014d8:	4902      	ldr	r1, [pc, #8]	@ (80014e4 <APP_CONTROL_CreateTask+0x10>)
 80014da:	4803      	ldr	r0, [pc, #12]	@ (80014e8 <APP_CONTROL_CreateTask+0x14>)
 80014dc:	f003 f96c 	bl	80047b8 <SCH_TASK_CreateTask>
                      &s_ControlTaskContext.taskProperty);
}
 80014e0:	bf00      	nop
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	20000044 	.word	0x20000044
 80014e8:	20000040 	.word	0x20000040

080014ec <APP_CONTROL_TaskUpdate>:
 * CGT_SOFT_START. After completing the CGT_SOFT_START state, the state will
 * change to CGT_PROCESS.
 */
static void
APP_CONTROL_TaskUpdate (void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  switch (*s_control_power.p_state)
 80014f0:	4b1c      	ldr	r3, [pc, #112]	@ (8001564 <APP_CONTROL_TaskUpdate+0x78>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	2b03      	cmp	r3, #3
 80014f8:	d831      	bhi.n	800155e <APP_CONTROL_TaskUpdate+0x72>
 80014fa:	a201      	add	r2, pc, #4	@ (adr r2, 8001500 <APP_CONTROL_TaskUpdate+0x14>)
 80014fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001500:	0800155f 	.word	0x0800155f
 8001504:	08001511 	.word	0x08001511
 8001508:	0800153f 	.word	0x0800153f
 800150c:	0800155f 	.word	0x0800155f
  {
    case WAIT_INPUT_VOLTAGE:
      break;
    case SOFT_START:
      // Handle soft start initialization
      FCP_PhaseStart(s_control_power.u32_times_change_fre);
 8001510:	4b14      	ldr	r3, [pc, #80]	@ (8001564 <APP_CONTROL_TaskUpdate+0x78>)
 8001512:	7f1b      	ldrb	r3, [r3, #28]
 8001514:	4618      	mov	r0, r3
 8001516:	f002 fef7 	bl	8004308 <FCP_PhaseStart>
      if (s_control_power.u32_times_change_fre == TIME_LIMIT_PHASE_START)
 800151a:	4b12      	ldr	r3, [pc, #72]	@ (8001564 <APP_CONTROL_TaskUpdate+0x78>)
 800151c:	7f1b      	ldrb	r3, [r3, #28]
 800151e:	2b3c      	cmp	r3, #60	@ 0x3c
 8001520:	d106      	bne.n	8001530 <APP_CONTROL_TaskUpdate+0x44>
      {
        s_control_power.u32_times_change_fre = 0;
 8001522:	4b10      	ldr	r3, [pc, #64]	@ (8001564 <APP_CONTROL_TaskUpdate+0x78>)
 8001524:	2200      	movs	r2, #0
 8001526:	771a      	strb	r2, [r3, #28]
        *s_control_power.p_state             = DISCHARGING;
 8001528:	4b0e      	ldr	r3, [pc, #56]	@ (8001564 <APP_CONTROL_TaskUpdate+0x78>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2203      	movs	r2, #3
 800152e:	701a      	strb	r2, [r3, #0]
      }
      s_control_power.u32_times_change_fre++;
 8001530:	4b0c      	ldr	r3, [pc, #48]	@ (8001564 <APP_CONTROL_TaskUpdate+0x78>)
 8001532:	7f1b      	ldrb	r3, [r3, #28]
 8001534:	3301      	adds	r3, #1
 8001536:	b2da      	uxtb	r2, r3
 8001538:	4b0a      	ldr	r3, [pc, #40]	@ (8001564 <APP_CONTROL_TaskUpdate+0x78>)
 800153a:	771a      	strb	r2, [r3, #28]

      break;
 800153c:	e010      	b.n	8001560 <APP_CONTROL_TaskUpdate+0x74>
    case DISCHARGING:
    	break;
    case CHARGING:
      if (s_control_power.u32_times_change_fre == CONTROL_PI_TIME_SAMPLE)
 800153e:	4b09      	ldr	r3, [pc, #36]	@ (8001564 <APP_CONTROL_TaskUpdate+0x78>)
 8001540:	7f1b      	ldrb	r3, [r3, #28]
 8001542:	2b0a      	cmp	r3, #10
 8001544:	d104      	bne.n	8001550 <APP_CONTROL_TaskUpdate+0x64>
      {
        APP_CONTROL_CCCVChager();
 8001546:	f000 f80f 	bl	8001568 <APP_CONTROL_CCCVChager>
        s_control_power.u32_times_change_fre = 0;
 800154a:	4b06      	ldr	r3, [pc, #24]	@ (8001564 <APP_CONTROL_TaskUpdate+0x78>)
 800154c:	2200      	movs	r2, #0
 800154e:	771a      	strb	r2, [r3, #28]
      }
      s_control_power.u32_times_change_fre++;
 8001550:	4b04      	ldr	r3, [pc, #16]	@ (8001564 <APP_CONTROL_TaskUpdate+0x78>)
 8001552:	7f1b      	ldrb	r3, [r3, #28]
 8001554:	3301      	adds	r3, #1
 8001556:	b2da      	uxtb	r2, r3
 8001558:	4b02      	ldr	r3, [pc, #8]	@ (8001564 <APP_CONTROL_TaskUpdate+0x78>)
 800155a:	771a      	strb	r2, [r3, #28]
      break;
 800155c:	e000      	b.n	8001560 <APP_CONTROL_TaskUpdate+0x74>
    default:
      break;
 800155e:	bf00      	nop
  }
}
 8001560:	bf00      	nop
 8001562:	bd80      	pop	{r7, pc}
 8001564:	200003ac 	.word	0x200003ac

08001568 <APP_CONTROL_CCCVChager>:

static void
APP_CONTROL_CCCVChager (void)
{
 8001568:	b590      	push	{r4, r7, lr}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
  // Read voltage feedback
  *s_control_power.p_output_voltage = ADS1115_Voltage(ADS1115_VOLTAGE_CHANNEL);
 800156e:	4b28      	ldr	r3, [pc, #160]	@ (8001610 <APP_CONTROL_CCCVChager+0xa8>)
 8001570:	695c      	ldr	r4, [r3, #20]
 8001572:	2002      	movs	r0, #2
 8001574:	f001 fef8 	bl	8003368 <ADS1115_Voltage>
 8001578:	4603      	mov	r3, r0
 800157a:	6023      	str	r3, [r4, #0]
  APP_CONTROL_ConvertVoltageOutput();
 800157c:	f000 f84c 	bl	8001618 <APP_CONTROL_ConvertVoltageOutput>

  // If voltage feedback <= VOLTAGE REFERENCE System in mode CC
  // If voltage feedback > VOLTAGE REFERENCE System in mode CV

  if (*s_control_power.p_output_voltage <= VOLTAGE_END_THRESHOLD)
 8001580:	4b23      	ldr	r3, [pc, #140]	@ (8001610 <APP_CONTROL_CCCVChager+0xa8>)
 8001582:	695b      	ldr	r3, [r3, #20]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4923      	ldr	r1, [pc, #140]	@ (8001614 <APP_CONTROL_CCCVChager+0xac>)
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff fd8d 	bl	80010a8 <__aeabi_fcmple>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d022      	beq.n	80015da <APP_CONTROL_CCCVChager+0x72>
  {
    // Read voltage channel current
    float value_temp = ADS1115_Voltage(ADS1115_CURRENT_CHANNEL);
 8001594:	2001      	movs	r0, #1
 8001596:	f001 fee7 	bl	8003368 <ADS1115_Voltage>
 800159a:	6078      	str	r0, [r7, #4]

    // Convert from voltage channel current to current
    *s_control_power.p_output_current
 800159c:	4b1c      	ldr	r3, [pc, #112]	@ (8001610 <APP_CONTROL_CCCVChager+0xa8>)
 800159e:	691c      	ldr	r4, [r3, #16]
        = ACS712_CurrentConverterVoltage(value_temp);
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f7ff ff19 	bl	80013d8 <ACS712_CurrentConverterVoltage>
 80015a6:	4603      	mov	r3, r0
 80015a8:	6023      	str	r3, [r4, #0]

    // PI control
    PIControl_Process(*s_control_power.p_output_current,
 80015aa:	4b19      	ldr	r3, [pc, #100]	@ (8001610 <APP_CONTROL_CCCVChager+0xa8>)
 80015ac:	691b      	ldr	r3, [r3, #16]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a17      	ldr	r2, [pc, #92]	@ (8001610 <APP_CONTROL_CCCVChager+0xa8>)
 80015b2:	6892      	ldr	r2, [r2, #8]
 80015b4:	4611      	mov	r1, r2
 80015b6:	4618      	mov	r0, r3
 80015b8:	f002 ffc0 	bl	800453c <PIControl_Process>
                      s_control_power.p_control_current);

    // Current convert frequency
    s_control_power.u32_frequency_operation
        = CCF_Process(s_control_power.p_control_current->f_out);
 80015bc:	4b14      	ldr	r3, [pc, #80]	@ (8001610 <APP_CONTROL_CCCVChager+0xa8>)
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f002 fe70 	bl	80042a8 <CCF_Process>
 80015c8:	4603      	mov	r3, r0
 80015ca:	4a11      	ldr	r2, [pc, #68]	@ (8001610 <APP_CONTROL_CCCVChager+0xa8>)
 80015cc:	6193      	str	r3, [r2, #24]

    // Frequency convert pulse
    FCP_PhaseProcess(s_control_power.u32_frequency_operation);
 80015ce:	4b10      	ldr	r3, [pc, #64]	@ (8001610 <APP_CONTROL_CCCVChager+0xa8>)
 80015d0:	699b      	ldr	r3, [r3, #24]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f002 fed6 	bl	8004384 <FCP_PhaseProcess>
        = VCF_Process(s_control_power.p_control_voltage->f_out);

    // Frequency convert pulse
    FCP_PhaseProcess(s_control_power.u32_frequency_operation);
  }
}
 80015d8:	e016      	b.n	8001608 <APP_CONTROL_CCCVChager+0xa0>
    PIControl_Process(*s_control_power.p_output_voltage,
 80015da:	4b0d      	ldr	r3, [pc, #52]	@ (8001610 <APP_CONTROL_CCCVChager+0xa8>)
 80015dc:	695b      	ldr	r3, [r3, #20]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a0b      	ldr	r2, [pc, #44]	@ (8001610 <APP_CONTROL_CCCVChager+0xa8>)
 80015e2:	6852      	ldr	r2, [r2, #4]
 80015e4:	4611      	mov	r1, r2
 80015e6:	4618      	mov	r0, r3
 80015e8:	f002 ffa8 	bl	800453c <PIControl_Process>
        = VCF_Process(s_control_power.p_control_voltage->f_out);
 80015ec:	4b08      	ldr	r3, [pc, #32]	@ (8001610 <APP_CONTROL_CCCVChager+0xa8>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f003 f8b0 	bl	8004758 <VCF_Process>
 80015f8:	4603      	mov	r3, r0
 80015fa:	4a05      	ldr	r2, [pc, #20]	@ (8001610 <APP_CONTROL_CCCVChager+0xa8>)
 80015fc:	6193      	str	r3, [r2, #24]
    FCP_PhaseProcess(s_control_power.u32_frequency_operation);
 80015fe:	4b04      	ldr	r3, [pc, #16]	@ (8001610 <APP_CONTROL_CCCVChager+0xa8>)
 8001600:	699b      	ldr	r3, [r3, #24]
 8001602:	4618      	mov	r0, r3
 8001604:	f002 febe 	bl	8004384 <FCP_PhaseProcess>
}
 8001608:	bf00      	nop
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	bd90      	pop	{r4, r7, pc}
 8001610:	200003ac 	.word	0x200003ac
 8001614:	42680000 	.word	0x42680000

08001618 <APP_CONTROL_ConvertVoltageOutput>:

static void
APP_CONTROL_ConvertVoltageOutput (void)
{
 8001618:	b590      	push	{r4, r7, lr}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
  float value_temp                  = *s_control_power.p_output_voltage;
 800161e:	4b1a      	ldr	r3, [pc, #104]	@ (8001688 <APP_CONTROL_ConvertVoltageOutput+0x70>)
 8001620:	695b      	ldr	r3, [r3, #20]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	607b      	str	r3, [r7, #4]
  *s_control_power.p_output_voltage = (value_temp / 3.09 + 3.3) * 13;
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f7fe ff08 	bl	800043c <__aeabi_f2d>
 800162c:	a312      	add	r3, pc, #72	@ (adr r3, 8001678 <APP_CONTROL_ConvertVoltageOutput+0x60>)
 800162e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001632:	f7ff f885 	bl	8000740 <__aeabi_ddiv>
 8001636:	4602      	mov	r2, r0
 8001638:	460b      	mov	r3, r1
 800163a:	4610      	mov	r0, r2
 800163c:	4619      	mov	r1, r3
 800163e:	a310      	add	r3, pc, #64	@ (adr r3, 8001680 <APP_CONTROL_ConvertVoltageOutput+0x68>)
 8001640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001644:	f7fe fd9c 	bl	8000180 <__adddf3>
 8001648:	4602      	mov	r2, r0
 800164a:	460b      	mov	r3, r1
 800164c:	4610      	mov	r0, r2
 800164e:	4619      	mov	r1, r3
 8001650:	f04f 0200 	mov.w	r2, #0
 8001654:	4b0d      	ldr	r3, [pc, #52]	@ (800168c <APP_CONTROL_ConvertVoltageOutput+0x74>)
 8001656:	f7fe ff49 	bl	80004ec <__aeabi_dmul>
 800165a:	4602      	mov	r2, r0
 800165c:	460b      	mov	r3, r1
 800165e:	490a      	ldr	r1, [pc, #40]	@ (8001688 <APP_CONTROL_ConvertVoltageOutput+0x70>)
 8001660:	694c      	ldr	r4, [r1, #20]
 8001662:	4610      	mov	r0, r2
 8001664:	4619      	mov	r1, r3
 8001666:	f7ff fa19 	bl	8000a9c <__aeabi_d2f>
 800166a:	4603      	mov	r3, r0
 800166c:	6023      	str	r3, [r4, #0]
}
 800166e:	bf00      	nop
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	bd90      	pop	{r4, r7, pc}
 8001676:	bf00      	nop
 8001678:	eb851eb8 	.word	0xeb851eb8
 800167c:	4008b851 	.word	0x4008b851
 8001680:	66666666 	.word	0x66666666
 8001684:	400a6666 	.word	0x400a6666
 8001688:	200003ac 	.word	0x200003ac
 800168c:	402a0000 	.word	0x402a0000

08001690 <APP_CONTROL_ResetData>:
 * The function `APP_CONTROL_ResetData` resets certain data values related to
 * power control.
 */
static void
APP_CONTROL_ResetData (void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  s_control_power.u32_frequency_operation = 60000000;
 8001694:	4b07      	ldr	r3, [pc, #28]	@ (80016b4 <APP_CONTROL_ResetData+0x24>)
 8001696:	4a08      	ldr	r2, [pc, #32]	@ (80016b8 <APP_CONTROL_ResetData+0x28>)
 8001698:	619a      	str	r2, [r3, #24]
  s_control_power.u32_times_change_fre    = 0;
 800169a:	4b06      	ldr	r3, [pc, #24]	@ (80016b4 <APP_CONTROL_ResetData+0x24>)
 800169c:	2200      	movs	r2, #0
 800169e:	771a      	strb	r2, [r3, #28]
  *s_control_power.p_output_voltage       = 0;
 80016a0:	4b04      	ldr	r3, [pc, #16]	@ (80016b4 <APP_CONTROL_ResetData+0x24>)
 80016a2:	695b      	ldr	r3, [r3, #20]
 80016a4:	f04f 0200 	mov.w	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]
}
 80016aa:	bf00      	nop
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bc80      	pop	{r7}
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	200003ac 	.word	0x200003ac
 80016b8:	03938700 	.word	0x03938700

080016bc <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	0a1b      	lsrs	r3, r3, #8
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	611a      	str	r2, [r3, #16]
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bc80      	pop	{r7}
 80016d8:	4770      	bx	lr

080016da <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80016da:	b480      	push	{r7}
 80016dc:	b083      	sub	sp, #12
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
 80016e2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	0a1b      	lsrs	r3, r3, #8
 80016e8:	b29a      	uxth	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	615a      	str	r2, [r3, #20]
}
 80016ee:	bf00      	nop
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bc80      	pop	{r7}
 80016f6:	4770      	bx	lr

080016f8 <APP_STATUS_LED_Init>:
/**********************
 *   PUBLIC FUNCTIONS
 **********************/

void APP_STATUS_LED_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  LL_GPIO_ResetOutputPin(LED_WAIT_GPIO_Port, LED_WAIT_Pin);
 80016fc:	f240 1101 	movw	r1, #257	@ 0x101
 8001700:	4808      	ldr	r0, [pc, #32]	@ (8001724 <APP_STATUS_LED_Init+0x2c>)
 8001702:	f7ff ffea 	bl	80016da <LL_GPIO_ResetOutputPin>
  LL_GPIO_ResetOutputPin(LED_SOFT_START_GPIO_Port, LED_SOFT_START_Pin);
 8001706:	f240 2102 	movw	r1, #514	@ 0x202
 800170a:	4806      	ldr	r0, [pc, #24]	@ (8001724 <APP_STATUS_LED_Init+0x2c>)
 800170c:	f7ff ffe5 	bl	80016da <LL_GPIO_ResetOutputPin>
  LL_GPIO_ResetOutputPin(LED_PROCESS_GPIO_Port, LED_PROCESS_Pin);
 8001710:	f240 4104 	movw	r1, #1028	@ 0x404
 8001714:	4803      	ldr	r0, [pc, #12]	@ (8001724 <APP_STATUS_LED_Init+0x2c>)
 8001716:	f7ff ffe0 	bl	80016da <LL_GPIO_ResetOutputPin>
  s_status_led.p_status_led = (CONTROL_STATE_t *)&s_control_llc_data.s_state_data;
 800171a:	4b03      	ldr	r3, [pc, #12]	@ (8001728 <APP_STATUS_LED_Init+0x30>)
 800171c:	4a03      	ldr	r2, [pc, #12]	@ (800172c <APP_STATUS_LED_Init+0x34>)
 800171e:	601a      	str	r2, [r3, #0]
}
 8001720:	bf00      	nop
 8001722:	bd80      	pop	{r7, pc}
 8001724:	40010c00 	.word	0x40010c00
 8001728:	2000045c 	.word	0x2000045c
 800172c:	200003cc 	.word	0x200003cc

08001730 <APP_STATUS_LED_CreateTask>:
void APP_STATUS_LED_CreateTask(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  SCH_TASK_CreateTask(&s_StatusLedTaskContext.taskHandle,
 8001734:	4902      	ldr	r1, [pc, #8]	@ (8001740 <APP_STATUS_LED_CreateTask+0x10>)
 8001736:	4803      	ldr	r0, [pc, #12]	@ (8001744 <APP_STATUS_LED_CreateTask+0x14>)
 8001738:	f003 f83e 	bl	80047b8 <SCH_TASK_CreateTask>
                      &s_StatusLedTaskContext.taskProperty);
}
 800173c:	bf00      	nop
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20000054 	.word	0x20000054
 8001744:	20000050 	.word	0x20000050

08001748 <APP_STATUS_LED_TaskUpdate>:
 * - DISCHARGING: LED 1 OFF, LED 2 OFF, LED 3 ON
 * - CHARGING: LED 1 OFF, LED 2 OFF, LED 3 TOGGLE with frequency 500Hz
 */
static void
APP_STATUS_LED_TaskUpdate(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  switch (*s_status_led.p_status_led)
 800174c:	4b21      	ldr	r3, [pc, #132]	@ (80017d4 <APP_STATUS_LED_TaskUpdate+0x8c>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	2b03      	cmp	r3, #3
 8001754:	d83a      	bhi.n	80017cc <APP_STATUS_LED_TaskUpdate+0x84>
 8001756:	a201      	add	r2, pc, #4	@ (adr r2, 800175c <APP_STATUS_LED_TaskUpdate+0x14>)
 8001758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800175c:	0800176d 	.word	0x0800176d
 8001760:	0800178d 	.word	0x0800178d
 8001764:	080017cd 	.word	0x080017cd
 8001768:	080017ad 	.word	0x080017ad
  {
  case WAIT_INPUT_VOLTAGE:
    LL_GPIO_SetOutputPin(LED_WAIT_GPIO_Port, LED_WAIT_Pin);
 800176c:	f240 1101 	movw	r1, #257	@ 0x101
 8001770:	4819      	ldr	r0, [pc, #100]	@ (80017d8 <APP_STATUS_LED_TaskUpdate+0x90>)
 8001772:	f7ff ffa3 	bl	80016bc <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(LED_SOFT_START_GPIO_Port, LED_SOFT_START_Pin);
 8001776:	f240 2102 	movw	r1, #514	@ 0x202
 800177a:	4817      	ldr	r0, [pc, #92]	@ (80017d8 <APP_STATUS_LED_TaskUpdate+0x90>)
 800177c:	f7ff ffad 	bl	80016da <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(LED_PROCESS_GPIO_Port, LED_PROCESS_Pin);
 8001780:	f240 4104 	movw	r1, #1028	@ 0x404
 8001784:	4814      	ldr	r0, [pc, #80]	@ (80017d8 <APP_STATUS_LED_TaskUpdate+0x90>)
 8001786:	f7ff ffa8 	bl	80016da <LL_GPIO_ResetOutputPin>
    break;
 800178a:	e020      	b.n	80017ce <APP_STATUS_LED_TaskUpdate+0x86>

  case SOFT_START:
    LL_GPIO_ResetOutputPin(LED_WAIT_GPIO_Port, LED_WAIT_Pin);
 800178c:	f240 1101 	movw	r1, #257	@ 0x101
 8001790:	4811      	ldr	r0, [pc, #68]	@ (80017d8 <APP_STATUS_LED_TaskUpdate+0x90>)
 8001792:	f7ff ffa2 	bl	80016da <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(LED_SOFT_START_GPIO_Port, LED_SOFT_START_Pin);
 8001796:	f240 2102 	movw	r1, #514	@ 0x202
 800179a:	480f      	ldr	r0, [pc, #60]	@ (80017d8 <APP_STATUS_LED_TaskUpdate+0x90>)
 800179c:	f7ff ff8e 	bl	80016bc <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(LED_PROCESS_GPIO_Port, LED_PROCESS_Pin);
 80017a0:	f240 4104 	movw	r1, #1028	@ 0x404
 80017a4:	480c      	ldr	r0, [pc, #48]	@ (80017d8 <APP_STATUS_LED_TaskUpdate+0x90>)
 80017a6:	f7ff ff98 	bl	80016da <LL_GPIO_ResetOutputPin>
    break;
 80017aa:	e010      	b.n	80017ce <APP_STATUS_LED_TaskUpdate+0x86>

  case DISCHARGING:
    LL_GPIO_ResetOutputPin(LED_WAIT_GPIO_Port, LED_WAIT_Pin);
 80017ac:	f240 1101 	movw	r1, #257	@ 0x101
 80017b0:	4809      	ldr	r0, [pc, #36]	@ (80017d8 <APP_STATUS_LED_TaskUpdate+0x90>)
 80017b2:	f7ff ff92 	bl	80016da <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(LED_SOFT_START_GPIO_Port, LED_SOFT_START_Pin);
 80017b6:	f240 2102 	movw	r1, #514	@ 0x202
 80017ba:	4807      	ldr	r0, [pc, #28]	@ (80017d8 <APP_STATUS_LED_TaskUpdate+0x90>)
 80017bc:	f7ff ff8d 	bl	80016da <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(LED_PROCESS_GPIO_Port, LED_PROCESS_Pin);
 80017c0:	f240 4104 	movw	r1, #1028	@ 0x404
 80017c4:	4804      	ldr	r0, [pc, #16]	@ (80017d8 <APP_STATUS_LED_TaskUpdate+0x90>)
 80017c6:	f7ff ff79 	bl	80016bc <LL_GPIO_SetOutputPin>
    break;
 80017ca:	e000      	b.n	80017ce <APP_STATUS_LED_TaskUpdate+0x86>
  case CHARGING:
	  break;
  default:
    break;
 80017cc:	bf00      	nop
  }
}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	2000045c 	.word	0x2000045c
 80017d8:	40010c00 	.word	0x40010c00

080017dc <LL_I2C_IsEnabled>:
  * @rmtoll CR1          PE            LL_I2C_IsEnabled
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsEnabled(I2C_TypeDef *I2Cx)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->CR1, I2C_CR1_PE) == (I2C_CR1_PE));
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0301 	and.w	r3, r3, #1
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	bf0c      	ite	eq
 80017f0:	2301      	moveq	r3, #1
 80017f2:	2300      	movne	r3, #0
 80017f4:	b2db      	uxtb	r3, r3
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bc80      	pop	{r7}
 80017fe:	4770      	bx	lr

08001800 <LL_I2C_IsActiveFlag_TXE>:
  * @rmtoll SR1          TXE           LL_I2C_IsActiveFlag_TXE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXE(I2C_TypeDef *I2Cx)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_TXE) == (I2C_SR1_TXE));
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	695b      	ldr	r3, [r3, #20]
 800180c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001810:	2b80      	cmp	r3, #128	@ 0x80
 8001812:	bf0c      	ite	eq
 8001814:	2301      	moveq	r3, #1
 8001816:	2300      	movne	r3, #0
 8001818:	b2db      	uxtb	r3, r3
}
 800181a:	4618      	mov	r0, r3
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	bc80      	pop	{r7}
 8001822:	4770      	bx	lr

08001824 <LL_I2C_IsActiveFlag_BTF>:
  * @rmtoll SR1          BTF           LL_I2C_IsActiveFlag_BTF
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_BTF(I2C_TypeDef *I2Cx)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_BTF) == (I2C_SR1_BTF));
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	695b      	ldr	r3, [r3, #20]
 8001830:	f003 0304 	and.w	r3, r3, #4
 8001834:	2b04      	cmp	r3, #4
 8001836:	bf0c      	ite	eq
 8001838:	2301      	moveq	r3, #1
 800183a:	2300      	movne	r3, #0
 800183c:	b2db      	uxtb	r3, r3
}
 800183e:	4618      	mov	r0, r3
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	bc80      	pop	{r7}
 8001846:	4770      	bx	lr

08001848 <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll SR1          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(I2C_TypeDef *I2Cx)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_RXNE) == (I2C_SR1_RXNE));
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	695b      	ldr	r3, [r3, #20]
 8001854:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001858:	2b40      	cmp	r3, #64	@ 0x40
 800185a:	bf0c      	ite	eq
 800185c:	2301      	moveq	r3, #1
 800185e:	2300      	movne	r3, #0
 8001860:	b2db      	uxtb	r3, r3
}
 8001862:	4618      	mov	r0, r3
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	bc80      	pop	{r7}
 800186a:	4770      	bx	lr

0800186c <LL_I2C_IsActiveFlag_ADDR>:
  * @rmtoll SR1          ADDR          LL_I2C_IsActiveFlag_ADDR
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_ADDR(I2C_TypeDef *I2Cx)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_ADDR) == (I2C_SR1_ADDR));
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	695b      	ldr	r3, [r3, #20]
 8001878:	f003 0302 	and.w	r3, r3, #2
 800187c:	2b02      	cmp	r3, #2
 800187e:	bf0c      	ite	eq
 8001880:	2301      	moveq	r3, #1
 8001882:	2300      	movne	r3, #0
 8001884:	b2db      	uxtb	r3, r3
}
 8001886:	4618      	mov	r0, r3
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	bc80      	pop	{r7}
 800188e:	4770      	bx	lr

08001890 <LL_I2C_ClearFlag_ADDR>:
  * @rmtoll SR1          ADDR          LL_I2C_ClearFlag_ADDR
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_ADDR(I2C_TypeDef *I2Cx)
{
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = I2Cx->SR1;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	695b      	ldr	r3, [r3, #20]
 800189c:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 800189e:	68fb      	ldr	r3, [r7, #12]
  tmpreg = I2Cx->SR2;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	699b      	ldr	r3, [r3, #24]
 80018a4:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80018a6:	68fb      	ldr	r3, [r7, #12]
}
 80018a8:	bf00      	nop
 80018aa:	3714      	adds	r7, #20
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bc80      	pop	{r7}
 80018b0:	4770      	bx	lr

080018b2 <LL_I2C_GenerateStopCondition>:
  * @rmtoll CR1          STOP          LL_I2C_GenerateStopCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStopCondition(I2C_TypeDef *I2Cx)
{
 80018b2:	b480      	push	{r7}
 80018b4:	b083      	sub	sp, #12
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_STOP);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	601a      	str	r2, [r3, #0]
}
 80018c6:	bf00      	nop
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bc80      	pop	{r7}
 80018ce:	4770      	bx	lr

080018d0 <LL_I2C_ReceiveData8>:
  * @rmtoll DR           DR            LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x0 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->DR, I2C_DR_DR));
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	691b      	ldr	r3, [r3, #16]
 80018dc:	b2db      	uxtb	r3, r3
}
 80018de:	4618      	mov	r0, r3
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bc80      	pop	{r7}
 80018e6:	4770      	bx	lr

080018e8 <BSP_I2C_MasterTransmit7B>:
 * @param p_i2c Pointer to the I2C configuration data structure.
 * @return Status of the I2C operation.
 */
i2c_status_t
BSP_I2C_MasterTransmit7B (i2c_data_t *p_i2c)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  // Start Condition
  p_i2c->status = I2C_MasterStart((I2C_TypeDef *)p_i2c->i2c_reg);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f000 f8f7 	bl	8001ae8 <I2C_MasterStart>
 80018fa:	4603      	mov	r3, r0
 80018fc:	461a      	mov	r2, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	731a      	strb	r2, [r3, #12]
  if (p_i2c->status == I2C_TIMEOUT)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	7b1b      	ldrb	r3, [r3, #12]
 8001906:	b2db      	uxtb	r3, r3
 8001908:	2b00      	cmp	r3, #0
 800190a:	d101      	bne.n	8001910 <BSP_I2C_MasterTransmit7B+0x28>
  {
    return I2C_TIMEOUT;
 800190c:	2300      	movs	r3, #0
 800190e:	e031      	b.n	8001974 <BSP_I2C_MasterTransmit7B+0x8c>
  }

  // Transmit Address, Clear ADDR bit
  p_i2c->status = I2C_SetAddress7B((I2C_TypeDef *)p_i2c->i2c_reg,
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681a      	ldr	r2, [r3, #0]
                                   (uint16_t)p_i2c->address);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	89db      	ldrh	r3, [r3, #14]
 8001918:	b29b      	uxth	r3, r3
  p_i2c->status = I2C_SetAddress7B((I2C_TypeDef *)p_i2c->i2c_reg,
 800191a:	b2db      	uxtb	r3, r3
 800191c:	4619      	mov	r1, r3
 800191e:	4610      	mov	r0, r2
 8001920:	f000 f916 	bl	8001b50 <I2C_SetAddress7B>
 8001924:	4603      	mov	r3, r0
 8001926:	461a      	mov	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	731a      	strb	r2, [r3, #12]
  if (p_i2c->status == I2C_TIMEOUT)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	7b1b      	ldrb	r3, [r3, #12]
 8001930:	b2db      	uxtb	r3, r3
 8001932:	2b00      	cmp	r3, #0
 8001934:	d101      	bne.n	800193a <BSP_I2C_MasterTransmit7B+0x52>
  {
    return I2C_TIMEOUT;
 8001936:	2300      	movs	r3, #0
 8001938:	e01c      	b.n	8001974 <BSP_I2C_MasterTransmit7B+0x8c>
  }

  // Transmit Data
  p_i2c->status = I2C_TransmitData7B((I2C_TypeDef *)p_i2c->i2c_reg,
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6818      	ldr	r0, [r3, #0]
                                     (uint32_t)p_i2c->size_buffer,
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6899      	ldr	r1, [r3, #8]
                                     (uint8_t *)p_i2c->buffer);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
  p_i2c->status = I2C_TransmitData7B((I2C_TypeDef *)p_i2c->i2c_reg,
 8001946:	461a      	mov	r2, r3
 8001948:	f000 f928 	bl	8001b9c <I2C_TransmitData7B>
 800194c:	4603      	mov	r3, r0
 800194e:	461a      	mov	r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	731a      	strb	r2, [r3, #12]
  if (p_i2c->status == I2C_TIMEOUT)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	7b1b      	ldrb	r3, [r3, #12]
 8001958:	b2db      	uxtb	r3, r3
 800195a:	2b00      	cmp	r3, #0
 800195c:	d101      	bne.n	8001962 <BSP_I2C_MasterTransmit7B+0x7a>
  {
    return I2C_TIMEOUT;
 800195e:	2300      	movs	r3, #0
 8001960:	e008      	b.n	8001974 <BSP_I2C_MasterTransmit7B+0x8c>
  }

  // Stop Condition
  I2C_MastterStop((I2C_TypeDef *)p_i2c->i2c_reg);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4618      	mov	r0, r3
 8001968:	f000 f8e6 	bl	8001b38 <I2C_MastterStop>

  // Done Transmit Frame
  p_i2c->status = I2C_OK;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2201      	movs	r2, #1
 8001970:	731a      	strb	r2, [r3, #12]
  return I2C_OK;
 8001972:	2301      	movs	r3, #1
}
 8001974:	4618      	mov	r0, r3
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <BSP_I2C_MasterReceive7B>:
 * @param p_i2c Pointer to the I2C configuration data structure.
 * @return Status of the I2C operation.
 */
i2c_status_t
BSP_I2C_MasterReceive7B (i2c_data_t *p_i2c)
{
 800197c:	b590      	push	{r4, r7, lr}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  uint32_t remaining = p_i2c->size_buffer;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	60fb      	str	r3, [r7, #12]
  // Start Condition
  p_i2c->status = I2C_MasterStart((I2C_TypeDef *)p_i2c->i2c_reg);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	f000 f8aa 	bl	8001ae8 <I2C_MasterStart>
 8001994:	4603      	mov	r3, r0
 8001996:	461a      	mov	r2, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	731a      	strb	r2, [r3, #12]
  if (p_i2c->status == I2C_TIMEOUT)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	7b1b      	ldrb	r3, [r3, #12]
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d101      	bne.n	80019aa <BSP_I2C_MasterReceive7B+0x2e>
  {
    return I2C_TIMEOUT;
 80019a6:	2300      	movs	r3, #0
 80019a8:	e089      	b.n	8001abe <BSP_I2C_MasterReceive7B+0x142>
  }

  // Transmit Address, Clear ADDR bit
  I2C_SetAddress7B((I2C_TypeDef *)p_i2c->i2c_reg, (uint8_t)p_i2c->address);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	89db      	ldrh	r3, [r3, #14]
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	4619      	mov	r1, r3
 80019b8:	4610      	mov	r0, r2
 80019ba:	f000 f8c9 	bl	8001b50 <I2C_SetAddress7B>

  // Receive Data
  if (p_i2c->size_buffer == 1)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d04c      	beq.n	8001a60 <BSP_I2C_MasterReceive7B+0xe4>
  {
    goto last_byte;
  }

  while (remaining > 2)
 80019c6:	e027      	b.n	8001a18 <BSP_I2C_MasterReceive7B+0x9c>
  {
    // Wait for RxNE to set
    p_i2c->status = I2C_WaitBitRXNE((I2C_TypeDef *)p_i2c->i2c_reg);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f000 f935 	bl	8001c3c <I2C_WaitBitRXNE>
 80019d2:	4603      	mov	r3, r0
 80019d4:	461a      	mov	r2, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	731a      	strb	r2, [r3, #12]
    if (p_i2c->status == I2C_TIMEOUT)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	7b1b      	ldrb	r3, [r3, #12]
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d101      	bne.n	80019e8 <BSP_I2C_MasterReceive7B+0x6c>
    {
      return I2C_TIMEOUT;
 80019e4:	2300      	movs	r3, #0
 80019e6:	e06a      	b.n	8001abe <BSP_I2C_MasterReceive7B+0x142>
    }

    // Copy the data into the buffer
    p_i2c->buffer[p_i2c->size_buffer - remaining]
        = LL_I2C_ReceiveData8((I2C_TypeDef *)p_i2c->i2c_reg);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6818      	ldr	r0, [r3, #0]
    p_i2c->buffer[p_i2c->size_buffer - remaining]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685a      	ldr	r2, [r3, #4]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6899      	ldr	r1, [r3, #8]
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	1acb      	subs	r3, r1, r3
 80019f8:	18d4      	adds	r4, r2, r3
        = LL_I2C_ReceiveData8((I2C_TypeDef *)p_i2c->i2c_reg);
 80019fa:	f7ff ff69 	bl	80018d0 <LL_I2C_ReceiveData8>
 80019fe:	4603      	mov	r3, r0
 8001a00:	7023      	strb	r3, [r4, #0]

    // Set the ACK bit to Acknowledge the data received
    p_i2c->i2c_reg->CR1 = (p_i2c->i2c_reg->CR1) | I2C_CR1_ACK_Msk;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001a10:	601a      	str	r2, [r3, #0]

    remaining--;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	3b01      	subs	r3, #1
 8001a16:	60fb      	str	r3, [r7, #12]
  while (remaining > 2)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d8d4      	bhi.n	80019c8 <BSP_I2C_MasterReceive7B+0x4c>
  }
  // Read the SECOND LAST BYTE
  // Wait for RxNE to set
  p_i2c->status = I2C_WaitBitRXNE((I2C_TypeDef *)p_i2c->i2c_reg);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4618      	mov	r0, r3
 8001a24:	f000 f90a 	bl	8001c3c <I2C_WaitBitRXNE>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	731a      	strb	r2, [r3, #12]
  if (p_i2c->status == I2C_TIMEOUT)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	7b1b      	ldrb	r3, [r3, #12]
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d101      	bne.n	8001a3e <BSP_I2C_MasterReceive7B+0xc2>
  {
    return I2C_TIMEOUT;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	e03f      	b.n	8001abe <BSP_I2C_MasterReceive7B+0x142>
  }

  // Copy the data into the buffer
  p_i2c->buffer[p_i2c->size_buffer - remaining]
      = LL_I2C_ReceiveData8((I2C_TypeDef *)p_i2c->i2c_reg);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6818      	ldr	r0, [r3, #0]
  p_i2c->buffer[p_i2c->size_buffer - remaining]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685a      	ldr	r2, [r3, #4]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6899      	ldr	r1, [r3, #8]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	1acb      	subs	r3, r1, r3
 8001a4e:	18d4      	adds	r4, r2, r3
      = LL_I2C_ReceiveData8((I2C_TypeDef *)p_i2c->i2c_reg);
 8001a50:	f7ff ff3e 	bl	80018d0 <LL_I2C_ReceiveData8>
 8001a54:	4603      	mov	r3, r0
 8001a56:	7023      	strb	r3, [r4, #0]
  remaining--;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	60fb      	str	r3, [r7, #12]
 8001a5e:	e000      	b.n	8001a62 <BSP_I2C_MasterReceive7B+0xe6>
    goto last_byte;
 8001a60:	bf00      	nop

last_byte:

  // Clear ACK bit
  p_i2c->i2c_reg->CR1 = (p_i2c->i2c_reg->CR1) & ~I2C_CR1_ACK_Msk;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a70:	601a      	str	r2, [r3, #0]

  // Stop I2C
  I2C_MastterStop((I2C_TypeDef *)p_i2c->i2c_reg);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f000 f85e 	bl	8001b38 <I2C_MastterStop>

  // Wait for RxNE to set
  p_i2c->status = I2C_WaitBitRXNE((I2C_TypeDef *)p_i2c->i2c_reg);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f000 f8db 	bl	8001c3c <I2C_WaitBitRXNE>
 8001a86:	4603      	mov	r3, r0
 8001a88:	461a      	mov	r2, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	731a      	strb	r2, [r3, #12]
  if (p_i2c->status == I2C_TIMEOUT)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	7b1b      	ldrb	r3, [r3, #12]
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d101      	bne.n	8001a9c <BSP_I2C_MasterReceive7B+0x120>
  {
    return I2C_TIMEOUT;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	e010      	b.n	8001abe <BSP_I2C_MasterReceive7B+0x142>
  }

  // Copy the data into the buffer
  p_i2c->buffer[p_i2c->size_buffer - remaining]
      = LL_I2C_ReceiveData8((I2C_TypeDef *)p_i2c->i2c_reg);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6818      	ldr	r0, [r3, #0]
  p_i2c->buffer[p_i2c->size_buffer - remaining]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	685a      	ldr	r2, [r3, #4]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6899      	ldr	r1, [r3, #8]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	1acb      	subs	r3, r1, r3
 8001aac:	18d4      	adds	r4, r2, r3
      = LL_I2C_ReceiveData8((I2C_TypeDef *)p_i2c->i2c_reg);
 8001aae:	f7ff ff0f 	bl	80018d0 <LL_I2C_ReceiveData8>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	7023      	strb	r3, [r4, #0]

  // Done Receive Frame
  p_i2c->status = I2C_OK;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2201      	movs	r2, #1
 8001aba:	731a      	strb	r2, [r3, #12]
  return I2C_OK;
 8001abc:	2301      	movs	r3, #1
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3714      	adds	r7, #20
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd90      	pop	{r4, r7, pc}
	...

08001ac8 <BSP_I2C_TimeOut>:
 * This function decrements the u32_timer_wait_set variable used for handling I2C
 * timeouts.
 */
void
BSP_I2C_TimeOut (void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  if (u32_timer_wait_set >= 0)
 8001acc:	4b05      	ldr	r3, [pc, #20]	@ (8001ae4 <BSP_I2C_TimeOut+0x1c>)
 8001ace:	681b      	ldr	r3, [r3, #0]
  {
    u32_timer_wait_set--;
 8001ad0:	4b04      	ldr	r3, [pc, #16]	@ (8001ae4 <BSP_I2C_TimeOut+0x1c>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	3b01      	subs	r3, #1
 8001ad6:	4a03      	ldr	r2, [pc, #12]	@ (8001ae4 <BSP_I2C_TimeOut+0x1c>)
 8001ad8:	6013      	str	r3, [r2, #0]
  }
}
 8001ada:	bf00      	nop
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bc80      	pop	{r7}
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	20000460 	.word	0x20000460

08001ae8 <I2C_MasterStart>:
 * @param _i2c_reg Pointer to the I2C peripheral instance.
 * @return Status of the I2C operation.
 */
static i2c_status_t
I2C_MasterStart (I2C_TypeDef *_i2c_reg)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  _i2c_reg->CR1 |= I2C_CR1_ACK_Msk;   // Enable the ACK
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	601a      	str	r2, [r3, #0]
  _i2c_reg->CR1 |= I2C_CR1_START_Msk; // Generate START
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	601a      	str	r2, [r3, #0]

  // Wait for PE bit to set
  u32_timer_wait_set = TIMEOUT_WAIT_SET;
 8001b08:	4b0a      	ldr	r3, [pc, #40]	@ (8001b34 <I2C_MasterStart+0x4c>)
 8001b0a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001b0e:	601a      	str	r2, [r3, #0]
  while (LL_I2C_IsEnabled(_i2c_reg))
 8001b10:	e005      	b.n	8001b1e <I2C_MasterStart+0x36>
  {
    if (u32_timer_wait_set == 0)
 8001b12:	4b08      	ldr	r3, [pc, #32]	@ (8001b34 <I2C_MasterStart+0x4c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d101      	bne.n	8001b1e <I2C_MasterStart+0x36>
    {
      return I2C_TIMEOUT;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	e006      	b.n	8001b2c <I2C_MasterStart+0x44>
  while (LL_I2C_IsEnabled(_i2c_reg))
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f7ff fe5c 	bl	80017dc <LL_I2C_IsEnabled>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d1f3      	bne.n	8001b12 <I2C_MasterStart+0x2a>
    }
  }
  return I2C_OK;
 8001b2a:	2301      	movs	r3, #1
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3708      	adds	r7, #8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	20000460 	.word	0x20000460

08001b38 <I2C_MastterStop>:
 *
 * @param _i2c_reg Pointer to the I2C peripheral instance.
 */
static void
I2C_MastterStop (I2C_TypeDef *_i2c_reg)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  LL_I2C_GenerateStopCondition(_i2c_reg);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f7ff feb6 	bl	80018b2 <LL_I2C_GenerateStopCondition>
}
 8001b46:	bf00      	nop
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
	...

08001b50 <I2C_SetAddress7B>:
 * @param _address 7-bit address of the I2C device.
 * @return Status of the I2C operation.
 */
static i2c_status_t
I2C_SetAddress7B (I2C_TypeDef *_i2c_reg, uint8_t _address)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	460b      	mov	r3, r1
 8001b5a:	70fb      	strb	r3, [r7, #3]
  // Send the address
  I2C1->DR = _address;
 8001b5c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b94 <I2C_SetAddress7B+0x44>)
 8001b5e:	78fb      	ldrb	r3, [r7, #3]
 8001b60:	6113      	str	r3, [r2, #16]

  // Wait for ADDR bit to set
  u32_timer_wait_set = TIMEOUT_WAIT_SET;
 8001b62:	4b0d      	ldr	r3, [pc, #52]	@ (8001b98 <I2C_SetAddress7B+0x48>)
 8001b64:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001b68:	601a      	str	r2, [r3, #0]
  while (!LL_I2C_IsActiveFlag_ADDR(_i2c_reg))
 8001b6a:	e005      	b.n	8001b78 <I2C_SetAddress7B+0x28>
  {
    if (u32_timer_wait_set == 0)
 8001b6c:	4b0a      	ldr	r3, [pc, #40]	@ (8001b98 <I2C_SetAddress7B+0x48>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d101      	bne.n	8001b78 <I2C_SetAddress7B+0x28>
    {
      return I2C_TIMEOUT;
 8001b74:	2300      	movs	r3, #0
 8001b76:	e009      	b.n	8001b8c <I2C_SetAddress7B+0x3c>
  while (!LL_I2C_IsActiveFlag_ADDR(_i2c_reg))
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f7ff fe77 	bl	800186c <LL_I2C_IsActiveFlag_ADDR>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d0f3      	beq.n	8001b6c <I2C_SetAddress7B+0x1c>
    }
  }

  // Read SR1 and SR2 to clear the ADDR bit
  LL_I2C_ClearFlag_ADDR(_i2c_reg);
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f7ff fe83 	bl	8001890 <LL_I2C_ClearFlag_ADDR>

  return I2C_OK;
 8001b8a:	2301      	movs	r3, #1
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	40005400 	.word	0x40005400
 8001b98:	20000460 	.word	0x20000460

08001b9c <I2C_TransmitData7B>:
 * @param _buffer  Pointer to the data buffer.
 * @return Status of the I2C operation.
 */
static i2c_status_t
I2C_TransmitData7B (I2C_TypeDef *_i2c_reg, uint32_t _size, uint8_t *_buffer)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	60b9      	str	r1, [r7, #8]
 8001ba6:	607a      	str	r2, [r7, #4]
  // Wait for TXE bit to set
  u32_timer_wait_set = TIMEOUT_WAIT_SET;
 8001ba8:	4b22      	ldr	r3, [pc, #136]	@ (8001c34 <I2C_TransmitData7B+0x98>)
 8001baa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001bae:	601a      	str	r2, [r3, #0]
  while (!LL_I2C_IsActiveFlag_TXE(_i2c_reg))
 8001bb0:	e005      	b.n	8001bbe <I2C_TransmitData7B+0x22>
  {
    if (u32_timer_wait_set == 0)
 8001bb2:	4b20      	ldr	r3, [pc, #128]	@ (8001c34 <I2C_TransmitData7B+0x98>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d101      	bne.n	8001bbe <I2C_TransmitData7B+0x22>
    {
      return I2C_TIMEOUT;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	e035      	b.n	8001c2a <I2C_TransmitData7B+0x8e>
  while (!LL_I2C_IsActiveFlag_TXE(_i2c_reg))
 8001bbe:	68f8      	ldr	r0, [r7, #12]
 8001bc0:	f7ff fe1e 	bl	8001800 <LL_I2C_IsActiveFlag_TXE>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d0f3      	beq.n	8001bb2 <I2C_TransmitData7B+0x16>
    }
  }

  while (_size > 0)
 8001bca:	e019      	b.n	8001c00 <I2C_TransmitData7B+0x64>
  {
    // Wait for TXE bit to set
    u32_timer_wait_set = TIMEOUT_WAIT_SET;
 8001bcc:	4b19      	ldr	r3, [pc, #100]	@ (8001c34 <I2C_TransmitData7B+0x98>)
 8001bce:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001bd2:	601a      	str	r2, [r3, #0]
    while (!LL_I2C_IsActiveFlag_TXE(_i2c_reg))
 8001bd4:	e005      	b.n	8001be2 <I2C_TransmitData7B+0x46>
    {
      if (u32_timer_wait_set == 0)
 8001bd6:	4b17      	ldr	r3, [pc, #92]	@ (8001c34 <I2C_TransmitData7B+0x98>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d101      	bne.n	8001be2 <I2C_TransmitData7B+0x46>
      {
        return I2C_TIMEOUT;
 8001bde:	2300      	movs	r3, #0
 8001be0:	e023      	b.n	8001c2a <I2C_TransmitData7B+0x8e>
    while (!LL_I2C_IsActiveFlag_TXE(_i2c_reg))
 8001be2:	68f8      	ldr	r0, [r7, #12]
 8001be4:	f7ff fe0c 	bl	8001800 <LL_I2C_IsActiveFlag_TXE>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d0f3      	beq.n	8001bd6 <I2C_TransmitData7B+0x3a>
      }
    }

    // Transmit Data
    I2C1->DR = (uint32_t)*_buffer++;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	1c5a      	adds	r2, r3, #1
 8001bf2:	607a      	str	r2, [r7, #4]
 8001bf4:	781a      	ldrb	r2, [r3, #0]
 8001bf6:	4b10      	ldr	r3, [pc, #64]	@ (8001c38 <I2C_TransmitData7B+0x9c>)
 8001bf8:	611a      	str	r2, [r3, #16]
    _size--;
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	3b01      	subs	r3, #1
 8001bfe:	60bb      	str	r3, [r7, #8]
  while (_size > 0)
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d1e2      	bne.n	8001bcc <I2C_TransmitData7B+0x30>
  }

  // Wait for BTF to set
  u32_timer_wait_set = TIMEOUT_WAIT_SET;
 8001c06:	4b0b      	ldr	r3, [pc, #44]	@ (8001c34 <I2C_TransmitData7B+0x98>)
 8001c08:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001c0c:	601a      	str	r2, [r3, #0]
  while (!LL_I2C_IsActiveFlag_BTF(_i2c_reg))
 8001c0e:	e005      	b.n	8001c1c <I2C_TransmitData7B+0x80>
  {
    if (u32_timer_wait_set == 0)
 8001c10:	4b08      	ldr	r3, [pc, #32]	@ (8001c34 <I2C_TransmitData7B+0x98>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d101      	bne.n	8001c1c <I2C_TransmitData7B+0x80>
    {
      return I2C_TIMEOUT;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	e006      	b.n	8001c2a <I2C_TransmitData7B+0x8e>
  while (!LL_I2C_IsActiveFlag_BTF(_i2c_reg))
 8001c1c:	68f8      	ldr	r0, [r7, #12]
 8001c1e:	f7ff fe01 	bl	8001824 <LL_I2C_IsActiveFlag_BTF>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d0f3      	beq.n	8001c10 <I2C_TransmitData7B+0x74>
    }
  }

  return I2C_OK;
 8001c28:	2301      	movs	r3, #1
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3710      	adds	r7, #16
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	20000460 	.word	0x20000460
 8001c38:	40005400 	.word	0x40005400

08001c3c <I2C_WaitBitRXNE>:
 * @param _i2c_reg Pointer to the I2C peripheral instance.
 * @return Status of the I2C operation.
 */
static i2c_status_t
I2C_WaitBitRXNE (I2C_TypeDef *_i2c_reg)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  u32_timer_wait_set = TIMEOUT_WAIT_SET;
 8001c44:	4b0a      	ldr	r3, [pc, #40]	@ (8001c70 <I2C_WaitBitRXNE+0x34>)
 8001c46:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001c4a:	601a      	str	r2, [r3, #0]
  while (!LL_I2C_IsActiveFlag_RXNE(_i2c_reg))
 8001c4c:	e005      	b.n	8001c5a <I2C_WaitBitRXNE+0x1e>
  {
    if (u32_timer_wait_set == 0)
 8001c4e:	4b08      	ldr	r3, [pc, #32]	@ (8001c70 <I2C_WaitBitRXNE+0x34>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d101      	bne.n	8001c5a <I2C_WaitBitRXNE+0x1e>
    {
      return I2C_TIMEOUT;
 8001c56:	2300      	movs	r3, #0
 8001c58:	e006      	b.n	8001c68 <I2C_WaitBitRXNE+0x2c>
  while (!LL_I2C_IsActiveFlag_RXNE(_i2c_reg))
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f7ff fdf4 	bl	8001848 <LL_I2C_IsActiveFlag_RXNE>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d0f3      	beq.n	8001c4e <I2C_WaitBitRXNE+0x12>
    }
  }
  return I2C_OK;
 8001c66:	2301      	movs	r3, #1
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3708      	adds	r7, #8
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	20000460 	.word	0x20000460

08001c74 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f043 0201 	orr.w	r2, r3, #1
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	601a      	str	r2, [r3, #0]
}
 8001c88:	bf00      	nop
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bc80      	pop	{r7}
 8001c90:	4770      	bx	lr

08001c92 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 8001c92:	b480      	push	{r7}
 8001c94:	b083      	sub	sp, #12
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
 8001c9a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	683a      	ldr	r2, [r7, #0]
 8001ca0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001ca2:	bf00      	nop
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bc80      	pop	{r7}
 8001caa:	4770      	bx	lr

08001cac <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8001cbc:	bf00      	nop
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bc80      	pop	{r7}
 8001cc4:	4770      	bx	lr

08001cc6 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	b083      	sub	sp, #12
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
 8001cce:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a1a      	ldr	r2, [r3, #32]
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	431a      	orrs	r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	621a      	str	r2, [r3, #32]
}
 8001cdc:	bf00      	nop
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bc80      	pop	{r7}
 8001ce4:	4770      	bx	lr
	...

08001ce8 <LL_TIM_OC_SetMode>:
  *         @arg @ref LL_TIM_OCMODE_PWM1
  *         @arg @ref LL_TIM_OCMODE_PWM2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetMode(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Mode)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b087      	sub	sp, #28
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d01c      	beq.n	8001d34 <LL_TIM_OC_SetMode+0x4c>
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	2b04      	cmp	r3, #4
 8001cfe:	d017      	beq.n	8001d30 <LL_TIM_OC_SetMode+0x48>
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	2b10      	cmp	r3, #16
 8001d04:	d012      	beq.n	8001d2c <LL_TIM_OC_SetMode+0x44>
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	2b40      	cmp	r3, #64	@ 0x40
 8001d0a:	d00d      	beq.n	8001d28 <LL_TIM_OC_SetMode+0x40>
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d12:	d007      	beq.n	8001d24 <LL_TIM_OC_SetMode+0x3c>
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d1a:	d101      	bne.n	8001d20 <LL_TIM_OC_SetMode+0x38>
 8001d1c:	2305      	movs	r3, #5
 8001d1e:	e00a      	b.n	8001d36 <LL_TIM_OC_SetMode+0x4e>
 8001d20:	2306      	movs	r3, #6
 8001d22:	e008      	b.n	8001d36 <LL_TIM_OC_SetMode+0x4e>
 8001d24:	2304      	movs	r3, #4
 8001d26:	e006      	b.n	8001d36 <LL_TIM_OC_SetMode+0x4e>
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e004      	b.n	8001d36 <LL_TIM_OC_SetMode+0x4e>
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	e002      	b.n	8001d36 <LL_TIM_OC_SetMode+0x4e>
 8001d30:	2301      	movs	r3, #1
 8001d32:	e000      	b.n	8001d36 <LL_TIM_OC_SetMode+0x4e>
 8001d34:	2300      	movs	r3, #0
 8001d36:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	3318      	adds	r3, #24
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	7dfb      	ldrb	r3, [r7, #23]
 8001d40:	4a0d      	ldr	r2, [pc, #52]	@ (8001d78 <LL_TIM_OC_SetMode+0x90>)
 8001d42:	5cd3      	ldrb	r3, [r2, r3]
 8001d44:	440b      	add	r3, r1
 8001d46:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	7dfb      	ldrb	r3, [r7, #23]
 8001d4e:	490b      	ldr	r1, [pc, #44]	@ (8001d7c <LL_TIM_OC_SetMode+0x94>)
 8001d50:	5ccb      	ldrb	r3, [r1, r3]
 8001d52:	4619      	mov	r1, r3
 8001d54:	2373      	movs	r3, #115	@ 0x73
 8001d56:	408b      	lsls	r3, r1
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	401a      	ands	r2, r3
 8001d5c:	7dfb      	ldrb	r3, [r7, #23]
 8001d5e:	4907      	ldr	r1, [pc, #28]	@ (8001d7c <LL_TIM_OC_SetMode+0x94>)
 8001d60:	5ccb      	ldrb	r3, [r1, r3]
 8001d62:	4619      	mov	r1, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	408b      	lsls	r3, r1
 8001d68:	431a      	orrs	r2, r3
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	601a      	str	r2, [r3, #0]
}
 8001d6e:	bf00      	nop
 8001d70:	371c      	adds	r7, #28
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bc80      	pop	{r7}
 8001d76:	4770      	bx	lr
 8001d78:	08007824 	.word	0x08007824
 8001d7c:	0800782c 	.word	0x0800782c

08001d80 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	683a      	ldr	r2, [r7, #0]
 8001d8e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bc80      	pop	{r7}
 8001d98:	4770      	bx	lr

08001d9a <LL_TIM_EnableAllOutputs>:
  * @rmtoll BDTR         MOE           LL_TIM_EnableAllOutputs
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableAllOutputs(TIM_TypeDef *TIMx)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	b083      	sub	sp, #12
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001da6:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	645a      	str	r2, [r3, #68]	@ 0x44
}
 8001dae:	bf00      	nop
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bc80      	pop	{r7}
 8001db6:	4770      	bx	lr

08001db8 <BSP_PWM_EnableTimer>:
 *    PUBLIC FUNCTIONS
 **********************/

void
BSP_PWM_EnableTimer (pwm_cfg_t *pwm_cfg)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  uint32_t u32_mode;

  if ((pwm_cfg->output == PWM_POSITIVE)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	7c1b      	ldrb	r3, [r3, #16]
 8001dc4:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d006      	beq.n	8001ddc <BSP_PWM_EnableTimer+0x24>
      || (pwm_cfg->output == PWM_POSITIVE_NEGATIVE))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	7c1b      	ldrb	r3, [r3, #16]
 8001dd2:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d11e      	bne.n	8001e1a <BSP_PWM_EnableTimer+0x62>
  {
    if (pwm_cfg->channel == PWM_CHANNEL_1)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d102      	bne.n	8001dea <BSP_PWM_EnableTimer+0x32>
    {
      u32_mode = TIM_CCER_CC1E;
 8001de4:	2301      	movs	r3, #1
 8001de6:	60fb      	str	r3, [r7, #12]
 8001de8:	e017      	b.n	8001e1a <BSP_PWM_EnableTimer+0x62>
    }
    else if (pwm_cfg->channel == PWM_CHANNEL_2)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	2b10      	cmp	r3, #16
 8001df0:	d102      	bne.n	8001df8 <BSP_PWM_EnableTimer+0x40>
    {
      u32_mode = TIM_CCER_CC2E;
 8001df2:	2310      	movs	r3, #16
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	e010      	b.n	8001e1a <BSP_PWM_EnableTimer+0x62>
    }
    else if (pwm_cfg->channel == PWM_CHANNEL_3)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e00:	d103      	bne.n	8001e0a <BSP_PWM_EnableTimer+0x52>
    {
      u32_mode = TIM_CCER_CC3E;
 8001e02:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e06:	60fb      	str	r3, [r7, #12]
 8001e08:	e007      	b.n	8001e1a <BSP_PWM_EnableTimer+0x62>
    }
    else if (pwm_cfg->channel == PWM_CHANNEL_4)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e12:	d102      	bne.n	8001e1a <BSP_PWM_EnableTimer+0x62>
    {
      u32_mode = TIM_CCER_CC4E;
 8001e14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e18:	60fb      	str	r3, [r7, #12]
    }
  }
  if (pwm_cfg->output == PWM_POSITIVE_NEGATIVE)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	7c1b      	ldrb	r3, [r3, #16]
 8001e1e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d11a      	bne.n	8001e5e <BSP_PWM_EnableTimer+0xa6>
  {
    if (pwm_cfg->channel == PWM_CHANNEL_1)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d104      	bne.n	8001e3a <BSP_PWM_EnableTimer+0x82>
    {
      u32_mode |= TIM_CCER_CC1NE;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f043 0304 	orr.w	r3, r3, #4
 8001e36:	60fb      	str	r3, [r7, #12]
 8001e38:	e011      	b.n	8001e5e <BSP_PWM_EnableTimer+0xa6>
    }
    else if (pwm_cfg->channel == PWM_CHANNEL_2)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	2b10      	cmp	r3, #16
 8001e40:	d104      	bne.n	8001e4c <BSP_PWM_EnableTimer+0x94>
    {
      u32_mode |= TIM_CCER_CC2NE;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e48:	60fb      	str	r3, [r7, #12]
 8001e4a:	e008      	b.n	8001e5e <BSP_PWM_EnableTimer+0xa6>
    }
    else if (pwm_cfg->channel == PWM_CHANNEL_3)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e54:	d103      	bne.n	8001e5e <BSP_PWM_EnableTimer+0xa6>
    {
      u32_mode |= TIM_CCER_CC3NE;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e5c:	60fb      	str	r3, [r7, #12]
    }
  }

  // Configure Channel of Timer PWM Mode
  LL_TIM_OC_SetMode(
      (TIM_TypeDef *)pwm_cfg->p_tim, pwm_cfg->channel, LL_TIM_OCMODE_PWM1);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6818      	ldr	r0, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	68db      	ldr	r3, [r3, #12]
  LL_TIM_OC_SetMode(
 8001e66:	2260      	movs	r2, #96	@ 0x60
 8001e68:	4619      	mov	r1, r3
 8001e6a:	f7ff ff3d 	bl	8001ce8 <LL_TIM_OC_SetMode>

  // Enable Channel of Timer
  LL_TIM_CC_EnableChannel((TIM_TypeDef *)pwm_cfg->p_tim, u32_mode);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	68f9      	ldr	r1, [r7, #12]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff ff26 	bl	8001cc6 <LL_TIM_CC_EnableChannel>

  // Enable Main output
  LL_TIM_EnableAllOutputs((TIM_TypeDef *)pwm_cfg->p_tim);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff ff8b 	bl	8001d9a <LL_TIM_EnableAllOutputs>

  // Enable Timer
  LL_TIM_EnableCounter((TIM_TypeDef *)pwm_cfg->p_tim);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff fef3 	bl	8001c74 <LL_TIM_EnableCounter>
}
 8001e8e:	bf00      	nop
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <BSP_PWM_SetParameterProcess>:
 * @note Ensure that the `pwm_cfg` structure is properly initialized before
 * calling this function.
 */
void
BSP_PWM_SetParameterProcess (pwm_cfg_t *pwm_cfg)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b082      	sub	sp, #8
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
  // Set value for PSC (Prescaler)
  LL_TIM_SetPrescaler((TIM_TypeDef *)pwm_cfg->p_tim, pwm_cfg->u16_prescaler);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	891b      	ldrh	r3, [r3, #8]
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	4610      	mov	r0, r2
 8001eac:	f7ff fef1 	bl	8001c92 <LL_TIM_SetPrescaler>

  // Set value for ARR (Auto-Reload Register)
  LL_TIM_SetAutoReload((TIM_TypeDef *)pwm_cfg->p_tim, pwm_cfg->u16_reg_auto_reload);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	889b      	ldrh	r3, [r3, #4]
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4610      	mov	r0, r2
 8001ebe:	f7ff fef5 	bl	8001cac <LL_TIM_SetAutoReload>

  // Set value for CRR (Compare Register)
  LL_TIM_OC_SetCompareCH1((TIM_TypeDef *)pwm_cfg->p_tim, pwm_cfg->u16_reg_compare);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	88db      	ldrh	r3, [r3, #6]
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4610      	mov	r0, r2
 8001ed0:	f7ff ff56 	bl	8001d80 <LL_TIM_OC_SetCompareCH1>
 8001ed4:	bf00      	nop
 8001ed6:	3708      	adds	r7, #8
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <BSP_SYSTICK_TimerStart>:
 *
 * This function enables the SysTick timer.
 */
void
BSP_SYSTICK_TimerStart (void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0

  SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
 8001ee0:	4b04      	ldr	r3, [pc, #16]	@ (8001ef4 <BSP_SYSTICK_TimerStart+0x18>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a03      	ldr	r2, [pc, #12]	@ (8001ef4 <BSP_SYSTICK_TimerStart+0x18>)
 8001ee6:	f043 0301 	orr.w	r3, r3, #1
 8001eea:	6013      	str	r3, [r2, #0]
}
 8001eec:	bf00      	nop
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bc80      	pop	{r7}
 8001ef2:	4770      	bx	lr
 8001ef4:	e000e010 	.word	0xe000e010

08001ef8 <LL_USART_IsActiveFlag_FE>:
  * @rmtoll SR           FE            LL_USART_IsActiveFlag_FE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_FE(const USART_TypeDef *USARTx)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0302 	and.w	r3, r3, #2
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	bf0c      	ite	eq
 8001f0c:	2301      	moveq	r3, #1
 8001f0e:	2300      	movne	r3, #0
 8001f10:	b2db      	uxtb	r3, r3
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bc80      	pop	{r7}
 8001f1a:	4770      	bx	lr

08001f1c <LL_USART_IsActiveFlag_NE>:
  * @rmtoll SR           NF            LL_USART_IsActiveFlag_NE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_NE(const USART_TypeDef *USARTx)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_NE) == (USART_SR_NE));
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0304 	and.w	r3, r3, #4
 8001f2c:	2b04      	cmp	r3, #4
 8001f2e:	bf0c      	ite	eq
 8001f30:	2301      	moveq	r3, #1
 8001f32:	2300      	movne	r3, #0
 8001f34:	b2db      	uxtb	r3, r3
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bc80      	pop	{r7}
 8001f3e:	4770      	bx	lr

08001f40 <LL_USART_IsActiveFlag_ORE>:
  * @rmtoll SR           ORE           LL_USART_IsActiveFlag_ORE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ORE(const USART_TypeDef *USARTx)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0308 	and.w	r3, r3, #8
 8001f50:	2b08      	cmp	r3, #8
 8001f52:	bf0c      	ite	eq
 8001f54:	2301      	moveq	r3, #1
 8001f56:	2300      	movne	r3, #0
 8001f58:	b2db      	uxtb	r3, r3
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bc80      	pop	{r7}
 8001f62:	4770      	bx	lr

08001f64 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(const USART_TypeDef *USARTx)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0320 	and.w	r3, r3, #32
 8001f74:	2b20      	cmp	r3, #32
 8001f76:	bf0c      	ite	eq
 8001f78:	2301      	moveq	r3, #1
 8001f7a:	2300      	movne	r3, #0
 8001f7c:	b2db      	uxtb	r3, r3
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bc80      	pop	{r7}
 8001f86:	4770      	bx	lr

08001f88 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f98:	2b80      	cmp	r3, #128	@ 0x80
 8001f9a:	bf0c      	ite	eq
 8001f9c:	2301      	moveq	r3, #1
 8001f9e:	2300      	movne	r3, #0
 8001fa0:	b2db      	uxtb	r3, r3
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bc80      	pop	{r7}
 8001faa:	4770      	bx	lr

08001fac <LL_USART_ClearFlag_FE>:
  * @rmtoll SR           FE            LL_USART_ClearFlag_FE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_FE(USART_TypeDef *USARTx)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b085      	sub	sp, #20
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8001fba:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
}
 8001fc4:	bf00      	nop
 8001fc6:	3714      	adds	r7, #20
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bc80      	pop	{r7}
 8001fcc:	4770      	bx	lr

08001fce <LL_USART_ClearFlag_NE>:
  * @rmtoll SR           NF            LL_USART_ClearFlag_NE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_NE(USART_TypeDef *USARTx)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	b085      	sub	sp, #20
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
}
 8001fe6:	bf00      	nop
 8001fe8:	3714      	adds	r7, #20
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bc80      	pop	{r7}
 8001fee:	4770      	bx	lr

08001ff0 <LL_USART_ClearFlag_ORE>:
  * @rmtoll SR           ORE           LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8002006:	68fb      	ldr	r3, [r7, #12]
}
 8002008:	bf00      	nop
 800200a:	3714      	adds	r7, #20
 800200c:	46bd      	mov	sp, r7
 800200e:	bc80      	pop	{r7}
 8002010:	4770      	bx	lr

08002012 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8002012:	b480      	push	{r7}
 8002014:	b089      	sub	sp, #36	@ 0x24
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	330c      	adds	r3, #12
 800201e:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	e853 3f00 	ldrex	r3, [r3]
 8002026:	60bb      	str	r3, [r7, #8]
   return(result);
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	f043 0320 	orr.w	r3, r3, #32
 800202e:	61fb      	str	r3, [r7, #28]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	330c      	adds	r3, #12
 8002034:	69fa      	ldr	r2, [r7, #28]
 8002036:	61ba      	str	r2, [r7, #24]
 8002038:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800203a:	6979      	ldr	r1, [r7, #20]
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	e841 2300 	strex	r3, r2, [r1]
 8002042:	613b      	str	r3, [r7, #16]
   return(result);
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d1e7      	bne.n	800201a <LL_USART_EnableIT_RXNE+0x8>
}
 800204a:	bf00      	nop
 800204c:	bf00      	nop
 800204e:	3724      	adds	r7, #36	@ 0x24
 8002050:	46bd      	mov	sp, r7
 8002052:	bc80      	pop	{r7}
 8002054:	4770      	bx	lr

08002056 <LL_USART_EnableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
 8002056:	b480      	push	{r7}
 8002058:	b089      	sub	sp, #36	@ 0x24
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	330c      	adds	r3, #12
 8002062:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	e853 3f00 	ldrex	r3, [r3]
 800206a:	60bb      	str	r3, [r7, #8]
   return(result);
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002072:	61fb      	str	r3, [r7, #28]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	330c      	adds	r3, #12
 8002078:	69fa      	ldr	r2, [r7, #28]
 800207a:	61ba      	str	r2, [r7, #24]
 800207c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800207e:	6979      	ldr	r1, [r7, #20]
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	e841 2300 	strex	r3, r2, [r1]
 8002086:	613b      	str	r3, [r7, #16]
   return(result);
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d1e7      	bne.n	800205e <LL_USART_EnableIT_TXE+0x8>
}
 800208e:	bf00      	nop
 8002090:	bf00      	nop
 8002092:	3724      	adds	r7, #36	@ 0x24
 8002094:	46bd      	mov	sp, r7
 8002096:	bc80      	pop	{r7}
 8002098:	4770      	bx	lr

0800209a <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 800209a:	b480      	push	{r7}
 800209c:	b089      	sub	sp, #36	@ 0x24
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	3314      	adds	r3, #20
 80020a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	e853 3f00 	ldrex	r3, [r3]
 80020ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	f043 0301 	orr.w	r3, r3, #1
 80020b6:	61fb      	str	r3, [r7, #28]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	3314      	adds	r3, #20
 80020bc:	69fa      	ldr	r2, [r7, #28]
 80020be:	61ba      	str	r2, [r7, #24]
 80020c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020c2:	6979      	ldr	r1, [r7, #20]
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	e841 2300 	strex	r3, r2, [r1]
 80020ca:	613b      	str	r3, [r7, #16]
   return(result);
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d1e7      	bne.n	80020a2 <LL_USART_EnableIT_ERROR+0x8>
}
 80020d2:	bf00      	nop
 80020d4:	bf00      	nop
 80020d6:	3724      	adds	r7, #36	@ 0x24
 80020d8:	46bd      	mov	sp, r7
 80020da:	bc80      	pop	{r7}
 80020dc:	4770      	bx	lr

080020de <LL_USART_DisableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_DisableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_RXNE(USART_TypeDef *USARTx)
{
 80020de:	b480      	push	{r7}
 80020e0:	b089      	sub	sp, #36	@ 0x24
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	330c      	adds	r3, #12
 80020ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	e853 3f00 	ldrex	r3, [r3]
 80020f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	f023 0320 	bic.w	r3, r3, #32
 80020fa:	61fb      	str	r3, [r7, #28]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	330c      	adds	r3, #12
 8002100:	69fa      	ldr	r2, [r7, #28]
 8002102:	61ba      	str	r2, [r7, #24]
 8002104:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002106:	6979      	ldr	r1, [r7, #20]
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	e841 2300 	strex	r3, r2, [r1]
 800210e:	613b      	str	r3, [r7, #16]
   return(result);
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d1e7      	bne.n	80020e6 <LL_USART_DisableIT_RXNE+0x8>
}
 8002116:	bf00      	nop
 8002118:	bf00      	nop
 800211a:	3724      	adds	r7, #36	@ 0x24
 800211c:	46bd      	mov	sp, r7
 800211e:	bc80      	pop	{r7}
 8002120:	4770      	bx	lr

08002122 <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 8002122:	b480      	push	{r7}
 8002124:	b089      	sub	sp, #36	@ 0x24
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	330c      	adds	r3, #12
 800212e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	e853 3f00 	ldrex	r3, [r3]
 8002136:	60bb      	str	r3, [r7, #8]
   return(result);
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800213e:	61fb      	str	r3, [r7, #28]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	330c      	adds	r3, #12
 8002144:	69fa      	ldr	r2, [r7, #28]
 8002146:	61ba      	str	r2, [r7, #24]
 8002148:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800214a:	6979      	ldr	r1, [r7, #20]
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	e841 2300 	strex	r3, r2, [r1]
 8002152:	613b      	str	r3, [r7, #16]
   return(result);
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d1e7      	bne.n	800212a <LL_USART_DisableIT_TXE+0x8>
}
 800215a:	bf00      	nop
 800215c:	bf00      	nop
 800215e:	3724      	adds	r7, #36	@ 0x24
 8002160:	46bd      	mov	sp, r7
 8002162:	bc80      	pop	{r7}
 8002164:	4770      	bx	lr

08002166 <LL_USART_IsEnabledIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_IsEnabledIT_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE(const USART_TypeDef *USARTx)
{
 8002166:	b480      	push	{r7}
 8002168:	b083      	sub	sp, #12
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	f003 0320 	and.w	r3, r3, #32
 8002176:	2b20      	cmp	r3, #32
 8002178:	bf0c      	ite	eq
 800217a:	2301      	moveq	r3, #1
 800217c:	2300      	movne	r3, #0
 800217e:	b2db      	uxtb	r3, r3
}
 8002180:	4618      	mov	r0, r3
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	bc80      	pop	{r7}
 8002188:	4770      	bx	lr

0800218a <LL_USART_IsEnabledIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_IsEnabledIT_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXE(const USART_TypeDef *USARTx)
{
 800218a:	b480      	push	{r7}
 800218c:	b083      	sub	sp, #12
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_TXEIE) == (USART_CR1_TXEIE));
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800219a:	2b80      	cmp	r3, #128	@ 0x80
 800219c:	bf0c      	ite	eq
 800219e:	2301      	moveq	r3, #1
 80021a0:	2300      	movne	r3, #0
 80021a2:	b2db      	uxtb	r3, r3
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bc80      	pop	{r7}
 80021ac:	4770      	bx	lr

080021ae <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 80021ae:	b480      	push	{r7}
 80021b0:	b083      	sub	sp, #12
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	b2db      	uxtb	r3, r3
}
 80021bc:	4618      	mov	r0, r3
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bc80      	pop	{r7}
 80021c4:	4770      	bx	lr

080021c6 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80021c6:	b480      	push	{r7}
 80021c8:	b083      	sub	sp, #12
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
 80021ce:	460b      	mov	r3, r1
 80021d0:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80021d2:	78fa      	ldrb	r2, [r7, #3]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	605a      	str	r2, [r3, #4]
}
 80021d8:	bf00      	nop
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	bc80      	pop	{r7}
 80021e0:	4770      	bx	lr

080021e2 <BSP_UART_Config>:
 */
void
BSP_UART_Config (uart_cfg_t    *uartstdio_device,
                 USART_TypeDef *uart,
                 IRQn_Type      uart_irqn)
{
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b084      	sub	sp, #16
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	60f8      	str	r0, [r7, #12]
 80021ea:	60b9      	str	r1, [r7, #8]
 80021ec:	4613      	mov	r3, r2
 80021ee:	71fb      	strb	r3, [r7, #7]
  uartstdio_device->p_uart      = uart;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	68ba      	ldr	r2, [r7, #8]
 80021f4:	621a      	str	r2, [r3, #32]
  uartstdio_device->e_uart_irqn = uart_irqn;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	79fa      	ldrb	r2, [r7, #7]
 80021fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  QUEUE_Init((ring_buffer_t *)&uartstdio_device->s_tx_buffer);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	3310      	adds	r3, #16
 8002202:	4618      	mov	r0, r3
 8002204:	f002 fa12 	bl	800462c <QUEUE_Init>
  QUEUE_Init((ring_buffer_t *)&uartstdio_device->s_rx_buffer);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	4618      	mov	r0, r3
 800220c:	f002 fa0e 	bl	800462c <QUEUE_Init>

  /**
   * Enable the UART Error Interrupt:
   * (Frame error, noise error, overrun error)
   */
  LL_USART_EnableIT_ERROR(uart);
 8002210:	68b8      	ldr	r0, [r7, #8]
 8002212:	f7ff ff42 	bl	800209a <LL_USART_EnableIT_ERROR>

  /* Enable the UART Data Register not empty Interrupt */
  LL_USART_EnableIT_RXNE(uart);
 8002216:	68b8      	ldr	r0, [r7, #8]
 8002218:	f7ff fefb 	bl	8002012 <LL_USART_EnableIT_RXNE>
}
 800221c:	bf00      	nop
 800221e:	3710      	adds	r7, #16
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <BSP_UART_IsAvailableDataReceive>:

uint8_t
BSP_UART_IsAvailableDataReceive (uart_cfg_t *uartstdio_device)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  if (QUEUE_Is_Empty((ring_buffer_t *)&uartstdio_device->s_rx_buffer))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4618      	mov	r0, r3
 8002230:	f002 fa26 	bl	8004680 <QUEUE_Is_Empty>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <BSP_UART_IsAvailableDataReceive+0x1a>
  {
    return 0;
 800223a:	2300      	movs	r3, #0
 800223c:	e000      	b.n	8002240 <BSP_UART_IsAvailableDataReceive+0x1c>
  }
  return 1;
 800223e:	2301      	movs	r3, #1
}
 8002240:	4618      	mov	r0, r3
 8002242:	3708      	adds	r7, #8
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}

08002248 <BSP_UART_SendChar>:
 * @return If the u32_uart_timeout reaches 0, the function will return without sending
 * the character.
 */
void
BSP_UART_SendChar (uart_cfg_t *uartstdio_device, char c)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	460b      	mov	r3, r1
 8002252:	70fb      	strb	r3, [r7, #3]
  uint32_t u32_uart_timeout = LIMIT_WAIT_BUFFER;
 8002254:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002258:	60fb      	str	r3, [r7, #12]

  // Wait until there is space in the transmit buffer or u32_uart_timeout occurs
  while (QUEUE_Is_Full((ring_buffer_t *)&uartstdio_device->s_tx_buffer))
 800225a:	e005      	b.n	8002268 <BSP_UART_SendChar+0x20>
  {
    if (u32_uart_timeout == 0)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d021      	beq.n	80022a6 <BSP_UART_SendChar+0x5e>
    {
      return;
    }
    u32_uart_timeout--;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	3b01      	subs	r3, #1
 8002266:	60fb      	str	r3, [r7, #12]
  while (QUEUE_Is_Full((ring_buffer_t *)&uartstdio_device->s_tx_buffer))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	3310      	adds	r3, #16
 800226c:	4618      	mov	r0, r3
 800226e:	f002 fa17 	bl	80046a0 <QUEUE_Is_Full>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d1f1      	bne.n	800225c <BSP_UART_SendChar+0x14>
  }

  // Critical section to ensure atomic access to the buffer
  ATOMIC_BLOCK_START(uartstdio_device->p_uart);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a1b      	ldr	r3, [r3, #32]
 800227c:	4618      	mov	r0, r3
 800227e:	f7ff ff2e 	bl	80020de <LL_USART_DisableIT_RXNE>
  QUEUE_Push_Data((ring_buffer_t *)&uartstdio_device->s_tx_buffer, c);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	3310      	adds	r3, #16
 8002286:	78fa      	ldrb	r2, [r7, #3]
 8002288:	4611      	mov	r1, r2
 800228a:	4618      	mov	r0, r3
 800228c:	f002 fa18 	bl	80046c0 <QUEUE_Push_Data>
  ATOMIC_BLOCK_END(uartstdio_device->p_uart);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a1b      	ldr	r3, [r3, #32]
 8002294:	4618      	mov	r0, r3
 8002296:	f7ff febc 	bl	8002012 <LL_USART_EnableIT_RXNE>

  // Enable Transmit Data Register Empty interrupt
  LL_USART_EnableIT_TXE(uartstdio_device->p_uart);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a1b      	ldr	r3, [r3, #32]
 800229e:	4618      	mov	r0, r3
 80022a0:	f7ff fed9 	bl	8002056 <LL_USART_EnableIT_TXE>
 80022a4:	e000      	b.n	80022a8 <BSP_UART_SendChar+0x60>
      return;
 80022a6:	bf00      	nop
}
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <BSP_UART_SendString>:
 * @param s Pointer to the constant character array (string) to be sent via
 * UART.
 */
void
BSP_UART_SendString (uart_cfg_t *uartstdio_device, const char *s)
{
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b082      	sub	sp, #8
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
 80022b6:	6039      	str	r1, [r7, #0]
  while (*s)
 80022b8:	e007      	b.n	80022ca <BSP_UART_SendString+0x1c>
  {
    BSP_UART_SendChar(uartstdio_device, *s++);
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	1c5a      	adds	r2, r3, #1
 80022be:	603a      	str	r2, [r7, #0]
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	4619      	mov	r1, r3
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f7ff ffbf 	bl	8002248 <BSP_UART_SendChar>
  while (*s)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1f3      	bne.n	80022ba <BSP_UART_SendString+0xc>
  }
}
 80022d2:	bf00      	nop
 80022d4:	bf00      	nop
 80022d6:	3708      	adds	r7, #8
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <BSP_UART_ReadChar>:
 * from the buffer and returns it. If the buffer is empty, it returns the null
 * character '\0'.
 */
char
BSP_UART_ReadChar (uart_cfg_t *uartstdio_device)
{
 80022dc:	b590      	push	{r4, r7, lr}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  register char c = '\0';
 80022e4:	2400      	movs	r4, #0
  if (!QUEUE_Is_Empty((ring_buffer_t *)&uartstdio_device->s_rx_buffer))
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f002 f9c9 	bl	8004680 <QUEUE_Is_Empty>
 80022ee:	4603      	mov	r3, r0
 80022f0:	f083 0301 	eor.w	r3, r3, #1
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d011      	beq.n	800231e <BSP_UART_ReadChar+0x42>
  {
    ATOMIC_BLOCK_START(uartstdio_device->p_uart);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a1b      	ldr	r3, [r3, #32]
 80022fe:	4618      	mov	r0, r3
 8002300:	f7ff feed 	bl	80020de <LL_USART_DisableIT_RXNE>
    c = (char)QUEUE_Pull_Data((ring_buffer_t *)&uartstdio_device->s_rx_buffer);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4618      	mov	r0, r3
 8002308:	f002 fa00 	bl	800470c <QUEUE_Pull_Data>
 800230c:	4603      	mov	r3, r0
 800230e:	461c      	mov	r4, r3
    ATOMIC_BLOCK_END(uartstdio_device->p_uart);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6a1b      	ldr	r3, [r3, #32]
 8002314:	4618      	mov	r0, r3
 8002316:	f7ff fe7c 	bl	8002012 <LL_USART_EnableIT_RXNE>
    return c;
 800231a:	4623      	mov	r3, r4
 800231c:	e000      	b.n	8002320 <BSP_UART_ReadChar+0x44>
  }
  return c;
 800231e:	4623      	mov	r3, r4
}
 8002320:	4618      	mov	r0, r3
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	bd90      	pop	{r4, r7, pc}

08002328 <BSP_UART_TimeOut>:
 * The function `UART_u32_uart_TimeOut` decrements the variable `u32_uart_timeout` if it is not
 * equal to 0.
 */
void
BSP_UART_TimeOut (void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  if (u32_uart_timeout != 0)
 800232c:	4b06      	ldr	r3, [pc, #24]	@ (8002348 <BSP_UART_TimeOut+0x20>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d004      	beq.n	800233e <BSP_UART_TimeOut+0x16>
  {
    u32_uart_timeout--;
 8002334:	4b04      	ldr	r3, [pc, #16]	@ (8002348 <BSP_UART_TimeOut+0x20>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	3b01      	subs	r3, #1
 800233a:	4a03      	ldr	r2, [pc, #12]	@ (8002348 <BSP_UART_TimeOut+0x20>)
 800233c:	6013      	str	r3, [r2, #0]
  }
}
 800233e:	bf00      	nop
 8002340:	46bd      	mov	sp, r7
 8002342:	bc80      	pop	{r7}
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	20000464 	.word	0x20000464

0800234c <BSP_UART_ISR>:
 *
 * @param uartstdio_device Pointer to the UART configuration data structure.
 */
void
BSP_UART_ISR (uart_cfg_t *uartstdio_device)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  // If DR is not empty and the Rx Int is enabled
  if ((LL_USART_IsActiveFlag_RXNE(uartstdio_device->p_uart) != RESET)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a1b      	ldr	r3, [r3, #32]
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff fe03 	bl	8001f64 <LL_USART_IsActiveFlag_RXNE>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d03d      	beq.n	80023e0 <BSP_UART_ISR+0x94>
      && (LL_USART_IsEnabledIT_RXNE(uartstdio_device->p_uart) != RESET))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6a1b      	ldr	r3, [r3, #32]
 8002368:	4618      	mov	r0, r3
 800236a:	f7ff fefc 	bl	8002166 <LL_USART_IsEnabledIT_RXNE>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d035      	beq.n	80023e0 <BSP_UART_ISR+0x94>
  {
    uint8_t c = LL_USART_ReceiveData8(uartstdio_device->p_uart);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a1b      	ldr	r3, [r3, #32]
 8002378:	4618      	mov	r0, r3
 800237a:	f7ff ff18 	bl	80021ae <LL_USART_ReceiveData8>
 800237e:	4603      	mov	r3, r0
 8002380:	73fb      	strb	r3, [r7, #15]

    // If there are errors, clear the flags
    if ((LL_USART_IsActiveFlag_ORE(uartstdio_device->p_uart) != RESET)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a1b      	ldr	r3, [r3, #32]
 8002386:	4618      	mov	r0, r3
 8002388:	f7ff fdda 	bl	8001f40 <LL_USART_IsActiveFlag_ORE>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d10f      	bne.n	80023b2 <BSP_UART_ISR+0x66>
        || (LL_USART_IsActiveFlag_FE(uartstdio_device->p_uart) != RESET)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a1b      	ldr	r3, [r3, #32]
 8002396:	4618      	mov	r0, r3
 8002398:	f7ff fdae 	bl	8001ef8 <LL_USART_IsActiveFlag_FE>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d107      	bne.n	80023b2 <BSP_UART_ISR+0x66>
        || (LL_USART_IsActiveFlag_NE(uartstdio_device->p_uart) != RESET))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a1b      	ldr	r3, [r3, #32]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7ff fdb8 	bl	8001f1c <LL_USART_IsActiveFlag_NE>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d00f      	beq.n	80023d2 <BSP_UART_ISR+0x86>
    {
      LL_USART_ClearFlag_ORE(uartstdio_device->p_uart);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a1b      	ldr	r3, [r3, #32]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7ff fe1a 	bl	8001ff0 <LL_USART_ClearFlag_ORE>
      LL_USART_ClearFlag_FE(uartstdio_device->p_uart);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a1b      	ldr	r3, [r3, #32]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7ff fdf3 	bl	8001fac <LL_USART_ClearFlag_FE>
      LL_USART_ClearFlag_NE(uartstdio_device->p_uart);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a1b      	ldr	r3, [r3, #32]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7ff fdff 	bl	8001fce <LL_USART_ClearFlag_NE>
    }
    else
    {
      QUEUE_Push_Data((ring_buffer_t *)&uartstdio_device->s_rx_buffer, c);
    }
    return;
 80023d0:	e033      	b.n	800243a <BSP_UART_ISR+0xee>
      QUEUE_Push_Data((ring_buffer_t *)&uartstdio_device->s_rx_buffer, c);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	7bfa      	ldrb	r2, [r7, #15]
 80023d6:	4611      	mov	r1, r2
 80023d8:	4618      	mov	r0, r3
 80023da:	f002 f971 	bl	80046c0 <QUEUE_Push_Data>
    return;
 80023de:	e02c      	b.n	800243a <BSP_UART_ISR+0xee>
  }

  // If interrupt is caused due to Transmit Data Register Empty
  if ((LL_USART_IsActiveFlag_TXE(uartstdio_device->p_uart) != RESET)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a1b      	ldr	r3, [r3, #32]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff fdcf 	bl	8001f88 <LL_USART_IsActiveFlag_TXE>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d024      	beq.n	800243a <BSP_UART_ISR+0xee>
      && (LL_USART_IsEnabledIT_TXE(uartstdio_device->p_uart) != RESET))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a1b      	ldr	r3, [r3, #32]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff fec8 	bl	800218a <LL_USART_IsEnabledIT_TXE>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d01c      	beq.n	800243a <BSP_UART_ISR+0xee>
  {
    if (QUEUE_Is_Empty((ring_buffer_t *)&uartstdio_device->s_tx_buffer))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	3310      	adds	r3, #16
 8002404:	4618      	mov	r0, r3
 8002406:	f002 f93b 	bl	8004680 <QUEUE_Is_Empty>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d005      	beq.n	800241c <BSP_UART_ISR+0xd0>
    {
      LL_USART_DisableIT_TXE(uartstdio_device->p_uart);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a1b      	ldr	r3, [r3, #32]
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff fe84 	bl	8002122 <LL_USART_DisableIT_TXE>
    {
      uint8_t c
          = QUEUE_Pull_Data((ring_buffer_t *)&uartstdio_device->s_tx_buffer);
      LL_USART_TransmitData8(uartstdio_device->p_uart, c);
    }
    return;
 800241a:	e00d      	b.n	8002438 <BSP_UART_ISR+0xec>
          = QUEUE_Pull_Data((ring_buffer_t *)&uartstdio_device->s_tx_buffer);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	3310      	adds	r3, #16
 8002420:	4618      	mov	r0, r3
 8002422:	f002 f973 	bl	800470c <QUEUE_Pull_Data>
 8002426:	4603      	mov	r3, r0
 8002428:	73bb      	strb	r3, [r7, #14]
      LL_USART_TransmitData8(uartstdio_device->p_uart, c);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a1b      	ldr	r3, [r3, #32]
 800242e:	7bba      	ldrb	r2, [r7, #14]
 8002430:	4611      	mov	r1, r2
 8002432:	4618      	mov	r0, r3
 8002434:	f7ff fec7 	bl	80021c6 <LL_USART_TransmitData8>
    return;
 8002438:	bf00      	nop
  }
}
 800243a:	3710      	adds	r7, #16
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002440:	b480      	push	{r7}
 8002442:	b085      	sub	sp, #20
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f003 0307 	and.w	r3, r3, #7
 800244e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002450:	4b0c      	ldr	r3, [pc, #48]	@ (8002484 <__NVIC_SetPriorityGrouping+0x44>)
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002456:	68ba      	ldr	r2, [r7, #8]
 8002458:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800245c:	4013      	ands	r3, r2
 800245e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002468:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800246c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002470:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002472:	4a04      	ldr	r2, [pc, #16]	@ (8002484 <__NVIC_SetPriorityGrouping+0x44>)
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	60d3      	str	r3, [r2, #12]
}
 8002478:	bf00      	nop
 800247a:	3714      	adds	r7, #20
 800247c:	46bd      	mov	sp, r7
 800247e:	bc80      	pop	{r7}
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	e000ed00 	.word	0xe000ed00

08002488 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800248c:	4b04      	ldr	r3, [pc, #16]	@ (80024a0 <__NVIC_GetPriorityGrouping+0x18>)
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	0a1b      	lsrs	r3, r3, #8
 8002492:	f003 0307 	and.w	r3, r3, #7
}
 8002496:	4618      	mov	r0, r3
 8002498:	46bd      	mov	sp, r7
 800249a:	bc80      	pop	{r7}
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	e000ed00 	.word	0xe000ed00

080024a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	4603      	mov	r3, r0
 80024ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	db0b      	blt.n	80024ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024b6:	79fb      	ldrb	r3, [r7, #7]
 80024b8:	f003 021f 	and.w	r2, r3, #31
 80024bc:	4906      	ldr	r1, [pc, #24]	@ (80024d8 <__NVIC_EnableIRQ+0x34>)
 80024be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c2:	095b      	lsrs	r3, r3, #5
 80024c4:	2001      	movs	r0, #1
 80024c6:	fa00 f202 	lsl.w	r2, r0, r2
 80024ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024ce:	bf00      	nop
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bc80      	pop	{r7}
 80024d6:	4770      	bx	lr
 80024d8:	e000e100 	.word	0xe000e100

080024dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	4603      	mov	r3, r0
 80024e4:	6039      	str	r1, [r7, #0]
 80024e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	db0a      	blt.n	8002506 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	b2da      	uxtb	r2, r3
 80024f4:	490c      	ldr	r1, [pc, #48]	@ (8002528 <__NVIC_SetPriority+0x4c>)
 80024f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fa:	0112      	lsls	r2, r2, #4
 80024fc:	b2d2      	uxtb	r2, r2
 80024fe:	440b      	add	r3, r1
 8002500:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002504:	e00a      	b.n	800251c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	b2da      	uxtb	r2, r3
 800250a:	4908      	ldr	r1, [pc, #32]	@ (800252c <__NVIC_SetPriority+0x50>)
 800250c:	79fb      	ldrb	r3, [r7, #7]
 800250e:	f003 030f 	and.w	r3, r3, #15
 8002512:	3b04      	subs	r3, #4
 8002514:	0112      	lsls	r2, r2, #4
 8002516:	b2d2      	uxtb	r2, r2
 8002518:	440b      	add	r3, r1
 800251a:	761a      	strb	r2, [r3, #24]
}
 800251c:	bf00      	nop
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	bc80      	pop	{r7}
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	e000e100 	.word	0xe000e100
 800252c:	e000ed00 	.word	0xe000ed00

08002530 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002530:	b480      	push	{r7}
 8002532:	b089      	sub	sp, #36	@ 0x24
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f003 0307 	and.w	r3, r3, #7
 8002542:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	f1c3 0307 	rsb	r3, r3, #7
 800254a:	2b04      	cmp	r3, #4
 800254c:	bf28      	it	cs
 800254e:	2304      	movcs	r3, #4
 8002550:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	3304      	adds	r3, #4
 8002556:	2b06      	cmp	r3, #6
 8002558:	d902      	bls.n	8002560 <NVIC_EncodePriority+0x30>
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	3b03      	subs	r3, #3
 800255e:	e000      	b.n	8002562 <NVIC_EncodePriority+0x32>
 8002560:	2300      	movs	r3, #0
 8002562:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002564:	f04f 32ff 	mov.w	r2, #4294967295
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	fa02 f303 	lsl.w	r3, r2, r3
 800256e:	43da      	mvns	r2, r3
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	401a      	ands	r2, r3
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002578:	f04f 31ff 	mov.w	r1, #4294967295
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	fa01 f303 	lsl.w	r3, r1, r3
 8002582:	43d9      	mvns	r1, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002588:	4313      	orrs	r3, r2
         );
}
 800258a:	4618      	mov	r0, r3
 800258c:	3724      	adds	r7, #36	@ 0x24
 800258e:	46bd      	mov	sp, r7
 8002590:	bc80      	pop	{r7}
 8002592:	4770      	bx	lr

08002594 <LL_I2C_EnableClockStretching>:
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	601a      	str	r2, [r3, #0]
}
 80025a8:	bf00      	nop
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bc80      	pop	{r7}
 80025b0:	4770      	bx	lr

080025b2 <LL_I2C_DisableGeneralCall>:
{
 80025b2:	b480      	push	{r7}
 80025b4:	b083      	sub	sp, #12
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	601a      	str	r2, [r3, #0]
}
 80025c6:	bf00      	nop
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bc80      	pop	{r7}
 80025ce:	4770      	bx	lr

080025d0 <LL_I2C_SetOwnAddress2>:
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	f023 02fe 	bic.w	r2, r3, #254	@ 0xfe
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	431a      	orrs	r2, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	60da      	str	r2, [r3, #12]
}
 80025ea:	bf00      	nop
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bc80      	pop	{r7}
 80025f2:	4770      	bx	lr

080025f4 <LL_I2C_DisableOwnAddress2>:
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	f023 0201 	bic.w	r2, r3, #1
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	60da      	str	r2, [r3, #12]
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	bc80      	pop	{r7}
 8002610:	4770      	bx	lr
	...

08002614 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002618:	4b04      	ldr	r3, [pc, #16]	@ (800262c <LL_RCC_HSE_Enable+0x18>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a03      	ldr	r2, [pc, #12]	@ (800262c <LL_RCC_HSE_Enable+0x18>)
 800261e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002622:	6013      	str	r3, [r2, #0]
}
 8002624:	bf00      	nop
 8002626:	46bd      	mov	sp, r7
 8002628:	bc80      	pop	{r7}
 800262a:	4770      	bx	lr
 800262c:	40021000 	.word	0x40021000

08002630 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8002634:	4b06      	ldr	r3, [pc, #24]	@ (8002650 <LL_RCC_HSE_IsReady+0x20>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800263c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002640:	bf0c      	ite	eq
 8002642:	2301      	moveq	r3, #1
 8002644:	2300      	movne	r3, #0
 8002646:	b2db      	uxtb	r3, r3
}
 8002648:	4618      	mov	r0, r3
 800264a:	46bd      	mov	sp, r7
 800264c:	bc80      	pop	{r7}
 800264e:	4770      	bx	lr
 8002650:	40021000 	.word	0x40021000

08002654 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800265c:	4b06      	ldr	r3, [pc, #24]	@ (8002678 <LL_RCC_SetSysClkSource+0x24>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f023 0203 	bic.w	r2, r3, #3
 8002664:	4904      	ldr	r1, [pc, #16]	@ (8002678 <LL_RCC_SetSysClkSource+0x24>)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4313      	orrs	r3, r2
 800266a:	604b      	str	r3, [r1, #4]
}
 800266c:	bf00      	nop
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	bc80      	pop	{r7}
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	40021000 	.word	0x40021000

0800267c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002680:	4b03      	ldr	r3, [pc, #12]	@ (8002690 <LL_RCC_GetSysClkSource+0x14>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f003 030c 	and.w	r3, r3, #12
}
 8002688:	4618      	mov	r0, r3
 800268a:	46bd      	mov	sp, r7
 800268c:	bc80      	pop	{r7}
 800268e:	4770      	bx	lr
 8002690:	40021000 	.word	0x40021000

08002694 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800269c:	4b06      	ldr	r3, [pc, #24]	@ (80026b8 <LL_RCC_SetAHBPrescaler+0x24>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026a4:	4904      	ldr	r1, [pc, #16]	@ (80026b8 <LL_RCC_SetAHBPrescaler+0x24>)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	604b      	str	r3, [r1, #4]
}
 80026ac:	bf00      	nop
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bc80      	pop	{r7}
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	40021000 	.word	0x40021000

080026bc <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80026c4:	4b06      	ldr	r3, [pc, #24]	@ (80026e0 <LL_RCC_SetAPB1Prescaler+0x24>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80026cc:	4904      	ldr	r1, [pc, #16]	@ (80026e0 <LL_RCC_SetAPB1Prescaler+0x24>)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	604b      	str	r3, [r1, #4]
}
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	bc80      	pop	{r7}
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	40021000 	.word	0x40021000

080026e4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80026ec:	4b06      	ldr	r3, [pc, #24]	@ (8002708 <LL_RCC_SetAPB2Prescaler+0x24>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80026f4:	4904      	ldr	r1, [pc, #16]	@ (8002708 <LL_RCC_SetAPB2Prescaler+0x24>)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	604b      	str	r3, [r1, #4]
}
 80026fc:	bf00      	nop
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	bc80      	pop	{r7}
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	40021000 	.word	0x40021000

0800270c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002710:	4b04      	ldr	r3, [pc, #16]	@ (8002724 <LL_RCC_PLL_Enable+0x18>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a03      	ldr	r2, [pc, #12]	@ (8002724 <LL_RCC_PLL_Enable+0x18>)
 8002716:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800271a:	6013      	str	r3, [r2, #0]
}
 800271c:	bf00      	nop
 800271e:	46bd      	mov	sp, r7
 8002720:	bc80      	pop	{r7}
 8002722:	4770      	bx	lr
 8002724:	40021000 	.word	0x40021000

08002728 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 800272c:	4b06      	ldr	r3, [pc, #24]	@ (8002748 <LL_RCC_PLL_IsReady+0x20>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002734:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002738:	bf0c      	ite	eq
 800273a:	2301      	moveq	r3, #1
 800273c:	2300      	movne	r3, #0
 800273e:	b2db      	uxtb	r3, r3
}
 8002740:	4618      	mov	r0, r3
 8002742:	46bd      	mov	sp, r7
 8002744:	bc80      	pop	{r7}
 8002746:	4770      	bx	lr
 8002748:	40021000 	.word	0x40021000

0800274c <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 8002756:	4b08      	ldr	r3, [pc, #32]	@ (8002778 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	430b      	orrs	r3, r1
 8002768:	4903      	ldr	r1, [pc, #12]	@ (8002778 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 800276a:	4313      	orrs	r3, r2
 800276c:	604b      	str	r3, [r1, #4]
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 800276e:	bf00      	nop
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	bc80      	pop	{r7}
 8002776:	4770      	bx	lr
 8002778:	40021000 	.word	0x40021000

0800277c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800277c:	b480      	push	{r7}
 800277e:	b085      	sub	sp, #20
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8002784:	4b08      	ldr	r3, [pc, #32]	@ (80027a8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002786:	69da      	ldr	r2, [r3, #28]
 8002788:	4907      	ldr	r1, [pc, #28]	@ (80027a8 <LL_APB1_GRP1_EnableClock+0x2c>)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4313      	orrs	r3, r2
 800278e:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002790:	4b05      	ldr	r3, [pc, #20]	@ (80027a8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002792:	69da      	ldr	r2, [r3, #28]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4013      	ands	r3, r2
 8002798:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800279a:	68fb      	ldr	r3, [r7, #12]
}
 800279c:	bf00      	nop
 800279e:	3714      	adds	r7, #20
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bc80      	pop	{r7}
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	40021000 	.word	0x40021000

080027ac <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b085      	sub	sp, #20
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80027b4:	4b08      	ldr	r3, [pc, #32]	@ (80027d8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80027b6:	699a      	ldr	r2, [r3, #24]
 80027b8:	4907      	ldr	r1, [pc, #28]	@ (80027d8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4313      	orrs	r3, r2
 80027be:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80027c0:	4b05      	ldr	r3, [pc, #20]	@ (80027d8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80027c2:	699a      	ldr	r2, [r3, #24]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	4013      	ands	r3, r2
 80027c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80027ca:	68fb      	ldr	r3, [r7, #12]
}
 80027cc:	bf00      	nop
 80027ce:	3714      	adds	r7, #20
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bc80      	pop	{r7}
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	40021000 	.word	0x40021000

080027dc <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80027e4:	4b06      	ldr	r3, [pc, #24]	@ (8002800 <LL_FLASH_SetLatency+0x24>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f023 0207 	bic.w	r2, r3, #7
 80027ec:	4904      	ldr	r1, [pc, #16]	@ (8002800 <LL_FLASH_SetLatency+0x24>)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	600b      	str	r3, [r1, #0]
}
 80027f4:	bf00      	nop
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bc80      	pop	{r7}
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	40022000 	.word	0x40022000

08002804 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8002808:	4b03      	ldr	r3, [pc, #12]	@ (8002818 <LL_FLASH_GetLatency+0x14>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0307 	and.w	r3, r3, #7
}
 8002810:	4618      	mov	r0, r3
 8002812:	46bd      	mov	sp, r7
 8002814:	bc80      	pop	{r7}
 8002816:	4770      	bx	lr
 8002818:	40022000 	.word	0x40022000

0800281c <LL_TIM_EnableARRPreload>:
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	601a      	str	r2, [r3, #0]
}
 8002830:	bf00      	nop
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	bc80      	pop	{r7}
 8002838:	4770      	bx	lr

0800283a <LL_TIM_DisableARRPreload>:
{
 800283a:	b480      	push	{r7}
 800283c:	b083      	sub	sp, #12
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	601a      	str	r2, [r3, #0]
}
 800284e:	bf00      	nop
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	bc80      	pop	{r7}
 8002856:	4770      	bx	lr

08002858 <LL_TIM_OC_DisableFast>:
{
 8002858:	b480      	push	{r7}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d01c      	beq.n	80028a2 <LL_TIM_OC_DisableFast+0x4a>
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	2b04      	cmp	r3, #4
 800286c:	d017      	beq.n	800289e <LL_TIM_OC_DisableFast+0x46>
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	2b10      	cmp	r3, #16
 8002872:	d012      	beq.n	800289a <LL_TIM_OC_DisableFast+0x42>
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	2b40      	cmp	r3, #64	@ 0x40
 8002878:	d00d      	beq.n	8002896 <LL_TIM_OC_DisableFast+0x3e>
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002880:	d007      	beq.n	8002892 <LL_TIM_OC_DisableFast+0x3a>
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002888:	d101      	bne.n	800288e <LL_TIM_OC_DisableFast+0x36>
 800288a:	2305      	movs	r3, #5
 800288c:	e00a      	b.n	80028a4 <LL_TIM_OC_DisableFast+0x4c>
 800288e:	2306      	movs	r3, #6
 8002890:	e008      	b.n	80028a4 <LL_TIM_OC_DisableFast+0x4c>
 8002892:	2304      	movs	r3, #4
 8002894:	e006      	b.n	80028a4 <LL_TIM_OC_DisableFast+0x4c>
 8002896:	2303      	movs	r3, #3
 8002898:	e004      	b.n	80028a4 <LL_TIM_OC_DisableFast+0x4c>
 800289a:	2302      	movs	r3, #2
 800289c:	e002      	b.n	80028a4 <LL_TIM_OC_DisableFast+0x4c>
 800289e:	2301      	movs	r3, #1
 80028a0:	e000      	b.n	80028a4 <LL_TIM_OC_DisableFast+0x4c>
 80028a2:	2300      	movs	r3, #0
 80028a4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	3318      	adds	r3, #24
 80028aa:	4619      	mov	r1, r3
 80028ac:	7bfb      	ldrb	r3, [r7, #15]
 80028ae:	4a0a      	ldr	r2, [pc, #40]	@ (80028d8 <LL_TIM_OC_DisableFast+0x80>)
 80028b0:	5cd3      	ldrb	r3, [r2, r3]
 80028b2:	440b      	add	r3, r1
 80028b4:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	7bfb      	ldrb	r3, [r7, #15]
 80028bc:	4907      	ldr	r1, [pc, #28]	@ (80028dc <LL_TIM_OC_DisableFast+0x84>)
 80028be:	5ccb      	ldrb	r3, [r1, r3]
 80028c0:	4619      	mov	r1, r3
 80028c2:	2304      	movs	r3, #4
 80028c4:	408b      	lsls	r3, r1
 80028c6:	43db      	mvns	r3, r3
 80028c8:	401a      	ands	r2, r3
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	601a      	str	r2, [r3, #0]
}
 80028ce:	bf00      	nop
 80028d0:	3714      	adds	r7, #20
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bc80      	pop	{r7}
 80028d6:	4770      	bx	lr
 80028d8:	08007834 	.word	0x08007834
 80028dc:	0800783c 	.word	0x0800783c

080028e0 <LL_TIM_OC_EnablePreload>:
{
 80028e0:	b480      	push	{r7}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d01c      	beq.n	800292a <LL_TIM_OC_EnablePreload+0x4a>
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	2b04      	cmp	r3, #4
 80028f4:	d017      	beq.n	8002926 <LL_TIM_OC_EnablePreload+0x46>
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	2b10      	cmp	r3, #16
 80028fa:	d012      	beq.n	8002922 <LL_TIM_OC_EnablePreload+0x42>
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	2b40      	cmp	r3, #64	@ 0x40
 8002900:	d00d      	beq.n	800291e <LL_TIM_OC_EnablePreload+0x3e>
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002908:	d007      	beq.n	800291a <LL_TIM_OC_EnablePreload+0x3a>
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002910:	d101      	bne.n	8002916 <LL_TIM_OC_EnablePreload+0x36>
 8002912:	2305      	movs	r3, #5
 8002914:	e00a      	b.n	800292c <LL_TIM_OC_EnablePreload+0x4c>
 8002916:	2306      	movs	r3, #6
 8002918:	e008      	b.n	800292c <LL_TIM_OC_EnablePreload+0x4c>
 800291a:	2304      	movs	r3, #4
 800291c:	e006      	b.n	800292c <LL_TIM_OC_EnablePreload+0x4c>
 800291e:	2303      	movs	r3, #3
 8002920:	e004      	b.n	800292c <LL_TIM_OC_EnablePreload+0x4c>
 8002922:	2302      	movs	r3, #2
 8002924:	e002      	b.n	800292c <LL_TIM_OC_EnablePreload+0x4c>
 8002926:	2301      	movs	r3, #1
 8002928:	e000      	b.n	800292c <LL_TIM_OC_EnablePreload+0x4c>
 800292a:	2300      	movs	r3, #0
 800292c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	3318      	adds	r3, #24
 8002932:	4619      	mov	r1, r3
 8002934:	7bfb      	ldrb	r3, [r7, #15]
 8002936:	4a0a      	ldr	r2, [pc, #40]	@ (8002960 <LL_TIM_OC_EnablePreload+0x80>)
 8002938:	5cd3      	ldrb	r3, [r2, r3]
 800293a:	440b      	add	r3, r1
 800293c:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	7bfb      	ldrb	r3, [r7, #15]
 8002944:	4907      	ldr	r1, [pc, #28]	@ (8002964 <LL_TIM_OC_EnablePreload+0x84>)
 8002946:	5ccb      	ldrb	r3, [r1, r3]
 8002948:	4619      	mov	r1, r3
 800294a:	2308      	movs	r3, #8
 800294c:	408b      	lsls	r3, r1
 800294e:	431a      	orrs	r2, r3
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	601a      	str	r2, [r3, #0]
}
 8002954:	bf00      	nop
 8002956:	3714      	adds	r7, #20
 8002958:	46bd      	mov	sp, r7
 800295a:	bc80      	pop	{r7}
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	08007834 	.word	0x08007834
 8002964:	0800783c 	.word	0x0800783c

08002968 <LL_TIM_SetClockSource>:
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800297a:	f023 0307 	bic.w	r3, r3, #7
 800297e:	683a      	ldr	r2, [r7, #0]
 8002980:	431a      	orrs	r2, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	609a      	str	r2, [r3, #8]
}
 8002986:	bf00      	nop
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	bc80      	pop	{r7}
 800298e:	4770      	bx	lr

08002990 <LL_TIM_SetTriggerOutput>:
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	431a      	orrs	r2, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	605a      	str	r2, [r3, #4]
}
 80029aa:	bf00      	nop
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bc80      	pop	{r7}
 80029b2:	4770      	bx	lr

080029b4 <LL_TIM_DisableMasterSlaveMode>:
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	609a      	str	r2, [r3, #8]
}
 80029c8:	bf00      	nop
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bc80      	pop	{r7}
 80029d0:	4770      	bx	lr

080029d2 <LL_USART_Enable>:
{
 80029d2:	b480      	push	{r7}
 80029d4:	b083      	sub	sp, #12
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	60da      	str	r2, [r3, #12]
}
 80029e6:	bf00      	nop
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bc80      	pop	{r7}
 80029ee:	4770      	bx	lr

080029f0 <LL_USART_ConfigAsyncMode>:
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	691b      	ldr	r3, [r3, #16]
 80029fc:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	695b      	ldr	r3, [r3, #20]
 8002a08:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	615a      	str	r2, [r3, #20]
}
 8002a10:	bf00      	nop
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bc80      	pop	{r7}
 8002a18:	4770      	bx	lr

08002a1a <LL_GPIO_ResetOutputPin>:
{
 8002a1a:	b480      	push	{r7}
 8002a1c:	b083      	sub	sp, #12
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
 8002a22:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	0a1b      	lsrs	r3, r3, #8
 8002a28:	b29a      	uxth	r2, r3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	615a      	str	r2, [r3, #20]
}
 8002a2e:	bf00      	nop
 8002a30:	370c      	adds	r7, #12
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bc80      	pop	{r7}
 8002a36:	4770      	bx	lr

08002a38 <LL_GPIO_AF_RemapPartial_TIM1>:
  * @rmtoll MAPR          TIM1_REMAP           LL_GPIO_AF_RemapPartial_TIM1
  * @note  PARTIAL: Partial remap (ETR/PA12, CH1/PA8, CH2/PA9,  CH3/PA10, CH4/PA11, BKIN/PA6,  CH1N/PA7,  CH2N/PB0,  CH3N/PB1)
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_RemapPartial_TIM1(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
  MODIFY_REG(AFIO->MAPR, (AFIO_MAPR_TIM1_REMAP | AFIO_MAPR_SWJ_CFG), (AFIO_MAPR_TIM1_REMAP_PARTIALREMAP | AFIO_MAPR_SWJ_CFG));
 8002a3c:	4b07      	ldr	r3, [pc, #28]	@ (8002a5c <LL_GPIO_AF_RemapPartial_TIM1+0x24>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002a44:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002a48:	4a04      	ldr	r2, [pc, #16]	@ (8002a5c <LL_GPIO_AF_RemapPartial_TIM1+0x24>)
 8002a4a:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8002a4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a52:	6053      	str	r3, [r2, #4]
}
 8002a54:	bf00      	nop
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bc80      	pop	{r7}
 8002a5a:	4770      	bx	lr
 8002a5c:	40010000 	.word	0x40010000

08002a60 <LL_GPIO_AF_Remap_SWJ_NOJTAG>:
  * @rmtoll MAPR          SWJ_CFG           LL_GPIO_AF_Remap_SWJ_NOJTAG
  * @note  NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_Remap_SWJ_NOJTAG(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0
  MODIFY_REG(AFIO->MAPR, AFIO_MAPR_SWJ_CFG, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 8002a64:	4b05      	ldr	r3, [pc, #20]	@ (8002a7c <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x1c>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002a6c:	4a03      	ldr	r2, [pc, #12]	@ (8002a7c <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x1c>)
 8002a6e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002a72:	6053      	str	r3, [r2, #4]
}
 8002a74:	bf00      	nop
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bc80      	pop	{r7}
 8002a7a:	4770      	bx	lr
 8002a7c:	40010000 	.word	0x40010000

08002a80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 8002a84:	2001      	movs	r0, #1
 8002a86:	f7ff fe91 	bl	80027ac <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8002a8a:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8002a8e:	f7ff fe75 	bl	800277c <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a92:	2003      	movs	r0, #3
 8002a94:	f7ff fcd4 	bl	8002440 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8002a98:	f7ff fcf6 	bl	8002488 <__NVIC_GetPriorityGrouping>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	210f      	movs	r1, #15
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7ff fd44 	bl	8002530 <NVIC_EncodePriority>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	4619      	mov	r1, r3
 8002aac:	f04f 30ff 	mov.w	r0, #4294967295
 8002ab0:	f7ff fd14 	bl	80024dc <__NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  LL_GPIO_AF_Remap_SWJ_NOJTAG();
 8002ab4:	f7ff ffd4 	bl	8002a60 <LL_GPIO_AF_Remap_SWJ_NOJTAG>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ab8:	f000 f81e 	bl	8002af8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002abc:	f000 fa56 	bl	8002f6c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8002ac0:	f000 f986 	bl	8002dd0 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8002ac4:	f000 f8aa 	bl	8002c1c <MX_TIM1_Init>
  MX_I2C1_Init();
 8002ac8:	f000 f854 	bl	8002b74 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8002acc:	f000 f9e8 	bl	8002ea0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8002ad0:	f000 f93c 	bl	8002d4c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  // Initialization Application
  APP_COMMAND_Init();
 8002ad4:	f7fe fb80 	bl	80011d8 <APP_COMMAND_Init>
  APP_CONTROL_Init();
 8002ad8:	f7fe fc94 	bl	8001404 <APP_CONTROL_Init>
  APP_STATUS_LED_Init();
 8002adc:	f7fe fe0c 	bl	80016f8 <APP_STATUS_LED_Init>

  // Create Task
  APP_COMMAND_CreateTask();
 8002ae0:	f7fe fb92 	bl	8001208 <APP_COMMAND_CreateTask>
  APP_CONTROL_CreateTask();
 8002ae4:	f7fe fcf6 	bl	80014d4 <APP_CONTROL_CreateTask>
  APP_STATUS_LED_CreateTask();
 8002ae8:	f7fe fe22 	bl	8001730 <APP_STATUS_LED_CreateTask>

  SCH_StartScheduler();
 8002aec:	f001 ff36 	bl	800495c <SCH_StartScheduler>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    SCH_HandleScheduledTask();
 8002af0:	f001 ff3a 	bl	8004968 <SCH_HandleScheduledTask>
 8002af4:	e7fc      	b.n	8002af0 <main+0x70>
	...

08002af8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8002afc:	2002      	movs	r0, #2
 8002afe:	f7ff fe6d 	bl	80027dc <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 8002b02:	bf00      	nop
 8002b04:	f7ff fe7e 	bl	8002804 <LL_FLASH_GetLatency>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d1fa      	bne.n	8002b04 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSE_Enable();
 8002b0e:	f7ff fd81 	bl	8002614 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8002b12:	bf00      	nop
 8002b14:	f7ff fd8c 	bl	8002630 <LL_RCC_HSE_IsReady>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d1fa      	bne.n	8002b14 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_2, LL_RCC_PLL_MUL_15);
 8002b1e:	f44f 1150 	mov.w	r1, #3407872	@ 0x340000
 8002b22:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8002b26:	f7ff fe11 	bl	800274c <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8002b2a:	f7ff fdef 	bl	800270c <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8002b2e:	bf00      	nop
 8002b30:	f7ff fdfa 	bl	8002728 <LL_RCC_PLL_IsReady>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d1fa      	bne.n	8002b30 <SystemClock_Config+0x38>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8002b3a:	2000      	movs	r0, #0
 8002b3c:	f7ff fdaa 	bl	8002694 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8002b40:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002b44:	f7ff fdba 	bl	80026bc <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8002b48:	2000      	movs	r0, #0
 8002b4a:	f7ff fdcb 	bl	80026e4 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8002b4e:	2002      	movs	r0, #2
 8002b50:	f7ff fd80 	bl	8002654 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8002b54:	bf00      	nop
 8002b56:	f7ff fd91 	bl	800267c <LL_RCC_GetSysClkSource>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b08      	cmp	r3, #8
 8002b5e:	d1fa      	bne.n	8002b56 <SystemClock_Config+0x5e>
  {

  }
  LL_Init1msTick(60000000);
 8002b60:	4803      	ldr	r0, [pc, #12]	@ (8002b70 <SystemClock_Config+0x78>)
 8002b62:	f001 fb5f 	bl	8004224 <LL_Init1msTick>
  LL_SetSystemCoreClock(60000000);
 8002b66:	4802      	ldr	r0, [pc, #8]	@ (8002b70 <SystemClock_Config+0x78>)
 8002b68:	f001 fb8e 	bl	8004288 <LL_SetSystemCoreClock>
}
 8002b6c:	bf00      	nop
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	03938700 	.word	0x03938700

08002b74 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b08c      	sub	sp, #48	@ 0x30
 8002b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8002b7a:	f107 0318 	add.w	r3, r7, #24
 8002b7e:	2200      	movs	r2, #0
 8002b80:	601a      	str	r2, [r3, #0]
 8002b82:	605a      	str	r2, [r3, #4]
 8002b84:	609a      	str	r2, [r3, #8]
 8002b86:	60da      	str	r2, [r3, #12]
 8002b88:	611a      	str	r2, [r3, #16]
 8002b8a:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b8c:	1d3b      	adds	r3, r7, #4
 8002b8e:	2200      	movs	r2, #0
 8002b90:	601a      	str	r2, [r3, #0]
 8002b92:	605a      	str	r2, [r3, #4]
 8002b94:	609a      	str	r2, [r3, #8]
 8002b96:	60da      	str	r2, [r3, #12]
 8002b98:	611a      	str	r2, [r3, #16]

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8002b9a:	2008      	movs	r0, #8
 8002b9c:	f7ff fe06 	bl	80027ac <LL_APB2_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8002ba0:	f24c 03c0 	movw	r3, #49344	@ 0xc0c0
 8002ba4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002ba6:	2309      	movs	r3, #9
 8002ba8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002baa:	2303      	movs	r3, #3
 8002bac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8002bae:	2304      	movs	r3, #4
 8002bb0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bb2:	1d3b      	adds	r3, r7, #4
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	4816      	ldr	r0, [pc, #88]	@ (8002c10 <MX_I2C1_Init+0x9c>)
 8002bb8:	f000 fcb4 	bl	8003524 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8002bbc:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8002bc0:	f7ff fddc 	bl	800277c <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C1_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C1);
 8002bc4:	4813      	ldr	r0, [pc, #76]	@ (8002c14 <MX_I2C1_Init+0xa0>)
 8002bc6:	f7ff fd15 	bl	80025f4 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8002bca:	4812      	ldr	r0, [pc, #72]	@ (8002c14 <MX_I2C1_Init+0xa0>)
 8002bcc:	f7ff fcf1 	bl	80025b2 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8002bd0:	4810      	ldr	r0, [pc, #64]	@ (8002c14 <MX_I2C1_Init+0xa0>)
 8002bd2:	f7ff fcdf 	bl	8002594 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 400000;
 8002bda:	4b0f      	ldr	r3, [pc, #60]	@ (8002c18 <MX_I2C1_Init+0xa4>)
 8002bdc:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 8002bde:	2300      	movs	r3, #0
 8002be0:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 0;
 8002be2:	2300      	movs	r3, #0
 8002be4:	627b      	str	r3, [r7, #36]	@ 0x24
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8002be6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002bea:	62bb      	str	r3, [r7, #40]	@ 0x28
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8002bec:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002bf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8002bf2:	f107 0318 	add.w	r3, r7, #24
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	4806      	ldr	r0, [pc, #24]	@ (8002c14 <MX_I2C1_Init+0xa0>)
 8002bfa:	f000 fde9 	bl	80037d0 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0);
 8002bfe:	2100      	movs	r1, #0
 8002c00:	4804      	ldr	r0, [pc, #16]	@ (8002c14 <MX_I2C1_Init+0xa0>)
 8002c02:	f7ff fce5 	bl	80025d0 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002c06:	bf00      	nop
 8002c08:	3730      	adds	r7, #48	@ 0x30
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	40010c00 	.word	0x40010c00
 8002c14:	40005400 	.word	0x40005400
 8002c18:	00061a80 	.word	0x00061a80

08002c1c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b098      	sub	sp, #96	@ 0x60
 8002c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002c22:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002c26:	2200      	movs	r2, #0
 8002c28:	601a      	str	r2, [r3, #0]
 8002c2a:	605a      	str	r2, [r3, #4]
 8002c2c:	609a      	str	r2, [r3, #8]
 8002c2e:	60da      	str	r2, [r3, #12]
 8002c30:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8002c32:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c36:	2220      	movs	r2, #32
 8002c38:	2100      	movs	r1, #0
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f002 fd25 	bl	800568a <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8002c40:	f107 0314 	add.w	r3, r7, #20
 8002c44:	2200      	movs	r2, #0
 8002c46:	601a      	str	r2, [r3, #0]
 8002c48:	605a      	str	r2, [r3, #4]
 8002c4a:	609a      	str	r2, [r3, #8]
 8002c4c:	60da      	str	r2, [r3, #12]
 8002c4e:	611a      	str	r2, [r3, #16]
 8002c50:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c52:	463b      	mov	r3, r7
 8002c54:	2200      	movs	r2, #0
 8002c56:	601a      	str	r2, [r3, #0]
 8002c58:	605a      	str	r2, [r3, #4]
 8002c5a:	609a      	str	r2, [r3, #8]
 8002c5c:	60da      	str	r2, [r3, #12]
 8002c5e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8002c60:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8002c64:	f7ff fda2 	bl	80027ac <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	653b      	str	r3, [r7, #80]	@ 0x50
  TIM_InitStruct.Autoreload = 65535;
 8002c72:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002c76:	657b      	str	r3, [r7, #84]	@ 0x54
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	65bb      	str	r3, [r7, #88]	@ 0x58
  TIM_InitStruct.RepetitionCounter = 0;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8002c80:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002c84:	4619      	mov	r1, r3
 8002c86:	482e      	ldr	r0, [pc, #184]	@ (8002d40 <MX_TIM1_Init+0x124>)
 8002c88:	f000 ff50 	bl	8003b2c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8002c8c:	482c      	ldr	r0, [pc, #176]	@ (8002d40 <MX_TIM1_Init+0x124>)
 8002c8e:	f7ff fdd4 	bl	800283a <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002c92:	2100      	movs	r1, #0
 8002c94:	482a      	ldr	r0, [pc, #168]	@ (8002d40 <MX_TIM1_Init+0x124>)
 8002c96:	f7ff fe67 	bl	8002968 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 8002c9a:	2101      	movs	r1, #1
 8002c9c:	4828      	ldr	r0, [pc, #160]	@ (8002d40 <MX_TIM1_Init+0x124>)
 8002c9e:	f7ff fe1f 	bl	80028e0 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8002ca2:	2360      	movs	r3, #96	@ 0x60
 8002ca4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	633b      	str	r3, [r7, #48]	@ 0x30
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002caa:	2300      	movs	r3, #0
 8002cac:	637b      	str	r3, [r7, #52]	@ 0x34
  TIM_OC_InitStruct.CompareValue = 0;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	63bb      	str	r3, [r7, #56]	@ 0x38
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8002cc2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	2101      	movs	r1, #1
 8002cca:	481d      	ldr	r0, [pc, #116]	@ (8002d40 <MX_TIM1_Init+0x124>)
 8002ccc:	f000 ff8c 	bl	8003be8 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 8002cd0:	2101      	movs	r1, #1
 8002cd2:	481b      	ldr	r0, [pc, #108]	@ (8002d40 <MX_TIM1_Init+0x124>)
 8002cd4:	f7ff fdc0 	bl	8002858 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8002cd8:	2100      	movs	r1, #0
 8002cda:	4819      	ldr	r0, [pc, #100]	@ (8002d40 <MX_TIM1_Init+0x124>)
 8002cdc:	f7ff fe58 	bl	8002990 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8002ce0:	4817      	ldr	r0, [pc, #92]	@ (8002d40 <MX_TIM1_Init+0x124>)
 8002ce2:	f7ff fe67 	bl	80029b4 <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	617b      	str	r3, [r7, #20]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8002cea:	2300      	movs	r3, #0
 8002cec:	61bb      	str	r3, [r7, #24]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.DeadTime = 84;
 8002cf2:	2354      	movs	r3, #84	@ 0x54
 8002cf4:	f887 3020 	strb.w	r3, [r7, #32]
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	847b      	strh	r3, [r7, #34]	@ 0x22
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8002cfc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002d00:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8002d02:	2300      	movs	r3, #0
 8002d04:	62bb      	str	r3, [r7, #40]	@ 0x28
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8002d06:	f107 0314 	add.w	r3, r7, #20
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	480c      	ldr	r0, [pc, #48]	@ (8002d40 <MX_TIM1_Init+0x124>)
 8002d0e:	f000 ffac 	bl	8003c6a <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8002d12:	2004      	movs	r0, #4
 8002d14:	f7ff fd4a 	bl	80027ac <LL_APB2_GRP1_EnableClock>
  /**TIM1 GPIO Configuration
  PA7   ------> TIM1_CH1N
  PA8   ------> TIM1_CH1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7|LL_GPIO_PIN_8;
 8002d18:	4b0a      	ldr	r3, [pc, #40]	@ (8002d44 <MX_TIM1_Init+0x128>)
 8002d1a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002d1c:	2309      	movs	r3, #9
 8002d1e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002d20:	2302      	movs	r3, #2
 8002d22:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002d24:	2300      	movs	r3, #0
 8002d26:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d28:	463b      	mov	r3, r7
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	4806      	ldr	r0, [pc, #24]	@ (8002d48 <MX_TIM1_Init+0x12c>)
 8002d2e:	f000 fbf9 	bl	8003524 <LL_GPIO_Init>

  LL_GPIO_AF_RemapPartial_TIM1();
 8002d32:	f7ff fe81 	bl	8002a38 <LL_GPIO_AF_RemapPartial_TIM1>

}
 8002d36:	bf00      	nop
 8002d38:	3760      	adds	r7, #96	@ 0x60
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	40012c00 	.word	0x40012c00
 8002d44:	04018081 	.word	0x04018081
 8002d48:	40010800 	.word	0x40010800

08002d4c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b086      	sub	sp, #24
 8002d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002d52:	1d3b      	adds	r3, r7, #4
 8002d54:	2200      	movs	r2, #0
 8002d56:	601a      	str	r2, [r3, #0]
 8002d58:	605a      	str	r2, [r3, #4]
 8002d5a:	609a      	str	r2, [r3, #8]
 8002d5c:	60da      	str	r2, [r3, #12]
 8002d5e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8002d60:	2001      	movs	r0, #1
 8002d62:	f7ff fd0b 	bl	800277c <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 8002d66:	f7ff fb8f 	bl	8002488 <__NVIC_GetPriorityGrouping>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	2102      	movs	r1, #2
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7ff fbdd 	bl	8002530 <NVIC_EncodePriority>
 8002d76:	4603      	mov	r3, r0
 8002d78:	4619      	mov	r1, r3
 8002d7a:	201c      	movs	r0, #28
 8002d7c:	f7ff fbae 	bl	80024dc <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8002d80:	201c      	movs	r0, #28
 8002d82:	f7ff fb8f 	bl	80024a4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8002d86:	2300      	movs	r3, #0
 8002d88:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 65535;
 8002d8e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002d92:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002d94:	2300      	movs	r3, #0
 8002d96:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8002d98:	1d3b      	adds	r3, r7, #4
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8002da0:	f000 fec4 	bl	8003b2c <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM2);
 8002da4:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8002da8:	f7ff fd38 	bl	800281c <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002dac:	2100      	movs	r1, #0
 8002dae:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8002db2:	f7ff fdd9 	bl	8002968 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8002db6:	2100      	movs	r1, #0
 8002db8:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8002dbc:	f7ff fde8 	bl	8002990 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8002dc0:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8002dc4:	f7ff fdf6 	bl	80029b4 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002dc8:	bf00      	nop
 8002dca:	3718      	adds	r7, #24
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b08c      	sub	sp, #48	@ 0x30
 8002dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002dd6:	f107 0314 	add.w	r3, r7, #20
 8002dda:	2200      	movs	r2, #0
 8002ddc:	601a      	str	r2, [r3, #0]
 8002dde:	605a      	str	r2, [r3, #4]
 8002de0:	609a      	str	r2, [r3, #8]
 8002de2:	60da      	str	r2, [r3, #12]
 8002de4:	611a      	str	r2, [r3, #16]
 8002de6:	615a      	str	r2, [r3, #20]
 8002de8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dea:	463b      	mov	r3, r7
 8002dec:	2200      	movs	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]
 8002df0:	605a      	str	r2, [r3, #4]
 8002df2:	609a      	str	r2, [r3, #8]
 8002df4:	60da      	str	r2, [r3, #12]
 8002df6:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8002df8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002dfc:	f7ff fcd6 	bl	80027ac <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8002e00:	2004      	movs	r0, #4
 8002e02:	f7ff fcd3 	bl	80027ac <LL_APB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8002e06:	4b22      	ldr	r3, [pc, #136]	@ (8002e90 <MX_USART1_UART_Init+0xc0>)
 8002e08:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002e0a:	2309      	movs	r3, #9
 8002e0c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002e12:	2300      	movs	r3, #0
 8002e14:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e16:	463b      	mov	r3, r7
 8002e18:	4619      	mov	r1, r3
 8002e1a:	481e      	ldr	r0, [pc, #120]	@ (8002e94 <MX_USART1_UART_Init+0xc4>)
 8002e1c:	f000 fb82 	bl	8003524 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8002e20:	4b1d      	ldr	r3, [pc, #116]	@ (8002e98 <MX_USART1_UART_Init+0xc8>)
 8002e22:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8002e24:	2304      	movs	r3, #4
 8002e26:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e28:	463b      	mov	r3, r7
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	4819      	ldr	r0, [pc, #100]	@ (8002e94 <MX_USART1_UART_Init+0xc4>)
 8002e2e:	f000 fb79 	bl	8003524 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8002e32:	f7ff fb29 	bl	8002488 <__NVIC_GetPriorityGrouping>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2200      	movs	r2, #0
 8002e3a:	2101      	movs	r1, #1
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7ff fb77 	bl	8002530 <NVIC_EncodePriority>
 8002e42:	4603      	mov	r3, r0
 8002e44:	4619      	mov	r1, r3
 8002e46:	2025      	movs	r0, #37	@ 0x25
 8002e48:	f7ff fb48 	bl	80024dc <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8002e4c:	2025      	movs	r0, #37	@ 0x25
 8002e4e:	f7ff fb29 	bl	80024a4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8002e52:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8002e56:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002e60:	2300      	movs	r3, #0
 8002e62:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002e64:	230c      	movs	r3, #12
 8002e66:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_USART_Init(USART1, &USART_InitStruct);
 8002e70:	f107 0314 	add.w	r3, r7, #20
 8002e74:	4619      	mov	r1, r3
 8002e76:	4809      	ldr	r0, [pc, #36]	@ (8002e9c <MX_USART1_UART_Init+0xcc>)
 8002e78:	f001 f95a 	bl	8004130 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8002e7c:	4807      	ldr	r0, [pc, #28]	@ (8002e9c <MX_USART1_UART_Init+0xcc>)
 8002e7e:	f7ff fdb7 	bl	80029f0 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8002e82:	4806      	ldr	r0, [pc, #24]	@ (8002e9c <MX_USART1_UART_Init+0xcc>)
 8002e84:	f7ff fda5 	bl	80029d2 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002e88:	bf00      	nop
 8002e8a:	3730      	adds	r7, #48	@ 0x30
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	04020002 	.word	0x04020002
 8002e94:	40010800 	.word	0x40010800
 8002e98:	04040004 	.word	0x04040004
 8002e9c:	40013800 	.word	0x40013800

08002ea0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b08c      	sub	sp, #48	@ 0x30
 8002ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002ea6:	f107 0314 	add.w	r3, r7, #20
 8002eaa:	2200      	movs	r2, #0
 8002eac:	601a      	str	r2, [r3, #0]
 8002eae:	605a      	str	r2, [r3, #4]
 8002eb0:	609a      	str	r2, [r3, #8]
 8002eb2:	60da      	str	r2, [r3, #12]
 8002eb4:	611a      	str	r2, [r3, #16]
 8002eb6:	615a      	str	r2, [r3, #20]
 8002eb8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eba:	463b      	mov	r3, r7
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	601a      	str	r2, [r3, #0]
 8002ec0:	605a      	str	r2, [r3, #4]
 8002ec2:	609a      	str	r2, [r3, #8]
 8002ec4:	60da      	str	r2, [r3, #12]
 8002ec6:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8002ec8:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8002ecc:	f7ff fc56 	bl	800277c <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8002ed0:	2004      	movs	r0, #4
 8002ed2:	f7ff fc6b 	bl	80027ac <LL_APB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8002ed6:	f240 4304 	movw	r3, #1028	@ 0x404
 8002eda:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002edc:	2309      	movs	r3, #9
 8002ede:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ee8:	463b      	mov	r3, r7
 8002eea:	4619      	mov	r1, r3
 8002eec:	481d      	ldr	r0, [pc, #116]	@ (8002f64 <MX_USART2_UART_Init+0xc4>)
 8002eee:	f000 fb19 	bl	8003524 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8002ef2:	f640 0308 	movw	r3, #2056	@ 0x808
 8002ef6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8002ef8:	2304      	movs	r3, #4
 8002efa:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002efc:	463b      	mov	r3, r7
 8002efe:	4619      	mov	r1, r3
 8002f00:	4818      	ldr	r0, [pc, #96]	@ (8002f64 <MX_USART2_UART_Init+0xc4>)
 8002f02:	f000 fb0f 	bl	8003524 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8002f06:	f7ff fabf 	bl	8002488 <__NVIC_GetPriorityGrouping>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	2101      	movs	r1, #1
 8002f10:	4618      	mov	r0, r3
 8002f12:	f7ff fb0d 	bl	8002530 <NVIC_EncodePriority>
 8002f16:	4603      	mov	r3, r0
 8002f18:	4619      	mov	r1, r3
 8002f1a:	2026      	movs	r0, #38	@ 0x26
 8002f1c:	f7ff fade 	bl	80024dc <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8002f20:	2026      	movs	r0, #38	@ 0x26
 8002f22:	f7ff fabf 	bl	80024a4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8002f26:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8002f2a:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002f30:	2300      	movs	r3, #0
 8002f32:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002f34:	2300      	movs	r3, #0
 8002f36:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002f38:	230c      	movs	r3, #12
 8002f3a:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002f40:	2300      	movs	r3, #0
 8002f42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_USART_Init(USART2, &USART_InitStruct);
 8002f44:	f107 0314 	add.w	r3, r7, #20
 8002f48:	4619      	mov	r1, r3
 8002f4a:	4807      	ldr	r0, [pc, #28]	@ (8002f68 <MX_USART2_UART_Init+0xc8>)
 8002f4c:	f001 f8f0 	bl	8004130 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8002f50:	4805      	ldr	r0, [pc, #20]	@ (8002f68 <MX_USART2_UART_Init+0xc8>)
 8002f52:	f7ff fd4d 	bl	80029f0 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8002f56:	4804      	ldr	r0, [pc, #16]	@ (8002f68 <MX_USART2_UART_Init+0xc8>)
 8002f58:	f7ff fd3b 	bl	80029d2 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002f5c:	bf00      	nop
 8002f5e:	3730      	adds	r7, #48	@ 0x30
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	40010800 	.word	0x40010800
 8002f68:	40004400 	.word	0x40004400

08002f6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b086      	sub	sp, #24
 8002f70:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f72:	1d3b      	adds	r3, r7, #4
 8002f74:	2200      	movs	r2, #0
 8002f76:	601a      	str	r2, [r3, #0]
 8002f78:	605a      	str	r2, [r3, #4]
 8002f7a:	609a      	str	r2, [r3, #8]
 8002f7c:	60da      	str	r2, [r3, #12]
 8002f7e:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 8002f80:	2020      	movs	r0, #32
 8002f82:	f7ff fc13 	bl	80027ac <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8002f86:	2004      	movs	r0, #4
 8002f88:	f7ff fc10 	bl	80027ac <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8002f8c:	2008      	movs	r0, #8
 8002f8e:	f7ff fc0d 	bl	80027ac <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, PFC_ON_OFF_Pin|LED_TEST_Pin);
 8002f92:	f244 2142 	movw	r1, #16962	@ 0x4242
 8002f96:	4813      	ldr	r0, [pc, #76]	@ (8002fe4 <MX_GPIO_Init+0x78>)
 8002f98:	f7ff fd3f 	bl	8002a1a <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LED_WAIT_Pin|LED_SOFT_START_Pin|LED_PROCESS_Pin|RS485_CONTROL_Pin
 8002f9c:	4912      	ldr	r1, [pc, #72]	@ (8002fe8 <MX_GPIO_Init+0x7c>)
 8002f9e:	4813      	ldr	r0, [pc, #76]	@ (8002fec <MX_GPIO_Init+0x80>)
 8002fa0:	f7ff fd3b 	bl	8002a1a <LL_GPIO_ResetOutputPin>
                          |VOLTAGE_PROTECTION_Pin);

  /**/
  GPIO_InitStruct.Pin = PFC_ON_OFF_Pin|LED_TEST_Pin;
 8002fa4:	f244 2342 	movw	r3, #16962	@ 0x4242
 8002fa8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002faa:	2301      	movs	r3, #1
 8002fac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002fae:	2302      	movs	r3, #2
 8002fb0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fb6:	1d3b      	adds	r3, r7, #4
 8002fb8:	4619      	mov	r1, r3
 8002fba:	480a      	ldr	r0, [pc, #40]	@ (8002fe4 <MX_GPIO_Init+0x78>)
 8002fbc:	f000 fab2 	bl	8003524 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_WAIT_Pin|LED_SOFT_START_Pin|LED_PROCESS_Pin|RS485_CONTROL_Pin
 8002fc0:	4b09      	ldr	r3, [pc, #36]	@ (8002fe8 <MX_GPIO_Init+0x7c>)
 8002fc2:	607b      	str	r3, [r7, #4]
                          |VOLTAGE_PROTECTION_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002fc8:	2302      	movs	r3, #2
 8002fca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fd0:	1d3b      	adds	r3, r7, #4
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	4805      	ldr	r0, [pc, #20]	@ (8002fec <MX_GPIO_Init+0x80>)
 8002fd6:	f000 faa5 	bl	8003524 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002fda:	bf00      	nop
 8002fdc:	3718      	adds	r7, #24
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	40010800 	.word	0x40010800
 8002fe8:	04840787 	.word	0x04840787
 8002fec:	40010c00 	.word	0x40010c00

08002ff0 <BSP_BOARD_TimeOut>:
   *   PUBLIC FUNCTION
   *********************/

  // Call Function in "SysTick ISR"
  static inline void BSP_BOARD_TimeOut (void)
  {
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	af00      	add	r7, sp, #0
    BSP_UART_TimeOut();
 8002ff4:	f7ff f998 	bl	8002328 <BSP_UART_TimeOut>
    BSP_I2C_TimeOut();
 8002ff8:	f7fe fd66 	bl	8001ac8 <BSP_I2C_TimeOut>
  }
 8002ffc:	bf00      	nop
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003000:	b480      	push	{r7}
 8003002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003004:	bf00      	nop
 8003006:	e7fd      	b.n	8003004 <NMI_Handler+0x4>

08003008 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800300c:	bf00      	nop
 800300e:	e7fd      	b.n	800300c <HardFault_Handler+0x4>

08003010 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003014:	bf00      	nop
 8003016:	e7fd      	b.n	8003014 <MemManage_Handler+0x4>

08003018 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003018:	b480      	push	{r7}
 800301a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800301c:	bf00      	nop
 800301e:	e7fd      	b.n	800301c <BusFault_Handler+0x4>

08003020 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003024:	bf00      	nop
 8003026:	e7fd      	b.n	8003024 <UsageFault_Handler+0x4>

08003028 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800302c:	bf00      	nop
 800302e:	46bd      	mov	sp, r7
 8003030:	bc80      	pop	{r7}
 8003032:	4770      	bx	lr

08003034 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003038:	bf00      	nop
 800303a:	46bd      	mov	sp, r7
 800303c:	bc80      	pop	{r7}
 800303e:	4770      	bx	lr

08003040 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003040:	b480      	push	{r7}
 8003042:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003044:	bf00      	nop
 8003046:	46bd      	mov	sp, r7
 8003048:	bc80      	pop	{r7}
 800304a:	4770      	bx	lr

0800304c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	BSP_BOARD_TimeOut();
 8003050:	f7ff ffce 	bl	8002ff0 <BSP_BOARD_TimeOut>
	SCH_RunSystemTickTimer();
 8003054:	f001 fbee 	bl	8004834 <SCH_RunSystemTickTimer>
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003058:	bf00      	nop
 800305a:	bd80      	pop	{r7, pc}

0800305c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0

  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003060:	bf00      	nop
 8003062:	46bd      	mov	sp, r7
 8003064:	bc80      	pop	{r7}
 8003066:	4770      	bx	lr

08003068 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	BSP_UART_ISR((uart_cfg_t *)p_uart1);
 800306c:	4b03      	ldr	r3, [pc, #12]	@ (800307c <USART1_IRQHandler+0x14>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4618      	mov	r0, r3
 8003072:	f7ff f96b 	bl	800234c <BSP_UART_ISR>
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003076:	bf00      	nop
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	20000060 	.word	0x20000060

08003080 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0

  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003084:	bf00      	nop
 8003086:	46bd      	mov	sp, r7
 8003088:	bc80      	pop	{r7}
 800308a:	4770      	bx	lr

0800308c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800308c:	b480      	push	{r7}
 800308e:	af00      	add	r7, sp, #0
  return 1;
 8003090:	2301      	movs	r3, #1
}
 8003092:	4618      	mov	r0, r3
 8003094:	46bd      	mov	sp, r7
 8003096:	bc80      	pop	{r7}
 8003098:	4770      	bx	lr

0800309a <_kill>:

int _kill(int pid, int sig)
{
 800309a:	b580      	push	{r7, lr}
 800309c:	b082      	sub	sp, #8
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
 80030a2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80030a4:	f002 fb54 	bl	8005750 <__errno>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2216      	movs	r2, #22
 80030ac:	601a      	str	r2, [r3, #0]
  return -1;
 80030ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3708      	adds	r7, #8
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}

080030ba <_exit>:

void _exit (int status)
{
 80030ba:	b580      	push	{r7, lr}
 80030bc:	b082      	sub	sp, #8
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80030c2:	f04f 31ff 	mov.w	r1, #4294967295
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f7ff ffe7 	bl	800309a <_kill>
  while (1) {}    /* Make sure we hang here */
 80030cc:	bf00      	nop
 80030ce:	e7fd      	b.n	80030cc <_exit+0x12>

080030d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b086      	sub	sp, #24
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	60b9      	str	r1, [r7, #8]
 80030da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030dc:	2300      	movs	r3, #0
 80030de:	617b      	str	r3, [r7, #20]
 80030e0:	e00a      	b.n	80030f8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80030e2:	f3af 8000 	nop.w
 80030e6:	4601      	mov	r1, r0
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	1c5a      	adds	r2, r3, #1
 80030ec:	60ba      	str	r2, [r7, #8]
 80030ee:	b2ca      	uxtb	r2, r1
 80030f0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	3301      	adds	r3, #1
 80030f6:	617b      	str	r3, [r7, #20]
 80030f8:	697a      	ldr	r2, [r7, #20]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	dbf0      	blt.n	80030e2 <_read+0x12>
  }

  return len;
 8003100:	687b      	ldr	r3, [r7, #4]
}
 8003102:	4618      	mov	r0, r3
 8003104:	3718      	adds	r7, #24
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800310a:	b580      	push	{r7, lr}
 800310c:	b086      	sub	sp, #24
 800310e:	af00      	add	r7, sp, #0
 8003110:	60f8      	str	r0, [r7, #12]
 8003112:	60b9      	str	r1, [r7, #8]
 8003114:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003116:	2300      	movs	r3, #0
 8003118:	617b      	str	r3, [r7, #20]
 800311a:	e009      	b.n	8003130 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	1c5a      	adds	r2, r3, #1
 8003120:	60ba      	str	r2, [r7, #8]
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	4618      	mov	r0, r3
 8003126:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	3301      	adds	r3, #1
 800312e:	617b      	str	r3, [r7, #20]
 8003130:	697a      	ldr	r2, [r7, #20]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	429a      	cmp	r2, r3
 8003136:	dbf1      	blt.n	800311c <_write+0x12>
  }
  return len;
 8003138:	687b      	ldr	r3, [r7, #4]
}
 800313a:	4618      	mov	r0, r3
 800313c:	3718      	adds	r7, #24
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}

08003142 <_close>:

int _close(int file)
{
 8003142:	b480      	push	{r7}
 8003144:	b083      	sub	sp, #12
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800314a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800314e:	4618      	mov	r0, r3
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	bc80      	pop	{r7}
 8003156:	4770      	bx	lr

08003158 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003168:	605a      	str	r2, [r3, #4]
  return 0;
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	bc80      	pop	{r7}
 8003174:	4770      	bx	lr

08003176 <_isatty>:

int _isatty(int file)
{
 8003176:	b480      	push	{r7}
 8003178:	b083      	sub	sp, #12
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800317e:	2301      	movs	r3, #1
}
 8003180:	4618      	mov	r0, r3
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	bc80      	pop	{r7}
 8003188:	4770      	bx	lr

0800318a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800318a:	b480      	push	{r7}
 800318c:	b085      	sub	sp, #20
 800318e:	af00      	add	r7, sp, #0
 8003190:	60f8      	str	r0, [r7, #12]
 8003192:	60b9      	str	r1, [r7, #8]
 8003194:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003196:	2300      	movs	r3, #0
}
 8003198:	4618      	mov	r0, r3
 800319a:	3714      	adds	r7, #20
 800319c:	46bd      	mov	sp, r7
 800319e:	bc80      	pop	{r7}
 80031a0:	4770      	bx	lr
	...

080031a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b086      	sub	sp, #24
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80031ac:	4a14      	ldr	r2, [pc, #80]	@ (8003200 <_sbrk+0x5c>)
 80031ae:	4b15      	ldr	r3, [pc, #84]	@ (8003204 <_sbrk+0x60>)
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80031b8:	4b13      	ldr	r3, [pc, #76]	@ (8003208 <_sbrk+0x64>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d102      	bne.n	80031c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80031c0:	4b11      	ldr	r3, [pc, #68]	@ (8003208 <_sbrk+0x64>)
 80031c2:	4a12      	ldr	r2, [pc, #72]	@ (800320c <_sbrk+0x68>)
 80031c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80031c6:	4b10      	ldr	r3, [pc, #64]	@ (8003208 <_sbrk+0x64>)
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4413      	add	r3, r2
 80031ce:	693a      	ldr	r2, [r7, #16]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d207      	bcs.n	80031e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80031d4:	f002 fabc 	bl	8005750 <__errno>
 80031d8:	4603      	mov	r3, r0
 80031da:	220c      	movs	r2, #12
 80031dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80031de:	f04f 33ff 	mov.w	r3, #4294967295
 80031e2:	e009      	b.n	80031f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80031e4:	4b08      	ldr	r3, [pc, #32]	@ (8003208 <_sbrk+0x64>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80031ea:	4b07      	ldr	r3, [pc, #28]	@ (8003208 <_sbrk+0x64>)
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4413      	add	r3, r2
 80031f2:	4a05      	ldr	r2, [pc, #20]	@ (8003208 <_sbrk+0x64>)
 80031f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80031f6:	68fb      	ldr	r3, [r7, #12]
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3718      	adds	r7, #24
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	20005000 	.word	0x20005000
 8003204:	00000400 	.word	0x00000400
 8003208:	20000468 	.word	0x20000468
 800320c:	200007d0 	.word	0x200007d0

08003210 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003210:	b480      	push	{r7}
 8003212:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003214:	bf00      	nop
 8003216:	46bd      	mov	sp, r7
 8003218:	bc80      	pop	{r7}
 800321a:	4770      	bx	lr

0800321c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800321c:	f7ff fff8 	bl	8003210 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003220:	480b      	ldr	r0, [pc, #44]	@ (8003250 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003222:	490c      	ldr	r1, [pc, #48]	@ (8003254 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003224:	4a0c      	ldr	r2, [pc, #48]	@ (8003258 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003226:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003228:	e002      	b.n	8003230 <LoopCopyDataInit>

0800322a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800322a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800322c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800322e:	3304      	adds	r3, #4

08003230 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003230:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003232:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003234:	d3f9      	bcc.n	800322a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003236:	4a09      	ldr	r2, [pc, #36]	@ (800325c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003238:	4c09      	ldr	r4, [pc, #36]	@ (8003260 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800323a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800323c:	e001      	b.n	8003242 <LoopFillZerobss>

0800323e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800323e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003240:	3204      	adds	r2, #4

08003242 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003242:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003244:	d3fb      	bcc.n	800323e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003246:	f002 fa89 	bl	800575c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800324a:	f7ff fc19 	bl	8002a80 <main>
  bx lr
 800324e:	4770      	bx	lr
  ldr r0, =_sdata
 8003250:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003254:	20000244 	.word	0x20000244
  ldr r2, =_sidata
 8003258:	08008468 	.word	0x08008468
  ldr r2, =_sbss
 800325c:	20000244 	.word	0x20000244
  ldr r4, =_ebss
 8003260:	200007d0 	.word	0x200007d0

08003264 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003264:	e7fe      	b.n	8003264 <ADC1_2_IRQHandler>
	...

08003268 <ADS1115_GetData>:
 * @return The data reading from the specified channel. If a timeout occurs,
 * returns 0.
 */
uint16_t
ADS1115_GetData (ads1115_channel_t channel)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	4603      	mov	r3, r0
 8003270:	71fb      	strb	r3, [r7, #7]
  i2c_1.buffer[0] = 0x01;
 8003272:	4b3b      	ldr	r3, [pc, #236]	@ (8003360 <ADS1115_GetData+0xf8>)
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	701a      	strb	r2, [r3, #0]
  switch (channel)
 800327a:	79fb      	ldrb	r3, [r7, #7]
 800327c:	2b03      	cmp	r3, #3
 800327e:	d823      	bhi.n	80032c8 <ADS1115_GetData+0x60>
 8003280:	a201      	add	r2, pc, #4	@ (adr r2, 8003288 <ADS1115_GetData+0x20>)
 8003282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003286:	bf00      	nop
 8003288:	08003299 	.word	0x08003299
 800328c:	080032a5 	.word	0x080032a5
 8003290:	080032b1 	.word	0x080032b1
 8003294:	080032bd 	.word	0x080032bd
  {
    case DEV_ADS1115_CHANNEL_0:
      i2c_1.buffer[1] = 0xC1;
 8003298:	4b31      	ldr	r3, [pc, #196]	@ (8003360 <ADS1115_GetData+0xf8>)
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	3301      	adds	r3, #1
 800329e:	22c1      	movs	r2, #193	@ 0xc1
 80032a0:	701a      	strb	r2, [r3, #0]
      break;
 80032a2:	e011      	b.n	80032c8 <ADS1115_GetData+0x60>
    case DEV_ADS1115_CHANNEL_1:
      i2c_1.buffer[1] = 0xD1;
 80032a4:	4b2e      	ldr	r3, [pc, #184]	@ (8003360 <ADS1115_GetData+0xf8>)
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	3301      	adds	r3, #1
 80032aa:	22d1      	movs	r2, #209	@ 0xd1
 80032ac:	701a      	strb	r2, [r3, #0]
      break;
 80032ae:	e00b      	b.n	80032c8 <ADS1115_GetData+0x60>
    case DEV_ADS1115_CHANNEL_2:
      i2c_1.buffer[1] = 0xE1;
 80032b0:	4b2b      	ldr	r3, [pc, #172]	@ (8003360 <ADS1115_GetData+0xf8>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	3301      	adds	r3, #1
 80032b6:	22e1      	movs	r2, #225	@ 0xe1
 80032b8:	701a      	strb	r2, [r3, #0]
      break;
 80032ba:	e005      	b.n	80032c8 <ADS1115_GetData+0x60>
    case DEV_ADS1115_CHANNEL_3:
      i2c_1.buffer[1] = 0xF1;
 80032bc:	4b28      	ldr	r3, [pc, #160]	@ (8003360 <ADS1115_GetData+0xf8>)
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	3301      	adds	r3, #1
 80032c2:	22f1      	movs	r2, #241	@ 0xf1
 80032c4:	701a      	strb	r2, [r3, #0]
      break;
 80032c6:	bf00      	nop
  }

  i2c_1.buffer[0]   = 0x83;
 80032c8:	4b25      	ldr	r3, [pc, #148]	@ (8003360 <ADS1115_GetData+0xf8>)
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	2283      	movs	r2, #131	@ 0x83
 80032ce:	701a      	strb	r2, [r3, #0]
  i2c_1.size_buffer = 3;
 80032d0:	4b23      	ldr	r3, [pc, #140]	@ (8003360 <ADS1115_GetData+0xf8>)
 80032d2:	2203      	movs	r2, #3
 80032d4:	609a      	str	r2, [r3, #8]
  BSP_I2C_MasterTransmit7B((i2c_data_t *)&i2c_1);
 80032d6:	4822      	ldr	r0, [pc, #136]	@ (8003360 <ADS1115_GetData+0xf8>)
 80032d8:	f7fe fb06 	bl	80018e8 <BSP_I2C_MasterTransmit7B>
  if (i2c_1.status == I2C_TIMEOUT)
 80032dc:	4b20      	ldr	r3, [pc, #128]	@ (8003360 <ADS1115_GetData+0xf8>)
 80032de:	7b1b      	ldrb	r3, [r3, #12]
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d101      	bne.n	80032ea <ADS1115_GetData+0x82>
  {
    return 0;
 80032e6:	2300      	movs	r3, #0
 80032e8:	e035      	b.n	8003356 <ADS1115_GetData+0xee>
  }

  i2c_1.buffer[0]   = 0x00;
 80032ea:	4b1d      	ldr	r3, [pc, #116]	@ (8003360 <ADS1115_GetData+0xf8>)
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	701a      	strb	r2, [r3, #0]
  i2c_1.size_buffer = 1;
 80032f2:	4b1b      	ldr	r3, [pc, #108]	@ (8003360 <ADS1115_GetData+0xf8>)
 80032f4:	2201      	movs	r2, #1
 80032f6:	609a      	str	r2, [r3, #8]
  BSP_I2C_MasterTransmit7B((i2c_data_t *)&i2c_1);
 80032f8:	4819      	ldr	r0, [pc, #100]	@ (8003360 <ADS1115_GetData+0xf8>)
 80032fa:	f7fe faf5 	bl	80018e8 <BSP_I2C_MasterTransmit7B>
  if (i2c_1.status == I2C_TIMEOUT)
 80032fe:	4b18      	ldr	r3, [pc, #96]	@ (8003360 <ADS1115_GetData+0xf8>)
 8003300:	7b1b      	ldrb	r3, [r3, #12]
 8003302:	b2db      	uxtb	r3, r3
 8003304:	2b00      	cmp	r3, #0
 8003306:	d101      	bne.n	800330c <ADS1115_GetData+0xa4>
  {
    return 0;
 8003308:	2300      	movs	r3, #0
 800330a:	e024      	b.n	8003356 <ADS1115_GetData+0xee>
  }

  LL_mDelay(20);
 800330c:	2014      	movs	r0, #20
 800330e:	f000 ff97 	bl	8004240 <LL_mDelay>
  i2c_1.size_buffer = 2;
 8003312:	4b13      	ldr	r3, [pc, #76]	@ (8003360 <ADS1115_GetData+0xf8>)
 8003314:	2202      	movs	r2, #2
 8003316:	609a      	str	r2, [r3, #8]
  BSP_I2C_MasterReceive7B((i2c_data_t *)&i2c_1);
 8003318:	4811      	ldr	r0, [pc, #68]	@ (8003360 <ADS1115_GetData+0xf8>)
 800331a:	f7fe fb2f 	bl	800197c <BSP_I2C_MasterReceive7B>

  data[channel].data_reading = (i2c_1.buffer[0] << 8 | i2c_1.buffer[1]);
 800331e:	4b10      	ldr	r3, [pc, #64]	@ (8003360 <ADS1115_GetData+0xf8>)
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	b2db      	uxtb	r3, r3
 8003326:	021b      	lsls	r3, r3, #8
 8003328:	b21a      	sxth	r2, r3
 800332a:	4b0d      	ldr	r3, [pc, #52]	@ (8003360 <ADS1115_GetData+0xf8>)
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	3301      	adds	r3, #1
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	b2db      	uxtb	r3, r3
 8003334:	b21b      	sxth	r3, r3
 8003336:	4313      	orrs	r3, r2
 8003338:	b21a      	sxth	r2, r3
 800333a:	79fb      	ldrb	r3, [r7, #7]
 800333c:	b291      	uxth	r1, r2
 800333e:	4a09      	ldr	r2, [pc, #36]	@ (8003364 <ADS1115_GetData+0xfc>)
 8003340:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
  if (data[channel].data_reading < 0)
 8003344:	79fb      	ldrb	r3, [r7, #7]
 8003346:	4a07      	ldr	r2, [pc, #28]	@ (8003364 <ADS1115_GetData+0xfc>)
 8003348:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
  {
    data[channel].data_reading = 0;
  }

  return data[channel].data_reading;
 800334c:	79fb      	ldrb	r3, [r7, #7]
 800334e:	4a05      	ldr	r2, [pc, #20]	@ (8003364 <ADS1115_GetData+0xfc>)
 8003350:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 8003354:	b29b      	uxth	r3, r3
}
 8003356:	4618      	mov	r0, r3
 8003358:	3708      	adds	r7, #8
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	20000068 	.word	0x20000068
 8003364:	2000046c 	.word	0x2000046c

08003368 <ADS1115_Voltage>:

float
ADS1115_Voltage (ads1115_channel_t channel)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	4603      	mov	r3, r0
 8003370:	71fb      	strb	r3, [r7, #7]
  /**< Read raw Data */
  ADS1115_GetData(channel);
 8003372:	79fb      	ldrb	r3, [r7, #7]
 8003374:	4618      	mov	r0, r3
 8003376:	f7ff ff77 	bl	8003268 <ADS1115_GetData>

  /**< Calibrate ADC */

  /**< Convert voltage */
  data[0].voltage = (float)(data[0].data_reading * ADS1115_VREF) / ADS1115_STEP;
 800337a:	4b0d      	ldr	r3, [pc, #52]	@ (80033b0 <ADS1115_Voltage+0x48>)
 800337c:	881b      	ldrh	r3, [r3, #0]
 800337e:	b29b      	uxth	r3, r3
 8003380:	031b      	lsls	r3, r3, #12
 8003382:	4618      	mov	r0, r3
 8003384:	f7fd fc94 	bl	8000cb0 <__aeabi_i2f>
 8003388:	4603      	mov	r3, r0
 800338a:	f04f 418f 	mov.w	r1, #1199570944	@ 0x47800000
 800338e:	4618      	mov	r0, r3
 8003390:	f7fd fd96 	bl	8000ec0 <__aeabi_fdiv>
 8003394:	4603      	mov	r3, r0
 8003396:	461a      	mov	r2, r3
 8003398:	4b05      	ldr	r3, [pc, #20]	@ (80033b0 <ADS1115_Voltage+0x48>)
 800339a:	605a      	str	r2, [r3, #4]

  return data[channel].voltage;
 800339c:	79fb      	ldrb	r3, [r7, #7]
 800339e:	4a04      	ldr	r2, [pc, #16]	@ (80033b0 <ADS1115_Voltage+0x48>)
 80033a0:	00db      	lsls	r3, r3, #3
 80033a2:	4413      	add	r3, r2
 80033a4:	685b      	ldr	r3, [r3, #4]
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3708      	adds	r7, #8
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	2000046c 	.word	0x2000046c

080033b4 <LL_GPIO_SetPinMode>:
{
 80033b4:	b490      	push	{r4, r7}
 80033b6:	b088      	sub	sp, #32
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	461a      	mov	r2, r3
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	0e1b      	lsrs	r3, r3, #24
 80033c8:	4413      	add	r3, r2
 80033ca:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 80033cc:	6822      	ldr	r2, [r4, #0]
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	fa93 f3a3 	rbit	r3, r3
 80033d8:	613b      	str	r3, [r7, #16]
  return result;
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	fab3 f383 	clz	r3, r3
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	210f      	movs	r1, #15
 80033e6:	fa01 f303 	lsl.w	r3, r1, r3
 80033ea:	43db      	mvns	r3, r3
 80033ec:	401a      	ands	r2, r3
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	fa93 f3a3 	rbit	r3, r3
 80033f8:	61bb      	str	r3, [r7, #24]
  return result;
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	fab3 f383 	clz	r3, r3
 8003400:	b2db      	uxtb	r3, r3
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	6879      	ldr	r1, [r7, #4]
 8003406:	fa01 f303 	lsl.w	r3, r1, r3
 800340a:	4313      	orrs	r3, r2
 800340c:	6023      	str	r3, [r4, #0]
}
 800340e:	bf00      	nop
 8003410:	3720      	adds	r7, #32
 8003412:	46bd      	mov	sp, r7
 8003414:	bc90      	pop	{r4, r7}
 8003416:	4770      	bx	lr

08003418 <LL_GPIO_SetPinSpeed>:
{
 8003418:	b490      	push	{r4, r7}
 800341a:	b088      	sub	sp, #32
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	461a      	mov	r2, r3
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	0e1b      	lsrs	r3, r3, #24
 800342c:	4413      	add	r3, r2
 800342e:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8003430:	6822      	ldr	r2, [r4, #0]
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	fa93 f3a3 	rbit	r3, r3
 800343c:	613b      	str	r3, [r7, #16]
  return result;
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	fab3 f383 	clz	r3, r3
 8003444:	b2db      	uxtb	r3, r3
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	2103      	movs	r1, #3
 800344a:	fa01 f303 	lsl.w	r3, r1, r3
 800344e:	43db      	mvns	r3, r3
 8003450:	401a      	ands	r2, r3
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	fa93 f3a3 	rbit	r3, r3
 800345c:	61bb      	str	r3, [r7, #24]
  return result;
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	fab3 f383 	clz	r3, r3
 8003464:	b2db      	uxtb	r3, r3
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	6879      	ldr	r1, [r7, #4]
 800346a:	fa01 f303 	lsl.w	r3, r1, r3
 800346e:	4313      	orrs	r3, r2
 8003470:	6023      	str	r3, [r4, #0]
}
 8003472:	bf00      	nop
 8003474:	3720      	adds	r7, #32
 8003476:	46bd      	mov	sp, r7
 8003478:	bc90      	pop	{r4, r7}
 800347a:	4770      	bx	lr

0800347c <LL_GPIO_SetPinOutputType>:
{
 800347c:	b490      	push	{r4, r7}
 800347e:	b088      	sub	sp, #32
 8003480:	af00      	add	r7, sp, #0
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	60b9      	str	r1, [r7, #8]
 8003486:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	461a      	mov	r2, r3
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	0e1b      	lsrs	r3, r3, #24
 8003490:	4413      	add	r3, r2
 8003492:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8003494:	6822      	ldr	r2, [r4, #0]
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	fa93 f3a3 	rbit	r3, r3
 80034a0:	613b      	str	r3, [r7, #16]
  return result;
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	fab3 f383 	clz	r3, r3
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	2104      	movs	r1, #4
 80034ae:	fa01 f303 	lsl.w	r3, r1, r3
 80034b2:	43db      	mvns	r3, r3
 80034b4:	401a      	ands	r2, r3
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	fa93 f3a3 	rbit	r3, r3
 80034c0:	61bb      	str	r3, [r7, #24]
  return result;
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	fab3 f383 	clz	r3, r3
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	6879      	ldr	r1, [r7, #4]
 80034ce:	fa01 f303 	lsl.w	r3, r1, r3
 80034d2:	4313      	orrs	r3, r2
 80034d4:	6023      	str	r3, [r4, #0]
}
 80034d6:	bf00      	nop
 80034d8:	3720      	adds	r7, #32
 80034da:	46bd      	mov	sp, r7
 80034dc:	bc90      	pop	{r4, r7}
 80034de:	4770      	bx	lr

080034e0 <LL_GPIO_SetPinPull>:
{
 80034e0:	b480      	push	{r7}
 80034e2:	b087      	sub	sp, #28
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	68da      	ldr	r2, [r3, #12]
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	0a1b      	lsrs	r3, r3, #8
 80034f4:	43db      	mvns	r3, r3
 80034f6:	401a      	ands	r2, r3
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	0a1b      	lsrs	r3, r3, #8
 80034fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	fa93 f3a3 	rbit	r3, r3
 8003504:	613b      	str	r3, [r7, #16]
  return result;
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	fab3 f383 	clz	r3, r3
 800350c:	b2db      	uxtb	r3, r3
 800350e:	4619      	mov	r1, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	408b      	lsls	r3, r1
 8003514:	431a      	orrs	r2, r3
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	60da      	str	r2, [r3, #12]
}
 800351a:	bf00      	nop
 800351c:	371c      	adds	r7, #28
 800351e:	46bd      	mov	sp, r7
 8003520:	bc80      	pop	{r7}
 8003522:	4770      	bx	lr

08003524 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b088      	sub	sp, #32
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	021b      	lsls	r3, r3, #8
 8003534:	0c1b      	lsrs	r3, r3, #16
 8003536:	617b      	str	r3, [r7, #20]
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	fa93 f3a3 	rbit	r3, r3
 8003542:	60fb      	str	r3, [r7, #12]
  return result;
 8003544:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8003546:	fab3 f383 	clz	r3, r3
 800354a:	b2db      	uxtb	r3, r3
 800354c:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 800354e:	e044      	b.n	80035da <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8003550:	2201      	movs	r2, #1
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	409a      	lsls	r2, r3
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	4013      	ands	r3, r2
 800355a:	2b00      	cmp	r3, #0
 800355c:	d03a      	beq.n	80035d4 <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	2b07      	cmp	r3, #7
 8003562:	d806      	bhi.n	8003572 <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 8003564:	f240 1201 	movw	r2, #257	@ 0x101
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	fa02 f303 	lsl.w	r3, r2, r3
 800356e:	61bb      	str	r3, [r7, #24]
 8003570:	e008      	b.n	8003584 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	3b08      	subs	r3, #8
 8003576:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 800357a:	fa02 f303 	lsl.w	r3, r2, r3
 800357e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003582:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	2b08      	cmp	r3, #8
 800358a:	d106      	bne.n	800359a <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	461a      	mov	r2, r3
 8003592:	69b9      	ldr	r1, [r7, #24]
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f7ff ffa3 	bl	80034e0 <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	461a      	mov	r2, r3
 80035a0:	69b9      	ldr	r1, [r7, #24]
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f7ff ff06 	bl	80033b4 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d003      	beq.n	80035b8 <LL_GPIO_Init+0x94>
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	2b09      	cmp	r3, #9
 80035b6:	d10d      	bne.n	80035d4 <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	461a      	mov	r2, r3
 80035be:	69b9      	ldr	r1, [r7, #24]
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f7ff ff29 	bl	8003418 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	461a      	mov	r2, r3
 80035cc:	69b9      	ldr	r1, [r7, #24]
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f7ff ff54 	bl	800347c <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	3301      	adds	r3, #1
 80035d8:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 80035da:	697a      	ldr	r2, [r7, #20]
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	fa22 f303 	lsr.w	r3, r2, r3
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d1b4      	bne.n	8003550 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3720      	adds	r7, #32
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <LL_I2C_Enable>:
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f043 0201 	orr.w	r2, r3, #1
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	601a      	str	r2, [r3, #0]
}
 8003604:	bf00      	nop
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	bc80      	pop	{r7}
 800360c:	4770      	bx	lr

0800360e <LL_I2C_Disable>:
{
 800360e:	b480      	push	{r7}
 8003610:	b083      	sub	sp, #12
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f023 0201 	bic.w	r2, r3, #1
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	601a      	str	r2, [r3, #0]
}
 8003622:	bf00      	nop
 8003624:	370c      	adds	r7, #12
 8003626:	46bd      	mov	sp, r7
 8003628:	bc80      	pop	{r7}
 800362a:	4770      	bx	lr

0800362c <LL_I2C_SetOwnAddress1>:
{
 800362c:	b480      	push	{r7}
 800362e:	b085      	sub	sp, #20
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003640:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003644:	68b9      	ldr	r1, [r7, #8]
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	430a      	orrs	r2, r1
 800364a:	431a      	orrs	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	609a      	str	r2, [r3, #8]
}
 8003650:	bf00      	nop
 8003652:	3714      	adds	r7, #20
 8003654:	46bd      	mov	sp, r7
 8003656:	bc80      	pop	{r7}
 8003658:	4770      	bx	lr
	...

0800365c <LL_I2C_ConfigSpeed>:
{
 800365c:	b480      	push	{r7}
 800365e:	b087      	sub	sp, #28
 8003660:	af00      	add	r7, sp, #0
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	607a      	str	r2, [r7, #4]
 8003668:	603b      	str	r3, [r7, #0]
  uint32_t freqrange = 0x0U;
 800366a:	2300      	movs	r3, #0
 800366c:	613b      	str	r3, [r7, #16]
  uint32_t clockconfig = 0x0U;
 800366e:	2300      	movs	r3, #0
 8003670:	617b      	str	r3, [r7, #20]
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	4a41      	ldr	r2, [pc, #260]	@ (800377c <LL_I2C_ConfigSpeed+0x120>)
 8003676:	fba2 2303 	umull	r2, r3, r2, r3
 800367a:	0c9b      	lsrs	r3, r3, #18
 800367c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	431a      	orrs	r2, r3
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	605a      	str	r2, [r3, #4]
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4939      	ldr	r1, [pc, #228]	@ (8003780 <LL_I2C_ConfigSpeed+0x124>)
 800369a:	428b      	cmp	r3, r1
 800369c:	d802      	bhi.n	80036a4 <LL_I2C_ConfigSpeed+0x48>
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	3301      	adds	r3, #1
 80036a2:	e009      	b.n	80036b8 <LL_I2C_ConfigSpeed+0x5c>
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80036aa:	fb01 f303 	mul.w	r3, r1, r3
 80036ae:	4935      	ldr	r1, [pc, #212]	@ (8003784 <LL_I2C_ConfigSpeed+0x128>)
 80036b0:	fba1 1303 	umull	r1, r3, r1, r3
 80036b4:	099b      	lsrs	r3, r3, #6
 80036b6:	3301      	adds	r3, #1
 80036b8:	431a      	orrs	r2, r3
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	621a      	str	r2, [r3, #32]
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a2f      	ldr	r2, [pc, #188]	@ (8003780 <LL_I2C_ConfigSpeed+0x124>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d939      	bls.n	800373a <LL_I2C_ConfigSpeed+0xde>
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d117      	bne.n	80036fc <LL_I2C_ConfigSpeed+0xa0>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	4613      	mov	r3, r2
 80036d0:	005b      	lsls	r3, r3, #1
 80036d2:	4413      	add	r3, r2
 80036d4:	68ba      	ldr	r2, [r7, #8]
 80036d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80036da:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d009      	beq.n	80036f6 <LL_I2C_ConfigSpeed+0x9a>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	4613      	mov	r3, r2
 80036e6:	005b      	lsls	r3, r3, #1
 80036e8:	4413      	add	r3, r2
 80036ea:	68ba      	ldr	r2, [r7, #8]
 80036ec:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80036f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80036f4:	e01d      	b.n	8003732 <LL_I2C_ConfigSpeed+0xd6>
 80036f6:	f248 0301 	movw	r3, #32769	@ 0x8001
 80036fa:	e01a      	b.n	8003732 <LL_I2C_ConfigSpeed+0xd6>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	4613      	mov	r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	4413      	add	r3, r2
 8003704:	009a      	lsls	r2, r3, #2
 8003706:	4413      	add	r3, r2
 8003708:	68ba      	ldr	r2, [r7, #8]
 800370a:	fbb2 f3f3 	udiv	r3, r2, r3
 800370e:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00b      	beq.n	800372e <LL_I2C_ConfigSpeed+0xd2>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	4613      	mov	r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	4413      	add	r3, r2
 800371e:	009a      	lsls	r2, r3, #2
 8003720:	4413      	add	r3, r2
 8003722:	68ba      	ldr	r2, [r7, #8]
 8003724:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003728:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800372c:	e001      	b.n	8003732 <LL_I2C_ConfigSpeed+0xd6>
 800372e:	f248 0301 	movw	r3, #32769	@ 0x8001
 8003732:	683a      	ldr	r2, [r7, #0]
 8003734:	4313      	orrs	r3, r2
 8003736:	617b      	str	r3, [r7, #20]
 8003738:	e011      	b.n	800375e <LL_I2C_ConfigSpeed+0x102>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	005b      	lsls	r3, r3, #1
 800373e:	68ba      	ldr	r2, [r7, #8]
 8003740:	fbb2 f2f3 	udiv	r2, r2, r3
 8003744:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003748:	4013      	ands	r3, r2
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 800374a:	2b00      	cmp	r3, #0
 800374c:	d005      	beq.n	800375a <LL_I2C_ConfigSpeed+0xfe>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8003752:	68ba      	ldr	r2, [r7, #8]
 8003754:	fbb2 f3f3 	udiv	r3, r2, r3
 8003758:	e000      	b.n	800375c <LL_I2C_ConfigSpeed+0x100>
 800375a:	2304      	movs	r3, #4
 800375c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	69db      	ldr	r3, [r3, #28]
 8003762:	f423 434f 	bic.w	r3, r3, #52992	@ 0xcf00
 8003766:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800376a:	697a      	ldr	r2, [r7, #20]
 800376c:	431a      	orrs	r2, r3
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	61da      	str	r2, [r3, #28]
}
 8003772:	bf00      	nop
 8003774:	371c      	adds	r7, #28
 8003776:	46bd      	mov	sp, r7
 8003778:	bc80      	pop	{r7}
 800377a:	4770      	bx	lr
 800377c:	431bde83 	.word	0x431bde83
 8003780:	000186a0 	.word	0x000186a0
 8003784:	10624dd3 	.word	0x10624dd3

08003788 <LL_I2C_SetMode>:
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f023 021a 	bic.w	r2, r3, #26
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	431a      	orrs	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	601a      	str	r2, [r3, #0]
}
 80037a2:	bf00      	nop
 80037a4:	370c      	adds	r7, #12
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bc80      	pop	{r7}
 80037aa:	4770      	bx	lr

080037ac <LL_I2C_AcknowledgeNextData>:
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	431a      	orrs	r2, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	601a      	str	r2, [r3, #0]
}
 80037c6:	bf00      	nop
 80037c8:	370c      	adds	r7, #12
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bc80      	pop	{r7}
 80037ce:	4770      	bx	lr

080037d0 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b086      	sub	sp, #24
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f7ff ff17 	bl	800360e <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80037e0:	f107 0308 	add.w	r3, r7, #8
 80037e4:	4618      	mov	r0, r3
 80037e6:	f000 f87b 	bl	80038e0 <LL_RCC_GetSystemClocksFreq>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 80037ea:	6939      	ldr	r1, [r7, #16]
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	685a      	ldr	r2, [r3, #4]
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f7ff ff31 	bl	800365c <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	68d9      	ldr	r1, [r3, #12]
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	695b      	ldr	r3, [r3, #20]
 8003802:	461a      	mov	r2, r3
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f7ff ff11 	bl	800362c <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4619      	mov	r1, r3
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f7ff ffb9 	bl	8003788 <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f7ff feea 	bl	80035f0 <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	691b      	ldr	r3, [r3, #16]
 8003820:	4619      	mov	r1, r3
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f7ff ffc2 	bl	80037ac <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3718      	adds	r7, #24
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
	...

08003834 <LL_RCC_GetSysClkSource>:
{
 8003834:	b480      	push	{r7}
 8003836:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003838:	4b03      	ldr	r3, [pc, #12]	@ (8003848 <LL_RCC_GetSysClkSource+0x14>)
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f003 030c 	and.w	r3, r3, #12
}
 8003840:	4618      	mov	r0, r3
 8003842:	46bd      	mov	sp, r7
 8003844:	bc80      	pop	{r7}
 8003846:	4770      	bx	lr
 8003848:	40021000 	.word	0x40021000

0800384c <LL_RCC_GetAHBPrescaler>:
{
 800384c:	b480      	push	{r7}
 800384e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003850:	4b03      	ldr	r3, [pc, #12]	@ (8003860 <LL_RCC_GetAHBPrescaler+0x14>)
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8003858:	4618      	mov	r0, r3
 800385a:	46bd      	mov	sp, r7
 800385c:	bc80      	pop	{r7}
 800385e:	4770      	bx	lr
 8003860:	40021000 	.word	0x40021000

08003864 <LL_RCC_GetAPB1Prescaler>:
{
 8003864:	b480      	push	{r7}
 8003866:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003868:	4b03      	ldr	r3, [pc, #12]	@ (8003878 <LL_RCC_GetAPB1Prescaler+0x14>)
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8003870:	4618      	mov	r0, r3
 8003872:	46bd      	mov	sp, r7
 8003874:	bc80      	pop	{r7}
 8003876:	4770      	bx	lr
 8003878:	40021000 	.word	0x40021000

0800387c <LL_RCC_GetAPB2Prescaler>:
{
 800387c:	b480      	push	{r7}
 800387e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003880:	4b03      	ldr	r3, [pc, #12]	@ (8003890 <LL_RCC_GetAPB2Prescaler+0x14>)
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8003888:	4618      	mov	r0, r3
 800388a:	46bd      	mov	sp, r7
 800388c:	bc80      	pop	{r7}
 800388e:	4770      	bx	lr
 8003890:	40021000 	.word	0x40021000

08003894 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003894:	b480      	push	{r7}
 8003896:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8003898:	4b03      	ldr	r3, [pc, #12]	@ (80038a8 <LL_RCC_PLL_GetMainSource+0x14>)
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bc80      	pop	{r7}
 80038a6:	4770      	bx	lr
 80038a8:	40021000 	.word	0x40021000

080038ac <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 80038ac:	b480      	push	{r7}
 80038ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 80038b0:	4b03      	ldr	r3, [pc, #12]	@ (80038c0 <LL_RCC_PLL_GetMultiplicator+0x14>)
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bc80      	pop	{r7}
 80038be:	4770      	bx	lr
 80038c0:	40021000 	.word	0x40021000

080038c4 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 80038c4:	b480      	push	{r7}
 80038c6:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 80038c8:	4b04      	ldr	r3, [pc, #16]	@ (80038dc <LL_RCC_PLL_GetPrediv+0x18>)
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	0c5b      	lsrs	r3, r3, #17
 80038ce:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bc80      	pop	{r7}
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	40021000 	.word	0x40021000

080038e0 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80038e8:	f000 f820 	bl	800392c <RCC_GetSystemClockFreq>
 80038ec:	4602      	mov	r2, r0
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4618      	mov	r0, r3
 80038f8:	f000 f83e 	bl	8003978 <RCC_GetHCLKClockFreq>
 80038fc:	4602      	mov	r2, r0
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	4618      	mov	r0, r3
 8003908:	f000 f84c 	bl	80039a4 <RCC_GetPCLK1ClockFreq>
 800390c:	4602      	mov	r2, r0
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	4618      	mov	r0, r3
 8003918:	f000 f858 	bl	80039cc <RCC_GetPCLK2ClockFreq>
 800391c:	4602      	mov	r2, r0
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	60da      	str	r2, [r3, #12]
}
 8003922:	bf00      	nop
 8003924:	3708      	adds	r7, #8
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
	...

0800392c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8003932:	2300      	movs	r3, #0
 8003934:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8003936:	f7ff ff7d 	bl	8003834 <LL_RCC_GetSysClkSource>
 800393a:	4603      	mov	r3, r0
 800393c:	2b08      	cmp	r3, #8
 800393e:	d00c      	beq.n	800395a <RCC_GetSystemClockFreq+0x2e>
 8003940:	2b08      	cmp	r3, #8
 8003942:	d80e      	bhi.n	8003962 <RCC_GetSystemClockFreq+0x36>
 8003944:	2b00      	cmp	r3, #0
 8003946:	d002      	beq.n	800394e <RCC_GetSystemClockFreq+0x22>
 8003948:	2b04      	cmp	r3, #4
 800394a:	d003      	beq.n	8003954 <RCC_GetSystemClockFreq+0x28>
 800394c:	e009      	b.n	8003962 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800394e:	4b09      	ldr	r3, [pc, #36]	@ (8003974 <RCC_GetSystemClockFreq+0x48>)
 8003950:	607b      	str	r3, [r7, #4]
      break;
 8003952:	e009      	b.n	8003968 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8003954:	4b07      	ldr	r3, [pc, #28]	@ (8003974 <RCC_GetSystemClockFreq+0x48>)
 8003956:	607b      	str	r3, [r7, #4]
      break;
 8003958:	e006      	b.n	8003968 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800395a:	f000 f84b 	bl	80039f4 <RCC_PLL_GetFreqDomain_SYS>
 800395e:	6078      	str	r0, [r7, #4]
      break;
 8003960:	e002      	b.n	8003968 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 8003962:	4b04      	ldr	r3, [pc, #16]	@ (8003974 <RCC_GetSystemClockFreq+0x48>)
 8003964:	607b      	str	r3, [r7, #4]
      break;
 8003966:	bf00      	nop
  }

  return frequency;
 8003968:	687b      	ldr	r3, [r7, #4]
}
 800396a:	4618      	mov	r0, r3
 800396c:	3708      	adds	r7, #8
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	007a1200 	.word	0x007a1200

08003978 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003980:	f7ff ff64 	bl	800384c <LL_RCC_GetAHBPrescaler>
 8003984:	4603      	mov	r3, r0
 8003986:	091b      	lsrs	r3, r3, #4
 8003988:	f003 030f 	and.w	r3, r3, #15
 800398c:	4a04      	ldr	r2, [pc, #16]	@ (80039a0 <RCC_GetHCLKClockFreq+0x28>)
 800398e:	5cd3      	ldrb	r3, [r2, r3]
 8003990:	461a      	mov	r2, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	40d3      	lsrs	r3, r2
}
 8003996:	4618      	mov	r0, r3
 8003998:	3708      	adds	r7, #8
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	08007844 	.word	0x08007844

080039a4 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80039ac:	f7ff ff5a 	bl	8003864 <LL_RCC_GetAPB1Prescaler>
 80039b0:	4603      	mov	r3, r0
 80039b2:	0a1b      	lsrs	r3, r3, #8
 80039b4:	4a04      	ldr	r2, [pc, #16]	@ (80039c8 <RCC_GetPCLK1ClockFreq+0x24>)
 80039b6:	5cd3      	ldrb	r3, [r2, r3]
 80039b8:	461a      	mov	r2, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	40d3      	lsrs	r3, r2
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3708      	adds	r7, #8
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	08007854 	.word	0x08007854

080039cc <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80039d4:	f7ff ff52 	bl	800387c <LL_RCC_GetAPB2Prescaler>
 80039d8:	4603      	mov	r3, r0
 80039da:	0adb      	lsrs	r3, r3, #11
 80039dc:	4a04      	ldr	r2, [pc, #16]	@ (80039f0 <RCC_GetPCLK2ClockFreq+0x24>)
 80039de:	5cd3      	ldrb	r3, [r2, r3]
 80039e0:	461a      	mov	r2, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	40d3      	lsrs	r3, r2
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3708      	adds	r7, #8
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	08007854 	.word	0x08007854

080039f4 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 80039fa:	2300      	movs	r3, #0
 80039fc:	607b      	str	r3, [r7, #4]
 80039fe:	2300      	movs	r3, #0
 8003a00:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8003a02:	f7ff ff47 	bl	8003894 <LL_RCC_PLL_GetMainSource>
 8003a06:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d004      	beq.n	8003a18 <RCC_PLL_GetFreqDomain_SYS+0x24>
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a14:	d003      	beq.n	8003a1e <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8003a16:	e00b      	b.n	8003a30 <RCC_PLL_GetFreqDomain_SYS+0x3c>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8003a18:	4b0d      	ldr	r3, [pc, #52]	@ (8003a50 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8003a1a:	607b      	str	r3, [r7, #4]
      break;
 8003a1c:	e00b      	b.n	8003a36 <RCC_PLL_GetFreqDomain_SYS+0x42>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 8003a1e:	f7ff ff51 	bl	80038c4 <LL_RCC_PLL_GetPrediv>
 8003a22:	4603      	mov	r3, r0
 8003a24:	3301      	adds	r3, #1
 8003a26:	4a0b      	ldr	r2, [pc, #44]	@ (8003a54 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8003a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a2c:	607b      	str	r3, [r7, #4]
      break;
 8003a2e:	e002      	b.n	8003a36 <RCC_PLL_GetFreqDomain_SYS+0x42>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 8003a30:	4b07      	ldr	r3, [pc, #28]	@ (8003a50 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8003a32:	607b      	str	r3, [r7, #4]
      break;
 8003a34:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 8003a36:	f7ff ff39 	bl	80038ac <LL_RCC_PLL_GetMultiplicator>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	0c9b      	lsrs	r3, r3, #18
 8003a3e:	3302      	adds	r3, #2
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	fb02 f303 	mul.w	r3, r2, r3
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3708      	adds	r7, #8
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	003d0900 	.word	0x003d0900
 8003a54:	007a1200 	.word	0x007a1200

08003a58 <LL_TIM_SetPrescaler>:
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	683a      	ldr	r2, [r7, #0]
 8003a66:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003a68:	bf00      	nop
 8003a6a:	370c      	adds	r7, #12
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bc80      	pop	{r7}
 8003a70:	4770      	bx	lr

08003a72 <LL_TIM_SetAutoReload>:
{
 8003a72:	b480      	push	{r7}
 8003a74:	b083      	sub	sp, #12
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
 8003a7a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	683a      	ldr	r2, [r7, #0]
 8003a80:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8003a82:	bf00      	nop
 8003a84:	370c      	adds	r7, #12
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bc80      	pop	{r7}
 8003a8a:	4770      	bx	lr

08003a8c <LL_TIM_SetRepetitionCounter>:
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	683a      	ldr	r2, [r7, #0]
 8003a9a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003a9c:	bf00      	nop
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bc80      	pop	{r7}
 8003aa4:	4770      	bx	lr

08003aa6 <LL_TIM_OC_SetCompareCH1>:
{
 8003aa6:	b480      	push	{r7}
 8003aa8:	b083      	sub	sp, #12
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
 8003aae:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	683a      	ldr	r2, [r7, #0]
 8003ab4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003ab6:	bf00      	nop
 8003ab8:	370c      	adds	r7, #12
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bc80      	pop	{r7}
 8003abe:	4770      	bx	lr

08003ac0 <LL_TIM_OC_SetCompareCH2>:
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	683a      	ldr	r2, [r7, #0]
 8003ace:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8003ad0:	bf00      	nop
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bc80      	pop	{r7}
 8003ad8:	4770      	bx	lr

08003ada <LL_TIM_OC_SetCompareCH3>:
{
 8003ada:	b480      	push	{r7}
 8003adc:	b083      	sub	sp, #12
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
 8003ae2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	683a      	ldr	r2, [r7, #0]
 8003ae8:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8003aea:	bf00      	nop
 8003aec:	370c      	adds	r7, #12
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bc80      	pop	{r7}
 8003af2:	4770      	bx	lr

08003af4 <LL_TIM_OC_SetCompareCH4>:
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	683a      	ldr	r2, [r7, #0]
 8003b02:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8003b04:	bf00      	nop
 8003b06:	370c      	adds	r7, #12
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bc80      	pop	{r7}
 8003b0c:	4770      	bx	lr

08003b0e <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8003b0e:	b480      	push	{r7}
 8003b10:	b083      	sub	sp, #12
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	f043 0201 	orr.w	r2, r3, #1
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	615a      	str	r2, [r3, #20]
}
 8003b22:	bf00      	nop
 8003b24:	370c      	adds	r7, #12
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bc80      	pop	{r7}
 8003b2a:	4770      	bx	lr

08003b2c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4a27      	ldr	r2, [pc, #156]	@ (8003bdc <LL_TIM_Init+0xb0>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d00b      	beq.n	8003b5c <LL_TIM_Init+0x30>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b4a:	d007      	beq.n	8003b5c <LL_TIM_Init+0x30>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4a24      	ldr	r2, [pc, #144]	@ (8003be0 <LL_TIM_Init+0xb4>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d003      	beq.n	8003b5c <LL_TIM_Init+0x30>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a23      	ldr	r2, [pc, #140]	@ (8003be4 <LL_TIM_Init+0xb8>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d106      	bne.n	8003b6a <LL_TIM_Init+0x3e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a1b      	ldr	r2, [pc, #108]	@ (8003bdc <LL_TIM_Init+0xb0>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d00b      	beq.n	8003b8a <LL_TIM_Init+0x5e>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b78:	d007      	beq.n	8003b8a <LL_TIM_Init+0x5e>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a18      	ldr	r2, [pc, #96]	@ (8003be0 <LL_TIM_Init+0xb4>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d003      	beq.n	8003b8a <LL_TIM_Init+0x5e>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a17      	ldr	r2, [pc, #92]	@ (8003be4 <LL_TIM_Init+0xb8>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d106      	bne.n	8003b98 <LL_TIM_Init+0x6c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	68fa      	ldr	r2, [r7, #12]
 8003b9c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f7ff ff64 	bl	8003a72 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	881b      	ldrh	r3, [r3, #0]
 8003bae:	4619      	mov	r1, r3
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f7ff ff51 	bl	8003a58 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a08      	ldr	r2, [pc, #32]	@ (8003bdc <LL_TIM_Init+0xb0>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d105      	bne.n	8003bca <LL_TIM_Init+0x9e>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f7ff ff61 	bl	8003a8c <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f7ff ff9f 	bl	8003b0e <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3710      	adds	r7, #16
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	40012c00 	.word	0x40012c00
 8003be0:	40000400 	.word	0x40000400
 8003be4:	40000800 	.word	0x40000800

08003be8 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b086      	sub	sp, #24
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bfe:	d027      	beq.n	8003c50 <LL_TIM_OC_Init+0x68>
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c06:	d82a      	bhi.n	8003c5e <LL_TIM_OC_Init+0x76>
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c0e:	d018      	beq.n	8003c42 <LL_TIM_OC_Init+0x5a>
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c16:	d822      	bhi.n	8003c5e <LL_TIM_OC_Init+0x76>
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d003      	beq.n	8003c26 <LL_TIM_OC_Init+0x3e>
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	2b10      	cmp	r3, #16
 8003c22:	d007      	beq.n	8003c34 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8003c24:	e01b      	b.n	8003c5e <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8003c26:	6879      	ldr	r1, [r7, #4]
 8003c28:	68f8      	ldr	r0, [r7, #12]
 8003c2a:	f000 f85f 	bl	8003cec <OC1Config>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	75fb      	strb	r3, [r7, #23]
      break;
 8003c32:	e015      	b.n	8003c60 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8003c34:	6879      	ldr	r1, [r7, #4]
 8003c36:	68f8      	ldr	r0, [r7, #12]
 8003c38:	f000 f8be 	bl	8003db8 <OC2Config>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	75fb      	strb	r3, [r7, #23]
      break;
 8003c40:	e00e      	b.n	8003c60 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8003c42:	6879      	ldr	r1, [r7, #4]
 8003c44:	68f8      	ldr	r0, [r7, #12]
 8003c46:	f000 f921 	bl	8003e8c <OC3Config>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	75fb      	strb	r3, [r7, #23]
      break;
 8003c4e:	e007      	b.n	8003c60 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8003c50:	6879      	ldr	r1, [r7, #4]
 8003c52:	68f8      	ldr	r0, [r7, #12]
 8003c54:	f000 f984 	bl	8003f60 <OC4Config>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	75fb      	strb	r3, [r7, #23]
      break;
 8003c5c:	e000      	b.n	8003c60 <LL_TIM_OC_Init+0x78>
      break;
 8003c5e:	bf00      	nop
  }

  return result;
 8003c60:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3718      	adds	r7, #24
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}

08003c6a <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, const LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 8003c6a:	b480      	push	{r7}
 8003c6c:	b085      	sub	sp, #20
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
 8003c72:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 8003c74:	2300      	movs	r3, #0
 8003c76:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003c7e:	683a      	ldr	r2, [r7, #0]
 8003c80:	7b12      	ldrb	r2, [r2, #12]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003cb6:	683a      	ldr	r2, [r7, #0]
 8003cb8:	89d2      	ldrh	r2, [r2, #14]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	695b      	ldr	r3, [r3, #20]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	68fa      	ldr	r2, [r7, #12]
 8003cde:	645a      	str	r2, [r3, #68]	@ 0x44

  return SUCCESS;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3714      	adds	r7, #20
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bc80      	pop	{r7}
 8003cea:	4770      	bx	lr

08003cec <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b086      	sub	sp, #24
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a1b      	ldr	r3, [r3, #32]
 8003cfa:	f023 0201 	bic.w	r2, r3, #1
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a1b      	ldr	r3, [r3, #32]
 8003d06:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	699b      	ldr	r3, [r3, #24]
 8003d12:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f023 0303 	bic.w	r3, r3, #3
 8003d1a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	f023 0202 	bic.w	r2, r3, #2
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	f023 0201 	bic.w	r2, r3, #1
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a1a      	ldr	r2, [pc, #104]	@ (8003db4 <OC1Config+0xc8>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d11e      	bne.n	8003d8c <OC1Config+0xa0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	f023 0208 	bic.w	r2, r3, #8
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	695b      	ldr	r3, [r3, #20]
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	f023 0204 	bic.w	r2, r3, #4
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	699b      	ldr	r3, [r3, #24]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	69db      	ldr	r3, [r3, #28]
 8003d86:	005b      	lsls	r3, r3, #1
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	693a      	ldr	r2, [r7, #16]
 8003d90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f7ff fe81 	bl	8003aa6 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	697a      	ldr	r2, [r7, #20]
 8003da8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3718      	adds	r7, #24
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	40012c00 	.word	0x40012c00

08003db8 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b086      	sub	sp, #24
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a1b      	ldr	r3, [r3, #32]
 8003dc6:	f023 0210 	bic.w	r2, r3, #16
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a1b      	ldr	r3, [r3, #32]
 8003dd2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	699b      	ldr	r3, [r3, #24]
 8003dde:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003de6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	021b      	lsls	r3, r3, #8
 8003df4:	4313      	orrs	r3, r2
 8003df6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	f023 0220 	bic.w	r2, r3, #32
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	011b      	lsls	r3, r3, #4
 8003e04:	4313      	orrs	r3, r2
 8003e06:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	f023 0210 	bic.w	r2, r3, #16
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	011b      	lsls	r3, r3, #4
 8003e14:	4313      	orrs	r3, r2
 8003e16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	4a1b      	ldr	r2, [pc, #108]	@ (8003e88 <OC2Config+0xd0>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d11f      	bne.n	8003e60 <OC2Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	695b      	ldr	r3, [r3, #20]
 8003e2a:	019b      	lsls	r3, r3, #6
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	019b      	lsls	r3, r3, #6
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	699b      	ldr	r3, [r3, #24]
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	69db      	ldr	r3, [r3, #28]
 8003e5a:	00db      	lsls	r3, r3, #3
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	4619      	mov	r1, r3
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f7ff fe24 	bl	8003ac0 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	697a      	ldr	r2, [r7, #20]
 8003e7c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003e7e:	2300      	movs	r3, #0
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3718      	adds	r7, #24
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	40012c00 	.word	0x40012c00

08003e8c <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b086      	sub	sp, #24
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a1b      	ldr	r3, [r3, #32]
 8003e9a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a1b      	ldr	r3, [r3, #32]
 8003ea6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	69db      	ldr	r3, [r3, #28]
 8003eb2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f023 0303 	bic.w	r3, r3, #3
 8003eba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	691b      	ldr	r3, [r3, #16]
 8003ed4:	021b      	lsls	r3, r3, #8
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	021b      	lsls	r3, r3, #8
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a1b      	ldr	r2, [pc, #108]	@ (8003f5c <OC3Config+0xd0>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d11f      	bne.n	8003f32 <OC3Config+0xa6>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	695b      	ldr	r3, [r3, #20]
 8003efc:	029b      	lsls	r3, r3, #10
 8003efe:	4313      	orrs	r3, r2
 8003f00:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	029b      	lsls	r3, r3, #10
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	011b      	lsls	r3, r3, #4
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	69db      	ldr	r3, [r3, #28]
 8003f2c:	015b      	lsls	r3, r3, #5
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	693a      	ldr	r2, [r7, #16]
 8003f36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	68fa      	ldr	r2, [r7, #12]
 8003f3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	4619      	mov	r1, r3
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f7ff fdc8 	bl	8003ada <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	697a      	ldr	r2, [r7, #20]
 8003f4e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3718      	adds	r7, #24
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	40012c00 	.word	0x40012c00

08003f60 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b086      	sub	sp, #24
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a1b      	ldr	r3, [r3, #32]
 8003f6e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a1b      	ldr	r3, [r3, #32]
 8003f7a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	69db      	ldr	r3, [r3, #28]
 8003f86:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	021b      	lsls	r3, r3, #8
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	031b      	lsls	r3, r3, #12
 8003fac:	4313      	orrs	r3, r2
 8003fae:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	031b      	lsls	r3, r3, #12
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4a0f      	ldr	r2, [pc, #60]	@ (8004000 <OC4Config+0xa0>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d107      	bne.n	8003fd8 <OC4Config+0x78>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	019b      	lsls	r3, r3, #6
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	697a      	ldr	r2, [r7, #20]
 8003fdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	68fa      	ldr	r2, [r7, #12]
 8003fe2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	4619      	mov	r1, r3
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f7ff fd82 	bl	8003af4 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	693a      	ldr	r2, [r7, #16]
 8003ff4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003ff6:	2300      	movs	r3, #0
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3718      	adds	r7, #24
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	40012c00 	.word	0x40012c00

08004004 <LL_USART_IsEnabled>:
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004014:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004018:	bf0c      	ite	eq
 800401a:	2301      	moveq	r3, #1
 800401c:	2300      	movne	r3, #0
 800401e:	b2db      	uxtb	r3, r3
}
 8004020:	4618      	mov	r0, r3
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	bc80      	pop	{r7}
 8004028:	4770      	bx	lr

0800402a <LL_USART_SetStopBitsLength>:
{
 800402a:	b480      	push	{r7}
 800402c:	b083      	sub	sp, #12
 800402e:	af00      	add	r7, sp, #0
 8004030:	6078      	str	r0, [r7, #4]
 8004032:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	691b      	ldr	r3, [r3, #16]
 8004038:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	431a      	orrs	r2, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	611a      	str	r2, [r3, #16]
}
 8004044:	bf00      	nop
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	bc80      	pop	{r7}
 800404c:	4770      	bx	lr

0800404e <LL_USART_SetHWFlowCtrl>:
{
 800404e:	b480      	push	{r7}
 8004050:	b083      	sub	sp, #12
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
 8004056:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	695b      	ldr	r3, [r3, #20]
 800405c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	431a      	orrs	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	615a      	str	r2, [r3, #20]
}
 8004068:	bf00      	nop
 800406a:	370c      	adds	r7, #12
 800406c:	46bd      	mov	sp, r7
 800406e:	bc80      	pop	{r7}
 8004070:	4770      	bx	lr
	...

08004074 <LL_USART_SetBaudRate>:
{
 8004074:	b480      	push	{r7}
 8004076:	b085      	sub	sp, #20
 8004078:	af00      	add	r7, sp, #0
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8004080:	68ba      	ldr	r2, [r7, #8]
 8004082:	4613      	mov	r3, r2
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	4413      	add	r3, r2
 8004088:	009a      	lsls	r2, r3, #2
 800408a:	441a      	add	r2, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	fbb2 f3f3 	udiv	r3, r2, r3
 8004094:	4a25      	ldr	r2, [pc, #148]	@ (800412c <LL_USART_SetBaudRate+0xb8>)
 8004096:	fba2 2303 	umull	r2, r3, r2, r3
 800409a:	095b      	lsrs	r3, r3, #5
 800409c:	b29b      	uxth	r3, r3
 800409e:	011b      	lsls	r3, r3, #4
 80040a0:	b299      	uxth	r1, r3
 80040a2:	68ba      	ldr	r2, [r7, #8]
 80040a4:	4613      	mov	r3, r2
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	4413      	add	r3, r2
 80040aa:	009a      	lsls	r2, r3, #2
 80040ac:	441a      	add	r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	fbb2 f2f3 	udiv	r2, r2, r3
 80040b6:	4b1d      	ldr	r3, [pc, #116]	@ (800412c <LL_USART_SetBaudRate+0xb8>)
 80040b8:	fba3 0302 	umull	r0, r3, r3, r2
 80040bc:	095b      	lsrs	r3, r3, #5
 80040be:	2064      	movs	r0, #100	@ 0x64
 80040c0:	fb00 f303 	mul.w	r3, r0, r3
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	011b      	lsls	r3, r3, #4
 80040c8:	3332      	adds	r3, #50	@ 0x32
 80040ca:	4a18      	ldr	r2, [pc, #96]	@ (800412c <LL_USART_SetBaudRate+0xb8>)
 80040cc:	fba2 2303 	umull	r2, r3, r2, r3
 80040d0:	095b      	lsrs	r3, r3, #5
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80040d8:	b29b      	uxth	r3, r3
 80040da:	440b      	add	r3, r1
 80040dc:	b299      	uxth	r1, r3
 80040de:	68ba      	ldr	r2, [r7, #8]
 80040e0:	4613      	mov	r3, r2
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	4413      	add	r3, r2
 80040e6:	009a      	lsls	r2, r3, #2
 80040e8:	441a      	add	r2, r3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80040f2:	4b0e      	ldr	r3, [pc, #56]	@ (800412c <LL_USART_SetBaudRate+0xb8>)
 80040f4:	fba3 0302 	umull	r0, r3, r3, r2
 80040f8:	095b      	lsrs	r3, r3, #5
 80040fa:	2064      	movs	r0, #100	@ 0x64
 80040fc:	fb00 f303 	mul.w	r3, r0, r3
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	011b      	lsls	r3, r3, #4
 8004104:	3332      	adds	r3, #50	@ 0x32
 8004106:	4a09      	ldr	r2, [pc, #36]	@ (800412c <LL_USART_SetBaudRate+0xb8>)
 8004108:	fba2 2303 	umull	r2, r3, r2, r3
 800410c:	095b      	lsrs	r3, r3, #5
 800410e:	b29b      	uxth	r3, r3
 8004110:	f003 030f 	and.w	r3, r3, #15
 8004114:	b29b      	uxth	r3, r3
 8004116:	440b      	add	r3, r1
 8004118:	b29b      	uxth	r3, r3
 800411a:	461a      	mov	r2, r3
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	609a      	str	r2, [r3, #8]
}
 8004120:	bf00      	nop
 8004122:	3714      	adds	r7, #20
 8004124:	46bd      	mov	sp, r7
 8004126:	bc80      	pop	{r7}
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	51eb851f 	.word	0x51eb851f

08004130 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b088      	sub	sp, #32
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800413e:	2300      	movs	r3, #0
 8004140:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f7ff ff5e 	bl	8004004 <LL_USART_IsEnabled>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d145      	bne.n	80041da <LL_USART_Init+0xaa>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004156:	f023 030c 	bic.w	r3, r3, #12
 800415a:	683a      	ldr	r2, [r7, #0]
 800415c:	6851      	ldr	r1, [r2, #4]
 800415e:	683a      	ldr	r2, [r7, #0]
 8004160:	68d2      	ldr	r2, [r2, #12]
 8004162:	4311      	orrs	r1, r2
 8004164:	683a      	ldr	r2, [r7, #0]
 8004166:	6912      	ldr	r2, [r2, #16]
 8004168:	430a      	orrs	r2, r1
 800416a:	431a      	orrs	r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	4619      	mov	r1, r3
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f7ff ff57 	bl	800402a <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	695b      	ldr	r3, [r3, #20]
 8004180:	4619      	mov	r1, r3
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f7ff ff63 	bl	800404e <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8004188:	f107 0308 	add.w	r3, r7, #8
 800418c:	4618      	mov	r0, r3
 800418e:	f7ff fba7 	bl	80038e0 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a13      	ldr	r2, [pc, #76]	@ (80041e4 <LL_USART_Init+0xb4>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d102      	bne.n	80041a0 <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	61bb      	str	r3, [r7, #24]
 800419e:	e00c      	b.n	80041ba <LL_USART_Init+0x8a>
    }
    else if (USARTx == USART2)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4a11      	ldr	r2, [pc, #68]	@ (80041e8 <LL_USART_Init+0xb8>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d102      	bne.n	80041ae <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	61bb      	str	r3, [r7, #24]
 80041ac:	e005      	b.n	80041ba <LL_USART_Init+0x8a>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a0e      	ldr	r2, [pc, #56]	@ (80041ec <LL_USART_Init+0xbc>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d101      	bne.n	80041ba <LL_USART_Init+0x8a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00c      	beq.n	80041da <LL_USART_Init+0xaa>
        && (USART_InitStruct->BaudRate != 0U))
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d008      	beq.n	80041da <LL_USART_Init+0xaa>
    {
      status = SUCCESS;
 80041c8:	2300      	movs	r3, #0
 80041ca:	77fb      	strb	r3, [r7, #31]
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->BaudRate);
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 80041d0:	461a      	mov	r2, r3
 80041d2:	69b9      	ldr	r1, [r7, #24]
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f7ff ff4d 	bl	8004074 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80041da:	7ffb      	ldrb	r3, [r7, #31]
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3720      	adds	r7, #32
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	40013800 	.word	0x40013800
 80041e8:	40004400 	.word	0x40004400
 80041ec:	40004800 	.word	0x40004800

080041f0 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004202:	4a07      	ldr	r2, [pc, #28]	@ (8004220 <LL_InitTick+0x30>)
 8004204:	3b01      	subs	r3, #1
 8004206:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8004208:	4b05      	ldr	r3, [pc, #20]	@ (8004220 <LL_InitTick+0x30>)
 800420a:	2200      	movs	r2, #0
 800420c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800420e:	4b04      	ldr	r3, [pc, #16]	@ (8004220 <LL_InitTick+0x30>)
 8004210:	2205      	movs	r2, #5
 8004212:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8004214:	bf00      	nop
 8004216:	370c      	adds	r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	bc80      	pop	{r7}
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	e000e010 	.word	0xe000e010

08004224 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 800422c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f7ff ffdd 	bl	80041f0 <LL_InitTick>
}
 8004236:	bf00      	nop
 8004238:	3708      	adds	r7, #8
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
	...

08004240 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8004240:	b480      	push	{r7}
 8004242:	b085      	sub	sp, #20
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8004248:	4b0e      	ldr	r3, [pc, #56]	@ (8004284 <LL_mDelay+0x44>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800424e:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004256:	d00c      	beq.n	8004272 <LL_mDelay+0x32>
  {
    Delay++;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	3301      	adds	r3, #1
 800425c:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 800425e:	e008      	b.n	8004272 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8004260:	4b08      	ldr	r3, [pc, #32]	@ (8004284 <LL_mDelay+0x44>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d002      	beq.n	8004272 <LL_mDelay+0x32>
    {
      Delay--;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	3b01      	subs	r3, #1
 8004270:	607b      	str	r3, [r7, #4]
  while (Delay)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d1f3      	bne.n	8004260 <LL_mDelay+0x20>
    }
  }
}
 8004278:	bf00      	nop
 800427a:	bf00      	nop
 800427c:	3714      	adds	r7, #20
 800427e:	46bd      	mov	sp, r7
 8004280:	bc80      	pop	{r7}
 8004282:	4770      	bx	lr
 8004284:	e000e010 	.word	0xe000e010

08004288 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8004290:	4a03      	ldr	r2, [pc, #12]	@ (80042a0 <LL_SetSystemCoreClock+0x18>)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6013      	str	r3, [r2, #0]
}
 8004296:	bf00      	nop
 8004298:	370c      	adds	r7, #12
 800429a:	46bd      	mov	sp, r7
 800429c:	bc80      	pop	{r7}
 800429e:	4770      	bx	lr
 80042a0:	20000064 	.word	0x20000064
 80042a4:	00000000 	.word	0x00000000

080042a8 <CCF_Process>:
/**********************
 *    PUBLIC FUNCTIONS
 **********************/
uint32_t
CCF_Process(float current)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  float temp = -0.172233513 * current + 115.5723622;
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f7fc f8c3 	bl	800043c <__aeabi_f2d>
 80042b6:	a310      	add	r3, pc, #64	@ (adr r3, 80042f8 <CCF_Process+0x50>)
 80042b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042bc:	f7fc f916 	bl	80004ec <__aeabi_dmul>
 80042c0:	4602      	mov	r2, r0
 80042c2:	460b      	mov	r3, r1
 80042c4:	4610      	mov	r0, r2
 80042c6:	4619      	mov	r1, r3
 80042c8:	a30d      	add	r3, pc, #52	@ (adr r3, 8004300 <CCF_Process+0x58>)
 80042ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ce:	f7fb ff57 	bl	8000180 <__adddf3>
 80042d2:	4602      	mov	r2, r0
 80042d4:	460b      	mov	r3, r1
 80042d6:	4610      	mov	r0, r2
 80042d8:	4619      	mov	r1, r3
 80042da:	f7fc fbdf 	bl	8000a9c <__aeabi_d2f>
 80042de:	4603      	mov	r3, r0
 80042e0:	60fb      	str	r3, [r7, #12]
  return (uint32_t)temp;
 80042e2:	68f8      	ldr	r0, [r7, #12]
 80042e4:	f7fc fefe 	bl	80010e4 <__aeabi_f2uiz>
 80042e8:	4603      	mov	r3, r0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3710      	adds	r7, #16
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	f3af 8000 	nop.w
 80042f8:	6cce1abc 	.word	0x6cce1abc
 80042fc:	bfc60bbf 	.word	0xbfc60bbf
 8004300:	95109ddd 	.word	0x95109ddd
 8004304:	405ce4a1 	.word	0x405ce4a1

08004308 <FCP_PhaseStart>:
 *
 * @param time The time value used to determine the PWM parameters.
 */
void
FCP_PhaseStart (uint8_t time)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
 800430e:	4603      	mov	r3, r0
 8004310:	71fb      	strb	r3, [r7, #7]
  time = time > 20 ? (time - 20) : 0;
 8004312:	79fb      	ldrb	r3, [r7, #7]
 8004314:	2b14      	cmp	r3, #20
 8004316:	bf38      	it	cc
 8004318:	2314      	movcc	r3, #20
 800431a:	b2db      	uxtb	r3, r3
 800431c:	3b14      	subs	r3, #20
 800431e:	71fb      	strb	r3, [r7, #7]

  // Set the prescaler value
  pwm_control_1->u16_prescaler = table_data_start[time].prescaler_timer - 1;
 8004320:	79fb      	ldrb	r3, [r7, #7]
 8004322:	4a16      	ldr	r2, [pc, #88]	@ (800437c <FCP_PhaseStart+0x74>)
 8004324:	00db      	lsls	r3, r3, #3
 8004326:	4413      	add	r3, r2
 8004328:	889b      	ldrh	r3, [r3, #4]
 800432a:	b29a      	uxth	r2, r3
 800432c:	4b14      	ldr	r3, [pc, #80]	@ (8004380 <FCP_PhaseStart+0x78>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	3a01      	subs	r2, #1
 8004332:	b292      	uxth	r2, r2
 8004334:	811a      	strh	r2, [r3, #8]
  // Set the auto-reload register value
  pwm_control_1->u16_reg_auto_reload
      = table_data_start[time].auto_reload_reg_timer - 1;
 8004336:	79fb      	ldrb	r3, [r7, #7]
 8004338:	4a10      	ldr	r2, [pc, #64]	@ (800437c <FCP_PhaseStart+0x74>)
 800433a:	00db      	lsls	r3, r3, #3
 800433c:	4413      	add	r3, r2
 800433e:	88db      	ldrh	r3, [r3, #6]
 8004340:	b29a      	uxth	r2, r3
  pwm_control_1->u16_reg_auto_reload
 8004342:	4b0f      	ldr	r3, [pc, #60]	@ (8004380 <FCP_PhaseStart+0x78>)
 8004344:	681b      	ldr	r3, [r3, #0]
      = table_data_start[time].auto_reload_reg_timer - 1;
 8004346:	3a01      	subs	r2, #1
 8004348:	b292      	uxth	r2, r2
 800434a:	809a      	strh	r2, [r3, #4]
  // Set the compare register value
  pwm_control_1->u16_reg_compare
      = table_data_start[time].auto_reload_reg_timer * DUTY_CYCLE / 100;
 800434c:	79fb      	ldrb	r3, [r7, #7]
 800434e:	4a0b      	ldr	r2, [pc, #44]	@ (800437c <FCP_PhaseStart+0x74>)
 8004350:	00db      	lsls	r3, r3, #3
 8004352:	4413      	add	r3, r2
 8004354:	88db      	ldrh	r3, [r3, #6]
 8004356:	b29b      	uxth	r3, r3
 8004358:	0fda      	lsrs	r2, r3, #31
 800435a:	4413      	add	r3, r2
 800435c:	105b      	asrs	r3, r3, #1
 800435e:	461a      	mov	r2, r3
  pwm_control_1->u16_reg_compare
 8004360:	4b07      	ldr	r3, [pc, #28]	@ (8004380 <FCP_PhaseStart+0x78>)
 8004362:	681b      	ldr	r3, [r3, #0]
      = table_data_start[time].auto_reload_reg_timer * DUTY_CYCLE / 100;
 8004364:	b292      	uxth	r2, r2
 8004366:	80da      	strh	r2, [r3, #6]

  // Apply the PWM parameters
  BSP_PWM_SetParameterProcess(pwm_control_1);
 8004368:	4b05      	ldr	r3, [pc, #20]	@ (8004380 <FCP_PhaseStart+0x78>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4618      	mov	r0, r3
 800436e:	f7fd fd92 	bl	8001e96 <BSP_PWM_SetParameterProcess>
}
 8004372:	bf00      	nop
 8004374:	3708      	adds	r7, #8
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	08007fe4 	.word	0x08007fe4
 8004380:	20000078 	.word	0x20000078

08004384 <FCP_PhaseProcess>:
 *
 * @param frequency The frequency value used to determine the PWM parameters.
 */
void
FCP_PhaseProcess (uint32_t frequency)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b086      	sub	sp, #24
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  if (frequency > FRE_END_THRESHOLD)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	4a4c      	ldr	r2, [pc, #304]	@ (80044c0 <FCP_PhaseProcess+0x13c>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d91e      	bls.n	80043d2 <FCP_PhaseProcess+0x4e>
  {
    // Set the prescaler value
    pwm_control_1->u16_prescaler = PRE_END_THRESHOLD - 1;
 8004394:	4b4b      	ldr	r3, [pc, #300]	@ (80044c4 <FCP_PhaseProcess+0x140>)
 8004396:	f8b3 354c 	ldrh.w	r3, [r3, #1356]	@ 0x54c
 800439a:	b29a      	uxth	r2, r3
 800439c:	4b4a      	ldr	r3, [pc, #296]	@ (80044c8 <FCP_PhaseProcess+0x144>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	3a01      	subs	r2, #1
 80043a2:	b292      	uxth	r2, r2
 80043a4:	811a      	strh	r2, [r3, #8]
    // Set the auto-reload register value
    pwm_control_1->u16_reg_auto_reload = REG_END_THRESHOLD - 1;
 80043a6:	4b47      	ldr	r3, [pc, #284]	@ (80044c4 <FCP_PhaseProcess+0x140>)
 80043a8:	f8b3 354e 	ldrh.w	r3, [r3, #1358]	@ 0x54e
 80043ac:	b29a      	uxth	r2, r3
 80043ae:	4b46      	ldr	r3, [pc, #280]	@ (80044c8 <FCP_PhaseProcess+0x144>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	3a01      	subs	r2, #1
 80043b4:	b292      	uxth	r2, r2
 80043b6:	809a      	strh	r2, [r3, #4]
    // Set the compare register value
    pwm_control_1->u16_reg_compare = REG_END_THRESHOLD * DUTY_CYCLE / 100;
 80043b8:	4b42      	ldr	r3, [pc, #264]	@ (80044c4 <FCP_PhaseProcess+0x140>)
 80043ba:	f8b3 354e 	ldrh.w	r3, [r3, #1358]	@ 0x54e
 80043be:	b29b      	uxth	r3, r3
 80043c0:	0fda      	lsrs	r2, r3, #31
 80043c2:	4413      	add	r3, r2
 80043c4:	105b      	asrs	r3, r3, #1
 80043c6:	461a      	mov	r2, r3
 80043c8:	4b3f      	ldr	r3, [pc, #252]	@ (80044c8 <FCP_PhaseProcess+0x144>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	b292      	uxth	r2, r2
 80043ce:	80da      	strh	r2, [r3, #6]
 80043d0:	e06d      	b.n	80044ae <FCP_PhaseProcess+0x12a>
  }
  else if (frequency < FRE_START_THRESHOLD)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a3d      	ldr	r2, [pc, #244]	@ (80044cc <FCP_PhaseProcess+0x148>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d81b      	bhi.n	8004412 <FCP_PhaseProcess+0x8e>
  {
    // Set the prescaler value
    pwm_control_1->u16_prescaler = PRE_START_THRESHOLD - 1;
 80043da:	4b3a      	ldr	r3, [pc, #232]	@ (80044c4 <FCP_PhaseProcess+0x140>)
 80043dc:	889b      	ldrh	r3, [r3, #4]
 80043de:	b29a      	uxth	r2, r3
 80043e0:	4b39      	ldr	r3, [pc, #228]	@ (80044c8 <FCP_PhaseProcess+0x144>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	3a01      	subs	r2, #1
 80043e6:	b292      	uxth	r2, r2
 80043e8:	811a      	strh	r2, [r3, #8]
    // Set the auto-reload register value
    pwm_control_1->u16_reg_auto_reload = REG_START_THRESHOLD - 1;
 80043ea:	4b36      	ldr	r3, [pc, #216]	@ (80044c4 <FCP_PhaseProcess+0x140>)
 80043ec:	88db      	ldrh	r3, [r3, #6]
 80043ee:	b29a      	uxth	r2, r3
 80043f0:	4b35      	ldr	r3, [pc, #212]	@ (80044c8 <FCP_PhaseProcess+0x144>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	3a01      	subs	r2, #1
 80043f6:	b292      	uxth	r2, r2
 80043f8:	809a      	strh	r2, [r3, #4]
    // Set the compare register value
    pwm_control_1->u16_reg_compare = REG_START_THRESHOLD * DUTY_CYCLE / 100;
 80043fa:	4b32      	ldr	r3, [pc, #200]	@ (80044c4 <FCP_PhaseProcess+0x140>)
 80043fc:	88db      	ldrh	r3, [r3, #6]
 80043fe:	b29b      	uxth	r3, r3
 8004400:	0fda      	lsrs	r2, r3, #31
 8004402:	4413      	add	r3, r2
 8004404:	105b      	asrs	r3, r3, #1
 8004406:	461a      	mov	r2, r3
 8004408:	4b2f      	ldr	r3, [pc, #188]	@ (80044c8 <FCP_PhaseProcess+0x144>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	b292      	uxth	r2, r2
 800440e:	80da      	strh	r2, [r3, #6]
 8004410:	e04d      	b.n	80044ae <FCP_PhaseProcess+0x12a>
  }
  else
  {
    uint32_t i;
    int32_t  delta_1 = 0;
 8004412:	2300      	movs	r3, #0
 8004414:	613b      	str	r3, [r7, #16]
    int32_t  delta_2 = 0;
 8004416:	2300      	movs	r3, #0
 8004418:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < SIZE_TABLE_DATA_PROCESS - 1; i++)
 800441a:	2300      	movs	r3, #0
 800441c:	617b      	str	r3, [r7, #20]
 800441e:	e043      	b.n	80044a8 <FCP_PhaseProcess+0x124>
    {
      delta_1 = abs_32((int32_t)(frequency - table_data_process[i].frequency));
 8004420:	4a28      	ldr	r2, [pc, #160]	@ (80044c4 <FCP_PhaseProcess+0x140>)
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	4618      	mov	r0, r3
 800442e:	f000 f84f 	bl	80044d0 <abs_32>
 8004432:	6138      	str	r0, [r7, #16]
      delta_2
          = abs_32((int32_t)(frequency - table_data_process[i + 1].frequency));
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	3301      	adds	r3, #1
 8004438:	4a22      	ldr	r2, [pc, #136]	@ (80044c4 <FCP_PhaseProcess+0x140>)
 800443a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	4618      	mov	r0, r3
 8004444:	f000 f844 	bl	80044d0 <abs_32>
 8004448:	60f8      	str	r0, [r7, #12]

      if (delta_1 <= delta_2)
 800444a:	693a      	ldr	r2, [r7, #16]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	429a      	cmp	r2, r3
 8004450:	dc27      	bgt.n	80044a2 <FCP_PhaseProcess+0x11e>
      {
        // Set the prescaler value
        pwm_control_1->u16_prescaler
            = table_data_process[i - 1].prescaler_timer - 1;
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	3b01      	subs	r3, #1
 8004456:	4a1b      	ldr	r2, [pc, #108]	@ (80044c4 <FCP_PhaseProcess+0x140>)
 8004458:	00db      	lsls	r3, r3, #3
 800445a:	4413      	add	r3, r2
 800445c:	889b      	ldrh	r3, [r3, #4]
 800445e:	b29a      	uxth	r2, r3
        pwm_control_1->u16_prescaler
 8004460:	4b19      	ldr	r3, [pc, #100]	@ (80044c8 <FCP_PhaseProcess+0x144>)
 8004462:	681b      	ldr	r3, [r3, #0]
            = table_data_process[i - 1].prescaler_timer - 1;
 8004464:	3a01      	subs	r2, #1
 8004466:	b292      	uxth	r2, r2
 8004468:	811a      	strh	r2, [r3, #8]
        // Set the auto-reload register value
        pwm_control_1->u16_reg_auto_reload
            = table_data_process[i - 1].auto_reload_reg_timer - 1;
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	3b01      	subs	r3, #1
 800446e:	4a15      	ldr	r2, [pc, #84]	@ (80044c4 <FCP_PhaseProcess+0x140>)
 8004470:	00db      	lsls	r3, r3, #3
 8004472:	4413      	add	r3, r2
 8004474:	88db      	ldrh	r3, [r3, #6]
 8004476:	b29a      	uxth	r2, r3
        pwm_control_1->u16_reg_auto_reload
 8004478:	4b13      	ldr	r3, [pc, #76]	@ (80044c8 <FCP_PhaseProcess+0x144>)
 800447a:	681b      	ldr	r3, [r3, #0]
            = table_data_process[i - 1].auto_reload_reg_timer - 1;
 800447c:	3a01      	subs	r2, #1
 800447e:	b292      	uxth	r2, r2
 8004480:	809a      	strh	r2, [r3, #4]
        // Set the compare register value
        pwm_control_1->u16_reg_compare
            = table_data_process[i - 1].auto_reload_reg_timer * DUTY_CYCLE
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	3b01      	subs	r3, #1
 8004486:	4a0f      	ldr	r2, [pc, #60]	@ (80044c4 <FCP_PhaseProcess+0x140>)
 8004488:	00db      	lsls	r3, r3, #3
 800448a:	4413      	add	r3, r2
 800448c:	88db      	ldrh	r3, [r3, #6]
 800448e:	b29b      	uxth	r3, r3
              / 100;
 8004490:	0fda      	lsrs	r2, r3, #31
 8004492:	4413      	add	r3, r2
 8004494:	105b      	asrs	r3, r3, #1
 8004496:	461a      	mov	r2, r3
        pwm_control_1->u16_reg_compare
 8004498:	4b0b      	ldr	r3, [pc, #44]	@ (80044c8 <FCP_PhaseProcess+0x144>)
 800449a:	681b      	ldr	r3, [r3, #0]
            = table_data_process[i - 1].auto_reload_reg_timer * DUTY_CYCLE
 800449c:	b292      	uxth	r2, r2
 800449e:	80da      	strh	r2, [r3, #6]
        break;
 80044a0:	e005      	b.n	80044ae <FCP_PhaseProcess+0x12a>
    for (i = 0; i < SIZE_TABLE_DATA_PROCESS - 1; i++)
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	3301      	adds	r3, #1
 80044a6:	617b      	str	r3, [r7, #20]
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	2ba8      	cmp	r3, #168	@ 0xa8
 80044ac:	d9b8      	bls.n	8004420 <FCP_PhaseProcess+0x9c>
      }
    }
  }

  BSP_PWM_SetParameterProcess(pwm_control_1);
 80044ae:	4b06      	ldr	r3, [pc, #24]	@ (80044c8 <FCP_PhaseProcess+0x144>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4618      	mov	r0, r3
 80044b4:	f7fd fcef 	bl	8001e96 <BSP_PWM_SetParameterProcess>
}
 80044b8:	bf00      	nop
 80044ba:	3718      	adds	r7, #24
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	00020788 	.word	0x00020788
 80044c4:	0800785c 	.word	0x0800785c
 80044c8:	20000078 	.word	0x20000078
 80044cc:	000128df 	.word	0x000128df

080044d0 <abs_32>:
 * @param num The 32-bit integer for which the absolute value is to be computed.
 * @return The absolute value of the input 32-bit integer.
 */
static int32_t
abs_32 (int32_t num)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  if (num >= 0)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	db01      	blt.n	80044e2 <abs_32+0x12>
  {
    return num;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	e001      	b.n	80044e6 <abs_32+0x16>
  }
  else
  {
    return -num;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	425b      	negs	r3, r3
  }
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	370c      	adds	r7, #12
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bc80      	pop	{r7}
 80044ee:	4770      	bx	lr

080044f0 <PIControl_Reset>:
 *
 * @param p_pi Pointer to the PI controller structure to be reset.
 */
void
PIControl_Reset (pi_control_t *p_pi)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  p_pi->f_p_part    = 0; /**< @brief Reset proportional part. */
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f04f 0200 	mov.w	r2, #0
 80044fe:	601a      	str	r2, [r3, #0]
  p_pi->f_i_part    = 0; /**< @brief Reset integral part. */
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f04f 0200 	mov.w	r2, #0
 8004506:	605a      	str	r2, [r3, #4]
  p_pi->f_out       = 0; /**< @brief Reset current output. */
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f04f 0200 	mov.w	r2, #0
 800450e:	609a      	str	r2, [r3, #8]
  p_pi->f_pre_out   = 0; /**< @brief Reset previous output. */
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f04f 0200 	mov.w	r2, #0
 8004516:	60da      	str	r2, [r3, #12]
  p_pi->f_error     = 0; /**< @brief Reset current error. */
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f04f 0200 	mov.w	r2, #0
 800451e:	611a      	str	r2, [r3, #16]
  p_pi->f_pre_error = 0; /**< @brief Reset previous error. */
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f04f 0200 	mov.w	r2, #0
 8004526:	615a      	str	r2, [r3, #20]
  p_pi->f_setPoint  = 0; /**< @brief Reset set point. */
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f04f 0200 	mov.w	r2, #0
 800452e:	621a      	str	r2, [r3, #32]
}
 8004530:	bf00      	nop
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	bc80      	pop	{r7}
 8004538:	4770      	bx	lr
	...

0800453c <PIControl_Process>:
 * @param f_new_value New input value (feedback).
 * @param p_pi Pointer to the PI controller structure.
 */
void
PIControl_Process (float f_new_value, pi_control_t *p_pi)
{
 800453c:	b5b0      	push	{r4, r5, r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
  /**< @brief Calculate current error. */
  p_pi->f_error = f_new_value - p_pi->f_setPoint;
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	6a1b      	ldr	r3, [r3, #32]
 800454a:	4619      	mov	r1, r3
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f7fc faf9 	bl	8000b44 <__aeabi_fsub>
 8004552:	4603      	mov	r3, r0
 8004554:	461a      	mov	r2, r3
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	611a      	str	r2, [r3, #16]

  /**< @brief Calculate proportional part. */
  p_pi->f_p_part = p_pi->f_Kp * (p_pi->f_error - p_pi->f_pre_error);
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	699c      	ldr	r4, [r3, #24]
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	691a      	ldr	r2, [r3, #16]
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	695b      	ldr	r3, [r3, #20]
 8004566:	4619      	mov	r1, r3
 8004568:	4610      	mov	r0, r2
 800456a:	f7fc faeb 	bl	8000b44 <__aeabi_fsub>
 800456e:	4603      	mov	r3, r0
 8004570:	4619      	mov	r1, r3
 8004572:	4620      	mov	r0, r4
 8004574:	f7fc fbf0 	bl	8000d58 <__aeabi_fmul>
 8004578:	4603      	mov	r3, r0
 800457a:	461a      	mov	r2, r3
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	601a      	str	r2, [r3, #0]

  /**< @brief Calculate integral part. */
  p_pi->f_i_part = 0.5 * p_pi->f_Ki * CONTROL_PI_TIME_SAMPLE
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	69db      	ldr	r3, [r3, #28]
 8004584:	4618      	mov	r0, r3
 8004586:	f7fb ff59 	bl	800043c <__aeabi_f2d>
 800458a:	f04f 0200 	mov.w	r2, #0
 800458e:	4b25      	ldr	r3, [pc, #148]	@ (8004624 <PIControl_Process+0xe8>)
 8004590:	f7fb ffac 	bl	80004ec <__aeabi_dmul>
 8004594:	4602      	mov	r2, r0
 8004596:	460b      	mov	r3, r1
 8004598:	4610      	mov	r0, r2
 800459a:	4619      	mov	r1, r3
 800459c:	f04f 0200 	mov.w	r2, #0
 80045a0:	4b21      	ldr	r3, [pc, #132]	@ (8004628 <PIControl_Process+0xec>)
 80045a2:	f7fb ffa3 	bl	80004ec <__aeabi_dmul>
 80045a6:	4602      	mov	r2, r0
 80045a8:	460b      	mov	r3, r1
 80045aa:	4614      	mov	r4, r2
 80045ac:	461d      	mov	r5, r3
                   * (p_pi->f_error + p_pi->f_pre_error);
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	691a      	ldr	r2, [r3, #16]
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	695b      	ldr	r3, [r3, #20]
 80045b6:	4619      	mov	r1, r3
 80045b8:	4610      	mov	r0, r2
 80045ba:	f7fc fac5 	bl	8000b48 <__addsf3>
 80045be:	4603      	mov	r3, r0
 80045c0:	4618      	mov	r0, r3
 80045c2:	f7fb ff3b 	bl	800043c <__aeabi_f2d>
 80045c6:	4602      	mov	r2, r0
 80045c8:	460b      	mov	r3, r1
 80045ca:	4620      	mov	r0, r4
 80045cc:	4629      	mov	r1, r5
 80045ce:	f7fb ff8d 	bl	80004ec <__aeabi_dmul>
 80045d2:	4602      	mov	r2, r0
 80045d4:	460b      	mov	r3, r1
 80045d6:	4610      	mov	r0, r2
 80045d8:	4619      	mov	r1, r3
 80045da:	f7fc fa5f 	bl	8000a9c <__aeabi_d2f>
 80045de:	4602      	mov	r2, r0
  p_pi->f_i_part = 0.5 * p_pi->f_Ki * CONTROL_PI_TIME_SAMPLE
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	605a      	str	r2, [r3, #4]

  /**< @brief Calculate current output. */
  p_pi->f_out = p_pi->f_pre_out + p_pi->f_p_part + p_pi->f_i_part;
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	68da      	ldr	r2, [r3, #12]
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4619      	mov	r1, r3
 80045ee:	4610      	mov	r0, r2
 80045f0:	f7fc faaa 	bl	8000b48 <__addsf3>
 80045f4:	4603      	mov	r3, r0
 80045f6:	461a      	mov	r2, r3
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	4619      	mov	r1, r3
 80045fe:	4610      	mov	r0, r2
 8004600:	f7fc faa2 	bl	8000b48 <__addsf3>
 8004604:	4603      	mov	r3, r0
 8004606:	461a      	mov	r2, r3
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	609a      	str	r2, [r3, #8]

  // Update previous error and output for next iteration
  p_pi->f_pre_error = p_pi->f_error; /**< @brief Update previous error. */
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	691a      	ldr	r2, [r3, #16]
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	615a      	str	r2, [r3, #20]
  p_pi->f_pre_out   = p_pi->f_out;   /**< @brief Update previous output. */
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	689a      	ldr	r2, [r3, #8]
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	60da      	str	r2, [r3, #12]
}
 800461c:	bf00      	nop
 800461e:	3708      	adds	r7, #8
 8004620:	46bd      	mov	sp, r7
 8004622:	bdb0      	pop	{r4, r5, r7, pc}
 8004624:	3fe00000 	.word	0x3fe00000
 8004628:	40240000 	.word	0x40240000

0800462c <QUEUE_Init>:
 * @param rb The parameter `rb` is a pointer to a `ring_buffer_t` structure,
 * which is used to implement a queue data structure.
 */
void
QUEUE_Init (ring_buffer_t *rb)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b082      	sub	sp, #8
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  rb->u8_buffer = (uint8_t *)malloc(RING_BUFFER_SIZE);
 8004634:	2080      	movs	r0, #128	@ 0x80
 8004636:	f000 f9f1 	bl	8004a1c <malloc>
 800463a:	4603      	mov	r3, r0
 800463c:	461a      	mov	r2, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	601a      	str	r2, [r3, #0]
  rb->u32_in     = 0;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	605a      	str	r2, [r3, #4]
  rb->u32_out    = 0;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	609a      	str	r2, [r3, #8]
  rb->u32_count  = 0;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	60da      	str	r2, [r3, #12]
}
 8004654:	bf00      	nop
 8004656:	3708      	adds	r7, #8
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <QUEUE_Reset>:
 *
 * @param rb Pointer to the ring buffer to reset.
 */
void
QUEUE_Reset (ring_buffer_t *rb)
{
 800465c:	b480      	push	{r7}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  rb->u32_in    = 0;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	605a      	str	r2, [r3, #4]
  rb->u32_out   = 0;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	609a      	str	r2, [r3, #8]
  rb->u32_count = 0;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	60da      	str	r2, [r3, #12]
}
 8004676:	bf00      	nop
 8004678:	370c      	adds	r7, #12
 800467a:	46bd      	mov	sp, r7
 800467c:	bc80      	pop	{r7}
 800467e:	4770      	bx	lr

08004680 <QUEUE_Is_Empty>:
 * of elements in the ring buffer is 0, indicating that the buffer is empty, and
 * `false` otherwise.
 */
bool
QUEUE_Is_Empty (ring_buffer_t *rb)
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  return (rb->u32_count == 0);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	2b00      	cmp	r3, #0
 800468e:	bf0c      	ite	eq
 8004690:	2301      	moveq	r3, #1
 8004692:	2300      	movne	r3, #0
 8004694:	b2db      	uxtb	r3, r3
}
 8004696:	4618      	mov	r0, r3
 8004698:	370c      	adds	r7, #12
 800469a:	46bd      	mov	sp, r7
 800469c:	bc80      	pop	{r7}
 800469e:	4770      	bx	lr

080046a0 <QUEUE_Is_Full>:
 * `true` or `false`, based on whether the count of elements in the ring buffer
 * `rb` is equal to the predefined size `RING_BUFFER_SIZE`.
 */
bool
QUEUE_Is_Full (ring_buffer_t *rb)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  return (rb->u32_count == (uint32_t)RING_BUFFER_SIZE);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	2b80      	cmp	r3, #128	@ 0x80
 80046ae:	bf0c      	ite	eq
 80046b0:	2301      	moveq	r3, #1
 80046b2:	2300      	movne	r3, #0
 80046b4:	b2db      	uxtb	r3, r3
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	370c      	adds	r7, #12
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bc80      	pop	{r7}
 80046be:	4770      	bx	lr

080046c0 <QUEUE_Push_Data>:
 * represents the data element that needs to be added to the ring buffer. It is
 * of type `char`, which means it can store a single character (1 byte) of data.
 */
void
QUEUE_Push_Data (ring_buffer_t *rb, char element)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	460b      	mov	r3, r1
 80046ca:	70fb      	strb	r3, [r7, #3]
  if (QUEUE_Is_Full(rb))
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f7ff ffe7 	bl	80046a0 <QUEUE_Is_Full>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d002      	beq.n	80046de <QUEUE_Push_Data+0x1e>
  {
    QUEUE_Reset(rb);
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f7ff ffbf 	bl	800465c <QUEUE_Reset>
  }
  *(rb->u8_buffer + rb->u32_in) = element;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	4413      	add	r3, r2
 80046e8:	78fa      	ldrb	r2, [r7, #3]
 80046ea:	701a      	strb	r2, [r3, #0]

  rb->u32_in = (rb->u32_in + 1) & ((uint32_t)RING_BUFFER_SIZE - 1);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	3301      	adds	r3, #1
 80046f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	605a      	str	r2, [r3, #4]
  rb->u32_count++;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	1c5a      	adds	r2, r3, #1
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	60da      	str	r2, [r3, #12]
}
 8004704:	bf00      	nop
 8004706:	3708      	adds	r7, #8
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}

0800470c <QUEUE_Pull_Data>:
 * @return The function `QUEUE_Pull_Data` is returning a `uint8_t` data value
 * from the ring buffer pointed to by the `rb` parameter.
 */
uint8_t
QUEUE_Pull_Data (ring_buffer_t *rb)
{
 800470c:	b590      	push	{r4, r7, lr}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  if (QUEUE_Is_Empty(rb))
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f7ff ffb3 	bl	8004680 <QUEUE_Is_Empty>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d001      	beq.n	8004724 <QUEUE_Pull_Data+0x18>
  {
    return 0xFF;
 8004720:	23ff      	movs	r3, #255	@ 0xff
 8004722:	e013      	b.n	800474c <QUEUE_Pull_Data+0x40>
  }
  register uint8_t data = *(rb->u8_buffer + rb->u32_out);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	4413      	add	r3, r2
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	b2dc      	uxtb	r4, r3

  rb->u32_out = (rb->u32_out + 1) & ((uint32_t)RING_BUFFER_SIZE - 1);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	3301      	adds	r3, #1
 8004738:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	609a      	str	r2, [r3, #8]
  rb->u32_count--;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	1e5a      	subs	r2, r3, #1
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	60da      	str	r2, [r3, #12]

  return data;
 800474a:	4623      	mov	r3, r4
}
 800474c:	4618      	mov	r0, r3
 800474e:	370c      	adds	r7, #12
 8004750:	46bd      	mov	sp, r7
 8004752:	bd90      	pop	{r4, r7, pc}
 8004754:	0000      	movs	r0, r0
	...

08004758 <VCF_Process>:
/**********************
 *    PUBLIC FUNCTIONS
 **********************/
uint32_t
VCF_Process (float voltage)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  float temp = -0.172233513 * voltage + 115.5723622;
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f7fb fe6b 	bl	800043c <__aeabi_f2d>
 8004766:	a310      	add	r3, pc, #64	@ (adr r3, 80047a8 <VCF_Process+0x50>)
 8004768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800476c:	f7fb febe 	bl	80004ec <__aeabi_dmul>
 8004770:	4602      	mov	r2, r0
 8004772:	460b      	mov	r3, r1
 8004774:	4610      	mov	r0, r2
 8004776:	4619      	mov	r1, r3
 8004778:	a30d      	add	r3, pc, #52	@ (adr r3, 80047b0 <VCF_Process+0x58>)
 800477a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800477e:	f7fb fcff 	bl	8000180 <__adddf3>
 8004782:	4602      	mov	r2, r0
 8004784:	460b      	mov	r3, r1
 8004786:	4610      	mov	r0, r2
 8004788:	4619      	mov	r1, r3
 800478a:	f7fc f987 	bl	8000a9c <__aeabi_d2f>
 800478e:	4603      	mov	r3, r0
 8004790:	60fb      	str	r3, [r7, #12]
  return (uint32_t)temp;
 8004792:	68f8      	ldr	r0, [r7, #12]
 8004794:	f7fc fca6 	bl	80010e4 <__aeabi_f2uiz>
 8004798:	4603      	mov	r3, r0
}
 800479a:	4618      	mov	r0, r3
 800479c:	3710      	adds	r7, #16
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	f3af 8000 	nop.w
 80047a8:	6cce1abc 	.word	0x6cce1abc
 80047ac:	bfc60bbf 	.word	0xbfc60bbf
 80047b0:	95109ddd 	.word	0x95109ddd
 80047b4:	405ce4a1 	.word	0x405ce4a1

080047b8 <SCH_TASK_CreateTask>:
 *         otherwise returns STS_ERROR.
 */
status_t
SCH_TASK_CreateTask (SCH_TASK_HANDLE         *pHandle,
                     SCH_TaskPropertyTypedef *pTaskProperty)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b085      	sub	sp, #20
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
  status_t status
 80047c2:	2301      	movs	r3, #1
 80047c4:	73fb      	strb	r3, [r7, #15]
      = STS_ERROR; /**< @brief Initialize status to indicate error. */

  /**< @brief Ensure valid parameters are provided */
  if (pHandle && pTaskProperty)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d029      	beq.n	8004820 <SCH_TASK_CreateTask+0x68>
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d026      	beq.n	8004820 <SCH_TASK_CreateTask+0x68>
  {
    /**< @brief Check if there's room for more tasks */
    if (s_NumOfTaskScheduled < (MAX_TASK - 1))
 80047d2:	4b16      	ldr	r3, [pc, #88]	@ (800482c <SCH_TASK_CreateTask+0x74>)
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	2b12      	cmp	r3, #18
 80047d8:	d822      	bhi.n	8004820 <SCH_TASK_CreateTask+0x68>
    {
      SCH_TaskContextTypedef *pTaskContext
          = &s_TaskContext[s_NumOfTaskScheduled];
 80047da:	4b14      	ldr	r3, [pc, #80]	@ (800482c <SCH_TASK_CreateTask+0x74>)
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	461a      	mov	r2, r3
      SCH_TaskContextTypedef *pTaskContext
 80047e0:	4613      	mov	r3, r2
 80047e2:	005b      	lsls	r3, r3, #1
 80047e4:	4413      	add	r3, r2
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	4a11      	ldr	r2, [pc, #68]	@ (8004830 <SCH_TASK_CreateTask+0x78>)
 80047ea:	4413      	add	r3, r2
 80047ec:	60bb      	str	r3, [r7, #8]

      /**< @brief Set task properties in task context */
      pTaskContext->pTaskProperty = pTaskProperty;
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	683a      	ldr	r2, [r7, #0]
 80047f2:	609a      	str	r2, [r3, #8]
      pTaskContext->taskFlag      = FALSE;
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	2200      	movs	r2, #0
 80047f8:	805a      	strh	r2, [r3, #2]
      pTaskContext->taskTick      = pTaskProperty->taskTick;
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	689a      	ldr	r2, [r3, #8]
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	605a      	str	r2, [r3, #4]
      pTaskContext->taskState     = TASK_StateReady;
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	2201      	movs	r2, #1
 8004806:	701a      	strb	r2, [r3, #0]

      /**< @brief Provide task handle to caller */
      *pHandle = s_NumOfTaskScheduled;
 8004808:	4b08      	ldr	r3, [pc, #32]	@ (800482c <SCH_TASK_CreateTask+0x74>)
 800480a:	781a      	ldrb	r2, [r3, #0]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	701a      	strb	r2, [r3, #0]

      /**< @brief Increment task count */
      s_NumOfTaskScheduled++;
 8004810:	4b06      	ldr	r3, [pc, #24]	@ (800482c <SCH_TASK_CreateTask+0x74>)
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	3301      	adds	r3, #1
 8004816:	b2da      	uxtb	r2, r3
 8004818:	4b04      	ldr	r3, [pc, #16]	@ (800482c <SCH_TASK_CreateTask+0x74>)
 800481a:	701a      	strb	r2, [r3, #0]

      /**< @brief Task registered successfully */
      status = STS_DONE;
 800481c:	2300      	movs	r3, #0
 800481e:	73fb      	strb	r3, [r7, #15]
    }
  }

  /**< @brief Return the status of the operation. */
  return status;
 8004820:	7bfb      	ldrb	r3, [r7, #15]
}
 8004822:	4618      	mov	r0, r3
 8004824:	3714      	adds	r7, #20
 8004826:	46bd      	mov	sp, r7
 8004828:	bc80      	pop	{r7}
 800482a:	4770      	bx	lr
 800482c:	20000580 	.word	0x20000580
 8004830:	20000490 	.word	0x20000490

08004834 <SCH_RunSystemTickTimer>:
 * and timer ticks, checks if their periods have elapsed, and updates their
 * flags accordingly. Additionally, it decrements software timers.
 */
void
SCH_RunSystemTickTimer (void)
{
 8004834:	b480      	push	{r7}
 8004836:	b085      	sub	sp, #20
 8004838:	af00      	add	r7, sp, #0
  uint8_t                 timerIndex; /**< @brief Index variable for timers. */
  SCH_TimerContextTypedef
      *pTimerContext; /**< @brief Pointer to timer context. */

  /**< @brief Increment System Tick counter */
  s_SystemTick++;
 800483a:	4b42      	ldr	r3, [pc, #264]	@ (8004944 <SCH_RunSystemTickTimer+0x110>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	3301      	adds	r3, #1
 8004840:	4a40      	ldr	r2, [pc, #256]	@ (8004944 <SCH_RunSystemTickTimer+0x110>)
 8004842:	6013      	str	r3, [r2, #0]

  /**< @brief Check Status of periodic tasks */
  for (taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 8004844:	2300      	movs	r3, #0
 8004846:	73fb      	strb	r3, [r7, #15]
 8004848:	e025      	b.n	8004896 <SCH_RunSystemTickTimer+0x62>
  {
    /**< @brief Get Task Context */
    pTaskContext = &s_TaskContext[taskIndex];
 800484a:	7bfa      	ldrb	r2, [r7, #15]
 800484c:	4613      	mov	r3, r2
 800484e:	005b      	lsls	r3, r3, #1
 8004850:	4413      	add	r3, r2
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	4a3c      	ldr	r2, [pc, #240]	@ (8004948 <SCH_RunSystemTickTimer+0x114>)
 8004856:	4413      	add	r3, r2
 8004858:	607b      	str	r3, [r7, #4]

    /**< @brief Check type and State of the task */
    if ((SCH_TASK_SYNC == pTaskContext->pTaskProperty->taskType)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	2b01      	cmp	r3, #1
 8004862:	d115      	bne.n	8004890 <SCH_RunSystemTickTimer+0x5c>
        && (TASK_StateReady == pTaskContext->taskState))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	2b01      	cmp	r3, #1
 800486a:	d111      	bne.n	8004890 <SCH_RunSystemTickTimer+0x5c>
    {
      /**< @brief Increment task tick */
      pTaskContext->taskTick += 1;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	1c5a      	adds	r2, r3, #1
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	605a      	str	r2, [r3, #4]

      /**< @brief Check if we reached task period */
      if (pTaskContext->taskTick >= pTaskContext->pTaskProperty->taskPeriodInMS)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	6892      	ldr	r2, [r2, #8]
 800487e:	8852      	ldrh	r2, [r2, #2]
 8004880:	4293      	cmp	r3, r2
 8004882:	d305      	bcc.n	8004890 <SCH_RunSystemTickTimer+0x5c>
      {
        /**< @brief Reset Task tick timer */
        pTaskContext->taskTick = RESET;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	605a      	str	r2, [r3, #4]
        /**< @brief Enable Flag */
        pTaskContext->taskFlag = TRUE;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2201      	movs	r2, #1
 800488e:	805a      	strh	r2, [r3, #2]
  for (taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 8004890:	7bfb      	ldrb	r3, [r7, #15]
 8004892:	3301      	adds	r3, #1
 8004894:	73fb      	strb	r3, [r7, #15]
 8004896:	4b2d      	ldr	r3, [pc, #180]	@ (800494c <SCH_RunSystemTickTimer+0x118>)
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	7bfa      	ldrb	r2, [r7, #15]
 800489c:	429a      	cmp	r2, r3
 800489e:	d3d4      	bcc.n	800484a <SCH_RunSystemTickTimer+0x16>
      }
    }
  }

  /**< @brief Check Status of timers */
  for (timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 80048a0:	2300      	movs	r3, #0
 80048a2:	73bb      	strb	r3, [r7, #14]
 80048a4:	e02b      	b.n	80048fe <SCH_RunSystemTickTimer+0xca>
  {
    /**< @brief Get Timer Context */
    pTimerContext = &s_TimerContext[timerIndex];
 80048a6:	7bba      	ldrb	r2, [r7, #14]
 80048a8:	4613      	mov	r3, r2
 80048aa:	005b      	lsls	r3, r3, #1
 80048ac:	4413      	add	r3, r2
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	4a27      	ldr	r2, [pc, #156]	@ (8004950 <SCH_RunSystemTickTimer+0x11c>)
 80048b2:	4413      	add	r3, r2
 80048b4:	60bb      	str	r3, [r7, #8]

    /**< @brief Check type and State of the timer */
    if (TIM_StateRun == pTimerContext->timerState)
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d11c      	bne.n	80048f8 <SCH_RunSystemTickTimer+0xc4>
    {
      /**< @brief Increment timer tick */
      pTimerContext->timerTick += 1;
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	1c5a      	adds	r2, r3, #1
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	605a      	str	r2, [r3, #4]

      /**< @brief Check if we reached timer period */
      if (pTimerContext->timerTick
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	685b      	ldr	r3, [r3, #4]
          >= pTimerContext->pTimerProperty->timerPeriodInMS)
 80048cc:	68ba      	ldr	r2, [r7, #8]
 80048ce:	6892      	ldr	r2, [r2, #8]
 80048d0:	8852      	ldrh	r2, [r2, #2]
      if (pTimerContext->timerTick
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d310      	bcc.n	80048f8 <SCH_RunSystemTickTimer+0xc4>
      {
        /**< @brief Enable Flag */
        pTimerContext->timerFlag = TRUE;
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	2201      	movs	r2, #1
 80048da:	805a      	strh	r2, [r3, #2]
        /**< @brief Reset tick timer */
        pTimerContext->timerTick = RESET;
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	2200      	movs	r2, #0
 80048e0:	605a      	str	r2, [r3, #4]
        /**< @brief Check timer type and change the state */
        pTimerContext->timerState
            = (SCH_TIMER_PERIODIC == pTimerContext->pTimerProperty->timerType)
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	781b      	ldrb	r3, [r3, #0]
                  ? TIM_StateRun
                  : TIM_StateStop;
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	bf0c      	ite	eq
 80048ec:	2301      	moveq	r3, #1
 80048ee:	2300      	movne	r3, #0
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	461a      	mov	r2, r3
            = (SCH_TIMER_PERIODIC == pTimerContext->pTimerProperty->timerType)
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	701a      	strb	r2, [r3, #0]
  for (timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 80048f8:	7bbb      	ldrb	r3, [r7, #14]
 80048fa:	3301      	adds	r3, #1
 80048fc:	73bb      	strb	r3, [r7, #14]
 80048fe:	4b15      	ldr	r3, [pc, #84]	@ (8004954 <SCH_RunSystemTickTimer+0x120>)
 8004900:	781b      	ldrb	r3, [r3, #0]
 8004902:	7bba      	ldrb	r2, [r7, #14]
 8004904:	429a      	cmp	r2, r3
 8004906:	d3ce      	bcc.n	80048a6 <SCH_RunSystemTickTimer+0x72>
      }
    }
  }

  /**< @brief Update software timers */
  for (timerIndex = 0; timerIndex < SCH_TIM_LAST; timerIndex++)
 8004908:	2300      	movs	r3, #0
 800490a:	73bb      	strb	r3, [r7, #14]
 800490c:	e010      	b.n	8004930 <SCH_RunSystemTickTimer+0xfc>
  {
    if (s_SoftTimers[timerIndex] > 0)
 800490e:	7bbb      	ldrb	r3, [r7, #14]
 8004910:	4a11      	ldr	r2, [pc, #68]	@ (8004958 <SCH_RunSystemTickTimer+0x124>)
 8004912:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d007      	beq.n	800492a <SCH_RunSystemTickTimer+0xf6>
    {
      s_SoftTimers[timerIndex]--;
 800491a:	7bbb      	ldrb	r3, [r7, #14]
 800491c:	4a0e      	ldr	r2, [pc, #56]	@ (8004958 <SCH_RunSystemTickTimer+0x124>)
 800491e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004922:	3a01      	subs	r2, #1
 8004924:	490c      	ldr	r1, [pc, #48]	@ (8004958 <SCH_RunSystemTickTimer+0x124>)
 8004926:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (timerIndex = 0; timerIndex < SCH_TIM_LAST; timerIndex++)
 800492a:	7bbb      	ldrb	r3, [r7, #14]
 800492c:	3301      	adds	r3, #1
 800492e:	73bb      	strb	r3, [r7, #14]
 8004930:	7bbb      	ldrb	r3, [r7, #14]
 8004932:	2b01      	cmp	r3, #1
 8004934:	d9eb      	bls.n	800490e <SCH_RunSystemTickTimer+0xda>
    }
  }
}
 8004936:	bf00      	nop
 8004938:	bf00      	nop
 800493a:	3714      	adds	r7, #20
 800493c:	46bd      	mov	sp, r7
 800493e:	bc80      	pop	{r7}
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	20000678 	.word	0x20000678
 8004948:	20000490 	.word	0x20000490
 800494c:	20000580 	.word	0x20000580
 8004950:	20000584 	.word	0x20000584
 8004954:	20000674 	.word	0x20000674
 8004958:	2000067c 	.word	0x2000067c

0800495c <SCH_StartScheduler>:
 * the system tick timer or performs any necessary operations to begin the
 * scheduling of tasks and timers.
 */
void
SCH_StartScheduler (void)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	af00      	add	r7, sp, #0
  /**< @brief Scheduler by initiating the system tick timer */
  SCH_START;
 8004960:	f7fd fabc 	bl	8001edc <BSP_SYSTICK_TimerStart>
}
 8004964:	bf00      	nop
 8004966:	bd80      	pop	{r7, pc}

08004968 <SCH_HandleScheduledTask>:
 * is set and it is in the ready state, its associated function is called.
 * Similarly, if a timer's flag is set, its callback function is invoked.
 */
void
SCH_HandleScheduledTask (void)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
  uint8_t                 timerIndex; /**< @brief Index variable for timers. */
  SCH_TimerContextTypedef
      *pTimerContext; /**< @brief Pointer to timer context. */

  /**< @brief Handle scheduled tasks */
  for (taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 800496e:	2300      	movs	r3, #0
 8004970:	73fb      	strb	r3, [r7, #15]
 8004972:	e01e      	b.n	80049b2 <SCH_HandleScheduledTask+0x4a>
  {
    /**< @brief Get Task Context */
    pTaskContext = &s_TaskContext[taskIndex];
 8004974:	7bfa      	ldrb	r2, [r7, #15]
 8004976:	4613      	mov	r3, r2
 8004978:	005b      	lsls	r3, r3, #1
 800497a:	4413      	add	r3, r2
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	4a23      	ldr	r2, [pc, #140]	@ (8004a0c <SCH_HandleScheduledTask+0xa4>)
 8004980:	4413      	add	r3, r2
 8004982:	607b      	str	r3, [r7, #4]

    /**< @brief Check type and State of the task */
    if ((TRUE == pTaskContext->taskFlag)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	885b      	ldrh	r3, [r3, #2]
 8004988:	2b01      	cmp	r3, #1
 800498a:	d10f      	bne.n	80049ac <SCH_HandleScheduledTask+0x44>
        && (TASK_StateReady == pTaskContext->taskState))
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	2b01      	cmp	r3, #1
 8004992:	d10b      	bne.n	80049ac <SCH_HandleScheduledTask+0x44>
    {
      pTaskContext->taskFlag = FALSE;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	805a      	strh	r2, [r3, #2]
      /**< @brief Call task function if defined */
      if (pTaskContext->pTaskProperty->taskFunction)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d003      	beq.n	80049ac <SCH_HandleScheduledTask+0x44>
      {
        pTaskContext->pTaskProperty->taskFunction();
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	4798      	blx	r3
  for (taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 80049ac:	7bfb      	ldrb	r3, [r7, #15]
 80049ae:	3301      	adds	r3, #1
 80049b0:	73fb      	strb	r3, [r7, #15]
 80049b2:	4b17      	ldr	r3, [pc, #92]	@ (8004a10 <SCH_HandleScheduledTask+0xa8>)
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	7bfa      	ldrb	r2, [r7, #15]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d3db      	bcc.n	8004974 <SCH_HandleScheduledTask+0xc>
      }
    }
  }

  /**< @brief Handle scheduled timers */
  for (timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 80049bc:	2300      	movs	r3, #0
 80049be:	73bb      	strb	r3, [r7, #14]
 80049c0:	e01a      	b.n	80049f8 <SCH_HandleScheduledTask+0x90>
  {
    /**< @brief Get Timer Context */
    pTimerContext = &s_TimerContext[timerIndex];
 80049c2:	7bba      	ldrb	r2, [r7, #14]
 80049c4:	4613      	mov	r3, r2
 80049c6:	005b      	lsls	r3, r3, #1
 80049c8:	4413      	add	r3, r2
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	4a11      	ldr	r2, [pc, #68]	@ (8004a14 <SCH_HandleScheduledTask+0xac>)
 80049ce:	4413      	add	r3, r2
 80049d0:	60bb      	str	r3, [r7, #8]

    /**< @brief Check timer flag */
    if (TRUE == pTimerContext->timerFlag)
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	885b      	ldrh	r3, [r3, #2]
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d10b      	bne.n	80049f2 <SCH_HandleScheduledTask+0x8a>
    {
      pTimerContext->timerFlag = FALSE;
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	2200      	movs	r2, #0
 80049de:	805a      	strh	r2, [r3, #2]
      /**< @brief Call timer callback function if defined */
      if (pTimerContext->pTimerProperty->timerCallbackFunction)
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d003      	beq.n	80049f2 <SCH_HandleScheduledTask+0x8a>
      {
        pTimerContext->pTimerProperty->timerCallbackFunction();
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	4798      	blx	r3
  for (timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 80049f2:	7bbb      	ldrb	r3, [r7, #14]
 80049f4:	3301      	adds	r3, #1
 80049f6:	73bb      	strb	r3, [r7, #14]
 80049f8:	4b07      	ldr	r3, [pc, #28]	@ (8004a18 <SCH_HandleScheduledTask+0xb0>)
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	7bba      	ldrb	r2, [r7, #14]
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d3df      	bcc.n	80049c2 <SCH_HandleScheduledTask+0x5a>
      }
    }
  }
}
 8004a02:	bf00      	nop
 8004a04:	bf00      	nop
 8004a06:	3710      	adds	r7, #16
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	20000490 	.word	0x20000490
 8004a10:	20000580 	.word	0x20000580
 8004a14:	20000584 	.word	0x20000584
 8004a18:	20000674 	.word	0x20000674

08004a1c <malloc>:
 8004a1c:	4b02      	ldr	r3, [pc, #8]	@ (8004a28 <malloc+0xc>)
 8004a1e:	4601      	mov	r1, r0
 8004a20:	6818      	ldr	r0, [r3, #0]
 8004a22:	f000 b825 	b.w	8004a70 <_malloc_r>
 8004a26:	bf00      	nop
 8004a28:	20000088 	.word	0x20000088

08004a2c <sbrk_aligned>:
 8004a2c:	b570      	push	{r4, r5, r6, lr}
 8004a2e:	4e0f      	ldr	r6, [pc, #60]	@ (8004a6c <sbrk_aligned+0x40>)
 8004a30:	460c      	mov	r4, r1
 8004a32:	6831      	ldr	r1, [r6, #0]
 8004a34:	4605      	mov	r5, r0
 8004a36:	b911      	cbnz	r1, 8004a3e <sbrk_aligned+0x12>
 8004a38:	f000 fe68 	bl	800570c <_sbrk_r>
 8004a3c:	6030      	str	r0, [r6, #0]
 8004a3e:	4621      	mov	r1, r4
 8004a40:	4628      	mov	r0, r5
 8004a42:	f000 fe63 	bl	800570c <_sbrk_r>
 8004a46:	1c43      	adds	r3, r0, #1
 8004a48:	d103      	bne.n	8004a52 <sbrk_aligned+0x26>
 8004a4a:	f04f 34ff 	mov.w	r4, #4294967295
 8004a4e:	4620      	mov	r0, r4
 8004a50:	bd70      	pop	{r4, r5, r6, pc}
 8004a52:	1cc4      	adds	r4, r0, #3
 8004a54:	f024 0403 	bic.w	r4, r4, #3
 8004a58:	42a0      	cmp	r0, r4
 8004a5a:	d0f8      	beq.n	8004a4e <sbrk_aligned+0x22>
 8004a5c:	1a21      	subs	r1, r4, r0
 8004a5e:	4628      	mov	r0, r5
 8004a60:	f000 fe54 	bl	800570c <_sbrk_r>
 8004a64:	3001      	adds	r0, #1
 8004a66:	d1f2      	bne.n	8004a4e <sbrk_aligned+0x22>
 8004a68:	e7ef      	b.n	8004a4a <sbrk_aligned+0x1e>
 8004a6a:	bf00      	nop
 8004a6c:	20000684 	.word	0x20000684

08004a70 <_malloc_r>:
 8004a70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a74:	1ccd      	adds	r5, r1, #3
 8004a76:	f025 0503 	bic.w	r5, r5, #3
 8004a7a:	3508      	adds	r5, #8
 8004a7c:	2d0c      	cmp	r5, #12
 8004a7e:	bf38      	it	cc
 8004a80:	250c      	movcc	r5, #12
 8004a82:	2d00      	cmp	r5, #0
 8004a84:	4606      	mov	r6, r0
 8004a86:	db01      	blt.n	8004a8c <_malloc_r+0x1c>
 8004a88:	42a9      	cmp	r1, r5
 8004a8a:	d904      	bls.n	8004a96 <_malloc_r+0x26>
 8004a8c:	230c      	movs	r3, #12
 8004a8e:	6033      	str	r3, [r6, #0]
 8004a90:	2000      	movs	r0, #0
 8004a92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a96:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004b6c <_malloc_r+0xfc>
 8004a9a:	f000 f869 	bl	8004b70 <__malloc_lock>
 8004a9e:	f8d8 3000 	ldr.w	r3, [r8]
 8004aa2:	461c      	mov	r4, r3
 8004aa4:	bb44      	cbnz	r4, 8004af8 <_malloc_r+0x88>
 8004aa6:	4629      	mov	r1, r5
 8004aa8:	4630      	mov	r0, r6
 8004aaa:	f7ff ffbf 	bl	8004a2c <sbrk_aligned>
 8004aae:	1c43      	adds	r3, r0, #1
 8004ab0:	4604      	mov	r4, r0
 8004ab2:	d158      	bne.n	8004b66 <_malloc_r+0xf6>
 8004ab4:	f8d8 4000 	ldr.w	r4, [r8]
 8004ab8:	4627      	mov	r7, r4
 8004aba:	2f00      	cmp	r7, #0
 8004abc:	d143      	bne.n	8004b46 <_malloc_r+0xd6>
 8004abe:	2c00      	cmp	r4, #0
 8004ac0:	d04b      	beq.n	8004b5a <_malloc_r+0xea>
 8004ac2:	6823      	ldr	r3, [r4, #0]
 8004ac4:	4639      	mov	r1, r7
 8004ac6:	4630      	mov	r0, r6
 8004ac8:	eb04 0903 	add.w	r9, r4, r3
 8004acc:	f000 fe1e 	bl	800570c <_sbrk_r>
 8004ad0:	4581      	cmp	r9, r0
 8004ad2:	d142      	bne.n	8004b5a <_malloc_r+0xea>
 8004ad4:	6821      	ldr	r1, [r4, #0]
 8004ad6:	4630      	mov	r0, r6
 8004ad8:	1a6d      	subs	r5, r5, r1
 8004ada:	4629      	mov	r1, r5
 8004adc:	f7ff ffa6 	bl	8004a2c <sbrk_aligned>
 8004ae0:	3001      	adds	r0, #1
 8004ae2:	d03a      	beq.n	8004b5a <_malloc_r+0xea>
 8004ae4:	6823      	ldr	r3, [r4, #0]
 8004ae6:	442b      	add	r3, r5
 8004ae8:	6023      	str	r3, [r4, #0]
 8004aea:	f8d8 3000 	ldr.w	r3, [r8]
 8004aee:	685a      	ldr	r2, [r3, #4]
 8004af0:	bb62      	cbnz	r2, 8004b4c <_malloc_r+0xdc>
 8004af2:	f8c8 7000 	str.w	r7, [r8]
 8004af6:	e00f      	b.n	8004b18 <_malloc_r+0xa8>
 8004af8:	6822      	ldr	r2, [r4, #0]
 8004afa:	1b52      	subs	r2, r2, r5
 8004afc:	d420      	bmi.n	8004b40 <_malloc_r+0xd0>
 8004afe:	2a0b      	cmp	r2, #11
 8004b00:	d917      	bls.n	8004b32 <_malloc_r+0xc2>
 8004b02:	1961      	adds	r1, r4, r5
 8004b04:	42a3      	cmp	r3, r4
 8004b06:	6025      	str	r5, [r4, #0]
 8004b08:	bf18      	it	ne
 8004b0a:	6059      	strne	r1, [r3, #4]
 8004b0c:	6863      	ldr	r3, [r4, #4]
 8004b0e:	bf08      	it	eq
 8004b10:	f8c8 1000 	streq.w	r1, [r8]
 8004b14:	5162      	str	r2, [r4, r5]
 8004b16:	604b      	str	r3, [r1, #4]
 8004b18:	4630      	mov	r0, r6
 8004b1a:	f000 f82f 	bl	8004b7c <__malloc_unlock>
 8004b1e:	f104 000b 	add.w	r0, r4, #11
 8004b22:	1d23      	adds	r3, r4, #4
 8004b24:	f020 0007 	bic.w	r0, r0, #7
 8004b28:	1ac2      	subs	r2, r0, r3
 8004b2a:	bf1c      	itt	ne
 8004b2c:	1a1b      	subne	r3, r3, r0
 8004b2e:	50a3      	strne	r3, [r4, r2]
 8004b30:	e7af      	b.n	8004a92 <_malloc_r+0x22>
 8004b32:	6862      	ldr	r2, [r4, #4]
 8004b34:	42a3      	cmp	r3, r4
 8004b36:	bf0c      	ite	eq
 8004b38:	f8c8 2000 	streq.w	r2, [r8]
 8004b3c:	605a      	strne	r2, [r3, #4]
 8004b3e:	e7eb      	b.n	8004b18 <_malloc_r+0xa8>
 8004b40:	4623      	mov	r3, r4
 8004b42:	6864      	ldr	r4, [r4, #4]
 8004b44:	e7ae      	b.n	8004aa4 <_malloc_r+0x34>
 8004b46:	463c      	mov	r4, r7
 8004b48:	687f      	ldr	r7, [r7, #4]
 8004b4a:	e7b6      	b.n	8004aba <_malloc_r+0x4a>
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	42a3      	cmp	r3, r4
 8004b52:	d1fb      	bne.n	8004b4c <_malloc_r+0xdc>
 8004b54:	2300      	movs	r3, #0
 8004b56:	6053      	str	r3, [r2, #4]
 8004b58:	e7de      	b.n	8004b18 <_malloc_r+0xa8>
 8004b5a:	230c      	movs	r3, #12
 8004b5c:	4630      	mov	r0, r6
 8004b5e:	6033      	str	r3, [r6, #0]
 8004b60:	f000 f80c 	bl	8004b7c <__malloc_unlock>
 8004b64:	e794      	b.n	8004a90 <_malloc_r+0x20>
 8004b66:	6005      	str	r5, [r0, #0]
 8004b68:	e7d6      	b.n	8004b18 <_malloc_r+0xa8>
 8004b6a:	bf00      	nop
 8004b6c:	20000688 	.word	0x20000688

08004b70 <__malloc_lock>:
 8004b70:	4801      	ldr	r0, [pc, #4]	@ (8004b78 <__malloc_lock+0x8>)
 8004b72:	f000 be18 	b.w	80057a6 <__retarget_lock_acquire_recursive>
 8004b76:	bf00      	nop
 8004b78:	200007cc 	.word	0x200007cc

08004b7c <__malloc_unlock>:
 8004b7c:	4801      	ldr	r0, [pc, #4]	@ (8004b84 <__malloc_unlock+0x8>)
 8004b7e:	f000 be13 	b.w	80057a8 <__retarget_lock_release_recursive>
 8004b82:	bf00      	nop
 8004b84:	200007cc 	.word	0x200007cc

08004b88 <__cvt>:
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b8e:	461d      	mov	r5, r3
 8004b90:	bfbb      	ittet	lt
 8004b92:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8004b96:	461d      	movlt	r5, r3
 8004b98:	2300      	movge	r3, #0
 8004b9a:	232d      	movlt	r3, #45	@ 0x2d
 8004b9c:	b088      	sub	sp, #32
 8004b9e:	4614      	mov	r4, r2
 8004ba0:	bfb8      	it	lt
 8004ba2:	4614      	movlt	r4, r2
 8004ba4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004ba6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8004ba8:	7013      	strb	r3, [r2, #0]
 8004baa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004bac:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8004bb0:	f023 0820 	bic.w	r8, r3, #32
 8004bb4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004bb8:	d005      	beq.n	8004bc6 <__cvt+0x3e>
 8004bba:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004bbe:	d100      	bne.n	8004bc2 <__cvt+0x3a>
 8004bc0:	3601      	adds	r6, #1
 8004bc2:	2302      	movs	r3, #2
 8004bc4:	e000      	b.n	8004bc8 <__cvt+0x40>
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	aa07      	add	r2, sp, #28
 8004bca:	9204      	str	r2, [sp, #16]
 8004bcc:	aa06      	add	r2, sp, #24
 8004bce:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004bd2:	e9cd 3600 	strd	r3, r6, [sp]
 8004bd6:	4622      	mov	r2, r4
 8004bd8:	462b      	mov	r3, r5
 8004bda:	f000 fe7d 	bl	80058d8 <_dtoa_r>
 8004bde:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004be2:	4607      	mov	r7, r0
 8004be4:	d119      	bne.n	8004c1a <__cvt+0x92>
 8004be6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004be8:	07db      	lsls	r3, r3, #31
 8004bea:	d50e      	bpl.n	8004c0a <__cvt+0x82>
 8004bec:	eb00 0906 	add.w	r9, r0, r6
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	4620      	mov	r0, r4
 8004bf6:	4629      	mov	r1, r5
 8004bf8:	f7fb fee0 	bl	80009bc <__aeabi_dcmpeq>
 8004bfc:	b108      	cbz	r0, 8004c02 <__cvt+0x7a>
 8004bfe:	f8cd 901c 	str.w	r9, [sp, #28]
 8004c02:	2230      	movs	r2, #48	@ 0x30
 8004c04:	9b07      	ldr	r3, [sp, #28]
 8004c06:	454b      	cmp	r3, r9
 8004c08:	d31e      	bcc.n	8004c48 <__cvt+0xc0>
 8004c0a:	4638      	mov	r0, r7
 8004c0c:	9b07      	ldr	r3, [sp, #28]
 8004c0e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8004c10:	1bdb      	subs	r3, r3, r7
 8004c12:	6013      	str	r3, [r2, #0]
 8004c14:	b008      	add	sp, #32
 8004c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c1a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004c1e:	eb00 0906 	add.w	r9, r0, r6
 8004c22:	d1e5      	bne.n	8004bf0 <__cvt+0x68>
 8004c24:	7803      	ldrb	r3, [r0, #0]
 8004c26:	2b30      	cmp	r3, #48	@ 0x30
 8004c28:	d10a      	bne.n	8004c40 <__cvt+0xb8>
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	4620      	mov	r0, r4
 8004c30:	4629      	mov	r1, r5
 8004c32:	f7fb fec3 	bl	80009bc <__aeabi_dcmpeq>
 8004c36:	b918      	cbnz	r0, 8004c40 <__cvt+0xb8>
 8004c38:	f1c6 0601 	rsb	r6, r6, #1
 8004c3c:	f8ca 6000 	str.w	r6, [sl]
 8004c40:	f8da 3000 	ldr.w	r3, [sl]
 8004c44:	4499      	add	r9, r3
 8004c46:	e7d3      	b.n	8004bf0 <__cvt+0x68>
 8004c48:	1c59      	adds	r1, r3, #1
 8004c4a:	9107      	str	r1, [sp, #28]
 8004c4c:	701a      	strb	r2, [r3, #0]
 8004c4e:	e7d9      	b.n	8004c04 <__cvt+0x7c>

08004c50 <__exponent>:
 8004c50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c52:	2900      	cmp	r1, #0
 8004c54:	bfb6      	itet	lt
 8004c56:	232d      	movlt	r3, #45	@ 0x2d
 8004c58:	232b      	movge	r3, #43	@ 0x2b
 8004c5a:	4249      	neglt	r1, r1
 8004c5c:	2909      	cmp	r1, #9
 8004c5e:	7002      	strb	r2, [r0, #0]
 8004c60:	7043      	strb	r3, [r0, #1]
 8004c62:	dd29      	ble.n	8004cb8 <__exponent+0x68>
 8004c64:	f10d 0307 	add.w	r3, sp, #7
 8004c68:	461d      	mov	r5, r3
 8004c6a:	270a      	movs	r7, #10
 8004c6c:	fbb1 f6f7 	udiv	r6, r1, r7
 8004c70:	461a      	mov	r2, r3
 8004c72:	fb07 1416 	mls	r4, r7, r6, r1
 8004c76:	3430      	adds	r4, #48	@ 0x30
 8004c78:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004c7c:	460c      	mov	r4, r1
 8004c7e:	2c63      	cmp	r4, #99	@ 0x63
 8004c80:	4631      	mov	r1, r6
 8004c82:	f103 33ff 	add.w	r3, r3, #4294967295
 8004c86:	dcf1      	bgt.n	8004c6c <__exponent+0x1c>
 8004c88:	3130      	adds	r1, #48	@ 0x30
 8004c8a:	1e94      	subs	r4, r2, #2
 8004c8c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004c90:	4623      	mov	r3, r4
 8004c92:	1c41      	adds	r1, r0, #1
 8004c94:	42ab      	cmp	r3, r5
 8004c96:	d30a      	bcc.n	8004cae <__exponent+0x5e>
 8004c98:	f10d 0309 	add.w	r3, sp, #9
 8004c9c:	1a9b      	subs	r3, r3, r2
 8004c9e:	42ac      	cmp	r4, r5
 8004ca0:	bf88      	it	hi
 8004ca2:	2300      	movhi	r3, #0
 8004ca4:	3302      	adds	r3, #2
 8004ca6:	4403      	add	r3, r0
 8004ca8:	1a18      	subs	r0, r3, r0
 8004caa:	b003      	add	sp, #12
 8004cac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cae:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004cb2:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004cb6:	e7ed      	b.n	8004c94 <__exponent+0x44>
 8004cb8:	2330      	movs	r3, #48	@ 0x30
 8004cba:	3130      	adds	r1, #48	@ 0x30
 8004cbc:	7083      	strb	r3, [r0, #2]
 8004cbe:	70c1      	strb	r1, [r0, #3]
 8004cc0:	1d03      	adds	r3, r0, #4
 8004cc2:	e7f1      	b.n	8004ca8 <__exponent+0x58>

08004cc4 <_printf_float>:
 8004cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cc8:	b091      	sub	sp, #68	@ 0x44
 8004cca:	460c      	mov	r4, r1
 8004ccc:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8004cd0:	4616      	mov	r6, r2
 8004cd2:	461f      	mov	r7, r3
 8004cd4:	4605      	mov	r5, r0
 8004cd6:	f000 fce1 	bl	800569c <_localeconv_r>
 8004cda:	6803      	ldr	r3, [r0, #0]
 8004cdc:	4618      	mov	r0, r3
 8004cde:	9308      	str	r3, [sp, #32]
 8004ce0:	f7fb fa40 	bl	8000164 <strlen>
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	930e      	str	r3, [sp, #56]	@ 0x38
 8004ce8:	f8d8 3000 	ldr.w	r3, [r8]
 8004cec:	9009      	str	r0, [sp, #36]	@ 0x24
 8004cee:	3307      	adds	r3, #7
 8004cf0:	f023 0307 	bic.w	r3, r3, #7
 8004cf4:	f103 0208 	add.w	r2, r3, #8
 8004cf8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004cfc:	f8d4 b000 	ldr.w	fp, [r4]
 8004d00:	f8c8 2000 	str.w	r2, [r8]
 8004d04:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004d08:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004d0c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004d0e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8004d12:	f04f 32ff 	mov.w	r2, #4294967295
 8004d16:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004d1a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004d1e:	4b9c      	ldr	r3, [pc, #624]	@ (8004f90 <_printf_float+0x2cc>)
 8004d20:	f7fb fe7e 	bl	8000a20 <__aeabi_dcmpun>
 8004d24:	bb70      	cbnz	r0, 8004d84 <_printf_float+0xc0>
 8004d26:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004d2a:	f04f 32ff 	mov.w	r2, #4294967295
 8004d2e:	4b98      	ldr	r3, [pc, #608]	@ (8004f90 <_printf_float+0x2cc>)
 8004d30:	f7fb fe58 	bl	80009e4 <__aeabi_dcmple>
 8004d34:	bb30      	cbnz	r0, 8004d84 <_printf_float+0xc0>
 8004d36:	2200      	movs	r2, #0
 8004d38:	2300      	movs	r3, #0
 8004d3a:	4640      	mov	r0, r8
 8004d3c:	4649      	mov	r1, r9
 8004d3e:	f7fb fe47 	bl	80009d0 <__aeabi_dcmplt>
 8004d42:	b110      	cbz	r0, 8004d4a <_printf_float+0x86>
 8004d44:	232d      	movs	r3, #45	@ 0x2d
 8004d46:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d4a:	4a92      	ldr	r2, [pc, #584]	@ (8004f94 <_printf_float+0x2d0>)
 8004d4c:	4b92      	ldr	r3, [pc, #584]	@ (8004f98 <_printf_float+0x2d4>)
 8004d4e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004d52:	bf94      	ite	ls
 8004d54:	4690      	movls	r8, r2
 8004d56:	4698      	movhi	r8, r3
 8004d58:	2303      	movs	r3, #3
 8004d5a:	f04f 0900 	mov.w	r9, #0
 8004d5e:	6123      	str	r3, [r4, #16]
 8004d60:	f02b 0304 	bic.w	r3, fp, #4
 8004d64:	6023      	str	r3, [r4, #0]
 8004d66:	4633      	mov	r3, r6
 8004d68:	4621      	mov	r1, r4
 8004d6a:	4628      	mov	r0, r5
 8004d6c:	9700      	str	r7, [sp, #0]
 8004d6e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8004d70:	f000 f9d4 	bl	800511c <_printf_common>
 8004d74:	3001      	adds	r0, #1
 8004d76:	f040 8090 	bne.w	8004e9a <_printf_float+0x1d6>
 8004d7a:	f04f 30ff 	mov.w	r0, #4294967295
 8004d7e:	b011      	add	sp, #68	@ 0x44
 8004d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d84:	4642      	mov	r2, r8
 8004d86:	464b      	mov	r3, r9
 8004d88:	4640      	mov	r0, r8
 8004d8a:	4649      	mov	r1, r9
 8004d8c:	f7fb fe48 	bl	8000a20 <__aeabi_dcmpun>
 8004d90:	b148      	cbz	r0, 8004da6 <_printf_float+0xe2>
 8004d92:	464b      	mov	r3, r9
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	bfb8      	it	lt
 8004d98:	232d      	movlt	r3, #45	@ 0x2d
 8004d9a:	4a80      	ldr	r2, [pc, #512]	@ (8004f9c <_printf_float+0x2d8>)
 8004d9c:	bfb8      	it	lt
 8004d9e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004da2:	4b7f      	ldr	r3, [pc, #508]	@ (8004fa0 <_printf_float+0x2dc>)
 8004da4:	e7d3      	b.n	8004d4e <_printf_float+0x8a>
 8004da6:	6863      	ldr	r3, [r4, #4]
 8004da8:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8004dac:	1c5a      	adds	r2, r3, #1
 8004dae:	d13f      	bne.n	8004e30 <_printf_float+0x16c>
 8004db0:	2306      	movs	r3, #6
 8004db2:	6063      	str	r3, [r4, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8004dba:	6023      	str	r3, [r4, #0]
 8004dbc:	9206      	str	r2, [sp, #24]
 8004dbe:	aa0e      	add	r2, sp, #56	@ 0x38
 8004dc0:	e9cd a204 	strd	sl, r2, [sp, #16]
 8004dc4:	aa0d      	add	r2, sp, #52	@ 0x34
 8004dc6:	9203      	str	r2, [sp, #12]
 8004dc8:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8004dcc:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004dd0:	6863      	ldr	r3, [r4, #4]
 8004dd2:	4642      	mov	r2, r8
 8004dd4:	9300      	str	r3, [sp, #0]
 8004dd6:	4628      	mov	r0, r5
 8004dd8:	464b      	mov	r3, r9
 8004dda:	910a      	str	r1, [sp, #40]	@ 0x28
 8004ddc:	f7ff fed4 	bl	8004b88 <__cvt>
 8004de0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004de2:	4680      	mov	r8, r0
 8004de4:	2947      	cmp	r1, #71	@ 0x47
 8004de6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8004de8:	d128      	bne.n	8004e3c <_printf_float+0x178>
 8004dea:	1cc8      	adds	r0, r1, #3
 8004dec:	db02      	blt.n	8004df4 <_printf_float+0x130>
 8004dee:	6863      	ldr	r3, [r4, #4]
 8004df0:	4299      	cmp	r1, r3
 8004df2:	dd40      	ble.n	8004e76 <_printf_float+0x1b2>
 8004df4:	f1aa 0a02 	sub.w	sl, sl, #2
 8004df8:	fa5f fa8a 	uxtb.w	sl, sl
 8004dfc:	4652      	mov	r2, sl
 8004dfe:	3901      	subs	r1, #1
 8004e00:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004e04:	910d      	str	r1, [sp, #52]	@ 0x34
 8004e06:	f7ff ff23 	bl	8004c50 <__exponent>
 8004e0a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004e0c:	4681      	mov	r9, r0
 8004e0e:	1813      	adds	r3, r2, r0
 8004e10:	2a01      	cmp	r2, #1
 8004e12:	6123      	str	r3, [r4, #16]
 8004e14:	dc02      	bgt.n	8004e1c <_printf_float+0x158>
 8004e16:	6822      	ldr	r2, [r4, #0]
 8004e18:	07d2      	lsls	r2, r2, #31
 8004e1a:	d501      	bpl.n	8004e20 <_printf_float+0x15c>
 8004e1c:	3301      	adds	r3, #1
 8004e1e:	6123      	str	r3, [r4, #16]
 8004e20:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d09e      	beq.n	8004d66 <_printf_float+0xa2>
 8004e28:	232d      	movs	r3, #45	@ 0x2d
 8004e2a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e2e:	e79a      	b.n	8004d66 <_printf_float+0xa2>
 8004e30:	2947      	cmp	r1, #71	@ 0x47
 8004e32:	d1bf      	bne.n	8004db4 <_printf_float+0xf0>
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d1bd      	bne.n	8004db4 <_printf_float+0xf0>
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e7ba      	b.n	8004db2 <_printf_float+0xee>
 8004e3c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004e40:	d9dc      	bls.n	8004dfc <_printf_float+0x138>
 8004e42:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004e46:	d118      	bne.n	8004e7a <_printf_float+0x1b6>
 8004e48:	2900      	cmp	r1, #0
 8004e4a:	6863      	ldr	r3, [r4, #4]
 8004e4c:	dd0b      	ble.n	8004e66 <_printf_float+0x1a2>
 8004e4e:	6121      	str	r1, [r4, #16]
 8004e50:	b913      	cbnz	r3, 8004e58 <_printf_float+0x194>
 8004e52:	6822      	ldr	r2, [r4, #0]
 8004e54:	07d0      	lsls	r0, r2, #31
 8004e56:	d502      	bpl.n	8004e5e <_printf_float+0x19a>
 8004e58:	3301      	adds	r3, #1
 8004e5a:	440b      	add	r3, r1
 8004e5c:	6123      	str	r3, [r4, #16]
 8004e5e:	f04f 0900 	mov.w	r9, #0
 8004e62:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004e64:	e7dc      	b.n	8004e20 <_printf_float+0x15c>
 8004e66:	b913      	cbnz	r3, 8004e6e <_printf_float+0x1aa>
 8004e68:	6822      	ldr	r2, [r4, #0]
 8004e6a:	07d2      	lsls	r2, r2, #31
 8004e6c:	d501      	bpl.n	8004e72 <_printf_float+0x1ae>
 8004e6e:	3302      	adds	r3, #2
 8004e70:	e7f4      	b.n	8004e5c <_printf_float+0x198>
 8004e72:	2301      	movs	r3, #1
 8004e74:	e7f2      	b.n	8004e5c <_printf_float+0x198>
 8004e76:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004e7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004e7c:	4299      	cmp	r1, r3
 8004e7e:	db05      	blt.n	8004e8c <_printf_float+0x1c8>
 8004e80:	6823      	ldr	r3, [r4, #0]
 8004e82:	6121      	str	r1, [r4, #16]
 8004e84:	07d8      	lsls	r0, r3, #31
 8004e86:	d5ea      	bpl.n	8004e5e <_printf_float+0x19a>
 8004e88:	1c4b      	adds	r3, r1, #1
 8004e8a:	e7e7      	b.n	8004e5c <_printf_float+0x198>
 8004e8c:	2900      	cmp	r1, #0
 8004e8e:	bfcc      	ite	gt
 8004e90:	2201      	movgt	r2, #1
 8004e92:	f1c1 0202 	rsble	r2, r1, #2
 8004e96:	4413      	add	r3, r2
 8004e98:	e7e0      	b.n	8004e5c <_printf_float+0x198>
 8004e9a:	6823      	ldr	r3, [r4, #0]
 8004e9c:	055a      	lsls	r2, r3, #21
 8004e9e:	d407      	bmi.n	8004eb0 <_printf_float+0x1ec>
 8004ea0:	6923      	ldr	r3, [r4, #16]
 8004ea2:	4642      	mov	r2, r8
 8004ea4:	4631      	mov	r1, r6
 8004ea6:	4628      	mov	r0, r5
 8004ea8:	47b8      	blx	r7
 8004eaa:	3001      	adds	r0, #1
 8004eac:	d12b      	bne.n	8004f06 <_printf_float+0x242>
 8004eae:	e764      	b.n	8004d7a <_printf_float+0xb6>
 8004eb0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004eb4:	f240 80dc 	bls.w	8005070 <_printf_float+0x3ac>
 8004eb8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	f7fb fd7c 	bl	80009bc <__aeabi_dcmpeq>
 8004ec4:	2800      	cmp	r0, #0
 8004ec6:	d033      	beq.n	8004f30 <_printf_float+0x26c>
 8004ec8:	2301      	movs	r3, #1
 8004eca:	4631      	mov	r1, r6
 8004ecc:	4628      	mov	r0, r5
 8004ece:	4a35      	ldr	r2, [pc, #212]	@ (8004fa4 <_printf_float+0x2e0>)
 8004ed0:	47b8      	blx	r7
 8004ed2:	3001      	adds	r0, #1
 8004ed4:	f43f af51 	beq.w	8004d7a <_printf_float+0xb6>
 8004ed8:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8004edc:	4543      	cmp	r3, r8
 8004ede:	db02      	blt.n	8004ee6 <_printf_float+0x222>
 8004ee0:	6823      	ldr	r3, [r4, #0]
 8004ee2:	07d8      	lsls	r0, r3, #31
 8004ee4:	d50f      	bpl.n	8004f06 <_printf_float+0x242>
 8004ee6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004eea:	4631      	mov	r1, r6
 8004eec:	4628      	mov	r0, r5
 8004eee:	47b8      	blx	r7
 8004ef0:	3001      	adds	r0, #1
 8004ef2:	f43f af42 	beq.w	8004d7a <_printf_float+0xb6>
 8004ef6:	f04f 0900 	mov.w	r9, #0
 8004efa:	f108 38ff 	add.w	r8, r8, #4294967295
 8004efe:	f104 0a1a 	add.w	sl, r4, #26
 8004f02:	45c8      	cmp	r8, r9
 8004f04:	dc09      	bgt.n	8004f1a <_printf_float+0x256>
 8004f06:	6823      	ldr	r3, [r4, #0]
 8004f08:	079b      	lsls	r3, r3, #30
 8004f0a:	f100 8102 	bmi.w	8005112 <_printf_float+0x44e>
 8004f0e:	68e0      	ldr	r0, [r4, #12]
 8004f10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004f12:	4298      	cmp	r0, r3
 8004f14:	bfb8      	it	lt
 8004f16:	4618      	movlt	r0, r3
 8004f18:	e731      	b.n	8004d7e <_printf_float+0xba>
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	4652      	mov	r2, sl
 8004f1e:	4631      	mov	r1, r6
 8004f20:	4628      	mov	r0, r5
 8004f22:	47b8      	blx	r7
 8004f24:	3001      	adds	r0, #1
 8004f26:	f43f af28 	beq.w	8004d7a <_printf_float+0xb6>
 8004f2a:	f109 0901 	add.w	r9, r9, #1
 8004f2e:	e7e8      	b.n	8004f02 <_printf_float+0x23e>
 8004f30:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	dc38      	bgt.n	8004fa8 <_printf_float+0x2e4>
 8004f36:	2301      	movs	r3, #1
 8004f38:	4631      	mov	r1, r6
 8004f3a:	4628      	mov	r0, r5
 8004f3c:	4a19      	ldr	r2, [pc, #100]	@ (8004fa4 <_printf_float+0x2e0>)
 8004f3e:	47b8      	blx	r7
 8004f40:	3001      	adds	r0, #1
 8004f42:	f43f af1a 	beq.w	8004d7a <_printf_float+0xb6>
 8004f46:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8004f4a:	ea59 0303 	orrs.w	r3, r9, r3
 8004f4e:	d102      	bne.n	8004f56 <_printf_float+0x292>
 8004f50:	6823      	ldr	r3, [r4, #0]
 8004f52:	07d9      	lsls	r1, r3, #31
 8004f54:	d5d7      	bpl.n	8004f06 <_printf_float+0x242>
 8004f56:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004f5a:	4631      	mov	r1, r6
 8004f5c:	4628      	mov	r0, r5
 8004f5e:	47b8      	blx	r7
 8004f60:	3001      	adds	r0, #1
 8004f62:	f43f af0a 	beq.w	8004d7a <_printf_float+0xb6>
 8004f66:	f04f 0a00 	mov.w	sl, #0
 8004f6a:	f104 0b1a 	add.w	fp, r4, #26
 8004f6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004f70:	425b      	negs	r3, r3
 8004f72:	4553      	cmp	r3, sl
 8004f74:	dc01      	bgt.n	8004f7a <_printf_float+0x2b6>
 8004f76:	464b      	mov	r3, r9
 8004f78:	e793      	b.n	8004ea2 <_printf_float+0x1de>
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	465a      	mov	r2, fp
 8004f7e:	4631      	mov	r1, r6
 8004f80:	4628      	mov	r0, r5
 8004f82:	47b8      	blx	r7
 8004f84:	3001      	adds	r0, #1
 8004f86:	f43f aef8 	beq.w	8004d7a <_printf_float+0xb6>
 8004f8a:	f10a 0a01 	add.w	sl, sl, #1
 8004f8e:	e7ee      	b.n	8004f6e <_printf_float+0x2aa>
 8004f90:	7fefffff 	.word	0x7fefffff
 8004f94:	080080e4 	.word	0x080080e4
 8004f98:	080080e8 	.word	0x080080e8
 8004f9c:	080080ec 	.word	0x080080ec
 8004fa0:	080080f0 	.word	0x080080f0
 8004fa4:	080080f4 	.word	0x080080f4
 8004fa8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004faa:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004fae:	4553      	cmp	r3, sl
 8004fb0:	bfa8      	it	ge
 8004fb2:	4653      	movge	r3, sl
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	4699      	mov	r9, r3
 8004fb8:	dc36      	bgt.n	8005028 <_printf_float+0x364>
 8004fba:	f04f 0b00 	mov.w	fp, #0
 8004fbe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004fc2:	f104 021a 	add.w	r2, r4, #26
 8004fc6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004fc8:	930a      	str	r3, [sp, #40]	@ 0x28
 8004fca:	eba3 0309 	sub.w	r3, r3, r9
 8004fce:	455b      	cmp	r3, fp
 8004fd0:	dc31      	bgt.n	8005036 <_printf_float+0x372>
 8004fd2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004fd4:	459a      	cmp	sl, r3
 8004fd6:	dc3a      	bgt.n	800504e <_printf_float+0x38a>
 8004fd8:	6823      	ldr	r3, [r4, #0]
 8004fda:	07da      	lsls	r2, r3, #31
 8004fdc:	d437      	bmi.n	800504e <_printf_float+0x38a>
 8004fde:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004fe0:	ebaa 0903 	sub.w	r9, sl, r3
 8004fe4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004fe6:	ebaa 0303 	sub.w	r3, sl, r3
 8004fea:	4599      	cmp	r9, r3
 8004fec:	bfa8      	it	ge
 8004fee:	4699      	movge	r9, r3
 8004ff0:	f1b9 0f00 	cmp.w	r9, #0
 8004ff4:	dc33      	bgt.n	800505e <_printf_float+0x39a>
 8004ff6:	f04f 0800 	mov.w	r8, #0
 8004ffa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004ffe:	f104 0b1a 	add.w	fp, r4, #26
 8005002:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005004:	ebaa 0303 	sub.w	r3, sl, r3
 8005008:	eba3 0309 	sub.w	r3, r3, r9
 800500c:	4543      	cmp	r3, r8
 800500e:	f77f af7a 	ble.w	8004f06 <_printf_float+0x242>
 8005012:	2301      	movs	r3, #1
 8005014:	465a      	mov	r2, fp
 8005016:	4631      	mov	r1, r6
 8005018:	4628      	mov	r0, r5
 800501a:	47b8      	blx	r7
 800501c:	3001      	adds	r0, #1
 800501e:	f43f aeac 	beq.w	8004d7a <_printf_float+0xb6>
 8005022:	f108 0801 	add.w	r8, r8, #1
 8005026:	e7ec      	b.n	8005002 <_printf_float+0x33e>
 8005028:	4642      	mov	r2, r8
 800502a:	4631      	mov	r1, r6
 800502c:	4628      	mov	r0, r5
 800502e:	47b8      	blx	r7
 8005030:	3001      	adds	r0, #1
 8005032:	d1c2      	bne.n	8004fba <_printf_float+0x2f6>
 8005034:	e6a1      	b.n	8004d7a <_printf_float+0xb6>
 8005036:	2301      	movs	r3, #1
 8005038:	4631      	mov	r1, r6
 800503a:	4628      	mov	r0, r5
 800503c:	920a      	str	r2, [sp, #40]	@ 0x28
 800503e:	47b8      	blx	r7
 8005040:	3001      	adds	r0, #1
 8005042:	f43f ae9a 	beq.w	8004d7a <_printf_float+0xb6>
 8005046:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005048:	f10b 0b01 	add.w	fp, fp, #1
 800504c:	e7bb      	b.n	8004fc6 <_printf_float+0x302>
 800504e:	4631      	mov	r1, r6
 8005050:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005054:	4628      	mov	r0, r5
 8005056:	47b8      	blx	r7
 8005058:	3001      	adds	r0, #1
 800505a:	d1c0      	bne.n	8004fde <_printf_float+0x31a>
 800505c:	e68d      	b.n	8004d7a <_printf_float+0xb6>
 800505e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005060:	464b      	mov	r3, r9
 8005062:	4631      	mov	r1, r6
 8005064:	4628      	mov	r0, r5
 8005066:	4442      	add	r2, r8
 8005068:	47b8      	blx	r7
 800506a:	3001      	adds	r0, #1
 800506c:	d1c3      	bne.n	8004ff6 <_printf_float+0x332>
 800506e:	e684      	b.n	8004d7a <_printf_float+0xb6>
 8005070:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005074:	f1ba 0f01 	cmp.w	sl, #1
 8005078:	dc01      	bgt.n	800507e <_printf_float+0x3ba>
 800507a:	07db      	lsls	r3, r3, #31
 800507c:	d536      	bpl.n	80050ec <_printf_float+0x428>
 800507e:	2301      	movs	r3, #1
 8005080:	4642      	mov	r2, r8
 8005082:	4631      	mov	r1, r6
 8005084:	4628      	mov	r0, r5
 8005086:	47b8      	blx	r7
 8005088:	3001      	adds	r0, #1
 800508a:	f43f ae76 	beq.w	8004d7a <_printf_float+0xb6>
 800508e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005092:	4631      	mov	r1, r6
 8005094:	4628      	mov	r0, r5
 8005096:	47b8      	blx	r7
 8005098:	3001      	adds	r0, #1
 800509a:	f43f ae6e 	beq.w	8004d7a <_printf_float+0xb6>
 800509e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80050a2:	2200      	movs	r2, #0
 80050a4:	2300      	movs	r3, #0
 80050a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80050aa:	f7fb fc87 	bl	80009bc <__aeabi_dcmpeq>
 80050ae:	b9c0      	cbnz	r0, 80050e2 <_printf_float+0x41e>
 80050b0:	4653      	mov	r3, sl
 80050b2:	f108 0201 	add.w	r2, r8, #1
 80050b6:	4631      	mov	r1, r6
 80050b8:	4628      	mov	r0, r5
 80050ba:	47b8      	blx	r7
 80050bc:	3001      	adds	r0, #1
 80050be:	d10c      	bne.n	80050da <_printf_float+0x416>
 80050c0:	e65b      	b.n	8004d7a <_printf_float+0xb6>
 80050c2:	2301      	movs	r3, #1
 80050c4:	465a      	mov	r2, fp
 80050c6:	4631      	mov	r1, r6
 80050c8:	4628      	mov	r0, r5
 80050ca:	47b8      	blx	r7
 80050cc:	3001      	adds	r0, #1
 80050ce:	f43f ae54 	beq.w	8004d7a <_printf_float+0xb6>
 80050d2:	f108 0801 	add.w	r8, r8, #1
 80050d6:	45d0      	cmp	r8, sl
 80050d8:	dbf3      	blt.n	80050c2 <_printf_float+0x3fe>
 80050da:	464b      	mov	r3, r9
 80050dc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80050e0:	e6e0      	b.n	8004ea4 <_printf_float+0x1e0>
 80050e2:	f04f 0800 	mov.w	r8, #0
 80050e6:	f104 0b1a 	add.w	fp, r4, #26
 80050ea:	e7f4      	b.n	80050d6 <_printf_float+0x412>
 80050ec:	2301      	movs	r3, #1
 80050ee:	4642      	mov	r2, r8
 80050f0:	e7e1      	b.n	80050b6 <_printf_float+0x3f2>
 80050f2:	2301      	movs	r3, #1
 80050f4:	464a      	mov	r2, r9
 80050f6:	4631      	mov	r1, r6
 80050f8:	4628      	mov	r0, r5
 80050fa:	47b8      	blx	r7
 80050fc:	3001      	adds	r0, #1
 80050fe:	f43f ae3c 	beq.w	8004d7a <_printf_float+0xb6>
 8005102:	f108 0801 	add.w	r8, r8, #1
 8005106:	68e3      	ldr	r3, [r4, #12]
 8005108:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800510a:	1a5b      	subs	r3, r3, r1
 800510c:	4543      	cmp	r3, r8
 800510e:	dcf0      	bgt.n	80050f2 <_printf_float+0x42e>
 8005110:	e6fd      	b.n	8004f0e <_printf_float+0x24a>
 8005112:	f04f 0800 	mov.w	r8, #0
 8005116:	f104 0919 	add.w	r9, r4, #25
 800511a:	e7f4      	b.n	8005106 <_printf_float+0x442>

0800511c <_printf_common>:
 800511c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005120:	4616      	mov	r6, r2
 8005122:	4698      	mov	r8, r3
 8005124:	688a      	ldr	r2, [r1, #8]
 8005126:	690b      	ldr	r3, [r1, #16]
 8005128:	4607      	mov	r7, r0
 800512a:	4293      	cmp	r3, r2
 800512c:	bfb8      	it	lt
 800512e:	4613      	movlt	r3, r2
 8005130:	6033      	str	r3, [r6, #0]
 8005132:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005136:	460c      	mov	r4, r1
 8005138:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800513c:	b10a      	cbz	r2, 8005142 <_printf_common+0x26>
 800513e:	3301      	adds	r3, #1
 8005140:	6033      	str	r3, [r6, #0]
 8005142:	6823      	ldr	r3, [r4, #0]
 8005144:	0699      	lsls	r1, r3, #26
 8005146:	bf42      	ittt	mi
 8005148:	6833      	ldrmi	r3, [r6, #0]
 800514a:	3302      	addmi	r3, #2
 800514c:	6033      	strmi	r3, [r6, #0]
 800514e:	6825      	ldr	r5, [r4, #0]
 8005150:	f015 0506 	ands.w	r5, r5, #6
 8005154:	d106      	bne.n	8005164 <_printf_common+0x48>
 8005156:	f104 0a19 	add.w	sl, r4, #25
 800515a:	68e3      	ldr	r3, [r4, #12]
 800515c:	6832      	ldr	r2, [r6, #0]
 800515e:	1a9b      	subs	r3, r3, r2
 8005160:	42ab      	cmp	r3, r5
 8005162:	dc2b      	bgt.n	80051bc <_printf_common+0xa0>
 8005164:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005168:	6822      	ldr	r2, [r4, #0]
 800516a:	3b00      	subs	r3, #0
 800516c:	bf18      	it	ne
 800516e:	2301      	movne	r3, #1
 8005170:	0692      	lsls	r2, r2, #26
 8005172:	d430      	bmi.n	80051d6 <_printf_common+0xba>
 8005174:	4641      	mov	r1, r8
 8005176:	4638      	mov	r0, r7
 8005178:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800517c:	47c8      	blx	r9
 800517e:	3001      	adds	r0, #1
 8005180:	d023      	beq.n	80051ca <_printf_common+0xae>
 8005182:	6823      	ldr	r3, [r4, #0]
 8005184:	6922      	ldr	r2, [r4, #16]
 8005186:	f003 0306 	and.w	r3, r3, #6
 800518a:	2b04      	cmp	r3, #4
 800518c:	bf14      	ite	ne
 800518e:	2500      	movne	r5, #0
 8005190:	6833      	ldreq	r3, [r6, #0]
 8005192:	f04f 0600 	mov.w	r6, #0
 8005196:	bf08      	it	eq
 8005198:	68e5      	ldreq	r5, [r4, #12]
 800519a:	f104 041a 	add.w	r4, r4, #26
 800519e:	bf08      	it	eq
 80051a0:	1aed      	subeq	r5, r5, r3
 80051a2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80051a6:	bf08      	it	eq
 80051a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051ac:	4293      	cmp	r3, r2
 80051ae:	bfc4      	itt	gt
 80051b0:	1a9b      	subgt	r3, r3, r2
 80051b2:	18ed      	addgt	r5, r5, r3
 80051b4:	42b5      	cmp	r5, r6
 80051b6:	d11a      	bne.n	80051ee <_printf_common+0xd2>
 80051b8:	2000      	movs	r0, #0
 80051ba:	e008      	b.n	80051ce <_printf_common+0xb2>
 80051bc:	2301      	movs	r3, #1
 80051be:	4652      	mov	r2, sl
 80051c0:	4641      	mov	r1, r8
 80051c2:	4638      	mov	r0, r7
 80051c4:	47c8      	blx	r9
 80051c6:	3001      	adds	r0, #1
 80051c8:	d103      	bne.n	80051d2 <_printf_common+0xb6>
 80051ca:	f04f 30ff 	mov.w	r0, #4294967295
 80051ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051d2:	3501      	adds	r5, #1
 80051d4:	e7c1      	b.n	800515a <_printf_common+0x3e>
 80051d6:	2030      	movs	r0, #48	@ 0x30
 80051d8:	18e1      	adds	r1, r4, r3
 80051da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80051de:	1c5a      	adds	r2, r3, #1
 80051e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80051e4:	4422      	add	r2, r4
 80051e6:	3302      	adds	r3, #2
 80051e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80051ec:	e7c2      	b.n	8005174 <_printf_common+0x58>
 80051ee:	2301      	movs	r3, #1
 80051f0:	4622      	mov	r2, r4
 80051f2:	4641      	mov	r1, r8
 80051f4:	4638      	mov	r0, r7
 80051f6:	47c8      	blx	r9
 80051f8:	3001      	adds	r0, #1
 80051fa:	d0e6      	beq.n	80051ca <_printf_common+0xae>
 80051fc:	3601      	adds	r6, #1
 80051fe:	e7d9      	b.n	80051b4 <_printf_common+0x98>

08005200 <_printf_i>:
 8005200:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005204:	7e0f      	ldrb	r7, [r1, #24]
 8005206:	4691      	mov	r9, r2
 8005208:	2f78      	cmp	r7, #120	@ 0x78
 800520a:	4680      	mov	r8, r0
 800520c:	460c      	mov	r4, r1
 800520e:	469a      	mov	sl, r3
 8005210:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005212:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005216:	d807      	bhi.n	8005228 <_printf_i+0x28>
 8005218:	2f62      	cmp	r7, #98	@ 0x62
 800521a:	d80a      	bhi.n	8005232 <_printf_i+0x32>
 800521c:	2f00      	cmp	r7, #0
 800521e:	f000 80d3 	beq.w	80053c8 <_printf_i+0x1c8>
 8005222:	2f58      	cmp	r7, #88	@ 0x58
 8005224:	f000 80ba 	beq.w	800539c <_printf_i+0x19c>
 8005228:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800522c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005230:	e03a      	b.n	80052a8 <_printf_i+0xa8>
 8005232:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005236:	2b15      	cmp	r3, #21
 8005238:	d8f6      	bhi.n	8005228 <_printf_i+0x28>
 800523a:	a101      	add	r1, pc, #4	@ (adr r1, 8005240 <_printf_i+0x40>)
 800523c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005240:	08005299 	.word	0x08005299
 8005244:	080052ad 	.word	0x080052ad
 8005248:	08005229 	.word	0x08005229
 800524c:	08005229 	.word	0x08005229
 8005250:	08005229 	.word	0x08005229
 8005254:	08005229 	.word	0x08005229
 8005258:	080052ad 	.word	0x080052ad
 800525c:	08005229 	.word	0x08005229
 8005260:	08005229 	.word	0x08005229
 8005264:	08005229 	.word	0x08005229
 8005268:	08005229 	.word	0x08005229
 800526c:	080053af 	.word	0x080053af
 8005270:	080052d7 	.word	0x080052d7
 8005274:	08005369 	.word	0x08005369
 8005278:	08005229 	.word	0x08005229
 800527c:	08005229 	.word	0x08005229
 8005280:	080053d1 	.word	0x080053d1
 8005284:	08005229 	.word	0x08005229
 8005288:	080052d7 	.word	0x080052d7
 800528c:	08005229 	.word	0x08005229
 8005290:	08005229 	.word	0x08005229
 8005294:	08005371 	.word	0x08005371
 8005298:	6833      	ldr	r3, [r6, #0]
 800529a:	1d1a      	adds	r2, r3, #4
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	6032      	str	r2, [r6, #0]
 80052a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80052a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80052a8:	2301      	movs	r3, #1
 80052aa:	e09e      	b.n	80053ea <_printf_i+0x1ea>
 80052ac:	6833      	ldr	r3, [r6, #0]
 80052ae:	6820      	ldr	r0, [r4, #0]
 80052b0:	1d19      	adds	r1, r3, #4
 80052b2:	6031      	str	r1, [r6, #0]
 80052b4:	0606      	lsls	r6, r0, #24
 80052b6:	d501      	bpl.n	80052bc <_printf_i+0xbc>
 80052b8:	681d      	ldr	r5, [r3, #0]
 80052ba:	e003      	b.n	80052c4 <_printf_i+0xc4>
 80052bc:	0645      	lsls	r5, r0, #25
 80052be:	d5fb      	bpl.n	80052b8 <_printf_i+0xb8>
 80052c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80052c4:	2d00      	cmp	r5, #0
 80052c6:	da03      	bge.n	80052d0 <_printf_i+0xd0>
 80052c8:	232d      	movs	r3, #45	@ 0x2d
 80052ca:	426d      	negs	r5, r5
 80052cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80052d0:	230a      	movs	r3, #10
 80052d2:	4859      	ldr	r0, [pc, #356]	@ (8005438 <_printf_i+0x238>)
 80052d4:	e011      	b.n	80052fa <_printf_i+0xfa>
 80052d6:	6821      	ldr	r1, [r4, #0]
 80052d8:	6833      	ldr	r3, [r6, #0]
 80052da:	0608      	lsls	r0, r1, #24
 80052dc:	f853 5b04 	ldr.w	r5, [r3], #4
 80052e0:	d402      	bmi.n	80052e8 <_printf_i+0xe8>
 80052e2:	0649      	lsls	r1, r1, #25
 80052e4:	bf48      	it	mi
 80052e6:	b2ad      	uxthmi	r5, r5
 80052e8:	2f6f      	cmp	r7, #111	@ 0x6f
 80052ea:	6033      	str	r3, [r6, #0]
 80052ec:	bf14      	ite	ne
 80052ee:	230a      	movne	r3, #10
 80052f0:	2308      	moveq	r3, #8
 80052f2:	4851      	ldr	r0, [pc, #324]	@ (8005438 <_printf_i+0x238>)
 80052f4:	2100      	movs	r1, #0
 80052f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80052fa:	6866      	ldr	r6, [r4, #4]
 80052fc:	2e00      	cmp	r6, #0
 80052fe:	bfa8      	it	ge
 8005300:	6821      	ldrge	r1, [r4, #0]
 8005302:	60a6      	str	r6, [r4, #8]
 8005304:	bfa4      	itt	ge
 8005306:	f021 0104 	bicge.w	r1, r1, #4
 800530a:	6021      	strge	r1, [r4, #0]
 800530c:	b90d      	cbnz	r5, 8005312 <_printf_i+0x112>
 800530e:	2e00      	cmp	r6, #0
 8005310:	d04b      	beq.n	80053aa <_printf_i+0x1aa>
 8005312:	4616      	mov	r6, r2
 8005314:	fbb5 f1f3 	udiv	r1, r5, r3
 8005318:	fb03 5711 	mls	r7, r3, r1, r5
 800531c:	5dc7      	ldrb	r7, [r0, r7]
 800531e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005322:	462f      	mov	r7, r5
 8005324:	42bb      	cmp	r3, r7
 8005326:	460d      	mov	r5, r1
 8005328:	d9f4      	bls.n	8005314 <_printf_i+0x114>
 800532a:	2b08      	cmp	r3, #8
 800532c:	d10b      	bne.n	8005346 <_printf_i+0x146>
 800532e:	6823      	ldr	r3, [r4, #0]
 8005330:	07df      	lsls	r7, r3, #31
 8005332:	d508      	bpl.n	8005346 <_printf_i+0x146>
 8005334:	6923      	ldr	r3, [r4, #16]
 8005336:	6861      	ldr	r1, [r4, #4]
 8005338:	4299      	cmp	r1, r3
 800533a:	bfde      	ittt	le
 800533c:	2330      	movle	r3, #48	@ 0x30
 800533e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005342:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005346:	1b92      	subs	r2, r2, r6
 8005348:	6122      	str	r2, [r4, #16]
 800534a:	464b      	mov	r3, r9
 800534c:	4621      	mov	r1, r4
 800534e:	4640      	mov	r0, r8
 8005350:	f8cd a000 	str.w	sl, [sp]
 8005354:	aa03      	add	r2, sp, #12
 8005356:	f7ff fee1 	bl	800511c <_printf_common>
 800535a:	3001      	adds	r0, #1
 800535c:	d14a      	bne.n	80053f4 <_printf_i+0x1f4>
 800535e:	f04f 30ff 	mov.w	r0, #4294967295
 8005362:	b004      	add	sp, #16
 8005364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005368:	6823      	ldr	r3, [r4, #0]
 800536a:	f043 0320 	orr.w	r3, r3, #32
 800536e:	6023      	str	r3, [r4, #0]
 8005370:	2778      	movs	r7, #120	@ 0x78
 8005372:	4832      	ldr	r0, [pc, #200]	@ (800543c <_printf_i+0x23c>)
 8005374:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005378:	6823      	ldr	r3, [r4, #0]
 800537a:	6831      	ldr	r1, [r6, #0]
 800537c:	061f      	lsls	r7, r3, #24
 800537e:	f851 5b04 	ldr.w	r5, [r1], #4
 8005382:	d402      	bmi.n	800538a <_printf_i+0x18a>
 8005384:	065f      	lsls	r7, r3, #25
 8005386:	bf48      	it	mi
 8005388:	b2ad      	uxthmi	r5, r5
 800538a:	6031      	str	r1, [r6, #0]
 800538c:	07d9      	lsls	r1, r3, #31
 800538e:	bf44      	itt	mi
 8005390:	f043 0320 	orrmi.w	r3, r3, #32
 8005394:	6023      	strmi	r3, [r4, #0]
 8005396:	b11d      	cbz	r5, 80053a0 <_printf_i+0x1a0>
 8005398:	2310      	movs	r3, #16
 800539a:	e7ab      	b.n	80052f4 <_printf_i+0xf4>
 800539c:	4826      	ldr	r0, [pc, #152]	@ (8005438 <_printf_i+0x238>)
 800539e:	e7e9      	b.n	8005374 <_printf_i+0x174>
 80053a0:	6823      	ldr	r3, [r4, #0]
 80053a2:	f023 0320 	bic.w	r3, r3, #32
 80053a6:	6023      	str	r3, [r4, #0]
 80053a8:	e7f6      	b.n	8005398 <_printf_i+0x198>
 80053aa:	4616      	mov	r6, r2
 80053ac:	e7bd      	b.n	800532a <_printf_i+0x12a>
 80053ae:	6833      	ldr	r3, [r6, #0]
 80053b0:	6825      	ldr	r5, [r4, #0]
 80053b2:	1d18      	adds	r0, r3, #4
 80053b4:	6961      	ldr	r1, [r4, #20]
 80053b6:	6030      	str	r0, [r6, #0]
 80053b8:	062e      	lsls	r6, r5, #24
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	d501      	bpl.n	80053c2 <_printf_i+0x1c2>
 80053be:	6019      	str	r1, [r3, #0]
 80053c0:	e002      	b.n	80053c8 <_printf_i+0x1c8>
 80053c2:	0668      	lsls	r0, r5, #25
 80053c4:	d5fb      	bpl.n	80053be <_printf_i+0x1be>
 80053c6:	8019      	strh	r1, [r3, #0]
 80053c8:	2300      	movs	r3, #0
 80053ca:	4616      	mov	r6, r2
 80053cc:	6123      	str	r3, [r4, #16]
 80053ce:	e7bc      	b.n	800534a <_printf_i+0x14a>
 80053d0:	6833      	ldr	r3, [r6, #0]
 80053d2:	2100      	movs	r1, #0
 80053d4:	1d1a      	adds	r2, r3, #4
 80053d6:	6032      	str	r2, [r6, #0]
 80053d8:	681e      	ldr	r6, [r3, #0]
 80053da:	6862      	ldr	r2, [r4, #4]
 80053dc:	4630      	mov	r0, r6
 80053de:	f000 f9e4 	bl	80057aa <memchr>
 80053e2:	b108      	cbz	r0, 80053e8 <_printf_i+0x1e8>
 80053e4:	1b80      	subs	r0, r0, r6
 80053e6:	6060      	str	r0, [r4, #4]
 80053e8:	6863      	ldr	r3, [r4, #4]
 80053ea:	6123      	str	r3, [r4, #16]
 80053ec:	2300      	movs	r3, #0
 80053ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80053f2:	e7aa      	b.n	800534a <_printf_i+0x14a>
 80053f4:	4632      	mov	r2, r6
 80053f6:	4649      	mov	r1, r9
 80053f8:	4640      	mov	r0, r8
 80053fa:	6923      	ldr	r3, [r4, #16]
 80053fc:	47d0      	blx	sl
 80053fe:	3001      	adds	r0, #1
 8005400:	d0ad      	beq.n	800535e <_printf_i+0x15e>
 8005402:	6823      	ldr	r3, [r4, #0]
 8005404:	079b      	lsls	r3, r3, #30
 8005406:	d413      	bmi.n	8005430 <_printf_i+0x230>
 8005408:	68e0      	ldr	r0, [r4, #12]
 800540a:	9b03      	ldr	r3, [sp, #12]
 800540c:	4298      	cmp	r0, r3
 800540e:	bfb8      	it	lt
 8005410:	4618      	movlt	r0, r3
 8005412:	e7a6      	b.n	8005362 <_printf_i+0x162>
 8005414:	2301      	movs	r3, #1
 8005416:	4632      	mov	r2, r6
 8005418:	4649      	mov	r1, r9
 800541a:	4640      	mov	r0, r8
 800541c:	47d0      	blx	sl
 800541e:	3001      	adds	r0, #1
 8005420:	d09d      	beq.n	800535e <_printf_i+0x15e>
 8005422:	3501      	adds	r5, #1
 8005424:	68e3      	ldr	r3, [r4, #12]
 8005426:	9903      	ldr	r1, [sp, #12]
 8005428:	1a5b      	subs	r3, r3, r1
 800542a:	42ab      	cmp	r3, r5
 800542c:	dcf2      	bgt.n	8005414 <_printf_i+0x214>
 800542e:	e7eb      	b.n	8005408 <_printf_i+0x208>
 8005430:	2500      	movs	r5, #0
 8005432:	f104 0619 	add.w	r6, r4, #25
 8005436:	e7f5      	b.n	8005424 <_printf_i+0x224>
 8005438:	080080f6 	.word	0x080080f6
 800543c:	08008107 	.word	0x08008107

08005440 <std>:
 8005440:	2300      	movs	r3, #0
 8005442:	b510      	push	{r4, lr}
 8005444:	4604      	mov	r4, r0
 8005446:	e9c0 3300 	strd	r3, r3, [r0]
 800544a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800544e:	6083      	str	r3, [r0, #8]
 8005450:	8181      	strh	r1, [r0, #12]
 8005452:	6643      	str	r3, [r0, #100]	@ 0x64
 8005454:	81c2      	strh	r2, [r0, #14]
 8005456:	6183      	str	r3, [r0, #24]
 8005458:	4619      	mov	r1, r3
 800545a:	2208      	movs	r2, #8
 800545c:	305c      	adds	r0, #92	@ 0x5c
 800545e:	f000 f914 	bl	800568a <memset>
 8005462:	4b0d      	ldr	r3, [pc, #52]	@ (8005498 <std+0x58>)
 8005464:	6224      	str	r4, [r4, #32]
 8005466:	6263      	str	r3, [r4, #36]	@ 0x24
 8005468:	4b0c      	ldr	r3, [pc, #48]	@ (800549c <std+0x5c>)
 800546a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800546c:	4b0c      	ldr	r3, [pc, #48]	@ (80054a0 <std+0x60>)
 800546e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005470:	4b0c      	ldr	r3, [pc, #48]	@ (80054a4 <std+0x64>)
 8005472:	6323      	str	r3, [r4, #48]	@ 0x30
 8005474:	4b0c      	ldr	r3, [pc, #48]	@ (80054a8 <std+0x68>)
 8005476:	429c      	cmp	r4, r3
 8005478:	d006      	beq.n	8005488 <std+0x48>
 800547a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800547e:	4294      	cmp	r4, r2
 8005480:	d002      	beq.n	8005488 <std+0x48>
 8005482:	33d0      	adds	r3, #208	@ 0xd0
 8005484:	429c      	cmp	r4, r3
 8005486:	d105      	bne.n	8005494 <std+0x54>
 8005488:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800548c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005490:	f000 b988 	b.w	80057a4 <__retarget_lock_init_recursive>
 8005494:	bd10      	pop	{r4, pc}
 8005496:	bf00      	nop
 8005498:	08005605 	.word	0x08005605
 800549c:	08005627 	.word	0x08005627
 80054a0:	0800565f 	.word	0x0800565f
 80054a4:	08005683 	.word	0x08005683
 80054a8:	2000068c 	.word	0x2000068c

080054ac <stdio_exit_handler>:
 80054ac:	4a02      	ldr	r2, [pc, #8]	@ (80054b8 <stdio_exit_handler+0xc>)
 80054ae:	4903      	ldr	r1, [pc, #12]	@ (80054bc <stdio_exit_handler+0x10>)
 80054b0:	4803      	ldr	r0, [pc, #12]	@ (80054c0 <stdio_exit_handler+0x14>)
 80054b2:	f000 b869 	b.w	8005588 <_fwalk_sglue>
 80054b6:	bf00      	nop
 80054b8:	2000007c 	.word	0x2000007c
 80054bc:	08006fa9 	.word	0x08006fa9
 80054c0:	2000008c 	.word	0x2000008c

080054c4 <cleanup_stdio>:
 80054c4:	6841      	ldr	r1, [r0, #4]
 80054c6:	4b0c      	ldr	r3, [pc, #48]	@ (80054f8 <cleanup_stdio+0x34>)
 80054c8:	b510      	push	{r4, lr}
 80054ca:	4299      	cmp	r1, r3
 80054cc:	4604      	mov	r4, r0
 80054ce:	d001      	beq.n	80054d4 <cleanup_stdio+0x10>
 80054d0:	f001 fd6a 	bl	8006fa8 <_fflush_r>
 80054d4:	68a1      	ldr	r1, [r4, #8]
 80054d6:	4b09      	ldr	r3, [pc, #36]	@ (80054fc <cleanup_stdio+0x38>)
 80054d8:	4299      	cmp	r1, r3
 80054da:	d002      	beq.n	80054e2 <cleanup_stdio+0x1e>
 80054dc:	4620      	mov	r0, r4
 80054de:	f001 fd63 	bl	8006fa8 <_fflush_r>
 80054e2:	68e1      	ldr	r1, [r4, #12]
 80054e4:	4b06      	ldr	r3, [pc, #24]	@ (8005500 <cleanup_stdio+0x3c>)
 80054e6:	4299      	cmp	r1, r3
 80054e8:	d004      	beq.n	80054f4 <cleanup_stdio+0x30>
 80054ea:	4620      	mov	r0, r4
 80054ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054f0:	f001 bd5a 	b.w	8006fa8 <_fflush_r>
 80054f4:	bd10      	pop	{r4, pc}
 80054f6:	bf00      	nop
 80054f8:	2000068c 	.word	0x2000068c
 80054fc:	200006f4 	.word	0x200006f4
 8005500:	2000075c 	.word	0x2000075c

08005504 <global_stdio_init.part.0>:
 8005504:	b510      	push	{r4, lr}
 8005506:	4b0b      	ldr	r3, [pc, #44]	@ (8005534 <global_stdio_init.part.0+0x30>)
 8005508:	4c0b      	ldr	r4, [pc, #44]	@ (8005538 <global_stdio_init.part.0+0x34>)
 800550a:	4a0c      	ldr	r2, [pc, #48]	@ (800553c <global_stdio_init.part.0+0x38>)
 800550c:	4620      	mov	r0, r4
 800550e:	601a      	str	r2, [r3, #0]
 8005510:	2104      	movs	r1, #4
 8005512:	2200      	movs	r2, #0
 8005514:	f7ff ff94 	bl	8005440 <std>
 8005518:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800551c:	2201      	movs	r2, #1
 800551e:	2109      	movs	r1, #9
 8005520:	f7ff ff8e 	bl	8005440 <std>
 8005524:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005528:	2202      	movs	r2, #2
 800552a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800552e:	2112      	movs	r1, #18
 8005530:	f7ff bf86 	b.w	8005440 <std>
 8005534:	200007c4 	.word	0x200007c4
 8005538:	2000068c 	.word	0x2000068c
 800553c:	080054ad 	.word	0x080054ad

08005540 <__sfp_lock_acquire>:
 8005540:	4801      	ldr	r0, [pc, #4]	@ (8005548 <__sfp_lock_acquire+0x8>)
 8005542:	f000 b930 	b.w	80057a6 <__retarget_lock_acquire_recursive>
 8005546:	bf00      	nop
 8005548:	200007cd 	.word	0x200007cd

0800554c <__sfp_lock_release>:
 800554c:	4801      	ldr	r0, [pc, #4]	@ (8005554 <__sfp_lock_release+0x8>)
 800554e:	f000 b92b 	b.w	80057a8 <__retarget_lock_release_recursive>
 8005552:	bf00      	nop
 8005554:	200007cd 	.word	0x200007cd

08005558 <__sinit>:
 8005558:	b510      	push	{r4, lr}
 800555a:	4604      	mov	r4, r0
 800555c:	f7ff fff0 	bl	8005540 <__sfp_lock_acquire>
 8005560:	6a23      	ldr	r3, [r4, #32]
 8005562:	b11b      	cbz	r3, 800556c <__sinit+0x14>
 8005564:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005568:	f7ff bff0 	b.w	800554c <__sfp_lock_release>
 800556c:	4b04      	ldr	r3, [pc, #16]	@ (8005580 <__sinit+0x28>)
 800556e:	6223      	str	r3, [r4, #32]
 8005570:	4b04      	ldr	r3, [pc, #16]	@ (8005584 <__sinit+0x2c>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d1f5      	bne.n	8005564 <__sinit+0xc>
 8005578:	f7ff ffc4 	bl	8005504 <global_stdio_init.part.0>
 800557c:	e7f2      	b.n	8005564 <__sinit+0xc>
 800557e:	bf00      	nop
 8005580:	080054c5 	.word	0x080054c5
 8005584:	200007c4 	.word	0x200007c4

08005588 <_fwalk_sglue>:
 8005588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800558c:	4607      	mov	r7, r0
 800558e:	4688      	mov	r8, r1
 8005590:	4614      	mov	r4, r2
 8005592:	2600      	movs	r6, #0
 8005594:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005598:	f1b9 0901 	subs.w	r9, r9, #1
 800559c:	d505      	bpl.n	80055aa <_fwalk_sglue+0x22>
 800559e:	6824      	ldr	r4, [r4, #0]
 80055a0:	2c00      	cmp	r4, #0
 80055a2:	d1f7      	bne.n	8005594 <_fwalk_sglue+0xc>
 80055a4:	4630      	mov	r0, r6
 80055a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055aa:	89ab      	ldrh	r3, [r5, #12]
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d907      	bls.n	80055c0 <_fwalk_sglue+0x38>
 80055b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80055b4:	3301      	adds	r3, #1
 80055b6:	d003      	beq.n	80055c0 <_fwalk_sglue+0x38>
 80055b8:	4629      	mov	r1, r5
 80055ba:	4638      	mov	r0, r7
 80055bc:	47c0      	blx	r8
 80055be:	4306      	orrs	r6, r0
 80055c0:	3568      	adds	r5, #104	@ 0x68
 80055c2:	e7e9      	b.n	8005598 <_fwalk_sglue+0x10>

080055c4 <siprintf>:
 80055c4:	b40e      	push	{r1, r2, r3}
 80055c6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80055ca:	b500      	push	{lr}
 80055cc:	b09c      	sub	sp, #112	@ 0x70
 80055ce:	ab1d      	add	r3, sp, #116	@ 0x74
 80055d0:	9002      	str	r0, [sp, #8]
 80055d2:	9006      	str	r0, [sp, #24]
 80055d4:	9107      	str	r1, [sp, #28]
 80055d6:	9104      	str	r1, [sp, #16]
 80055d8:	4808      	ldr	r0, [pc, #32]	@ (80055fc <siprintf+0x38>)
 80055da:	4909      	ldr	r1, [pc, #36]	@ (8005600 <siprintf+0x3c>)
 80055dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80055e0:	9105      	str	r1, [sp, #20]
 80055e2:	6800      	ldr	r0, [r0, #0]
 80055e4:	a902      	add	r1, sp, #8
 80055e6:	9301      	str	r3, [sp, #4]
 80055e8:	f001 fb62 	bl	8006cb0 <_svfiprintf_r>
 80055ec:	2200      	movs	r2, #0
 80055ee:	9b02      	ldr	r3, [sp, #8]
 80055f0:	701a      	strb	r2, [r3, #0]
 80055f2:	b01c      	add	sp, #112	@ 0x70
 80055f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80055f8:	b003      	add	sp, #12
 80055fa:	4770      	bx	lr
 80055fc:	20000088 	.word	0x20000088
 8005600:	ffff0208 	.word	0xffff0208

08005604 <__sread>:
 8005604:	b510      	push	{r4, lr}
 8005606:	460c      	mov	r4, r1
 8005608:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800560c:	f000 f86c 	bl	80056e8 <_read_r>
 8005610:	2800      	cmp	r0, #0
 8005612:	bfab      	itete	ge
 8005614:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005616:	89a3      	ldrhlt	r3, [r4, #12]
 8005618:	181b      	addge	r3, r3, r0
 800561a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800561e:	bfac      	ite	ge
 8005620:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005622:	81a3      	strhlt	r3, [r4, #12]
 8005624:	bd10      	pop	{r4, pc}

08005626 <__swrite>:
 8005626:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800562a:	461f      	mov	r7, r3
 800562c:	898b      	ldrh	r3, [r1, #12]
 800562e:	4605      	mov	r5, r0
 8005630:	05db      	lsls	r3, r3, #23
 8005632:	460c      	mov	r4, r1
 8005634:	4616      	mov	r6, r2
 8005636:	d505      	bpl.n	8005644 <__swrite+0x1e>
 8005638:	2302      	movs	r3, #2
 800563a:	2200      	movs	r2, #0
 800563c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005640:	f000 f840 	bl	80056c4 <_lseek_r>
 8005644:	89a3      	ldrh	r3, [r4, #12]
 8005646:	4632      	mov	r2, r6
 8005648:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800564c:	81a3      	strh	r3, [r4, #12]
 800564e:	4628      	mov	r0, r5
 8005650:	463b      	mov	r3, r7
 8005652:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005656:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800565a:	f000 b867 	b.w	800572c <_write_r>

0800565e <__sseek>:
 800565e:	b510      	push	{r4, lr}
 8005660:	460c      	mov	r4, r1
 8005662:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005666:	f000 f82d 	bl	80056c4 <_lseek_r>
 800566a:	1c43      	adds	r3, r0, #1
 800566c:	89a3      	ldrh	r3, [r4, #12]
 800566e:	bf15      	itete	ne
 8005670:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005672:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005676:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800567a:	81a3      	strheq	r3, [r4, #12]
 800567c:	bf18      	it	ne
 800567e:	81a3      	strhne	r3, [r4, #12]
 8005680:	bd10      	pop	{r4, pc}

08005682 <__sclose>:
 8005682:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005686:	f000 b80d 	b.w	80056a4 <_close_r>

0800568a <memset>:
 800568a:	4603      	mov	r3, r0
 800568c:	4402      	add	r2, r0
 800568e:	4293      	cmp	r3, r2
 8005690:	d100      	bne.n	8005694 <memset+0xa>
 8005692:	4770      	bx	lr
 8005694:	f803 1b01 	strb.w	r1, [r3], #1
 8005698:	e7f9      	b.n	800568e <memset+0x4>
	...

0800569c <_localeconv_r>:
 800569c:	4800      	ldr	r0, [pc, #0]	@ (80056a0 <_localeconv_r+0x4>)
 800569e:	4770      	bx	lr
 80056a0:	200001c8 	.word	0x200001c8

080056a4 <_close_r>:
 80056a4:	b538      	push	{r3, r4, r5, lr}
 80056a6:	2300      	movs	r3, #0
 80056a8:	4d05      	ldr	r5, [pc, #20]	@ (80056c0 <_close_r+0x1c>)
 80056aa:	4604      	mov	r4, r0
 80056ac:	4608      	mov	r0, r1
 80056ae:	602b      	str	r3, [r5, #0]
 80056b0:	f7fd fd47 	bl	8003142 <_close>
 80056b4:	1c43      	adds	r3, r0, #1
 80056b6:	d102      	bne.n	80056be <_close_r+0x1a>
 80056b8:	682b      	ldr	r3, [r5, #0]
 80056ba:	b103      	cbz	r3, 80056be <_close_r+0x1a>
 80056bc:	6023      	str	r3, [r4, #0]
 80056be:	bd38      	pop	{r3, r4, r5, pc}
 80056c0:	200007c8 	.word	0x200007c8

080056c4 <_lseek_r>:
 80056c4:	b538      	push	{r3, r4, r5, lr}
 80056c6:	4604      	mov	r4, r0
 80056c8:	4608      	mov	r0, r1
 80056ca:	4611      	mov	r1, r2
 80056cc:	2200      	movs	r2, #0
 80056ce:	4d05      	ldr	r5, [pc, #20]	@ (80056e4 <_lseek_r+0x20>)
 80056d0:	602a      	str	r2, [r5, #0]
 80056d2:	461a      	mov	r2, r3
 80056d4:	f7fd fd59 	bl	800318a <_lseek>
 80056d8:	1c43      	adds	r3, r0, #1
 80056da:	d102      	bne.n	80056e2 <_lseek_r+0x1e>
 80056dc:	682b      	ldr	r3, [r5, #0]
 80056de:	b103      	cbz	r3, 80056e2 <_lseek_r+0x1e>
 80056e0:	6023      	str	r3, [r4, #0]
 80056e2:	bd38      	pop	{r3, r4, r5, pc}
 80056e4:	200007c8 	.word	0x200007c8

080056e8 <_read_r>:
 80056e8:	b538      	push	{r3, r4, r5, lr}
 80056ea:	4604      	mov	r4, r0
 80056ec:	4608      	mov	r0, r1
 80056ee:	4611      	mov	r1, r2
 80056f0:	2200      	movs	r2, #0
 80056f2:	4d05      	ldr	r5, [pc, #20]	@ (8005708 <_read_r+0x20>)
 80056f4:	602a      	str	r2, [r5, #0]
 80056f6:	461a      	mov	r2, r3
 80056f8:	f7fd fcea 	bl	80030d0 <_read>
 80056fc:	1c43      	adds	r3, r0, #1
 80056fe:	d102      	bne.n	8005706 <_read_r+0x1e>
 8005700:	682b      	ldr	r3, [r5, #0]
 8005702:	b103      	cbz	r3, 8005706 <_read_r+0x1e>
 8005704:	6023      	str	r3, [r4, #0]
 8005706:	bd38      	pop	{r3, r4, r5, pc}
 8005708:	200007c8 	.word	0x200007c8

0800570c <_sbrk_r>:
 800570c:	b538      	push	{r3, r4, r5, lr}
 800570e:	2300      	movs	r3, #0
 8005710:	4d05      	ldr	r5, [pc, #20]	@ (8005728 <_sbrk_r+0x1c>)
 8005712:	4604      	mov	r4, r0
 8005714:	4608      	mov	r0, r1
 8005716:	602b      	str	r3, [r5, #0]
 8005718:	f7fd fd44 	bl	80031a4 <_sbrk>
 800571c:	1c43      	adds	r3, r0, #1
 800571e:	d102      	bne.n	8005726 <_sbrk_r+0x1a>
 8005720:	682b      	ldr	r3, [r5, #0]
 8005722:	b103      	cbz	r3, 8005726 <_sbrk_r+0x1a>
 8005724:	6023      	str	r3, [r4, #0]
 8005726:	bd38      	pop	{r3, r4, r5, pc}
 8005728:	200007c8 	.word	0x200007c8

0800572c <_write_r>:
 800572c:	b538      	push	{r3, r4, r5, lr}
 800572e:	4604      	mov	r4, r0
 8005730:	4608      	mov	r0, r1
 8005732:	4611      	mov	r1, r2
 8005734:	2200      	movs	r2, #0
 8005736:	4d05      	ldr	r5, [pc, #20]	@ (800574c <_write_r+0x20>)
 8005738:	602a      	str	r2, [r5, #0]
 800573a:	461a      	mov	r2, r3
 800573c:	f7fd fce5 	bl	800310a <_write>
 8005740:	1c43      	adds	r3, r0, #1
 8005742:	d102      	bne.n	800574a <_write_r+0x1e>
 8005744:	682b      	ldr	r3, [r5, #0]
 8005746:	b103      	cbz	r3, 800574a <_write_r+0x1e>
 8005748:	6023      	str	r3, [r4, #0]
 800574a:	bd38      	pop	{r3, r4, r5, pc}
 800574c:	200007c8 	.word	0x200007c8

08005750 <__errno>:
 8005750:	4b01      	ldr	r3, [pc, #4]	@ (8005758 <__errno+0x8>)
 8005752:	6818      	ldr	r0, [r3, #0]
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop
 8005758:	20000088 	.word	0x20000088

0800575c <__libc_init_array>:
 800575c:	b570      	push	{r4, r5, r6, lr}
 800575e:	2600      	movs	r6, #0
 8005760:	4d0c      	ldr	r5, [pc, #48]	@ (8005794 <__libc_init_array+0x38>)
 8005762:	4c0d      	ldr	r4, [pc, #52]	@ (8005798 <__libc_init_array+0x3c>)
 8005764:	1b64      	subs	r4, r4, r5
 8005766:	10a4      	asrs	r4, r4, #2
 8005768:	42a6      	cmp	r6, r4
 800576a:	d109      	bne.n	8005780 <__libc_init_array+0x24>
 800576c:	f001 ffa8 	bl	80076c0 <_init>
 8005770:	2600      	movs	r6, #0
 8005772:	4d0a      	ldr	r5, [pc, #40]	@ (800579c <__libc_init_array+0x40>)
 8005774:	4c0a      	ldr	r4, [pc, #40]	@ (80057a0 <__libc_init_array+0x44>)
 8005776:	1b64      	subs	r4, r4, r5
 8005778:	10a4      	asrs	r4, r4, #2
 800577a:	42a6      	cmp	r6, r4
 800577c:	d105      	bne.n	800578a <__libc_init_array+0x2e>
 800577e:	bd70      	pop	{r4, r5, r6, pc}
 8005780:	f855 3b04 	ldr.w	r3, [r5], #4
 8005784:	4798      	blx	r3
 8005786:	3601      	adds	r6, #1
 8005788:	e7ee      	b.n	8005768 <__libc_init_array+0xc>
 800578a:	f855 3b04 	ldr.w	r3, [r5], #4
 800578e:	4798      	blx	r3
 8005790:	3601      	adds	r6, #1
 8005792:	e7f2      	b.n	800577a <__libc_init_array+0x1e>
 8005794:	08008460 	.word	0x08008460
 8005798:	08008460 	.word	0x08008460
 800579c:	08008460 	.word	0x08008460
 80057a0:	08008464 	.word	0x08008464

080057a4 <__retarget_lock_init_recursive>:
 80057a4:	4770      	bx	lr

080057a6 <__retarget_lock_acquire_recursive>:
 80057a6:	4770      	bx	lr

080057a8 <__retarget_lock_release_recursive>:
 80057a8:	4770      	bx	lr

080057aa <memchr>:
 80057aa:	4603      	mov	r3, r0
 80057ac:	b510      	push	{r4, lr}
 80057ae:	b2c9      	uxtb	r1, r1
 80057b0:	4402      	add	r2, r0
 80057b2:	4293      	cmp	r3, r2
 80057b4:	4618      	mov	r0, r3
 80057b6:	d101      	bne.n	80057bc <memchr+0x12>
 80057b8:	2000      	movs	r0, #0
 80057ba:	e003      	b.n	80057c4 <memchr+0x1a>
 80057bc:	7804      	ldrb	r4, [r0, #0]
 80057be:	3301      	adds	r3, #1
 80057c0:	428c      	cmp	r4, r1
 80057c2:	d1f6      	bne.n	80057b2 <memchr+0x8>
 80057c4:	bd10      	pop	{r4, pc}

080057c6 <quorem>:
 80057c6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057ca:	6903      	ldr	r3, [r0, #16]
 80057cc:	690c      	ldr	r4, [r1, #16]
 80057ce:	4607      	mov	r7, r0
 80057d0:	42a3      	cmp	r3, r4
 80057d2:	db7e      	blt.n	80058d2 <quorem+0x10c>
 80057d4:	3c01      	subs	r4, #1
 80057d6:	00a3      	lsls	r3, r4, #2
 80057d8:	f100 0514 	add.w	r5, r0, #20
 80057dc:	f101 0814 	add.w	r8, r1, #20
 80057e0:	9300      	str	r3, [sp, #0]
 80057e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80057e6:	9301      	str	r3, [sp, #4]
 80057e8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80057ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80057f0:	3301      	adds	r3, #1
 80057f2:	429a      	cmp	r2, r3
 80057f4:	fbb2 f6f3 	udiv	r6, r2, r3
 80057f8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80057fc:	d32e      	bcc.n	800585c <quorem+0x96>
 80057fe:	f04f 0a00 	mov.w	sl, #0
 8005802:	46c4      	mov	ip, r8
 8005804:	46ae      	mov	lr, r5
 8005806:	46d3      	mov	fp, sl
 8005808:	f85c 3b04 	ldr.w	r3, [ip], #4
 800580c:	b298      	uxth	r0, r3
 800580e:	fb06 a000 	mla	r0, r6, r0, sl
 8005812:	0c1b      	lsrs	r3, r3, #16
 8005814:	0c02      	lsrs	r2, r0, #16
 8005816:	fb06 2303 	mla	r3, r6, r3, r2
 800581a:	f8de 2000 	ldr.w	r2, [lr]
 800581e:	b280      	uxth	r0, r0
 8005820:	b292      	uxth	r2, r2
 8005822:	1a12      	subs	r2, r2, r0
 8005824:	445a      	add	r2, fp
 8005826:	f8de 0000 	ldr.w	r0, [lr]
 800582a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800582e:	b29b      	uxth	r3, r3
 8005830:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005834:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005838:	b292      	uxth	r2, r2
 800583a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800583e:	45e1      	cmp	r9, ip
 8005840:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005844:	f84e 2b04 	str.w	r2, [lr], #4
 8005848:	d2de      	bcs.n	8005808 <quorem+0x42>
 800584a:	9b00      	ldr	r3, [sp, #0]
 800584c:	58eb      	ldr	r3, [r5, r3]
 800584e:	b92b      	cbnz	r3, 800585c <quorem+0x96>
 8005850:	9b01      	ldr	r3, [sp, #4]
 8005852:	3b04      	subs	r3, #4
 8005854:	429d      	cmp	r5, r3
 8005856:	461a      	mov	r2, r3
 8005858:	d32f      	bcc.n	80058ba <quorem+0xf4>
 800585a:	613c      	str	r4, [r7, #16]
 800585c:	4638      	mov	r0, r7
 800585e:	f001 f8c3 	bl	80069e8 <__mcmp>
 8005862:	2800      	cmp	r0, #0
 8005864:	db25      	blt.n	80058b2 <quorem+0xec>
 8005866:	4629      	mov	r1, r5
 8005868:	2000      	movs	r0, #0
 800586a:	f858 2b04 	ldr.w	r2, [r8], #4
 800586e:	f8d1 c000 	ldr.w	ip, [r1]
 8005872:	fa1f fe82 	uxth.w	lr, r2
 8005876:	fa1f f38c 	uxth.w	r3, ip
 800587a:	eba3 030e 	sub.w	r3, r3, lr
 800587e:	4403      	add	r3, r0
 8005880:	0c12      	lsrs	r2, r2, #16
 8005882:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005886:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800588a:	b29b      	uxth	r3, r3
 800588c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005890:	45c1      	cmp	r9, r8
 8005892:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005896:	f841 3b04 	str.w	r3, [r1], #4
 800589a:	d2e6      	bcs.n	800586a <quorem+0xa4>
 800589c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80058a0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80058a4:	b922      	cbnz	r2, 80058b0 <quorem+0xea>
 80058a6:	3b04      	subs	r3, #4
 80058a8:	429d      	cmp	r5, r3
 80058aa:	461a      	mov	r2, r3
 80058ac:	d30b      	bcc.n	80058c6 <quorem+0x100>
 80058ae:	613c      	str	r4, [r7, #16]
 80058b0:	3601      	adds	r6, #1
 80058b2:	4630      	mov	r0, r6
 80058b4:	b003      	add	sp, #12
 80058b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058ba:	6812      	ldr	r2, [r2, #0]
 80058bc:	3b04      	subs	r3, #4
 80058be:	2a00      	cmp	r2, #0
 80058c0:	d1cb      	bne.n	800585a <quorem+0x94>
 80058c2:	3c01      	subs	r4, #1
 80058c4:	e7c6      	b.n	8005854 <quorem+0x8e>
 80058c6:	6812      	ldr	r2, [r2, #0]
 80058c8:	3b04      	subs	r3, #4
 80058ca:	2a00      	cmp	r2, #0
 80058cc:	d1ef      	bne.n	80058ae <quorem+0xe8>
 80058ce:	3c01      	subs	r4, #1
 80058d0:	e7ea      	b.n	80058a8 <quorem+0xe2>
 80058d2:	2000      	movs	r0, #0
 80058d4:	e7ee      	b.n	80058b4 <quorem+0xee>
	...

080058d8 <_dtoa_r>:
 80058d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058dc:	4614      	mov	r4, r2
 80058de:	461d      	mov	r5, r3
 80058e0:	69c7      	ldr	r7, [r0, #28]
 80058e2:	b097      	sub	sp, #92	@ 0x5c
 80058e4:	4683      	mov	fp, r0
 80058e6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80058ea:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80058ec:	b97f      	cbnz	r7, 800590e <_dtoa_r+0x36>
 80058ee:	2010      	movs	r0, #16
 80058f0:	f7ff f894 	bl	8004a1c <malloc>
 80058f4:	4602      	mov	r2, r0
 80058f6:	f8cb 001c 	str.w	r0, [fp, #28]
 80058fa:	b920      	cbnz	r0, 8005906 <_dtoa_r+0x2e>
 80058fc:	21ef      	movs	r1, #239	@ 0xef
 80058fe:	4ba8      	ldr	r3, [pc, #672]	@ (8005ba0 <_dtoa_r+0x2c8>)
 8005900:	48a8      	ldr	r0, [pc, #672]	@ (8005ba4 <_dtoa_r+0x2cc>)
 8005902:	f001 fba1 	bl	8007048 <__assert_func>
 8005906:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800590a:	6007      	str	r7, [r0, #0]
 800590c:	60c7      	str	r7, [r0, #12]
 800590e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005912:	6819      	ldr	r1, [r3, #0]
 8005914:	b159      	cbz	r1, 800592e <_dtoa_r+0x56>
 8005916:	685a      	ldr	r2, [r3, #4]
 8005918:	2301      	movs	r3, #1
 800591a:	4093      	lsls	r3, r2
 800591c:	604a      	str	r2, [r1, #4]
 800591e:	608b      	str	r3, [r1, #8]
 8005920:	4658      	mov	r0, fp
 8005922:	f000 fe29 	bl	8006578 <_Bfree>
 8005926:	2200      	movs	r2, #0
 8005928:	f8db 301c 	ldr.w	r3, [fp, #28]
 800592c:	601a      	str	r2, [r3, #0]
 800592e:	1e2b      	subs	r3, r5, #0
 8005930:	bfaf      	iteee	ge
 8005932:	2300      	movge	r3, #0
 8005934:	2201      	movlt	r2, #1
 8005936:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800593a:	9303      	strlt	r3, [sp, #12]
 800593c:	bfa8      	it	ge
 800593e:	6033      	strge	r3, [r6, #0]
 8005940:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005944:	4b98      	ldr	r3, [pc, #608]	@ (8005ba8 <_dtoa_r+0x2d0>)
 8005946:	bfb8      	it	lt
 8005948:	6032      	strlt	r2, [r6, #0]
 800594a:	ea33 0308 	bics.w	r3, r3, r8
 800594e:	d112      	bne.n	8005976 <_dtoa_r+0x9e>
 8005950:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005954:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005956:	6013      	str	r3, [r2, #0]
 8005958:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800595c:	4323      	orrs	r3, r4
 800595e:	f000 8550 	beq.w	8006402 <_dtoa_r+0xb2a>
 8005962:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005964:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8005bac <_dtoa_r+0x2d4>
 8005968:	2b00      	cmp	r3, #0
 800596a:	f000 8552 	beq.w	8006412 <_dtoa_r+0xb3a>
 800596e:	f10a 0303 	add.w	r3, sl, #3
 8005972:	f000 bd4c 	b.w	800640e <_dtoa_r+0xb36>
 8005976:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800597a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800597e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005982:	2200      	movs	r2, #0
 8005984:	2300      	movs	r3, #0
 8005986:	f7fb f819 	bl	80009bc <__aeabi_dcmpeq>
 800598a:	4607      	mov	r7, r0
 800598c:	b158      	cbz	r0, 80059a6 <_dtoa_r+0xce>
 800598e:	2301      	movs	r3, #1
 8005990:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005992:	6013      	str	r3, [r2, #0]
 8005994:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005996:	b113      	cbz	r3, 800599e <_dtoa_r+0xc6>
 8005998:	4b85      	ldr	r3, [pc, #532]	@ (8005bb0 <_dtoa_r+0x2d8>)
 800599a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800599c:	6013      	str	r3, [r2, #0]
 800599e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8005bb4 <_dtoa_r+0x2dc>
 80059a2:	f000 bd36 	b.w	8006412 <_dtoa_r+0xb3a>
 80059a6:	ab14      	add	r3, sp, #80	@ 0x50
 80059a8:	9301      	str	r3, [sp, #4]
 80059aa:	ab15      	add	r3, sp, #84	@ 0x54
 80059ac:	9300      	str	r3, [sp, #0]
 80059ae:	4658      	mov	r0, fp
 80059b0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80059b4:	f001 f8c8 	bl	8006b48 <__d2b>
 80059b8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80059bc:	4681      	mov	r9, r0
 80059be:	2e00      	cmp	r6, #0
 80059c0:	d077      	beq.n	8005ab2 <_dtoa_r+0x1da>
 80059c2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80059c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80059c8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80059cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80059d0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80059d4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80059d8:	9712      	str	r7, [sp, #72]	@ 0x48
 80059da:	4619      	mov	r1, r3
 80059dc:	2200      	movs	r2, #0
 80059de:	4b76      	ldr	r3, [pc, #472]	@ (8005bb8 <_dtoa_r+0x2e0>)
 80059e0:	f7fa fbcc 	bl	800017c <__aeabi_dsub>
 80059e4:	a368      	add	r3, pc, #416	@ (adr r3, 8005b88 <_dtoa_r+0x2b0>)
 80059e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ea:	f7fa fd7f 	bl	80004ec <__aeabi_dmul>
 80059ee:	a368      	add	r3, pc, #416	@ (adr r3, 8005b90 <_dtoa_r+0x2b8>)
 80059f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f4:	f7fa fbc4 	bl	8000180 <__adddf3>
 80059f8:	4604      	mov	r4, r0
 80059fa:	4630      	mov	r0, r6
 80059fc:	460d      	mov	r5, r1
 80059fe:	f7fa fd0b 	bl	8000418 <__aeabi_i2d>
 8005a02:	a365      	add	r3, pc, #404	@ (adr r3, 8005b98 <_dtoa_r+0x2c0>)
 8005a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a08:	f7fa fd70 	bl	80004ec <__aeabi_dmul>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	460b      	mov	r3, r1
 8005a10:	4620      	mov	r0, r4
 8005a12:	4629      	mov	r1, r5
 8005a14:	f7fa fbb4 	bl	8000180 <__adddf3>
 8005a18:	4604      	mov	r4, r0
 8005a1a:	460d      	mov	r5, r1
 8005a1c:	f7fb f816 	bl	8000a4c <__aeabi_d2iz>
 8005a20:	2200      	movs	r2, #0
 8005a22:	4607      	mov	r7, r0
 8005a24:	2300      	movs	r3, #0
 8005a26:	4620      	mov	r0, r4
 8005a28:	4629      	mov	r1, r5
 8005a2a:	f7fa ffd1 	bl	80009d0 <__aeabi_dcmplt>
 8005a2e:	b140      	cbz	r0, 8005a42 <_dtoa_r+0x16a>
 8005a30:	4638      	mov	r0, r7
 8005a32:	f7fa fcf1 	bl	8000418 <__aeabi_i2d>
 8005a36:	4622      	mov	r2, r4
 8005a38:	462b      	mov	r3, r5
 8005a3a:	f7fa ffbf 	bl	80009bc <__aeabi_dcmpeq>
 8005a3e:	b900      	cbnz	r0, 8005a42 <_dtoa_r+0x16a>
 8005a40:	3f01      	subs	r7, #1
 8005a42:	2f16      	cmp	r7, #22
 8005a44:	d853      	bhi.n	8005aee <_dtoa_r+0x216>
 8005a46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005a4a:	4b5c      	ldr	r3, [pc, #368]	@ (8005bbc <_dtoa_r+0x2e4>)
 8005a4c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a54:	f7fa ffbc 	bl	80009d0 <__aeabi_dcmplt>
 8005a58:	2800      	cmp	r0, #0
 8005a5a:	d04a      	beq.n	8005af2 <_dtoa_r+0x21a>
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	3f01      	subs	r7, #1
 8005a60:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005a62:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005a64:	1b9b      	subs	r3, r3, r6
 8005a66:	1e5a      	subs	r2, r3, #1
 8005a68:	bf46      	itte	mi
 8005a6a:	f1c3 0801 	rsbmi	r8, r3, #1
 8005a6e:	2300      	movmi	r3, #0
 8005a70:	f04f 0800 	movpl.w	r8, #0
 8005a74:	9209      	str	r2, [sp, #36]	@ 0x24
 8005a76:	bf48      	it	mi
 8005a78:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8005a7a:	2f00      	cmp	r7, #0
 8005a7c:	db3b      	blt.n	8005af6 <_dtoa_r+0x21e>
 8005a7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a80:	970e      	str	r7, [sp, #56]	@ 0x38
 8005a82:	443b      	add	r3, r7
 8005a84:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a86:	2300      	movs	r3, #0
 8005a88:	930a      	str	r3, [sp, #40]	@ 0x28
 8005a8a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005a8c:	2b09      	cmp	r3, #9
 8005a8e:	d866      	bhi.n	8005b5e <_dtoa_r+0x286>
 8005a90:	2b05      	cmp	r3, #5
 8005a92:	bfc4      	itt	gt
 8005a94:	3b04      	subgt	r3, #4
 8005a96:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8005a98:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005a9a:	bfc8      	it	gt
 8005a9c:	2400      	movgt	r4, #0
 8005a9e:	f1a3 0302 	sub.w	r3, r3, #2
 8005aa2:	bfd8      	it	le
 8005aa4:	2401      	movle	r4, #1
 8005aa6:	2b03      	cmp	r3, #3
 8005aa8:	d864      	bhi.n	8005b74 <_dtoa_r+0x29c>
 8005aaa:	e8df f003 	tbb	[pc, r3]
 8005aae:	382b      	.short	0x382b
 8005ab0:	5636      	.short	0x5636
 8005ab2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005ab6:	441e      	add	r6, r3
 8005ab8:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005abc:	2b20      	cmp	r3, #32
 8005abe:	bfc1      	itttt	gt
 8005ac0:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005ac4:	fa08 f803 	lslgt.w	r8, r8, r3
 8005ac8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005acc:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005ad0:	bfd6      	itet	le
 8005ad2:	f1c3 0320 	rsble	r3, r3, #32
 8005ad6:	ea48 0003 	orrgt.w	r0, r8, r3
 8005ada:	fa04 f003 	lslle.w	r0, r4, r3
 8005ade:	f7fa fc8b 	bl	80003f8 <__aeabi_ui2d>
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005ae8:	3e01      	subs	r6, #1
 8005aea:	9212      	str	r2, [sp, #72]	@ 0x48
 8005aec:	e775      	b.n	80059da <_dtoa_r+0x102>
 8005aee:	2301      	movs	r3, #1
 8005af0:	e7b6      	b.n	8005a60 <_dtoa_r+0x188>
 8005af2:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005af4:	e7b5      	b.n	8005a62 <_dtoa_r+0x18a>
 8005af6:	427b      	negs	r3, r7
 8005af8:	930a      	str	r3, [sp, #40]	@ 0x28
 8005afa:	2300      	movs	r3, #0
 8005afc:	eba8 0807 	sub.w	r8, r8, r7
 8005b00:	930e      	str	r3, [sp, #56]	@ 0x38
 8005b02:	e7c2      	b.n	8005a8a <_dtoa_r+0x1b2>
 8005b04:	2300      	movs	r3, #0
 8005b06:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005b08:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	dc35      	bgt.n	8005b7a <_dtoa_r+0x2a2>
 8005b0e:	2301      	movs	r3, #1
 8005b10:	461a      	mov	r2, r3
 8005b12:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005b16:	9221      	str	r2, [sp, #132]	@ 0x84
 8005b18:	e00b      	b.n	8005b32 <_dtoa_r+0x25a>
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e7f3      	b.n	8005b06 <_dtoa_r+0x22e>
 8005b1e:	2300      	movs	r3, #0
 8005b20:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005b22:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005b24:	18fb      	adds	r3, r7, r3
 8005b26:	9308      	str	r3, [sp, #32]
 8005b28:	3301      	adds	r3, #1
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	9307      	str	r3, [sp, #28]
 8005b2e:	bfb8      	it	lt
 8005b30:	2301      	movlt	r3, #1
 8005b32:	2100      	movs	r1, #0
 8005b34:	2204      	movs	r2, #4
 8005b36:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005b3a:	f102 0514 	add.w	r5, r2, #20
 8005b3e:	429d      	cmp	r5, r3
 8005b40:	d91f      	bls.n	8005b82 <_dtoa_r+0x2aa>
 8005b42:	6041      	str	r1, [r0, #4]
 8005b44:	4658      	mov	r0, fp
 8005b46:	f000 fcd7 	bl	80064f8 <_Balloc>
 8005b4a:	4682      	mov	sl, r0
 8005b4c:	2800      	cmp	r0, #0
 8005b4e:	d139      	bne.n	8005bc4 <_dtoa_r+0x2ec>
 8005b50:	4602      	mov	r2, r0
 8005b52:	f240 11af 	movw	r1, #431	@ 0x1af
 8005b56:	4b1a      	ldr	r3, [pc, #104]	@ (8005bc0 <_dtoa_r+0x2e8>)
 8005b58:	e6d2      	b.n	8005900 <_dtoa_r+0x28>
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e7e0      	b.n	8005b20 <_dtoa_r+0x248>
 8005b5e:	2401      	movs	r4, #1
 8005b60:	2300      	movs	r3, #0
 8005b62:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005b64:	9320      	str	r3, [sp, #128]	@ 0x80
 8005b66:	f04f 33ff 	mov.w	r3, #4294967295
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005b70:	2312      	movs	r3, #18
 8005b72:	e7d0      	b.n	8005b16 <_dtoa_r+0x23e>
 8005b74:	2301      	movs	r3, #1
 8005b76:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005b78:	e7f5      	b.n	8005b66 <_dtoa_r+0x28e>
 8005b7a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005b7c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005b80:	e7d7      	b.n	8005b32 <_dtoa_r+0x25a>
 8005b82:	3101      	adds	r1, #1
 8005b84:	0052      	lsls	r2, r2, #1
 8005b86:	e7d8      	b.n	8005b3a <_dtoa_r+0x262>
 8005b88:	636f4361 	.word	0x636f4361
 8005b8c:	3fd287a7 	.word	0x3fd287a7
 8005b90:	8b60c8b3 	.word	0x8b60c8b3
 8005b94:	3fc68a28 	.word	0x3fc68a28
 8005b98:	509f79fb 	.word	0x509f79fb
 8005b9c:	3fd34413 	.word	0x3fd34413
 8005ba0:	08008125 	.word	0x08008125
 8005ba4:	0800813c 	.word	0x0800813c
 8005ba8:	7ff00000 	.word	0x7ff00000
 8005bac:	08008121 	.word	0x08008121
 8005bb0:	080080f5 	.word	0x080080f5
 8005bb4:	080080f4 	.word	0x080080f4
 8005bb8:	3ff80000 	.word	0x3ff80000
 8005bbc:	08008238 	.word	0x08008238
 8005bc0:	08008194 	.word	0x08008194
 8005bc4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005bc8:	6018      	str	r0, [r3, #0]
 8005bca:	9b07      	ldr	r3, [sp, #28]
 8005bcc:	2b0e      	cmp	r3, #14
 8005bce:	f200 80a4 	bhi.w	8005d1a <_dtoa_r+0x442>
 8005bd2:	2c00      	cmp	r4, #0
 8005bd4:	f000 80a1 	beq.w	8005d1a <_dtoa_r+0x442>
 8005bd8:	2f00      	cmp	r7, #0
 8005bda:	dd33      	ble.n	8005c44 <_dtoa_r+0x36c>
 8005bdc:	4b86      	ldr	r3, [pc, #536]	@ (8005df8 <_dtoa_r+0x520>)
 8005bde:	f007 020f 	and.w	r2, r7, #15
 8005be2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005be6:	05f8      	lsls	r0, r7, #23
 8005be8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005bec:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005bf0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005bf4:	d516      	bpl.n	8005c24 <_dtoa_r+0x34c>
 8005bf6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005bfa:	4b80      	ldr	r3, [pc, #512]	@ (8005dfc <_dtoa_r+0x524>)
 8005bfc:	2603      	movs	r6, #3
 8005bfe:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005c02:	f7fa fd9d 	bl	8000740 <__aeabi_ddiv>
 8005c06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c0a:	f004 040f 	and.w	r4, r4, #15
 8005c0e:	4d7b      	ldr	r5, [pc, #492]	@ (8005dfc <_dtoa_r+0x524>)
 8005c10:	b954      	cbnz	r4, 8005c28 <_dtoa_r+0x350>
 8005c12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c1a:	f7fa fd91 	bl	8000740 <__aeabi_ddiv>
 8005c1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c22:	e028      	b.n	8005c76 <_dtoa_r+0x39e>
 8005c24:	2602      	movs	r6, #2
 8005c26:	e7f2      	b.n	8005c0e <_dtoa_r+0x336>
 8005c28:	07e1      	lsls	r1, r4, #31
 8005c2a:	d508      	bpl.n	8005c3e <_dtoa_r+0x366>
 8005c2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c30:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005c34:	f7fa fc5a 	bl	80004ec <__aeabi_dmul>
 8005c38:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005c3c:	3601      	adds	r6, #1
 8005c3e:	1064      	asrs	r4, r4, #1
 8005c40:	3508      	adds	r5, #8
 8005c42:	e7e5      	b.n	8005c10 <_dtoa_r+0x338>
 8005c44:	f000 80d2 	beq.w	8005dec <_dtoa_r+0x514>
 8005c48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005c4c:	427c      	negs	r4, r7
 8005c4e:	4b6a      	ldr	r3, [pc, #424]	@ (8005df8 <_dtoa_r+0x520>)
 8005c50:	f004 020f 	and.w	r2, r4, #15
 8005c54:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c5c:	f7fa fc46 	bl	80004ec <__aeabi_dmul>
 8005c60:	2602      	movs	r6, #2
 8005c62:	2300      	movs	r3, #0
 8005c64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c68:	4d64      	ldr	r5, [pc, #400]	@ (8005dfc <_dtoa_r+0x524>)
 8005c6a:	1124      	asrs	r4, r4, #4
 8005c6c:	2c00      	cmp	r4, #0
 8005c6e:	f040 80b2 	bne.w	8005dd6 <_dtoa_r+0x4fe>
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d1d3      	bne.n	8005c1e <_dtoa_r+0x346>
 8005c76:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005c7a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	f000 80b7 	beq.w	8005df0 <_dtoa_r+0x518>
 8005c82:	2200      	movs	r2, #0
 8005c84:	4620      	mov	r0, r4
 8005c86:	4629      	mov	r1, r5
 8005c88:	4b5d      	ldr	r3, [pc, #372]	@ (8005e00 <_dtoa_r+0x528>)
 8005c8a:	f7fa fea1 	bl	80009d0 <__aeabi_dcmplt>
 8005c8e:	2800      	cmp	r0, #0
 8005c90:	f000 80ae 	beq.w	8005df0 <_dtoa_r+0x518>
 8005c94:	9b07      	ldr	r3, [sp, #28]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	f000 80aa 	beq.w	8005df0 <_dtoa_r+0x518>
 8005c9c:	9b08      	ldr	r3, [sp, #32]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	dd37      	ble.n	8005d12 <_dtoa_r+0x43a>
 8005ca2:	1e7b      	subs	r3, r7, #1
 8005ca4:	4620      	mov	r0, r4
 8005ca6:	9304      	str	r3, [sp, #16]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	4629      	mov	r1, r5
 8005cac:	4b55      	ldr	r3, [pc, #340]	@ (8005e04 <_dtoa_r+0x52c>)
 8005cae:	f7fa fc1d 	bl	80004ec <__aeabi_dmul>
 8005cb2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005cb6:	9c08      	ldr	r4, [sp, #32]
 8005cb8:	3601      	adds	r6, #1
 8005cba:	4630      	mov	r0, r6
 8005cbc:	f7fa fbac 	bl	8000418 <__aeabi_i2d>
 8005cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005cc4:	f7fa fc12 	bl	80004ec <__aeabi_dmul>
 8005cc8:	2200      	movs	r2, #0
 8005cca:	4b4f      	ldr	r3, [pc, #316]	@ (8005e08 <_dtoa_r+0x530>)
 8005ccc:	f7fa fa58 	bl	8000180 <__adddf3>
 8005cd0:	4605      	mov	r5, r0
 8005cd2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005cd6:	2c00      	cmp	r4, #0
 8005cd8:	f040 809a 	bne.w	8005e10 <_dtoa_r+0x538>
 8005cdc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	4b4a      	ldr	r3, [pc, #296]	@ (8005e0c <_dtoa_r+0x534>)
 8005ce4:	f7fa fa4a 	bl	800017c <__aeabi_dsub>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	460b      	mov	r3, r1
 8005cec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005cf0:	462a      	mov	r2, r5
 8005cf2:	4633      	mov	r3, r6
 8005cf4:	f7fa fe8a 	bl	8000a0c <__aeabi_dcmpgt>
 8005cf8:	2800      	cmp	r0, #0
 8005cfa:	f040 828e 	bne.w	800621a <_dtoa_r+0x942>
 8005cfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d02:	462a      	mov	r2, r5
 8005d04:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005d08:	f7fa fe62 	bl	80009d0 <__aeabi_dcmplt>
 8005d0c:	2800      	cmp	r0, #0
 8005d0e:	f040 8127 	bne.w	8005f60 <_dtoa_r+0x688>
 8005d12:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005d16:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005d1a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	f2c0 8163 	blt.w	8005fe8 <_dtoa_r+0x710>
 8005d22:	2f0e      	cmp	r7, #14
 8005d24:	f300 8160 	bgt.w	8005fe8 <_dtoa_r+0x710>
 8005d28:	4b33      	ldr	r3, [pc, #204]	@ (8005df8 <_dtoa_r+0x520>)
 8005d2a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005d2e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005d32:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005d36:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	da03      	bge.n	8005d44 <_dtoa_r+0x46c>
 8005d3c:	9b07      	ldr	r3, [sp, #28]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	f340 8100 	ble.w	8005f44 <_dtoa_r+0x66c>
 8005d44:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005d48:	4656      	mov	r6, sl
 8005d4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d4e:	4620      	mov	r0, r4
 8005d50:	4629      	mov	r1, r5
 8005d52:	f7fa fcf5 	bl	8000740 <__aeabi_ddiv>
 8005d56:	f7fa fe79 	bl	8000a4c <__aeabi_d2iz>
 8005d5a:	4680      	mov	r8, r0
 8005d5c:	f7fa fb5c 	bl	8000418 <__aeabi_i2d>
 8005d60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d64:	f7fa fbc2 	bl	80004ec <__aeabi_dmul>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	460b      	mov	r3, r1
 8005d6c:	4620      	mov	r0, r4
 8005d6e:	4629      	mov	r1, r5
 8005d70:	f7fa fa04 	bl	800017c <__aeabi_dsub>
 8005d74:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005d78:	9d07      	ldr	r5, [sp, #28]
 8005d7a:	f806 4b01 	strb.w	r4, [r6], #1
 8005d7e:	eba6 040a 	sub.w	r4, r6, sl
 8005d82:	42a5      	cmp	r5, r4
 8005d84:	4602      	mov	r2, r0
 8005d86:	460b      	mov	r3, r1
 8005d88:	f040 8116 	bne.w	8005fb8 <_dtoa_r+0x6e0>
 8005d8c:	f7fa f9f8 	bl	8000180 <__adddf3>
 8005d90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d94:	4604      	mov	r4, r0
 8005d96:	460d      	mov	r5, r1
 8005d98:	f7fa fe38 	bl	8000a0c <__aeabi_dcmpgt>
 8005d9c:	2800      	cmp	r0, #0
 8005d9e:	f040 80f8 	bne.w	8005f92 <_dtoa_r+0x6ba>
 8005da2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005da6:	4620      	mov	r0, r4
 8005da8:	4629      	mov	r1, r5
 8005daa:	f7fa fe07 	bl	80009bc <__aeabi_dcmpeq>
 8005dae:	b118      	cbz	r0, 8005db8 <_dtoa_r+0x4e0>
 8005db0:	f018 0f01 	tst.w	r8, #1
 8005db4:	f040 80ed 	bne.w	8005f92 <_dtoa_r+0x6ba>
 8005db8:	4649      	mov	r1, r9
 8005dba:	4658      	mov	r0, fp
 8005dbc:	f000 fbdc 	bl	8006578 <_Bfree>
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	7033      	strb	r3, [r6, #0]
 8005dc4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005dc6:	3701      	adds	r7, #1
 8005dc8:	601f      	str	r7, [r3, #0]
 8005dca:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	f000 8320 	beq.w	8006412 <_dtoa_r+0xb3a>
 8005dd2:	601e      	str	r6, [r3, #0]
 8005dd4:	e31d      	b.n	8006412 <_dtoa_r+0xb3a>
 8005dd6:	07e2      	lsls	r2, r4, #31
 8005dd8:	d505      	bpl.n	8005de6 <_dtoa_r+0x50e>
 8005dda:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005dde:	f7fa fb85 	bl	80004ec <__aeabi_dmul>
 8005de2:	2301      	movs	r3, #1
 8005de4:	3601      	adds	r6, #1
 8005de6:	1064      	asrs	r4, r4, #1
 8005de8:	3508      	adds	r5, #8
 8005dea:	e73f      	b.n	8005c6c <_dtoa_r+0x394>
 8005dec:	2602      	movs	r6, #2
 8005dee:	e742      	b.n	8005c76 <_dtoa_r+0x39e>
 8005df0:	9c07      	ldr	r4, [sp, #28]
 8005df2:	9704      	str	r7, [sp, #16]
 8005df4:	e761      	b.n	8005cba <_dtoa_r+0x3e2>
 8005df6:	bf00      	nop
 8005df8:	08008238 	.word	0x08008238
 8005dfc:	08008210 	.word	0x08008210
 8005e00:	3ff00000 	.word	0x3ff00000
 8005e04:	40240000 	.word	0x40240000
 8005e08:	401c0000 	.word	0x401c0000
 8005e0c:	40140000 	.word	0x40140000
 8005e10:	4b70      	ldr	r3, [pc, #448]	@ (8005fd4 <_dtoa_r+0x6fc>)
 8005e12:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005e14:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005e18:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005e1c:	4454      	add	r4, sl
 8005e1e:	2900      	cmp	r1, #0
 8005e20:	d045      	beq.n	8005eae <_dtoa_r+0x5d6>
 8005e22:	2000      	movs	r0, #0
 8005e24:	496c      	ldr	r1, [pc, #432]	@ (8005fd8 <_dtoa_r+0x700>)
 8005e26:	f7fa fc8b 	bl	8000740 <__aeabi_ddiv>
 8005e2a:	4633      	mov	r3, r6
 8005e2c:	462a      	mov	r2, r5
 8005e2e:	f7fa f9a5 	bl	800017c <__aeabi_dsub>
 8005e32:	4656      	mov	r6, sl
 8005e34:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005e38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e3c:	f7fa fe06 	bl	8000a4c <__aeabi_d2iz>
 8005e40:	4605      	mov	r5, r0
 8005e42:	f7fa fae9 	bl	8000418 <__aeabi_i2d>
 8005e46:	4602      	mov	r2, r0
 8005e48:	460b      	mov	r3, r1
 8005e4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e4e:	f7fa f995 	bl	800017c <__aeabi_dsub>
 8005e52:	4602      	mov	r2, r0
 8005e54:	460b      	mov	r3, r1
 8005e56:	3530      	adds	r5, #48	@ 0x30
 8005e58:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005e5c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005e60:	f806 5b01 	strb.w	r5, [r6], #1
 8005e64:	f7fa fdb4 	bl	80009d0 <__aeabi_dcmplt>
 8005e68:	2800      	cmp	r0, #0
 8005e6a:	d163      	bne.n	8005f34 <_dtoa_r+0x65c>
 8005e6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005e70:	2000      	movs	r0, #0
 8005e72:	495a      	ldr	r1, [pc, #360]	@ (8005fdc <_dtoa_r+0x704>)
 8005e74:	f7fa f982 	bl	800017c <__aeabi_dsub>
 8005e78:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005e7c:	f7fa fda8 	bl	80009d0 <__aeabi_dcmplt>
 8005e80:	2800      	cmp	r0, #0
 8005e82:	f040 8087 	bne.w	8005f94 <_dtoa_r+0x6bc>
 8005e86:	42a6      	cmp	r6, r4
 8005e88:	f43f af43 	beq.w	8005d12 <_dtoa_r+0x43a>
 8005e8c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005e90:	2200      	movs	r2, #0
 8005e92:	4b53      	ldr	r3, [pc, #332]	@ (8005fe0 <_dtoa_r+0x708>)
 8005e94:	f7fa fb2a 	bl	80004ec <__aeabi_dmul>
 8005e98:	2200      	movs	r2, #0
 8005e9a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005e9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ea2:	4b4f      	ldr	r3, [pc, #316]	@ (8005fe0 <_dtoa_r+0x708>)
 8005ea4:	f7fa fb22 	bl	80004ec <__aeabi_dmul>
 8005ea8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005eac:	e7c4      	b.n	8005e38 <_dtoa_r+0x560>
 8005eae:	4631      	mov	r1, r6
 8005eb0:	4628      	mov	r0, r5
 8005eb2:	f7fa fb1b 	bl	80004ec <__aeabi_dmul>
 8005eb6:	4656      	mov	r6, sl
 8005eb8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005ebc:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005ebe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ec2:	f7fa fdc3 	bl	8000a4c <__aeabi_d2iz>
 8005ec6:	4605      	mov	r5, r0
 8005ec8:	f7fa faa6 	bl	8000418 <__aeabi_i2d>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	460b      	mov	r3, r1
 8005ed0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ed4:	f7fa f952 	bl	800017c <__aeabi_dsub>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	460b      	mov	r3, r1
 8005edc:	3530      	adds	r5, #48	@ 0x30
 8005ede:	f806 5b01 	strb.w	r5, [r6], #1
 8005ee2:	42a6      	cmp	r6, r4
 8005ee4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005ee8:	f04f 0200 	mov.w	r2, #0
 8005eec:	d124      	bne.n	8005f38 <_dtoa_r+0x660>
 8005eee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005ef2:	4b39      	ldr	r3, [pc, #228]	@ (8005fd8 <_dtoa_r+0x700>)
 8005ef4:	f7fa f944 	bl	8000180 <__adddf3>
 8005ef8:	4602      	mov	r2, r0
 8005efa:	460b      	mov	r3, r1
 8005efc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f00:	f7fa fd84 	bl	8000a0c <__aeabi_dcmpgt>
 8005f04:	2800      	cmp	r0, #0
 8005f06:	d145      	bne.n	8005f94 <_dtoa_r+0x6bc>
 8005f08:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005f0c:	2000      	movs	r0, #0
 8005f0e:	4932      	ldr	r1, [pc, #200]	@ (8005fd8 <_dtoa_r+0x700>)
 8005f10:	f7fa f934 	bl	800017c <__aeabi_dsub>
 8005f14:	4602      	mov	r2, r0
 8005f16:	460b      	mov	r3, r1
 8005f18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f1c:	f7fa fd58 	bl	80009d0 <__aeabi_dcmplt>
 8005f20:	2800      	cmp	r0, #0
 8005f22:	f43f aef6 	beq.w	8005d12 <_dtoa_r+0x43a>
 8005f26:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005f28:	1e73      	subs	r3, r6, #1
 8005f2a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005f2c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005f30:	2b30      	cmp	r3, #48	@ 0x30
 8005f32:	d0f8      	beq.n	8005f26 <_dtoa_r+0x64e>
 8005f34:	9f04      	ldr	r7, [sp, #16]
 8005f36:	e73f      	b.n	8005db8 <_dtoa_r+0x4e0>
 8005f38:	4b29      	ldr	r3, [pc, #164]	@ (8005fe0 <_dtoa_r+0x708>)
 8005f3a:	f7fa fad7 	bl	80004ec <__aeabi_dmul>
 8005f3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f42:	e7bc      	b.n	8005ebe <_dtoa_r+0x5e6>
 8005f44:	d10c      	bne.n	8005f60 <_dtoa_r+0x688>
 8005f46:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	4b25      	ldr	r3, [pc, #148]	@ (8005fe4 <_dtoa_r+0x70c>)
 8005f4e:	f7fa facd 	bl	80004ec <__aeabi_dmul>
 8005f52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005f56:	f7fa fd4f 	bl	80009f8 <__aeabi_dcmpge>
 8005f5a:	2800      	cmp	r0, #0
 8005f5c:	f000 815b 	beq.w	8006216 <_dtoa_r+0x93e>
 8005f60:	2400      	movs	r4, #0
 8005f62:	4625      	mov	r5, r4
 8005f64:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005f66:	4656      	mov	r6, sl
 8005f68:	43db      	mvns	r3, r3
 8005f6a:	9304      	str	r3, [sp, #16]
 8005f6c:	2700      	movs	r7, #0
 8005f6e:	4621      	mov	r1, r4
 8005f70:	4658      	mov	r0, fp
 8005f72:	f000 fb01 	bl	8006578 <_Bfree>
 8005f76:	2d00      	cmp	r5, #0
 8005f78:	d0dc      	beq.n	8005f34 <_dtoa_r+0x65c>
 8005f7a:	b12f      	cbz	r7, 8005f88 <_dtoa_r+0x6b0>
 8005f7c:	42af      	cmp	r7, r5
 8005f7e:	d003      	beq.n	8005f88 <_dtoa_r+0x6b0>
 8005f80:	4639      	mov	r1, r7
 8005f82:	4658      	mov	r0, fp
 8005f84:	f000 faf8 	bl	8006578 <_Bfree>
 8005f88:	4629      	mov	r1, r5
 8005f8a:	4658      	mov	r0, fp
 8005f8c:	f000 faf4 	bl	8006578 <_Bfree>
 8005f90:	e7d0      	b.n	8005f34 <_dtoa_r+0x65c>
 8005f92:	9704      	str	r7, [sp, #16]
 8005f94:	4633      	mov	r3, r6
 8005f96:	461e      	mov	r6, r3
 8005f98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005f9c:	2a39      	cmp	r2, #57	@ 0x39
 8005f9e:	d107      	bne.n	8005fb0 <_dtoa_r+0x6d8>
 8005fa0:	459a      	cmp	sl, r3
 8005fa2:	d1f8      	bne.n	8005f96 <_dtoa_r+0x6be>
 8005fa4:	9a04      	ldr	r2, [sp, #16]
 8005fa6:	3201      	adds	r2, #1
 8005fa8:	9204      	str	r2, [sp, #16]
 8005faa:	2230      	movs	r2, #48	@ 0x30
 8005fac:	f88a 2000 	strb.w	r2, [sl]
 8005fb0:	781a      	ldrb	r2, [r3, #0]
 8005fb2:	3201      	adds	r2, #1
 8005fb4:	701a      	strb	r2, [r3, #0]
 8005fb6:	e7bd      	b.n	8005f34 <_dtoa_r+0x65c>
 8005fb8:	2200      	movs	r2, #0
 8005fba:	4b09      	ldr	r3, [pc, #36]	@ (8005fe0 <_dtoa_r+0x708>)
 8005fbc:	f7fa fa96 	bl	80004ec <__aeabi_dmul>
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	4604      	mov	r4, r0
 8005fc6:	460d      	mov	r5, r1
 8005fc8:	f7fa fcf8 	bl	80009bc <__aeabi_dcmpeq>
 8005fcc:	2800      	cmp	r0, #0
 8005fce:	f43f aebc 	beq.w	8005d4a <_dtoa_r+0x472>
 8005fd2:	e6f1      	b.n	8005db8 <_dtoa_r+0x4e0>
 8005fd4:	08008238 	.word	0x08008238
 8005fd8:	3fe00000 	.word	0x3fe00000
 8005fdc:	3ff00000 	.word	0x3ff00000
 8005fe0:	40240000 	.word	0x40240000
 8005fe4:	40140000 	.word	0x40140000
 8005fe8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005fea:	2a00      	cmp	r2, #0
 8005fec:	f000 80db 	beq.w	80061a6 <_dtoa_r+0x8ce>
 8005ff0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005ff2:	2a01      	cmp	r2, #1
 8005ff4:	f300 80bf 	bgt.w	8006176 <_dtoa_r+0x89e>
 8005ff8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005ffa:	2a00      	cmp	r2, #0
 8005ffc:	f000 80b7 	beq.w	800616e <_dtoa_r+0x896>
 8006000:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006004:	4646      	mov	r6, r8
 8006006:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006008:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800600a:	2101      	movs	r1, #1
 800600c:	441a      	add	r2, r3
 800600e:	4658      	mov	r0, fp
 8006010:	4498      	add	r8, r3
 8006012:	9209      	str	r2, [sp, #36]	@ 0x24
 8006014:	f000 fb64 	bl	80066e0 <__i2b>
 8006018:	4605      	mov	r5, r0
 800601a:	b15e      	cbz	r6, 8006034 <_dtoa_r+0x75c>
 800601c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800601e:	2b00      	cmp	r3, #0
 8006020:	dd08      	ble.n	8006034 <_dtoa_r+0x75c>
 8006022:	42b3      	cmp	r3, r6
 8006024:	bfa8      	it	ge
 8006026:	4633      	movge	r3, r6
 8006028:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800602a:	eba8 0803 	sub.w	r8, r8, r3
 800602e:	1af6      	subs	r6, r6, r3
 8006030:	1ad3      	subs	r3, r2, r3
 8006032:	9309      	str	r3, [sp, #36]	@ 0x24
 8006034:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006036:	b1f3      	cbz	r3, 8006076 <_dtoa_r+0x79e>
 8006038:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800603a:	2b00      	cmp	r3, #0
 800603c:	f000 80b7 	beq.w	80061ae <_dtoa_r+0x8d6>
 8006040:	b18c      	cbz	r4, 8006066 <_dtoa_r+0x78e>
 8006042:	4629      	mov	r1, r5
 8006044:	4622      	mov	r2, r4
 8006046:	4658      	mov	r0, fp
 8006048:	f000 fc08 	bl	800685c <__pow5mult>
 800604c:	464a      	mov	r2, r9
 800604e:	4601      	mov	r1, r0
 8006050:	4605      	mov	r5, r0
 8006052:	4658      	mov	r0, fp
 8006054:	f000 fb5a 	bl	800670c <__multiply>
 8006058:	4649      	mov	r1, r9
 800605a:	9004      	str	r0, [sp, #16]
 800605c:	4658      	mov	r0, fp
 800605e:	f000 fa8b 	bl	8006578 <_Bfree>
 8006062:	9b04      	ldr	r3, [sp, #16]
 8006064:	4699      	mov	r9, r3
 8006066:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006068:	1b1a      	subs	r2, r3, r4
 800606a:	d004      	beq.n	8006076 <_dtoa_r+0x79e>
 800606c:	4649      	mov	r1, r9
 800606e:	4658      	mov	r0, fp
 8006070:	f000 fbf4 	bl	800685c <__pow5mult>
 8006074:	4681      	mov	r9, r0
 8006076:	2101      	movs	r1, #1
 8006078:	4658      	mov	r0, fp
 800607a:	f000 fb31 	bl	80066e0 <__i2b>
 800607e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006080:	4604      	mov	r4, r0
 8006082:	2b00      	cmp	r3, #0
 8006084:	f000 81c9 	beq.w	800641a <_dtoa_r+0xb42>
 8006088:	461a      	mov	r2, r3
 800608a:	4601      	mov	r1, r0
 800608c:	4658      	mov	r0, fp
 800608e:	f000 fbe5 	bl	800685c <__pow5mult>
 8006092:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006094:	4604      	mov	r4, r0
 8006096:	2b01      	cmp	r3, #1
 8006098:	f300 808f 	bgt.w	80061ba <_dtoa_r+0x8e2>
 800609c:	9b02      	ldr	r3, [sp, #8]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	f040 8087 	bne.w	80061b2 <_dtoa_r+0x8da>
 80060a4:	9b03      	ldr	r3, [sp, #12]
 80060a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	f040 8083 	bne.w	80061b6 <_dtoa_r+0x8de>
 80060b0:	9b03      	ldr	r3, [sp, #12]
 80060b2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80060b6:	0d1b      	lsrs	r3, r3, #20
 80060b8:	051b      	lsls	r3, r3, #20
 80060ba:	b12b      	cbz	r3, 80060c8 <_dtoa_r+0x7f0>
 80060bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060be:	f108 0801 	add.w	r8, r8, #1
 80060c2:	3301      	adds	r3, #1
 80060c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80060c6:	2301      	movs	r3, #1
 80060c8:	930a      	str	r3, [sp, #40]	@ 0x28
 80060ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	f000 81aa 	beq.w	8006426 <_dtoa_r+0xb4e>
 80060d2:	6923      	ldr	r3, [r4, #16]
 80060d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80060d8:	6918      	ldr	r0, [r3, #16]
 80060da:	f000 fab5 	bl	8006648 <__hi0bits>
 80060de:	f1c0 0020 	rsb	r0, r0, #32
 80060e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060e4:	4418      	add	r0, r3
 80060e6:	f010 001f 	ands.w	r0, r0, #31
 80060ea:	d071      	beq.n	80061d0 <_dtoa_r+0x8f8>
 80060ec:	f1c0 0320 	rsb	r3, r0, #32
 80060f0:	2b04      	cmp	r3, #4
 80060f2:	dd65      	ble.n	80061c0 <_dtoa_r+0x8e8>
 80060f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060f6:	f1c0 001c 	rsb	r0, r0, #28
 80060fa:	4403      	add	r3, r0
 80060fc:	4480      	add	r8, r0
 80060fe:	4406      	add	r6, r0
 8006100:	9309      	str	r3, [sp, #36]	@ 0x24
 8006102:	f1b8 0f00 	cmp.w	r8, #0
 8006106:	dd05      	ble.n	8006114 <_dtoa_r+0x83c>
 8006108:	4649      	mov	r1, r9
 800610a:	4642      	mov	r2, r8
 800610c:	4658      	mov	r0, fp
 800610e:	f000 fbff 	bl	8006910 <__lshift>
 8006112:	4681      	mov	r9, r0
 8006114:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006116:	2b00      	cmp	r3, #0
 8006118:	dd05      	ble.n	8006126 <_dtoa_r+0x84e>
 800611a:	4621      	mov	r1, r4
 800611c:	461a      	mov	r2, r3
 800611e:	4658      	mov	r0, fp
 8006120:	f000 fbf6 	bl	8006910 <__lshift>
 8006124:	4604      	mov	r4, r0
 8006126:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006128:	2b00      	cmp	r3, #0
 800612a:	d053      	beq.n	80061d4 <_dtoa_r+0x8fc>
 800612c:	4621      	mov	r1, r4
 800612e:	4648      	mov	r0, r9
 8006130:	f000 fc5a 	bl	80069e8 <__mcmp>
 8006134:	2800      	cmp	r0, #0
 8006136:	da4d      	bge.n	80061d4 <_dtoa_r+0x8fc>
 8006138:	1e7b      	subs	r3, r7, #1
 800613a:	4649      	mov	r1, r9
 800613c:	9304      	str	r3, [sp, #16]
 800613e:	220a      	movs	r2, #10
 8006140:	2300      	movs	r3, #0
 8006142:	4658      	mov	r0, fp
 8006144:	f000 fa3a 	bl	80065bc <__multadd>
 8006148:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800614a:	4681      	mov	r9, r0
 800614c:	2b00      	cmp	r3, #0
 800614e:	f000 816c 	beq.w	800642a <_dtoa_r+0xb52>
 8006152:	2300      	movs	r3, #0
 8006154:	4629      	mov	r1, r5
 8006156:	220a      	movs	r2, #10
 8006158:	4658      	mov	r0, fp
 800615a:	f000 fa2f 	bl	80065bc <__multadd>
 800615e:	9b08      	ldr	r3, [sp, #32]
 8006160:	4605      	mov	r5, r0
 8006162:	2b00      	cmp	r3, #0
 8006164:	dc61      	bgt.n	800622a <_dtoa_r+0x952>
 8006166:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006168:	2b02      	cmp	r3, #2
 800616a:	dc3b      	bgt.n	80061e4 <_dtoa_r+0x90c>
 800616c:	e05d      	b.n	800622a <_dtoa_r+0x952>
 800616e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006170:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006174:	e746      	b.n	8006004 <_dtoa_r+0x72c>
 8006176:	9b07      	ldr	r3, [sp, #28]
 8006178:	1e5c      	subs	r4, r3, #1
 800617a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800617c:	42a3      	cmp	r3, r4
 800617e:	bfbf      	itttt	lt
 8006180:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006182:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8006184:	1ae3      	sublt	r3, r4, r3
 8006186:	18d2      	addlt	r2, r2, r3
 8006188:	bfa8      	it	ge
 800618a:	1b1c      	subge	r4, r3, r4
 800618c:	9b07      	ldr	r3, [sp, #28]
 800618e:	bfbe      	ittt	lt
 8006190:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006192:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8006194:	2400      	movlt	r4, #0
 8006196:	2b00      	cmp	r3, #0
 8006198:	bfb5      	itete	lt
 800619a:	eba8 0603 	sublt.w	r6, r8, r3
 800619e:	4646      	movge	r6, r8
 80061a0:	2300      	movlt	r3, #0
 80061a2:	9b07      	ldrge	r3, [sp, #28]
 80061a4:	e730      	b.n	8006008 <_dtoa_r+0x730>
 80061a6:	4646      	mov	r6, r8
 80061a8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80061aa:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80061ac:	e735      	b.n	800601a <_dtoa_r+0x742>
 80061ae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80061b0:	e75c      	b.n	800606c <_dtoa_r+0x794>
 80061b2:	2300      	movs	r3, #0
 80061b4:	e788      	b.n	80060c8 <_dtoa_r+0x7f0>
 80061b6:	9b02      	ldr	r3, [sp, #8]
 80061b8:	e786      	b.n	80060c8 <_dtoa_r+0x7f0>
 80061ba:	2300      	movs	r3, #0
 80061bc:	930a      	str	r3, [sp, #40]	@ 0x28
 80061be:	e788      	b.n	80060d2 <_dtoa_r+0x7fa>
 80061c0:	d09f      	beq.n	8006102 <_dtoa_r+0x82a>
 80061c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80061c4:	331c      	adds	r3, #28
 80061c6:	441a      	add	r2, r3
 80061c8:	4498      	add	r8, r3
 80061ca:	441e      	add	r6, r3
 80061cc:	9209      	str	r2, [sp, #36]	@ 0x24
 80061ce:	e798      	b.n	8006102 <_dtoa_r+0x82a>
 80061d0:	4603      	mov	r3, r0
 80061d2:	e7f6      	b.n	80061c2 <_dtoa_r+0x8ea>
 80061d4:	9b07      	ldr	r3, [sp, #28]
 80061d6:	9704      	str	r7, [sp, #16]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	dc20      	bgt.n	800621e <_dtoa_r+0x946>
 80061dc:	9308      	str	r3, [sp, #32]
 80061de:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80061e0:	2b02      	cmp	r3, #2
 80061e2:	dd1e      	ble.n	8006222 <_dtoa_r+0x94a>
 80061e4:	9b08      	ldr	r3, [sp, #32]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	f47f aebc 	bne.w	8005f64 <_dtoa_r+0x68c>
 80061ec:	4621      	mov	r1, r4
 80061ee:	2205      	movs	r2, #5
 80061f0:	4658      	mov	r0, fp
 80061f2:	f000 f9e3 	bl	80065bc <__multadd>
 80061f6:	4601      	mov	r1, r0
 80061f8:	4604      	mov	r4, r0
 80061fa:	4648      	mov	r0, r9
 80061fc:	f000 fbf4 	bl	80069e8 <__mcmp>
 8006200:	2800      	cmp	r0, #0
 8006202:	f77f aeaf 	ble.w	8005f64 <_dtoa_r+0x68c>
 8006206:	2331      	movs	r3, #49	@ 0x31
 8006208:	4656      	mov	r6, sl
 800620a:	f806 3b01 	strb.w	r3, [r6], #1
 800620e:	9b04      	ldr	r3, [sp, #16]
 8006210:	3301      	adds	r3, #1
 8006212:	9304      	str	r3, [sp, #16]
 8006214:	e6aa      	b.n	8005f6c <_dtoa_r+0x694>
 8006216:	9c07      	ldr	r4, [sp, #28]
 8006218:	9704      	str	r7, [sp, #16]
 800621a:	4625      	mov	r5, r4
 800621c:	e7f3      	b.n	8006206 <_dtoa_r+0x92e>
 800621e:	9b07      	ldr	r3, [sp, #28]
 8006220:	9308      	str	r3, [sp, #32]
 8006222:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006224:	2b00      	cmp	r3, #0
 8006226:	f000 8104 	beq.w	8006432 <_dtoa_r+0xb5a>
 800622a:	2e00      	cmp	r6, #0
 800622c:	dd05      	ble.n	800623a <_dtoa_r+0x962>
 800622e:	4629      	mov	r1, r5
 8006230:	4632      	mov	r2, r6
 8006232:	4658      	mov	r0, fp
 8006234:	f000 fb6c 	bl	8006910 <__lshift>
 8006238:	4605      	mov	r5, r0
 800623a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800623c:	2b00      	cmp	r3, #0
 800623e:	d05a      	beq.n	80062f6 <_dtoa_r+0xa1e>
 8006240:	4658      	mov	r0, fp
 8006242:	6869      	ldr	r1, [r5, #4]
 8006244:	f000 f958 	bl	80064f8 <_Balloc>
 8006248:	4606      	mov	r6, r0
 800624a:	b928      	cbnz	r0, 8006258 <_dtoa_r+0x980>
 800624c:	4602      	mov	r2, r0
 800624e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006252:	4b83      	ldr	r3, [pc, #524]	@ (8006460 <_dtoa_r+0xb88>)
 8006254:	f7ff bb54 	b.w	8005900 <_dtoa_r+0x28>
 8006258:	692a      	ldr	r2, [r5, #16]
 800625a:	f105 010c 	add.w	r1, r5, #12
 800625e:	3202      	adds	r2, #2
 8006260:	0092      	lsls	r2, r2, #2
 8006262:	300c      	adds	r0, #12
 8006264:	f000 fee2 	bl	800702c <memcpy>
 8006268:	2201      	movs	r2, #1
 800626a:	4631      	mov	r1, r6
 800626c:	4658      	mov	r0, fp
 800626e:	f000 fb4f 	bl	8006910 <__lshift>
 8006272:	462f      	mov	r7, r5
 8006274:	4605      	mov	r5, r0
 8006276:	f10a 0301 	add.w	r3, sl, #1
 800627a:	9307      	str	r3, [sp, #28]
 800627c:	9b08      	ldr	r3, [sp, #32]
 800627e:	4453      	add	r3, sl
 8006280:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006282:	9b02      	ldr	r3, [sp, #8]
 8006284:	f003 0301 	and.w	r3, r3, #1
 8006288:	930a      	str	r3, [sp, #40]	@ 0x28
 800628a:	9b07      	ldr	r3, [sp, #28]
 800628c:	4621      	mov	r1, r4
 800628e:	3b01      	subs	r3, #1
 8006290:	4648      	mov	r0, r9
 8006292:	9302      	str	r3, [sp, #8]
 8006294:	f7ff fa97 	bl	80057c6 <quorem>
 8006298:	4639      	mov	r1, r7
 800629a:	9008      	str	r0, [sp, #32]
 800629c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80062a0:	4648      	mov	r0, r9
 80062a2:	f000 fba1 	bl	80069e8 <__mcmp>
 80062a6:	462a      	mov	r2, r5
 80062a8:	9009      	str	r0, [sp, #36]	@ 0x24
 80062aa:	4621      	mov	r1, r4
 80062ac:	4658      	mov	r0, fp
 80062ae:	f000 fbb7 	bl	8006a20 <__mdiff>
 80062b2:	68c2      	ldr	r2, [r0, #12]
 80062b4:	4606      	mov	r6, r0
 80062b6:	bb02      	cbnz	r2, 80062fa <_dtoa_r+0xa22>
 80062b8:	4601      	mov	r1, r0
 80062ba:	4648      	mov	r0, r9
 80062bc:	f000 fb94 	bl	80069e8 <__mcmp>
 80062c0:	4602      	mov	r2, r0
 80062c2:	4631      	mov	r1, r6
 80062c4:	4658      	mov	r0, fp
 80062c6:	920c      	str	r2, [sp, #48]	@ 0x30
 80062c8:	f000 f956 	bl	8006578 <_Bfree>
 80062cc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80062ce:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80062d0:	9e07      	ldr	r6, [sp, #28]
 80062d2:	ea43 0102 	orr.w	r1, r3, r2
 80062d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80062d8:	4319      	orrs	r1, r3
 80062da:	d110      	bne.n	80062fe <_dtoa_r+0xa26>
 80062dc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80062e0:	d029      	beq.n	8006336 <_dtoa_r+0xa5e>
 80062e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	dd02      	ble.n	80062ee <_dtoa_r+0xa16>
 80062e8:	9b08      	ldr	r3, [sp, #32]
 80062ea:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80062ee:	9b02      	ldr	r3, [sp, #8]
 80062f0:	f883 8000 	strb.w	r8, [r3]
 80062f4:	e63b      	b.n	8005f6e <_dtoa_r+0x696>
 80062f6:	4628      	mov	r0, r5
 80062f8:	e7bb      	b.n	8006272 <_dtoa_r+0x99a>
 80062fa:	2201      	movs	r2, #1
 80062fc:	e7e1      	b.n	80062c2 <_dtoa_r+0x9ea>
 80062fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006300:	2b00      	cmp	r3, #0
 8006302:	db04      	blt.n	800630e <_dtoa_r+0xa36>
 8006304:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8006306:	430b      	orrs	r3, r1
 8006308:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800630a:	430b      	orrs	r3, r1
 800630c:	d120      	bne.n	8006350 <_dtoa_r+0xa78>
 800630e:	2a00      	cmp	r2, #0
 8006310:	dded      	ble.n	80062ee <_dtoa_r+0xa16>
 8006312:	4649      	mov	r1, r9
 8006314:	2201      	movs	r2, #1
 8006316:	4658      	mov	r0, fp
 8006318:	f000 fafa 	bl	8006910 <__lshift>
 800631c:	4621      	mov	r1, r4
 800631e:	4681      	mov	r9, r0
 8006320:	f000 fb62 	bl	80069e8 <__mcmp>
 8006324:	2800      	cmp	r0, #0
 8006326:	dc03      	bgt.n	8006330 <_dtoa_r+0xa58>
 8006328:	d1e1      	bne.n	80062ee <_dtoa_r+0xa16>
 800632a:	f018 0f01 	tst.w	r8, #1
 800632e:	d0de      	beq.n	80062ee <_dtoa_r+0xa16>
 8006330:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006334:	d1d8      	bne.n	80062e8 <_dtoa_r+0xa10>
 8006336:	2339      	movs	r3, #57	@ 0x39
 8006338:	9a02      	ldr	r2, [sp, #8]
 800633a:	7013      	strb	r3, [r2, #0]
 800633c:	4633      	mov	r3, r6
 800633e:	461e      	mov	r6, r3
 8006340:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006344:	3b01      	subs	r3, #1
 8006346:	2a39      	cmp	r2, #57	@ 0x39
 8006348:	d052      	beq.n	80063f0 <_dtoa_r+0xb18>
 800634a:	3201      	adds	r2, #1
 800634c:	701a      	strb	r2, [r3, #0]
 800634e:	e60e      	b.n	8005f6e <_dtoa_r+0x696>
 8006350:	2a00      	cmp	r2, #0
 8006352:	dd07      	ble.n	8006364 <_dtoa_r+0xa8c>
 8006354:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006358:	d0ed      	beq.n	8006336 <_dtoa_r+0xa5e>
 800635a:	9a02      	ldr	r2, [sp, #8]
 800635c:	f108 0301 	add.w	r3, r8, #1
 8006360:	7013      	strb	r3, [r2, #0]
 8006362:	e604      	b.n	8005f6e <_dtoa_r+0x696>
 8006364:	9b07      	ldr	r3, [sp, #28]
 8006366:	9a07      	ldr	r2, [sp, #28]
 8006368:	f803 8c01 	strb.w	r8, [r3, #-1]
 800636c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800636e:	4293      	cmp	r3, r2
 8006370:	d028      	beq.n	80063c4 <_dtoa_r+0xaec>
 8006372:	4649      	mov	r1, r9
 8006374:	2300      	movs	r3, #0
 8006376:	220a      	movs	r2, #10
 8006378:	4658      	mov	r0, fp
 800637a:	f000 f91f 	bl	80065bc <__multadd>
 800637e:	42af      	cmp	r7, r5
 8006380:	4681      	mov	r9, r0
 8006382:	f04f 0300 	mov.w	r3, #0
 8006386:	f04f 020a 	mov.w	r2, #10
 800638a:	4639      	mov	r1, r7
 800638c:	4658      	mov	r0, fp
 800638e:	d107      	bne.n	80063a0 <_dtoa_r+0xac8>
 8006390:	f000 f914 	bl	80065bc <__multadd>
 8006394:	4607      	mov	r7, r0
 8006396:	4605      	mov	r5, r0
 8006398:	9b07      	ldr	r3, [sp, #28]
 800639a:	3301      	adds	r3, #1
 800639c:	9307      	str	r3, [sp, #28]
 800639e:	e774      	b.n	800628a <_dtoa_r+0x9b2>
 80063a0:	f000 f90c 	bl	80065bc <__multadd>
 80063a4:	4629      	mov	r1, r5
 80063a6:	4607      	mov	r7, r0
 80063a8:	2300      	movs	r3, #0
 80063aa:	220a      	movs	r2, #10
 80063ac:	4658      	mov	r0, fp
 80063ae:	f000 f905 	bl	80065bc <__multadd>
 80063b2:	4605      	mov	r5, r0
 80063b4:	e7f0      	b.n	8006398 <_dtoa_r+0xac0>
 80063b6:	9b08      	ldr	r3, [sp, #32]
 80063b8:	2700      	movs	r7, #0
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	bfcc      	ite	gt
 80063be:	461e      	movgt	r6, r3
 80063c0:	2601      	movle	r6, #1
 80063c2:	4456      	add	r6, sl
 80063c4:	4649      	mov	r1, r9
 80063c6:	2201      	movs	r2, #1
 80063c8:	4658      	mov	r0, fp
 80063ca:	f000 faa1 	bl	8006910 <__lshift>
 80063ce:	4621      	mov	r1, r4
 80063d0:	4681      	mov	r9, r0
 80063d2:	f000 fb09 	bl	80069e8 <__mcmp>
 80063d6:	2800      	cmp	r0, #0
 80063d8:	dcb0      	bgt.n	800633c <_dtoa_r+0xa64>
 80063da:	d102      	bne.n	80063e2 <_dtoa_r+0xb0a>
 80063dc:	f018 0f01 	tst.w	r8, #1
 80063e0:	d1ac      	bne.n	800633c <_dtoa_r+0xa64>
 80063e2:	4633      	mov	r3, r6
 80063e4:	461e      	mov	r6, r3
 80063e6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80063ea:	2a30      	cmp	r2, #48	@ 0x30
 80063ec:	d0fa      	beq.n	80063e4 <_dtoa_r+0xb0c>
 80063ee:	e5be      	b.n	8005f6e <_dtoa_r+0x696>
 80063f0:	459a      	cmp	sl, r3
 80063f2:	d1a4      	bne.n	800633e <_dtoa_r+0xa66>
 80063f4:	9b04      	ldr	r3, [sp, #16]
 80063f6:	3301      	adds	r3, #1
 80063f8:	9304      	str	r3, [sp, #16]
 80063fa:	2331      	movs	r3, #49	@ 0x31
 80063fc:	f88a 3000 	strb.w	r3, [sl]
 8006400:	e5b5      	b.n	8005f6e <_dtoa_r+0x696>
 8006402:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006404:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006464 <_dtoa_r+0xb8c>
 8006408:	b11b      	cbz	r3, 8006412 <_dtoa_r+0xb3a>
 800640a:	f10a 0308 	add.w	r3, sl, #8
 800640e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006410:	6013      	str	r3, [r2, #0]
 8006412:	4650      	mov	r0, sl
 8006414:	b017      	add	sp, #92	@ 0x5c
 8006416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800641a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800641c:	2b01      	cmp	r3, #1
 800641e:	f77f ae3d 	ble.w	800609c <_dtoa_r+0x7c4>
 8006422:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006424:	930a      	str	r3, [sp, #40]	@ 0x28
 8006426:	2001      	movs	r0, #1
 8006428:	e65b      	b.n	80060e2 <_dtoa_r+0x80a>
 800642a:	9b08      	ldr	r3, [sp, #32]
 800642c:	2b00      	cmp	r3, #0
 800642e:	f77f aed6 	ble.w	80061de <_dtoa_r+0x906>
 8006432:	4656      	mov	r6, sl
 8006434:	4621      	mov	r1, r4
 8006436:	4648      	mov	r0, r9
 8006438:	f7ff f9c5 	bl	80057c6 <quorem>
 800643c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006440:	9b08      	ldr	r3, [sp, #32]
 8006442:	f806 8b01 	strb.w	r8, [r6], #1
 8006446:	eba6 020a 	sub.w	r2, r6, sl
 800644a:	4293      	cmp	r3, r2
 800644c:	ddb3      	ble.n	80063b6 <_dtoa_r+0xade>
 800644e:	4649      	mov	r1, r9
 8006450:	2300      	movs	r3, #0
 8006452:	220a      	movs	r2, #10
 8006454:	4658      	mov	r0, fp
 8006456:	f000 f8b1 	bl	80065bc <__multadd>
 800645a:	4681      	mov	r9, r0
 800645c:	e7ea      	b.n	8006434 <_dtoa_r+0xb5c>
 800645e:	bf00      	nop
 8006460:	08008194 	.word	0x08008194
 8006464:	08008118 	.word	0x08008118

08006468 <_free_r>:
 8006468:	b538      	push	{r3, r4, r5, lr}
 800646a:	4605      	mov	r5, r0
 800646c:	2900      	cmp	r1, #0
 800646e:	d040      	beq.n	80064f2 <_free_r+0x8a>
 8006470:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006474:	1f0c      	subs	r4, r1, #4
 8006476:	2b00      	cmp	r3, #0
 8006478:	bfb8      	it	lt
 800647a:	18e4      	addlt	r4, r4, r3
 800647c:	f7fe fb78 	bl	8004b70 <__malloc_lock>
 8006480:	4a1c      	ldr	r2, [pc, #112]	@ (80064f4 <_free_r+0x8c>)
 8006482:	6813      	ldr	r3, [r2, #0]
 8006484:	b933      	cbnz	r3, 8006494 <_free_r+0x2c>
 8006486:	6063      	str	r3, [r4, #4]
 8006488:	6014      	str	r4, [r2, #0]
 800648a:	4628      	mov	r0, r5
 800648c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006490:	f7fe bb74 	b.w	8004b7c <__malloc_unlock>
 8006494:	42a3      	cmp	r3, r4
 8006496:	d908      	bls.n	80064aa <_free_r+0x42>
 8006498:	6820      	ldr	r0, [r4, #0]
 800649a:	1821      	adds	r1, r4, r0
 800649c:	428b      	cmp	r3, r1
 800649e:	bf01      	itttt	eq
 80064a0:	6819      	ldreq	r1, [r3, #0]
 80064a2:	685b      	ldreq	r3, [r3, #4]
 80064a4:	1809      	addeq	r1, r1, r0
 80064a6:	6021      	streq	r1, [r4, #0]
 80064a8:	e7ed      	b.n	8006486 <_free_r+0x1e>
 80064aa:	461a      	mov	r2, r3
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	b10b      	cbz	r3, 80064b4 <_free_r+0x4c>
 80064b0:	42a3      	cmp	r3, r4
 80064b2:	d9fa      	bls.n	80064aa <_free_r+0x42>
 80064b4:	6811      	ldr	r1, [r2, #0]
 80064b6:	1850      	adds	r0, r2, r1
 80064b8:	42a0      	cmp	r0, r4
 80064ba:	d10b      	bne.n	80064d4 <_free_r+0x6c>
 80064bc:	6820      	ldr	r0, [r4, #0]
 80064be:	4401      	add	r1, r0
 80064c0:	1850      	adds	r0, r2, r1
 80064c2:	4283      	cmp	r3, r0
 80064c4:	6011      	str	r1, [r2, #0]
 80064c6:	d1e0      	bne.n	800648a <_free_r+0x22>
 80064c8:	6818      	ldr	r0, [r3, #0]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	4408      	add	r0, r1
 80064ce:	6010      	str	r0, [r2, #0]
 80064d0:	6053      	str	r3, [r2, #4]
 80064d2:	e7da      	b.n	800648a <_free_r+0x22>
 80064d4:	d902      	bls.n	80064dc <_free_r+0x74>
 80064d6:	230c      	movs	r3, #12
 80064d8:	602b      	str	r3, [r5, #0]
 80064da:	e7d6      	b.n	800648a <_free_r+0x22>
 80064dc:	6820      	ldr	r0, [r4, #0]
 80064de:	1821      	adds	r1, r4, r0
 80064e0:	428b      	cmp	r3, r1
 80064e2:	bf01      	itttt	eq
 80064e4:	6819      	ldreq	r1, [r3, #0]
 80064e6:	685b      	ldreq	r3, [r3, #4]
 80064e8:	1809      	addeq	r1, r1, r0
 80064ea:	6021      	streq	r1, [r4, #0]
 80064ec:	6063      	str	r3, [r4, #4]
 80064ee:	6054      	str	r4, [r2, #4]
 80064f0:	e7cb      	b.n	800648a <_free_r+0x22>
 80064f2:	bd38      	pop	{r3, r4, r5, pc}
 80064f4:	20000688 	.word	0x20000688

080064f8 <_Balloc>:
 80064f8:	b570      	push	{r4, r5, r6, lr}
 80064fa:	69c6      	ldr	r6, [r0, #28]
 80064fc:	4604      	mov	r4, r0
 80064fe:	460d      	mov	r5, r1
 8006500:	b976      	cbnz	r6, 8006520 <_Balloc+0x28>
 8006502:	2010      	movs	r0, #16
 8006504:	f7fe fa8a 	bl	8004a1c <malloc>
 8006508:	4602      	mov	r2, r0
 800650a:	61e0      	str	r0, [r4, #28]
 800650c:	b920      	cbnz	r0, 8006518 <_Balloc+0x20>
 800650e:	216b      	movs	r1, #107	@ 0x6b
 8006510:	4b17      	ldr	r3, [pc, #92]	@ (8006570 <_Balloc+0x78>)
 8006512:	4818      	ldr	r0, [pc, #96]	@ (8006574 <_Balloc+0x7c>)
 8006514:	f000 fd98 	bl	8007048 <__assert_func>
 8006518:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800651c:	6006      	str	r6, [r0, #0]
 800651e:	60c6      	str	r6, [r0, #12]
 8006520:	69e6      	ldr	r6, [r4, #28]
 8006522:	68f3      	ldr	r3, [r6, #12]
 8006524:	b183      	cbz	r3, 8006548 <_Balloc+0x50>
 8006526:	69e3      	ldr	r3, [r4, #28]
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800652e:	b9b8      	cbnz	r0, 8006560 <_Balloc+0x68>
 8006530:	2101      	movs	r1, #1
 8006532:	fa01 f605 	lsl.w	r6, r1, r5
 8006536:	1d72      	adds	r2, r6, #5
 8006538:	4620      	mov	r0, r4
 800653a:	0092      	lsls	r2, r2, #2
 800653c:	f000 fda2 	bl	8007084 <_calloc_r>
 8006540:	b160      	cbz	r0, 800655c <_Balloc+0x64>
 8006542:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006546:	e00e      	b.n	8006566 <_Balloc+0x6e>
 8006548:	2221      	movs	r2, #33	@ 0x21
 800654a:	2104      	movs	r1, #4
 800654c:	4620      	mov	r0, r4
 800654e:	f000 fd99 	bl	8007084 <_calloc_r>
 8006552:	69e3      	ldr	r3, [r4, #28]
 8006554:	60f0      	str	r0, [r6, #12]
 8006556:	68db      	ldr	r3, [r3, #12]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d1e4      	bne.n	8006526 <_Balloc+0x2e>
 800655c:	2000      	movs	r0, #0
 800655e:	bd70      	pop	{r4, r5, r6, pc}
 8006560:	6802      	ldr	r2, [r0, #0]
 8006562:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006566:	2300      	movs	r3, #0
 8006568:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800656c:	e7f7      	b.n	800655e <_Balloc+0x66>
 800656e:	bf00      	nop
 8006570:	08008125 	.word	0x08008125
 8006574:	080081a5 	.word	0x080081a5

08006578 <_Bfree>:
 8006578:	b570      	push	{r4, r5, r6, lr}
 800657a:	69c6      	ldr	r6, [r0, #28]
 800657c:	4605      	mov	r5, r0
 800657e:	460c      	mov	r4, r1
 8006580:	b976      	cbnz	r6, 80065a0 <_Bfree+0x28>
 8006582:	2010      	movs	r0, #16
 8006584:	f7fe fa4a 	bl	8004a1c <malloc>
 8006588:	4602      	mov	r2, r0
 800658a:	61e8      	str	r0, [r5, #28]
 800658c:	b920      	cbnz	r0, 8006598 <_Bfree+0x20>
 800658e:	218f      	movs	r1, #143	@ 0x8f
 8006590:	4b08      	ldr	r3, [pc, #32]	@ (80065b4 <_Bfree+0x3c>)
 8006592:	4809      	ldr	r0, [pc, #36]	@ (80065b8 <_Bfree+0x40>)
 8006594:	f000 fd58 	bl	8007048 <__assert_func>
 8006598:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800659c:	6006      	str	r6, [r0, #0]
 800659e:	60c6      	str	r6, [r0, #12]
 80065a0:	b13c      	cbz	r4, 80065b2 <_Bfree+0x3a>
 80065a2:	69eb      	ldr	r3, [r5, #28]
 80065a4:	6862      	ldr	r2, [r4, #4]
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80065ac:	6021      	str	r1, [r4, #0]
 80065ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80065b2:	bd70      	pop	{r4, r5, r6, pc}
 80065b4:	08008125 	.word	0x08008125
 80065b8:	080081a5 	.word	0x080081a5

080065bc <__multadd>:
 80065bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065c0:	4607      	mov	r7, r0
 80065c2:	460c      	mov	r4, r1
 80065c4:	461e      	mov	r6, r3
 80065c6:	2000      	movs	r0, #0
 80065c8:	690d      	ldr	r5, [r1, #16]
 80065ca:	f101 0c14 	add.w	ip, r1, #20
 80065ce:	f8dc 3000 	ldr.w	r3, [ip]
 80065d2:	3001      	adds	r0, #1
 80065d4:	b299      	uxth	r1, r3
 80065d6:	fb02 6101 	mla	r1, r2, r1, r6
 80065da:	0c1e      	lsrs	r6, r3, #16
 80065dc:	0c0b      	lsrs	r3, r1, #16
 80065de:	fb02 3306 	mla	r3, r2, r6, r3
 80065e2:	b289      	uxth	r1, r1
 80065e4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80065e8:	4285      	cmp	r5, r0
 80065ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80065ee:	f84c 1b04 	str.w	r1, [ip], #4
 80065f2:	dcec      	bgt.n	80065ce <__multadd+0x12>
 80065f4:	b30e      	cbz	r6, 800663a <__multadd+0x7e>
 80065f6:	68a3      	ldr	r3, [r4, #8]
 80065f8:	42ab      	cmp	r3, r5
 80065fa:	dc19      	bgt.n	8006630 <__multadd+0x74>
 80065fc:	6861      	ldr	r1, [r4, #4]
 80065fe:	4638      	mov	r0, r7
 8006600:	3101      	adds	r1, #1
 8006602:	f7ff ff79 	bl	80064f8 <_Balloc>
 8006606:	4680      	mov	r8, r0
 8006608:	b928      	cbnz	r0, 8006616 <__multadd+0x5a>
 800660a:	4602      	mov	r2, r0
 800660c:	21ba      	movs	r1, #186	@ 0xba
 800660e:	4b0c      	ldr	r3, [pc, #48]	@ (8006640 <__multadd+0x84>)
 8006610:	480c      	ldr	r0, [pc, #48]	@ (8006644 <__multadd+0x88>)
 8006612:	f000 fd19 	bl	8007048 <__assert_func>
 8006616:	6922      	ldr	r2, [r4, #16]
 8006618:	f104 010c 	add.w	r1, r4, #12
 800661c:	3202      	adds	r2, #2
 800661e:	0092      	lsls	r2, r2, #2
 8006620:	300c      	adds	r0, #12
 8006622:	f000 fd03 	bl	800702c <memcpy>
 8006626:	4621      	mov	r1, r4
 8006628:	4638      	mov	r0, r7
 800662a:	f7ff ffa5 	bl	8006578 <_Bfree>
 800662e:	4644      	mov	r4, r8
 8006630:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006634:	3501      	adds	r5, #1
 8006636:	615e      	str	r6, [r3, #20]
 8006638:	6125      	str	r5, [r4, #16]
 800663a:	4620      	mov	r0, r4
 800663c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006640:	08008194 	.word	0x08008194
 8006644:	080081a5 	.word	0x080081a5

08006648 <__hi0bits>:
 8006648:	4603      	mov	r3, r0
 800664a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800664e:	bf3a      	itte	cc
 8006650:	0403      	lslcc	r3, r0, #16
 8006652:	2010      	movcc	r0, #16
 8006654:	2000      	movcs	r0, #0
 8006656:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800665a:	bf3c      	itt	cc
 800665c:	021b      	lslcc	r3, r3, #8
 800665e:	3008      	addcc	r0, #8
 8006660:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006664:	bf3c      	itt	cc
 8006666:	011b      	lslcc	r3, r3, #4
 8006668:	3004      	addcc	r0, #4
 800666a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800666e:	bf3c      	itt	cc
 8006670:	009b      	lslcc	r3, r3, #2
 8006672:	3002      	addcc	r0, #2
 8006674:	2b00      	cmp	r3, #0
 8006676:	db05      	blt.n	8006684 <__hi0bits+0x3c>
 8006678:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800667c:	f100 0001 	add.w	r0, r0, #1
 8006680:	bf08      	it	eq
 8006682:	2020      	moveq	r0, #32
 8006684:	4770      	bx	lr

08006686 <__lo0bits>:
 8006686:	6803      	ldr	r3, [r0, #0]
 8006688:	4602      	mov	r2, r0
 800668a:	f013 0007 	ands.w	r0, r3, #7
 800668e:	d00b      	beq.n	80066a8 <__lo0bits+0x22>
 8006690:	07d9      	lsls	r1, r3, #31
 8006692:	d421      	bmi.n	80066d8 <__lo0bits+0x52>
 8006694:	0798      	lsls	r0, r3, #30
 8006696:	bf49      	itett	mi
 8006698:	085b      	lsrmi	r3, r3, #1
 800669a:	089b      	lsrpl	r3, r3, #2
 800669c:	2001      	movmi	r0, #1
 800669e:	6013      	strmi	r3, [r2, #0]
 80066a0:	bf5c      	itt	pl
 80066a2:	2002      	movpl	r0, #2
 80066a4:	6013      	strpl	r3, [r2, #0]
 80066a6:	4770      	bx	lr
 80066a8:	b299      	uxth	r1, r3
 80066aa:	b909      	cbnz	r1, 80066b0 <__lo0bits+0x2a>
 80066ac:	2010      	movs	r0, #16
 80066ae:	0c1b      	lsrs	r3, r3, #16
 80066b0:	b2d9      	uxtb	r1, r3
 80066b2:	b909      	cbnz	r1, 80066b8 <__lo0bits+0x32>
 80066b4:	3008      	adds	r0, #8
 80066b6:	0a1b      	lsrs	r3, r3, #8
 80066b8:	0719      	lsls	r1, r3, #28
 80066ba:	bf04      	itt	eq
 80066bc:	091b      	lsreq	r3, r3, #4
 80066be:	3004      	addeq	r0, #4
 80066c0:	0799      	lsls	r1, r3, #30
 80066c2:	bf04      	itt	eq
 80066c4:	089b      	lsreq	r3, r3, #2
 80066c6:	3002      	addeq	r0, #2
 80066c8:	07d9      	lsls	r1, r3, #31
 80066ca:	d403      	bmi.n	80066d4 <__lo0bits+0x4e>
 80066cc:	085b      	lsrs	r3, r3, #1
 80066ce:	f100 0001 	add.w	r0, r0, #1
 80066d2:	d003      	beq.n	80066dc <__lo0bits+0x56>
 80066d4:	6013      	str	r3, [r2, #0]
 80066d6:	4770      	bx	lr
 80066d8:	2000      	movs	r0, #0
 80066da:	4770      	bx	lr
 80066dc:	2020      	movs	r0, #32
 80066de:	4770      	bx	lr

080066e0 <__i2b>:
 80066e0:	b510      	push	{r4, lr}
 80066e2:	460c      	mov	r4, r1
 80066e4:	2101      	movs	r1, #1
 80066e6:	f7ff ff07 	bl	80064f8 <_Balloc>
 80066ea:	4602      	mov	r2, r0
 80066ec:	b928      	cbnz	r0, 80066fa <__i2b+0x1a>
 80066ee:	f240 1145 	movw	r1, #325	@ 0x145
 80066f2:	4b04      	ldr	r3, [pc, #16]	@ (8006704 <__i2b+0x24>)
 80066f4:	4804      	ldr	r0, [pc, #16]	@ (8006708 <__i2b+0x28>)
 80066f6:	f000 fca7 	bl	8007048 <__assert_func>
 80066fa:	2301      	movs	r3, #1
 80066fc:	6144      	str	r4, [r0, #20]
 80066fe:	6103      	str	r3, [r0, #16]
 8006700:	bd10      	pop	{r4, pc}
 8006702:	bf00      	nop
 8006704:	08008194 	.word	0x08008194
 8006708:	080081a5 	.word	0x080081a5

0800670c <__multiply>:
 800670c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006710:	4614      	mov	r4, r2
 8006712:	690a      	ldr	r2, [r1, #16]
 8006714:	6923      	ldr	r3, [r4, #16]
 8006716:	460f      	mov	r7, r1
 8006718:	429a      	cmp	r2, r3
 800671a:	bfa2      	ittt	ge
 800671c:	4623      	movge	r3, r4
 800671e:	460c      	movge	r4, r1
 8006720:	461f      	movge	r7, r3
 8006722:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006726:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800672a:	68a3      	ldr	r3, [r4, #8]
 800672c:	6861      	ldr	r1, [r4, #4]
 800672e:	eb0a 0609 	add.w	r6, sl, r9
 8006732:	42b3      	cmp	r3, r6
 8006734:	b085      	sub	sp, #20
 8006736:	bfb8      	it	lt
 8006738:	3101      	addlt	r1, #1
 800673a:	f7ff fedd 	bl	80064f8 <_Balloc>
 800673e:	b930      	cbnz	r0, 800674e <__multiply+0x42>
 8006740:	4602      	mov	r2, r0
 8006742:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006746:	4b43      	ldr	r3, [pc, #268]	@ (8006854 <__multiply+0x148>)
 8006748:	4843      	ldr	r0, [pc, #268]	@ (8006858 <__multiply+0x14c>)
 800674a:	f000 fc7d 	bl	8007048 <__assert_func>
 800674e:	f100 0514 	add.w	r5, r0, #20
 8006752:	462b      	mov	r3, r5
 8006754:	2200      	movs	r2, #0
 8006756:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800675a:	4543      	cmp	r3, r8
 800675c:	d321      	bcc.n	80067a2 <__multiply+0x96>
 800675e:	f107 0114 	add.w	r1, r7, #20
 8006762:	f104 0214 	add.w	r2, r4, #20
 8006766:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800676a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800676e:	9302      	str	r3, [sp, #8]
 8006770:	1b13      	subs	r3, r2, r4
 8006772:	3b15      	subs	r3, #21
 8006774:	f023 0303 	bic.w	r3, r3, #3
 8006778:	3304      	adds	r3, #4
 800677a:	f104 0715 	add.w	r7, r4, #21
 800677e:	42ba      	cmp	r2, r7
 8006780:	bf38      	it	cc
 8006782:	2304      	movcc	r3, #4
 8006784:	9301      	str	r3, [sp, #4]
 8006786:	9b02      	ldr	r3, [sp, #8]
 8006788:	9103      	str	r1, [sp, #12]
 800678a:	428b      	cmp	r3, r1
 800678c:	d80c      	bhi.n	80067a8 <__multiply+0x9c>
 800678e:	2e00      	cmp	r6, #0
 8006790:	dd03      	ble.n	800679a <__multiply+0x8e>
 8006792:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006796:	2b00      	cmp	r3, #0
 8006798:	d05a      	beq.n	8006850 <__multiply+0x144>
 800679a:	6106      	str	r6, [r0, #16]
 800679c:	b005      	add	sp, #20
 800679e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067a2:	f843 2b04 	str.w	r2, [r3], #4
 80067a6:	e7d8      	b.n	800675a <__multiply+0x4e>
 80067a8:	f8b1 a000 	ldrh.w	sl, [r1]
 80067ac:	f1ba 0f00 	cmp.w	sl, #0
 80067b0:	d023      	beq.n	80067fa <__multiply+0xee>
 80067b2:	46a9      	mov	r9, r5
 80067b4:	f04f 0c00 	mov.w	ip, #0
 80067b8:	f104 0e14 	add.w	lr, r4, #20
 80067bc:	f85e 7b04 	ldr.w	r7, [lr], #4
 80067c0:	f8d9 3000 	ldr.w	r3, [r9]
 80067c4:	fa1f fb87 	uxth.w	fp, r7
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	fb0a 330b 	mla	r3, sl, fp, r3
 80067ce:	4463      	add	r3, ip
 80067d0:	f8d9 c000 	ldr.w	ip, [r9]
 80067d4:	0c3f      	lsrs	r7, r7, #16
 80067d6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80067da:	fb0a c707 	mla	r7, sl, r7, ip
 80067de:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80067e8:	4572      	cmp	r2, lr
 80067ea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80067ee:	f849 3b04 	str.w	r3, [r9], #4
 80067f2:	d8e3      	bhi.n	80067bc <__multiply+0xb0>
 80067f4:	9b01      	ldr	r3, [sp, #4]
 80067f6:	f845 c003 	str.w	ip, [r5, r3]
 80067fa:	9b03      	ldr	r3, [sp, #12]
 80067fc:	3104      	adds	r1, #4
 80067fe:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006802:	f1b9 0f00 	cmp.w	r9, #0
 8006806:	d021      	beq.n	800684c <__multiply+0x140>
 8006808:	46ae      	mov	lr, r5
 800680a:	f04f 0a00 	mov.w	sl, #0
 800680e:	682b      	ldr	r3, [r5, #0]
 8006810:	f104 0c14 	add.w	ip, r4, #20
 8006814:	f8bc b000 	ldrh.w	fp, [ip]
 8006818:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800681c:	b29b      	uxth	r3, r3
 800681e:	fb09 770b 	mla	r7, r9, fp, r7
 8006822:	4457      	add	r7, sl
 8006824:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006828:	f84e 3b04 	str.w	r3, [lr], #4
 800682c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006830:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006834:	f8be 3000 	ldrh.w	r3, [lr]
 8006838:	4562      	cmp	r2, ip
 800683a:	fb09 330a 	mla	r3, r9, sl, r3
 800683e:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006842:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006846:	d8e5      	bhi.n	8006814 <__multiply+0x108>
 8006848:	9f01      	ldr	r7, [sp, #4]
 800684a:	51eb      	str	r3, [r5, r7]
 800684c:	3504      	adds	r5, #4
 800684e:	e79a      	b.n	8006786 <__multiply+0x7a>
 8006850:	3e01      	subs	r6, #1
 8006852:	e79c      	b.n	800678e <__multiply+0x82>
 8006854:	08008194 	.word	0x08008194
 8006858:	080081a5 	.word	0x080081a5

0800685c <__pow5mult>:
 800685c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006860:	4615      	mov	r5, r2
 8006862:	f012 0203 	ands.w	r2, r2, #3
 8006866:	4607      	mov	r7, r0
 8006868:	460e      	mov	r6, r1
 800686a:	d007      	beq.n	800687c <__pow5mult+0x20>
 800686c:	4c25      	ldr	r4, [pc, #148]	@ (8006904 <__pow5mult+0xa8>)
 800686e:	3a01      	subs	r2, #1
 8006870:	2300      	movs	r3, #0
 8006872:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006876:	f7ff fea1 	bl	80065bc <__multadd>
 800687a:	4606      	mov	r6, r0
 800687c:	10ad      	asrs	r5, r5, #2
 800687e:	d03d      	beq.n	80068fc <__pow5mult+0xa0>
 8006880:	69fc      	ldr	r4, [r7, #28]
 8006882:	b97c      	cbnz	r4, 80068a4 <__pow5mult+0x48>
 8006884:	2010      	movs	r0, #16
 8006886:	f7fe f8c9 	bl	8004a1c <malloc>
 800688a:	4602      	mov	r2, r0
 800688c:	61f8      	str	r0, [r7, #28]
 800688e:	b928      	cbnz	r0, 800689c <__pow5mult+0x40>
 8006890:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006894:	4b1c      	ldr	r3, [pc, #112]	@ (8006908 <__pow5mult+0xac>)
 8006896:	481d      	ldr	r0, [pc, #116]	@ (800690c <__pow5mult+0xb0>)
 8006898:	f000 fbd6 	bl	8007048 <__assert_func>
 800689c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80068a0:	6004      	str	r4, [r0, #0]
 80068a2:	60c4      	str	r4, [r0, #12]
 80068a4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80068a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80068ac:	b94c      	cbnz	r4, 80068c2 <__pow5mult+0x66>
 80068ae:	f240 2171 	movw	r1, #625	@ 0x271
 80068b2:	4638      	mov	r0, r7
 80068b4:	f7ff ff14 	bl	80066e0 <__i2b>
 80068b8:	2300      	movs	r3, #0
 80068ba:	4604      	mov	r4, r0
 80068bc:	f8c8 0008 	str.w	r0, [r8, #8]
 80068c0:	6003      	str	r3, [r0, #0]
 80068c2:	f04f 0900 	mov.w	r9, #0
 80068c6:	07eb      	lsls	r3, r5, #31
 80068c8:	d50a      	bpl.n	80068e0 <__pow5mult+0x84>
 80068ca:	4631      	mov	r1, r6
 80068cc:	4622      	mov	r2, r4
 80068ce:	4638      	mov	r0, r7
 80068d0:	f7ff ff1c 	bl	800670c <__multiply>
 80068d4:	4680      	mov	r8, r0
 80068d6:	4631      	mov	r1, r6
 80068d8:	4638      	mov	r0, r7
 80068da:	f7ff fe4d 	bl	8006578 <_Bfree>
 80068de:	4646      	mov	r6, r8
 80068e0:	106d      	asrs	r5, r5, #1
 80068e2:	d00b      	beq.n	80068fc <__pow5mult+0xa0>
 80068e4:	6820      	ldr	r0, [r4, #0]
 80068e6:	b938      	cbnz	r0, 80068f8 <__pow5mult+0x9c>
 80068e8:	4622      	mov	r2, r4
 80068ea:	4621      	mov	r1, r4
 80068ec:	4638      	mov	r0, r7
 80068ee:	f7ff ff0d 	bl	800670c <__multiply>
 80068f2:	6020      	str	r0, [r4, #0]
 80068f4:	f8c0 9000 	str.w	r9, [r0]
 80068f8:	4604      	mov	r4, r0
 80068fa:	e7e4      	b.n	80068c6 <__pow5mult+0x6a>
 80068fc:	4630      	mov	r0, r6
 80068fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006902:	bf00      	nop
 8006904:	08008200 	.word	0x08008200
 8006908:	08008125 	.word	0x08008125
 800690c:	080081a5 	.word	0x080081a5

08006910 <__lshift>:
 8006910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006914:	460c      	mov	r4, r1
 8006916:	4607      	mov	r7, r0
 8006918:	4691      	mov	r9, r2
 800691a:	6923      	ldr	r3, [r4, #16]
 800691c:	6849      	ldr	r1, [r1, #4]
 800691e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006922:	68a3      	ldr	r3, [r4, #8]
 8006924:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006928:	f108 0601 	add.w	r6, r8, #1
 800692c:	42b3      	cmp	r3, r6
 800692e:	db0b      	blt.n	8006948 <__lshift+0x38>
 8006930:	4638      	mov	r0, r7
 8006932:	f7ff fde1 	bl	80064f8 <_Balloc>
 8006936:	4605      	mov	r5, r0
 8006938:	b948      	cbnz	r0, 800694e <__lshift+0x3e>
 800693a:	4602      	mov	r2, r0
 800693c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006940:	4b27      	ldr	r3, [pc, #156]	@ (80069e0 <__lshift+0xd0>)
 8006942:	4828      	ldr	r0, [pc, #160]	@ (80069e4 <__lshift+0xd4>)
 8006944:	f000 fb80 	bl	8007048 <__assert_func>
 8006948:	3101      	adds	r1, #1
 800694a:	005b      	lsls	r3, r3, #1
 800694c:	e7ee      	b.n	800692c <__lshift+0x1c>
 800694e:	2300      	movs	r3, #0
 8006950:	f100 0114 	add.w	r1, r0, #20
 8006954:	f100 0210 	add.w	r2, r0, #16
 8006958:	4618      	mov	r0, r3
 800695a:	4553      	cmp	r3, sl
 800695c:	db33      	blt.n	80069c6 <__lshift+0xb6>
 800695e:	6920      	ldr	r0, [r4, #16]
 8006960:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006964:	f104 0314 	add.w	r3, r4, #20
 8006968:	f019 091f 	ands.w	r9, r9, #31
 800696c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006970:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006974:	d02b      	beq.n	80069ce <__lshift+0xbe>
 8006976:	468a      	mov	sl, r1
 8006978:	2200      	movs	r2, #0
 800697a:	f1c9 0e20 	rsb	lr, r9, #32
 800697e:	6818      	ldr	r0, [r3, #0]
 8006980:	fa00 f009 	lsl.w	r0, r0, r9
 8006984:	4310      	orrs	r0, r2
 8006986:	f84a 0b04 	str.w	r0, [sl], #4
 800698a:	f853 2b04 	ldr.w	r2, [r3], #4
 800698e:	459c      	cmp	ip, r3
 8006990:	fa22 f20e 	lsr.w	r2, r2, lr
 8006994:	d8f3      	bhi.n	800697e <__lshift+0x6e>
 8006996:	ebac 0304 	sub.w	r3, ip, r4
 800699a:	3b15      	subs	r3, #21
 800699c:	f023 0303 	bic.w	r3, r3, #3
 80069a0:	3304      	adds	r3, #4
 80069a2:	f104 0015 	add.w	r0, r4, #21
 80069a6:	4584      	cmp	ip, r0
 80069a8:	bf38      	it	cc
 80069aa:	2304      	movcc	r3, #4
 80069ac:	50ca      	str	r2, [r1, r3]
 80069ae:	b10a      	cbz	r2, 80069b4 <__lshift+0xa4>
 80069b0:	f108 0602 	add.w	r6, r8, #2
 80069b4:	3e01      	subs	r6, #1
 80069b6:	4638      	mov	r0, r7
 80069b8:	4621      	mov	r1, r4
 80069ba:	612e      	str	r6, [r5, #16]
 80069bc:	f7ff fddc 	bl	8006578 <_Bfree>
 80069c0:	4628      	mov	r0, r5
 80069c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069c6:	f842 0f04 	str.w	r0, [r2, #4]!
 80069ca:	3301      	adds	r3, #1
 80069cc:	e7c5      	b.n	800695a <__lshift+0x4a>
 80069ce:	3904      	subs	r1, #4
 80069d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80069d4:	459c      	cmp	ip, r3
 80069d6:	f841 2f04 	str.w	r2, [r1, #4]!
 80069da:	d8f9      	bhi.n	80069d0 <__lshift+0xc0>
 80069dc:	e7ea      	b.n	80069b4 <__lshift+0xa4>
 80069de:	bf00      	nop
 80069e0:	08008194 	.word	0x08008194
 80069e4:	080081a5 	.word	0x080081a5

080069e8 <__mcmp>:
 80069e8:	4603      	mov	r3, r0
 80069ea:	690a      	ldr	r2, [r1, #16]
 80069ec:	6900      	ldr	r0, [r0, #16]
 80069ee:	b530      	push	{r4, r5, lr}
 80069f0:	1a80      	subs	r0, r0, r2
 80069f2:	d10e      	bne.n	8006a12 <__mcmp+0x2a>
 80069f4:	3314      	adds	r3, #20
 80069f6:	3114      	adds	r1, #20
 80069f8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80069fc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006a00:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006a04:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006a08:	4295      	cmp	r5, r2
 8006a0a:	d003      	beq.n	8006a14 <__mcmp+0x2c>
 8006a0c:	d205      	bcs.n	8006a1a <__mcmp+0x32>
 8006a0e:	f04f 30ff 	mov.w	r0, #4294967295
 8006a12:	bd30      	pop	{r4, r5, pc}
 8006a14:	42a3      	cmp	r3, r4
 8006a16:	d3f3      	bcc.n	8006a00 <__mcmp+0x18>
 8006a18:	e7fb      	b.n	8006a12 <__mcmp+0x2a>
 8006a1a:	2001      	movs	r0, #1
 8006a1c:	e7f9      	b.n	8006a12 <__mcmp+0x2a>
	...

08006a20 <__mdiff>:
 8006a20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a24:	4689      	mov	r9, r1
 8006a26:	4606      	mov	r6, r0
 8006a28:	4611      	mov	r1, r2
 8006a2a:	4648      	mov	r0, r9
 8006a2c:	4614      	mov	r4, r2
 8006a2e:	f7ff ffdb 	bl	80069e8 <__mcmp>
 8006a32:	1e05      	subs	r5, r0, #0
 8006a34:	d112      	bne.n	8006a5c <__mdiff+0x3c>
 8006a36:	4629      	mov	r1, r5
 8006a38:	4630      	mov	r0, r6
 8006a3a:	f7ff fd5d 	bl	80064f8 <_Balloc>
 8006a3e:	4602      	mov	r2, r0
 8006a40:	b928      	cbnz	r0, 8006a4e <__mdiff+0x2e>
 8006a42:	f240 2137 	movw	r1, #567	@ 0x237
 8006a46:	4b3e      	ldr	r3, [pc, #248]	@ (8006b40 <__mdiff+0x120>)
 8006a48:	483e      	ldr	r0, [pc, #248]	@ (8006b44 <__mdiff+0x124>)
 8006a4a:	f000 fafd 	bl	8007048 <__assert_func>
 8006a4e:	2301      	movs	r3, #1
 8006a50:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006a54:	4610      	mov	r0, r2
 8006a56:	b003      	add	sp, #12
 8006a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a5c:	bfbc      	itt	lt
 8006a5e:	464b      	movlt	r3, r9
 8006a60:	46a1      	movlt	r9, r4
 8006a62:	4630      	mov	r0, r6
 8006a64:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006a68:	bfba      	itte	lt
 8006a6a:	461c      	movlt	r4, r3
 8006a6c:	2501      	movlt	r5, #1
 8006a6e:	2500      	movge	r5, #0
 8006a70:	f7ff fd42 	bl	80064f8 <_Balloc>
 8006a74:	4602      	mov	r2, r0
 8006a76:	b918      	cbnz	r0, 8006a80 <__mdiff+0x60>
 8006a78:	f240 2145 	movw	r1, #581	@ 0x245
 8006a7c:	4b30      	ldr	r3, [pc, #192]	@ (8006b40 <__mdiff+0x120>)
 8006a7e:	e7e3      	b.n	8006a48 <__mdiff+0x28>
 8006a80:	f100 0b14 	add.w	fp, r0, #20
 8006a84:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006a88:	f109 0310 	add.w	r3, r9, #16
 8006a8c:	60c5      	str	r5, [r0, #12]
 8006a8e:	f04f 0c00 	mov.w	ip, #0
 8006a92:	f109 0514 	add.w	r5, r9, #20
 8006a96:	46d9      	mov	r9, fp
 8006a98:	6926      	ldr	r6, [r4, #16]
 8006a9a:	f104 0e14 	add.w	lr, r4, #20
 8006a9e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006aa2:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006aa6:	9301      	str	r3, [sp, #4]
 8006aa8:	9b01      	ldr	r3, [sp, #4]
 8006aaa:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006aae:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006ab2:	b281      	uxth	r1, r0
 8006ab4:	9301      	str	r3, [sp, #4]
 8006ab6:	fa1f f38a 	uxth.w	r3, sl
 8006aba:	1a5b      	subs	r3, r3, r1
 8006abc:	0c00      	lsrs	r0, r0, #16
 8006abe:	4463      	add	r3, ip
 8006ac0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006ac4:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006ace:	4576      	cmp	r6, lr
 8006ad0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006ad4:	f849 3b04 	str.w	r3, [r9], #4
 8006ad8:	d8e6      	bhi.n	8006aa8 <__mdiff+0x88>
 8006ada:	1b33      	subs	r3, r6, r4
 8006adc:	3b15      	subs	r3, #21
 8006ade:	f023 0303 	bic.w	r3, r3, #3
 8006ae2:	3415      	adds	r4, #21
 8006ae4:	3304      	adds	r3, #4
 8006ae6:	42a6      	cmp	r6, r4
 8006ae8:	bf38      	it	cc
 8006aea:	2304      	movcc	r3, #4
 8006aec:	441d      	add	r5, r3
 8006aee:	445b      	add	r3, fp
 8006af0:	461e      	mov	r6, r3
 8006af2:	462c      	mov	r4, r5
 8006af4:	4544      	cmp	r4, r8
 8006af6:	d30e      	bcc.n	8006b16 <__mdiff+0xf6>
 8006af8:	f108 0103 	add.w	r1, r8, #3
 8006afc:	1b49      	subs	r1, r1, r5
 8006afe:	f021 0103 	bic.w	r1, r1, #3
 8006b02:	3d03      	subs	r5, #3
 8006b04:	45a8      	cmp	r8, r5
 8006b06:	bf38      	it	cc
 8006b08:	2100      	movcc	r1, #0
 8006b0a:	440b      	add	r3, r1
 8006b0c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006b10:	b199      	cbz	r1, 8006b3a <__mdiff+0x11a>
 8006b12:	6117      	str	r7, [r2, #16]
 8006b14:	e79e      	b.n	8006a54 <__mdiff+0x34>
 8006b16:	46e6      	mov	lr, ip
 8006b18:	f854 1b04 	ldr.w	r1, [r4], #4
 8006b1c:	fa1f fc81 	uxth.w	ip, r1
 8006b20:	44f4      	add	ip, lr
 8006b22:	0c08      	lsrs	r0, r1, #16
 8006b24:	4471      	add	r1, lr
 8006b26:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006b2a:	b289      	uxth	r1, r1
 8006b2c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006b30:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006b34:	f846 1b04 	str.w	r1, [r6], #4
 8006b38:	e7dc      	b.n	8006af4 <__mdiff+0xd4>
 8006b3a:	3f01      	subs	r7, #1
 8006b3c:	e7e6      	b.n	8006b0c <__mdiff+0xec>
 8006b3e:	bf00      	nop
 8006b40:	08008194 	.word	0x08008194
 8006b44:	080081a5 	.word	0x080081a5

08006b48 <__d2b>:
 8006b48:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8006b4c:	2101      	movs	r1, #1
 8006b4e:	4690      	mov	r8, r2
 8006b50:	4699      	mov	r9, r3
 8006b52:	9e08      	ldr	r6, [sp, #32]
 8006b54:	f7ff fcd0 	bl	80064f8 <_Balloc>
 8006b58:	4604      	mov	r4, r0
 8006b5a:	b930      	cbnz	r0, 8006b6a <__d2b+0x22>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	f240 310f 	movw	r1, #783	@ 0x30f
 8006b62:	4b23      	ldr	r3, [pc, #140]	@ (8006bf0 <__d2b+0xa8>)
 8006b64:	4823      	ldr	r0, [pc, #140]	@ (8006bf4 <__d2b+0xac>)
 8006b66:	f000 fa6f 	bl	8007048 <__assert_func>
 8006b6a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006b6e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006b72:	b10d      	cbz	r5, 8006b78 <__d2b+0x30>
 8006b74:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006b78:	9301      	str	r3, [sp, #4]
 8006b7a:	f1b8 0300 	subs.w	r3, r8, #0
 8006b7e:	d024      	beq.n	8006bca <__d2b+0x82>
 8006b80:	4668      	mov	r0, sp
 8006b82:	9300      	str	r3, [sp, #0]
 8006b84:	f7ff fd7f 	bl	8006686 <__lo0bits>
 8006b88:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006b8c:	b1d8      	cbz	r0, 8006bc6 <__d2b+0x7e>
 8006b8e:	f1c0 0320 	rsb	r3, r0, #32
 8006b92:	fa02 f303 	lsl.w	r3, r2, r3
 8006b96:	430b      	orrs	r3, r1
 8006b98:	40c2      	lsrs	r2, r0
 8006b9a:	6163      	str	r3, [r4, #20]
 8006b9c:	9201      	str	r2, [sp, #4]
 8006b9e:	9b01      	ldr	r3, [sp, #4]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	bf0c      	ite	eq
 8006ba4:	2201      	moveq	r2, #1
 8006ba6:	2202      	movne	r2, #2
 8006ba8:	61a3      	str	r3, [r4, #24]
 8006baa:	6122      	str	r2, [r4, #16]
 8006bac:	b1ad      	cbz	r5, 8006bda <__d2b+0x92>
 8006bae:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006bb2:	4405      	add	r5, r0
 8006bb4:	6035      	str	r5, [r6, #0]
 8006bb6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006bba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bbc:	6018      	str	r0, [r3, #0]
 8006bbe:	4620      	mov	r0, r4
 8006bc0:	b002      	add	sp, #8
 8006bc2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8006bc6:	6161      	str	r1, [r4, #20]
 8006bc8:	e7e9      	b.n	8006b9e <__d2b+0x56>
 8006bca:	a801      	add	r0, sp, #4
 8006bcc:	f7ff fd5b 	bl	8006686 <__lo0bits>
 8006bd0:	9b01      	ldr	r3, [sp, #4]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	6163      	str	r3, [r4, #20]
 8006bd6:	3020      	adds	r0, #32
 8006bd8:	e7e7      	b.n	8006baa <__d2b+0x62>
 8006bda:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006bde:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006be2:	6030      	str	r0, [r6, #0]
 8006be4:	6918      	ldr	r0, [r3, #16]
 8006be6:	f7ff fd2f 	bl	8006648 <__hi0bits>
 8006bea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006bee:	e7e4      	b.n	8006bba <__d2b+0x72>
 8006bf0:	08008194 	.word	0x08008194
 8006bf4:	080081a5 	.word	0x080081a5

08006bf8 <__ssputs_r>:
 8006bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bfc:	461f      	mov	r7, r3
 8006bfe:	688e      	ldr	r6, [r1, #8]
 8006c00:	4682      	mov	sl, r0
 8006c02:	42be      	cmp	r6, r7
 8006c04:	460c      	mov	r4, r1
 8006c06:	4690      	mov	r8, r2
 8006c08:	680b      	ldr	r3, [r1, #0]
 8006c0a:	d82d      	bhi.n	8006c68 <__ssputs_r+0x70>
 8006c0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006c10:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006c14:	d026      	beq.n	8006c64 <__ssputs_r+0x6c>
 8006c16:	6965      	ldr	r5, [r4, #20]
 8006c18:	6909      	ldr	r1, [r1, #16]
 8006c1a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006c1e:	eba3 0901 	sub.w	r9, r3, r1
 8006c22:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006c26:	1c7b      	adds	r3, r7, #1
 8006c28:	444b      	add	r3, r9
 8006c2a:	106d      	asrs	r5, r5, #1
 8006c2c:	429d      	cmp	r5, r3
 8006c2e:	bf38      	it	cc
 8006c30:	461d      	movcc	r5, r3
 8006c32:	0553      	lsls	r3, r2, #21
 8006c34:	d527      	bpl.n	8006c86 <__ssputs_r+0x8e>
 8006c36:	4629      	mov	r1, r5
 8006c38:	f7fd ff1a 	bl	8004a70 <_malloc_r>
 8006c3c:	4606      	mov	r6, r0
 8006c3e:	b360      	cbz	r0, 8006c9a <__ssputs_r+0xa2>
 8006c40:	464a      	mov	r2, r9
 8006c42:	6921      	ldr	r1, [r4, #16]
 8006c44:	f000 f9f2 	bl	800702c <memcpy>
 8006c48:	89a3      	ldrh	r3, [r4, #12]
 8006c4a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006c4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c52:	81a3      	strh	r3, [r4, #12]
 8006c54:	6126      	str	r6, [r4, #16]
 8006c56:	444e      	add	r6, r9
 8006c58:	6026      	str	r6, [r4, #0]
 8006c5a:	463e      	mov	r6, r7
 8006c5c:	6165      	str	r5, [r4, #20]
 8006c5e:	eba5 0509 	sub.w	r5, r5, r9
 8006c62:	60a5      	str	r5, [r4, #8]
 8006c64:	42be      	cmp	r6, r7
 8006c66:	d900      	bls.n	8006c6a <__ssputs_r+0x72>
 8006c68:	463e      	mov	r6, r7
 8006c6a:	4632      	mov	r2, r6
 8006c6c:	4641      	mov	r1, r8
 8006c6e:	6820      	ldr	r0, [r4, #0]
 8006c70:	f000 f9c2 	bl	8006ff8 <memmove>
 8006c74:	2000      	movs	r0, #0
 8006c76:	68a3      	ldr	r3, [r4, #8]
 8006c78:	1b9b      	subs	r3, r3, r6
 8006c7a:	60a3      	str	r3, [r4, #8]
 8006c7c:	6823      	ldr	r3, [r4, #0]
 8006c7e:	4433      	add	r3, r6
 8006c80:	6023      	str	r3, [r4, #0]
 8006c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c86:	462a      	mov	r2, r5
 8006c88:	f000 fa22 	bl	80070d0 <_realloc_r>
 8006c8c:	4606      	mov	r6, r0
 8006c8e:	2800      	cmp	r0, #0
 8006c90:	d1e0      	bne.n	8006c54 <__ssputs_r+0x5c>
 8006c92:	4650      	mov	r0, sl
 8006c94:	6921      	ldr	r1, [r4, #16]
 8006c96:	f7ff fbe7 	bl	8006468 <_free_r>
 8006c9a:	230c      	movs	r3, #12
 8006c9c:	f8ca 3000 	str.w	r3, [sl]
 8006ca0:	89a3      	ldrh	r3, [r4, #12]
 8006ca2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ca6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006caa:	81a3      	strh	r3, [r4, #12]
 8006cac:	e7e9      	b.n	8006c82 <__ssputs_r+0x8a>
	...

08006cb0 <_svfiprintf_r>:
 8006cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cb4:	4698      	mov	r8, r3
 8006cb6:	898b      	ldrh	r3, [r1, #12]
 8006cb8:	4607      	mov	r7, r0
 8006cba:	061b      	lsls	r3, r3, #24
 8006cbc:	460d      	mov	r5, r1
 8006cbe:	4614      	mov	r4, r2
 8006cc0:	b09d      	sub	sp, #116	@ 0x74
 8006cc2:	d510      	bpl.n	8006ce6 <_svfiprintf_r+0x36>
 8006cc4:	690b      	ldr	r3, [r1, #16]
 8006cc6:	b973      	cbnz	r3, 8006ce6 <_svfiprintf_r+0x36>
 8006cc8:	2140      	movs	r1, #64	@ 0x40
 8006cca:	f7fd fed1 	bl	8004a70 <_malloc_r>
 8006cce:	6028      	str	r0, [r5, #0]
 8006cd0:	6128      	str	r0, [r5, #16]
 8006cd2:	b930      	cbnz	r0, 8006ce2 <_svfiprintf_r+0x32>
 8006cd4:	230c      	movs	r3, #12
 8006cd6:	603b      	str	r3, [r7, #0]
 8006cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8006cdc:	b01d      	add	sp, #116	@ 0x74
 8006cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ce2:	2340      	movs	r3, #64	@ 0x40
 8006ce4:	616b      	str	r3, [r5, #20]
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	9309      	str	r3, [sp, #36]	@ 0x24
 8006cea:	2320      	movs	r3, #32
 8006cec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006cf0:	2330      	movs	r3, #48	@ 0x30
 8006cf2:	f04f 0901 	mov.w	r9, #1
 8006cf6:	f8cd 800c 	str.w	r8, [sp, #12]
 8006cfa:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8006e94 <_svfiprintf_r+0x1e4>
 8006cfe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006d02:	4623      	mov	r3, r4
 8006d04:	469a      	mov	sl, r3
 8006d06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d0a:	b10a      	cbz	r2, 8006d10 <_svfiprintf_r+0x60>
 8006d0c:	2a25      	cmp	r2, #37	@ 0x25
 8006d0e:	d1f9      	bne.n	8006d04 <_svfiprintf_r+0x54>
 8006d10:	ebba 0b04 	subs.w	fp, sl, r4
 8006d14:	d00b      	beq.n	8006d2e <_svfiprintf_r+0x7e>
 8006d16:	465b      	mov	r3, fp
 8006d18:	4622      	mov	r2, r4
 8006d1a:	4629      	mov	r1, r5
 8006d1c:	4638      	mov	r0, r7
 8006d1e:	f7ff ff6b 	bl	8006bf8 <__ssputs_r>
 8006d22:	3001      	adds	r0, #1
 8006d24:	f000 80a7 	beq.w	8006e76 <_svfiprintf_r+0x1c6>
 8006d28:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d2a:	445a      	add	r2, fp
 8006d2c:	9209      	str	r2, [sp, #36]	@ 0x24
 8006d2e:	f89a 3000 	ldrb.w	r3, [sl]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	f000 809f 	beq.w	8006e76 <_svfiprintf_r+0x1c6>
 8006d38:	2300      	movs	r3, #0
 8006d3a:	f04f 32ff 	mov.w	r2, #4294967295
 8006d3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d42:	f10a 0a01 	add.w	sl, sl, #1
 8006d46:	9304      	str	r3, [sp, #16]
 8006d48:	9307      	str	r3, [sp, #28]
 8006d4a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006d4e:	931a      	str	r3, [sp, #104]	@ 0x68
 8006d50:	4654      	mov	r4, sl
 8006d52:	2205      	movs	r2, #5
 8006d54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d58:	484e      	ldr	r0, [pc, #312]	@ (8006e94 <_svfiprintf_r+0x1e4>)
 8006d5a:	f7fe fd26 	bl	80057aa <memchr>
 8006d5e:	9a04      	ldr	r2, [sp, #16]
 8006d60:	b9d8      	cbnz	r0, 8006d9a <_svfiprintf_r+0xea>
 8006d62:	06d0      	lsls	r0, r2, #27
 8006d64:	bf44      	itt	mi
 8006d66:	2320      	movmi	r3, #32
 8006d68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d6c:	0711      	lsls	r1, r2, #28
 8006d6e:	bf44      	itt	mi
 8006d70:	232b      	movmi	r3, #43	@ 0x2b
 8006d72:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d76:	f89a 3000 	ldrb.w	r3, [sl]
 8006d7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d7c:	d015      	beq.n	8006daa <_svfiprintf_r+0xfa>
 8006d7e:	4654      	mov	r4, sl
 8006d80:	2000      	movs	r0, #0
 8006d82:	f04f 0c0a 	mov.w	ip, #10
 8006d86:	9a07      	ldr	r2, [sp, #28]
 8006d88:	4621      	mov	r1, r4
 8006d8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d8e:	3b30      	subs	r3, #48	@ 0x30
 8006d90:	2b09      	cmp	r3, #9
 8006d92:	d94b      	bls.n	8006e2c <_svfiprintf_r+0x17c>
 8006d94:	b1b0      	cbz	r0, 8006dc4 <_svfiprintf_r+0x114>
 8006d96:	9207      	str	r2, [sp, #28]
 8006d98:	e014      	b.n	8006dc4 <_svfiprintf_r+0x114>
 8006d9a:	eba0 0308 	sub.w	r3, r0, r8
 8006d9e:	fa09 f303 	lsl.w	r3, r9, r3
 8006da2:	4313      	orrs	r3, r2
 8006da4:	46a2      	mov	sl, r4
 8006da6:	9304      	str	r3, [sp, #16]
 8006da8:	e7d2      	b.n	8006d50 <_svfiprintf_r+0xa0>
 8006daa:	9b03      	ldr	r3, [sp, #12]
 8006dac:	1d19      	adds	r1, r3, #4
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	9103      	str	r1, [sp, #12]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	bfbb      	ittet	lt
 8006db6:	425b      	neglt	r3, r3
 8006db8:	f042 0202 	orrlt.w	r2, r2, #2
 8006dbc:	9307      	strge	r3, [sp, #28]
 8006dbe:	9307      	strlt	r3, [sp, #28]
 8006dc0:	bfb8      	it	lt
 8006dc2:	9204      	strlt	r2, [sp, #16]
 8006dc4:	7823      	ldrb	r3, [r4, #0]
 8006dc6:	2b2e      	cmp	r3, #46	@ 0x2e
 8006dc8:	d10a      	bne.n	8006de0 <_svfiprintf_r+0x130>
 8006dca:	7863      	ldrb	r3, [r4, #1]
 8006dcc:	2b2a      	cmp	r3, #42	@ 0x2a
 8006dce:	d132      	bne.n	8006e36 <_svfiprintf_r+0x186>
 8006dd0:	9b03      	ldr	r3, [sp, #12]
 8006dd2:	3402      	adds	r4, #2
 8006dd4:	1d1a      	adds	r2, r3, #4
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	9203      	str	r2, [sp, #12]
 8006dda:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006dde:	9305      	str	r3, [sp, #20]
 8006de0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8006e98 <_svfiprintf_r+0x1e8>
 8006de4:	2203      	movs	r2, #3
 8006de6:	4650      	mov	r0, sl
 8006de8:	7821      	ldrb	r1, [r4, #0]
 8006dea:	f7fe fcde 	bl	80057aa <memchr>
 8006dee:	b138      	cbz	r0, 8006e00 <_svfiprintf_r+0x150>
 8006df0:	2240      	movs	r2, #64	@ 0x40
 8006df2:	9b04      	ldr	r3, [sp, #16]
 8006df4:	eba0 000a 	sub.w	r0, r0, sl
 8006df8:	4082      	lsls	r2, r0
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	3401      	adds	r4, #1
 8006dfe:	9304      	str	r3, [sp, #16]
 8006e00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e04:	2206      	movs	r2, #6
 8006e06:	4825      	ldr	r0, [pc, #148]	@ (8006e9c <_svfiprintf_r+0x1ec>)
 8006e08:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006e0c:	f7fe fccd 	bl	80057aa <memchr>
 8006e10:	2800      	cmp	r0, #0
 8006e12:	d036      	beq.n	8006e82 <_svfiprintf_r+0x1d2>
 8006e14:	4b22      	ldr	r3, [pc, #136]	@ (8006ea0 <_svfiprintf_r+0x1f0>)
 8006e16:	bb1b      	cbnz	r3, 8006e60 <_svfiprintf_r+0x1b0>
 8006e18:	9b03      	ldr	r3, [sp, #12]
 8006e1a:	3307      	adds	r3, #7
 8006e1c:	f023 0307 	bic.w	r3, r3, #7
 8006e20:	3308      	adds	r3, #8
 8006e22:	9303      	str	r3, [sp, #12]
 8006e24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e26:	4433      	add	r3, r6
 8006e28:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e2a:	e76a      	b.n	8006d02 <_svfiprintf_r+0x52>
 8006e2c:	460c      	mov	r4, r1
 8006e2e:	2001      	movs	r0, #1
 8006e30:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e34:	e7a8      	b.n	8006d88 <_svfiprintf_r+0xd8>
 8006e36:	2300      	movs	r3, #0
 8006e38:	f04f 0c0a 	mov.w	ip, #10
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	3401      	adds	r4, #1
 8006e40:	9305      	str	r3, [sp, #20]
 8006e42:	4620      	mov	r0, r4
 8006e44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e48:	3a30      	subs	r2, #48	@ 0x30
 8006e4a:	2a09      	cmp	r2, #9
 8006e4c:	d903      	bls.n	8006e56 <_svfiprintf_r+0x1a6>
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d0c6      	beq.n	8006de0 <_svfiprintf_r+0x130>
 8006e52:	9105      	str	r1, [sp, #20]
 8006e54:	e7c4      	b.n	8006de0 <_svfiprintf_r+0x130>
 8006e56:	4604      	mov	r4, r0
 8006e58:	2301      	movs	r3, #1
 8006e5a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e5e:	e7f0      	b.n	8006e42 <_svfiprintf_r+0x192>
 8006e60:	ab03      	add	r3, sp, #12
 8006e62:	9300      	str	r3, [sp, #0]
 8006e64:	462a      	mov	r2, r5
 8006e66:	4638      	mov	r0, r7
 8006e68:	4b0e      	ldr	r3, [pc, #56]	@ (8006ea4 <_svfiprintf_r+0x1f4>)
 8006e6a:	a904      	add	r1, sp, #16
 8006e6c:	f7fd ff2a 	bl	8004cc4 <_printf_float>
 8006e70:	1c42      	adds	r2, r0, #1
 8006e72:	4606      	mov	r6, r0
 8006e74:	d1d6      	bne.n	8006e24 <_svfiprintf_r+0x174>
 8006e76:	89ab      	ldrh	r3, [r5, #12]
 8006e78:	065b      	lsls	r3, r3, #25
 8006e7a:	f53f af2d 	bmi.w	8006cd8 <_svfiprintf_r+0x28>
 8006e7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006e80:	e72c      	b.n	8006cdc <_svfiprintf_r+0x2c>
 8006e82:	ab03      	add	r3, sp, #12
 8006e84:	9300      	str	r3, [sp, #0]
 8006e86:	462a      	mov	r2, r5
 8006e88:	4638      	mov	r0, r7
 8006e8a:	4b06      	ldr	r3, [pc, #24]	@ (8006ea4 <_svfiprintf_r+0x1f4>)
 8006e8c:	a904      	add	r1, sp, #16
 8006e8e:	f7fe f9b7 	bl	8005200 <_printf_i>
 8006e92:	e7ed      	b.n	8006e70 <_svfiprintf_r+0x1c0>
 8006e94:	08008300 	.word	0x08008300
 8006e98:	08008306 	.word	0x08008306
 8006e9c:	0800830a 	.word	0x0800830a
 8006ea0:	08004cc5 	.word	0x08004cc5
 8006ea4:	08006bf9 	.word	0x08006bf9

08006ea8 <__sflush_r>:
 8006ea8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eae:	0716      	lsls	r6, r2, #28
 8006eb0:	4605      	mov	r5, r0
 8006eb2:	460c      	mov	r4, r1
 8006eb4:	d454      	bmi.n	8006f60 <__sflush_r+0xb8>
 8006eb6:	684b      	ldr	r3, [r1, #4]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	dc02      	bgt.n	8006ec2 <__sflush_r+0x1a>
 8006ebc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	dd48      	ble.n	8006f54 <__sflush_r+0xac>
 8006ec2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006ec4:	2e00      	cmp	r6, #0
 8006ec6:	d045      	beq.n	8006f54 <__sflush_r+0xac>
 8006ec8:	2300      	movs	r3, #0
 8006eca:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006ece:	682f      	ldr	r7, [r5, #0]
 8006ed0:	6a21      	ldr	r1, [r4, #32]
 8006ed2:	602b      	str	r3, [r5, #0]
 8006ed4:	d030      	beq.n	8006f38 <__sflush_r+0x90>
 8006ed6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006ed8:	89a3      	ldrh	r3, [r4, #12]
 8006eda:	0759      	lsls	r1, r3, #29
 8006edc:	d505      	bpl.n	8006eea <__sflush_r+0x42>
 8006ede:	6863      	ldr	r3, [r4, #4]
 8006ee0:	1ad2      	subs	r2, r2, r3
 8006ee2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006ee4:	b10b      	cbz	r3, 8006eea <__sflush_r+0x42>
 8006ee6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006ee8:	1ad2      	subs	r2, r2, r3
 8006eea:	2300      	movs	r3, #0
 8006eec:	4628      	mov	r0, r5
 8006eee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006ef0:	6a21      	ldr	r1, [r4, #32]
 8006ef2:	47b0      	blx	r6
 8006ef4:	1c43      	adds	r3, r0, #1
 8006ef6:	89a3      	ldrh	r3, [r4, #12]
 8006ef8:	d106      	bne.n	8006f08 <__sflush_r+0x60>
 8006efa:	6829      	ldr	r1, [r5, #0]
 8006efc:	291d      	cmp	r1, #29
 8006efe:	d82b      	bhi.n	8006f58 <__sflush_r+0xb0>
 8006f00:	4a28      	ldr	r2, [pc, #160]	@ (8006fa4 <__sflush_r+0xfc>)
 8006f02:	410a      	asrs	r2, r1
 8006f04:	07d6      	lsls	r6, r2, #31
 8006f06:	d427      	bmi.n	8006f58 <__sflush_r+0xb0>
 8006f08:	2200      	movs	r2, #0
 8006f0a:	6062      	str	r2, [r4, #4]
 8006f0c:	6922      	ldr	r2, [r4, #16]
 8006f0e:	04d9      	lsls	r1, r3, #19
 8006f10:	6022      	str	r2, [r4, #0]
 8006f12:	d504      	bpl.n	8006f1e <__sflush_r+0x76>
 8006f14:	1c42      	adds	r2, r0, #1
 8006f16:	d101      	bne.n	8006f1c <__sflush_r+0x74>
 8006f18:	682b      	ldr	r3, [r5, #0]
 8006f1a:	b903      	cbnz	r3, 8006f1e <__sflush_r+0x76>
 8006f1c:	6560      	str	r0, [r4, #84]	@ 0x54
 8006f1e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006f20:	602f      	str	r7, [r5, #0]
 8006f22:	b1b9      	cbz	r1, 8006f54 <__sflush_r+0xac>
 8006f24:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006f28:	4299      	cmp	r1, r3
 8006f2a:	d002      	beq.n	8006f32 <__sflush_r+0x8a>
 8006f2c:	4628      	mov	r0, r5
 8006f2e:	f7ff fa9b 	bl	8006468 <_free_r>
 8006f32:	2300      	movs	r3, #0
 8006f34:	6363      	str	r3, [r4, #52]	@ 0x34
 8006f36:	e00d      	b.n	8006f54 <__sflush_r+0xac>
 8006f38:	2301      	movs	r3, #1
 8006f3a:	4628      	mov	r0, r5
 8006f3c:	47b0      	blx	r6
 8006f3e:	4602      	mov	r2, r0
 8006f40:	1c50      	adds	r0, r2, #1
 8006f42:	d1c9      	bne.n	8006ed8 <__sflush_r+0x30>
 8006f44:	682b      	ldr	r3, [r5, #0]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d0c6      	beq.n	8006ed8 <__sflush_r+0x30>
 8006f4a:	2b1d      	cmp	r3, #29
 8006f4c:	d001      	beq.n	8006f52 <__sflush_r+0xaa>
 8006f4e:	2b16      	cmp	r3, #22
 8006f50:	d11d      	bne.n	8006f8e <__sflush_r+0xe6>
 8006f52:	602f      	str	r7, [r5, #0]
 8006f54:	2000      	movs	r0, #0
 8006f56:	e021      	b.n	8006f9c <__sflush_r+0xf4>
 8006f58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f5c:	b21b      	sxth	r3, r3
 8006f5e:	e01a      	b.n	8006f96 <__sflush_r+0xee>
 8006f60:	690f      	ldr	r7, [r1, #16]
 8006f62:	2f00      	cmp	r7, #0
 8006f64:	d0f6      	beq.n	8006f54 <__sflush_r+0xac>
 8006f66:	0793      	lsls	r3, r2, #30
 8006f68:	bf18      	it	ne
 8006f6a:	2300      	movne	r3, #0
 8006f6c:	680e      	ldr	r6, [r1, #0]
 8006f6e:	bf08      	it	eq
 8006f70:	694b      	ldreq	r3, [r1, #20]
 8006f72:	1bf6      	subs	r6, r6, r7
 8006f74:	600f      	str	r7, [r1, #0]
 8006f76:	608b      	str	r3, [r1, #8]
 8006f78:	2e00      	cmp	r6, #0
 8006f7a:	ddeb      	ble.n	8006f54 <__sflush_r+0xac>
 8006f7c:	4633      	mov	r3, r6
 8006f7e:	463a      	mov	r2, r7
 8006f80:	4628      	mov	r0, r5
 8006f82:	6a21      	ldr	r1, [r4, #32]
 8006f84:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006f88:	47e0      	blx	ip
 8006f8a:	2800      	cmp	r0, #0
 8006f8c:	dc07      	bgt.n	8006f9e <__sflush_r+0xf6>
 8006f8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f96:	f04f 30ff 	mov.w	r0, #4294967295
 8006f9a:	81a3      	strh	r3, [r4, #12]
 8006f9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f9e:	4407      	add	r7, r0
 8006fa0:	1a36      	subs	r6, r6, r0
 8006fa2:	e7e9      	b.n	8006f78 <__sflush_r+0xd0>
 8006fa4:	dfbffffe 	.word	0xdfbffffe

08006fa8 <_fflush_r>:
 8006fa8:	b538      	push	{r3, r4, r5, lr}
 8006faa:	690b      	ldr	r3, [r1, #16]
 8006fac:	4605      	mov	r5, r0
 8006fae:	460c      	mov	r4, r1
 8006fb0:	b913      	cbnz	r3, 8006fb8 <_fflush_r+0x10>
 8006fb2:	2500      	movs	r5, #0
 8006fb4:	4628      	mov	r0, r5
 8006fb6:	bd38      	pop	{r3, r4, r5, pc}
 8006fb8:	b118      	cbz	r0, 8006fc2 <_fflush_r+0x1a>
 8006fba:	6a03      	ldr	r3, [r0, #32]
 8006fbc:	b90b      	cbnz	r3, 8006fc2 <_fflush_r+0x1a>
 8006fbe:	f7fe facb 	bl	8005558 <__sinit>
 8006fc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d0f3      	beq.n	8006fb2 <_fflush_r+0xa>
 8006fca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006fcc:	07d0      	lsls	r0, r2, #31
 8006fce:	d404      	bmi.n	8006fda <_fflush_r+0x32>
 8006fd0:	0599      	lsls	r1, r3, #22
 8006fd2:	d402      	bmi.n	8006fda <_fflush_r+0x32>
 8006fd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006fd6:	f7fe fbe6 	bl	80057a6 <__retarget_lock_acquire_recursive>
 8006fda:	4628      	mov	r0, r5
 8006fdc:	4621      	mov	r1, r4
 8006fde:	f7ff ff63 	bl	8006ea8 <__sflush_r>
 8006fe2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006fe4:	4605      	mov	r5, r0
 8006fe6:	07da      	lsls	r2, r3, #31
 8006fe8:	d4e4      	bmi.n	8006fb4 <_fflush_r+0xc>
 8006fea:	89a3      	ldrh	r3, [r4, #12]
 8006fec:	059b      	lsls	r3, r3, #22
 8006fee:	d4e1      	bmi.n	8006fb4 <_fflush_r+0xc>
 8006ff0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006ff2:	f7fe fbd9 	bl	80057a8 <__retarget_lock_release_recursive>
 8006ff6:	e7dd      	b.n	8006fb4 <_fflush_r+0xc>

08006ff8 <memmove>:
 8006ff8:	4288      	cmp	r0, r1
 8006ffa:	b510      	push	{r4, lr}
 8006ffc:	eb01 0402 	add.w	r4, r1, r2
 8007000:	d902      	bls.n	8007008 <memmove+0x10>
 8007002:	4284      	cmp	r4, r0
 8007004:	4623      	mov	r3, r4
 8007006:	d807      	bhi.n	8007018 <memmove+0x20>
 8007008:	1e43      	subs	r3, r0, #1
 800700a:	42a1      	cmp	r1, r4
 800700c:	d008      	beq.n	8007020 <memmove+0x28>
 800700e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007012:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007016:	e7f8      	b.n	800700a <memmove+0x12>
 8007018:	4601      	mov	r1, r0
 800701a:	4402      	add	r2, r0
 800701c:	428a      	cmp	r2, r1
 800701e:	d100      	bne.n	8007022 <memmove+0x2a>
 8007020:	bd10      	pop	{r4, pc}
 8007022:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007026:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800702a:	e7f7      	b.n	800701c <memmove+0x24>

0800702c <memcpy>:
 800702c:	440a      	add	r2, r1
 800702e:	4291      	cmp	r1, r2
 8007030:	f100 33ff 	add.w	r3, r0, #4294967295
 8007034:	d100      	bne.n	8007038 <memcpy+0xc>
 8007036:	4770      	bx	lr
 8007038:	b510      	push	{r4, lr}
 800703a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800703e:	4291      	cmp	r1, r2
 8007040:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007044:	d1f9      	bne.n	800703a <memcpy+0xe>
 8007046:	bd10      	pop	{r4, pc}

08007048 <__assert_func>:
 8007048:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800704a:	4614      	mov	r4, r2
 800704c:	461a      	mov	r2, r3
 800704e:	4b09      	ldr	r3, [pc, #36]	@ (8007074 <__assert_func+0x2c>)
 8007050:	4605      	mov	r5, r0
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	68d8      	ldr	r0, [r3, #12]
 8007056:	b954      	cbnz	r4, 800706e <__assert_func+0x26>
 8007058:	4b07      	ldr	r3, [pc, #28]	@ (8007078 <__assert_func+0x30>)
 800705a:	461c      	mov	r4, r3
 800705c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007060:	9100      	str	r1, [sp, #0]
 8007062:	462b      	mov	r3, r5
 8007064:	4905      	ldr	r1, [pc, #20]	@ (800707c <__assert_func+0x34>)
 8007066:	f000 f86f 	bl	8007148 <fiprintf>
 800706a:	f000 f87f 	bl	800716c <abort>
 800706e:	4b04      	ldr	r3, [pc, #16]	@ (8007080 <__assert_func+0x38>)
 8007070:	e7f4      	b.n	800705c <__assert_func+0x14>
 8007072:	bf00      	nop
 8007074:	20000088 	.word	0x20000088
 8007078:	08008356 	.word	0x08008356
 800707c:	08008328 	.word	0x08008328
 8007080:	0800831b 	.word	0x0800831b

08007084 <_calloc_r>:
 8007084:	b570      	push	{r4, r5, r6, lr}
 8007086:	fba1 5402 	umull	r5, r4, r1, r2
 800708a:	b93c      	cbnz	r4, 800709c <_calloc_r+0x18>
 800708c:	4629      	mov	r1, r5
 800708e:	f7fd fcef 	bl	8004a70 <_malloc_r>
 8007092:	4606      	mov	r6, r0
 8007094:	b928      	cbnz	r0, 80070a2 <_calloc_r+0x1e>
 8007096:	2600      	movs	r6, #0
 8007098:	4630      	mov	r0, r6
 800709a:	bd70      	pop	{r4, r5, r6, pc}
 800709c:	220c      	movs	r2, #12
 800709e:	6002      	str	r2, [r0, #0]
 80070a0:	e7f9      	b.n	8007096 <_calloc_r+0x12>
 80070a2:	462a      	mov	r2, r5
 80070a4:	4621      	mov	r1, r4
 80070a6:	f7fe faf0 	bl	800568a <memset>
 80070aa:	e7f5      	b.n	8007098 <_calloc_r+0x14>

080070ac <__ascii_mbtowc>:
 80070ac:	b082      	sub	sp, #8
 80070ae:	b901      	cbnz	r1, 80070b2 <__ascii_mbtowc+0x6>
 80070b0:	a901      	add	r1, sp, #4
 80070b2:	b142      	cbz	r2, 80070c6 <__ascii_mbtowc+0x1a>
 80070b4:	b14b      	cbz	r3, 80070ca <__ascii_mbtowc+0x1e>
 80070b6:	7813      	ldrb	r3, [r2, #0]
 80070b8:	600b      	str	r3, [r1, #0]
 80070ba:	7812      	ldrb	r2, [r2, #0]
 80070bc:	1e10      	subs	r0, r2, #0
 80070be:	bf18      	it	ne
 80070c0:	2001      	movne	r0, #1
 80070c2:	b002      	add	sp, #8
 80070c4:	4770      	bx	lr
 80070c6:	4610      	mov	r0, r2
 80070c8:	e7fb      	b.n	80070c2 <__ascii_mbtowc+0x16>
 80070ca:	f06f 0001 	mvn.w	r0, #1
 80070ce:	e7f8      	b.n	80070c2 <__ascii_mbtowc+0x16>

080070d0 <_realloc_r>:
 80070d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070d4:	4680      	mov	r8, r0
 80070d6:	4615      	mov	r5, r2
 80070d8:	460c      	mov	r4, r1
 80070da:	b921      	cbnz	r1, 80070e6 <_realloc_r+0x16>
 80070dc:	4611      	mov	r1, r2
 80070de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070e2:	f7fd bcc5 	b.w	8004a70 <_malloc_r>
 80070e6:	b92a      	cbnz	r2, 80070f4 <_realloc_r+0x24>
 80070e8:	f7ff f9be 	bl	8006468 <_free_r>
 80070ec:	2400      	movs	r4, #0
 80070ee:	4620      	mov	r0, r4
 80070f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070f4:	f000 f841 	bl	800717a <_malloc_usable_size_r>
 80070f8:	4285      	cmp	r5, r0
 80070fa:	4606      	mov	r6, r0
 80070fc:	d802      	bhi.n	8007104 <_realloc_r+0x34>
 80070fe:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007102:	d8f4      	bhi.n	80070ee <_realloc_r+0x1e>
 8007104:	4629      	mov	r1, r5
 8007106:	4640      	mov	r0, r8
 8007108:	f7fd fcb2 	bl	8004a70 <_malloc_r>
 800710c:	4607      	mov	r7, r0
 800710e:	2800      	cmp	r0, #0
 8007110:	d0ec      	beq.n	80070ec <_realloc_r+0x1c>
 8007112:	42b5      	cmp	r5, r6
 8007114:	462a      	mov	r2, r5
 8007116:	4621      	mov	r1, r4
 8007118:	bf28      	it	cs
 800711a:	4632      	movcs	r2, r6
 800711c:	f7ff ff86 	bl	800702c <memcpy>
 8007120:	4621      	mov	r1, r4
 8007122:	4640      	mov	r0, r8
 8007124:	f7ff f9a0 	bl	8006468 <_free_r>
 8007128:	463c      	mov	r4, r7
 800712a:	e7e0      	b.n	80070ee <_realloc_r+0x1e>

0800712c <__ascii_wctomb>:
 800712c:	4603      	mov	r3, r0
 800712e:	4608      	mov	r0, r1
 8007130:	b141      	cbz	r1, 8007144 <__ascii_wctomb+0x18>
 8007132:	2aff      	cmp	r2, #255	@ 0xff
 8007134:	d904      	bls.n	8007140 <__ascii_wctomb+0x14>
 8007136:	228a      	movs	r2, #138	@ 0x8a
 8007138:	f04f 30ff 	mov.w	r0, #4294967295
 800713c:	601a      	str	r2, [r3, #0]
 800713e:	4770      	bx	lr
 8007140:	2001      	movs	r0, #1
 8007142:	700a      	strb	r2, [r1, #0]
 8007144:	4770      	bx	lr
	...

08007148 <fiprintf>:
 8007148:	b40e      	push	{r1, r2, r3}
 800714a:	b503      	push	{r0, r1, lr}
 800714c:	4601      	mov	r1, r0
 800714e:	ab03      	add	r3, sp, #12
 8007150:	4805      	ldr	r0, [pc, #20]	@ (8007168 <fiprintf+0x20>)
 8007152:	f853 2b04 	ldr.w	r2, [r3], #4
 8007156:	6800      	ldr	r0, [r0, #0]
 8007158:	9301      	str	r3, [sp, #4]
 800715a:	f000 f83d 	bl	80071d8 <_vfiprintf_r>
 800715e:	b002      	add	sp, #8
 8007160:	f85d eb04 	ldr.w	lr, [sp], #4
 8007164:	b003      	add	sp, #12
 8007166:	4770      	bx	lr
 8007168:	20000088 	.word	0x20000088

0800716c <abort>:
 800716c:	2006      	movs	r0, #6
 800716e:	b508      	push	{r3, lr}
 8007170:	f000 fa06 	bl	8007580 <raise>
 8007174:	2001      	movs	r0, #1
 8007176:	f7fb ffa0 	bl	80030ba <_exit>

0800717a <_malloc_usable_size_r>:
 800717a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800717e:	1f18      	subs	r0, r3, #4
 8007180:	2b00      	cmp	r3, #0
 8007182:	bfbc      	itt	lt
 8007184:	580b      	ldrlt	r3, [r1, r0]
 8007186:	18c0      	addlt	r0, r0, r3
 8007188:	4770      	bx	lr

0800718a <__sfputc_r>:
 800718a:	6893      	ldr	r3, [r2, #8]
 800718c:	b410      	push	{r4}
 800718e:	3b01      	subs	r3, #1
 8007190:	2b00      	cmp	r3, #0
 8007192:	6093      	str	r3, [r2, #8]
 8007194:	da07      	bge.n	80071a6 <__sfputc_r+0x1c>
 8007196:	6994      	ldr	r4, [r2, #24]
 8007198:	42a3      	cmp	r3, r4
 800719a:	db01      	blt.n	80071a0 <__sfputc_r+0x16>
 800719c:	290a      	cmp	r1, #10
 800719e:	d102      	bne.n	80071a6 <__sfputc_r+0x1c>
 80071a0:	bc10      	pop	{r4}
 80071a2:	f000 b931 	b.w	8007408 <__swbuf_r>
 80071a6:	6813      	ldr	r3, [r2, #0]
 80071a8:	1c58      	adds	r0, r3, #1
 80071aa:	6010      	str	r0, [r2, #0]
 80071ac:	7019      	strb	r1, [r3, #0]
 80071ae:	4608      	mov	r0, r1
 80071b0:	bc10      	pop	{r4}
 80071b2:	4770      	bx	lr

080071b4 <__sfputs_r>:
 80071b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071b6:	4606      	mov	r6, r0
 80071b8:	460f      	mov	r7, r1
 80071ba:	4614      	mov	r4, r2
 80071bc:	18d5      	adds	r5, r2, r3
 80071be:	42ac      	cmp	r4, r5
 80071c0:	d101      	bne.n	80071c6 <__sfputs_r+0x12>
 80071c2:	2000      	movs	r0, #0
 80071c4:	e007      	b.n	80071d6 <__sfputs_r+0x22>
 80071c6:	463a      	mov	r2, r7
 80071c8:	4630      	mov	r0, r6
 80071ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071ce:	f7ff ffdc 	bl	800718a <__sfputc_r>
 80071d2:	1c43      	adds	r3, r0, #1
 80071d4:	d1f3      	bne.n	80071be <__sfputs_r+0xa>
 80071d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080071d8 <_vfiprintf_r>:
 80071d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071dc:	460d      	mov	r5, r1
 80071de:	4614      	mov	r4, r2
 80071e0:	4698      	mov	r8, r3
 80071e2:	4606      	mov	r6, r0
 80071e4:	b09d      	sub	sp, #116	@ 0x74
 80071e6:	b118      	cbz	r0, 80071f0 <_vfiprintf_r+0x18>
 80071e8:	6a03      	ldr	r3, [r0, #32]
 80071ea:	b90b      	cbnz	r3, 80071f0 <_vfiprintf_r+0x18>
 80071ec:	f7fe f9b4 	bl	8005558 <__sinit>
 80071f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80071f2:	07d9      	lsls	r1, r3, #31
 80071f4:	d405      	bmi.n	8007202 <_vfiprintf_r+0x2a>
 80071f6:	89ab      	ldrh	r3, [r5, #12]
 80071f8:	059a      	lsls	r2, r3, #22
 80071fa:	d402      	bmi.n	8007202 <_vfiprintf_r+0x2a>
 80071fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80071fe:	f7fe fad2 	bl	80057a6 <__retarget_lock_acquire_recursive>
 8007202:	89ab      	ldrh	r3, [r5, #12]
 8007204:	071b      	lsls	r3, r3, #28
 8007206:	d501      	bpl.n	800720c <_vfiprintf_r+0x34>
 8007208:	692b      	ldr	r3, [r5, #16]
 800720a:	b99b      	cbnz	r3, 8007234 <_vfiprintf_r+0x5c>
 800720c:	4629      	mov	r1, r5
 800720e:	4630      	mov	r0, r6
 8007210:	f000 f938 	bl	8007484 <__swsetup_r>
 8007214:	b170      	cbz	r0, 8007234 <_vfiprintf_r+0x5c>
 8007216:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007218:	07dc      	lsls	r4, r3, #31
 800721a:	d504      	bpl.n	8007226 <_vfiprintf_r+0x4e>
 800721c:	f04f 30ff 	mov.w	r0, #4294967295
 8007220:	b01d      	add	sp, #116	@ 0x74
 8007222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007226:	89ab      	ldrh	r3, [r5, #12]
 8007228:	0598      	lsls	r0, r3, #22
 800722a:	d4f7      	bmi.n	800721c <_vfiprintf_r+0x44>
 800722c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800722e:	f7fe fabb 	bl	80057a8 <__retarget_lock_release_recursive>
 8007232:	e7f3      	b.n	800721c <_vfiprintf_r+0x44>
 8007234:	2300      	movs	r3, #0
 8007236:	9309      	str	r3, [sp, #36]	@ 0x24
 8007238:	2320      	movs	r3, #32
 800723a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800723e:	2330      	movs	r3, #48	@ 0x30
 8007240:	f04f 0901 	mov.w	r9, #1
 8007244:	f8cd 800c 	str.w	r8, [sp, #12]
 8007248:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80073f4 <_vfiprintf_r+0x21c>
 800724c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007250:	4623      	mov	r3, r4
 8007252:	469a      	mov	sl, r3
 8007254:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007258:	b10a      	cbz	r2, 800725e <_vfiprintf_r+0x86>
 800725a:	2a25      	cmp	r2, #37	@ 0x25
 800725c:	d1f9      	bne.n	8007252 <_vfiprintf_r+0x7a>
 800725e:	ebba 0b04 	subs.w	fp, sl, r4
 8007262:	d00b      	beq.n	800727c <_vfiprintf_r+0xa4>
 8007264:	465b      	mov	r3, fp
 8007266:	4622      	mov	r2, r4
 8007268:	4629      	mov	r1, r5
 800726a:	4630      	mov	r0, r6
 800726c:	f7ff ffa2 	bl	80071b4 <__sfputs_r>
 8007270:	3001      	adds	r0, #1
 8007272:	f000 80a7 	beq.w	80073c4 <_vfiprintf_r+0x1ec>
 8007276:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007278:	445a      	add	r2, fp
 800727a:	9209      	str	r2, [sp, #36]	@ 0x24
 800727c:	f89a 3000 	ldrb.w	r3, [sl]
 8007280:	2b00      	cmp	r3, #0
 8007282:	f000 809f 	beq.w	80073c4 <_vfiprintf_r+0x1ec>
 8007286:	2300      	movs	r3, #0
 8007288:	f04f 32ff 	mov.w	r2, #4294967295
 800728c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007290:	f10a 0a01 	add.w	sl, sl, #1
 8007294:	9304      	str	r3, [sp, #16]
 8007296:	9307      	str	r3, [sp, #28]
 8007298:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800729c:	931a      	str	r3, [sp, #104]	@ 0x68
 800729e:	4654      	mov	r4, sl
 80072a0:	2205      	movs	r2, #5
 80072a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072a6:	4853      	ldr	r0, [pc, #332]	@ (80073f4 <_vfiprintf_r+0x21c>)
 80072a8:	f7fe fa7f 	bl	80057aa <memchr>
 80072ac:	9a04      	ldr	r2, [sp, #16]
 80072ae:	b9d8      	cbnz	r0, 80072e8 <_vfiprintf_r+0x110>
 80072b0:	06d1      	lsls	r1, r2, #27
 80072b2:	bf44      	itt	mi
 80072b4:	2320      	movmi	r3, #32
 80072b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80072ba:	0713      	lsls	r3, r2, #28
 80072bc:	bf44      	itt	mi
 80072be:	232b      	movmi	r3, #43	@ 0x2b
 80072c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80072c4:	f89a 3000 	ldrb.w	r3, [sl]
 80072c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80072ca:	d015      	beq.n	80072f8 <_vfiprintf_r+0x120>
 80072cc:	4654      	mov	r4, sl
 80072ce:	2000      	movs	r0, #0
 80072d0:	f04f 0c0a 	mov.w	ip, #10
 80072d4:	9a07      	ldr	r2, [sp, #28]
 80072d6:	4621      	mov	r1, r4
 80072d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072dc:	3b30      	subs	r3, #48	@ 0x30
 80072de:	2b09      	cmp	r3, #9
 80072e0:	d94b      	bls.n	800737a <_vfiprintf_r+0x1a2>
 80072e2:	b1b0      	cbz	r0, 8007312 <_vfiprintf_r+0x13a>
 80072e4:	9207      	str	r2, [sp, #28]
 80072e6:	e014      	b.n	8007312 <_vfiprintf_r+0x13a>
 80072e8:	eba0 0308 	sub.w	r3, r0, r8
 80072ec:	fa09 f303 	lsl.w	r3, r9, r3
 80072f0:	4313      	orrs	r3, r2
 80072f2:	46a2      	mov	sl, r4
 80072f4:	9304      	str	r3, [sp, #16]
 80072f6:	e7d2      	b.n	800729e <_vfiprintf_r+0xc6>
 80072f8:	9b03      	ldr	r3, [sp, #12]
 80072fa:	1d19      	adds	r1, r3, #4
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	9103      	str	r1, [sp, #12]
 8007300:	2b00      	cmp	r3, #0
 8007302:	bfbb      	ittet	lt
 8007304:	425b      	neglt	r3, r3
 8007306:	f042 0202 	orrlt.w	r2, r2, #2
 800730a:	9307      	strge	r3, [sp, #28]
 800730c:	9307      	strlt	r3, [sp, #28]
 800730e:	bfb8      	it	lt
 8007310:	9204      	strlt	r2, [sp, #16]
 8007312:	7823      	ldrb	r3, [r4, #0]
 8007314:	2b2e      	cmp	r3, #46	@ 0x2e
 8007316:	d10a      	bne.n	800732e <_vfiprintf_r+0x156>
 8007318:	7863      	ldrb	r3, [r4, #1]
 800731a:	2b2a      	cmp	r3, #42	@ 0x2a
 800731c:	d132      	bne.n	8007384 <_vfiprintf_r+0x1ac>
 800731e:	9b03      	ldr	r3, [sp, #12]
 8007320:	3402      	adds	r4, #2
 8007322:	1d1a      	adds	r2, r3, #4
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	9203      	str	r2, [sp, #12]
 8007328:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800732c:	9305      	str	r3, [sp, #20]
 800732e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80073f8 <_vfiprintf_r+0x220>
 8007332:	2203      	movs	r2, #3
 8007334:	4650      	mov	r0, sl
 8007336:	7821      	ldrb	r1, [r4, #0]
 8007338:	f7fe fa37 	bl	80057aa <memchr>
 800733c:	b138      	cbz	r0, 800734e <_vfiprintf_r+0x176>
 800733e:	2240      	movs	r2, #64	@ 0x40
 8007340:	9b04      	ldr	r3, [sp, #16]
 8007342:	eba0 000a 	sub.w	r0, r0, sl
 8007346:	4082      	lsls	r2, r0
 8007348:	4313      	orrs	r3, r2
 800734a:	3401      	adds	r4, #1
 800734c:	9304      	str	r3, [sp, #16]
 800734e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007352:	2206      	movs	r2, #6
 8007354:	4829      	ldr	r0, [pc, #164]	@ (80073fc <_vfiprintf_r+0x224>)
 8007356:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800735a:	f7fe fa26 	bl	80057aa <memchr>
 800735e:	2800      	cmp	r0, #0
 8007360:	d03f      	beq.n	80073e2 <_vfiprintf_r+0x20a>
 8007362:	4b27      	ldr	r3, [pc, #156]	@ (8007400 <_vfiprintf_r+0x228>)
 8007364:	bb1b      	cbnz	r3, 80073ae <_vfiprintf_r+0x1d6>
 8007366:	9b03      	ldr	r3, [sp, #12]
 8007368:	3307      	adds	r3, #7
 800736a:	f023 0307 	bic.w	r3, r3, #7
 800736e:	3308      	adds	r3, #8
 8007370:	9303      	str	r3, [sp, #12]
 8007372:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007374:	443b      	add	r3, r7
 8007376:	9309      	str	r3, [sp, #36]	@ 0x24
 8007378:	e76a      	b.n	8007250 <_vfiprintf_r+0x78>
 800737a:	460c      	mov	r4, r1
 800737c:	2001      	movs	r0, #1
 800737e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007382:	e7a8      	b.n	80072d6 <_vfiprintf_r+0xfe>
 8007384:	2300      	movs	r3, #0
 8007386:	f04f 0c0a 	mov.w	ip, #10
 800738a:	4619      	mov	r1, r3
 800738c:	3401      	adds	r4, #1
 800738e:	9305      	str	r3, [sp, #20]
 8007390:	4620      	mov	r0, r4
 8007392:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007396:	3a30      	subs	r2, #48	@ 0x30
 8007398:	2a09      	cmp	r2, #9
 800739a:	d903      	bls.n	80073a4 <_vfiprintf_r+0x1cc>
 800739c:	2b00      	cmp	r3, #0
 800739e:	d0c6      	beq.n	800732e <_vfiprintf_r+0x156>
 80073a0:	9105      	str	r1, [sp, #20]
 80073a2:	e7c4      	b.n	800732e <_vfiprintf_r+0x156>
 80073a4:	4604      	mov	r4, r0
 80073a6:	2301      	movs	r3, #1
 80073a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80073ac:	e7f0      	b.n	8007390 <_vfiprintf_r+0x1b8>
 80073ae:	ab03      	add	r3, sp, #12
 80073b0:	9300      	str	r3, [sp, #0]
 80073b2:	462a      	mov	r2, r5
 80073b4:	4630      	mov	r0, r6
 80073b6:	4b13      	ldr	r3, [pc, #76]	@ (8007404 <_vfiprintf_r+0x22c>)
 80073b8:	a904      	add	r1, sp, #16
 80073ba:	f7fd fc83 	bl	8004cc4 <_printf_float>
 80073be:	4607      	mov	r7, r0
 80073c0:	1c78      	adds	r0, r7, #1
 80073c2:	d1d6      	bne.n	8007372 <_vfiprintf_r+0x19a>
 80073c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80073c6:	07d9      	lsls	r1, r3, #31
 80073c8:	d405      	bmi.n	80073d6 <_vfiprintf_r+0x1fe>
 80073ca:	89ab      	ldrh	r3, [r5, #12]
 80073cc:	059a      	lsls	r2, r3, #22
 80073ce:	d402      	bmi.n	80073d6 <_vfiprintf_r+0x1fe>
 80073d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80073d2:	f7fe f9e9 	bl	80057a8 <__retarget_lock_release_recursive>
 80073d6:	89ab      	ldrh	r3, [r5, #12]
 80073d8:	065b      	lsls	r3, r3, #25
 80073da:	f53f af1f 	bmi.w	800721c <_vfiprintf_r+0x44>
 80073de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80073e0:	e71e      	b.n	8007220 <_vfiprintf_r+0x48>
 80073e2:	ab03      	add	r3, sp, #12
 80073e4:	9300      	str	r3, [sp, #0]
 80073e6:	462a      	mov	r2, r5
 80073e8:	4630      	mov	r0, r6
 80073ea:	4b06      	ldr	r3, [pc, #24]	@ (8007404 <_vfiprintf_r+0x22c>)
 80073ec:	a904      	add	r1, sp, #16
 80073ee:	f7fd ff07 	bl	8005200 <_printf_i>
 80073f2:	e7e4      	b.n	80073be <_vfiprintf_r+0x1e6>
 80073f4:	08008300 	.word	0x08008300
 80073f8:	08008306 	.word	0x08008306
 80073fc:	0800830a 	.word	0x0800830a
 8007400:	08004cc5 	.word	0x08004cc5
 8007404:	080071b5 	.word	0x080071b5

08007408 <__swbuf_r>:
 8007408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800740a:	460e      	mov	r6, r1
 800740c:	4614      	mov	r4, r2
 800740e:	4605      	mov	r5, r0
 8007410:	b118      	cbz	r0, 800741a <__swbuf_r+0x12>
 8007412:	6a03      	ldr	r3, [r0, #32]
 8007414:	b90b      	cbnz	r3, 800741a <__swbuf_r+0x12>
 8007416:	f7fe f89f 	bl	8005558 <__sinit>
 800741a:	69a3      	ldr	r3, [r4, #24]
 800741c:	60a3      	str	r3, [r4, #8]
 800741e:	89a3      	ldrh	r3, [r4, #12]
 8007420:	071a      	lsls	r2, r3, #28
 8007422:	d501      	bpl.n	8007428 <__swbuf_r+0x20>
 8007424:	6923      	ldr	r3, [r4, #16]
 8007426:	b943      	cbnz	r3, 800743a <__swbuf_r+0x32>
 8007428:	4621      	mov	r1, r4
 800742a:	4628      	mov	r0, r5
 800742c:	f000 f82a 	bl	8007484 <__swsetup_r>
 8007430:	b118      	cbz	r0, 800743a <__swbuf_r+0x32>
 8007432:	f04f 37ff 	mov.w	r7, #4294967295
 8007436:	4638      	mov	r0, r7
 8007438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800743a:	6823      	ldr	r3, [r4, #0]
 800743c:	6922      	ldr	r2, [r4, #16]
 800743e:	b2f6      	uxtb	r6, r6
 8007440:	1a98      	subs	r0, r3, r2
 8007442:	6963      	ldr	r3, [r4, #20]
 8007444:	4637      	mov	r7, r6
 8007446:	4283      	cmp	r3, r0
 8007448:	dc05      	bgt.n	8007456 <__swbuf_r+0x4e>
 800744a:	4621      	mov	r1, r4
 800744c:	4628      	mov	r0, r5
 800744e:	f7ff fdab 	bl	8006fa8 <_fflush_r>
 8007452:	2800      	cmp	r0, #0
 8007454:	d1ed      	bne.n	8007432 <__swbuf_r+0x2a>
 8007456:	68a3      	ldr	r3, [r4, #8]
 8007458:	3b01      	subs	r3, #1
 800745a:	60a3      	str	r3, [r4, #8]
 800745c:	6823      	ldr	r3, [r4, #0]
 800745e:	1c5a      	adds	r2, r3, #1
 8007460:	6022      	str	r2, [r4, #0]
 8007462:	701e      	strb	r6, [r3, #0]
 8007464:	6962      	ldr	r2, [r4, #20]
 8007466:	1c43      	adds	r3, r0, #1
 8007468:	429a      	cmp	r2, r3
 800746a:	d004      	beq.n	8007476 <__swbuf_r+0x6e>
 800746c:	89a3      	ldrh	r3, [r4, #12]
 800746e:	07db      	lsls	r3, r3, #31
 8007470:	d5e1      	bpl.n	8007436 <__swbuf_r+0x2e>
 8007472:	2e0a      	cmp	r6, #10
 8007474:	d1df      	bne.n	8007436 <__swbuf_r+0x2e>
 8007476:	4621      	mov	r1, r4
 8007478:	4628      	mov	r0, r5
 800747a:	f7ff fd95 	bl	8006fa8 <_fflush_r>
 800747e:	2800      	cmp	r0, #0
 8007480:	d0d9      	beq.n	8007436 <__swbuf_r+0x2e>
 8007482:	e7d6      	b.n	8007432 <__swbuf_r+0x2a>

08007484 <__swsetup_r>:
 8007484:	b538      	push	{r3, r4, r5, lr}
 8007486:	4b29      	ldr	r3, [pc, #164]	@ (800752c <__swsetup_r+0xa8>)
 8007488:	4605      	mov	r5, r0
 800748a:	6818      	ldr	r0, [r3, #0]
 800748c:	460c      	mov	r4, r1
 800748e:	b118      	cbz	r0, 8007498 <__swsetup_r+0x14>
 8007490:	6a03      	ldr	r3, [r0, #32]
 8007492:	b90b      	cbnz	r3, 8007498 <__swsetup_r+0x14>
 8007494:	f7fe f860 	bl	8005558 <__sinit>
 8007498:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800749c:	0719      	lsls	r1, r3, #28
 800749e:	d422      	bmi.n	80074e6 <__swsetup_r+0x62>
 80074a0:	06da      	lsls	r2, r3, #27
 80074a2:	d407      	bmi.n	80074b4 <__swsetup_r+0x30>
 80074a4:	2209      	movs	r2, #9
 80074a6:	602a      	str	r2, [r5, #0]
 80074a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80074ac:	f04f 30ff 	mov.w	r0, #4294967295
 80074b0:	81a3      	strh	r3, [r4, #12]
 80074b2:	e033      	b.n	800751c <__swsetup_r+0x98>
 80074b4:	0758      	lsls	r0, r3, #29
 80074b6:	d512      	bpl.n	80074de <__swsetup_r+0x5a>
 80074b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80074ba:	b141      	cbz	r1, 80074ce <__swsetup_r+0x4a>
 80074bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80074c0:	4299      	cmp	r1, r3
 80074c2:	d002      	beq.n	80074ca <__swsetup_r+0x46>
 80074c4:	4628      	mov	r0, r5
 80074c6:	f7fe ffcf 	bl	8006468 <_free_r>
 80074ca:	2300      	movs	r3, #0
 80074cc:	6363      	str	r3, [r4, #52]	@ 0x34
 80074ce:	89a3      	ldrh	r3, [r4, #12]
 80074d0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80074d4:	81a3      	strh	r3, [r4, #12]
 80074d6:	2300      	movs	r3, #0
 80074d8:	6063      	str	r3, [r4, #4]
 80074da:	6923      	ldr	r3, [r4, #16]
 80074dc:	6023      	str	r3, [r4, #0]
 80074de:	89a3      	ldrh	r3, [r4, #12]
 80074e0:	f043 0308 	orr.w	r3, r3, #8
 80074e4:	81a3      	strh	r3, [r4, #12]
 80074e6:	6923      	ldr	r3, [r4, #16]
 80074e8:	b94b      	cbnz	r3, 80074fe <__swsetup_r+0x7a>
 80074ea:	89a3      	ldrh	r3, [r4, #12]
 80074ec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80074f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074f4:	d003      	beq.n	80074fe <__swsetup_r+0x7a>
 80074f6:	4621      	mov	r1, r4
 80074f8:	4628      	mov	r0, r5
 80074fa:	f000 f882 	bl	8007602 <__smakebuf_r>
 80074fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007502:	f013 0201 	ands.w	r2, r3, #1
 8007506:	d00a      	beq.n	800751e <__swsetup_r+0x9a>
 8007508:	2200      	movs	r2, #0
 800750a:	60a2      	str	r2, [r4, #8]
 800750c:	6962      	ldr	r2, [r4, #20]
 800750e:	4252      	negs	r2, r2
 8007510:	61a2      	str	r2, [r4, #24]
 8007512:	6922      	ldr	r2, [r4, #16]
 8007514:	b942      	cbnz	r2, 8007528 <__swsetup_r+0xa4>
 8007516:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800751a:	d1c5      	bne.n	80074a8 <__swsetup_r+0x24>
 800751c:	bd38      	pop	{r3, r4, r5, pc}
 800751e:	0799      	lsls	r1, r3, #30
 8007520:	bf58      	it	pl
 8007522:	6962      	ldrpl	r2, [r4, #20]
 8007524:	60a2      	str	r2, [r4, #8]
 8007526:	e7f4      	b.n	8007512 <__swsetup_r+0x8e>
 8007528:	2000      	movs	r0, #0
 800752a:	e7f7      	b.n	800751c <__swsetup_r+0x98>
 800752c:	20000088 	.word	0x20000088

08007530 <_raise_r>:
 8007530:	291f      	cmp	r1, #31
 8007532:	b538      	push	{r3, r4, r5, lr}
 8007534:	4605      	mov	r5, r0
 8007536:	460c      	mov	r4, r1
 8007538:	d904      	bls.n	8007544 <_raise_r+0x14>
 800753a:	2316      	movs	r3, #22
 800753c:	6003      	str	r3, [r0, #0]
 800753e:	f04f 30ff 	mov.w	r0, #4294967295
 8007542:	bd38      	pop	{r3, r4, r5, pc}
 8007544:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007546:	b112      	cbz	r2, 800754e <_raise_r+0x1e>
 8007548:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800754c:	b94b      	cbnz	r3, 8007562 <_raise_r+0x32>
 800754e:	4628      	mov	r0, r5
 8007550:	f000 f830 	bl	80075b4 <_getpid_r>
 8007554:	4622      	mov	r2, r4
 8007556:	4601      	mov	r1, r0
 8007558:	4628      	mov	r0, r5
 800755a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800755e:	f000 b817 	b.w	8007590 <_kill_r>
 8007562:	2b01      	cmp	r3, #1
 8007564:	d00a      	beq.n	800757c <_raise_r+0x4c>
 8007566:	1c59      	adds	r1, r3, #1
 8007568:	d103      	bne.n	8007572 <_raise_r+0x42>
 800756a:	2316      	movs	r3, #22
 800756c:	6003      	str	r3, [r0, #0]
 800756e:	2001      	movs	r0, #1
 8007570:	e7e7      	b.n	8007542 <_raise_r+0x12>
 8007572:	2100      	movs	r1, #0
 8007574:	4620      	mov	r0, r4
 8007576:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800757a:	4798      	blx	r3
 800757c:	2000      	movs	r0, #0
 800757e:	e7e0      	b.n	8007542 <_raise_r+0x12>

08007580 <raise>:
 8007580:	4b02      	ldr	r3, [pc, #8]	@ (800758c <raise+0xc>)
 8007582:	4601      	mov	r1, r0
 8007584:	6818      	ldr	r0, [r3, #0]
 8007586:	f7ff bfd3 	b.w	8007530 <_raise_r>
 800758a:	bf00      	nop
 800758c:	20000088 	.word	0x20000088

08007590 <_kill_r>:
 8007590:	b538      	push	{r3, r4, r5, lr}
 8007592:	2300      	movs	r3, #0
 8007594:	4d06      	ldr	r5, [pc, #24]	@ (80075b0 <_kill_r+0x20>)
 8007596:	4604      	mov	r4, r0
 8007598:	4608      	mov	r0, r1
 800759a:	4611      	mov	r1, r2
 800759c:	602b      	str	r3, [r5, #0]
 800759e:	f7fb fd7c 	bl	800309a <_kill>
 80075a2:	1c43      	adds	r3, r0, #1
 80075a4:	d102      	bne.n	80075ac <_kill_r+0x1c>
 80075a6:	682b      	ldr	r3, [r5, #0]
 80075a8:	b103      	cbz	r3, 80075ac <_kill_r+0x1c>
 80075aa:	6023      	str	r3, [r4, #0]
 80075ac:	bd38      	pop	{r3, r4, r5, pc}
 80075ae:	bf00      	nop
 80075b0:	200007c8 	.word	0x200007c8

080075b4 <_getpid_r>:
 80075b4:	f7fb bd6a 	b.w	800308c <_getpid>

080075b8 <__swhatbuf_r>:
 80075b8:	b570      	push	{r4, r5, r6, lr}
 80075ba:	460c      	mov	r4, r1
 80075bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075c0:	4615      	mov	r5, r2
 80075c2:	2900      	cmp	r1, #0
 80075c4:	461e      	mov	r6, r3
 80075c6:	b096      	sub	sp, #88	@ 0x58
 80075c8:	da0c      	bge.n	80075e4 <__swhatbuf_r+0x2c>
 80075ca:	89a3      	ldrh	r3, [r4, #12]
 80075cc:	2100      	movs	r1, #0
 80075ce:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80075d2:	bf14      	ite	ne
 80075d4:	2340      	movne	r3, #64	@ 0x40
 80075d6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80075da:	2000      	movs	r0, #0
 80075dc:	6031      	str	r1, [r6, #0]
 80075de:	602b      	str	r3, [r5, #0]
 80075e0:	b016      	add	sp, #88	@ 0x58
 80075e2:	bd70      	pop	{r4, r5, r6, pc}
 80075e4:	466a      	mov	r2, sp
 80075e6:	f000 f849 	bl	800767c <_fstat_r>
 80075ea:	2800      	cmp	r0, #0
 80075ec:	dbed      	blt.n	80075ca <__swhatbuf_r+0x12>
 80075ee:	9901      	ldr	r1, [sp, #4]
 80075f0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80075f4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80075f8:	4259      	negs	r1, r3
 80075fa:	4159      	adcs	r1, r3
 80075fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007600:	e7eb      	b.n	80075da <__swhatbuf_r+0x22>

08007602 <__smakebuf_r>:
 8007602:	898b      	ldrh	r3, [r1, #12]
 8007604:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007606:	079d      	lsls	r5, r3, #30
 8007608:	4606      	mov	r6, r0
 800760a:	460c      	mov	r4, r1
 800760c:	d507      	bpl.n	800761e <__smakebuf_r+0x1c>
 800760e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007612:	6023      	str	r3, [r4, #0]
 8007614:	6123      	str	r3, [r4, #16]
 8007616:	2301      	movs	r3, #1
 8007618:	6163      	str	r3, [r4, #20]
 800761a:	b003      	add	sp, #12
 800761c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800761e:	466a      	mov	r2, sp
 8007620:	ab01      	add	r3, sp, #4
 8007622:	f7ff ffc9 	bl	80075b8 <__swhatbuf_r>
 8007626:	9f00      	ldr	r7, [sp, #0]
 8007628:	4605      	mov	r5, r0
 800762a:	4639      	mov	r1, r7
 800762c:	4630      	mov	r0, r6
 800762e:	f7fd fa1f 	bl	8004a70 <_malloc_r>
 8007632:	b948      	cbnz	r0, 8007648 <__smakebuf_r+0x46>
 8007634:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007638:	059a      	lsls	r2, r3, #22
 800763a:	d4ee      	bmi.n	800761a <__smakebuf_r+0x18>
 800763c:	f023 0303 	bic.w	r3, r3, #3
 8007640:	f043 0302 	orr.w	r3, r3, #2
 8007644:	81a3      	strh	r3, [r4, #12]
 8007646:	e7e2      	b.n	800760e <__smakebuf_r+0xc>
 8007648:	89a3      	ldrh	r3, [r4, #12]
 800764a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800764e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007652:	81a3      	strh	r3, [r4, #12]
 8007654:	9b01      	ldr	r3, [sp, #4]
 8007656:	6020      	str	r0, [r4, #0]
 8007658:	b15b      	cbz	r3, 8007672 <__smakebuf_r+0x70>
 800765a:	4630      	mov	r0, r6
 800765c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007660:	f000 f81e 	bl	80076a0 <_isatty_r>
 8007664:	b128      	cbz	r0, 8007672 <__smakebuf_r+0x70>
 8007666:	89a3      	ldrh	r3, [r4, #12]
 8007668:	f023 0303 	bic.w	r3, r3, #3
 800766c:	f043 0301 	orr.w	r3, r3, #1
 8007670:	81a3      	strh	r3, [r4, #12]
 8007672:	89a3      	ldrh	r3, [r4, #12]
 8007674:	431d      	orrs	r5, r3
 8007676:	81a5      	strh	r5, [r4, #12]
 8007678:	e7cf      	b.n	800761a <__smakebuf_r+0x18>
	...

0800767c <_fstat_r>:
 800767c:	b538      	push	{r3, r4, r5, lr}
 800767e:	2300      	movs	r3, #0
 8007680:	4d06      	ldr	r5, [pc, #24]	@ (800769c <_fstat_r+0x20>)
 8007682:	4604      	mov	r4, r0
 8007684:	4608      	mov	r0, r1
 8007686:	4611      	mov	r1, r2
 8007688:	602b      	str	r3, [r5, #0]
 800768a:	f7fb fd65 	bl	8003158 <_fstat>
 800768e:	1c43      	adds	r3, r0, #1
 8007690:	d102      	bne.n	8007698 <_fstat_r+0x1c>
 8007692:	682b      	ldr	r3, [r5, #0]
 8007694:	b103      	cbz	r3, 8007698 <_fstat_r+0x1c>
 8007696:	6023      	str	r3, [r4, #0]
 8007698:	bd38      	pop	{r3, r4, r5, pc}
 800769a:	bf00      	nop
 800769c:	200007c8 	.word	0x200007c8

080076a0 <_isatty_r>:
 80076a0:	b538      	push	{r3, r4, r5, lr}
 80076a2:	2300      	movs	r3, #0
 80076a4:	4d05      	ldr	r5, [pc, #20]	@ (80076bc <_isatty_r+0x1c>)
 80076a6:	4604      	mov	r4, r0
 80076a8:	4608      	mov	r0, r1
 80076aa:	602b      	str	r3, [r5, #0]
 80076ac:	f7fb fd63 	bl	8003176 <_isatty>
 80076b0:	1c43      	adds	r3, r0, #1
 80076b2:	d102      	bne.n	80076ba <_isatty_r+0x1a>
 80076b4:	682b      	ldr	r3, [r5, #0]
 80076b6:	b103      	cbz	r3, 80076ba <_isatty_r+0x1a>
 80076b8:	6023      	str	r3, [r4, #0]
 80076ba:	bd38      	pop	{r3, r4, r5, pc}
 80076bc:	200007c8 	.word	0x200007c8

080076c0 <_init>:
 80076c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076c2:	bf00      	nop
 80076c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076c6:	bc08      	pop	{r3}
 80076c8:	469e      	mov	lr, r3
 80076ca:	4770      	bx	lr

080076cc <_fini>:
 80076cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ce:	bf00      	nop
 80076d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076d2:	bc08      	pop	{r3}
 80076d4:	469e      	mov	lr, r3
 80076d6:	4770      	bx	lr
