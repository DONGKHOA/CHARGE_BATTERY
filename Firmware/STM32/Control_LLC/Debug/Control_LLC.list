
Control_LLC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ca8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002db4  08002db4  00003db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002dd4  08002dd4  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002dd4  08002dd4  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002dd4  08002dd4  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002dd4  08002dd4  00003dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002dd8  08002dd8  00003dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002ddc  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  2000000c  08002de8  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000194  08002de8  00004194  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bed2  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002442  00000000  00000000  0000ff07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd8  00000000  00000000  00012350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c06  00000000  00000000  00013328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000042e9  00000000  00000000  00013f2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e920  00000000  00000000  00018217  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095faa  00000000  00000000  00026b37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bcae1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042dc  00000000  00000000  000bcb24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000c0e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002d9c 	.word	0x08002d9c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002d9c 	.word	0x08002d9c

0800014c <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 800014c:	b480      	push	{r7}
 800014e:	b089      	sub	sp, #36	@ 0x24
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	330c      	adds	r3, #12
 8000158:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800015a:	68fb      	ldr	r3, [r7, #12]
 800015c:	e853 3f00 	ldrex	r3, [r3]
 8000160:	60bb      	str	r3, [r7, #8]
   return(result);
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	f043 0320 	orr.w	r3, r3, #32
 8000168:	61fb      	str	r3, [r7, #28]
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	330c      	adds	r3, #12
 800016e:	69fa      	ldr	r2, [r7, #28]
 8000170:	61ba      	str	r2, [r7, #24]
 8000172:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000174:	6979      	ldr	r1, [r7, #20]
 8000176:	69ba      	ldr	r2, [r7, #24]
 8000178:	e841 2300 	strex	r3, r2, [r1]
 800017c:	613b      	str	r3, [r7, #16]
   return(result);
 800017e:	693b      	ldr	r3, [r7, #16]
 8000180:	2b00      	cmp	r3, #0
 8000182:	d1e7      	bne.n	8000154 <LL_USART_EnableIT_RXNE+0x8>
}
 8000184:	bf00      	nop
 8000186:	bf00      	nop
 8000188:	3724      	adds	r7, #36	@ 0x24
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr

08000190 <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 8000190:	b480      	push	{r7}
 8000192:	b089      	sub	sp, #36	@ 0x24
 8000194:	af00      	add	r7, sp, #0
 8000196:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	3314      	adds	r3, #20
 800019c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800019e:	68fb      	ldr	r3, [r7, #12]
 80001a0:	e853 3f00 	ldrex	r3, [r3]
 80001a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80001a6:	68bb      	ldr	r3, [r7, #8]
 80001a8:	f043 0301 	orr.w	r3, r3, #1
 80001ac:	61fb      	str	r3, [r7, #28]
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	3314      	adds	r3, #20
 80001b2:	69fa      	ldr	r2, [r7, #28]
 80001b4:	61ba      	str	r2, [r7, #24]
 80001b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80001b8:	6979      	ldr	r1, [r7, #20]
 80001ba:	69ba      	ldr	r2, [r7, #24]
 80001bc:	e841 2300 	strex	r3, r2, [r1]
 80001c0:	613b      	str	r3, [r7, #16]
   return(result);
 80001c2:	693b      	ldr	r3, [r7, #16]
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d1e7      	bne.n	8000198 <LL_USART_EnableIT_ERROR+0x8>
}
 80001c8:	bf00      	nop
 80001ca:	bf00      	nop
 80001cc:	3724      	adds	r7, #36	@ 0x24
 80001ce:	46bd      	mov	sp, r7
 80001d0:	bc80      	pop	{r7}
 80001d2:	4770      	bx	lr

080001d4 <UARTConfig>:
 * @param uart             Pointer to the UART peripheral.
 * @param uart_irqn        UART interrupt number.
 */
void UARTConfig(uart_cfg_t *uartstdio_device, USART_TypeDef *uart, 
                IRQn_Type uart_irqn)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b084      	sub	sp, #16
 80001d8:	af00      	add	r7, sp, #0
 80001da:	60f8      	str	r0, [r7, #12]
 80001dc:	60b9      	str	r1, [r7, #8]
 80001de:	4613      	mov	r3, r2
 80001e0:	71fb      	strb	r3, [r7, #7]
    uartstdio_device->uart = uart;
 80001e2:	68fb      	ldr	r3, [r7, #12]
 80001e4:	68ba      	ldr	r2, [r7, #8]
 80001e6:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
    uartstdio_device->uart_irqn = uart_irqn;
 80001ea:	68fb      	ldr	r3, [r7, #12]
 80001ec:	79fa      	ldrb	r2, [r7, #7]
 80001ee:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c

    QUEUE_Init((ring_buffer_t *)&uartstdio_device->tx_buffer);
 80001f2:	68fb      	ldr	r3, [r7, #12]
 80001f4:	338c      	adds	r3, #140	@ 0x8c
 80001f6:	4618      	mov	r0, r3
 80001f8:	f000 f80e 	bl	8000218 <QUEUE_Init>
    QUEUE_Init((ring_buffer_t *)&uartstdio_device->rx_buffer);
 80001fc:	68fb      	ldr	r3, [r7, #12]
 80001fe:	4618      	mov	r0, r3
 8000200:	f000 f80a 	bl	8000218 <QUEUE_Init>

    /**
     * Enable the UART Error Interrupt:
     * (Frame error, noise error, overrun error)
     */
    LL_USART_EnableIT_ERROR(uart);
 8000204:	68b8      	ldr	r0, [r7, #8]
 8000206:	f7ff ffc3 	bl	8000190 <LL_USART_EnableIT_ERROR>

    /* Enable the UART Data Register not empty Interrupt */
    LL_USART_EnableIT_RXNE(uart);
 800020a:	68b8      	ldr	r0, [r7, #8]
 800020c:	f7ff ff9e 	bl	800014c <LL_USART_EnableIT_RXNE>
}
 8000210:	bf00      	nop
 8000212:	3710      	adds	r7, #16
 8000214:	46bd      	mov	sp, r7
 8000216:	bd80      	pop	{r7, pc}

08000218 <QUEUE_Init>:
 * 
 * @param rb The parameter `rb` is a pointer to a `ring_buffer_t` structure, which is used to implement
 * a queue data structure.
 */
static inline void QUEUE_Init(ring_buffer_t *rb)
{
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
    rb->in = 0;
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	2200      	movs	r2, #0
 8000224:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    rb->out = 0;
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	2200      	movs	r2, #0
 800022c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    rb->count = 0;
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	2200      	movs	r2, #0
 8000234:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8000238:	bf00      	nop
 800023a:	370c      	adds	r7, #12
 800023c:	46bd      	mov	sp, r7
 800023e:	bc80      	pop	{r7}
 8000240:	4770      	bx	lr
	...

08000244 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000244:	b480      	push	{r7}
 8000246:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000248:	4b04      	ldr	r3, [pc, #16]	@ (800025c <__NVIC_GetPriorityGrouping+0x18>)
 800024a:	68db      	ldr	r3, [r3, #12]
 800024c:	0a1b      	lsrs	r3, r3, #8
 800024e:	f003 0307 	and.w	r3, r3, #7
}
 8000252:	4618      	mov	r0, r3
 8000254:	46bd      	mov	sp, r7
 8000256:	bc80      	pop	{r7}
 8000258:	4770      	bx	lr
 800025a:	bf00      	nop
 800025c:	e000ed00 	.word	0xe000ed00

08000260 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000260:	b480      	push	{r7}
 8000262:	b083      	sub	sp, #12
 8000264:	af00      	add	r7, sp, #0
 8000266:	4603      	mov	r3, r0
 8000268:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800026a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800026e:	2b00      	cmp	r3, #0
 8000270:	db0b      	blt.n	800028a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000272:	79fb      	ldrb	r3, [r7, #7]
 8000274:	f003 021f 	and.w	r2, r3, #31
 8000278:	4906      	ldr	r1, [pc, #24]	@ (8000294 <__NVIC_EnableIRQ+0x34>)
 800027a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800027e:	095b      	lsrs	r3, r3, #5
 8000280:	2001      	movs	r0, #1
 8000282:	fa00 f202 	lsl.w	r2, r0, r2
 8000286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800028a:	bf00      	nop
 800028c:	370c      	adds	r7, #12
 800028e:	46bd      	mov	sp, r7
 8000290:	bc80      	pop	{r7}
 8000292:	4770      	bx	lr
 8000294:	e000e100 	.word	0xe000e100

08000298 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000298:	b480      	push	{r7}
 800029a:	b083      	sub	sp, #12
 800029c:	af00      	add	r7, sp, #0
 800029e:	4603      	mov	r3, r0
 80002a0:	6039      	str	r1, [r7, #0]
 80002a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	db0a      	blt.n	80002c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ac:	683b      	ldr	r3, [r7, #0]
 80002ae:	b2da      	uxtb	r2, r3
 80002b0:	490c      	ldr	r1, [pc, #48]	@ (80002e4 <__NVIC_SetPriority+0x4c>)
 80002b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002b6:	0112      	lsls	r2, r2, #4
 80002b8:	b2d2      	uxtb	r2, r2
 80002ba:	440b      	add	r3, r1
 80002bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002c0:	e00a      	b.n	80002d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c2:	683b      	ldr	r3, [r7, #0]
 80002c4:	b2da      	uxtb	r2, r3
 80002c6:	4908      	ldr	r1, [pc, #32]	@ (80002e8 <__NVIC_SetPriority+0x50>)
 80002c8:	79fb      	ldrb	r3, [r7, #7]
 80002ca:	f003 030f 	and.w	r3, r3, #15
 80002ce:	3b04      	subs	r3, #4
 80002d0:	0112      	lsls	r2, r2, #4
 80002d2:	b2d2      	uxtb	r2, r2
 80002d4:	440b      	add	r3, r1
 80002d6:	761a      	strb	r2, [r3, #24]
}
 80002d8:	bf00      	nop
 80002da:	370c      	adds	r7, #12
 80002dc:	46bd      	mov	sp, r7
 80002de:	bc80      	pop	{r7}
 80002e0:	4770      	bx	lr
 80002e2:	bf00      	nop
 80002e4:	e000e100 	.word	0xe000e100
 80002e8:	e000ed00 	.word	0xe000ed00

080002ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80002ec:	b480      	push	{r7}
 80002ee:	b089      	sub	sp, #36	@ 0x24
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	60f8      	str	r0, [r7, #12]
 80002f4:	60b9      	str	r1, [r7, #8]
 80002f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80002f8:	68fb      	ldr	r3, [r7, #12]
 80002fa:	f003 0307 	and.w	r3, r3, #7
 80002fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000300:	69fb      	ldr	r3, [r7, #28]
 8000302:	f1c3 0307 	rsb	r3, r3, #7
 8000306:	2b04      	cmp	r3, #4
 8000308:	bf28      	it	cs
 800030a:	2304      	movcs	r3, #4
 800030c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800030e:	69fb      	ldr	r3, [r7, #28]
 8000310:	3304      	adds	r3, #4
 8000312:	2b06      	cmp	r3, #6
 8000314:	d902      	bls.n	800031c <NVIC_EncodePriority+0x30>
 8000316:	69fb      	ldr	r3, [r7, #28]
 8000318:	3b03      	subs	r3, #3
 800031a:	e000      	b.n	800031e <NVIC_EncodePriority+0x32>
 800031c:	2300      	movs	r3, #0
 800031e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000320:	f04f 32ff 	mov.w	r2, #4294967295
 8000324:	69bb      	ldr	r3, [r7, #24]
 8000326:	fa02 f303 	lsl.w	r3, r2, r3
 800032a:	43da      	mvns	r2, r3
 800032c:	68bb      	ldr	r3, [r7, #8]
 800032e:	401a      	ands	r2, r3
 8000330:	697b      	ldr	r3, [r7, #20]
 8000332:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000334:	f04f 31ff 	mov.w	r1, #4294967295
 8000338:	697b      	ldr	r3, [r7, #20]
 800033a:	fa01 f303 	lsl.w	r3, r1, r3
 800033e:	43d9      	mvns	r1, r3
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000344:	4313      	orrs	r3, r2
         );
}
 8000346:	4618      	mov	r0, r3
 8000348:	3724      	adds	r7, #36	@ 0x24
 800034a:	46bd      	mov	sp, r7
 800034c:	bc80      	pop	{r7}
 800034e:	4770      	bx	lr

08000350 <LL_ADC_REG_SetSequencerRanks>:
  *         
  *         (1) On STM32F1, parameter available only on ADC instance: ADC1.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000350:	b480      	push	{r7}
 8000352:	b089      	sub	sp, #36	@ 0x24
 8000354:	af00      	add	r7, sp, #0
 8000356:	60f8      	str	r0, [r7, #12]
 8000358:	60b9      	str	r1, [r7, #8]
 800035a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	332c      	adds	r3, #44	@ 0x2c
 8000360:	4619      	mov	r1, r3
 8000362:	68bb      	ldr	r3, [r7, #8]
 8000364:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8000368:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800036c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800036e:	69ba      	ldr	r2, [r7, #24]
 8000370:	fa92 f2a2 	rbit	r2, r2
 8000374:	617a      	str	r2, [r7, #20]
  return result;
 8000376:	697a      	ldr	r2, [r7, #20]
 8000378:	fab2 f282 	clz	r2, r2
 800037c:	b2d2      	uxtb	r2, r2
 800037e:	40d3      	lsrs	r3, r2
 8000380:	009b      	lsls	r3, r3, #2
 8000382:	440b      	add	r3, r1
 8000384:	61fb      	str	r3, [r7, #28]
  
  MODIFY_REG(*preg,
 8000386:	69fb      	ldr	r3, [r7, #28]
 8000388:	681a      	ldr	r2, [r3, #0]
 800038a:	68bb      	ldr	r3, [r7, #8]
 800038c:	f003 031f 	and.w	r3, r3, #31
 8000390:	211f      	movs	r1, #31
 8000392:	fa01 f303 	lsl.w	r3, r1, r3
 8000396:	43db      	mvns	r3, r3
 8000398:	401a      	ands	r2, r3
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	f003 011f 	and.w	r1, r3, #31
 80003a0:	68bb      	ldr	r3, [r7, #8]
 80003a2:	f003 031f 	and.w	r3, r3, #31
 80003a6:	fa01 f303 	lsl.w	r3, r1, r3
 80003aa:	431a      	orrs	r2, r3
 80003ac:	69fb      	ldr	r3, [r7, #28]
 80003ae:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80003b0:	bf00      	nop
 80003b2:	3724      	adds	r7, #36	@ 0x24
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bc80      	pop	{r7}
 80003b8:	4770      	bx	lr

080003ba <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_71CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_239CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80003ba:	b480      	push	{r7}
 80003bc:	b08d      	sub	sp, #52	@ 0x34
 80003be:	af00      	add	r7, sp, #0
 80003c0:	60f8      	str	r0, [r7, #12]
 80003c2:	60b9      	str	r1, [r7, #8]
 80003c4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 80003c6:	68fb      	ldr	r3, [r7, #12]
 80003c8:	330c      	adds	r3, #12
 80003ca:	4619      	mov	r1, r3
 80003cc:	68bb      	ldr	r3, [r7, #8]
 80003ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80003d2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80003d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003d8:	69ba      	ldr	r2, [r7, #24]
 80003da:	fa92 f2a2 	rbit	r2, r2
 80003de:	617a      	str	r2, [r7, #20]
  return result;
 80003e0:	697a      	ldr	r2, [r7, #20]
 80003e2:	fab2 f282 	clz	r2, r2
 80003e6:	b2d2      	uxtb	r2, r2
 80003e8:	40d3      	lsrs	r3, r2
 80003ea:	009b      	lsls	r3, r3, #2
 80003ec:	440b      	add	r3, r1
 80003ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  MODIFY_REG(*preg,
 80003f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80003f2:	681a      	ldr	r2, [r3, #0]
 80003f4:	68bb      	ldr	r3, [r7, #8]
 80003f6:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 80003fa:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 80003fe:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000400:	6a39      	ldr	r1, [r7, #32]
 8000402:	fa91 f1a1 	rbit	r1, r1
 8000406:	61f9      	str	r1, [r7, #28]
  return result;
 8000408:	69f9      	ldr	r1, [r7, #28]
 800040a:	fab1 f181 	clz	r1, r1
 800040e:	b2c9      	uxtb	r1, r1
 8000410:	40cb      	lsrs	r3, r1
 8000412:	2107      	movs	r1, #7
 8000414:	fa01 f303 	lsl.w	r3, r1, r3
 8000418:	43db      	mvns	r3, r3
 800041a:	401a      	ands	r2, r3
 800041c:	68bb      	ldr	r3, [r7, #8]
 800041e:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 8000422:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 8000426:	62b9      	str	r1, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000428:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800042a:	fa91 f1a1 	rbit	r1, r1
 800042e:	6279      	str	r1, [r7, #36]	@ 0x24
  return result;
 8000430:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000432:	fab1 f181 	clz	r1, r1
 8000436:	b2c9      	uxtb	r1, r1
 8000438:	40cb      	lsrs	r3, r1
 800043a:	6879      	ldr	r1, [r7, #4]
 800043c:	fa01 f303 	lsl.w	r3, r1, r3
 8000440:	431a      	orrs	r2, r3
 8000442:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000444:	601a      	str	r2, [r3, #0]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 8000446:	bf00      	nop
 8000448:	3734      	adds	r7, #52	@ 0x34
 800044a:	46bd      	mov	sp, r7
 800044c:	bc80      	pop	{r7}
 800044e:	4770      	bx	lr

08000450 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000454:	4b04      	ldr	r3, [pc, #16]	@ (8000468 <LL_RCC_HSE_Enable+0x18>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	4a03      	ldr	r2, [pc, #12]	@ (8000468 <LL_RCC_HSE_Enable+0x18>)
 800045a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800045e:	6013      	str	r3, [r2, #0]
}
 8000460:	bf00      	nop
 8000462:	46bd      	mov	sp, r7
 8000464:	bc80      	pop	{r7}
 8000466:	4770      	bx	lr
 8000468:	40021000 	.word	0x40021000

0800046c <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000470:	4b06      	ldr	r3, [pc, #24]	@ (800048c <LL_RCC_HSE_IsReady+0x20>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000478:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800047c:	bf0c      	ite	eq
 800047e:	2301      	moveq	r3, #1
 8000480:	2300      	movne	r3, #0
 8000482:	b2db      	uxtb	r3, r3
}
 8000484:	4618      	mov	r0, r3
 8000486:	46bd      	mov	sp, r7
 8000488:	bc80      	pop	{r7}
 800048a:	4770      	bx	lr
 800048c:	40021000 	.word	0x40021000

08000490 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000490:	b480      	push	{r7}
 8000492:	b083      	sub	sp, #12
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000498:	4b06      	ldr	r3, [pc, #24]	@ (80004b4 <LL_RCC_SetSysClkSource+0x24>)
 800049a:	685b      	ldr	r3, [r3, #4]
 800049c:	f023 0203 	bic.w	r2, r3, #3
 80004a0:	4904      	ldr	r1, [pc, #16]	@ (80004b4 <LL_RCC_SetSysClkSource+0x24>)
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	4313      	orrs	r3, r2
 80004a6:	604b      	str	r3, [r1, #4]
}
 80004a8:	bf00      	nop
 80004aa:	370c      	adds	r7, #12
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bc80      	pop	{r7}
 80004b0:	4770      	bx	lr
 80004b2:	bf00      	nop
 80004b4:	40021000 	.word	0x40021000

080004b8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80004bc:	4b03      	ldr	r3, [pc, #12]	@ (80004cc <LL_RCC_GetSysClkSource+0x14>)
 80004be:	685b      	ldr	r3, [r3, #4]
 80004c0:	f003 030c 	and.w	r3, r3, #12
}
 80004c4:	4618      	mov	r0, r3
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bc80      	pop	{r7}
 80004ca:	4770      	bx	lr
 80004cc:	40021000 	.word	0x40021000

080004d0 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80004d8:	4b06      	ldr	r3, [pc, #24]	@ (80004f4 <LL_RCC_SetAHBPrescaler+0x24>)
 80004da:	685b      	ldr	r3, [r3, #4]
 80004dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80004e0:	4904      	ldr	r1, [pc, #16]	@ (80004f4 <LL_RCC_SetAHBPrescaler+0x24>)
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	4313      	orrs	r3, r2
 80004e6:	604b      	str	r3, [r1, #4]
}
 80004e8:	bf00      	nop
 80004ea:	370c      	adds	r7, #12
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bc80      	pop	{r7}
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	40021000 	.word	0x40021000

080004f8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80004f8:	b480      	push	{r7}
 80004fa:	b083      	sub	sp, #12
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000500:	4b06      	ldr	r3, [pc, #24]	@ (800051c <LL_RCC_SetAPB1Prescaler+0x24>)
 8000502:	685b      	ldr	r3, [r3, #4]
 8000504:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8000508:	4904      	ldr	r1, [pc, #16]	@ (800051c <LL_RCC_SetAPB1Prescaler+0x24>)
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	4313      	orrs	r3, r2
 800050e:	604b      	str	r3, [r1, #4]
}
 8000510:	bf00      	nop
 8000512:	370c      	adds	r7, #12
 8000514:	46bd      	mov	sp, r7
 8000516:	bc80      	pop	{r7}
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	40021000 	.word	0x40021000

08000520 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000520:	b480      	push	{r7}
 8000522:	b083      	sub	sp, #12
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000528:	4b06      	ldr	r3, [pc, #24]	@ (8000544 <LL_RCC_SetAPB2Prescaler+0x24>)
 800052a:	685b      	ldr	r3, [r3, #4]
 800052c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8000530:	4904      	ldr	r1, [pc, #16]	@ (8000544 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	4313      	orrs	r3, r2
 8000536:	604b      	str	r3, [r1, #4]
}
 8000538:	bf00      	nop
 800053a:	370c      	adds	r7, #12
 800053c:	46bd      	mov	sp, r7
 800053e:	bc80      	pop	{r7}
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	40021000 	.word	0x40021000

08000548 <LL_RCC_SetADCClockSource>:
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_6
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
 8000548:	b480      	push	{r7}
 800054a:	b083      	sub	sp, #12
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_ADCPRE, ADCxSource);
 8000550:	4b06      	ldr	r3, [pc, #24]	@ (800056c <LL_RCC_SetADCClockSource+0x24>)
 8000552:	685b      	ldr	r3, [r3, #4]
 8000554:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8000558:	4904      	ldr	r1, [pc, #16]	@ (800056c <LL_RCC_SetADCClockSource+0x24>)
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	4313      	orrs	r3, r2
 800055e:	604b      	str	r3, [r1, #4]
}
 8000560:	bf00      	nop
 8000562:	370c      	adds	r7, #12
 8000564:	46bd      	mov	sp, r7
 8000566:	bc80      	pop	{r7}
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	40021000 	.word	0x40021000

08000570 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000574:	4b04      	ldr	r3, [pc, #16]	@ (8000588 <LL_RCC_PLL_Enable+0x18>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a03      	ldr	r2, [pc, #12]	@ (8000588 <LL_RCC_PLL_Enable+0x18>)
 800057a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800057e:	6013      	str	r3, [r2, #0]
}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	bc80      	pop	{r7}
 8000586:	4770      	bx	lr
 8000588:	40021000 	.word	0x40021000

0800058c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000590:	4b06      	ldr	r3, [pc, #24]	@ (80005ac <LL_RCC_PLL_IsReady+0x20>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000598:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800059c:	bf0c      	ite	eq
 800059e:	2301      	moveq	r3, #1
 80005a0:	2300      	movne	r3, #0
 80005a2:	b2db      	uxtb	r3, r3
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bc80      	pop	{r7}
 80005aa:	4770      	bx	lr
 80005ac:	40021000 	.word	0x40021000

080005b0 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 80005ba:	4b08      	ldr	r3, [pc, #32]	@ (80005dc <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 80005bc:	685b      	ldr	r3, [r3, #4]
 80005be:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 80005c8:	683b      	ldr	r3, [r7, #0]
 80005ca:	430b      	orrs	r3, r1
 80005cc:	4903      	ldr	r1, [pc, #12]	@ (80005dc <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 80005ce:	4313      	orrs	r3, r2
 80005d0:	604b      	str	r3, [r1, #4]
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 80005d2:	bf00      	nop
 80005d4:	370c      	adds	r7, #12
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bc80      	pop	{r7}
 80005da:	4770      	bx	lr
 80005dc:	40021000 	.word	0x40021000

080005e0 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b085      	sub	sp, #20
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80005e8:	4b08      	ldr	r3, [pc, #32]	@ (800060c <LL_APB1_GRP1_EnableClock+0x2c>)
 80005ea:	69da      	ldr	r2, [r3, #28]
 80005ec:	4907      	ldr	r1, [pc, #28]	@ (800060c <LL_APB1_GRP1_EnableClock+0x2c>)
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	4313      	orrs	r3, r2
 80005f2:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80005f4:	4b05      	ldr	r3, [pc, #20]	@ (800060c <LL_APB1_GRP1_EnableClock+0x2c>)
 80005f6:	69da      	ldr	r2, [r3, #28]
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	4013      	ands	r3, r2
 80005fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005fe:	68fb      	ldr	r3, [r7, #12]
}
 8000600:	bf00      	nop
 8000602:	3714      	adds	r7, #20
 8000604:	46bd      	mov	sp, r7
 8000606:	bc80      	pop	{r7}
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	40021000 	.word	0x40021000

08000610 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000610:	b480      	push	{r7}
 8000612:	b085      	sub	sp, #20
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000618:	4b08      	ldr	r3, [pc, #32]	@ (800063c <LL_APB2_GRP1_EnableClock+0x2c>)
 800061a:	699a      	ldr	r2, [r3, #24]
 800061c:	4907      	ldr	r1, [pc, #28]	@ (800063c <LL_APB2_GRP1_EnableClock+0x2c>)
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4313      	orrs	r3, r2
 8000622:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000624:	4b05      	ldr	r3, [pc, #20]	@ (800063c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000626:	699a      	ldr	r2, [r3, #24]
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	4013      	ands	r3, r2
 800062c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800062e:	68fb      	ldr	r3, [r7, #12]
}
 8000630:	bf00      	nop
 8000632:	3714      	adds	r7, #20
 8000634:	46bd      	mov	sp, r7
 8000636:	bc80      	pop	{r7}
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	40021000 	.word	0x40021000

08000640 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000648:	4b06      	ldr	r3, [pc, #24]	@ (8000664 <LL_FLASH_SetLatency+0x24>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f023 0207 	bic.w	r2, r3, #7
 8000650:	4904      	ldr	r1, [pc, #16]	@ (8000664 <LL_FLASH_SetLatency+0x24>)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	4313      	orrs	r3, r2
 8000656:	600b      	str	r3, [r1, #0]
}
 8000658:	bf00      	nop
 800065a:	370c      	adds	r7, #12
 800065c:	46bd      	mov	sp, r7
 800065e:	bc80      	pop	{r7}
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	40022000 	.word	0x40022000

08000668 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800066c:	4b03      	ldr	r3, [pc, #12]	@ (800067c <LL_FLASH_GetLatency+0x14>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f003 0307 	and.w	r3, r3, #7
}
 8000674:	4618      	mov	r0, r3
 8000676:	46bd      	mov	sp, r7
 8000678:	bc80      	pop	{r7}
 800067a:	4770      	bx	lr
 800067c:	40022000 	.word	0x40022000

08000680 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8000680:	b480      	push	{r7}
 8000682:	b085      	sub	sp, #20
 8000684:	af00      	add	r7, sp, #0
 8000686:	60f8      	str	r0, [r7, #12]
 8000688:	60b9      	str	r1, [r7, #8]
 800068a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 800068c:	68bb      	ldr	r3, [r7, #8]
 800068e:	3b01      	subs	r3, #1
 8000690:	4a0c      	ldr	r2, [pc, #48]	@ (80006c4 <LL_DMA_SetDataTransferDirection+0x44>)
 8000692:	5cd3      	ldrb	r3, [r2, r3]
 8000694:	461a      	mov	r2, r3
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	4413      	add	r3, r2
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80006a0:	f023 0310 	bic.w	r3, r3, #16
 80006a4:	68ba      	ldr	r2, [r7, #8]
 80006a6:	3a01      	subs	r2, #1
 80006a8:	4906      	ldr	r1, [pc, #24]	@ (80006c4 <LL_DMA_SetDataTransferDirection+0x44>)
 80006aa:	5c8a      	ldrb	r2, [r1, r2]
 80006ac:	4611      	mov	r1, r2
 80006ae:	68fa      	ldr	r2, [r7, #12]
 80006b0:	440a      	add	r2, r1
 80006b2:	4611      	mov	r1, r2
 80006b4:	687a      	ldr	r2, [r7, #4]
 80006b6:	4313      	orrs	r3, r2
 80006b8:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 80006ba:	bf00      	nop
 80006bc:	3714      	adds	r7, #20
 80006be:	46bd      	mov	sp, r7
 80006c0:	bc80      	pop	{r7}
 80006c2:	4770      	bx	lr
 80006c4:	08002db4 	.word	0x08002db4

080006c8 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b085      	sub	sp, #20
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	60f8      	str	r0, [r7, #12]
 80006d0:	60b9      	str	r1, [r7, #8]
 80006d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 80006d4:	68bb      	ldr	r3, [r7, #8]
 80006d6:	3b01      	subs	r3, #1
 80006d8:	4a0b      	ldr	r2, [pc, #44]	@ (8000708 <LL_DMA_SetMode+0x40>)
 80006da:	5cd3      	ldrb	r3, [r2, r3]
 80006dc:	461a      	mov	r2, r3
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	4413      	add	r3, r2
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f023 0220 	bic.w	r2, r3, #32
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	3b01      	subs	r3, #1
 80006ec:	4906      	ldr	r1, [pc, #24]	@ (8000708 <LL_DMA_SetMode+0x40>)
 80006ee:	5ccb      	ldrb	r3, [r1, r3]
 80006f0:	4619      	mov	r1, r3
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	440b      	add	r3, r1
 80006f6:	4619      	mov	r1, r3
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	4313      	orrs	r3, r2
 80006fc:	600b      	str	r3, [r1, #0]
             Mode);
}
 80006fe:	bf00      	nop
 8000700:	3714      	adds	r7, #20
 8000702:	46bd      	mov	sp, r7
 8000704:	bc80      	pop	{r7}
 8000706:	4770      	bx	lr
 8000708:	08002db4 	.word	0x08002db4

0800070c <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 800070c:	b480      	push	{r7}
 800070e:	b085      	sub	sp, #20
 8000710:	af00      	add	r7, sp, #0
 8000712:	60f8      	str	r0, [r7, #12]
 8000714:	60b9      	str	r1, [r7, #8]
 8000716:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8000718:	68bb      	ldr	r3, [r7, #8]
 800071a:	3b01      	subs	r3, #1
 800071c:	4a0b      	ldr	r2, [pc, #44]	@ (800074c <LL_DMA_SetPeriphIncMode+0x40>)
 800071e:	5cd3      	ldrb	r3, [r2, r3]
 8000720:	461a      	mov	r2, r3
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	4413      	add	r3, r2
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800072c:	68bb      	ldr	r3, [r7, #8]
 800072e:	3b01      	subs	r3, #1
 8000730:	4906      	ldr	r1, [pc, #24]	@ (800074c <LL_DMA_SetPeriphIncMode+0x40>)
 8000732:	5ccb      	ldrb	r3, [r1, r3]
 8000734:	4619      	mov	r1, r3
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	440b      	add	r3, r1
 800073a:	4619      	mov	r1, r3
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	4313      	orrs	r3, r2
 8000740:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 8000742:	bf00      	nop
 8000744:	3714      	adds	r7, #20
 8000746:	46bd      	mov	sp, r7
 8000748:	bc80      	pop	{r7}
 800074a:	4770      	bx	lr
 800074c:	08002db4 	.word	0x08002db4

08000750 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8000750:	b480      	push	{r7}
 8000752:	b085      	sub	sp, #20
 8000754:	af00      	add	r7, sp, #0
 8000756:	60f8      	str	r0, [r7, #12]
 8000758:	60b9      	str	r1, [r7, #8]
 800075a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	3b01      	subs	r3, #1
 8000760:	4a0b      	ldr	r2, [pc, #44]	@ (8000790 <LL_DMA_SetMemoryIncMode+0x40>)
 8000762:	5cd3      	ldrb	r3, [r2, r3]
 8000764:	461a      	mov	r2, r3
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	4413      	add	r3, r2
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8000770:	68bb      	ldr	r3, [r7, #8]
 8000772:	3b01      	subs	r3, #1
 8000774:	4906      	ldr	r1, [pc, #24]	@ (8000790 <LL_DMA_SetMemoryIncMode+0x40>)
 8000776:	5ccb      	ldrb	r3, [r1, r3]
 8000778:	4619      	mov	r1, r3
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	440b      	add	r3, r1
 800077e:	4619      	mov	r1, r3
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	4313      	orrs	r3, r2
 8000784:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 8000786:	bf00      	nop
 8000788:	3714      	adds	r7, #20
 800078a:	46bd      	mov	sp, r7
 800078c:	bc80      	pop	{r7}
 800078e:	4770      	bx	lr
 8000790:	08002db4 	.word	0x08002db4

08000794 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8000794:	b480      	push	{r7}
 8000796:	b085      	sub	sp, #20
 8000798:	af00      	add	r7, sp, #0
 800079a:	60f8      	str	r0, [r7, #12]
 800079c:	60b9      	str	r1, [r7, #8]
 800079e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 80007a0:	68bb      	ldr	r3, [r7, #8]
 80007a2:	3b01      	subs	r3, #1
 80007a4:	4a0b      	ldr	r2, [pc, #44]	@ (80007d4 <LL_DMA_SetPeriphSize+0x40>)
 80007a6:	5cd3      	ldrb	r3, [r2, r3]
 80007a8:	461a      	mov	r2, r3
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	4413      	add	r3, r2
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	3b01      	subs	r3, #1
 80007b8:	4906      	ldr	r1, [pc, #24]	@ (80007d4 <LL_DMA_SetPeriphSize+0x40>)
 80007ba:	5ccb      	ldrb	r3, [r1, r3]
 80007bc:	4619      	mov	r1, r3
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	440b      	add	r3, r1
 80007c2:	4619      	mov	r1, r3
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	4313      	orrs	r3, r2
 80007c8:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 80007ca:	bf00      	nop
 80007cc:	3714      	adds	r7, #20
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bc80      	pop	{r7}
 80007d2:	4770      	bx	lr
 80007d4:	08002db4 	.word	0x08002db4

080007d8 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 80007d8:	b480      	push	{r7}
 80007da:	b085      	sub	sp, #20
 80007dc:	af00      	add	r7, sp, #0
 80007de:	60f8      	str	r0, [r7, #12]
 80007e0:	60b9      	str	r1, [r7, #8]
 80007e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	3b01      	subs	r3, #1
 80007e8:	4a0b      	ldr	r2, [pc, #44]	@ (8000818 <LL_DMA_SetMemorySize+0x40>)
 80007ea:	5cd3      	ldrb	r3, [r2, r3]
 80007ec:	461a      	mov	r2, r3
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	4413      	add	r3, r2
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	3b01      	subs	r3, #1
 80007fc:	4906      	ldr	r1, [pc, #24]	@ (8000818 <LL_DMA_SetMemorySize+0x40>)
 80007fe:	5ccb      	ldrb	r3, [r1, r3]
 8000800:	4619      	mov	r1, r3
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	440b      	add	r3, r1
 8000806:	4619      	mov	r1, r3
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	4313      	orrs	r3, r2
 800080c:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 800080e:	bf00      	nop
 8000810:	3714      	adds	r7, #20
 8000812:	46bd      	mov	sp, r7
 8000814:	bc80      	pop	{r7}
 8000816:	4770      	bx	lr
 8000818:	08002db4 	.word	0x08002db4

0800081c <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 800081c:	b480      	push	{r7}
 800081e:	b085      	sub	sp, #20
 8000820:	af00      	add	r7, sp, #0
 8000822:	60f8      	str	r0, [r7, #12]
 8000824:	60b9      	str	r1, [r7, #8]
 8000826:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8000828:	68bb      	ldr	r3, [r7, #8]
 800082a:	3b01      	subs	r3, #1
 800082c:	4a0b      	ldr	r2, [pc, #44]	@ (800085c <LL_DMA_SetChannelPriorityLevel+0x40>)
 800082e:	5cd3      	ldrb	r3, [r2, r3]
 8000830:	461a      	mov	r2, r3
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	4413      	add	r3, r2
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800083c:	68bb      	ldr	r3, [r7, #8]
 800083e:	3b01      	subs	r3, #1
 8000840:	4906      	ldr	r1, [pc, #24]	@ (800085c <LL_DMA_SetChannelPriorityLevel+0x40>)
 8000842:	5ccb      	ldrb	r3, [r1, r3]
 8000844:	4619      	mov	r1, r3
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	440b      	add	r3, r1
 800084a:	4619      	mov	r1, r3
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	4313      	orrs	r3, r2
 8000850:	600b      	str	r3, [r1, #0]
             Priority);
}
 8000852:	bf00      	nop
 8000854:	3714      	adds	r7, #20
 8000856:	46bd      	mov	sp, r7
 8000858:	bc80      	pop	{r7}
 800085a:	4770      	bx	lr
 800085c:	08002db4 	.word	0x08002db4

08000860 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	601a      	str	r2, [r3, #0]
}
 8000874:	bf00      	nop
 8000876:	370c      	adds	r7, #12
 8000878:	46bd      	mov	sp, r7
 800087a:	bc80      	pop	{r7}
 800087c:	4770      	bx	lr

0800087e <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 800087e:	b480      	push	{r7}
 8000880:	b083      	sub	sp, #12
 8000882:	af00      	add	r7, sp, #0
 8000884:	6078      	str	r0, [r7, #4]
 8000886:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	689b      	ldr	r3, [r3, #8]
 800088c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000890:	f023 0307 	bic.w	r3, r3, #7
 8000894:	683a      	ldr	r2, [r7, #0]
 8000896:	431a      	orrs	r2, r3
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	609a      	str	r2, [r3, #8]
}
 800089c:	bf00      	nop
 800089e:	370c      	adds	r7, #12
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bc80      	pop	{r7}
 80008a4:	4770      	bx	lr

080008a6 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 80008a6:	b480      	push	{r7}
 80008a8:	b083      	sub	sp, #12
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	6078      	str	r0, [r7, #4]
 80008ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	685b      	ldr	r3, [r3, #4]
 80008b4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	431a      	orrs	r2, r3
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	605a      	str	r2, [r3, #4]
}
 80008c0:	bf00      	nop
 80008c2:	370c      	adds	r7, #12
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bc80      	pop	{r7}
 80008c8:	4770      	bx	lr

080008ca <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 80008ca:	b480      	push	{r7}
 80008cc:	b083      	sub	sp, #12
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	689b      	ldr	r3, [r3, #8]
 80008d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	609a      	str	r2, [r3, #8]
}
 80008de:	bf00      	nop
 80008e0:	370c      	adds	r7, #12
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bc80      	pop	{r7}
 80008e6:	4770      	bx	lr

080008e8 <LL_USART_Enable>:
{
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	68db      	ldr	r3, [r3, #12]
 80008f4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	60da      	str	r2, [r3, #12]
}
 80008fc:	bf00      	nop
 80008fe:	370c      	adds	r7, #12
 8000900:	46bd      	mov	sp, r7
 8000902:	bc80      	pop	{r7}
 8000904:	4770      	bx	lr

08000906 <LL_USART_ConfigAsyncMode>:
{
 8000906:	b480      	push	{r7}
 8000908:	b083      	sub	sp, #12
 800090a:	af00      	add	r7, sp, #0
 800090c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	691b      	ldr	r3, [r3, #16]
 8000912:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	695b      	ldr	r3, [r3, #20]
 800091e:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	615a      	str	r2, [r3, #20]
}
 8000926:	bf00      	nop
 8000928:	370c      	adds	r7, #12
 800092a:	46bd      	mov	sp, r7
 800092c:	bc80      	pop	{r7}
 800092e:	4770      	bx	lr

08000930 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_OUTPUT
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000930:	b490      	push	{r4, r7}
 8000932:	b088      	sub	sp, #32
 8000934:	af00      	add	r7, sp, #0
 8000936:	60f8      	str	r0, [r7, #12]
 8000938:	60b9      	str	r1, [r7, #8]
 800093a:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	461a      	mov	r2, r3
 8000940:	68bb      	ldr	r3, [r7, #8]
 8000942:	0e1b      	lsrs	r3, r3, #24
 8000944:	4413      	add	r3, r2
 8000946:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8000948:	6822      	ldr	r2, [r4, #0]
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	fa93 f3a3 	rbit	r3, r3
 8000954:	613b      	str	r3, [r7, #16]
  return result;
 8000956:	693b      	ldr	r3, [r7, #16]
 8000958:	fab3 f383 	clz	r3, r3
 800095c:	b2db      	uxtb	r3, r3
 800095e:	009b      	lsls	r3, r3, #2
 8000960:	210f      	movs	r1, #15
 8000962:	fa01 f303 	lsl.w	r3, r1, r3
 8000966:	43db      	mvns	r3, r3
 8000968:	401a      	ands	r2, r3
 800096a:	68bb      	ldr	r3, [r7, #8]
 800096c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800096e:	69fb      	ldr	r3, [r7, #28]
 8000970:	fa93 f3a3 	rbit	r3, r3
 8000974:	61bb      	str	r3, [r7, #24]
  return result;
 8000976:	69bb      	ldr	r3, [r7, #24]
 8000978:	fab3 f383 	clz	r3, r3
 800097c:	b2db      	uxtb	r3, r3
 800097e:	009b      	lsls	r3, r3, #2
 8000980:	6879      	ldr	r1, [r7, #4]
 8000982:	fa01 f303 	lsl.w	r3, r1, r3
 8000986:	4313      	orrs	r3, r2
 8000988:	6023      	str	r3, [r4, #0]
}
 800098a:	bf00      	nop
 800098c:	3720      	adds	r7, #32
 800098e:	46bd      	mov	sp, r7
 8000990:	bc90      	pop	{r4, r7}
 8000992:	4770      	bx	lr

08000994 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
 800099c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	0a1b      	lsrs	r3, r3, #8
 80009a2:	b29a      	uxth	r2, r3
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	615a      	str	r2, [r3, #20]
}
 80009a8:	bf00      	nop
 80009aa:	370c      	adds	r7, #12
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bc80      	pop	{r7}
 80009b0:	4770      	bx	lr
	...

080009b4 <LL_GPIO_AF_SetEXTISource>:
  *         @arg @ref LL_GPIO_AF_EXTI_LINE14
  *         @arg @ref LL_GPIO_AF_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b085      	sub	sp, #20
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
 80009bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(AFIO->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 80009be:	4a13      	ldr	r2, [pc, #76]	@ (8000a0c <LL_GPIO_AF_SetEXTISource+0x58>)
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	3302      	adds	r3, #2
 80009c6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	0c1b      	lsrs	r3, r3, #16
 80009ce:	43db      	mvns	r3, r3
 80009d0:	ea02 0103 	and.w	r1, r2, r3
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	0c1b      	lsrs	r3, r3, #16
 80009d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	fa93 f3a3 	rbit	r3, r3
 80009e0:	60bb      	str	r3, [r7, #8]
  return result;
 80009e2:	68bb      	ldr	r3, [r7, #8]
 80009e4:	fab3 f383 	clz	r3, r3
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	461a      	mov	r2, r3
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	fa03 f202 	lsl.w	r2, r3, r2
 80009f2:	4806      	ldr	r0, [pc, #24]	@ (8000a0c <LL_GPIO_AF_SetEXTISource+0x58>)
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	430a      	orrs	r2, r1
 80009fa:	3302      	adds	r3, #2
 80009fc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000a00:	bf00      	nop
 8000a02:	3714      	adds	r7, #20
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bc80      	pop	{r7}
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	40010000 	.word	0x40010000

08000a10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a14:	f000 fbd8 	bl	80011c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a18:	f000 f81a 	bl	8000a50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a1c:	f000 faa0 	bl	8000f60 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a20:	f000 fa78 	bl	8000f14 <MX_DMA_Init>
  MX_ADC1_Init();
 8000a24:	f000 f85c 	bl	8000ae0 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000a28:	f000 f9c6 	bl	8000db8 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000a2c:	f000 f992 	bl	8000d54 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000a30:	f000 fa1a 	bl	8000e68 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000a34:	f000 f8ee 	bl	8000c14 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  UARTConfig(&uart_cfg_1, USART1, USART1_IRQn);
 8000a38:	2225      	movs	r2, #37	@ 0x25
 8000a3a:	4903      	ldr	r1, [pc, #12]	@ (8000a48 <main+0x38>)
 8000a3c:	4803      	ldr	r0, [pc, #12]	@ (8000a4c <main+0x3c>)
 8000a3e:	f7ff fbc9 	bl	80001d4 <UARTConfig>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a42:	bf00      	nop
 8000a44:	e7fd      	b.n	8000a42 <main+0x32>
 8000a46:	bf00      	nop
 8000a48:	40013800 	.word	0x40013800
 8000a4c:	20000070 	.word	0x20000070

08000a50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8000a54:	2002      	movs	r0, #2
 8000a56:	f7ff fdf3 	bl	8000640 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 8000a5a:	bf00      	nop
 8000a5c:	f7ff fe04 	bl	8000668 <LL_FLASH_GetLatency>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b02      	cmp	r3, #2
 8000a64:	d1fa      	bne.n	8000a5c <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSE_Enable();
 8000a66:	f7ff fcf3 	bl	8000450 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8000a6a:	bf00      	nop
 8000a6c:	f7ff fcfe 	bl	800046c <LL_RCC_HSE_IsReady>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b01      	cmp	r3, #1
 8000a74:	d1fa      	bne.n	8000a6c <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_2, LL_RCC_PLL_MUL_15);
 8000a76:	f44f 1150 	mov.w	r1, #3407872	@ 0x340000
 8000a7a:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8000a7e:	f7ff fd97 	bl	80005b0 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000a82:	f7ff fd75 	bl	8000570 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000a86:	bf00      	nop
 8000a88:	f7ff fd80 	bl	800058c <LL_RCC_PLL_IsReady>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d1fa      	bne.n	8000a88 <SystemClock_Config+0x38>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000a92:	2000      	movs	r0, #0
 8000a94:	f7ff fd1c 	bl	80004d0 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8000a98:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000a9c:	f7ff fd2c 	bl	80004f8 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000aa0:	2000      	movs	r0, #0
 8000aa2:	f7ff fd3d 	bl	8000520 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000aa6:	2002      	movs	r0, #2
 8000aa8:	f7ff fcf2 	bl	8000490 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000aac:	bf00      	nop
 8000aae:	f7ff fd03 	bl	80004b8 <LL_RCC_GetSysClkSource>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b08      	cmp	r3, #8
 8000ab6:	d1fa      	bne.n	8000aae <SystemClock_Config+0x5e>
  {

  }
  LL_SetSystemCoreClock(60000000);
 8000ab8:	4808      	ldr	r0, [pc, #32]	@ (8000adc <SystemClock_Config+0x8c>)
 8000aba:	f002 f935 	bl	8002d28 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8000abe:	200f      	movs	r0, #15
 8000ac0:	f000 fb98 	bl	80011f4 <HAL_InitTick>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000aca:	f000 fa95 	bl	8000ff8 <Error_Handler>
  }
  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSRC_PCLK2_DIV_6);
 8000ace:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000ad2:	f7ff fd39 	bl	8000548 <LL_RCC_SetADCClockSource>
}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	03938700 	.word	0x03938700

08000ae0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08e      	sub	sp, #56	@ 0x38
 8000ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8000ae6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000aea:	2200      	movs	r2, #0
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	605a      	str	r2, [r3, #4]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8000af0:	2300      	movs	r3, #0
 8000af2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8000af4:	f107 0318 	add.w	r3, r7, #24
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	60da      	str	r2, [r3, #12]
 8000b02:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b04:	1d3b      	adds	r3, r7, #4
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	605a      	str	r2, [r3, #4]
 8000b0c:	609a      	str	r2, [r3, #8]
 8000b0e:	60da      	str	r2, [r3, #12]
 8000b10:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8000b12:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000b16:	f7ff fd7b 	bl	8000610 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8000b1a:	2004      	movs	r0, #4
 8000b1c:	f7ff fd78 	bl	8000610 <LL_APB2_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PA0-WKUP   ------> ADC1_IN0
  PA1   ------> ADC1_IN1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 8000b20:	f240 3303 	movw	r3, #771	@ 0x303
 8000b24:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000b26:	2300      	movs	r3, #0
 8000b28:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2a:	1d3b      	adds	r3, r7, #4
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4835      	ldr	r0, [pc, #212]	@ (8000c04 <MX_ADC1_Init+0x124>)
 8000b30:	f001 fdf7 	bl	8002722 <LL_GPIO_Init>

  /* ADC1 DMA Init */

  /* ADC1 Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8000b34:	2200      	movs	r2, #0
 8000b36:	2101      	movs	r1, #1
 8000b38:	4833      	ldr	r0, [pc, #204]	@ (8000c08 <MX_ADC1_Init+0x128>)
 8000b3a:	f7ff fda1 	bl	8000680 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_LOW);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	2101      	movs	r1, #1
 8000b42:	4831      	ldr	r0, [pc, #196]	@ (8000c08 <MX_ADC1_Init+0x128>)
 8000b44:	f7ff fe6a 	bl	800081c <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_NORMAL);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	2101      	movs	r1, #1
 8000b4c:	482e      	ldr	r0, [pc, #184]	@ (8000c08 <MX_ADC1_Init+0x128>)
 8000b4e:	f7ff fdbb 	bl	80006c8 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 8000b52:	2200      	movs	r2, #0
 8000b54:	2101      	movs	r1, #1
 8000b56:	482c      	ldr	r0, [pc, #176]	@ (8000c08 <MX_ADC1_Init+0x128>)
 8000b58:	f7ff fdd8 	bl	800070c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 8000b5c:	2280      	movs	r2, #128	@ 0x80
 8000b5e:	2101      	movs	r1, #1
 8000b60:	4829      	ldr	r0, [pc, #164]	@ (8000c08 <MX_ADC1_Init+0x128>)
 8000b62:	f7ff fdf5 	bl	8000750 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_HALFWORD);
 8000b66:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b6a:	2101      	movs	r1, #1
 8000b6c:	4826      	ldr	r0, [pc, #152]	@ (8000c08 <MX_ADC1_Init+0x128>)
 8000b6e:	f7ff fe11 	bl	8000794 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_HALFWORD);
 8000b72:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b76:	2101      	movs	r1, #1
 8000b78:	4823      	ldr	r0, [pc, #140]	@ (8000c08 <MX_ADC1_Init+0x128>)
 8000b7a:	f7ff fe2d 	bl	80007d8 <LL_DMA_SetMemorySize>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	633b      	str	r3, [r7, #48]	@ 0x30
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 8000b82:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b86:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8000b88:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	481f      	ldr	r0, [pc, #124]	@ (8000c0c <MX_ADC1_Init+0x12c>)
 8000b90:	f001 fb92 	bl	80022b8 <LL_ADC_Init>
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8000b94:	2300      	movs	r3, #0
 8000b96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8000b98:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	481b      	ldr	r0, [pc, #108]	@ (8000c0c <MX_ADC1_Init+0x12c>)
 8000ba0:	f001 fb58 	bl	8002254 <LL_ADC_CommonInit>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8000ba4:	f44f 2360 	mov.w	r3, #917504	@ 0xe0000
 8000ba8:	61bb      	str	r3, [r7, #24]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS;
 8000baa:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000bae:	61fb      	str	r3, [r7, #28]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	627b      	str	r3, [r7, #36]	@ 0x24
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 8000bb8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000bbc:	62bb      	str	r3, [r7, #40]	@ 0x28
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8000bbe:	f107 0318 	add.w	r3, r7, #24
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4811      	ldr	r0, [pc, #68]	@ (8000c0c <MX_ADC1_Init+0x12c>)
 8000bc6:	f001 fb9e 	bl	8002306 <LL_ADC_REG_Init>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_0);
 8000bca:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000bce:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bd2:	480e      	ldr	r0, [pc, #56]	@ (8000c0c <MX_ADC1_Init+0x12c>)
 8000bd4:	f7ff fbbc 	bl	8000350 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8000bde:	480b      	ldr	r0, [pc, #44]	@ (8000c0c <MX_ADC1_Init+0x12c>)
 8000be0:	f7ff fbeb 	bl	80003ba <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_1);
 8000be4:	4a0a      	ldr	r2, [pc, #40]	@ (8000c10 <MX_ADC1_Init+0x130>)
 8000be6:	f240 2105 	movw	r1, #517	@ 0x205
 8000bea:	4808      	ldr	r0, [pc, #32]	@ (8000c0c <MX_ADC1_Init+0x12c>)
 8000bec:	f7ff fbb0 	bl	8000350 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	4907      	ldr	r1, [pc, #28]	@ (8000c10 <MX_ADC1_Init+0x130>)
 8000bf4:	4805      	ldr	r0, [pc, #20]	@ (8000c0c <MX_ADC1_Init+0x12c>)
 8000bf6:	f7ff fbe0 	bl	80003ba <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bfa:	bf00      	nop
 8000bfc:	3738      	adds	r7, #56	@ 0x38
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40010800 	.word	0x40010800
 8000c08:	40020000 	.word	0x40020000
 8000c0c:	40012400 	.word	0x40012400
 8000c10:	02300001 	.word	0x02300001

08000c14 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b096      	sub	sp, #88	@ 0x58
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c1a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
 8000c22:	605a      	str	r2, [r3, #4]
 8000c24:	609a      	str	r2, [r3, #8]
 8000c26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c28:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
 8000c3a:	605a      	str	r2, [r3, #4]
 8000c3c:	609a      	str	r2, [r3, #8]
 8000c3e:	60da      	str	r2, [r3, #12]
 8000c40:	611a      	str	r2, [r3, #16]
 8000c42:	615a      	str	r2, [r3, #20]
 8000c44:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c46:	1d3b      	adds	r3, r7, #4
 8000c48:	2220      	movs	r2, #32
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f002 f879 	bl	8002d44 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c52:	4b3e      	ldr	r3, [pc, #248]	@ (8000d4c <MX_TIM1_Init+0x138>)
 8000c54:	4a3e      	ldr	r2, [pc, #248]	@ (8000d50 <MX_TIM1_Init+0x13c>)
 8000c56:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000c58:	4b3c      	ldr	r3, [pc, #240]	@ (8000d4c <MX_TIM1_Init+0x138>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c5e:	4b3b      	ldr	r3, [pc, #236]	@ (8000d4c <MX_TIM1_Init+0x138>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000c64:	4b39      	ldr	r3, [pc, #228]	@ (8000d4c <MX_TIM1_Init+0x138>)
 8000c66:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c6a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c6c:	4b37      	ldr	r3, [pc, #220]	@ (8000d4c <MX_TIM1_Init+0x138>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c72:	4b36      	ldr	r3, [pc, #216]	@ (8000d4c <MX_TIM1_Init+0x138>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c78:	4b34      	ldr	r3, [pc, #208]	@ (8000d4c <MX_TIM1_Init+0x138>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c7e:	4833      	ldr	r0, [pc, #204]	@ (8000d4c <MX_TIM1_Init+0x138>)
 8000c80:	f000 fd62 	bl	8001748 <HAL_TIM_Base_Init>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000c8a:	f000 f9b5 	bl	8000ff8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c8e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c92:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c94:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000c98:	4619      	mov	r1, r3
 8000c9a:	482c      	ldr	r0, [pc, #176]	@ (8000d4c <MX_TIM1_Init+0x138>)
 8000c9c:	f000 febe 	bl	8001a1c <HAL_TIM_ConfigClockSource>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000ca6:	f000 f9a7 	bl	8000ff8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000caa:	4828      	ldr	r0, [pc, #160]	@ (8000d4c <MX_TIM1_Init+0x138>)
 8000cac:	f000 fd9b 	bl	80017e6 <HAL_TIM_PWM_Init>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000cb6:	f000 f99f 	bl	8000ff8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000cc2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4820      	ldr	r0, [pc, #128]	@ (8000d4c <MX_TIM1_Init+0x138>)
 8000cca:	f001 f9ef 	bl	80020ac <HAL_TIMEx_MasterConfigSynchronization>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000cd4:	f000 f990 	bl	8000ff8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cd8:	2360      	movs	r3, #96	@ 0x60
 8000cda:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000cec:	2300      	movs	r3, #0
 8000cee:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cf4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4813      	ldr	r0, [pc, #76]	@ (8000d4c <MX_TIM1_Init+0x138>)
 8000cfe:	f000 fdcb 	bl	8001898 <HAL_TIM_PWM_ConfigChannel>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000d08:	f000 f976 	bl	8000ff8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d10:	2300      	movs	r3, #0
 8000d12:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d14:	2300      	movs	r3, #0
 8000d16:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d20:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d24:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d26:	2300      	movs	r3, #0
 8000d28:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d2a:	1d3b      	adds	r3, r7, #4
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4807      	ldr	r0, [pc, #28]	@ (8000d4c <MX_TIM1_Init+0x138>)
 8000d30:	f001 fa1a 	bl	8002168 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000d3a:	f000 f95d 	bl	8000ff8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000d3e:	4803      	ldr	r0, [pc, #12]	@ (8000d4c <MX_TIM1_Init+0x138>)
 8000d40:	f000 f9b0 	bl	80010a4 <HAL_TIM_MspPostInit>

}
 8000d44:	bf00      	nop
 8000d46:	3758      	adds	r7, #88	@ 0x58
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	20000028 	.word	0x20000028
 8000d50:	40012c00 	.word	0x40012c00

08000d54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b086      	sub	sp, #24
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000d5a:	1d3b      	adds	r3, r7, #4
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8000d68:	2001      	movs	r0, #1
 8000d6a:	f7ff fc39 	bl	80005e0 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 59;
 8000d6e:	233b      	movs	r3, #59	@ 0x3b
 8000d70:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000d72:	2300      	movs	r3, #0
 8000d74:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 65535;
 8000d76:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d7a:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8000d80:	1d3b      	adds	r3, r7, #4
 8000d82:	4619      	mov	r1, r3
 8000d84:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000d88:	f001 fe7a 	bl	8002a80 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8000d8c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000d90:	f7ff fd66 	bl	8000860 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8000d94:	2100      	movs	r1, #0
 8000d96:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000d9a:	f7ff fd70 	bl	800087e <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8000d9e:	2100      	movs	r1, #0
 8000da0:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000da4:	f7ff fd7f 	bl	80008a6 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8000da8:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000dac:	f7ff fd8d 	bl	80008ca <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000db0:	bf00      	nop
 8000db2:	3718      	adds	r7, #24
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b08c      	sub	sp, #48	@ 0x30
 8000dbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000dbe:	f107 0314 	add.w	r3, r7, #20
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	605a      	str	r2, [r3, #4]
 8000dc8:	609a      	str	r2, [r3, #8]
 8000dca:	60da      	str	r2, [r3, #12]
 8000dcc:	611a      	str	r2, [r3, #16]
 8000dce:	615a      	str	r2, [r3, #20]
 8000dd0:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd2:	463b      	mov	r3, r7
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
 8000dde:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8000de0:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000de4:	f7ff fc14 	bl	8000610 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8000de8:	2004      	movs	r0, #4
 8000dea:	f7ff fc11 	bl	8000610 <LL_APB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8000dee:	4b1a      	ldr	r3, [pc, #104]	@ (8000e58 <MX_USART1_UART_Init+0xa0>)
 8000df0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000df2:	2309      	movs	r3, #9
 8000df4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000df6:	2303      	movs	r3, #3
 8000df8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfe:	463b      	mov	r3, r7
 8000e00:	4619      	mov	r1, r3
 8000e02:	4816      	ldr	r0, [pc, #88]	@ (8000e5c <MX_USART1_UART_Init+0xa4>)
 8000e04:	f001 fc8d 	bl	8002722 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8000e08:	4b15      	ldr	r3, [pc, #84]	@ (8000e60 <MX_USART1_UART_Init+0xa8>)
 8000e0a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8000e0c:	2304      	movs	r3, #4
 8000e0e:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e10:	463b      	mov	r3, r7
 8000e12:	4619      	mov	r1, r3
 8000e14:	4811      	ldr	r0, [pc, #68]	@ (8000e5c <MX_USART1_UART_Init+0xa4>)
 8000e16:	f001 fc84 	bl	8002722 <LL_GPIO_Init>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000e1a:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000e1e:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000e20:	2300      	movs	r3, #0
 8000e22:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000e24:	2300      	movs	r3, #0
 8000e26:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000e2c:	230c      	movs	r3, #12
 8000e2e:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000e30:	2300      	movs	r3, #0
 8000e32:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000e34:	2300      	movs	r3, #0
 8000e36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_USART_Init(USART1, &USART_InitStruct);
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4809      	ldr	r0, [pc, #36]	@ (8000e64 <MX_USART1_UART_Init+0xac>)
 8000e40:	f001 ff12 	bl	8002c68 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8000e44:	4807      	ldr	r0, [pc, #28]	@ (8000e64 <MX_USART1_UART_Init+0xac>)
 8000e46:	f7ff fd5e 	bl	8000906 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8000e4a:	4806      	ldr	r0, [pc, #24]	@ (8000e64 <MX_USART1_UART_Init+0xac>)
 8000e4c:	f7ff fd4c 	bl	80008e8 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e50:	bf00      	nop
 8000e52:	3730      	adds	r7, #48	@ 0x30
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	04020002 	.word	0x04020002
 8000e5c:	40010800 	.word	0x40010800
 8000e60:	04040004 	.word	0x04040004
 8000e64:	40013800 	.word	0x40013800

08000e68 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b08c      	sub	sp, #48	@ 0x30
 8000e6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000e6e:	f107 0314 	add.w	r3, r7, #20
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	605a      	str	r2, [r3, #4]
 8000e78:	609a      	str	r2, [r3, #8]
 8000e7a:	60da      	str	r2, [r3, #12]
 8000e7c:	611a      	str	r2, [r3, #16]
 8000e7e:	615a      	str	r2, [r3, #20]
 8000e80:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e82:	463b      	mov	r3, r7
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
 8000e8e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000e90:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8000e94:	f7ff fba4 	bl	80005e0 <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8000e98:	2004      	movs	r0, #4
 8000e9a:	f7ff fbb9 	bl	8000610 <LL_APB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8000e9e:	f240 4304 	movw	r3, #1028	@ 0x404
 8000ea2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000ea4:	2309      	movs	r3, #9
 8000ea6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb0:	463b      	mov	r3, r7
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4815      	ldr	r0, [pc, #84]	@ (8000f0c <MX_USART2_UART_Init+0xa4>)
 8000eb6:	f001 fc34 	bl	8002722 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000eba:	f640 0308 	movw	r3, #2056	@ 0x808
 8000ebe:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8000ec0:	2304      	movs	r3, #4
 8000ec2:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec4:	463b      	mov	r3, r7
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4810      	ldr	r0, [pc, #64]	@ (8000f0c <MX_USART2_UART_Init+0xa4>)
 8000eca:	f001 fc2a 	bl	8002722 <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000ece:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000ed2:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000edc:	2300      	movs	r3, #0
 8000ede:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000ee0:	230c      	movs	r3, #12
 8000ee2:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_USART_Init(USART2, &USART_InitStruct);
 8000eec:	f107 0314 	add.w	r3, r7, #20
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4807      	ldr	r0, [pc, #28]	@ (8000f10 <MX_USART2_UART_Init+0xa8>)
 8000ef4:	f001 feb8 	bl	8002c68 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8000ef8:	4805      	ldr	r0, [pc, #20]	@ (8000f10 <MX_USART2_UART_Init+0xa8>)
 8000efa:	f7ff fd04 	bl	8000906 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8000efe:	4804      	ldr	r0, [pc, #16]	@ (8000f10 <MX_USART2_UART_Init+0xa8>)
 8000f00:	f7ff fcf2 	bl	80008e8 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f04:	bf00      	nop
 8000f06:	3730      	adds	r7, #48	@ 0x30
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	40010800 	.word	0x40010800
 8000f10:	40004400 	.word	0x40004400

08000f14 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f1a:	4b10      	ldr	r3, [pc, #64]	@ (8000f5c <MX_DMA_Init+0x48>)
 8000f1c:	695b      	ldr	r3, [r3, #20]
 8000f1e:	4a0f      	ldr	r2, [pc, #60]	@ (8000f5c <MX_DMA_Init+0x48>)
 8000f20:	f043 0301 	orr.w	r3, r3, #1
 8000f24:	6153      	str	r3, [r2, #20]
 8000f26:	4b0d      	ldr	r3, [pc, #52]	@ (8000f5c <MX_DMA_Init+0x48>)
 8000f28:	695b      	ldr	r3, [r3, #20]
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	607b      	str	r3, [r7, #4]
 8000f30:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8000f32:	f7ff f987 	bl	8000244 <__NVIC_GetPriorityGrouping>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2200      	movs	r2, #0
 8000f3a:	2101      	movs	r1, #1
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff f9d5 	bl	80002ec <NVIC_EncodePriority>
 8000f42:	4603      	mov	r3, r0
 8000f44:	4619      	mov	r1, r3
 8000f46:	200b      	movs	r0, #11
 8000f48:	f7ff f9a6 	bl	8000298 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000f4c:	200b      	movs	r0, #11
 8000f4e:	f7ff f987 	bl	8000260 <__NVIC_EnableIRQ>

}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40021000 	.word	0x40021000

08000f60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b088      	sub	sp, #32
 8000f64:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000f66:	f107 0318 	add.w	r3, r7, #24
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f70:	1d3b      	adds	r3, r7, #4
 8000f72:	2200      	movs	r2, #0
 8000f74:	601a      	str	r2, [r3, #0]
 8000f76:	605a      	str	r2, [r3, #4]
 8000f78:	609a      	str	r2, [r3, #8]
 8000f7a:	60da      	str	r2, [r3, #12]
 8000f7c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 8000f7e:	2020      	movs	r0, #32
 8000f80:	f7ff fb46 	bl	8000610 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8000f84:	2004      	movs	r0, #4
 8000f86:	f7ff fb43 	bl	8000610 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8000f8a:	2008      	movs	r0, #8
 8000f8c:	f7ff fb40 	bl	8000610 <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LED_1_Pin|LED_2_Pin|LED_3_Pin);
 8000f90:	f240 7107 	movw	r1, #1799	@ 0x707
 8000f94:	4815      	ldr	r0, [pc, #84]	@ (8000fec <MX_GPIO_Init+0x8c>)
 8000f96:	f7ff fcfd 	bl	8000994 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTA, LL_GPIO_AF_EXTI_LINE4);
 8000f9a:	4915      	ldr	r1, [pc, #84]	@ (8000ff0 <MX_GPIO_Init+0x90>)
 8000f9c:	2000      	movs	r0, #0
 8000f9e:	f7ff fd09 	bl	80009b4 <LL_GPIO_AF_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_4;
 8000fa2:	2310      	movs	r3, #16
 8000fa4:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000faa:	2300      	movs	r3, #0
 8000fac:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000fb2:	f107 0318 	add.w	r3, r7, #24
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f001 fa7c 	bl	80024b4 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_4, LL_GPIO_MODE_FLOATING);
 8000fbc:	2204      	movs	r2, #4
 8000fbe:	f241 0110 	movw	r1, #4112	@ 0x1010
 8000fc2:	480c      	ldr	r0, [pc, #48]	@ (8000ff4 <MX_GPIO_Init+0x94>)
 8000fc4:	f7ff fcb4 	bl	8000930 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin;
 8000fc8:	f240 7307 	movw	r3, #1799	@ 0x707
 8000fcc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fda:	1d3b      	adds	r3, r7, #4
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4803      	ldr	r0, [pc, #12]	@ (8000fec <MX_GPIO_Init+0x8c>)
 8000fe0:	f001 fb9f 	bl	8002722 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fe4:	bf00      	nop
 8000fe6:	3720      	adds	r7, #32
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40010c00 	.word	0x40010c00
 8000ff0:	000f0001 	.word	0x000f0001
 8000ff4:	40010800 	.word	0x40010800

08000ff8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000ffc:	b672      	cpsid	i
}
 8000ffe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001000:	bf00      	nop
 8001002:	e7fd      	b.n	8001000 <Error_Handler+0x8>

08001004 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001004:	b480      	push	{r7}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800100a:	4b15      	ldr	r3, [pc, #84]	@ (8001060 <HAL_MspInit+0x5c>)
 800100c:	699b      	ldr	r3, [r3, #24]
 800100e:	4a14      	ldr	r2, [pc, #80]	@ (8001060 <HAL_MspInit+0x5c>)
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	6193      	str	r3, [r2, #24]
 8001016:	4b12      	ldr	r3, [pc, #72]	@ (8001060 <HAL_MspInit+0x5c>)
 8001018:	699b      	ldr	r3, [r3, #24]
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	60bb      	str	r3, [r7, #8]
 8001020:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001022:	4b0f      	ldr	r3, [pc, #60]	@ (8001060 <HAL_MspInit+0x5c>)
 8001024:	69db      	ldr	r3, [r3, #28]
 8001026:	4a0e      	ldr	r2, [pc, #56]	@ (8001060 <HAL_MspInit+0x5c>)
 8001028:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800102c:	61d3      	str	r3, [r2, #28]
 800102e:	4b0c      	ldr	r3, [pc, #48]	@ (8001060 <HAL_MspInit+0x5c>)
 8001030:	69db      	ldr	r3, [r3, #28]
 8001032:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001036:	607b      	str	r3, [r7, #4]
 8001038:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800103a:	4b0a      	ldr	r3, [pc, #40]	@ (8001064 <HAL_MspInit+0x60>)
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	4a04      	ldr	r2, [pc, #16]	@ (8001064 <HAL_MspInit+0x60>)
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001056:	bf00      	nop
 8001058:	3714      	adds	r7, #20
 800105a:	46bd      	mov	sp, r7
 800105c:	bc80      	pop	{r7}
 800105e:	4770      	bx	lr
 8001060:	40021000 	.word	0x40021000
 8001064:	40010000 	.word	0x40010000

08001068 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a09      	ldr	r2, [pc, #36]	@ (800109c <HAL_TIM_Base_MspInit+0x34>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d10b      	bne.n	8001092 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800107a:	4b09      	ldr	r3, [pc, #36]	@ (80010a0 <HAL_TIM_Base_MspInit+0x38>)
 800107c:	699b      	ldr	r3, [r3, #24]
 800107e:	4a08      	ldr	r2, [pc, #32]	@ (80010a0 <HAL_TIM_Base_MspInit+0x38>)
 8001080:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001084:	6193      	str	r3, [r2, #24]
 8001086:	4b06      	ldr	r3, [pc, #24]	@ (80010a0 <HAL_TIM_Base_MspInit+0x38>)
 8001088:	699b      	ldr	r3, [r3, #24]
 800108a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001092:	bf00      	nop
 8001094:	3714      	adds	r7, #20
 8001096:	46bd      	mov	sp, r7
 8001098:	bc80      	pop	{r7}
 800109a:	4770      	bx	lr
 800109c:	40012c00 	.word	0x40012c00
 80010a0:	40021000 	.word	0x40021000

080010a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b088      	sub	sp, #32
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ac:	f107 0310 	add.w	r3, r7, #16
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a10      	ldr	r2, [pc, #64]	@ (8001100 <HAL_TIM_MspPostInit+0x5c>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d118      	bne.n	80010f6 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001104 <HAL_TIM_MspPostInit+0x60>)
 80010c6:	699b      	ldr	r3, [r3, #24]
 80010c8:	4a0e      	ldr	r2, [pc, #56]	@ (8001104 <HAL_TIM_MspPostInit+0x60>)
 80010ca:	f043 0304 	orr.w	r3, r3, #4
 80010ce:	6193      	str	r3, [r2, #24]
 80010d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001104 <HAL_TIM_MspPostInit+0x60>)
 80010d2:	699b      	ldr	r3, [r3, #24]
 80010d4:	f003 0304 	and.w	r3, r3, #4
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80010dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e2:	2302      	movs	r3, #2
 80010e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e6:	2302      	movs	r3, #2
 80010e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ea:	f107 0310 	add.w	r3, r7, #16
 80010ee:	4619      	mov	r1, r3
 80010f0:	4805      	ldr	r0, [pc, #20]	@ (8001108 <HAL_TIM_MspPostInit+0x64>)
 80010f2:	f000 f9a5 	bl	8001440 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80010f6:	bf00      	nop
 80010f8:	3720      	adds	r7, #32
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40012c00 	.word	0x40012c00
 8001104:	40021000 	.word	0x40021000
 8001108:	40010800 	.word	0x40010800

0800110c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001110:	bf00      	nop
 8001112:	e7fd      	b.n	8001110 <NMI_Handler+0x4>

08001114 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001118:	bf00      	nop
 800111a:	e7fd      	b.n	8001118 <HardFault_Handler+0x4>

0800111c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001120:	bf00      	nop
 8001122:	e7fd      	b.n	8001120 <MemManage_Handler+0x4>

08001124 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001128:	bf00      	nop
 800112a:	e7fd      	b.n	8001128 <BusFault_Handler+0x4>

0800112c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001130:	bf00      	nop
 8001132:	e7fd      	b.n	8001130 <UsageFault_Handler+0x4>

08001134 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001138:	bf00      	nop
 800113a:	46bd      	mov	sp, r7
 800113c:	bc80      	pop	{r7}
 800113e:	4770      	bx	lr

08001140 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001144:	bf00      	nop
 8001146:	46bd      	mov	sp, r7
 8001148:	bc80      	pop	{r7}
 800114a:	4770      	bx	lr

0800114c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001150:	bf00      	nop
 8001152:	46bd      	mov	sp, r7
 8001154:	bc80      	pop	{r7}
 8001156:	4770      	bx	lr

08001158 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800115c:	f000 f87a 	bl	8001254 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001160:	bf00      	nop
 8001162:	bd80      	pop	{r7, pc}

08001164 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001168:	bf00      	nop
 800116a:	46bd      	mov	sp, r7
 800116c:	bc80      	pop	{r7}
 800116e:	4770      	bx	lr

08001170 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	bc80      	pop	{r7}
 800117a:	4770      	bx	lr

0800117c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800117c:	f7ff fff8 	bl	8001170 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001180:	480b      	ldr	r0, [pc, #44]	@ (80011b0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001182:	490c      	ldr	r1, [pc, #48]	@ (80011b4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001184:	4a0c      	ldr	r2, [pc, #48]	@ (80011b8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001186:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001188:	e002      	b.n	8001190 <LoopCopyDataInit>

0800118a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800118a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800118c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800118e:	3304      	adds	r3, #4

08001190 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001190:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001192:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001194:	d3f9      	bcc.n	800118a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001196:	4a09      	ldr	r2, [pc, #36]	@ (80011bc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001198:	4c09      	ldr	r4, [pc, #36]	@ (80011c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800119a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800119c:	e001      	b.n	80011a2 <LoopFillZerobss>

0800119e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800119e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011a0:	3204      	adds	r2, #4

080011a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011a4:	d3fb      	bcc.n	800119e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011a6:	f001 fdd5 	bl	8002d54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011aa:	f7ff fc31 	bl	8000a10 <main>
  bx lr
 80011ae:	4770      	bx	lr
  ldr r0, =_sdata
 80011b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011b4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80011b8:	08002ddc 	.word	0x08002ddc
  ldr r2, =_sbss
 80011bc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80011c0:	20000194 	.word	0x20000194

080011c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011c4:	e7fe      	b.n	80011c4 <ADC1_2_IRQHandler>
	...

080011c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011cc:	4b08      	ldr	r3, [pc, #32]	@ (80011f0 <HAL_Init+0x28>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a07      	ldr	r2, [pc, #28]	@ (80011f0 <HAL_Init+0x28>)
 80011d2:	f043 0310 	orr.w	r3, r3, #16
 80011d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011d8:	2003      	movs	r0, #3
 80011da:	f000 f8fd 	bl	80013d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011de:	200f      	movs	r0, #15
 80011e0:	f000 f808 	bl	80011f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011e4:	f7ff ff0e 	bl	8001004 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40022000 	.word	0x40022000

080011f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011fc:	4b12      	ldr	r3, [pc, #72]	@ (8001248 <HAL_InitTick+0x54>)
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	4b12      	ldr	r3, [pc, #72]	@ (800124c <HAL_InitTick+0x58>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	4619      	mov	r1, r3
 8001206:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800120a:	fbb3 f3f1 	udiv	r3, r3, r1
 800120e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001212:	4618      	mov	r0, r3
 8001214:	f000 f907 	bl	8001426 <HAL_SYSTICK_Config>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e00e      	b.n	8001240 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2b0f      	cmp	r3, #15
 8001226:	d80a      	bhi.n	800123e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001228:	2200      	movs	r2, #0
 800122a:	6879      	ldr	r1, [r7, #4]
 800122c:	f04f 30ff 	mov.w	r0, #4294967295
 8001230:	f000 f8dd 	bl	80013ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001234:	4a06      	ldr	r2, [pc, #24]	@ (8001250 <HAL_InitTick+0x5c>)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800123a:	2300      	movs	r3, #0
 800123c:	e000      	b.n	8001240 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
}
 8001240:	4618      	mov	r0, r3
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	20000000 	.word	0x20000000
 800124c:	20000008 	.word	0x20000008
 8001250:	20000004 	.word	0x20000004

08001254 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001258:	4b05      	ldr	r3, [pc, #20]	@ (8001270 <HAL_IncTick+0x1c>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	461a      	mov	r2, r3
 800125e:	4b05      	ldr	r3, [pc, #20]	@ (8001274 <HAL_IncTick+0x20>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4413      	add	r3, r2
 8001264:	4a03      	ldr	r2, [pc, #12]	@ (8001274 <HAL_IncTick+0x20>)
 8001266:	6013      	str	r3, [r2, #0]
}
 8001268:	bf00      	nop
 800126a:	46bd      	mov	sp, r7
 800126c:	bc80      	pop	{r7}
 800126e:	4770      	bx	lr
 8001270:	20000008 	.word	0x20000008
 8001274:	20000190 	.word	0x20000190

08001278 <__NVIC_SetPriorityGrouping>:
{
 8001278:	b480      	push	{r7}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f003 0307 	and.w	r3, r3, #7
 8001286:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001288:	4b0c      	ldr	r3, [pc, #48]	@ (80012bc <__NVIC_SetPriorityGrouping+0x44>)
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800128e:	68ba      	ldr	r2, [r7, #8]
 8001290:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001294:	4013      	ands	r3, r2
 8001296:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012aa:	4a04      	ldr	r2, [pc, #16]	@ (80012bc <__NVIC_SetPriorityGrouping+0x44>)
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	60d3      	str	r3, [r2, #12]
}
 80012b0:	bf00      	nop
 80012b2:	3714      	adds	r7, #20
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bc80      	pop	{r7}
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	e000ed00 	.word	0xe000ed00

080012c0 <__NVIC_GetPriorityGrouping>:
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012c4:	4b04      	ldr	r3, [pc, #16]	@ (80012d8 <__NVIC_GetPriorityGrouping+0x18>)
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	0a1b      	lsrs	r3, r3, #8
 80012ca:	f003 0307 	and.w	r3, r3, #7
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bc80      	pop	{r7}
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	e000ed00 	.word	0xe000ed00

080012dc <__NVIC_SetPriority>:
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	6039      	str	r1, [r7, #0]
 80012e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	db0a      	blt.n	8001306 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	b2da      	uxtb	r2, r3
 80012f4:	490c      	ldr	r1, [pc, #48]	@ (8001328 <__NVIC_SetPriority+0x4c>)
 80012f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fa:	0112      	lsls	r2, r2, #4
 80012fc:	b2d2      	uxtb	r2, r2
 80012fe:	440b      	add	r3, r1
 8001300:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001304:	e00a      	b.n	800131c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	b2da      	uxtb	r2, r3
 800130a:	4908      	ldr	r1, [pc, #32]	@ (800132c <__NVIC_SetPriority+0x50>)
 800130c:	79fb      	ldrb	r3, [r7, #7]
 800130e:	f003 030f 	and.w	r3, r3, #15
 8001312:	3b04      	subs	r3, #4
 8001314:	0112      	lsls	r2, r2, #4
 8001316:	b2d2      	uxtb	r2, r2
 8001318:	440b      	add	r3, r1
 800131a:	761a      	strb	r2, [r3, #24]
}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	bc80      	pop	{r7}
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	e000e100 	.word	0xe000e100
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <NVIC_EncodePriority>:
{
 8001330:	b480      	push	{r7}
 8001332:	b089      	sub	sp, #36	@ 0x24
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	f003 0307 	and.w	r3, r3, #7
 8001342:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	f1c3 0307 	rsb	r3, r3, #7
 800134a:	2b04      	cmp	r3, #4
 800134c:	bf28      	it	cs
 800134e:	2304      	movcs	r3, #4
 8001350:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	3304      	adds	r3, #4
 8001356:	2b06      	cmp	r3, #6
 8001358:	d902      	bls.n	8001360 <NVIC_EncodePriority+0x30>
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	3b03      	subs	r3, #3
 800135e:	e000      	b.n	8001362 <NVIC_EncodePriority+0x32>
 8001360:	2300      	movs	r3, #0
 8001362:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001364:	f04f 32ff 	mov.w	r2, #4294967295
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	43da      	mvns	r2, r3
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	401a      	ands	r2, r3
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001378:	f04f 31ff 	mov.w	r1, #4294967295
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	fa01 f303 	lsl.w	r3, r1, r3
 8001382:	43d9      	mvns	r1, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001388:	4313      	orrs	r3, r2
}
 800138a:	4618      	mov	r0, r3
 800138c:	3724      	adds	r7, #36	@ 0x24
 800138e:	46bd      	mov	sp, r7
 8001390:	bc80      	pop	{r7}
 8001392:	4770      	bx	lr

08001394 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	3b01      	subs	r3, #1
 80013a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013a4:	d301      	bcc.n	80013aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013a6:	2301      	movs	r3, #1
 80013a8:	e00f      	b.n	80013ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013aa:	4a0a      	ldr	r2, [pc, #40]	@ (80013d4 <SysTick_Config+0x40>)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3b01      	subs	r3, #1
 80013b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013b2:	210f      	movs	r1, #15
 80013b4:	f04f 30ff 	mov.w	r0, #4294967295
 80013b8:	f7ff ff90 	bl	80012dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013bc:	4b05      	ldr	r3, [pc, #20]	@ (80013d4 <SysTick_Config+0x40>)
 80013be:	2200      	movs	r2, #0
 80013c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013c2:	4b04      	ldr	r3, [pc, #16]	@ (80013d4 <SysTick_Config+0x40>)
 80013c4:	2207      	movs	r2, #7
 80013c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	e000e010 	.word	0xe000e010

080013d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f7ff ff49 	bl	8001278 <__NVIC_SetPriorityGrouping>
}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b086      	sub	sp, #24
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	4603      	mov	r3, r0
 80013f6:	60b9      	str	r1, [r7, #8]
 80013f8:	607a      	str	r2, [r7, #4]
 80013fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001400:	f7ff ff5e 	bl	80012c0 <__NVIC_GetPriorityGrouping>
 8001404:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	68b9      	ldr	r1, [r7, #8]
 800140a:	6978      	ldr	r0, [r7, #20]
 800140c:	f7ff ff90 	bl	8001330 <NVIC_EncodePriority>
 8001410:	4602      	mov	r2, r0
 8001412:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001416:	4611      	mov	r1, r2
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff ff5f 	bl	80012dc <__NVIC_SetPriority>
}
 800141e:	bf00      	nop
 8001420:	3718      	adds	r7, #24
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	b082      	sub	sp, #8
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f7ff ffb0 	bl	8001394 <SysTick_Config>
 8001434:	4603      	mov	r3, r0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
	...

08001440 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001440:	b480      	push	{r7}
 8001442:	b08b      	sub	sp, #44	@ 0x2c
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800144a:	2300      	movs	r3, #0
 800144c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800144e:	2300      	movs	r3, #0
 8001450:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001452:	e169      	b.n	8001728 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001454:	2201      	movs	r2, #1
 8001456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	69fa      	ldr	r2, [r7, #28]
 8001464:	4013      	ands	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	429a      	cmp	r2, r3
 800146e:	f040 8158 	bne.w	8001722 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	4a9a      	ldr	r2, [pc, #616]	@ (80016e0 <HAL_GPIO_Init+0x2a0>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d05e      	beq.n	800153a <HAL_GPIO_Init+0xfa>
 800147c:	4a98      	ldr	r2, [pc, #608]	@ (80016e0 <HAL_GPIO_Init+0x2a0>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d875      	bhi.n	800156e <HAL_GPIO_Init+0x12e>
 8001482:	4a98      	ldr	r2, [pc, #608]	@ (80016e4 <HAL_GPIO_Init+0x2a4>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d058      	beq.n	800153a <HAL_GPIO_Init+0xfa>
 8001488:	4a96      	ldr	r2, [pc, #600]	@ (80016e4 <HAL_GPIO_Init+0x2a4>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d86f      	bhi.n	800156e <HAL_GPIO_Init+0x12e>
 800148e:	4a96      	ldr	r2, [pc, #600]	@ (80016e8 <HAL_GPIO_Init+0x2a8>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d052      	beq.n	800153a <HAL_GPIO_Init+0xfa>
 8001494:	4a94      	ldr	r2, [pc, #592]	@ (80016e8 <HAL_GPIO_Init+0x2a8>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d869      	bhi.n	800156e <HAL_GPIO_Init+0x12e>
 800149a:	4a94      	ldr	r2, [pc, #592]	@ (80016ec <HAL_GPIO_Init+0x2ac>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d04c      	beq.n	800153a <HAL_GPIO_Init+0xfa>
 80014a0:	4a92      	ldr	r2, [pc, #584]	@ (80016ec <HAL_GPIO_Init+0x2ac>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d863      	bhi.n	800156e <HAL_GPIO_Init+0x12e>
 80014a6:	4a92      	ldr	r2, [pc, #584]	@ (80016f0 <HAL_GPIO_Init+0x2b0>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d046      	beq.n	800153a <HAL_GPIO_Init+0xfa>
 80014ac:	4a90      	ldr	r2, [pc, #576]	@ (80016f0 <HAL_GPIO_Init+0x2b0>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d85d      	bhi.n	800156e <HAL_GPIO_Init+0x12e>
 80014b2:	2b12      	cmp	r3, #18
 80014b4:	d82a      	bhi.n	800150c <HAL_GPIO_Init+0xcc>
 80014b6:	2b12      	cmp	r3, #18
 80014b8:	d859      	bhi.n	800156e <HAL_GPIO_Init+0x12e>
 80014ba:	a201      	add	r2, pc, #4	@ (adr r2, 80014c0 <HAL_GPIO_Init+0x80>)
 80014bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014c0:	0800153b 	.word	0x0800153b
 80014c4:	08001515 	.word	0x08001515
 80014c8:	08001527 	.word	0x08001527
 80014cc:	08001569 	.word	0x08001569
 80014d0:	0800156f 	.word	0x0800156f
 80014d4:	0800156f 	.word	0x0800156f
 80014d8:	0800156f 	.word	0x0800156f
 80014dc:	0800156f 	.word	0x0800156f
 80014e0:	0800156f 	.word	0x0800156f
 80014e4:	0800156f 	.word	0x0800156f
 80014e8:	0800156f 	.word	0x0800156f
 80014ec:	0800156f 	.word	0x0800156f
 80014f0:	0800156f 	.word	0x0800156f
 80014f4:	0800156f 	.word	0x0800156f
 80014f8:	0800156f 	.word	0x0800156f
 80014fc:	0800156f 	.word	0x0800156f
 8001500:	0800156f 	.word	0x0800156f
 8001504:	0800151d 	.word	0x0800151d
 8001508:	08001531 	.word	0x08001531
 800150c:	4a79      	ldr	r2, [pc, #484]	@ (80016f4 <HAL_GPIO_Init+0x2b4>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d013      	beq.n	800153a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001512:	e02c      	b.n	800156e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	623b      	str	r3, [r7, #32]
          break;
 800151a:	e029      	b.n	8001570 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	3304      	adds	r3, #4
 8001522:	623b      	str	r3, [r7, #32]
          break;
 8001524:	e024      	b.n	8001570 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	68db      	ldr	r3, [r3, #12]
 800152a:	3308      	adds	r3, #8
 800152c:	623b      	str	r3, [r7, #32]
          break;
 800152e:	e01f      	b.n	8001570 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	330c      	adds	r3, #12
 8001536:	623b      	str	r3, [r7, #32]
          break;
 8001538:	e01a      	b.n	8001570 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d102      	bne.n	8001548 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001542:	2304      	movs	r3, #4
 8001544:	623b      	str	r3, [r7, #32]
          break;
 8001546:	e013      	b.n	8001570 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	2b01      	cmp	r3, #1
 800154e:	d105      	bne.n	800155c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001550:	2308      	movs	r3, #8
 8001552:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	69fa      	ldr	r2, [r7, #28]
 8001558:	611a      	str	r2, [r3, #16]
          break;
 800155a:	e009      	b.n	8001570 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800155c:	2308      	movs	r3, #8
 800155e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	69fa      	ldr	r2, [r7, #28]
 8001564:	615a      	str	r2, [r3, #20]
          break;
 8001566:	e003      	b.n	8001570 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001568:	2300      	movs	r3, #0
 800156a:	623b      	str	r3, [r7, #32]
          break;
 800156c:	e000      	b.n	8001570 <HAL_GPIO_Init+0x130>
          break;
 800156e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	2bff      	cmp	r3, #255	@ 0xff
 8001574:	d801      	bhi.n	800157a <HAL_GPIO_Init+0x13a>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	e001      	b.n	800157e <HAL_GPIO_Init+0x13e>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	3304      	adds	r3, #4
 800157e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	2bff      	cmp	r3, #255	@ 0xff
 8001584:	d802      	bhi.n	800158c <HAL_GPIO_Init+0x14c>
 8001586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	e002      	b.n	8001592 <HAL_GPIO_Init+0x152>
 800158c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800158e:	3b08      	subs	r3, #8
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	210f      	movs	r1, #15
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	fa01 f303 	lsl.w	r3, r1, r3
 80015a0:	43db      	mvns	r3, r3
 80015a2:	401a      	ands	r2, r3
 80015a4:	6a39      	ldr	r1, [r7, #32]
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	fa01 f303 	lsl.w	r3, r1, r3
 80015ac:	431a      	orrs	r2, r3
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	f000 80b1 	beq.w	8001722 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015c0:	4b4d      	ldr	r3, [pc, #308]	@ (80016f8 <HAL_GPIO_Init+0x2b8>)
 80015c2:	699b      	ldr	r3, [r3, #24]
 80015c4:	4a4c      	ldr	r2, [pc, #304]	@ (80016f8 <HAL_GPIO_Init+0x2b8>)
 80015c6:	f043 0301 	orr.w	r3, r3, #1
 80015ca:	6193      	str	r3, [r2, #24]
 80015cc:	4b4a      	ldr	r3, [pc, #296]	@ (80016f8 <HAL_GPIO_Init+0x2b8>)
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	f003 0301 	and.w	r3, r3, #1
 80015d4:	60bb      	str	r3, [r7, #8]
 80015d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015d8:	4a48      	ldr	r2, [pc, #288]	@ (80016fc <HAL_GPIO_Init+0x2bc>)
 80015da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015dc:	089b      	lsrs	r3, r3, #2
 80015de:	3302      	adds	r3, #2
 80015e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015e8:	f003 0303 	and.w	r3, r3, #3
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	220f      	movs	r2, #15
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	43db      	mvns	r3, r3
 80015f6:	68fa      	ldr	r2, [r7, #12]
 80015f8:	4013      	ands	r3, r2
 80015fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4a40      	ldr	r2, [pc, #256]	@ (8001700 <HAL_GPIO_Init+0x2c0>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d013      	beq.n	800162c <HAL_GPIO_Init+0x1ec>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4a3f      	ldr	r2, [pc, #252]	@ (8001704 <HAL_GPIO_Init+0x2c4>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d00d      	beq.n	8001628 <HAL_GPIO_Init+0x1e8>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4a3e      	ldr	r2, [pc, #248]	@ (8001708 <HAL_GPIO_Init+0x2c8>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d007      	beq.n	8001624 <HAL_GPIO_Init+0x1e4>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4a3d      	ldr	r2, [pc, #244]	@ (800170c <HAL_GPIO_Init+0x2cc>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d101      	bne.n	8001620 <HAL_GPIO_Init+0x1e0>
 800161c:	2303      	movs	r3, #3
 800161e:	e006      	b.n	800162e <HAL_GPIO_Init+0x1ee>
 8001620:	2304      	movs	r3, #4
 8001622:	e004      	b.n	800162e <HAL_GPIO_Init+0x1ee>
 8001624:	2302      	movs	r3, #2
 8001626:	e002      	b.n	800162e <HAL_GPIO_Init+0x1ee>
 8001628:	2301      	movs	r3, #1
 800162a:	e000      	b.n	800162e <HAL_GPIO_Init+0x1ee>
 800162c:	2300      	movs	r3, #0
 800162e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001630:	f002 0203 	and.w	r2, r2, #3
 8001634:	0092      	lsls	r2, r2, #2
 8001636:	4093      	lsls	r3, r2
 8001638:	68fa      	ldr	r2, [r7, #12]
 800163a:	4313      	orrs	r3, r2
 800163c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800163e:	492f      	ldr	r1, [pc, #188]	@ (80016fc <HAL_GPIO_Init+0x2bc>)
 8001640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001642:	089b      	lsrs	r3, r3, #2
 8001644:	3302      	adds	r3, #2
 8001646:	68fa      	ldr	r2, [r7, #12]
 8001648:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d006      	beq.n	8001666 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001658:	4b2d      	ldr	r3, [pc, #180]	@ (8001710 <HAL_GPIO_Init+0x2d0>)
 800165a:	689a      	ldr	r2, [r3, #8]
 800165c:	492c      	ldr	r1, [pc, #176]	@ (8001710 <HAL_GPIO_Init+0x2d0>)
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	4313      	orrs	r3, r2
 8001662:	608b      	str	r3, [r1, #8]
 8001664:	e006      	b.n	8001674 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001666:	4b2a      	ldr	r3, [pc, #168]	@ (8001710 <HAL_GPIO_Init+0x2d0>)
 8001668:	689a      	ldr	r2, [r3, #8]
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	43db      	mvns	r3, r3
 800166e:	4928      	ldr	r1, [pc, #160]	@ (8001710 <HAL_GPIO_Init+0x2d0>)
 8001670:	4013      	ands	r3, r2
 8001672:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d006      	beq.n	800168e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001680:	4b23      	ldr	r3, [pc, #140]	@ (8001710 <HAL_GPIO_Init+0x2d0>)
 8001682:	68da      	ldr	r2, [r3, #12]
 8001684:	4922      	ldr	r1, [pc, #136]	@ (8001710 <HAL_GPIO_Init+0x2d0>)
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	4313      	orrs	r3, r2
 800168a:	60cb      	str	r3, [r1, #12]
 800168c:	e006      	b.n	800169c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800168e:	4b20      	ldr	r3, [pc, #128]	@ (8001710 <HAL_GPIO_Init+0x2d0>)
 8001690:	68da      	ldr	r2, [r3, #12]
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	43db      	mvns	r3, r3
 8001696:	491e      	ldr	r1, [pc, #120]	@ (8001710 <HAL_GPIO_Init+0x2d0>)
 8001698:	4013      	ands	r3, r2
 800169a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d006      	beq.n	80016b6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80016a8:	4b19      	ldr	r3, [pc, #100]	@ (8001710 <HAL_GPIO_Init+0x2d0>)
 80016aa:	685a      	ldr	r2, [r3, #4]
 80016ac:	4918      	ldr	r1, [pc, #96]	@ (8001710 <HAL_GPIO_Init+0x2d0>)
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	604b      	str	r3, [r1, #4]
 80016b4:	e006      	b.n	80016c4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016b6:	4b16      	ldr	r3, [pc, #88]	@ (8001710 <HAL_GPIO_Init+0x2d0>)
 80016b8:	685a      	ldr	r2, [r3, #4]
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	43db      	mvns	r3, r3
 80016be:	4914      	ldr	r1, [pc, #80]	@ (8001710 <HAL_GPIO_Init+0x2d0>)
 80016c0:	4013      	ands	r3, r2
 80016c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d021      	beq.n	8001714 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001710 <HAL_GPIO_Init+0x2d0>)
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	490e      	ldr	r1, [pc, #56]	@ (8001710 <HAL_GPIO_Init+0x2d0>)
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	4313      	orrs	r3, r2
 80016da:	600b      	str	r3, [r1, #0]
 80016dc:	e021      	b.n	8001722 <HAL_GPIO_Init+0x2e2>
 80016de:	bf00      	nop
 80016e0:	10320000 	.word	0x10320000
 80016e4:	10310000 	.word	0x10310000
 80016e8:	10220000 	.word	0x10220000
 80016ec:	10210000 	.word	0x10210000
 80016f0:	10120000 	.word	0x10120000
 80016f4:	10110000 	.word	0x10110000
 80016f8:	40021000 	.word	0x40021000
 80016fc:	40010000 	.word	0x40010000
 8001700:	40010800 	.word	0x40010800
 8001704:	40010c00 	.word	0x40010c00
 8001708:	40011000 	.word	0x40011000
 800170c:	40011400 	.word	0x40011400
 8001710:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001714:	4b0b      	ldr	r3, [pc, #44]	@ (8001744 <HAL_GPIO_Init+0x304>)
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	43db      	mvns	r3, r3
 800171c:	4909      	ldr	r1, [pc, #36]	@ (8001744 <HAL_GPIO_Init+0x304>)
 800171e:	4013      	ands	r3, r2
 8001720:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001724:	3301      	adds	r3, #1
 8001726:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800172e:	fa22 f303 	lsr.w	r3, r2, r3
 8001732:	2b00      	cmp	r3, #0
 8001734:	f47f ae8e 	bne.w	8001454 <HAL_GPIO_Init+0x14>
  }
}
 8001738:	bf00      	nop
 800173a:	bf00      	nop
 800173c:	372c      	adds	r7, #44	@ 0x2c
 800173e:	46bd      	mov	sp, r7
 8001740:	bc80      	pop	{r7}
 8001742:	4770      	bx	lr
 8001744:	40010400 	.word	0x40010400

08001748 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d101      	bne.n	800175a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e041      	b.n	80017de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001760:	b2db      	uxtb	r3, r3
 8001762:	2b00      	cmp	r3, #0
 8001764:	d106      	bne.n	8001774 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2200      	movs	r2, #0
 800176a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f7ff fc7a 	bl	8001068 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2202      	movs	r2, #2
 8001778:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	3304      	adds	r3, #4
 8001784:	4619      	mov	r1, r3
 8001786:	4610      	mov	r0, r2
 8001788:	f000 fa10 	bl	8001bac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2201      	movs	r2, #1
 8001790:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2201      	movs	r2, #1
 8001798:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2201      	movs	r2, #1
 80017a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2201      	movs	r2, #1
 80017a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2201      	movs	r2, #1
 80017b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2201      	movs	r2, #1
 80017b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2201      	movs	r2, #1
 80017c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2201      	movs	r2, #1
 80017c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2201      	movs	r2, #1
 80017d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2201      	movs	r2, #1
 80017d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b082      	sub	sp, #8
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d101      	bne.n	80017f8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e041      	b.n	800187c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	2b00      	cmp	r3, #0
 8001802:	d106      	bne.n	8001812 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2200      	movs	r2, #0
 8001808:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f000 f839 	bl	8001884 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2202      	movs	r2, #2
 8001816:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	3304      	adds	r3, #4
 8001822:	4619      	mov	r1, r3
 8001824:	4610      	mov	r0, r2
 8001826:	f000 f9c1 	bl	8001bac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2201      	movs	r2, #1
 800182e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2201      	movs	r2, #1
 8001836:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2201      	movs	r2, #1
 800183e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2201      	movs	r2, #1
 8001846:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2201      	movs	r2, #1
 800184e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2201      	movs	r2, #1
 8001856:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2201      	movs	r2, #1
 800185e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2201      	movs	r2, #1
 8001866:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2201      	movs	r2, #1
 800186e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2201      	movs	r2, #1
 8001876:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800187a:	2300      	movs	r3, #0
}
 800187c:	4618      	mov	r0, r3
 800187e:	3708      	adds	r7, #8
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800188c:	bf00      	nop
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	bc80      	pop	{r7}
 8001894:	4770      	bx	lr
	...

08001898 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018a4:	2300      	movs	r3, #0
 80018a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d101      	bne.n	80018b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80018b2:	2302      	movs	r3, #2
 80018b4:	e0ae      	b.n	8001a14 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	2201      	movs	r2, #1
 80018ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2b0c      	cmp	r3, #12
 80018c2:	f200 809f 	bhi.w	8001a04 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80018c6:	a201      	add	r2, pc, #4	@ (adr r2, 80018cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80018c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018cc:	08001901 	.word	0x08001901
 80018d0:	08001a05 	.word	0x08001a05
 80018d4:	08001a05 	.word	0x08001a05
 80018d8:	08001a05 	.word	0x08001a05
 80018dc:	08001941 	.word	0x08001941
 80018e0:	08001a05 	.word	0x08001a05
 80018e4:	08001a05 	.word	0x08001a05
 80018e8:	08001a05 	.word	0x08001a05
 80018ec:	08001983 	.word	0x08001983
 80018f0:	08001a05 	.word	0x08001a05
 80018f4:	08001a05 	.word	0x08001a05
 80018f8:	08001a05 	.word	0x08001a05
 80018fc:	080019c3 	.word	0x080019c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	68b9      	ldr	r1, [r7, #8]
 8001906:	4618      	mov	r0, r3
 8001908:	f000 f9b2 	bl	8001c70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	699a      	ldr	r2, [r3, #24]
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f042 0208 	orr.w	r2, r2, #8
 800191a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	699a      	ldr	r2, [r3, #24]
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f022 0204 	bic.w	r2, r2, #4
 800192a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	6999      	ldr	r1, [r3, #24]
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	691a      	ldr	r2, [r3, #16]
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	430a      	orrs	r2, r1
 800193c:	619a      	str	r2, [r3, #24]
      break;
 800193e:	e064      	b.n	8001a0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	68b9      	ldr	r1, [r7, #8]
 8001946:	4618      	mov	r0, r3
 8001948:	f000 f9f8 	bl	8001d3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	699a      	ldr	r2, [r3, #24]
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800195a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	699a      	ldr	r2, [r3, #24]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800196a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	6999      	ldr	r1, [r3, #24]
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	691b      	ldr	r3, [r3, #16]
 8001976:	021a      	lsls	r2, r3, #8
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	430a      	orrs	r2, r1
 800197e:	619a      	str	r2, [r3, #24]
      break;
 8001980:	e043      	b.n	8001a0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	68b9      	ldr	r1, [r7, #8]
 8001988:	4618      	mov	r0, r3
 800198a:	f000 fa41 	bl	8001e10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	69da      	ldr	r2, [r3, #28]
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f042 0208 	orr.w	r2, r2, #8
 800199c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	69da      	ldr	r2, [r3, #28]
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f022 0204 	bic.w	r2, r2, #4
 80019ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	69d9      	ldr	r1, [r3, #28]
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	691a      	ldr	r2, [r3, #16]
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	430a      	orrs	r2, r1
 80019be:	61da      	str	r2, [r3, #28]
      break;
 80019c0:	e023      	b.n	8001a0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	68b9      	ldr	r1, [r7, #8]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f000 fa8b 	bl	8001ee4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	69da      	ldr	r2, [r3, #28]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80019dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	69da      	ldr	r2, [r3, #28]
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80019ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	69d9      	ldr	r1, [r3, #28]
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	691b      	ldr	r3, [r3, #16]
 80019f8:	021a      	lsls	r2, r3, #8
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	430a      	orrs	r2, r1
 8001a00:	61da      	str	r2, [r3, #28]
      break;
 8001a02:	e002      	b.n	8001a0a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	75fb      	strb	r3, [r7, #23]
      break;
 8001a08:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001a12:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3718      	adds	r7, #24
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a26:	2300      	movs	r3, #0
 8001a28:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d101      	bne.n	8001a38 <HAL_TIM_ConfigClockSource+0x1c>
 8001a34:	2302      	movs	r3, #2
 8001a36:	e0b4      	b.n	8001ba2 <HAL_TIM_ConfigClockSource+0x186>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2202      	movs	r2, #2
 8001a44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001a56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001a5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	68ba      	ldr	r2, [r7, #8]
 8001a66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001a70:	d03e      	beq.n	8001af0 <HAL_TIM_ConfigClockSource+0xd4>
 8001a72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001a76:	f200 8087 	bhi.w	8001b88 <HAL_TIM_ConfigClockSource+0x16c>
 8001a7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a7e:	f000 8086 	beq.w	8001b8e <HAL_TIM_ConfigClockSource+0x172>
 8001a82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a86:	d87f      	bhi.n	8001b88 <HAL_TIM_ConfigClockSource+0x16c>
 8001a88:	2b70      	cmp	r3, #112	@ 0x70
 8001a8a:	d01a      	beq.n	8001ac2 <HAL_TIM_ConfigClockSource+0xa6>
 8001a8c:	2b70      	cmp	r3, #112	@ 0x70
 8001a8e:	d87b      	bhi.n	8001b88 <HAL_TIM_ConfigClockSource+0x16c>
 8001a90:	2b60      	cmp	r3, #96	@ 0x60
 8001a92:	d050      	beq.n	8001b36 <HAL_TIM_ConfigClockSource+0x11a>
 8001a94:	2b60      	cmp	r3, #96	@ 0x60
 8001a96:	d877      	bhi.n	8001b88 <HAL_TIM_ConfigClockSource+0x16c>
 8001a98:	2b50      	cmp	r3, #80	@ 0x50
 8001a9a:	d03c      	beq.n	8001b16 <HAL_TIM_ConfigClockSource+0xfa>
 8001a9c:	2b50      	cmp	r3, #80	@ 0x50
 8001a9e:	d873      	bhi.n	8001b88 <HAL_TIM_ConfigClockSource+0x16c>
 8001aa0:	2b40      	cmp	r3, #64	@ 0x40
 8001aa2:	d058      	beq.n	8001b56 <HAL_TIM_ConfigClockSource+0x13a>
 8001aa4:	2b40      	cmp	r3, #64	@ 0x40
 8001aa6:	d86f      	bhi.n	8001b88 <HAL_TIM_ConfigClockSource+0x16c>
 8001aa8:	2b30      	cmp	r3, #48	@ 0x30
 8001aaa:	d064      	beq.n	8001b76 <HAL_TIM_ConfigClockSource+0x15a>
 8001aac:	2b30      	cmp	r3, #48	@ 0x30
 8001aae:	d86b      	bhi.n	8001b88 <HAL_TIM_ConfigClockSource+0x16c>
 8001ab0:	2b20      	cmp	r3, #32
 8001ab2:	d060      	beq.n	8001b76 <HAL_TIM_ConfigClockSource+0x15a>
 8001ab4:	2b20      	cmp	r3, #32
 8001ab6:	d867      	bhi.n	8001b88 <HAL_TIM_ConfigClockSource+0x16c>
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d05c      	beq.n	8001b76 <HAL_TIM_ConfigClockSource+0x15a>
 8001abc:	2b10      	cmp	r3, #16
 8001abe:	d05a      	beq.n	8001b76 <HAL_TIM_ConfigClockSource+0x15a>
 8001ac0:	e062      	b.n	8001b88 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001ad2:	f000 facc 	bl	800206e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8001ae4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	68ba      	ldr	r2, [r7, #8]
 8001aec:	609a      	str	r2, [r3, #8]
      break;
 8001aee:	e04f      	b.n	8001b90 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001b00:	f000 fab5 	bl	800206e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	689a      	ldr	r2, [r3, #8]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001b12:	609a      	str	r2, [r3, #8]
      break;
 8001b14:	e03c      	b.n	8001b90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b22:	461a      	mov	r2, r3
 8001b24:	f000 fa2c 	bl	8001f80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2150      	movs	r1, #80	@ 0x50
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f000 fa83 	bl	800203a <TIM_ITRx_SetConfig>
      break;
 8001b34:	e02c      	b.n	8001b90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001b42:	461a      	mov	r2, r3
 8001b44:	f000 fa4a 	bl	8001fdc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2160      	movs	r1, #96	@ 0x60
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f000 fa73 	bl	800203a <TIM_ITRx_SetConfig>
      break;
 8001b54:	e01c      	b.n	8001b90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b62:	461a      	mov	r2, r3
 8001b64:	f000 fa0c 	bl	8001f80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2140      	movs	r1, #64	@ 0x40
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f000 fa63 	bl	800203a <TIM_ITRx_SetConfig>
      break;
 8001b74:	e00c      	b.n	8001b90 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4610      	mov	r0, r2
 8001b82:	f000 fa5a 	bl	800203a <TIM_ITRx_SetConfig>
      break;
 8001b86:	e003      	b.n	8001b90 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	73fb      	strb	r3, [r7, #15]
      break;
 8001b8c:	e000      	b.n	8001b90 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001b8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2201      	movs	r2, #1
 8001b94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3710      	adds	r7, #16
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
	...

08001bac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	4a29      	ldr	r2, [pc, #164]	@ (8001c64 <TIM_Base_SetConfig+0xb8>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d00b      	beq.n	8001bdc <TIM_Base_SetConfig+0x30>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bca:	d007      	beq.n	8001bdc <TIM_Base_SetConfig+0x30>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4a26      	ldr	r2, [pc, #152]	@ (8001c68 <TIM_Base_SetConfig+0xbc>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d003      	beq.n	8001bdc <TIM_Base_SetConfig+0x30>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	4a25      	ldr	r2, [pc, #148]	@ (8001c6c <TIM_Base_SetConfig+0xc0>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d108      	bne.n	8001bee <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001be2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	68fa      	ldr	r2, [r7, #12]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a1c      	ldr	r2, [pc, #112]	@ (8001c64 <TIM_Base_SetConfig+0xb8>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d00b      	beq.n	8001c0e <TIM_Base_SetConfig+0x62>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bfc:	d007      	beq.n	8001c0e <TIM_Base_SetConfig+0x62>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a19      	ldr	r2, [pc, #100]	@ (8001c68 <TIM_Base_SetConfig+0xbc>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d003      	beq.n	8001c0e <TIM_Base_SetConfig+0x62>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a18      	ldr	r2, [pc, #96]	@ (8001c6c <TIM_Base_SetConfig+0xc0>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d108      	bne.n	8001c20 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001c14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	68fa      	ldr	r2, [r7, #12]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	695b      	ldr	r3, [r3, #20]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	68fa      	ldr	r2, [r7, #12]
 8001c32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	689a      	ldr	r2, [r3, #8]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	4a07      	ldr	r2, [pc, #28]	@ (8001c64 <TIM_Base_SetConfig+0xb8>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d103      	bne.n	8001c54 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	691a      	ldr	r2, [r3, #16]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	615a      	str	r2, [r3, #20]
}
 8001c5a:	bf00      	nop
 8001c5c:	3714      	adds	r7, #20
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bc80      	pop	{r7}
 8001c62:	4770      	bx	lr
 8001c64:	40012c00 	.word	0x40012c00
 8001c68:	40000400 	.word	0x40000400
 8001c6c:	40000800 	.word	0x40000800

08001c70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b087      	sub	sp, #28
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a1b      	ldr	r3, [r3, #32]
 8001c7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a1b      	ldr	r3, [r3, #32]
 8001c84:	f023 0201 	bic.w	r2, r3, #1
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	699b      	ldr	r3, [r3, #24]
 8001c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001c9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	f023 0303 	bic.w	r3, r3, #3
 8001ca6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	68fa      	ldr	r2, [r7, #12]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	f023 0302 	bic.w	r3, r3, #2
 8001cb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	697a      	ldr	r2, [r7, #20]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	4a1c      	ldr	r2, [pc, #112]	@ (8001d38 <TIM_OC1_SetConfig+0xc8>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d10c      	bne.n	8001ce6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	f023 0308 	bic.w	r3, r3, #8
 8001cd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	697a      	ldr	r2, [r7, #20]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	f023 0304 	bic.w	r3, r3, #4
 8001ce4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a13      	ldr	r2, [pc, #76]	@ (8001d38 <TIM_OC1_SetConfig+0xc8>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d111      	bne.n	8001d12 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001cf4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001cfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	695b      	ldr	r3, [r3, #20]
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	693a      	ldr	r2, [r7, #16]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	693a      	ldr	r2, [r7, #16]
 8001d16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	68fa      	ldr	r2, [r7, #12]
 8001d1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685a      	ldr	r2, [r3, #4]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	697a      	ldr	r2, [r7, #20]
 8001d2a:	621a      	str	r2, [r3, #32]
}
 8001d2c:	bf00      	nop
 8001d2e:	371c      	adds	r7, #28
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bc80      	pop	{r7}
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	40012c00 	.word	0x40012c00

08001d3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b087      	sub	sp, #28
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6a1b      	ldr	r3, [r3, #32]
 8001d4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6a1b      	ldr	r3, [r3, #32]
 8001d50:	f023 0210 	bic.w	r2, r3, #16
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	699b      	ldr	r3, [r3, #24]
 8001d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001d6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001d72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	021b      	lsls	r3, r3, #8
 8001d7a:	68fa      	ldr	r2, [r7, #12]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	f023 0320 	bic.w	r3, r3, #32
 8001d86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	011b      	lsls	r3, r3, #4
 8001d8e:	697a      	ldr	r2, [r7, #20]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4a1d      	ldr	r2, [pc, #116]	@ (8001e0c <TIM_OC2_SetConfig+0xd0>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d10d      	bne.n	8001db8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001da2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	011b      	lsls	r3, r3, #4
 8001daa:	697a      	ldr	r2, [r7, #20]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001db6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	4a14      	ldr	r2, [pc, #80]	@ (8001e0c <TIM_OC2_SetConfig+0xd0>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d113      	bne.n	8001de8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001dc6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001dce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	695b      	ldr	r3, [r3, #20]
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	699b      	ldr	r3, [r3, #24]
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	68fa      	ldr	r2, [r7, #12]
 8001df2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685a      	ldr	r2, [r3, #4]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	697a      	ldr	r2, [r7, #20]
 8001e00:	621a      	str	r2, [r3, #32]
}
 8001e02:	bf00      	nop
 8001e04:	371c      	adds	r7, #28
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bc80      	pop	{r7}
 8001e0a:	4770      	bx	lr
 8001e0c:	40012c00 	.word	0x40012c00

08001e10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b087      	sub	sp, #28
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6a1b      	ldr	r3, [r3, #32]
 8001e1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a1b      	ldr	r3, [r3, #32]
 8001e24:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	69db      	ldr	r3, [r3, #28]
 8001e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f023 0303 	bic.w	r3, r3, #3
 8001e46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	68fa      	ldr	r2, [r7, #12]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001e58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	021b      	lsls	r3, r3, #8
 8001e60:	697a      	ldr	r2, [r7, #20]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a1d      	ldr	r2, [pc, #116]	@ (8001ee0 <TIM_OC3_SetConfig+0xd0>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d10d      	bne.n	8001e8a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001e74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	021b      	lsls	r3, r3, #8
 8001e7c:	697a      	ldr	r2, [r7, #20]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001e88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a14      	ldr	r2, [pc, #80]	@ (8001ee0 <TIM_OC3_SetConfig+0xd0>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d113      	bne.n	8001eba <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001e98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001ea0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	695b      	ldr	r3, [r3, #20]
 8001ea6:	011b      	lsls	r3, r3, #4
 8001ea8:	693a      	ldr	r2, [r7, #16]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	699b      	ldr	r3, [r3, #24]
 8001eb2:	011b      	lsls	r3, r3, #4
 8001eb4:	693a      	ldr	r2, [r7, #16]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	693a      	ldr	r2, [r7, #16]
 8001ebe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	68fa      	ldr	r2, [r7, #12]
 8001ec4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685a      	ldr	r2, [r3, #4]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	697a      	ldr	r2, [r7, #20]
 8001ed2:	621a      	str	r2, [r3, #32]
}
 8001ed4:	bf00      	nop
 8001ed6:	371c      	adds	r7, #28
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bc80      	pop	{r7}
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	40012c00 	.word	0x40012c00

08001ee4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b087      	sub	sp, #28
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a1b      	ldr	r3, [r3, #32]
 8001ef2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6a1b      	ldr	r3, [r3, #32]
 8001ef8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	69db      	ldr	r3, [r3, #28]
 8001f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001f12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	021b      	lsls	r3, r3, #8
 8001f22:	68fa      	ldr	r2, [r7, #12]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001f2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	031b      	lsls	r3, r3, #12
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	4a0f      	ldr	r2, [pc, #60]	@ (8001f7c <TIM_OC4_SetConfig+0x98>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d109      	bne.n	8001f58 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001f4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	695b      	ldr	r3, [r3, #20]
 8001f50:	019b      	lsls	r3, r3, #6
 8001f52:	697a      	ldr	r2, [r7, #20]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	697a      	ldr	r2, [r7, #20]
 8001f5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685a      	ldr	r2, [r3, #4]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	621a      	str	r2, [r3, #32]
}
 8001f72:	bf00      	nop
 8001f74:	371c      	adds	r7, #28
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bc80      	pop	{r7}
 8001f7a:	4770      	bx	lr
 8001f7c:	40012c00 	.word	0x40012c00

08001f80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b087      	sub	sp, #28
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	6a1b      	ldr	r3, [r3, #32]
 8001f90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6a1b      	ldr	r3, [r3, #32]
 8001f96:	f023 0201 	bic.w	r2, r3, #1
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	699b      	ldr	r3, [r3, #24]
 8001fa2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001faa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	011b      	lsls	r3, r3, #4
 8001fb0:	693a      	ldr	r2, [r7, #16]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	f023 030a 	bic.w	r3, r3, #10
 8001fbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001fbe:	697a      	ldr	r2, [r7, #20]
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	693a      	ldr	r2, [r7, #16]
 8001fca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	697a      	ldr	r2, [r7, #20]
 8001fd0:	621a      	str	r2, [r3, #32]
}
 8001fd2:	bf00      	nop
 8001fd4:	371c      	adds	r7, #28
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bc80      	pop	{r7}
 8001fda:	4770      	bx	lr

08001fdc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b087      	sub	sp, #28
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	6a1b      	ldr	r3, [r3, #32]
 8001fec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	6a1b      	ldr	r3, [r3, #32]
 8001ff2:	f023 0210 	bic.w	r2, r3, #16
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	699b      	ldr	r3, [r3, #24]
 8001ffe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002006:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	031b      	lsls	r3, r3, #12
 800200c:	693a      	ldr	r2, [r7, #16]
 800200e:	4313      	orrs	r3, r2
 8002010:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002018:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	011b      	lsls	r3, r3, #4
 800201e:	697a      	ldr	r2, [r7, #20]
 8002020:	4313      	orrs	r3, r2
 8002022:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	697a      	ldr	r2, [r7, #20]
 800202e:	621a      	str	r2, [r3, #32]
}
 8002030:	bf00      	nop
 8002032:	371c      	adds	r7, #28
 8002034:	46bd      	mov	sp, r7
 8002036:	bc80      	pop	{r7}
 8002038:	4770      	bx	lr

0800203a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800203a:	b480      	push	{r7}
 800203c:	b085      	sub	sp, #20
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
 8002042:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002050:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	4313      	orrs	r3, r2
 8002058:	f043 0307 	orr.w	r3, r3, #7
 800205c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	68fa      	ldr	r2, [r7, #12]
 8002062:	609a      	str	r2, [r3, #8]
}
 8002064:	bf00      	nop
 8002066:	3714      	adds	r7, #20
 8002068:	46bd      	mov	sp, r7
 800206a:	bc80      	pop	{r7}
 800206c:	4770      	bx	lr

0800206e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800206e:	b480      	push	{r7}
 8002070:	b087      	sub	sp, #28
 8002072:	af00      	add	r7, sp, #0
 8002074:	60f8      	str	r0, [r7, #12]
 8002076:	60b9      	str	r1, [r7, #8]
 8002078:	607a      	str	r2, [r7, #4]
 800207a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002088:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	021a      	lsls	r2, r3, #8
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	431a      	orrs	r2, r3
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	4313      	orrs	r3, r2
 8002096:	697a      	ldr	r2, [r7, #20]
 8002098:	4313      	orrs	r3, r2
 800209a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	697a      	ldr	r2, [r7, #20]
 80020a0:	609a      	str	r2, [r3, #8]
}
 80020a2:	bf00      	nop
 80020a4:	371c      	adds	r7, #28
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bc80      	pop	{r7}
 80020aa:	4770      	bx	lr

080020ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d101      	bne.n	80020c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80020c0:	2302      	movs	r3, #2
 80020c2:	e046      	b.n	8002152 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2201      	movs	r2, #1
 80020c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2202      	movs	r2, #2
 80020d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80020ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	68fa      	ldr	r2, [r7, #12]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a16      	ldr	r2, [pc, #88]	@ (800215c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d00e      	beq.n	8002126 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002110:	d009      	beq.n	8002126 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a12      	ldr	r2, [pc, #72]	@ (8002160 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d004      	beq.n	8002126 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a10      	ldr	r2, [pc, #64]	@ (8002164 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d10c      	bne.n	8002140 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800212c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	68ba      	ldr	r2, [r7, #8]
 8002134:	4313      	orrs	r3, r2
 8002136:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	68ba      	ldr	r2, [r7, #8]
 800213e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	3714      	adds	r7, #20
 8002156:	46bd      	mov	sp, r7
 8002158:	bc80      	pop	{r7}
 800215a:	4770      	bx	lr
 800215c:	40012c00 	.word	0x40012c00
 8002160:	40000400 	.word	0x40000400
 8002164:	40000800 	.word	0x40000800

08002168 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002172:	2300      	movs	r3, #0
 8002174:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800217c:	2b01      	cmp	r3, #1
 800217e:	d101      	bne.n	8002184 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002180:	2302      	movs	r3, #2
 8002182:	e03d      	b.n	8002200 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	4313      	orrs	r3, r2
 8002198:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	695b      	ldr	r3, [r3, #20]
 80021dc:	4313      	orrs	r3, r2
 80021de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	69db      	ldr	r3, [r3, #28]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80021fe:	2300      	movs	r3, #0
}
 8002200:	4618      	mov	r0, r3
 8002202:	3714      	adds	r7, #20
 8002204:	46bd      	mov	sp, r7
 8002206:	bc80      	pop	{r7}
 8002208:	4770      	bx	lr

0800220a <LL_ADC_REG_SetSequencerLength>:
{
 800220a:	b480      	push	{r7}
 800220c:	b083      	sub	sp, #12
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
 8002212:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002218:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	431a      	orrs	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	bc80      	pop	{r7}
 800222c:	4770      	bx	lr

0800222e <LL_ADC_IsEnabled>:
  * @rmtoll CR2      ADON           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800222e:	b480      	push	{r7}
 8002230:	b083      	sub	sp, #12
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	2b01      	cmp	r3, #1
 8002240:	bf0c      	ite	eq
 8002242:	2301      	moveq	r3, #1
 8002244:	2300      	movne	r3, #0
 8002246:	b2db      	uxtb	r3, r3
}
 8002248:	4618      	mov	r0, r3
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	bc80      	pop	{r7}
 8002250:	4770      	bx	lr
	...

08002254 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8002254:	b590      	push	{r4, r7, lr}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800225e:	2300      	movs	r3, #0
 8002260:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 8002262:	4813      	ldr	r0, [pc, #76]	@ (80022b0 <LL_ADC_CommonInit+0x5c>)
 8002264:	f7ff ffe3 	bl	800222e <LL_ADC_IsEnabled>
 8002268:	4604      	mov	r4, r0
 800226a:	4812      	ldr	r0, [pc, #72]	@ (80022b4 <LL_ADC_CommonInit+0x60>)
 800226c:	f7ff ffdf 	bl	800222e <LL_ADC_IsEnabled>
 8002270:	4603      	mov	r3, r0
 8002272:	4323      	orrs	r3, r4
 8002274:	2b00      	cmp	r3, #0
 8002276:	d114      	bne.n	80022a2 <LL_ADC_CommonInit+0x4e>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d009      	beq.n	8002294 <LL_ADC_CommonInit+0x40>
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	431a      	orrs	r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	605a      	str	r2, [r3, #4]
 8002292:	e008      	b.n	80022a6 <LL_ADC_CommonInit+0x52>
                 ADC_CommonInitStruct->Multimode
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	605a      	str	r2, [r3, #4]
 80022a0:	e001      	b.n	80022a6 <LL_ADC_CommonInit+0x52>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 80022a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3714      	adds	r7, #20
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd90      	pop	{r4, r7, pc}
 80022b0:	40012400 	.word	0x40012400
 80022b4:	40012800 	.word	0x40012800

080022b8 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80022c2:	2300      	movs	r3, #0
 80022c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f7ff ffb1 	bl	800222e <LL_ADC_IsEnabled>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d112      	bne.n	80022f8 <LL_ADC_Init+0x40>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	431a      	orrs	r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_SCAN
              ,
                 ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	431a      	orrs	r2, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	609a      	str	r2, [r3, #8]
 80022f6:	e001      	b.n	80022fc <LL_ADC_Init+0x44>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80022fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3710      	adds	r7, #16
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8002306:	b580      	push	{r7, lr}
 8002308:	b084      	sub	sp, #16
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
 800230e:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002310:	2300      	movs	r3, #0
 8002312:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f7ff ff8a 	bl	800222e <LL_ADC_IsEnabled>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d131      	bne.n	8002384 <LL_ADC_REG_Init+0x7e>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 series, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d00c      	beq.n	8002342 <LL_ADC_REG_Init+0x3c>
    {
      MODIFY_REG(ADCx->CR1,
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	6859      	ldr	r1, [r3, #4]
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	430b      	orrs	r3, r1
 800233a:	431a      	orrs	r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	605a      	str	r2, [r3, #4]
 8002340:	e008      	b.n	8002354 <LL_ADC_REG_Init+0x4e>
                 | ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	431a      	orrs	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	605a      	str	r2, [r3, #4]
                   ADC_REG_InitStruct->SequencerLength
                 | LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f423 2360 	bic.w	r3, r3, #917504	@ 0xe0000
 800235c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002360:	683a      	ldr	r2, [r7, #0]
 8002362:	6811      	ldr	r1, [r2, #0]
 8002364:	683a      	ldr	r2, [r7, #0]
 8002366:	68d2      	ldr	r2, [r2, #12]
 8002368:	4311      	orrs	r1, r2
 800236a:	683a      	ldr	r2, [r7, #0]
 800236c:	6912      	ldr	r2, [r2, #16]
 800236e:	430a      	orrs	r2, r1
 8002370:	431a      	orrs	r2, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	4619      	mov	r1, r3
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f7ff ff44 	bl	800220a <LL_ADC_REG_SetSequencerLength>
 8002382:	e001      	b.n	8002388 <LL_ADC_REG_Init+0x82>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8002388:	7bfb      	ldrb	r3, [r7, #15]
}
 800238a:	4618      	mov	r0, r3
 800238c:	3710      	adds	r7, #16
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
	...

08002394 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 800239c:	4b05      	ldr	r3, [pc, #20]	@ (80023b4 <LL_EXTI_EnableIT_0_31+0x20>)
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	4904      	ldr	r1, [pc, #16]	@ (80023b4 <LL_EXTI_EnableIT_0_31+0x20>)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	600b      	str	r3, [r1, #0]
}
 80023a8:	bf00      	nop
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bc80      	pop	{r7}
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	40010400 	.word	0x40010400

080023b8 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80023c0:	4b05      	ldr	r3, [pc, #20]	@ (80023d8 <LL_EXTI_DisableIT_0_31+0x20>)
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	43db      	mvns	r3, r3
 80023c8:	4903      	ldr	r1, [pc, #12]	@ (80023d8 <LL_EXTI_DisableIT_0_31+0x20>)
 80023ca:	4013      	ands	r3, r2
 80023cc:	600b      	str	r3, [r1, #0]
}
 80023ce:	bf00      	nop
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bc80      	pop	{r7}
 80023d6:	4770      	bx	lr
 80023d8:	40010400 	.word	0x40010400

080023dc <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 80023e4:	4b05      	ldr	r3, [pc, #20]	@ (80023fc <LL_EXTI_EnableEvent_0_31+0x20>)
 80023e6:	685a      	ldr	r2, [r3, #4]
 80023e8:	4904      	ldr	r1, [pc, #16]	@ (80023fc <LL_EXTI_EnableEvent_0_31+0x20>)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	604b      	str	r3, [r1, #4]

}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bc80      	pop	{r7}
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	40010400 	.word	0x40010400

08002400 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8002408:	4b05      	ldr	r3, [pc, #20]	@ (8002420 <LL_EXTI_DisableEvent_0_31+0x20>)
 800240a:	685a      	ldr	r2, [r3, #4]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	43db      	mvns	r3, r3
 8002410:	4903      	ldr	r1, [pc, #12]	@ (8002420 <LL_EXTI_DisableEvent_0_31+0x20>)
 8002412:	4013      	ands	r3, r2
 8002414:	604b      	str	r3, [r1, #4]
}
 8002416:	bf00      	nop
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	bc80      	pop	{r7}
 800241e:	4770      	bx	lr
 8002420:	40010400 	.word	0x40010400

08002424 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 800242c:	4b05      	ldr	r3, [pc, #20]	@ (8002444 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800242e:	689a      	ldr	r2, [r3, #8]
 8002430:	4904      	ldr	r1, [pc, #16]	@ (8002444 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4313      	orrs	r3, r2
 8002436:	608b      	str	r3, [r1, #8]

}
 8002438:	bf00      	nop
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	bc80      	pop	{r7}
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	40010400 	.word	0x40010400

08002448 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8002450:	4b05      	ldr	r3, [pc, #20]	@ (8002468 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8002452:	689a      	ldr	r2, [r3, #8]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	43db      	mvns	r3, r3
 8002458:	4903      	ldr	r1, [pc, #12]	@ (8002468 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 800245a:	4013      	ands	r3, r2
 800245c:	608b      	str	r3, [r1, #8]

}
 800245e:	bf00      	nop
 8002460:	370c      	adds	r7, #12
 8002462:	46bd      	mov	sp, r7
 8002464:	bc80      	pop	{r7}
 8002466:	4770      	bx	lr
 8002468:	40010400 	.word	0x40010400

0800246c <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8002474:	4b05      	ldr	r3, [pc, #20]	@ (800248c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002476:	68da      	ldr	r2, [r3, #12]
 8002478:	4904      	ldr	r1, [pc, #16]	@ (800248c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4313      	orrs	r3, r2
 800247e:	60cb      	str	r3, [r1, #12]
}
 8002480:	bf00      	nop
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	bc80      	pop	{r7}
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	40010400 	.word	0x40010400

08002490 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8002498:	4b05      	ldr	r3, [pc, #20]	@ (80024b0 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 800249a:	68da      	ldr	r2, [r3, #12]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	43db      	mvns	r3, r3
 80024a0:	4903      	ldr	r1, [pc, #12]	@ (80024b0 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 80024a2:	4013      	ands	r3, r2
 80024a4:	60cb      	str	r3, [r1, #12]
}
 80024a6:	bf00      	nop
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bc80      	pop	{r7}
 80024ae:	4770      	bx	lr
 80024b0:	40010400 	.word	0x40010400

080024b4 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 80024bc:	2300      	movs	r3, #0
 80024be:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	791b      	ldrb	r3, [r3, #4]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d065      	beq.n	8002594 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d06b      	beq.n	80025a8 <LL_EXTI_Init+0xf4>
    {
      switch (EXTI_InitStruct->Mode)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	795b      	ldrb	r3, [r3, #5]
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d01c      	beq.n	8002512 <LL_EXTI_Init+0x5e>
 80024d8:	2b02      	cmp	r3, #2
 80024da:	dc25      	bgt.n	8002528 <LL_EXTI_Init+0x74>
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d002      	beq.n	80024e6 <LL_EXTI_Init+0x32>
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d00b      	beq.n	80024fc <LL_EXTI_Init+0x48>
 80024e4:	e020      	b.n	8002528 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7ff ff88 	bl	8002400 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7ff ff4d 	bl	8002394 <LL_EXTI_EnableIT_0_31>
          break;
 80024fa:	e018      	b.n	800252e <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4618      	mov	r0, r3
 8002502:	f7ff ff59 	bl	80023b8 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4618      	mov	r0, r3
 800250c:	f7ff ff66 	bl	80023dc <LL_EXTI_EnableEvent_0_31>
          break;
 8002510:	e00d      	b.n	800252e <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4618      	mov	r0, r3
 8002518:	f7ff ff3c 	bl	8002394 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4618      	mov	r0, r3
 8002522:	f7ff ff5b 	bl	80023dc <LL_EXTI_EnableEvent_0_31>
          break;
 8002526:	e002      	b.n	800252e <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	73fb      	strb	r3, [r7, #15]
          break;
 800252c:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	799b      	ldrb	r3, [r3, #6]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d038      	beq.n	80025a8 <LL_EXTI_Init+0xf4>
      {
        switch (EXTI_InitStruct->Trigger)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	799b      	ldrb	r3, [r3, #6]
 800253a:	2b03      	cmp	r3, #3
 800253c:	d01c      	beq.n	8002578 <LL_EXTI_Init+0xc4>
 800253e:	2b03      	cmp	r3, #3
 8002540:	dc25      	bgt.n	800258e <LL_EXTI_Init+0xda>
 8002542:	2b01      	cmp	r3, #1
 8002544:	d002      	beq.n	800254c <LL_EXTI_Init+0x98>
 8002546:	2b02      	cmp	r3, #2
 8002548:	d00b      	beq.n	8002562 <LL_EXTI_Init+0xae>
 800254a:	e020      	b.n	800258e <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4618      	mov	r0, r3
 8002552:	f7ff ff9d 	bl	8002490 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4618      	mov	r0, r3
 800255c:	f7ff ff62 	bl	8002424 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8002560:	e022      	b.n	80025a8 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4618      	mov	r0, r3
 8002568:	f7ff ff6e 	bl	8002448 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4618      	mov	r0, r3
 8002572:	f7ff ff7b 	bl	800246c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002576:	e017      	b.n	80025a8 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4618      	mov	r0, r3
 800257e:	f7ff ff51 	bl	8002424 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4618      	mov	r0, r3
 8002588:	f7ff ff70 	bl	800246c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800258c:	e00c      	b.n	80025a8 <LL_EXTI_Init+0xf4>
          default:
            status = ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	73fb      	strb	r3, [r7, #15]
            break;
 8002592:	e009      	b.n	80025a8 <LL_EXTI_Init+0xf4>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4618      	mov	r0, r3
 800259a:	f7ff ff0d 	bl	80023b8 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7ff ff2c 	bl	8002400 <LL_EXTI_DisableEvent_0_31>
  }
  return status;
 80025a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3710      	adds	r7, #16
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <LL_GPIO_SetPinMode>:
{
 80025b2:	b490      	push	{r4, r7}
 80025b4:	b088      	sub	sp, #32
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	60f8      	str	r0, [r7, #12]
 80025ba:	60b9      	str	r1, [r7, #8]
 80025bc:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	461a      	mov	r2, r3
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	0e1b      	lsrs	r3, r3, #24
 80025c6:	4413      	add	r3, r2
 80025c8:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 80025ca:	6822      	ldr	r2, [r4, #0]
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	fa93 f3a3 	rbit	r3, r3
 80025d6:	613b      	str	r3, [r7, #16]
  return result;
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	fab3 f383 	clz	r3, r3
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	210f      	movs	r1, #15
 80025e4:	fa01 f303 	lsl.w	r3, r1, r3
 80025e8:	43db      	mvns	r3, r3
 80025ea:	401a      	ands	r2, r3
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	fa93 f3a3 	rbit	r3, r3
 80025f6:	61bb      	str	r3, [r7, #24]
  return result;
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	fab3 f383 	clz	r3, r3
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	6879      	ldr	r1, [r7, #4]
 8002604:	fa01 f303 	lsl.w	r3, r1, r3
 8002608:	4313      	orrs	r3, r2
 800260a:	6023      	str	r3, [r4, #0]
}
 800260c:	bf00      	nop
 800260e:	3720      	adds	r7, #32
 8002610:	46bd      	mov	sp, r7
 8002612:	bc90      	pop	{r4, r7}
 8002614:	4770      	bx	lr

08002616 <LL_GPIO_SetPinSpeed>:
{
 8002616:	b490      	push	{r4, r7}
 8002618:	b088      	sub	sp, #32
 800261a:	af00      	add	r7, sp, #0
 800261c:	60f8      	str	r0, [r7, #12]
 800261e:	60b9      	str	r1, [r7, #8]
 8002620:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	461a      	mov	r2, r3
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	0e1b      	lsrs	r3, r3, #24
 800262a:	4413      	add	r3, r2
 800262c:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 800262e:	6822      	ldr	r2, [r4, #0]
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	fa93 f3a3 	rbit	r3, r3
 800263a:	613b      	str	r3, [r7, #16]
  return result;
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	fab3 f383 	clz	r3, r3
 8002642:	b2db      	uxtb	r3, r3
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	2103      	movs	r1, #3
 8002648:	fa01 f303 	lsl.w	r3, r1, r3
 800264c:	43db      	mvns	r3, r3
 800264e:	401a      	ands	r2, r3
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	fa93 f3a3 	rbit	r3, r3
 800265a:	61bb      	str	r3, [r7, #24]
  return result;
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	fab3 f383 	clz	r3, r3
 8002662:	b2db      	uxtb	r3, r3
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	6879      	ldr	r1, [r7, #4]
 8002668:	fa01 f303 	lsl.w	r3, r1, r3
 800266c:	4313      	orrs	r3, r2
 800266e:	6023      	str	r3, [r4, #0]
}
 8002670:	bf00      	nop
 8002672:	3720      	adds	r7, #32
 8002674:	46bd      	mov	sp, r7
 8002676:	bc90      	pop	{r4, r7}
 8002678:	4770      	bx	lr

0800267a <LL_GPIO_SetPinOutputType>:
{
 800267a:	b490      	push	{r4, r7}
 800267c:	b088      	sub	sp, #32
 800267e:	af00      	add	r7, sp, #0
 8002680:	60f8      	str	r0, [r7, #12]
 8002682:	60b9      	str	r1, [r7, #8]
 8002684:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	461a      	mov	r2, r3
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	0e1b      	lsrs	r3, r3, #24
 800268e:	4413      	add	r3, r2
 8002690:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8002692:	6822      	ldr	r2, [r4, #0]
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	fa93 f3a3 	rbit	r3, r3
 800269e:	613b      	str	r3, [r7, #16]
  return result;
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	fab3 f383 	clz	r3, r3
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	2104      	movs	r1, #4
 80026ac:	fa01 f303 	lsl.w	r3, r1, r3
 80026b0:	43db      	mvns	r3, r3
 80026b2:	401a      	ands	r2, r3
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	fa93 f3a3 	rbit	r3, r3
 80026be:	61bb      	str	r3, [r7, #24]
  return result;
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	fab3 f383 	clz	r3, r3
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	6879      	ldr	r1, [r7, #4]
 80026cc:	fa01 f303 	lsl.w	r3, r1, r3
 80026d0:	4313      	orrs	r3, r2
 80026d2:	6023      	str	r3, [r4, #0]
}
 80026d4:	bf00      	nop
 80026d6:	3720      	adds	r7, #32
 80026d8:	46bd      	mov	sp, r7
 80026da:	bc90      	pop	{r4, r7}
 80026dc:	4770      	bx	lr

080026de <LL_GPIO_SetPinPull>:
{
 80026de:	b480      	push	{r7}
 80026e0:	b087      	sub	sp, #28
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	60f8      	str	r0, [r7, #12]
 80026e6:	60b9      	str	r1, [r7, #8]
 80026e8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	68da      	ldr	r2, [r3, #12]
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	0a1b      	lsrs	r3, r3, #8
 80026f2:	43db      	mvns	r3, r3
 80026f4:	401a      	ands	r2, r3
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	0a1b      	lsrs	r3, r3, #8
 80026fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	fa93 f3a3 	rbit	r3, r3
 8002702:	613b      	str	r3, [r7, #16]
  return result;
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	fab3 f383 	clz	r3, r3
 800270a:	b2db      	uxtb	r3, r3
 800270c:	4619      	mov	r1, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	408b      	lsls	r3, r1
 8002712:	431a      	orrs	r2, r3
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	60da      	str	r2, [r3, #12]
}
 8002718:	bf00      	nop
 800271a:	371c      	adds	r7, #28
 800271c:	46bd      	mov	sp, r7
 800271e:	bc80      	pop	{r7}
 8002720:	4770      	bx	lr

08002722 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	b088      	sub	sp, #32
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
 800272a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	021b      	lsls	r3, r3, #8
 8002732:	0c1b      	lsrs	r3, r3, #16
 8002734:	617b      	str	r3, [r7, #20]
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	fa93 f3a3 	rbit	r3, r3
 8002740:	60fb      	str	r3, [r7, #12]
  return result;
 8002742:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8002744:	fab3 f383 	clz	r3, r3
 8002748:	b2db      	uxtb	r3, r3
 800274a:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 800274c:	e044      	b.n	80027d8 <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 800274e:	2201      	movs	r2, #1
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	409a      	lsls	r2, r3
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	4013      	ands	r3, r2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d03a      	beq.n	80027d2 <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	2b07      	cmp	r3, #7
 8002760:	d806      	bhi.n	8002770 <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 8002762:	f240 1201 	movw	r2, #257	@ 0x101
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	61bb      	str	r3, [r7, #24]
 800276e:	e008      	b.n	8002782 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	3b08      	subs	r3, #8
 8002774:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002780:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	2b08      	cmp	r3, #8
 8002788:	d106      	bne.n	8002798 <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	461a      	mov	r2, r3
 8002790:	69b9      	ldr	r1, [r7, #24]
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f7ff ffa3 	bl	80026de <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	461a      	mov	r2, r3
 800279e:	69b9      	ldr	r1, [r7, #24]
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f7ff ff06 	bl	80025b2 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d003      	beq.n	80027b6 <LL_GPIO_Init+0x94>
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	2b09      	cmp	r3, #9
 80027b4:	d10d      	bne.n	80027d2 <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	461a      	mov	r2, r3
 80027bc:	69b9      	ldr	r1, [r7, #24]
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f7ff ff29 	bl	8002616 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	461a      	mov	r2, r3
 80027ca:	69b9      	ldr	r1, [r7, #24]
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f7ff ff54 	bl	800267a <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	3301      	adds	r3, #1
 80027d6:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 80027d8:	697a      	ldr	r2, [r7, #20]
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	fa22 f303 	lsr.w	r3, r2, r3
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d1b4      	bne.n	800274e <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3720      	adds	r7, #32
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
	...

080027f0 <LL_RCC_GetSysClkSource>:
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80027f4:	4b03      	ldr	r3, [pc, #12]	@ (8002804 <LL_RCC_GetSysClkSource+0x14>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f003 030c 	and.w	r3, r3, #12
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	46bd      	mov	sp, r7
 8002800:	bc80      	pop	{r7}
 8002802:	4770      	bx	lr
 8002804:	40021000 	.word	0x40021000

08002808 <LL_RCC_GetAHBPrescaler>:
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800280c:	4b03      	ldr	r3, [pc, #12]	@ (800281c <LL_RCC_GetAHBPrescaler+0x14>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002814:	4618      	mov	r0, r3
 8002816:	46bd      	mov	sp, r7
 8002818:	bc80      	pop	{r7}
 800281a:	4770      	bx	lr
 800281c:	40021000 	.word	0x40021000

08002820 <LL_RCC_GetAPB1Prescaler>:
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002824:	4b03      	ldr	r3, [pc, #12]	@ (8002834 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800282c:	4618      	mov	r0, r3
 800282e:	46bd      	mov	sp, r7
 8002830:	bc80      	pop	{r7}
 8002832:	4770      	bx	lr
 8002834:	40021000 	.word	0x40021000

08002838 <LL_RCC_GetAPB2Prescaler>:
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800283c:	4b03      	ldr	r3, [pc, #12]	@ (800284c <LL_RCC_GetAPB2Prescaler+0x14>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8002844:	4618      	mov	r0, r3
 8002846:	46bd      	mov	sp, r7
 8002848:	bc80      	pop	{r7}
 800284a:	4770      	bx	lr
 800284c:	40021000 	.word	0x40021000

08002850 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8002854:	4b03      	ldr	r3, [pc, #12]	@ (8002864 <LL_RCC_PLL_GetMainSource+0x14>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 800285c:	4618      	mov	r0, r3
 800285e:	46bd      	mov	sp, r7
 8002860:	bc80      	pop	{r7}
 8002862:	4770      	bx	lr
 8002864:	40021000 	.word	0x40021000

08002868 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 800286c:	4b03      	ldr	r3, [pc, #12]	@ (800287c <LL_RCC_PLL_GetMultiplicator+0x14>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
}
 8002874:	4618      	mov	r0, r3
 8002876:	46bd      	mov	sp, r7
 8002878:	bc80      	pop	{r7}
 800287a:	4770      	bx	lr
 800287c:	40021000 	.word	0x40021000

08002880 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 8002884:	4b04      	ldr	r3, [pc, #16]	@ (8002898 <LL_RCC_PLL_GetPrediv+0x18>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	0c5b      	lsrs	r3, r3, #17
 800288a:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 800288e:	4618      	mov	r0, r3
 8002890:	46bd      	mov	sp, r7
 8002892:	bc80      	pop	{r7}
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	40021000 	.word	0x40021000

0800289c <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80028a4:	f000 f820 	bl	80028e8 <RCC_GetSystemClockFreq>
 80028a8:	4602      	mov	r2, r0
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f000 f83e 	bl	8002934 <RCC_GetHCLKClockFreq>
 80028b8:	4602      	mov	r2, r0
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f000 f84c 	bl	8002960 <RCC_GetPCLK1ClockFreq>
 80028c8:	4602      	mov	r2, r0
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f000 f858 	bl	8002988 <RCC_GetPCLK2ClockFreq>
 80028d8:	4602      	mov	r2, r0
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	60da      	str	r2, [r3, #12]
}
 80028de:	bf00      	nop
 80028e0:	3708      	adds	r7, #8
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
	...

080028e8 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80028ee:	2300      	movs	r3, #0
 80028f0:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80028f2:	f7ff ff7d 	bl	80027f0 <LL_RCC_GetSysClkSource>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b08      	cmp	r3, #8
 80028fa:	d00c      	beq.n	8002916 <RCC_GetSystemClockFreq+0x2e>
 80028fc:	2b08      	cmp	r3, #8
 80028fe:	d80e      	bhi.n	800291e <RCC_GetSystemClockFreq+0x36>
 8002900:	2b00      	cmp	r3, #0
 8002902:	d002      	beq.n	800290a <RCC_GetSystemClockFreq+0x22>
 8002904:	2b04      	cmp	r3, #4
 8002906:	d003      	beq.n	8002910 <RCC_GetSystemClockFreq+0x28>
 8002908:	e009      	b.n	800291e <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800290a:	4b09      	ldr	r3, [pc, #36]	@ (8002930 <RCC_GetSystemClockFreq+0x48>)
 800290c:	607b      	str	r3, [r7, #4]
      break;
 800290e:	e009      	b.n	8002924 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002910:	4b07      	ldr	r3, [pc, #28]	@ (8002930 <RCC_GetSystemClockFreq+0x48>)
 8002912:	607b      	str	r3, [r7, #4]
      break;
 8002914:	e006      	b.n	8002924 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8002916:	f000 f84b 	bl	80029b0 <RCC_PLL_GetFreqDomain_SYS>
 800291a:	6078      	str	r0, [r7, #4]
      break;
 800291c:	e002      	b.n	8002924 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 800291e:	4b04      	ldr	r3, [pc, #16]	@ (8002930 <RCC_GetSystemClockFreq+0x48>)
 8002920:	607b      	str	r3, [r7, #4]
      break;
 8002922:	bf00      	nop
  }

  return frequency;
 8002924:	687b      	ldr	r3, [r7, #4]
}
 8002926:	4618      	mov	r0, r3
 8002928:	3708      	adds	r7, #8
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	007a1200 	.word	0x007a1200

08002934 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800293c:	f7ff ff64 	bl	8002808 <LL_RCC_GetAHBPrescaler>
 8002940:	4603      	mov	r3, r0
 8002942:	091b      	lsrs	r3, r3, #4
 8002944:	f003 030f 	and.w	r3, r3, #15
 8002948:	4a04      	ldr	r2, [pc, #16]	@ (800295c <RCC_GetHCLKClockFreq+0x28>)
 800294a:	5cd3      	ldrb	r3, [r2, r3]
 800294c:	461a      	mov	r2, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	40d3      	lsrs	r3, r2
}
 8002952:	4618      	mov	r0, r3
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	08002dbc 	.word	0x08002dbc

08002960 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002968:	f7ff ff5a 	bl	8002820 <LL_RCC_GetAPB1Prescaler>
 800296c:	4603      	mov	r3, r0
 800296e:	0a1b      	lsrs	r3, r3, #8
 8002970:	4a04      	ldr	r2, [pc, #16]	@ (8002984 <RCC_GetPCLK1ClockFreq+0x24>)
 8002972:	5cd3      	ldrb	r3, [r2, r3]
 8002974:	461a      	mov	r2, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	40d3      	lsrs	r3, r2
}
 800297a:	4618      	mov	r0, r3
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	08002dcc 	.word	0x08002dcc

08002988 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002990:	f7ff ff52 	bl	8002838 <LL_RCC_GetAPB2Prescaler>
 8002994:	4603      	mov	r3, r0
 8002996:	0adb      	lsrs	r3, r3, #11
 8002998:	4a04      	ldr	r2, [pc, #16]	@ (80029ac <RCC_GetPCLK2ClockFreq+0x24>)
 800299a:	5cd3      	ldrb	r3, [r2, r3]
 800299c:	461a      	mov	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	40d3      	lsrs	r3, r2
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	08002dcc 	.word	0x08002dcc

080029b0 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 80029b6:	2300      	movs	r3, #0
 80029b8:	607b      	str	r3, [r7, #4]
 80029ba:	2300      	movs	r3, #0
 80029bc:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 80029be:	f7ff ff47 	bl	8002850 <LL_RCC_PLL_GetMainSource>
 80029c2:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d004      	beq.n	80029d4 <RCC_PLL_GetFreqDomain_SYS+0x24>
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029d0:	d003      	beq.n	80029da <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80029d2:	e00b      	b.n	80029ec <RCC_PLL_GetFreqDomain_SYS+0x3c>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 80029d4:	4b0d      	ldr	r3, [pc, #52]	@ (8002a0c <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 80029d6:	607b      	str	r3, [r7, #4]
      break;
 80029d8:	e00b      	b.n	80029f2 <RCC_PLL_GetFreqDomain_SYS+0x42>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 80029da:	f7ff ff51 	bl	8002880 <LL_RCC_PLL_GetPrediv>
 80029de:	4603      	mov	r3, r0
 80029e0:	3301      	adds	r3, #1
 80029e2:	4a0b      	ldr	r2, [pc, #44]	@ (8002a10 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 80029e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e8:	607b      	str	r3, [r7, #4]
      break;
 80029ea:	e002      	b.n	80029f2 <RCC_PLL_GetFreqDomain_SYS+0x42>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 80029ec:	4b07      	ldr	r3, [pc, #28]	@ (8002a0c <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 80029ee:	607b      	str	r3, [r7, #4]
      break;
 80029f0:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 80029f2:	f7ff ff39 	bl	8002868 <LL_RCC_PLL_GetMultiplicator>
 80029f6:	4603      	mov	r3, r0
 80029f8:	0c9b      	lsrs	r3, r3, #18
 80029fa:	3302      	adds	r3, #2
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	fb02 f303 	mul.w	r3, r2, r3
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	003d0900 	.word	0x003d0900
 8002a10:	007a1200 	.word	0x007a1200

08002a14 <LL_TIM_SetPrescaler>:
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	683a      	ldr	r2, [r7, #0]
 8002a22:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002a24:	bf00      	nop
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bc80      	pop	{r7}
 8002a2c:	4770      	bx	lr

08002a2e <LL_TIM_SetAutoReload>:
{
 8002a2e:	b480      	push	{r7}
 8002a30:	b083      	sub	sp, #12
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
 8002a36:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	683a      	ldr	r2, [r7, #0]
 8002a3c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8002a3e:	bf00      	nop
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bc80      	pop	{r7}
 8002a46:	4770      	bx	lr

08002a48 <LL_TIM_SetRepetitionCounter>:
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	683a      	ldr	r2, [r7, #0]
 8002a56:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002a58:	bf00      	nop
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bc80      	pop	{r7}
 8002a60:	4770      	bx	lr

08002a62 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8002a62:	b480      	push	{r7}
 8002a64:	b083      	sub	sp, #12
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	f043 0201 	orr.w	r2, r3, #1
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	615a      	str	r2, [r3, #20]
}
 8002a76:	bf00      	nop
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bc80      	pop	{r7}
 8002a7e:	4770      	bx	lr

08002a80 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	4a27      	ldr	r2, [pc, #156]	@ (8002b30 <LL_TIM_Init+0xb0>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d00b      	beq.n	8002ab0 <LL_TIM_Init+0x30>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a9e:	d007      	beq.n	8002ab0 <LL_TIM_Init+0x30>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	4a24      	ldr	r2, [pc, #144]	@ (8002b34 <LL_TIM_Init+0xb4>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d003      	beq.n	8002ab0 <LL_TIM_Init+0x30>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4a23      	ldr	r2, [pc, #140]	@ (8002b38 <LL_TIM_Init+0xb8>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d106      	bne.n	8002abe <LL_TIM_Init+0x3e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a1b      	ldr	r2, [pc, #108]	@ (8002b30 <LL_TIM_Init+0xb0>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d00b      	beq.n	8002ade <LL_TIM_Init+0x5e>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002acc:	d007      	beq.n	8002ade <LL_TIM_Init+0x5e>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a18      	ldr	r2, [pc, #96]	@ (8002b34 <LL_TIM_Init+0xb4>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d003      	beq.n	8002ade <LL_TIM_Init+0x5e>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a17      	ldr	r2, [pc, #92]	@ (8002b38 <LL_TIM_Init+0xb8>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d106      	bne.n	8002aec <LL_TIM_Init+0x6c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	68fa      	ldr	r2, [r7, #12]
 8002af0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	4619      	mov	r1, r3
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f7ff ff98 	bl	8002a2e <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	881b      	ldrh	r3, [r3, #0]
 8002b02:	4619      	mov	r1, r3
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f7ff ff85 	bl	8002a14 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a08      	ldr	r2, [pc, #32]	@ (8002b30 <LL_TIM_Init+0xb0>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d105      	bne.n	8002b1e <LL_TIM_Init+0x9e>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	4619      	mov	r1, r3
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f7ff ff95 	bl	8002a48 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f7ff ff9f 	bl	8002a62 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3710      	adds	r7, #16
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	40012c00 	.word	0x40012c00
 8002b34:	40000400 	.word	0x40000400
 8002b38:	40000800 	.word	0x40000800

08002b3c <LL_USART_IsEnabled>:
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b50:	bf0c      	ite	eq
 8002b52:	2301      	moveq	r3, #1
 8002b54:	2300      	movne	r3, #0
 8002b56:	b2db      	uxtb	r3, r3
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bc80      	pop	{r7}
 8002b60:	4770      	bx	lr

08002b62 <LL_USART_SetStopBitsLength>:
{
 8002b62:	b480      	push	{r7}
 8002b64:	b083      	sub	sp, #12
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
 8002b6a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	691b      	ldr	r3, [r3, #16]
 8002b70:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	431a      	orrs	r2, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	611a      	str	r2, [r3, #16]
}
 8002b7c:	bf00      	nop
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bc80      	pop	{r7}
 8002b84:	4770      	bx	lr

08002b86 <LL_USART_SetHWFlowCtrl>:
{
 8002b86:	b480      	push	{r7}
 8002b88:	b083      	sub	sp, #12
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
 8002b8e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	695b      	ldr	r3, [r3, #20]
 8002b94:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	431a      	orrs	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	615a      	str	r2, [r3, #20]
}
 8002ba0:	bf00      	nop
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bc80      	pop	{r7}
 8002ba8:	4770      	bx	lr
	...

08002bac <LL_USART_SetBaudRate>:
{
 8002bac:	b480      	push	{r7}
 8002bae:	b085      	sub	sp, #20
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002bb8:	68ba      	ldr	r2, [r7, #8]
 8002bba:	4613      	mov	r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	4413      	add	r3, r2
 8002bc0:	009a      	lsls	r2, r3, #2
 8002bc2:	441a      	add	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bcc:	4a25      	ldr	r2, [pc, #148]	@ (8002c64 <LL_USART_SetBaudRate+0xb8>)
 8002bce:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd2:	095b      	lsrs	r3, r3, #5
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	011b      	lsls	r3, r3, #4
 8002bd8:	b299      	uxth	r1, r3
 8002bda:	68ba      	ldr	r2, [r7, #8]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	4413      	add	r3, r2
 8002be2:	009a      	lsls	r2, r3, #2
 8002be4:	441a      	add	r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bee:	4b1d      	ldr	r3, [pc, #116]	@ (8002c64 <LL_USART_SetBaudRate+0xb8>)
 8002bf0:	fba3 0302 	umull	r0, r3, r3, r2
 8002bf4:	095b      	lsrs	r3, r3, #5
 8002bf6:	2064      	movs	r0, #100	@ 0x64
 8002bf8:	fb00 f303 	mul.w	r3, r0, r3
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	011b      	lsls	r3, r3, #4
 8002c00:	3332      	adds	r3, #50	@ 0x32
 8002c02:	4a18      	ldr	r2, [pc, #96]	@ (8002c64 <LL_USART_SetBaudRate+0xb8>)
 8002c04:	fba2 2303 	umull	r2, r3, r2, r3
 8002c08:	095b      	lsrs	r3, r3, #5
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	440b      	add	r3, r1
 8002c14:	b299      	uxth	r1, r3
 8002c16:	68ba      	ldr	r2, [r7, #8]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	4413      	add	r3, r2
 8002c1e:	009a      	lsls	r2, r3, #2
 8002c20:	441a      	add	r2, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c2a:	4b0e      	ldr	r3, [pc, #56]	@ (8002c64 <LL_USART_SetBaudRate+0xb8>)
 8002c2c:	fba3 0302 	umull	r0, r3, r3, r2
 8002c30:	095b      	lsrs	r3, r3, #5
 8002c32:	2064      	movs	r0, #100	@ 0x64
 8002c34:	fb00 f303 	mul.w	r3, r0, r3
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	011b      	lsls	r3, r3, #4
 8002c3c:	3332      	adds	r3, #50	@ 0x32
 8002c3e:	4a09      	ldr	r2, [pc, #36]	@ (8002c64 <LL_USART_SetBaudRate+0xb8>)
 8002c40:	fba2 2303 	umull	r2, r3, r2, r3
 8002c44:	095b      	lsrs	r3, r3, #5
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	f003 030f 	and.w	r3, r3, #15
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	440b      	add	r3, r1
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	461a      	mov	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	609a      	str	r2, [r3, #8]
}
 8002c58:	bf00      	nop
 8002c5a:	3714      	adds	r7, #20
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bc80      	pop	{r7}
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	51eb851f 	.word	0x51eb851f

08002c68 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b088      	sub	sp, #32
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002c76:	2300      	movs	r3, #0
 8002c78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f7ff ff5e 	bl	8002b3c <LL_USART_IsEnabled>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d145      	bne.n	8002d12 <LL_USART_Init+0xaa>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002c8e:	f023 030c 	bic.w	r3, r3, #12
 8002c92:	683a      	ldr	r2, [r7, #0]
 8002c94:	6851      	ldr	r1, [r2, #4]
 8002c96:	683a      	ldr	r2, [r7, #0]
 8002c98:	68d2      	ldr	r2, [r2, #12]
 8002c9a:	4311      	orrs	r1, r2
 8002c9c:	683a      	ldr	r2, [r7, #0]
 8002c9e:	6912      	ldr	r2, [r2, #16]
 8002ca0:	430a      	orrs	r2, r1
 8002ca2:	431a      	orrs	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	4619      	mov	r1, r3
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f7ff ff57 	bl	8002b62 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	695b      	ldr	r3, [r3, #20]
 8002cb8:	4619      	mov	r1, r3
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f7ff ff63 	bl	8002b86 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8002cc0:	f107 0308 	add.w	r3, r7, #8
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7ff fde9 	bl	800289c <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a13      	ldr	r2, [pc, #76]	@ (8002d1c <LL_USART_Init+0xb4>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d102      	bne.n	8002cd8 <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	61bb      	str	r3, [r7, #24]
 8002cd6:	e00c      	b.n	8002cf2 <LL_USART_Init+0x8a>
    }
    else if (USARTx == USART2)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4a11      	ldr	r2, [pc, #68]	@ (8002d20 <LL_USART_Init+0xb8>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d102      	bne.n	8002ce6 <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	61bb      	str	r3, [r7, #24]
 8002ce4:	e005      	b.n	8002cf2 <LL_USART_Init+0x8a>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a0e      	ldr	r2, [pc, #56]	@ (8002d24 <LL_USART_Init+0xbc>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d101      	bne.n	8002cf2 <LL_USART_Init+0x8a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d00c      	beq.n	8002d12 <LL_USART_Init+0xaa>
        && (USART_InitStruct->BaudRate != 0U))
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d008      	beq.n	8002d12 <LL_USART_Init+0xaa>
    {
      status = SUCCESS;
 8002d00:	2300      	movs	r3, #0
 8002d02:	77fb      	strb	r3, [r7, #31]
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->BaudRate);
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8002d08:	461a      	mov	r2, r3
 8002d0a:	69b9      	ldr	r1, [r7, #24]
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f7ff ff4d 	bl	8002bac <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002d12:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3720      	adds	r7, #32
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	40013800 	.word	0x40013800
 8002d20:	40004400 	.word	0x40004400
 8002d24:	40004800 	.word	0x40004800

08002d28 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002d30:	4a03      	ldr	r2, [pc, #12]	@ (8002d40 <LL_SetSystemCoreClock+0x18>)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6013      	str	r3, [r2, #0]
}
 8002d36:	bf00      	nop
 8002d38:	370c      	adds	r7, #12
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bc80      	pop	{r7}
 8002d3e:	4770      	bx	lr
 8002d40:	20000000 	.word	0x20000000

08002d44 <memset>:
 8002d44:	4603      	mov	r3, r0
 8002d46:	4402      	add	r2, r0
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d100      	bne.n	8002d4e <memset+0xa>
 8002d4c:	4770      	bx	lr
 8002d4e:	f803 1b01 	strb.w	r1, [r3], #1
 8002d52:	e7f9      	b.n	8002d48 <memset+0x4>

08002d54 <__libc_init_array>:
 8002d54:	b570      	push	{r4, r5, r6, lr}
 8002d56:	2600      	movs	r6, #0
 8002d58:	4d0c      	ldr	r5, [pc, #48]	@ (8002d8c <__libc_init_array+0x38>)
 8002d5a:	4c0d      	ldr	r4, [pc, #52]	@ (8002d90 <__libc_init_array+0x3c>)
 8002d5c:	1b64      	subs	r4, r4, r5
 8002d5e:	10a4      	asrs	r4, r4, #2
 8002d60:	42a6      	cmp	r6, r4
 8002d62:	d109      	bne.n	8002d78 <__libc_init_array+0x24>
 8002d64:	f000 f81a 	bl	8002d9c <_init>
 8002d68:	2600      	movs	r6, #0
 8002d6a:	4d0a      	ldr	r5, [pc, #40]	@ (8002d94 <__libc_init_array+0x40>)
 8002d6c:	4c0a      	ldr	r4, [pc, #40]	@ (8002d98 <__libc_init_array+0x44>)
 8002d6e:	1b64      	subs	r4, r4, r5
 8002d70:	10a4      	asrs	r4, r4, #2
 8002d72:	42a6      	cmp	r6, r4
 8002d74:	d105      	bne.n	8002d82 <__libc_init_array+0x2e>
 8002d76:	bd70      	pop	{r4, r5, r6, pc}
 8002d78:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d7c:	4798      	blx	r3
 8002d7e:	3601      	adds	r6, #1
 8002d80:	e7ee      	b.n	8002d60 <__libc_init_array+0xc>
 8002d82:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d86:	4798      	blx	r3
 8002d88:	3601      	adds	r6, #1
 8002d8a:	e7f2      	b.n	8002d72 <__libc_init_array+0x1e>
 8002d8c:	08002dd4 	.word	0x08002dd4
 8002d90:	08002dd4 	.word	0x08002dd4
 8002d94:	08002dd4 	.word	0x08002dd4
 8002d98:	08002dd8 	.word	0x08002dd8

08002d9c <_init>:
 8002d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d9e:	bf00      	nop
 8002da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002da2:	bc08      	pop	{r3}
 8002da4:	469e      	mov	lr, r3
 8002da6:	4770      	bx	lr

08002da8 <_fini>:
 8002da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002daa:	bf00      	nop
 8002dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dae:	bc08      	pop	{r3}
 8002db0:	469e      	mov	lr, r3
 8002db2:	4770      	bx	lr
