
Control_LLC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009868  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001048  08009978  08009978  0000a978  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a9c0  0800a9c0  0000c2b4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a9c0  0800a9c0  0000b9c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a9c8  0800a9c8  0000c2b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a9c8  0800a9c8  0000b9c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a9cc  0800a9cc  0000b9cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002b4  20000000  0800a9d0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000414  200002b4  0800ac84  0000c2b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006c8  0800ac84  0000c6c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c2b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bc3e  00000000  00000000  0000c2dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000307f  00000000  00000000  00017f1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf0  00000000  00000000  0001afa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000937  00000000  00000000  0001bc90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001638a  00000000  00000000  0001c5c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eb16  00000000  00000000  00032951  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00068d15  00000000  00000000  00041467  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000aa17c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004614  00000000  00000000  000aa1c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000ae7d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200002b4 	.word	0x200002b4
 800012c:	00000000 	.word	0x00000000
 8000130:	08009960 	.word	0x08009960

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200002b8 	.word	0x200002b8
 800014c:	08009960 	.word	0x08009960

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	@ 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_frsub>:
 8000b7c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b80:	e002      	b.n	8000b88 <__addsf3>
 8000b82:	bf00      	nop

08000b84 <__aeabi_fsub>:
 8000b84:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b88 <__addsf3>:
 8000b88:	0042      	lsls	r2, r0, #1
 8000b8a:	bf1f      	itttt	ne
 8000b8c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b90:	ea92 0f03 	teqne	r2, r3
 8000b94:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b98:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b9c:	d06a      	beq.n	8000c74 <__addsf3+0xec>
 8000b9e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ba2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ba6:	bfc1      	itttt	gt
 8000ba8:	18d2      	addgt	r2, r2, r3
 8000baa:	4041      	eorgt	r1, r0
 8000bac:	4048      	eorgt	r0, r1
 8000bae:	4041      	eorgt	r1, r0
 8000bb0:	bfb8      	it	lt
 8000bb2:	425b      	neglt	r3, r3
 8000bb4:	2b19      	cmp	r3, #25
 8000bb6:	bf88      	it	hi
 8000bb8:	4770      	bxhi	lr
 8000bba:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000bbe:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bc2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bc6:	bf18      	it	ne
 8000bc8:	4240      	negne	r0, r0
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bd2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bd6:	bf18      	it	ne
 8000bd8:	4249      	negne	r1, r1
 8000bda:	ea92 0f03 	teq	r2, r3
 8000bde:	d03f      	beq.n	8000c60 <__addsf3+0xd8>
 8000be0:	f1a2 0201 	sub.w	r2, r2, #1
 8000be4:	fa41 fc03 	asr.w	ip, r1, r3
 8000be8:	eb10 000c 	adds.w	r0, r0, ip
 8000bec:	f1c3 0320 	rsb	r3, r3, #32
 8000bf0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bf4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bf8:	d502      	bpl.n	8000c00 <__addsf3+0x78>
 8000bfa:	4249      	negs	r1, r1
 8000bfc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c00:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c04:	d313      	bcc.n	8000c2e <__addsf3+0xa6>
 8000c06:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c0a:	d306      	bcc.n	8000c1a <__addsf3+0x92>
 8000c0c:	0840      	lsrs	r0, r0, #1
 8000c0e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c12:	f102 0201 	add.w	r2, r2, #1
 8000c16:	2afe      	cmp	r2, #254	@ 0xfe
 8000c18:	d251      	bcs.n	8000cbe <__addsf3+0x136>
 8000c1a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c22:	bf08      	it	eq
 8000c24:	f020 0001 	biceq.w	r0, r0, #1
 8000c28:	ea40 0003 	orr.w	r0, r0, r3
 8000c2c:	4770      	bx	lr
 8000c2e:	0049      	lsls	r1, r1, #1
 8000c30:	eb40 0000 	adc.w	r0, r0, r0
 8000c34:	3a01      	subs	r2, #1
 8000c36:	bf28      	it	cs
 8000c38:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c3c:	d2ed      	bcs.n	8000c1a <__addsf3+0x92>
 8000c3e:	fab0 fc80 	clz	ip, r0
 8000c42:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c46:	ebb2 020c 	subs.w	r2, r2, ip
 8000c4a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c4e:	bfaa      	itet	ge
 8000c50:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c54:	4252      	neglt	r2, r2
 8000c56:	4318      	orrge	r0, r3
 8000c58:	bfbc      	itt	lt
 8000c5a:	40d0      	lsrlt	r0, r2
 8000c5c:	4318      	orrlt	r0, r3
 8000c5e:	4770      	bx	lr
 8000c60:	f092 0f00 	teq	r2, #0
 8000c64:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c68:	bf06      	itte	eq
 8000c6a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c6e:	3201      	addeq	r2, #1
 8000c70:	3b01      	subne	r3, #1
 8000c72:	e7b5      	b.n	8000be0 <__addsf3+0x58>
 8000c74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c7c:	bf18      	it	ne
 8000c7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c82:	d021      	beq.n	8000cc8 <__addsf3+0x140>
 8000c84:	ea92 0f03 	teq	r2, r3
 8000c88:	d004      	beq.n	8000c94 <__addsf3+0x10c>
 8000c8a:	f092 0f00 	teq	r2, #0
 8000c8e:	bf08      	it	eq
 8000c90:	4608      	moveq	r0, r1
 8000c92:	4770      	bx	lr
 8000c94:	ea90 0f01 	teq	r0, r1
 8000c98:	bf1c      	itt	ne
 8000c9a:	2000      	movne	r0, #0
 8000c9c:	4770      	bxne	lr
 8000c9e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000ca2:	d104      	bne.n	8000cae <__addsf3+0x126>
 8000ca4:	0040      	lsls	r0, r0, #1
 8000ca6:	bf28      	it	cs
 8000ca8:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000cac:	4770      	bx	lr
 8000cae:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000cb2:	bf3c      	itt	cc
 8000cb4:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000cb8:	4770      	bxcc	lr
 8000cba:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cbe:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cc2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc6:	4770      	bx	lr
 8000cc8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ccc:	bf16      	itet	ne
 8000cce:	4608      	movne	r0, r1
 8000cd0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cd4:	4601      	movne	r1, r0
 8000cd6:	0242      	lsls	r2, r0, #9
 8000cd8:	bf06      	itte	eq
 8000cda:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cde:	ea90 0f01 	teqeq	r0, r1
 8000ce2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_ui2f>:
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e004      	b.n	8000cf8 <__aeabi_i2f+0x8>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_i2f>:
 8000cf0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cf4:	bf48      	it	mi
 8000cf6:	4240      	negmi	r0, r0
 8000cf8:	ea5f 0c00 	movs.w	ip, r0
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d04:	4601      	mov	r1, r0
 8000d06:	f04f 0000 	mov.w	r0, #0
 8000d0a:	e01c      	b.n	8000d46 <__aeabi_l2f+0x2a>

08000d0c <__aeabi_ul2f>:
 8000d0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e00a      	b.n	8000d30 <__aeabi_l2f+0x14>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_l2f>:
 8000d1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d28:	d502      	bpl.n	8000d30 <__aeabi_l2f+0x14>
 8000d2a:	4240      	negs	r0, r0
 8000d2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d30:	ea5f 0c01 	movs.w	ip, r1
 8000d34:	bf02      	ittt	eq
 8000d36:	4684      	moveq	ip, r0
 8000d38:	4601      	moveq	r1, r0
 8000d3a:	2000      	moveq	r0, #0
 8000d3c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d40:	bf08      	it	eq
 8000d42:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d46:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d4a:	fabc f28c 	clz	r2, ip
 8000d4e:	3a08      	subs	r2, #8
 8000d50:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d54:	db10      	blt.n	8000d78 <__aeabi_l2f+0x5c>
 8000d56:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d60:	f1c2 0220 	rsb	r2, r2, #32
 8000d64:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d68:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6c:	eb43 0002 	adc.w	r0, r3, r2
 8000d70:	bf08      	it	eq
 8000d72:	f020 0001 	biceq.w	r0, r0, #1
 8000d76:	4770      	bx	lr
 8000d78:	f102 0220 	add.w	r2, r2, #32
 8000d7c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d80:	f1c2 0220 	rsb	r2, r2, #32
 8000d84:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d88:	fa21 f202 	lsr.w	r2, r1, r2
 8000d8c:	eb43 0002 	adc.w	r0, r3, r2
 8000d90:	bf08      	it	eq
 8000d92:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_fmul>:
 8000d98:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d9c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000da0:	bf1e      	ittt	ne
 8000da2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000da6:	ea92 0f0c 	teqne	r2, ip
 8000daa:	ea93 0f0c 	teqne	r3, ip
 8000dae:	d06f      	beq.n	8000e90 <__aeabi_fmul+0xf8>
 8000db0:	441a      	add	r2, r3
 8000db2:	ea80 0c01 	eor.w	ip, r0, r1
 8000db6:	0240      	lsls	r0, r0, #9
 8000db8:	bf18      	it	ne
 8000dba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dbe:	d01e      	beq.n	8000dfe <__aeabi_fmul+0x66>
 8000dc0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000dc4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dc8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dcc:	fba0 3101 	umull	r3, r1, r0, r1
 8000dd0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dd4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dd8:	bf3e      	ittt	cc
 8000dda:	0049      	lslcc	r1, r1, #1
 8000ddc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000de0:	005b      	lslcc	r3, r3, #1
 8000de2:	ea40 0001 	orr.w	r0, r0, r1
 8000de6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dea:	2afd      	cmp	r2, #253	@ 0xfd
 8000dec:	d81d      	bhi.n	8000e2a <__aeabi_fmul+0x92>
 8000dee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000df2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000df6:	bf08      	it	eq
 8000df8:	f020 0001 	biceq.w	r0, r0, #1
 8000dfc:	4770      	bx	lr
 8000dfe:	f090 0f00 	teq	r0, #0
 8000e02:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000e06:	bf08      	it	eq
 8000e08:	0249      	lsleq	r1, r1, #9
 8000e0a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e0e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e12:	3a7f      	subs	r2, #127	@ 0x7f
 8000e14:	bfc2      	ittt	gt
 8000e16:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e1a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e1e:	4770      	bxgt	lr
 8000e20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e24:	f04f 0300 	mov.w	r3, #0
 8000e28:	3a01      	subs	r2, #1
 8000e2a:	dc5d      	bgt.n	8000ee8 <__aeabi_fmul+0x150>
 8000e2c:	f112 0f19 	cmn.w	r2, #25
 8000e30:	bfdc      	itt	le
 8000e32:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e36:	4770      	bxle	lr
 8000e38:	f1c2 0200 	rsb	r2, r2, #0
 8000e3c:	0041      	lsls	r1, r0, #1
 8000e3e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e42:	f1c2 0220 	rsb	r2, r2, #32
 8000e46:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e4a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e4e:	f140 0000 	adc.w	r0, r0, #0
 8000e52:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e56:	bf08      	it	eq
 8000e58:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5c:	4770      	bx	lr
 8000e5e:	f092 0f00 	teq	r2, #0
 8000e62:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e66:	bf02      	ittt	eq
 8000e68:	0040      	lsleq	r0, r0, #1
 8000e6a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e6e:	3a01      	subeq	r2, #1
 8000e70:	d0f9      	beq.n	8000e66 <__aeabi_fmul+0xce>
 8000e72:	ea40 000c 	orr.w	r0, r0, ip
 8000e76:	f093 0f00 	teq	r3, #0
 8000e7a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e7e:	bf02      	ittt	eq
 8000e80:	0049      	lsleq	r1, r1, #1
 8000e82:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e86:	3b01      	subeq	r3, #1
 8000e88:	d0f9      	beq.n	8000e7e <__aeabi_fmul+0xe6>
 8000e8a:	ea41 010c 	orr.w	r1, r1, ip
 8000e8e:	e78f      	b.n	8000db0 <__aeabi_fmul+0x18>
 8000e90:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e94:	ea92 0f0c 	teq	r2, ip
 8000e98:	bf18      	it	ne
 8000e9a:	ea93 0f0c 	teqne	r3, ip
 8000e9e:	d00a      	beq.n	8000eb6 <__aeabi_fmul+0x11e>
 8000ea0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ea4:	bf18      	it	ne
 8000ea6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000eaa:	d1d8      	bne.n	8000e5e <__aeabi_fmul+0xc6>
 8000eac:	ea80 0001 	eor.w	r0, r0, r1
 8000eb0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000eb4:	4770      	bx	lr
 8000eb6:	f090 0f00 	teq	r0, #0
 8000eba:	bf17      	itett	ne
 8000ebc:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000ec0:	4608      	moveq	r0, r1
 8000ec2:	f091 0f00 	teqne	r1, #0
 8000ec6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eca:	d014      	beq.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ecc:	ea92 0f0c 	teq	r2, ip
 8000ed0:	d101      	bne.n	8000ed6 <__aeabi_fmul+0x13e>
 8000ed2:	0242      	lsls	r2, r0, #9
 8000ed4:	d10f      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ed6:	ea93 0f0c 	teq	r3, ip
 8000eda:	d103      	bne.n	8000ee4 <__aeabi_fmul+0x14c>
 8000edc:	024b      	lsls	r3, r1, #9
 8000ede:	bf18      	it	ne
 8000ee0:	4608      	movne	r0, r1
 8000ee2:	d108      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ee4:	ea80 0001 	eor.w	r0, r0, r1
 8000ee8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000eec:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ef0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ef4:	4770      	bx	lr
 8000ef6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000efa:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000efe:	4770      	bx	lr

08000f00 <__aeabi_fdiv>:
 8000f00:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000f04:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f08:	bf1e      	ittt	ne
 8000f0a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f0e:	ea92 0f0c 	teqne	r2, ip
 8000f12:	ea93 0f0c 	teqne	r3, ip
 8000f16:	d069      	beq.n	8000fec <__aeabi_fdiv+0xec>
 8000f18:	eba2 0203 	sub.w	r2, r2, r3
 8000f1c:	ea80 0c01 	eor.w	ip, r0, r1
 8000f20:	0249      	lsls	r1, r1, #9
 8000f22:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f26:	d037      	beq.n	8000f98 <__aeabi_fdiv+0x98>
 8000f28:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f2c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f30:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f34:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f38:	428b      	cmp	r3, r1
 8000f3a:	bf38      	it	cc
 8000f3c:	005b      	lslcc	r3, r3, #1
 8000f3e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f42:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f46:	428b      	cmp	r3, r1
 8000f48:	bf24      	itt	cs
 8000f4a:	1a5b      	subcs	r3, r3, r1
 8000f4c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f50:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f54:	bf24      	itt	cs
 8000f56:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f5a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f5e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f62:	bf24      	itt	cs
 8000f64:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f68:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f6c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f70:	bf24      	itt	cs
 8000f72:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f76:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f7a:	011b      	lsls	r3, r3, #4
 8000f7c:	bf18      	it	ne
 8000f7e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f82:	d1e0      	bne.n	8000f46 <__aeabi_fdiv+0x46>
 8000f84:	2afd      	cmp	r2, #253	@ 0xfd
 8000f86:	f63f af50 	bhi.w	8000e2a <__aeabi_fmul+0x92>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f90:	bf08      	it	eq
 8000f92:	f020 0001 	biceq.w	r0, r0, #1
 8000f96:	4770      	bx	lr
 8000f98:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f9c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fa0:	327f      	adds	r2, #127	@ 0x7f
 8000fa2:	bfc2      	ittt	gt
 8000fa4:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000fa8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fac:	4770      	bxgt	lr
 8000fae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000fb2:	f04f 0300 	mov.w	r3, #0
 8000fb6:	3a01      	subs	r2, #1
 8000fb8:	e737      	b.n	8000e2a <__aeabi_fmul+0x92>
 8000fba:	f092 0f00 	teq	r2, #0
 8000fbe:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fc2:	bf02      	ittt	eq
 8000fc4:	0040      	lsleq	r0, r0, #1
 8000fc6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fca:	3a01      	subeq	r2, #1
 8000fcc:	d0f9      	beq.n	8000fc2 <__aeabi_fdiv+0xc2>
 8000fce:	ea40 000c 	orr.w	r0, r0, ip
 8000fd2:	f093 0f00 	teq	r3, #0
 8000fd6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fda:	bf02      	ittt	eq
 8000fdc:	0049      	lsleq	r1, r1, #1
 8000fde:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fe2:	3b01      	subeq	r3, #1
 8000fe4:	d0f9      	beq.n	8000fda <__aeabi_fdiv+0xda>
 8000fe6:	ea41 010c 	orr.w	r1, r1, ip
 8000fea:	e795      	b.n	8000f18 <__aeabi_fdiv+0x18>
 8000fec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ff0:	ea92 0f0c 	teq	r2, ip
 8000ff4:	d108      	bne.n	8001008 <__aeabi_fdiv+0x108>
 8000ff6:	0242      	lsls	r2, r0, #9
 8000ff8:	f47f af7d 	bne.w	8000ef6 <__aeabi_fmul+0x15e>
 8000ffc:	ea93 0f0c 	teq	r3, ip
 8001000:	f47f af70 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 8001004:	4608      	mov	r0, r1
 8001006:	e776      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001008:	ea93 0f0c 	teq	r3, ip
 800100c:	d104      	bne.n	8001018 <__aeabi_fdiv+0x118>
 800100e:	024b      	lsls	r3, r1, #9
 8001010:	f43f af4c 	beq.w	8000eac <__aeabi_fmul+0x114>
 8001014:	4608      	mov	r0, r1
 8001016:	e76e      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001018:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800101c:	bf18      	it	ne
 800101e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8001022:	d1ca      	bne.n	8000fba <__aeabi_fdiv+0xba>
 8001024:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001028:	f47f af5c 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 800102c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8001030:	f47f af3c 	bne.w	8000eac <__aeabi_fmul+0x114>
 8001034:	e75f      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001036:	bf00      	nop

08001038 <__gesf2>:
 8001038:	f04f 3cff 	mov.w	ip, #4294967295
 800103c:	e006      	b.n	800104c <__cmpsf2+0x4>
 800103e:	bf00      	nop

08001040 <__lesf2>:
 8001040:	f04f 0c01 	mov.w	ip, #1
 8001044:	e002      	b.n	800104c <__cmpsf2+0x4>
 8001046:	bf00      	nop

08001048 <__cmpsf2>:
 8001048:	f04f 0c01 	mov.w	ip, #1
 800104c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001050:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001054:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001058:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800105c:	bf18      	it	ne
 800105e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001062:	d011      	beq.n	8001088 <__cmpsf2+0x40>
 8001064:	b001      	add	sp, #4
 8001066:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800106a:	bf18      	it	ne
 800106c:	ea90 0f01 	teqne	r0, r1
 8001070:	bf58      	it	pl
 8001072:	ebb2 0003 	subspl.w	r0, r2, r3
 8001076:	bf88      	it	hi
 8001078:	17c8      	asrhi	r0, r1, #31
 800107a:	bf38      	it	cc
 800107c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001080:	bf18      	it	ne
 8001082:	f040 0001 	orrne.w	r0, r0, #1
 8001086:	4770      	bx	lr
 8001088:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800108c:	d102      	bne.n	8001094 <__cmpsf2+0x4c>
 800108e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001092:	d105      	bne.n	80010a0 <__cmpsf2+0x58>
 8001094:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001098:	d1e4      	bne.n	8001064 <__cmpsf2+0x1c>
 800109a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800109e:	d0e1      	beq.n	8001064 <__cmpsf2+0x1c>
 80010a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop

080010a8 <__aeabi_cfrcmple>:
 80010a8:	4684      	mov	ip, r0
 80010aa:	4608      	mov	r0, r1
 80010ac:	4661      	mov	r1, ip
 80010ae:	e7ff      	b.n	80010b0 <__aeabi_cfcmpeq>

080010b0 <__aeabi_cfcmpeq>:
 80010b0:	b50f      	push	{r0, r1, r2, r3, lr}
 80010b2:	f7ff ffc9 	bl	8001048 <__cmpsf2>
 80010b6:	2800      	cmp	r0, #0
 80010b8:	bf48      	it	mi
 80010ba:	f110 0f00 	cmnmi.w	r0, #0
 80010be:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010c0 <__aeabi_fcmpeq>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff fff4 	bl	80010b0 <__aeabi_cfcmpeq>
 80010c8:	bf0c      	ite	eq
 80010ca:	2001      	moveq	r0, #1
 80010cc:	2000      	movne	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmplt>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffea 	bl	80010b0 <__aeabi_cfcmpeq>
 80010dc:	bf34      	ite	cc
 80010de:	2001      	movcc	r0, #1
 80010e0:	2000      	movcs	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmple>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffe0 	bl	80010b0 <__aeabi_cfcmpeq>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpge>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffd2 	bl	80010a8 <__aeabi_cfrcmple>
 8001104:	bf94      	ite	ls
 8001106:	2001      	movls	r0, #1
 8001108:	2000      	movhi	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpgt>:
 8001110:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001114:	f7ff ffc8 	bl	80010a8 <__aeabi_cfrcmple>
 8001118:	bf34      	ite	cc
 800111a:	2001      	movcc	r0, #1
 800111c:	2000      	movcs	r0, #0
 800111e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001122:	bf00      	nop

08001124 <__aeabi_f2uiz>:
 8001124:	0042      	lsls	r2, r0, #1
 8001126:	d20e      	bcs.n	8001146 <__aeabi_f2uiz+0x22>
 8001128:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800112c:	d30b      	bcc.n	8001146 <__aeabi_f2uiz+0x22>
 800112e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001132:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001136:	d409      	bmi.n	800114c <__aeabi_f2uiz+0x28>
 8001138:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800113c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001140:	fa23 f002 	lsr.w	r0, r3, r2
 8001144:	4770      	bx	lr
 8001146:	f04f 0000 	mov.w	r0, #0
 800114a:	4770      	bx	lr
 800114c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001150:	d101      	bne.n	8001156 <__aeabi_f2uiz+0x32>
 8001152:	0242      	lsls	r2, r0, #9
 8001154:	d102      	bne.n	800115c <__aeabi_f2uiz+0x38>
 8001156:	f04f 30ff 	mov.w	r0, #4294967295
 800115a:	4770      	bx	lr
 800115c:	f04f 0000 	mov.w	r0, #0
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop

08001164 <__aeabi_d2lz>:
 8001164:	b538      	push	{r3, r4, r5, lr}
 8001166:	2200      	movs	r2, #0
 8001168:	2300      	movs	r3, #0
 800116a:	4604      	mov	r4, r0
 800116c:	460d      	mov	r5, r1
 800116e:	f7ff fc2f 	bl	80009d0 <__aeabi_dcmplt>
 8001172:	b928      	cbnz	r0, 8001180 <__aeabi_d2lz+0x1c>
 8001174:	4620      	mov	r0, r4
 8001176:	4629      	mov	r1, r5
 8001178:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800117c:	f000 b80a 	b.w	8001194 <__aeabi_d2ulz>
 8001180:	4620      	mov	r0, r4
 8001182:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001186:	f000 f805 	bl	8001194 <__aeabi_d2ulz>
 800118a:	4240      	negs	r0, r0
 800118c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001190:	bd38      	pop	{r3, r4, r5, pc}
 8001192:	bf00      	nop

08001194 <__aeabi_d2ulz>:
 8001194:	b5d0      	push	{r4, r6, r7, lr}
 8001196:	2200      	movs	r2, #0
 8001198:	4b0b      	ldr	r3, [pc, #44]	@ (80011c8 <__aeabi_d2ulz+0x34>)
 800119a:	4606      	mov	r6, r0
 800119c:	460f      	mov	r7, r1
 800119e:	f7ff f9a5 	bl	80004ec <__aeabi_dmul>
 80011a2:	f7ff fc7b 	bl	8000a9c <__aeabi_d2uiz>
 80011a6:	4604      	mov	r4, r0
 80011a8:	f7ff f926 	bl	80003f8 <__aeabi_ui2d>
 80011ac:	2200      	movs	r2, #0
 80011ae:	4b07      	ldr	r3, [pc, #28]	@ (80011cc <__aeabi_d2ulz+0x38>)
 80011b0:	f7ff f99c 	bl	80004ec <__aeabi_dmul>
 80011b4:	4602      	mov	r2, r0
 80011b6:	460b      	mov	r3, r1
 80011b8:	4630      	mov	r0, r6
 80011ba:	4639      	mov	r1, r7
 80011bc:	f7fe ffde 	bl	800017c <__aeabi_dsub>
 80011c0:	f7ff fc6c 	bl	8000a9c <__aeabi_d2uiz>
 80011c4:	4621      	mov	r1, r4
 80011c6:	bdd0      	pop	{r4, r6, r7, pc}
 80011c8:	3df00000 	.word	0x3df00000
 80011cc:	41f00000 	.word	0x41f00000

080011d0 <CmdLineProcess>:
 * @return Returns CMDLINE_OK if successful, or an error code if an issue
 *         occurs (e.g., command not found, too many arguments).
 */
uint8_t
CmdLineProcess (char *pcCmdLine)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  char          *pcChar;
  uint_fast8_t   ui8Argc;
  bool           bFindArg = true;
 80011d8:	2301      	movs	r3, #1
 80011da:	73fb      	strb	r3, [r7, #15]

  /**
   * Initialize the argument counter, and point to the beginning of the
   * command line string.
   */
  ui8Argc = 0;
 80011dc:	2300      	movs	r3, #0
 80011de:	613b      	str	r3, [r7, #16]
  pcChar  = pcCmdLine;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	617b      	str	r3, [r7, #20]

  /**
   * Advance through the command line until a zero character is found.
   */
  while (*pcChar)
 80011e4:	e01f      	b.n	8001226 <CmdLineProcess+0x56>
  {
    /**
     * If there is a space, then replace it with a zero, and set the flag
     * to search for the next argument.
     */
    if (*pcChar == ' ')
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	2b20      	cmp	r3, #32
 80011ec:	d105      	bne.n	80011fa <CmdLineProcess+0x2a>
    {
      *pcChar  = 0;
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	2200      	movs	r2, #0
 80011f2:	701a      	strb	r2, [r3, #0]
      bFindArg = true;
 80011f4:	2301      	movs	r3, #1
 80011f6:	73fb      	strb	r3, [r7, #15]
 80011f8:	e012      	b.n	8001220 <CmdLineProcess+0x50>
    {
      /**
       * If bFindArg is set, then that means we are looking for the start
       * of the next argument.
       */
      if (bFindArg)
 80011fa:	7bfb      	ldrb	r3, [r7, #15]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d00f      	beq.n	8001220 <CmdLineProcess+0x50>
        /**
         * As long as the maximum number of arguments has not been
         * reached, then save the pointer to the start of this new arg
         * in the argv array, and increment the count of args, argc.
         */
        if (ui8Argc < CMDLINE_MAX_ARGS)
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	2b07      	cmp	r3, #7
 8001204:	d80a      	bhi.n	800121c <CmdLineProcess+0x4c>
        {
          g_ppcArgv[ui8Argc] = pcChar;
 8001206:	491d      	ldr	r1, [pc, #116]	@ (800127c <CmdLineProcess+0xac>)
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	697a      	ldr	r2, [r7, #20]
 800120c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
          ui8Argc++;
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	3301      	adds	r3, #1
 8001214:	613b      	str	r3, [r7, #16]
          bFindArg = false;
 8001216:	2300      	movs	r3, #0
 8001218:	73fb      	strb	r3, [r7, #15]
 800121a:	e001      	b.n	8001220 <CmdLineProcess+0x50>
         * The maximum number of arguments has been reached so return
         * the error.
         */
        else
        {
          return (CMDLINE_TOO_MANY_ARGS);
 800121c:	2302      	movs	r3, #2
 800121e:	e028      	b.n	8001272 <CmdLineProcess+0xa2>
      }
    }
    /**
     * Advance to the next character in the command line.
     */
    pcChar++;
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	3301      	adds	r3, #1
 8001224:	617b      	str	r3, [r7, #20]
  while (*pcChar)
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d1db      	bne.n	80011e6 <CmdLineProcess+0x16>
  }

  /**
   * If one or more arguments was found, then process the command.
   */
  if (ui8Argc)
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d01d      	beq.n	8001270 <CmdLineProcess+0xa0>
  {
    /**
     * Start at the beginning of the command table, to look for a matching
     * command.
     */
    psCmdEntry = &g_psCmdTable[0];
 8001234:	4b12      	ldr	r3, [pc, #72]	@ (8001280 <CmdLineProcess+0xb0>)
 8001236:	60bb      	str	r3, [r7, #8]

    /**
     * Search through the command table until a null command string is
     * found, which marks the end of the table.
     */
    while (psCmdEntry->pcCmd)
 8001238:	e016      	b.n	8001268 <CmdLineProcess+0x98>
      /**
       * If this command entry command string matches argv[0], then call
       * the function for this command, passing the command line
       * arguments.
       */
      if (!strcmp(g_ppcArgv[0], psCmdEntry->pcCmd))
 800123a:	4b10      	ldr	r3, [pc, #64]	@ (800127c <CmdLineProcess+0xac>)
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4619      	mov	r1, r3
 8001244:	4610      	mov	r0, r2
 8001246:	f7fe ff83 	bl	8000150 <strcmp>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d108      	bne.n	8001262 <CmdLineProcess+0x92>
      {
        return (psCmdEntry->pfnCmd(ui8Argc, g_ppcArgv));
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	4909      	ldr	r1, [pc, #36]	@ (800127c <CmdLineProcess+0xac>)
 8001258:	4610      	mov	r0, r2
 800125a:	4798      	blx	r3
 800125c:	4603      	mov	r3, r0
 800125e:	b2db      	uxtb	r3, r3
 8001260:	e007      	b.n	8001272 <CmdLineProcess+0xa2>
      }
      /**
       * Not found, so advance to the next entry.
       */
      psCmdEntry++;
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	330c      	adds	r3, #12
 8001266:	60bb      	str	r3, [r7, #8]
    while (psCmdEntry->pcCmd)
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d1e4      	bne.n	800123a <CmdLineProcess+0x6a>

  /**
   * Fall through to here means that no matching command was found, so return
   * an error.
   */
  return (CMDLINE_BAD_CMD);
 8001270:	2301      	movs	r3, #1
 8001272:	4618      	mov	r0, r3
 8001274:	3718      	adds	r7, #24
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	200002d0 	.word	0x200002d0
 8001280:	20000028 	.word	0x20000028

08001284 <APP_COMMAND_Init>:
 *   PUBLIC FUNCTIONS
 **********************/

void
APP_COMMAND_Init (void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  BSP_UART_Config(&uart_cfg_cml, USART1, USART1_IRQn);
 8001288:	2225      	movs	r2, #37	@ 0x25
 800128a:	4906      	ldr	r1, [pc, #24]	@ (80012a4 <APP_COMMAND_Init+0x20>)
 800128c:	4806      	ldr	r0, [pc, #24]	@ (80012a8 <APP_COMMAND_Init+0x24>)
 800128e:	f001 fd39 	bl	8002d04 <BSP_UART_Config>
  BSP_UART_SendString(&uart_cfg_cml, "> LLC CONTROL FIRMWARE\r\n");
 8001292:	4906      	ldr	r1, [pc, #24]	@ (80012ac <APP_COMMAND_Init+0x28>)
 8001294:	4804      	ldr	r0, [pc, #16]	@ (80012a8 <APP_COMMAND_Init+0x24>)
 8001296:	f001 fd9b 	bl	8002dd0 <BSP_UART_SendString>

  // Reset Data
  s_commandBufferIndex = 0;
 800129a:	4b05      	ldr	r3, [pc, #20]	@ (80012b0 <APP_COMMAND_Init+0x2c>)
 800129c:	2200      	movs	r2, #0
 800129e:	701a      	strb	r2, [r3, #0]
}
 80012a0:	bf00      	nop
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	40013800 	.word	0x40013800
 80012a8:	200003f4 	.word	0x200003f4
 80012ac:	08009bd8 	.word	0x08009bd8
 80012b0:	200003f3 	.word	0x200003f3

080012b4 <APP_COMMAND_CreateTask>:

void
APP_COMMAND_CreateTask (void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  SCH_TASK_CreateTask(&s_CommandTaskContext.taskHandle,
 80012b8:	4902      	ldr	r1, [pc, #8]	@ (80012c4 <APP_COMMAND_CreateTask+0x10>)
 80012ba:	4803      	ldr	r0, [pc, #12]	@ (80012c8 <APP_COMMAND_CreateTask+0x14>)
 80012bc:	f004 f8c2 	bl	8005444 <SCH_TASK_CreateTask>
                      &s_CommandTaskContext.taskProperty);
}
 80012c0:	bf00      	nop
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	2000001c 	.word	0x2000001c
 80012c8:	20000018 	.word	0x20000018

080012cc <APP_COMMAND_Help>:
 * @param argv The argument list.
 * @return CMDLINE_OK on success.
 */
int
APP_COMMAND_Help (int argc, char *argv[])
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	6039      	str	r1, [r7, #0]
  tCmdLineEntry *pEntry;

  BSP_UART_SendString(&uart_cfg_cml, "\nAvailable commands\r\n");
 80012d6:	4913      	ldr	r1, [pc, #76]	@ (8001324 <APP_COMMAND_Help+0x58>)
 80012d8:	4813      	ldr	r0, [pc, #76]	@ (8001328 <APP_COMMAND_Help+0x5c>)
 80012da:	f001 fd79 	bl	8002dd0 <BSP_UART_SendString>
  BSP_UART_SendString(&uart_cfg_cml, "------------------\r\n");
 80012de:	4913      	ldr	r1, [pc, #76]	@ (800132c <APP_COMMAND_Help+0x60>)
 80012e0:	4811      	ldr	r0, [pc, #68]	@ (8001328 <APP_COMMAND_Help+0x5c>)
 80012e2:	f001 fd75 	bl	8002dd0 <BSP_UART_SendString>

  // Point at the beginning of the command table.
  pEntry = &g_psCmdTable[0];
 80012e6:	4b12      	ldr	r3, [pc, #72]	@ (8001330 <APP_COMMAND_Help+0x64>)
 80012e8:	60fb      	str	r3, [r7, #12]

  while (pEntry->pcCmd)
 80012ea:	e012      	b.n	8001312 <APP_COMMAND_Help+0x46>
  {
    // Print the command name and the brief description.
    BSP_UART_SendString(&uart_cfg_cml, pEntry->pcCmd);
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4619      	mov	r1, r3
 80012f2:	480d      	ldr	r0, [pc, #52]	@ (8001328 <APP_COMMAND_Help+0x5c>)
 80012f4:	f001 fd6c 	bl	8002dd0 <BSP_UART_SendString>
    BSP_UART_SendString(&uart_cfg_cml, pEntry->pcHelp);
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	4619      	mov	r1, r3
 80012fe:	480a      	ldr	r0, [pc, #40]	@ (8001328 <APP_COMMAND_Help+0x5c>)
 8001300:	f001 fd66 	bl	8002dd0 <BSP_UART_SendString>
    BSP_UART_SendString(&uart_cfg_cml, "\r\n");
 8001304:	490b      	ldr	r1, [pc, #44]	@ (8001334 <APP_COMMAND_Help+0x68>)
 8001306:	4808      	ldr	r0, [pc, #32]	@ (8001328 <APP_COMMAND_Help+0x5c>)
 8001308:	f001 fd62 	bl	8002dd0 <BSP_UART_SendString>

    // Advance to the next entry in the table.
    pEntry++;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	330c      	adds	r3, #12
 8001310:	60fb      	str	r3, [r7, #12]
  while (pEntry->pcCmd)
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d1e8      	bne.n	80012ec <APP_COMMAND_Help+0x20>
  }

  return (CMDLINE_OK);
 800131a:	2300      	movs	r3, #0
}
 800131c:	4618      	mov	r0, r3
 800131e:	3710      	adds	r7, #16
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	08009bf4 	.word	0x08009bf4
 8001328:	200003f4 	.word	0x200003f4
 800132c:	08009c0c 	.word	0x08009c0c
 8001330:	20000028 	.word	0x20000028
 8001334:	08009c24 	.word	0x08009c24

08001338 <APP_COMMAND_ReadCurrentOutput>:

// Format: read_current
int
APP_COMMAND_ReadCurrentOutput (int argc, char *argv[])
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b08a      	sub	sp, #40	@ 0x28
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]
  if (argc < 1)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2b00      	cmp	r3, #0
 8001346:	dc01      	bgt.n	800134c <APP_COMMAND_ReadCurrentOutput+0x14>
  {
    return CMDLINE_TOO_FEW_ARGS;
 8001348:	2303      	movs	r3, #3
 800134a:	e018      	b.n	800137e <APP_COMMAND_ReadCurrentOutput+0x46>
  }
  if (argc > 1)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2b01      	cmp	r3, #1
 8001350:	dd01      	ble.n	8001356 <APP_COMMAND_ReadCurrentOutput+0x1e>
  {
    return CMDLINE_TOO_MANY_ARGS;
 8001352:	2302      	movs	r3, #2
 8001354:	e013      	b.n	800137e <APP_COMMAND_ReadCurrentOutput+0x46>
  }

  char c_msg[30];
  sprintf(c_msg, "Current: %.2f\n\r", s_control_llc_data.f_output_current);
 8001356:	4b0c      	ldr	r3, [pc, #48]	@ (8001388 <APP_COMMAND_ReadCurrentOutput+0x50>)
 8001358:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff f86d 	bl	800043c <__aeabi_f2d>
 8001362:	4602      	mov	r2, r0
 8001364:	460b      	mov	r3, r1
 8001366:	f107 0008 	add.w	r0, r7, #8
 800136a:	4908      	ldr	r1, [pc, #32]	@ (800138c <APP_COMMAND_ReadCurrentOutput+0x54>)
 800136c:	f005 fe02 	bl	8006f74 <siprintf>

  BSP_UART_SendString(&uart_cfg_cml, c_msg);
 8001370:	f107 0308 	add.w	r3, r7, #8
 8001374:	4619      	mov	r1, r3
 8001376:	4806      	ldr	r0, [pc, #24]	@ (8001390 <APP_COMMAND_ReadCurrentOutput+0x58>)
 8001378:	f001 fd2a 	bl	8002dd0 <BSP_UART_SendString>

  return (CMDLINE_OK);
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	3728      	adds	r7, #40	@ 0x28
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20000454 	.word	0x20000454
 800138c:	08009c28 	.word	0x08009c28
 8001390:	200003f4 	.word	0x200003f4

08001394 <APP_COMMAND_SetCurrentOutput>:

// Format: set_current current(A)
int
APP_COMMAND_SetCurrentOutput (int argc, char *argv[])
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
  if (argc < 2)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	dc01      	bgt.n	80013a8 <APP_COMMAND_SetCurrentOutput+0x14>
  {
    return CMDLINE_TOO_FEW_ARGS;
 80013a4:	2303      	movs	r3, #3
 80013a6:	e020      	b.n	80013ea <APP_COMMAND_SetCurrentOutput+0x56>
  }
  if (argc > 2)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	dd01      	ble.n	80013b2 <APP_COMMAND_SetCurrentOutput+0x1e>
  {
    return CMDLINE_TOO_MANY_ARGS;
 80013ae:	2302      	movs	r3, #2
 80013b0:	e01b      	b.n	80013ea <APP_COMMAND_SetCurrentOutput+0x56>
  }
  float f_value_temp = atof(argv[1]);
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	3304      	adds	r3, #4
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f004 f9fd 	bl	80057b8 <atof>
 80013be:	4602      	mov	r2, r0
 80013c0:	460b      	mov	r3, r1
 80013c2:	4610      	mov	r0, r2
 80013c4:	4619      	mov	r1, r3
 80013c6:	f7ff fb89 	bl	8000adc <__aeabi_d2f>
 80013ca:	4603      	mov	r3, r0
 80013cc:	60fb      	str	r3, [r7, #12]
  if (f_value_temp > CURRENT_START_THRESHOLD)
 80013ce:	4909      	ldr	r1, [pc, #36]	@ (80013f4 <APP_COMMAND_SetCurrentOutput+0x60>)
 80013d0:	68f8      	ldr	r0, [r7, #12]
 80013d2:	f7ff fe9d 	bl	8001110 <__aeabi_fcmpgt>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <APP_COMMAND_SetCurrentOutput+0x4c>
  {
    return CMDLINE_INVALID_ARG;
 80013dc:	2304      	movs	r3, #4
 80013de:	e004      	b.n	80013ea <APP_COMMAND_SetCurrentOutput+0x56>
  }
  s_control_llc_data.f_output_current = f_value_temp;
 80013e0:	4a05      	ldr	r2, [pc, #20]	@ (80013f8 <APP_COMMAND_SetCurrentOutput+0x64>)
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  return (CMDLINE_OK);
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40c00000 	.word	0x40c00000
 80013f8:	20000454 	.word	0x20000454

080013fc <APP_COMMAND_SetParaControlCurrent>:

// Format: set_pi_current kp ki
int
APP_COMMAND_SetParaControlCurrent (int argc, char *argv[])
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
  if (argc < 3)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2b02      	cmp	r3, #2
 800140a:	dc01      	bgt.n	8001410 <APP_COMMAND_SetParaControlCurrent+0x14>
  {
    return CMDLINE_TOO_FEW_ARGS;
 800140c:	2303      	movs	r3, #3
 800140e:	e023      	b.n	8001458 <APP_COMMAND_SetParaControlCurrent+0x5c>
  }
  if (argc > 3)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2b03      	cmp	r3, #3
 8001414:	dd01      	ble.n	800141a <APP_COMMAND_SetParaControlCurrent+0x1e>
  {
    return CMDLINE_TOO_MANY_ARGS;
 8001416:	2302      	movs	r3, #2
 8001418:	e01e      	b.n	8001458 <APP_COMMAND_SetParaControlCurrent+0x5c>
  }

  s_control_llc_data.s_control_current.f_Ki = atof(argv[1]);
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	3304      	adds	r3, #4
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4618      	mov	r0, r3
 8001422:	f004 f9c9 	bl	80057b8 <atof>
 8001426:	4602      	mov	r2, r0
 8001428:	460b      	mov	r3, r1
 800142a:	4610      	mov	r0, r2
 800142c:	4619      	mov	r1, r3
 800142e:	f7ff fb55 	bl	8000adc <__aeabi_d2f>
 8001432:	4603      	mov	r3, r0
 8001434:	4a0a      	ldr	r2, [pc, #40]	@ (8001460 <APP_COMMAND_SetParaControlCurrent+0x64>)
 8001436:	6453      	str	r3, [r2, #68]	@ 0x44
  s_control_llc_data.s_control_current.f_Kp = atof(argv[2]);
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	3308      	adds	r3, #8
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4618      	mov	r0, r3
 8001440:	f004 f9ba 	bl	80057b8 <atof>
 8001444:	4602      	mov	r2, r0
 8001446:	460b      	mov	r3, r1
 8001448:	4610      	mov	r0, r2
 800144a:	4619      	mov	r1, r3
 800144c:	f7ff fb46 	bl	8000adc <__aeabi_d2f>
 8001450:	4603      	mov	r3, r0
 8001452:	4a03      	ldr	r2, [pc, #12]	@ (8001460 <APP_COMMAND_SetParaControlCurrent+0x64>)
 8001454:	6413      	str	r3, [r2, #64]	@ 0x40

  return (CMDLINE_OK);
 8001456:	2300      	movs	r3, #0
}
 8001458:	4618      	mov	r0, r3
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	20000454 	.word	0x20000454

08001464 <APP_COMMAND_ReadVoltageOutput>:

// Format: read_voltage
int
APP_COMMAND_ReadVoltageOutput (int argc, char *argv[])
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b08a      	sub	sp, #40	@ 0x28
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
  if (argc < 1)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2b00      	cmp	r3, #0
 8001472:	dc01      	bgt.n	8001478 <APP_COMMAND_ReadVoltageOutput+0x14>
  {
    return CMDLINE_TOO_FEW_ARGS;
 8001474:	2303      	movs	r3, #3
 8001476:	e018      	b.n	80014aa <APP_COMMAND_ReadVoltageOutput+0x46>
  }
  if (argc > 1)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2b01      	cmp	r3, #1
 800147c:	dd01      	ble.n	8001482 <APP_COMMAND_ReadVoltageOutput+0x1e>
  {
    return CMDLINE_TOO_MANY_ARGS;
 800147e:	2302      	movs	r3, #2
 8001480:	e013      	b.n	80014aa <APP_COMMAND_ReadVoltageOutput+0x46>
  }

  char c_msg[30];
  sprintf(c_msg, "Voltage: %.2f\n\r", s_control_llc_data.f_output_voltage);
 8001482:	4b0c      	ldr	r3, [pc, #48]	@ (80014b4 <APP_COMMAND_ReadVoltageOutput+0x50>)
 8001484:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001488:	4618      	mov	r0, r3
 800148a:	f7fe ffd7 	bl	800043c <__aeabi_f2d>
 800148e:	4602      	mov	r2, r0
 8001490:	460b      	mov	r3, r1
 8001492:	f107 0008 	add.w	r0, r7, #8
 8001496:	4908      	ldr	r1, [pc, #32]	@ (80014b8 <APP_COMMAND_ReadVoltageOutput+0x54>)
 8001498:	f005 fd6c 	bl	8006f74 <siprintf>

  BSP_UART_SendString(&uart_cfg_cml, c_msg);
 800149c:	f107 0308 	add.w	r3, r7, #8
 80014a0:	4619      	mov	r1, r3
 80014a2:	4806      	ldr	r0, [pc, #24]	@ (80014bc <APP_COMMAND_ReadVoltageOutput+0x58>)
 80014a4:	f001 fc94 	bl	8002dd0 <BSP_UART_SendString>

  return (CMDLINE_OK);
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3728      	adds	r7, #40	@ 0x28
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	20000454 	.word	0x20000454
 80014b8:	08009c38 	.word	0x08009c38
 80014bc:	200003f4 	.word	0x200003f4

080014c0 <APP_COMMAND_SetParaControlVoltage>:

// Format: set_pi_voltage kp ki
int
APP_COMMAND_SetParaControlVoltage (int argc, char *argv[])
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	6039      	str	r1, [r7, #0]
  if (argc < 3)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	dc01      	bgt.n	80014d4 <APP_COMMAND_SetParaControlVoltage+0x14>
  {
    return CMDLINE_TOO_FEW_ARGS;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e023      	b.n	800151c <APP_COMMAND_SetParaControlVoltage+0x5c>
  }
  if (argc > 3)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2b03      	cmp	r3, #3
 80014d8:	dd01      	ble.n	80014de <APP_COMMAND_SetParaControlVoltage+0x1e>
  {
    return CMDLINE_TOO_MANY_ARGS;
 80014da:	2302      	movs	r3, #2
 80014dc:	e01e      	b.n	800151c <APP_COMMAND_SetParaControlVoltage+0x5c>
  }

  s_control_llc_data.s_control_voltage.f_Ki = atof(argv[1]);
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	3304      	adds	r3, #4
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f004 f967 	bl	80057b8 <atof>
 80014ea:	4602      	mov	r2, r0
 80014ec:	460b      	mov	r3, r1
 80014ee:	4610      	mov	r0, r2
 80014f0:	4619      	mov	r1, r3
 80014f2:	f7ff faf3 	bl	8000adc <__aeabi_d2f>
 80014f6:	4603      	mov	r3, r0
 80014f8:	4a0a      	ldr	r2, [pc, #40]	@ (8001524 <APP_COMMAND_SetParaControlVoltage+0x64>)
 80014fa:	6213      	str	r3, [r2, #32]
  s_control_llc_data.s_control_voltage.f_Kp = atof(argv[2]);
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	3308      	adds	r3, #8
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4618      	mov	r0, r3
 8001504:	f004 f958 	bl	80057b8 <atof>
 8001508:	4602      	mov	r2, r0
 800150a:	460b      	mov	r3, r1
 800150c:	4610      	mov	r0, r2
 800150e:	4619      	mov	r1, r3
 8001510:	f7ff fae4 	bl	8000adc <__aeabi_d2f>
 8001514:	4603      	mov	r3, r0
 8001516:	4a03      	ldr	r2, [pc, #12]	@ (8001524 <APP_COMMAND_SetParaControlVoltage+0x64>)
 8001518:	61d3      	str	r3, [r2, #28]

  return (CMDLINE_OK);
 800151a:	2300      	movs	r3, #0
}
 800151c:	4618      	mov	r0, r3
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	20000454 	.word	0x20000454

08001528 <APP_COMMAND_MonitorPower>:

// Format: monitor_power
int
APP_COMMAND_MonitorPower (int argc, char *argv[])
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b08a      	sub	sp, #40	@ 0x28
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
  if (argc < 1)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2b00      	cmp	r3, #0
 8001536:	dc01      	bgt.n	800153c <APP_COMMAND_MonitorPower+0x14>
  {
    return CMDLINE_TOO_FEW_ARGS;
 8001538:	2303      	movs	r3, #3
 800153a:	e034      	b.n	80015a6 <APP_COMMAND_MonitorPower+0x7e>
  }
  if (argc > 1)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2b01      	cmp	r3, #1
 8001540:	dd01      	ble.n	8001546 <APP_COMMAND_MonitorPower+0x1e>
  {
    return CMDLINE_TOO_MANY_ARGS;
 8001542:	2302      	movs	r3, #2
 8001544:	e02f      	b.n	80015a6 <APP_COMMAND_MonitorPower+0x7e>
  }

  if ((s_control_llc_data.s_state_data == CC_MODE_CHARGING)
 8001546:	4b1a      	ldr	r3, [pc, #104]	@ (80015b0 <APP_COMMAND_MonitorPower+0x88>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	b2db      	uxtb	r3, r3
 800154c:	2b02      	cmp	r3, #2
 800154e:	d009      	beq.n	8001564 <APP_COMMAND_MonitorPower+0x3c>
      || (s_control_llc_data.s_state_data == CV_MODE_CHARGING)
 8001550:	4b17      	ldr	r3, [pc, #92]	@ (80015b0 <APP_COMMAND_MonitorPower+0x88>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	b2db      	uxtb	r3, r3
 8001556:	2b03      	cmp	r3, #3
 8001558:	d004      	beq.n	8001564 <APP_COMMAND_MonitorPower+0x3c>
      || (s_control_llc_data.s_state_data == WAIT_DISCHARGING))
 800155a:	4b15      	ldr	r3, [pc, #84]	@ (80015b0 <APP_COMMAND_MonitorPower+0x88>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	b2db      	uxtb	r3, r3
 8001560:	2b04      	cmp	r3, #4
 8001562:	d11b      	bne.n	800159c <APP_COMMAND_MonitorPower+0x74>
  {
    char c_msg[30];
    sprintf(c_msg,
            "Power Charging: %.2f\n\r",
            s_control_llc_data.f_output_voltage
 8001564:	4b12      	ldr	r3, [pc, #72]	@ (80015b0 <APP_COMMAND_MonitorPower+0x88>)
 8001566:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
                * s_control_llc_data.f_output_current);
 800156a:	4a11      	ldr	r2, [pc, #68]	@ (80015b0 <APP_COMMAND_MonitorPower+0x88>)
 800156c:	f8d2 2090 	ldr.w	r2, [r2, #144]	@ 0x90
 8001570:	4611      	mov	r1, r2
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff fc10 	bl	8000d98 <__aeabi_fmul>
 8001578:	4603      	mov	r3, r0
    sprintf(c_msg,
 800157a:	4618      	mov	r0, r3
 800157c:	f7fe ff5e 	bl	800043c <__aeabi_f2d>
 8001580:	4602      	mov	r2, r0
 8001582:	460b      	mov	r3, r1
 8001584:	f107 0008 	add.w	r0, r7, #8
 8001588:	490a      	ldr	r1, [pc, #40]	@ (80015b4 <APP_COMMAND_MonitorPower+0x8c>)
 800158a:	f005 fcf3 	bl	8006f74 <siprintf>

    BSP_UART_SendString(&uart_cfg_cml, c_msg);
 800158e:	f107 0308 	add.w	r3, r7, #8
 8001592:	4619      	mov	r1, r3
 8001594:	4808      	ldr	r0, [pc, #32]	@ (80015b8 <APP_COMMAND_MonitorPower+0x90>)
 8001596:	f001 fc1b 	bl	8002dd0 <BSP_UART_SendString>
  {
 800159a:	e003      	b.n	80015a4 <APP_COMMAND_MonitorPower+0x7c>
  }
  else
  {
    BSP_UART_SendString(&uart_cfg_cml, "NO CHARGING\n\r");
 800159c:	4907      	ldr	r1, [pc, #28]	@ (80015bc <APP_COMMAND_MonitorPower+0x94>)
 800159e:	4806      	ldr	r0, [pc, #24]	@ (80015b8 <APP_COMMAND_MonitorPower+0x90>)
 80015a0:	f001 fc16 	bl	8002dd0 <BSP_UART_SendString>
  }

  return (CMDLINE_OK);
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3728      	adds	r7, #40	@ 0x28
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20000454 	.word	0x20000454
 80015b4:	08009c48 	.word	0x08009c48
 80015b8:	200003f4 	.word	0x200003f4
 80015bc:	08009c60 	.word	0x08009c60

080015c0 <APP_COMMAND_MonitorParaPI>:

// Format: monitor_para_pi
int
APP_COMMAND_MonitorParaPI (int argc, char *argv[])
{
 80015c0:	b5b0      	push	{r4, r5, r7, lr}
 80015c2:	b08c      	sub	sp, #48	@ 0x30
 80015c4:	af02      	add	r7, sp, #8
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
  if (argc < 1)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	dc01      	bgt.n	80015d4 <APP_COMMAND_MonitorParaPI+0x14>
  {
    return CMDLINE_TOO_FEW_ARGS;
 80015d0:	2303      	movs	r3, #3
 80015d2:	e047      	b.n	8001664 <APP_COMMAND_MonitorParaPI+0xa4>
  }
  if (argc > 1)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	dd01      	ble.n	80015de <APP_COMMAND_MonitorParaPI+0x1e>
  {
    return CMDLINE_TOO_MANY_ARGS;
 80015da:	2302      	movs	r3, #2
 80015dc:	e042      	b.n	8001664 <APP_COMMAND_MonitorParaPI+0xa4>
  }

  char c_msg[30];

  BSP_UART_SendString(&uart_cfg_cml, "PARAMETER PI CONTROL OF CURRENT\n\r");
 80015de:	4923      	ldr	r1, [pc, #140]	@ (800166c <APP_COMMAND_MonitorParaPI+0xac>)
 80015e0:	4823      	ldr	r0, [pc, #140]	@ (8001670 <APP_COMMAND_MonitorParaPI+0xb0>)
 80015e2:	f001 fbf5 	bl	8002dd0 <BSP_UART_SendString>

  sprintf(c_msg,
          "KP: %.2f, KI: %.2f\n\r",
          s_control_llc_data.s_control_current.f_Kp,
 80015e6:	4b23      	ldr	r3, [pc, #140]	@ (8001674 <APP_COMMAND_MonitorParaPI+0xb4>)
 80015e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
  sprintf(c_msg,
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7fe ff26 	bl	800043c <__aeabi_f2d>
 80015f0:	4604      	mov	r4, r0
 80015f2:	460d      	mov	r5, r1
          s_control_llc_data.s_control_current.f_Ki);
 80015f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001674 <APP_COMMAND_MonitorParaPI+0xb4>)
 80015f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  sprintf(c_msg,
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7fe ff1f 	bl	800043c <__aeabi_f2d>
 80015fe:	4602      	mov	r2, r0
 8001600:	460b      	mov	r3, r1
 8001602:	f107 0008 	add.w	r0, r7, #8
 8001606:	e9cd 2300 	strd	r2, r3, [sp]
 800160a:	4622      	mov	r2, r4
 800160c:	462b      	mov	r3, r5
 800160e:	491a      	ldr	r1, [pc, #104]	@ (8001678 <APP_COMMAND_MonitorParaPI+0xb8>)
 8001610:	f005 fcb0 	bl	8006f74 <siprintf>

  BSP_UART_SendString(&uart_cfg_cml, c_msg);
 8001614:	f107 0308 	add.w	r3, r7, #8
 8001618:	4619      	mov	r1, r3
 800161a:	4815      	ldr	r0, [pc, #84]	@ (8001670 <APP_COMMAND_MonitorParaPI+0xb0>)
 800161c:	f001 fbd8 	bl	8002dd0 <BSP_UART_SendString>

  BSP_UART_SendString(&uart_cfg_cml, "PARAMETER PI CONTROL OF VOLTAGE\n\r");
 8001620:	4916      	ldr	r1, [pc, #88]	@ (800167c <APP_COMMAND_MonitorParaPI+0xbc>)
 8001622:	4813      	ldr	r0, [pc, #76]	@ (8001670 <APP_COMMAND_MonitorParaPI+0xb0>)
 8001624:	f001 fbd4 	bl	8002dd0 <BSP_UART_SendString>

  sprintf(c_msg,
          "KP: %.2f, KI: %.2f\n\r",
          s_control_llc_data.s_control_voltage.f_Kp,
 8001628:	4b12      	ldr	r3, [pc, #72]	@ (8001674 <APP_COMMAND_MonitorParaPI+0xb4>)
 800162a:	69db      	ldr	r3, [r3, #28]
  sprintf(c_msg,
 800162c:	4618      	mov	r0, r3
 800162e:	f7fe ff05 	bl	800043c <__aeabi_f2d>
 8001632:	4604      	mov	r4, r0
 8001634:	460d      	mov	r5, r1
          s_control_llc_data.s_control_voltage.f_Ki);
 8001636:	4b0f      	ldr	r3, [pc, #60]	@ (8001674 <APP_COMMAND_MonitorParaPI+0xb4>)
 8001638:	6a1b      	ldr	r3, [r3, #32]
  sprintf(c_msg,
 800163a:	4618      	mov	r0, r3
 800163c:	f7fe fefe 	bl	800043c <__aeabi_f2d>
 8001640:	4602      	mov	r2, r0
 8001642:	460b      	mov	r3, r1
 8001644:	f107 0008 	add.w	r0, r7, #8
 8001648:	e9cd 2300 	strd	r2, r3, [sp]
 800164c:	4622      	mov	r2, r4
 800164e:	462b      	mov	r3, r5
 8001650:	4909      	ldr	r1, [pc, #36]	@ (8001678 <APP_COMMAND_MonitorParaPI+0xb8>)
 8001652:	f005 fc8f 	bl	8006f74 <siprintf>

  BSP_UART_SendString(&uart_cfg_cml, c_msg);
 8001656:	f107 0308 	add.w	r3, r7, #8
 800165a:	4619      	mov	r1, r3
 800165c:	4804      	ldr	r0, [pc, #16]	@ (8001670 <APP_COMMAND_MonitorParaPI+0xb0>)
 800165e:	f001 fbb7 	bl	8002dd0 <BSP_UART_SendString>

  return (CMDLINE_OK);
 8001662:	2300      	movs	r3, #0
}
 8001664:	4618      	mov	r0, r3
 8001666:	3728      	adds	r7, #40	@ 0x28
 8001668:	46bd      	mov	sp, r7
 800166a:	bdb0      	pop	{r4, r5, r7, pc}
 800166c:	08009c70 	.word	0x08009c70
 8001670:	200003f4 	.word	0x200003f4
 8001674:	20000454 	.word	0x20000454
 8001678:	08009c94 	.word	0x08009c94
 800167c:	08009cac 	.word	0x08009cac

08001680 <APP_COMMAND_TaskUpdate>:
 * processes commands based on the received data, and sends responses back
 * through UART.
 */
static void
APP_COMMAND_TaskUpdate (void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
  char   rxData;
  int8_t retVal;

  while (BSP_UART_IsAvailableDataReceive(&uart_cfg_cml))
 8001686:	e05b      	b.n	8001740 <APP_COMMAND_TaskUpdate+0xc0>
  {
    rxData = BSP_UART_ReadChar(&uart_cfg_cml);
 8001688:	4833      	ldr	r0, [pc, #204]	@ (8001758 <APP_COMMAND_TaskUpdate+0xd8>)
 800168a:	f001 fbb8 	bl	8002dfe <BSP_UART_ReadChar>
 800168e:	4603      	mov	r3, r0
 8001690:	71fb      	strb	r3, [r7, #7]
    BSP_UART_SendChar(&uart_cfg_cml, rxData);
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	4619      	mov	r1, r3
 8001696:	4830      	ldr	r0, [pc, #192]	@ (8001758 <APP_COMMAND_TaskUpdate+0xd8>)
 8001698:	f001 fb67 	bl	8002d6a <BSP_UART_SendChar>
    // Check rxData is ESC key.
    if (rxData == 27)
    {
    }

    if ((rxData == '\r') || (rxData == '\n'))
 800169c:	79fb      	ldrb	r3, [r7, #7]
 800169e:	2b0d      	cmp	r3, #13
 80016a0:	d002      	beq.n	80016a8 <APP_COMMAND_TaskUpdate+0x28>
 80016a2:	79fb      	ldrb	r3, [r7, #7]
 80016a4:	2b0a      	cmp	r3, #10
 80016a6:	d12e      	bne.n	8001706 <APP_COMMAND_TaskUpdate+0x86>
    {
      if (s_commandBufferIndex > 0)
 80016a8:	4b2c      	ldr	r3, [pc, #176]	@ (800175c <APP_COMMAND_TaskUpdate+0xdc>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d025      	beq.n	80016fc <APP_COMMAND_TaskUpdate+0x7c>
      {
        // Processing command form terminal.
        s_commandBuffer[s_commandBufferIndex] = 0;
 80016b0:	4b2a      	ldr	r3, [pc, #168]	@ (800175c <APP_COMMAND_TaskUpdate+0xdc>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	461a      	mov	r2, r3
 80016b6:	4b2a      	ldr	r3, [pc, #168]	@ (8001760 <APP_COMMAND_TaskUpdate+0xe0>)
 80016b8:	2100      	movs	r1, #0
 80016ba:	5499      	strb	r1, [r3, r2]
        s_commandBufferIndex++;
 80016bc:	4b27      	ldr	r3, [pc, #156]	@ (800175c <APP_COMMAND_TaskUpdate+0xdc>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	3301      	adds	r3, #1
 80016c2:	b2da      	uxtb	r2, r3
 80016c4:	4b25      	ldr	r3, [pc, #148]	@ (800175c <APP_COMMAND_TaskUpdate+0xdc>)
 80016c6:	701a      	strb	r2, [r3, #0]
        retVal               = CmdLineProcess(s_commandBuffer);
 80016c8:	4825      	ldr	r0, [pc, #148]	@ (8001760 <APP_COMMAND_TaskUpdate+0xe0>)
 80016ca:	f7ff fd81 	bl	80011d0 <CmdLineProcess>
 80016ce:	4603      	mov	r3, r0
 80016d0:	71bb      	strb	r3, [r7, #6]
        s_commandBufferIndex = 0;
 80016d2:	4b22      	ldr	r3, [pc, #136]	@ (800175c <APP_COMMAND_TaskUpdate+0xdc>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	701a      	strb	r2, [r3, #0]

        // Send status command in terminal.
        BSP_UART_SendString(&uart_cfg_cml, "\r\n> ");
 80016d8:	4922      	ldr	r1, [pc, #136]	@ (8001764 <APP_COMMAND_TaskUpdate+0xe4>)
 80016da:	481f      	ldr	r0, [pc, #124]	@ (8001758 <APP_COMMAND_TaskUpdate+0xd8>)
 80016dc:	f001 fb78 	bl	8002dd0 <BSP_UART_SendString>
        BSP_UART_SendString(&uart_cfg_cml, ErrorCode[retVal]);
 80016e0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80016e4:	4a20      	ldr	r2, [pc, #128]	@ (8001768 <APP_COMMAND_TaskUpdate+0xe8>)
 80016e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ea:	4619      	mov	r1, r3
 80016ec:	481a      	ldr	r0, [pc, #104]	@ (8001758 <APP_COMMAND_TaskUpdate+0xd8>)
 80016ee:	f001 fb6f 	bl	8002dd0 <BSP_UART_SendString>
        BSP_UART_SendString(&uart_cfg_cml, "> ");
 80016f2:	491e      	ldr	r1, [pc, #120]	@ (800176c <APP_COMMAND_TaskUpdate+0xec>)
 80016f4:	4818      	ldr	r0, [pc, #96]	@ (8001758 <APP_COMMAND_TaskUpdate+0xd8>)
 80016f6:	f001 fb6b 	bl	8002dd0 <BSP_UART_SendString>
      if (s_commandBufferIndex > 0)
 80016fa:	e021      	b.n	8001740 <APP_COMMAND_TaskUpdate+0xc0>
      }
      else
      {
        BSP_UART_SendString(&uart_cfg_cml, "\r\n> ");
 80016fc:	4919      	ldr	r1, [pc, #100]	@ (8001764 <APP_COMMAND_TaskUpdate+0xe4>)
 80016fe:	4816      	ldr	r0, [pc, #88]	@ (8001758 <APP_COMMAND_TaskUpdate+0xd8>)
 8001700:	f001 fb66 	bl	8002dd0 <BSP_UART_SendString>
      if (s_commandBufferIndex > 0)
 8001704:	e01c      	b.n	8001740 <APP_COMMAND_TaskUpdate+0xc0>
      }
    }
    else if ((rxData == 8)
 8001706:	79fb      	ldrb	r3, [r7, #7]
 8001708:	2b08      	cmp	r3, #8
 800170a:	d002      	beq.n	8001712 <APP_COMMAND_TaskUpdate+0x92>
             || (rxData == 127)) // ASCII code for key Delete, Backspace.
 800170c:	79fb      	ldrb	r3, [r7, #7]
 800170e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001710:	d10a      	bne.n	8001728 <APP_COMMAND_TaskUpdate+0xa8>
    {
      if (s_commandBufferIndex > 0)
 8001712:	4b12      	ldr	r3, [pc, #72]	@ (800175c <APP_COMMAND_TaskUpdate+0xdc>)
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d012      	beq.n	8001740 <APP_COMMAND_TaskUpdate+0xc0>
      {
        s_commandBufferIndex--;
 800171a:	4b10      	ldr	r3, [pc, #64]	@ (800175c <APP_COMMAND_TaskUpdate+0xdc>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	3b01      	subs	r3, #1
 8001720:	b2da      	uxtb	r2, r3
 8001722:	4b0e      	ldr	r3, [pc, #56]	@ (800175c <APP_COMMAND_TaskUpdate+0xdc>)
 8001724:	701a      	strb	r2, [r3, #0]
      if (s_commandBufferIndex > 0)
 8001726:	e00b      	b.n	8001740 <APP_COMMAND_TaskUpdate+0xc0>
      }
    }
    else
    {
      s_commandBuffer[s_commandBufferIndex] = rxData;
 8001728:	4b0c      	ldr	r3, [pc, #48]	@ (800175c <APP_COMMAND_TaskUpdate+0xdc>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	4619      	mov	r1, r3
 800172e:	4a0c      	ldr	r2, [pc, #48]	@ (8001760 <APP_COMMAND_TaskUpdate+0xe0>)
 8001730:	79fb      	ldrb	r3, [r7, #7]
 8001732:	5453      	strb	r3, [r2, r1]
      s_commandBufferIndex++;
 8001734:	4b09      	ldr	r3, [pc, #36]	@ (800175c <APP_COMMAND_TaskUpdate+0xdc>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	3301      	adds	r3, #1
 800173a:	b2da      	uxtb	r2, r3
 800173c:	4b07      	ldr	r3, [pc, #28]	@ (800175c <APP_COMMAND_TaskUpdate+0xdc>)
 800173e:	701a      	strb	r2, [r3, #0]
  while (BSP_UART_IsAvailableDataReceive(&uart_cfg_cml))
 8001740:	4805      	ldr	r0, [pc, #20]	@ (8001758 <APP_COMMAND_TaskUpdate+0xd8>)
 8001742:	f001 fb00 	bl	8002d46 <BSP_UART_IsAvailableDataReceive>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d19d      	bne.n	8001688 <APP_COMMAND_TaskUpdate+0x8>
      {
        s_commandBufferIndex = 0;
      }
    }
  }
}
 800174c:	bf00      	nop
 800174e:	bf00      	nop
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	200003f4 	.word	0x200003f4
 800175c:	200003f3 	.word	0x200003f3
 8001760:	200002f4 	.word	0x200002f4
 8001764:	08009cd0 	.word	0x08009cd0
 8001768:	20000000 	.word	0x20000000
 800176c:	08009cd8 	.word	0x08009cd8

08001770 <APP_CHECK_INPUT_VOLTAGE_CreateTask>:
 * The function APP_CHECK_INPUT_VOLTAGE_CreateTask creates a task for checking
 * input voltage.
 */
void
APP_CHECK_INPUT_VOLTAGE_CreateTask (void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  SCH_TASK_CreateTask(&s_CheckInputVoltageTaskContext.taskHandle,
 8001774:	4902      	ldr	r1, [pc, #8]	@ (8001780 <APP_CHECK_INPUT_VOLTAGE_CreateTask+0x10>)
 8001776:	4803      	ldr	r0, [pc, #12]	@ (8001784 <APP_CHECK_INPUT_VOLTAGE_CreateTask+0x14>)
 8001778:	f003 fe64 	bl	8005444 <SCH_TASK_CreateTask>
                      &s_CheckInputVoltageTaskContext.taskProperty);
}
 800177c:	bf00      	nop
 800177e:	bd80      	pop	{r7, pc}
 8001780:	2000008c 	.word	0x2000008c
 8001784:	20000088 	.word	0x20000088

08001788 <APP_CHECK_INPUT_VOLTAGE_TaskUpdate>:
 * The function `APP_CHECK_INPUT_VOLTAGE_TaskUpdate` checks input voltage levels
 * and calculates the RMS voltage based on ADC samples.
 */
static void
APP_CHECK_INPUT_VOLTAGE_TaskUpdate (void)
{
 8001788:	b598      	push	{r3, r4, r7, lr}
 800178a:	af00      	add	r7, sp, #0
  if ((s_control_llc_data.f_input_voltage < AC_INPUT_VOLTAGE_MIN)
 800178c:	4b32      	ldr	r3, [pc, #200]	@ (8001858 <APP_CHECK_INPUT_VOLTAGE_TaskUpdate+0xd0>)
 800178e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001792:	4932      	ldr	r1, [pc, #200]	@ (800185c <APP_CHECK_INPUT_VOLTAGE_TaskUpdate+0xd4>)
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff fc9d 	bl	80010d4 <__aeabi_fcmplt>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d109      	bne.n	80017b4 <APP_CHECK_INPUT_VOLTAGE_TaskUpdate+0x2c>
      || (s_control_llc_data.f_output_voltage > AC_INPUT_VOLTAGE_MAX))
 80017a0:	4b2d      	ldr	r3, [pc, #180]	@ (8001858 <APP_CHECK_INPUT_VOLTAGE_TaskUpdate+0xd0>)
 80017a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017a6:	492e      	ldr	r1, [pc, #184]	@ (8001860 <APP_CHECK_INPUT_VOLTAGE_TaskUpdate+0xd8>)
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff fcb1 	bl	8001110 <__aeabi_fcmpgt>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d002      	beq.n	80017ba <APP_CHECK_INPUT_VOLTAGE_TaskUpdate+0x32>
  {
    s_control_llc_data.s_state_data = WAIT_INPUT_VOLTAGE;
 80017b4:	4b28      	ldr	r3, [pc, #160]	@ (8001858 <APP_CHECK_INPUT_VOLTAGE_TaskUpdate+0xd0>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	701a      	strb	r2, [r3, #0]
  }

  if (s_check_input_voltage.u8_samples_count >= ADC_SAMPLES)
 80017ba:	4b2a      	ldr	r3, [pc, #168]	@ (8001864 <APP_CHECK_INPUT_VOLTAGE_TaskUpdate+0xdc>)
 80017bc:	7c9b      	ldrb	r3, [r3, #18]
 80017be:	2bc7      	cmp	r3, #199	@ 0xc7
 80017c0:	d92e      	bls.n	8001820 <APP_CHECK_INPUT_VOLTAGE_TaskUpdate+0x98>
  {
    // Calculate RMS Voltage
    s_check_input_voltage.f_sum_adc_value_sqr_avg
        = (float)s_check_input_voltage.u32_sum_adc_value_sqr / ADC_SAMPLES;
 80017c2:	4b28      	ldr	r3, [pc, #160]	@ (8001864 <APP_CHECK_INPUT_VOLTAGE_TaskUpdate+0xdc>)
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff fa8e 	bl	8000ce8 <__aeabi_ui2f>
 80017cc:	4603      	mov	r3, r0
 80017ce:	4926      	ldr	r1, [pc, #152]	@ (8001868 <APP_CHECK_INPUT_VOLTAGE_TaskUpdate+0xe0>)
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff fb95 	bl	8000f00 <__aeabi_fdiv>
 80017d6:	4603      	mov	r3, r0
 80017d8:	461a      	mov	r2, r3
 80017da:	4b22      	ldr	r3, [pc, #136]	@ (8001864 <APP_CHECK_INPUT_VOLTAGE_TaskUpdate+0xdc>)
 80017dc:	605a      	str	r2, [r3, #4]

    s_check_input_voltage.f_adc_voltage = ADS1115_GetVoltage(
        (uint16_t)s_check_input_voltage.f_sum_adc_value_sqr_avg);
 80017de:	4b21      	ldr	r3, [pc, #132]	@ (8001864 <APP_CHECK_INPUT_VOLTAGE_TaskUpdate+0xdc>)
 80017e0:	685b      	ldr	r3, [r3, #4]
    s_check_input_voltage.f_adc_voltage = ADS1115_GetVoltage(
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff fc9e 	bl	8001124 <__aeabi_f2uiz>
 80017e8:	4603      	mov	r3, r0
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	4618      	mov	r0, r3
 80017ee:	f002 fb81 	bl	8003ef4 <ADS1115_GetVoltage>
 80017f2:	4603      	mov	r3, r0
 80017f4:	4a1b      	ldr	r2, [pc, #108]	@ (8001864 <APP_CHECK_INPUT_VOLTAGE_TaskUpdate+0xdc>)
 80017f6:	6093      	str	r3, [r2, #8]

    *s_check_input_voltage.p_input_voltage
        = sqrt_newton(s_check_input_voltage.f_adc_voltage) * ADC_GAIN_HW;
 80017f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001864 <APP_CHECK_INPUT_VOLTAGE_TaskUpdate+0xdc>)
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f000 f837 	bl	8001870 <sqrt_newton>
 8001802:	4603      	mov	r3, r0
    *s_check_input_voltage.p_input_voltage
 8001804:	4a17      	ldr	r2, [pc, #92]	@ (8001864 <APP_CHECK_INPUT_VOLTAGE_TaskUpdate+0xdc>)
 8001806:	6814      	ldr	r4, [r2, #0]
        = sqrt_newton(s_check_input_voltage.f_adc_voltage) * ADC_GAIN_HW;
 8001808:	4918      	ldr	r1, [pc, #96]	@ (800186c <APP_CHECK_INPUT_VOLTAGE_TaskUpdate+0xe4>)
 800180a:	4618      	mov	r0, r3
 800180c:	f7ff fac4 	bl	8000d98 <__aeabi_fmul>
 8001810:	4603      	mov	r3, r0
 8001812:	6023      	str	r3, [r4, #0]

    s_check_input_voltage.u8_samples_count = 0;
 8001814:	4b13      	ldr	r3, [pc, #76]	@ (8001864 <APP_CHECK_INPUT_VOLTAGE_TaskUpdate+0xdc>)
 8001816:	2200      	movs	r2, #0
 8001818:	749a      	strb	r2, [r3, #18]
    s_check_input_voltage.u32_sum_adc_value_sqr = 0;
 800181a:	4b12      	ldr	r3, [pc, #72]	@ (8001864 <APP_CHECK_INPUT_VOLTAGE_TaskUpdate+0xdc>)
 800181c:	2200      	movs	r2, #0
 800181e:	60da      	str	r2, [r3, #12]
  }

  s_check_input_voltage.u16_adc_value = ADS1115_GetData(DEV_ADS1115_CHANNEL_0);
 8001820:	2000      	movs	r0, #0
 8001822:	f002 fabb 	bl	8003d9c <ADS1115_GetData>
 8001826:	4603      	mov	r3, r0
 8001828:	461a      	mov	r2, r3
 800182a:	4b0e      	ldr	r3, [pc, #56]	@ (8001864 <APP_CHECK_INPUT_VOLTAGE_TaskUpdate+0xdc>)
 800182c:	821a      	strh	r2, [r3, #16]

  s_check_input_voltage.u32_sum_adc_value_sqr
 800182e:	4b0d      	ldr	r3, [pc, #52]	@ (8001864 <APP_CHECK_INPUT_VOLTAGE_TaskUpdate+0xdc>)
 8001830:	68db      	ldr	r3, [r3, #12]
      += s_check_input_voltage.u16_adc_value
 8001832:	4a0c      	ldr	r2, [pc, #48]	@ (8001864 <APP_CHECK_INPUT_VOLTAGE_TaskUpdate+0xdc>)
 8001834:	8a12      	ldrh	r2, [r2, #16]
 8001836:	4611      	mov	r1, r2
        * s_check_input_voltage.u16_adc_value;
 8001838:	4a0a      	ldr	r2, [pc, #40]	@ (8001864 <APP_CHECK_INPUT_VOLTAGE_TaskUpdate+0xdc>)
 800183a:	8a12      	ldrh	r2, [r2, #16]
 800183c:	fb01 f202 	mul.w	r2, r1, r2
      += s_check_input_voltage.u16_adc_value
 8001840:	4413      	add	r3, r2
 8001842:	4a08      	ldr	r2, [pc, #32]	@ (8001864 <APP_CHECK_INPUT_VOLTAGE_TaskUpdate+0xdc>)
 8001844:	60d3      	str	r3, [r2, #12]

  s_check_input_voltage.u8_samples_count++;
 8001846:	4b07      	ldr	r3, [pc, #28]	@ (8001864 <APP_CHECK_INPUT_VOLTAGE_TaskUpdate+0xdc>)
 8001848:	7c9b      	ldrb	r3, [r3, #18]
 800184a:	3301      	adds	r3, #1
 800184c:	b2da      	uxtb	r2, r3
 800184e:	4b05      	ldr	r3, [pc, #20]	@ (8001864 <APP_CHECK_INPUT_VOLTAGE_TaskUpdate+0xdc>)
 8001850:	749a      	strb	r2, [r3, #18]
}
 8001852:	bf00      	nop
 8001854:	bd98      	pop	{r3, r4, r7, pc}
 8001856:	bf00      	nop
 8001858:	20000454 	.word	0x20000454
 800185c:	42aa0000 	.word	0x42aa0000
 8001860:	43848000 	.word	0x43848000
 8001864:	2000041c 	.word	0x2000041c
 8001868:	43480000 	.word	0x43480000
 800186c:	41200000 	.word	0x41200000

08001870 <sqrt_newton>:
 * number using the Newton-Raphson method. If the input number is negative, it
 * returns -1 as an error value.
 */
static float
sqrt_newton (float number)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  if (number < 0)
 8001878:	f04f 0100 	mov.w	r1, #0
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f7ff fc29 	bl	80010d4 <__aeabi_fcmplt>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <sqrt_newton+0x1c>
  {
    return -1; // Error value
 8001888:	4b1f      	ldr	r3, [pc, #124]	@ (8001908 <sqrt_newton+0x98>)
 800188a:	e038      	b.n	80018fe <sqrt_newton+0x8e>
  }

  float x       = number; // Initial value
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	60fb      	str	r3, [r7, #12]
  float epsilon = 0.0001; // Allowed error
 8001890:	4b1e      	ldr	r3, [pc, #120]	@ (800190c <sqrt_newton+0x9c>)
 8001892:	60bb      	str	r3, [r7, #8]

  while ((x * x - number) > epsilon || (number - x * x) > epsilon)
 8001894:	e010      	b.n	80018b8 <sqrt_newton+0x48>
  {
    x = 0.5 * (x + number / x); // Newton-Raphson formula
 8001896:	68f9      	ldr	r1, [r7, #12]
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f7ff fb31 	bl	8000f00 <__aeabi_fdiv>
 800189e:	4603      	mov	r3, r0
 80018a0:	68f9      	ldr	r1, [r7, #12]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff f970 	bl	8000b88 <__addsf3>
 80018a8:	4603      	mov	r3, r0
 80018aa:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff fa72 	bl	8000d98 <__aeabi_fmul>
 80018b4:	4603      	mov	r3, r0
 80018b6:	60fb      	str	r3, [r7, #12]
  while ((x * x - number) > epsilon || (number - x * x) > epsilon)
 80018b8:	68f9      	ldr	r1, [r7, #12]
 80018ba:	68f8      	ldr	r0, [r7, #12]
 80018bc:	f7ff fa6c 	bl	8000d98 <__aeabi_fmul>
 80018c0:	4603      	mov	r3, r0
 80018c2:	6879      	ldr	r1, [r7, #4]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff f95d 	bl	8000b84 <__aeabi_fsub>
 80018ca:	4603      	mov	r3, r0
 80018cc:	4619      	mov	r1, r3
 80018ce:	68b8      	ldr	r0, [r7, #8]
 80018d0:	f7ff fc00 	bl	80010d4 <__aeabi_fcmplt>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d1dd      	bne.n	8001896 <sqrt_newton+0x26>
 80018da:	68f9      	ldr	r1, [r7, #12]
 80018dc:	68f8      	ldr	r0, [r7, #12]
 80018de:	f7ff fa5b 	bl	8000d98 <__aeabi_fmul>
 80018e2:	4603      	mov	r3, r0
 80018e4:	4619      	mov	r1, r3
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f7ff f94c 	bl	8000b84 <__aeabi_fsub>
 80018ec:	4603      	mov	r3, r0
 80018ee:	4619      	mov	r1, r3
 80018f0:	68b8      	ldr	r0, [r7, #8]
 80018f2:	f7ff fbef 	bl	80010d4 <__aeabi_fcmplt>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d1cc      	bne.n	8001896 <sqrt_newton+0x26>
  }
  return x;
 80018fc:	68fb      	ldr	r3, [r7, #12]
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	bf800000 	.word	0xbf800000
 800190c:	38d1b717 	.word	0x38d1b717

08001910 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	0a1b      	lsrs	r3, r3, #8
 800191e:	b29a      	uxth	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	611a      	str	r2, [r3, #16]
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	bc80      	pop	{r7}
 800192c:	4770      	bx	lr

0800192e <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800192e:	b480      	push	{r7}
 8001930:	b083      	sub	sp, #12
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
 8001936:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	0a1b      	lsrs	r3, r3, #8
 800193c:	b29a      	uxth	r2, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	615a      	str	r2, [r3, #20]
}
 8001942:	bf00      	nop
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	bc80      	pop	{r7}
 800194a:	4770      	bx	lr

0800194c <ACS712_CurrentConverterVoltage>:
  /**********************
   *   PUBLIC FUNCTIONS
   **********************/

  static inline float ACS712_CurrentConverterVoltage(float current)
  {
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
	  return 2.5f + 0.1f * current;
 8001954:	4906      	ldr	r1, [pc, #24]	@ (8001970 <ACS712_CurrentConverterVoltage+0x24>)
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f7ff fa1e 	bl	8000d98 <__aeabi_fmul>
 800195c:	4603      	mov	r3, r0
 800195e:	4905      	ldr	r1, [pc, #20]	@ (8001974 <ACS712_CurrentConverterVoltage+0x28>)
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff f911 	bl	8000b88 <__addsf3>
 8001966:	4603      	mov	r3, r0
  }
 8001968:	4618      	mov	r0, r3
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	3dcccccd 	.word	0x3dcccccd
 8001974:	40200000 	.word	0x40200000

08001978 <APP_CONTROL_Init>:
 * PI control parameters, PWM configuration, ADC configuration, and resetting
 * relevant data.
 */
void
APP_CONTROL_Init (void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  // Turn Off Relay
  APP_CONTROL_RelayOff();
 800197c:	f000 fa28 	bl	8001dd0 <APP_CONTROL_RelayOff>

  // Link pointer to variable
  s_control_power.p_state = (CONTROL_STATE_t *)&s_control_llc_data.s_state_data;
 8001980:	4b26      	ldr	r3, [pc, #152]	@ (8001a1c <APP_CONTROL_Init+0xa4>)
 8001982:	4a27      	ldr	r2, [pc, #156]	@ (8001a20 <APP_CONTROL_Init+0xa8>)
 8001984:	601a      	str	r2, [r3, #0]
  s_control_power.p_control_voltage
      = (pi_control_t *)&s_control_llc_data.s_control_voltage;
 8001986:	4b25      	ldr	r3, [pc, #148]	@ (8001a1c <APP_CONTROL_Init+0xa4>)
 8001988:	4a26      	ldr	r2, [pc, #152]	@ (8001a24 <APP_CONTROL_Init+0xac>)
 800198a:	605a      	str	r2, [r3, #4]
  s_control_power.p_control_current
      = (pi_control_t *)&s_control_llc_data.s_control_current;
 800198c:	4b23      	ldr	r3, [pc, #140]	@ (8001a1c <APP_CONTROL_Init+0xa4>)
 800198e:	4a26      	ldr	r2, [pc, #152]	@ (8001a28 <APP_CONTROL_Init+0xb0>)
 8001990:	609a      	str	r2, [r3, #8]
  s_control_power.p_pwm_control_1
      = (pwm_cfg_t *)&s_control_llc_data.s_control_gate;
 8001992:	4b22      	ldr	r3, [pc, #136]	@ (8001a1c <APP_CONTROL_Init+0xa4>)
 8001994:	4a25      	ldr	r2, [pc, #148]	@ (8001a2c <APP_CONTROL_Init+0xb4>)
 8001996:	60da      	str	r2, [r3, #12]
  s_control_power.p_output_voltage
      = (float *)&s_control_llc_data.f_output_voltage;
 8001998:	4b20      	ldr	r3, [pc, #128]	@ (8001a1c <APP_CONTROL_Init+0xa4>)
 800199a:	4a25      	ldr	r2, [pc, #148]	@ (8001a30 <APP_CONTROL_Init+0xb8>)
 800199c:	615a      	str	r2, [r3, #20]
  s_control_power.p_output_current
      = (float *)&s_control_llc_data.f_output_current;
 800199e:	4b1f      	ldr	r3, [pc, #124]	@ (8001a1c <APP_CONTROL_Init+0xa4>)
 80019a0:	4a24      	ldr	r2, [pc, #144]	@ (8001a34 <APP_CONTROL_Init+0xbc>)
 80019a2:	611a      	str	r2, [r3, #16]

  // Prepare data task control power
  *s_control_power.p_state = WAIT_INPUT_VOLTAGE;
 80019a4:	4b1d      	ldr	r3, [pc, #116]	@ (8001a1c <APP_CONTROL_Init+0xa4>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2200      	movs	r2, #0
 80019aa:	701a      	strb	r2, [r3, #0]

  // Initialize PI control parameters of control voltage
  s_control_power.p_control_voltage->f_Ki       = KI_VOLTAGE;
 80019ac:	4b1b      	ldr	r3, [pc, #108]	@ (8001a1c <APP_CONTROL_Init+0xa4>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	4a21      	ldr	r2, [pc, #132]	@ (8001a38 <APP_CONTROL_Init+0xc0>)
 80019b2:	61da      	str	r2, [r3, #28]
  s_control_power.p_control_voltage->f_Kp       = KP_VOLTAGE;
 80019b4:	4b19      	ldr	r3, [pc, #100]	@ (8001a1c <APP_CONTROL_Init+0xa4>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	4a1f      	ldr	r2, [pc, #124]	@ (8001a38 <APP_CONTROL_Init+0xc0>)
 80019ba:	619a      	str	r2, [r3, #24]
  s_control_power.p_control_voltage->f_setPoint = VOLTAGE_END_THRESHOLD;
 80019bc:	4b17      	ldr	r3, [pc, #92]	@ (8001a1c <APP_CONTROL_Init+0xa4>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	4a1e      	ldr	r2, [pc, #120]	@ (8001a3c <APP_CONTROL_Init+0xc4>)
 80019c2:	621a      	str	r2, [r3, #32]

  // Initialize PI control parameters of control current
  s_control_power.p_control_current->f_Ki       = KI_CURRENT;
 80019c4:	4b15      	ldr	r3, [pc, #84]	@ (8001a1c <APP_CONTROL_Init+0xa4>)
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	4a1b      	ldr	r2, [pc, #108]	@ (8001a38 <APP_CONTROL_Init+0xc0>)
 80019ca:	61da      	str	r2, [r3, #28]
  s_control_power.p_control_current->f_Kp       = KP_CURRENT;
 80019cc:	4b13      	ldr	r3, [pc, #76]	@ (8001a1c <APP_CONTROL_Init+0xa4>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	4a19      	ldr	r2, [pc, #100]	@ (8001a38 <APP_CONTROL_Init+0xc0>)
 80019d2:	619a      	str	r2, [r3, #24]
  s_control_power.p_control_current->f_setPoint = CURRENT_START_THRESHOLD;
 80019d4:	4b11      	ldr	r3, [pc, #68]	@ (8001a1c <APP_CONTROL_Init+0xa4>)
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	4a19      	ldr	r2, [pc, #100]	@ (8001a40 <APP_CONTROL_Init+0xc8>)
 80019da:	621a      	str	r2, [r3, #32]

  // Initialize PWM control parameters
  s_control_power.p_pwm_control_1->channel = PWM_CHANNEL_1;
 80019dc:	4b0f      	ldr	r3, [pc, #60]	@ (8001a1c <APP_CONTROL_Init+0xa4>)
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	2201      	movs	r2, #1
 80019e2:	60da      	str	r2, [r3, #12]
  s_control_power.p_pwm_control_1->output  = PWM_POSITIVE_NEGATIVE;
 80019e4:	4b0d      	ldr	r3, [pc, #52]	@ (8001a1c <APP_CONTROL_Init+0xa4>)
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	2201      	movs	r2, #1
 80019ea:	741a      	strb	r2, [r3, #16]
  s_control_power.p_pwm_control_1->p_tim   = TIM1;
 80019ec:	4b0b      	ldr	r3, [pc, #44]	@ (8001a1c <APP_CONTROL_Init+0xa4>)
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	4a14      	ldr	r2, [pc, #80]	@ (8001a44 <APP_CONTROL_Init+0xcc>)
 80019f2:	601a      	str	r2, [r3, #0]

  // Reset control data
  APP_CONTROL_ResetData();
 80019f4:	f000 f9f8 	bl	8001de8 <APP_CONTROL_ResetData>

  // Enable PWM timer
  BSP_PWM_EnableTimer(s_control_power.p_pwm_control_1);
 80019f8:	4b08      	ldr	r3, [pc, #32]	@ (8001a1c <APP_CONTROL_Init+0xa4>)
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f000 ff1f 	bl	8002840 <BSP_PWM_EnableTimer>

  // Reset PI control
  PIControl_Reset(s_control_power.p_control_voltage);
 8001a02:	4b06      	ldr	r3, [pc, #24]	@ (8001a1c <APP_CONTROL_Init+0xa4>)
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f003 fb6c 	bl	80050e4 <PIControl_Reset>
  PIControl_Reset(s_control_power.p_control_current);
 8001a0c:	4b03      	ldr	r3, [pc, #12]	@ (8001a1c <APP_CONTROL_Init+0xa4>)
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f003 fb67 	bl	80050e4 <PIControl_Reset>
}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	20000430 	.word	0x20000430
 8001a20:	20000454 	.word	0x20000454
 8001a24:	20000458 	.word	0x20000458
 8001a28:	2000047c 	.word	0x2000047c
 8001a2c:	200004a0 	.word	0x200004a0
 8001a30:	200004e0 	.word	0x200004e0
 8001a34:	200004e4 	.word	0x200004e4
 8001a38:	3dcccccd 	.word	0x3dcccccd
 8001a3c:	42680000 	.word	0x42680000
 8001a40:	40c00000 	.word	0x40c00000
 8001a44:	40012c00 	.word	0x40012c00

08001a48 <APP_CONTROL_CreateTask>:
 * This function creates a control task using the scheduler's task creation
 * function, initializing the task handle and task properties.
 */
void
APP_CONTROL_CreateTask (void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  SCH_TASK_CreateTask(&s_ControlTaskContext.taskHandle,
 8001a4c:	4902      	ldr	r1, [pc, #8]	@ (8001a58 <APP_CONTROL_CreateTask+0x10>)
 8001a4e:	4803      	ldr	r0, [pc, #12]	@ (8001a5c <APP_CONTROL_CreateTask+0x14>)
 8001a50:	f003 fcf8 	bl	8005444 <SCH_TASK_CreateTask>
                      &s_ControlTaskContext.taskProperty);
}
 8001a54:	bf00      	nop
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	2000009c 	.word	0x2000009c
 8001a5c:	20000098 	.word	0x20000098

08001a60 <APP_CONTROL_TaskUpdate>:
 * The function `APP_CONTROL_TaskUpdate` implements a state machine for
 * controlling a power system with different charging modes and transitions.
 */
static void
APP_CONTROL_TaskUpdate (void)
{
 8001a60:	b590      	push	{r4, r7, lr}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
  switch (*s_control_power.p_state)
 8001a66:	4ba5      	ldr	r3, [pc, #660]	@ (8001cfc <APP_CONTROL_TaskUpdate+0x29c>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	2b06      	cmp	r3, #6
 8001a6e:	f200 813e 	bhi.w	8001cee <APP_CONTROL_TaskUpdate+0x28e>
 8001a72:	a201      	add	r2, pc, #4	@ (adr r2, 8001a78 <APP_CONTROL_TaskUpdate+0x18>)
 8001a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a78:	08001a95 	.word	0x08001a95
 8001a7c:	08001adb 	.word	0x08001adb
 8001a80:	08001b09 	.word	0x08001b09
 8001a84:	08001bc5 	.word	0x08001bc5
 8001a88:	08001c4f 	.word	0x08001c4f
 8001a8c:	08001c6b 	.word	0x08001c6b
 8001a90:	08001cad 	.word	0x08001cad
  {
    case WAIT_INPUT_VOLTAGE:

      if ((s_control_llc_data.f_input_voltage >= AC_INPUT_VOLTAGE_MIN)
 8001a94:	4b9a      	ldr	r3, [pc, #616]	@ (8001d00 <APP_CONTROL_TaskUpdate+0x2a0>)
 8001a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a9a:	499a      	ldr	r1, [pc, #616]	@ (8001d04 <APP_CONTROL_TaskUpdate+0x2a4>)
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff fb2d 	bl	80010fc <__aeabi_fcmpge>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d010      	beq.n	8001aca <APP_CONTROL_TaskUpdate+0x6a>
          && (s_control_llc_data.f_output_voltage <= AC_INPUT_VOLTAGE_MAX))
 8001aa8:	4b95      	ldr	r3, [pc, #596]	@ (8001d00 <APP_CONTROL_TaskUpdate+0x2a0>)
 8001aaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001aae:	4996      	ldr	r1, [pc, #600]	@ (8001d08 <APP_CONTROL_TaskUpdate+0x2a8>)
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff fb19 	bl	80010e8 <__aeabi_fcmple>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d006      	beq.n	8001aca <APP_CONTROL_TaskUpdate+0x6a>
      {
        APP_CONTROL_RelayOn();
 8001abc:	f000 f97c 	bl	8001db8 <APP_CONTROL_RelayOn>
        *s_control_power.p_state = DISCHARGING;
 8001ac0:	4b8e      	ldr	r3, [pc, #568]	@ (8001cfc <APP_CONTROL_TaskUpdate+0x29c>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2206      	movs	r2, #6
 8001ac6:	701a      	strb	r2, [r3, #0]
      {
        // Turn off PWM
        BSP_PWM_DisableTimer(s_control_power.p_pwm_control_1);
        APP_CONTROL_RelayOff();
      }
      break;
 8001ac8:	e114      	b.n	8001cf4 <APP_CONTROL_TaskUpdate+0x294>
        BSP_PWM_DisableTimer(s_control_power.p_pwm_control_1);
 8001aca:	4b8c      	ldr	r3, [pc, #560]	@ (8001cfc <APP_CONTROL_TaskUpdate+0x29c>)
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f000 ff1f 	bl	8002912 <BSP_PWM_DisableTimer>
        APP_CONTROL_RelayOff();
 8001ad4:	f000 f97c 	bl	8001dd0 <APP_CONTROL_RelayOff>
      break;
 8001ad8:	e10c      	b.n	8001cf4 <APP_CONTROL_TaskUpdate+0x294>
    case SOFT_START:

      // Handle soft start initialization
      FCP_PhaseStart(s_control_power.u32_times_change_fre);
 8001ada:	4b88      	ldr	r3, [pc, #544]	@ (8001cfc <APP_CONTROL_TaskUpdate+0x29c>)
 8001adc:	7f1b      	ldrb	r3, [r3, #28]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f003 f9ce 	bl	8004e80 <FCP_PhaseStart>
      if (s_control_power.u32_times_change_fre >= TIME_LIMIT_PHASE_START)
 8001ae4:	4b85      	ldr	r3, [pc, #532]	@ (8001cfc <APP_CONTROL_TaskUpdate+0x29c>)
 8001ae6:	7f1b      	ldrb	r3, [r3, #28]
 8001ae8:	2b3b      	cmp	r3, #59	@ 0x3b
 8001aea:	d906      	bls.n	8001afa <APP_CONTROL_TaskUpdate+0x9a>
      {
        s_control_power.u32_times_change_fre = 0;
 8001aec:	4b83      	ldr	r3, [pc, #524]	@ (8001cfc <APP_CONTROL_TaskUpdate+0x29c>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	771a      	strb	r2, [r3, #28]
        *s_control_power.p_state             = CC_MODE_CHARGING;
 8001af2:	4b82      	ldr	r3, [pc, #520]	@ (8001cfc <APP_CONTROL_TaskUpdate+0x29c>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2202      	movs	r2, #2
 8001af8:	701a      	strb	r2, [r3, #0]
      }
      s_control_power.u32_times_change_fre++;
 8001afa:	4b80      	ldr	r3, [pc, #512]	@ (8001cfc <APP_CONTROL_TaskUpdate+0x29c>)
 8001afc:	7f1b      	ldrb	r3, [r3, #28]
 8001afe:	3301      	adds	r3, #1
 8001b00:	b2da      	uxtb	r2, r3
 8001b02:	4b7e      	ldr	r3, [pc, #504]	@ (8001cfc <APP_CONTROL_TaskUpdate+0x29c>)
 8001b04:	771a      	strb	r2, [r3, #28]

      break;
 8001b06:	e0f5      	b.n	8001cf4 <APP_CONTROL_TaskUpdate+0x294>
    case CC_MODE_CHARGING:

      // Progress of charging
      if (s_control_power.u32_times_change_fre >= CONTROL_PI_TIME_SAMPLE)
 8001b08:	4b7c      	ldr	r3, [pc, #496]	@ (8001cfc <APP_CONTROL_TaskUpdate+0x29c>)
 8001b0a:	7f1b      	ldrb	r3, [r3, #28]
 8001b0c:	2b09      	cmp	r3, #9
 8001b0e:	d924      	bls.n	8001b5a <APP_CONTROL_TaskUpdate+0xfa>
      {
        // Read voltage channel current
        float value_temp = ADS1115_ReadVoltage(ADS1115_CURRENT_CHANNEL);
 8001b10:	2001      	movs	r0, #1
 8001b12:	f002 f9c3 	bl	8003e9c <ADS1115_ReadVoltage>
 8001b16:	6078      	str	r0, [r7, #4]

        // Convert from voltage channel current to current
        *s_control_power.p_output_current
 8001b18:	4b78      	ldr	r3, [pc, #480]	@ (8001cfc <APP_CONTROL_TaskUpdate+0x29c>)
 8001b1a:	691c      	ldr	r4, [r3, #16]
            = ACS712_CurrentConverterVoltage(value_temp);
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f7ff ff15 	bl	800194c <ACS712_CurrentConverterVoltage>
 8001b22:	4603      	mov	r3, r0
 8001b24:	6023      	str	r3, [r4, #0]

        // PI control
        PIControl_Process(*s_control_power.p_output_current,
 8001b26:	4b75      	ldr	r3, [pc, #468]	@ (8001cfc <APP_CONTROL_TaskUpdate+0x29c>)
 8001b28:	691b      	ldr	r3, [r3, #16]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a73      	ldr	r2, [pc, #460]	@ (8001cfc <APP_CONTROL_TaskUpdate+0x29c>)
 8001b2e:	6892      	ldr	r2, [r2, #8]
 8001b30:	4611      	mov	r1, r2
 8001b32:	4618      	mov	r0, r3
 8001b34:	f003 fafc 	bl	8005130 <PIControl_Process>
                          s_control_power.p_control_current);

        // Current convert frequency
        s_control_power.u32_frequency_operation
            = CCF_Process(s_control_power.p_control_current->f_out);
 8001b38:	4b70      	ldr	r3, [pc, #448]	@ (8001cfc <APP_CONTROL_TaskUpdate+0x29c>)
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f003 f96e 	bl	8004e20 <CCF_Process>
 8001b44:	4603      	mov	r3, r0
 8001b46:	4a6d      	ldr	r2, [pc, #436]	@ (8001cfc <APP_CONTROL_TaskUpdate+0x29c>)
 8001b48:	6193      	str	r3, [r2, #24]

        // Frequency convert pulse
        FCP_PhaseProcess(s_control_power.u32_frequency_operation);
 8001b4a:	4b6c      	ldr	r3, [pc, #432]	@ (8001cfc <APP_CONTROL_TaskUpdate+0x29c>)
 8001b4c:	699b      	ldr	r3, [r3, #24]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f003 f9e6 	bl	8004f20 <FCP_PhaseProcess>
        s_control_power.u32_times_change_fre = 0;
 8001b54:	4b69      	ldr	r3, [pc, #420]	@ (8001cfc <APP_CONTROL_TaskUpdate+0x29c>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	771a      	strb	r2, [r3, #28]
      }
      s_control_power.u32_times_change_fre++;
 8001b5a:	4b68      	ldr	r3, [pc, #416]	@ (8001cfc <APP_CONTROL_TaskUpdate+0x29c>)
 8001b5c:	7f1b      	ldrb	r3, [r3, #28]
 8001b5e:	3301      	adds	r3, #1
 8001b60:	b2da      	uxtb	r2, r3
 8001b62:	4b66      	ldr	r3, [pc, #408]	@ (8001cfc <APP_CONTROL_TaskUpdate+0x29c>)
 8001b64:	771a      	strb	r2, [r3, #28]

      // Read voltage feedback
      *s_control_power.p_output_voltage
 8001b66:	4b65      	ldr	r3, [pc, #404]	@ (8001cfc <APP_CONTROL_TaskUpdate+0x29c>)
 8001b68:	695c      	ldr	r4, [r3, #20]
          = ADS1115_ReadVoltage(ADS1115_VOLTAGE_CHANNEL);
 8001b6a:	2002      	movs	r0, #2
 8001b6c:	f002 f996 	bl	8003e9c <ADS1115_ReadVoltage>
 8001b70:	4603      	mov	r3, r0
 8001b72:	6023      	str	r3, [r4, #0]
      APP_CONTROL_ConvertVoltageOutput();
 8001b74:	f000 f8e4 	bl	8001d40 <APP_CONTROL_ConvertVoltageOutput>

      if (*s_control_power.p_output_voltage > VOLTAGE_END_THRESHOLD)
 8001b78:	4b60      	ldr	r3, [pc, #384]	@ (8001cfc <APP_CONTROL_TaskUpdate+0x29c>)
 8001b7a:	695b      	ldr	r3, [r3, #20]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4963      	ldr	r1, [pc, #396]	@ (8001d0c <APP_CONTROL_TaskUpdate+0x2ac>)
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff fac5 	bl	8001110 <__aeabi_fcmpgt>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d100      	bne.n	8001b8e <APP_CONTROL_TaskUpdate+0x12e>
        {
          *s_control_power.p_state             = WAIT_UNPLUGGED;
          s_control_power.u32_times_change_fre = 0;
        }
      }
      break;
 8001b8c:	e0b2      	b.n	8001cf4 <APP_CONTROL_TaskUpdate+0x294>
        if (*s_control_power.p_output_current >= CURRENT_END_THRESHOLD)
 8001b8e:	4b5b      	ldr	r3, [pc, #364]	@ (8001cfc <APP_CONTROL_TaskUpdate+0x29c>)
 8001b90:	691b      	ldr	r3, [r3, #16]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff faaf 	bl	80010fc <__aeabi_fcmpge>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d007      	beq.n	8001bb4 <APP_CONTROL_TaskUpdate+0x154>
          *s_control_power.p_state             = CV_MODE_CHARGING;
 8001ba4:	4b55      	ldr	r3, [pc, #340]	@ (8001cfc <APP_CONTROL_TaskUpdate+0x29c>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2203      	movs	r2, #3
 8001baa:	701a      	strb	r2, [r3, #0]
          s_control_power.u32_times_change_fre = 0;
 8001bac:	4b53      	ldr	r3, [pc, #332]	@ (8001cfc <APP_CONTROL_TaskUpdate+0x29c>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	771a      	strb	r2, [r3, #28]
      break;
 8001bb2:	e09f      	b.n	8001cf4 <APP_CONTROL_TaskUpdate+0x294>
          *s_control_power.p_state             = WAIT_UNPLUGGED;
 8001bb4:	4b51      	ldr	r3, [pc, #324]	@ (8001cfc <APP_CONTROL_TaskUpdate+0x29c>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2205      	movs	r2, #5
 8001bba:	701a      	strb	r2, [r3, #0]
          s_control_power.u32_times_change_fre = 0;
 8001bbc:	4b4f      	ldr	r3, [pc, #316]	@ (8001cfc <APP_CONTROL_TaskUpdate+0x29c>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	771a      	strb	r2, [r3, #28]
      break;
 8001bc2:	e097      	b.n	8001cf4 <APP_CONTROL_TaskUpdate+0x294>
    case CV_MODE_CHARGING:

      // Progress of charging
      if (s_control_power.u32_times_change_fre == CONTROL_PI_TIME_SAMPLE)
 8001bc4:	4b4d      	ldr	r3, [pc, #308]	@ (8001cfc <APP_CONTROL_TaskUpdate+0x29c>)
 8001bc6:	7f1b      	ldrb	r3, [r3, #28]
 8001bc8:	2b0a      	cmp	r3, #10
 8001bca:	d122      	bne.n	8001c12 <APP_CONTROL_TaskUpdate+0x1b2>
      {
        // Read voltage channel voltage
        *s_control_power.p_output_voltage = ADS1115_ReadVoltage(ADS1115_VOLTAGE_CHANNEL);
 8001bcc:	4b4b      	ldr	r3, [pc, #300]	@ (8001cfc <APP_CONTROL_TaskUpdate+0x29c>)
 8001bce:	695c      	ldr	r4, [r3, #20]
 8001bd0:	2002      	movs	r0, #2
 8001bd2:	f002 f963 	bl	8003e9c <ADS1115_ReadVoltage>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	6023      	str	r3, [r4, #0]
        APP_CONTROL_ConvertVoltageOutput();
 8001bda:	f000 f8b1 	bl	8001d40 <APP_CONTROL_ConvertVoltageOutput>

        // PI control
        PIControl_Process(*s_control_power.p_output_voltage,
 8001bde:	4b47      	ldr	r3, [pc, #284]	@ (8001cfc <APP_CONTROL_TaskUpdate+0x29c>)
 8001be0:	695b      	ldr	r3, [r3, #20]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a45      	ldr	r2, [pc, #276]	@ (8001cfc <APP_CONTROL_TaskUpdate+0x29c>)
 8001be6:	6852      	ldr	r2, [r2, #4]
 8001be8:	4611      	mov	r1, r2
 8001bea:	4618      	mov	r0, r3
 8001bec:	f003 faa0 	bl	8005130 <PIControl_Process>
                          s_control_power.p_control_voltage);

        // Voltage convert frequency
        s_control_power.u32_frequency_operation
            = VCF_Process(s_control_power.p_control_voltage->f_out);
 8001bf0:	4b42      	ldr	r3, [pc, #264]	@ (8001cfc <APP_CONTROL_TaskUpdate+0x29c>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f003 fba6 	bl	8005348 <VCF_Process>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	4a3f      	ldr	r2, [pc, #252]	@ (8001cfc <APP_CONTROL_TaskUpdate+0x29c>)
 8001c00:	6193      	str	r3, [r2, #24]

        // Frequency convert pulse
        FCP_PhaseProcess(s_control_power.u32_frequency_operation);
 8001c02:	4b3e      	ldr	r3, [pc, #248]	@ (8001cfc <APP_CONTROL_TaskUpdate+0x29c>)
 8001c04:	699b      	ldr	r3, [r3, #24]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f003 f98a 	bl	8004f20 <FCP_PhaseProcess>
        s_control_power.u32_times_change_fre = 0;
 8001c0c:	4b3b      	ldr	r3, [pc, #236]	@ (8001cfc <APP_CONTROL_TaskUpdate+0x29c>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	771a      	strb	r2, [r3, #28]
      }
      s_control_power.u32_times_change_fre++;
 8001c12:	4b3a      	ldr	r3, [pc, #232]	@ (8001cfc <APP_CONTROL_TaskUpdate+0x29c>)
 8001c14:	7f1b      	ldrb	r3, [r3, #28]
 8001c16:	3301      	adds	r3, #1
 8001c18:	b2da      	uxtb	r2, r3
 8001c1a:	4b38      	ldr	r3, [pc, #224]	@ (8001cfc <APP_CONTROL_TaskUpdate+0x29c>)
 8001c1c:	771a      	strb	r2, [r3, #28]

      // If the charging current <= CURRENT_END_THRESHOLD, wait for 5 minutes,
      // then switch to discharging
      if (*s_control_power.p_output_current <= CURRENT_END_THRESHOLD)
 8001c1e:	4b37      	ldr	r3, [pc, #220]	@ (8001cfc <APP_CONTROL_TaskUpdate+0x29c>)
 8001c20:	691b      	ldr	r3, [r3, #16]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff fa5d 	bl	80010e8 <__aeabi_fcmple>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d100      	bne.n	8001c36 <APP_CONTROL_TaskUpdate+0x1d6>
      {
        u16_time_wait_discharging            = TIME_LIMIT_STOP_CHARGING;
        s_control_power.u32_times_change_fre = 0;
        *s_control_power.p_state             = WAIT_DISCHARGING;
      }
      break;
 8001c34:	e05e      	b.n	8001cf4 <APP_CONTROL_TaskUpdate+0x294>
        u16_time_wait_discharging            = TIME_LIMIT_STOP_CHARGING;
 8001c36:	4b36      	ldr	r3, [pc, #216]	@ (8001d10 <APP_CONTROL_TaskUpdate+0x2b0>)
 8001c38:	f247 5230 	movw	r2, #30000	@ 0x7530
 8001c3c:	801a      	strh	r2, [r3, #0]
        s_control_power.u32_times_change_fre = 0;
 8001c3e:	4b2f      	ldr	r3, [pc, #188]	@ (8001cfc <APP_CONTROL_TaskUpdate+0x29c>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	771a      	strb	r2, [r3, #28]
        *s_control_power.p_state             = WAIT_DISCHARGING;
 8001c44:	4b2d      	ldr	r3, [pc, #180]	@ (8001cfc <APP_CONTROL_TaskUpdate+0x29c>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2204      	movs	r2, #4
 8001c4a:	701a      	strb	r2, [r3, #0]
      break;
 8001c4c:	e052      	b.n	8001cf4 <APP_CONTROL_TaskUpdate+0x294>

    case WAIT_DISCHARGING:

      // wait for 5 minutes
      if (u16_time_wait_discharging == 0)
 8001c4e:	4b30      	ldr	r3, [pc, #192]	@ (8001d10 <APP_CONTROL_TaskUpdate+0x2b0>)
 8001c50:	881b      	ldrh	r3, [r3, #0]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d14d      	bne.n	8001cf2 <APP_CONTROL_TaskUpdate+0x292>
      {
        // Turn off PWM
        BSP_PWM_DisableTimer(s_control_power.p_pwm_control_1);
 8001c56:	4b29      	ldr	r3, [pc, #164]	@ (8001cfc <APP_CONTROL_TaskUpdate+0x29c>)
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f000 fe59 	bl	8002912 <BSP_PWM_DisableTimer>
        *s_control_power.p_state = WAIT_UNPLUGGED;
 8001c60:	4b26      	ldr	r3, [pc, #152]	@ (8001cfc <APP_CONTROL_TaskUpdate+0x29c>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2205      	movs	r2, #5
 8001c66:	701a      	strb	r2, [r3, #0]
      }
      break;
 8001c68:	e043      	b.n	8001cf2 <APP_CONTROL_TaskUpdate+0x292>

    case WAIT_UNPLUGGED:

      // Read voltage feedback
      *s_control_power.p_output_voltage
 8001c6a:	4b24      	ldr	r3, [pc, #144]	@ (8001cfc <APP_CONTROL_TaskUpdate+0x29c>)
 8001c6c:	695c      	ldr	r4, [r3, #20]
          = ADS1115_ReadVoltage(ADS1115_VOLTAGE_CHANNEL);
 8001c6e:	2002      	movs	r0, #2
 8001c70:	f002 f914 	bl	8003e9c <ADS1115_ReadVoltage>
 8001c74:	4603      	mov	r3, r0
 8001c76:	6023      	str	r3, [r4, #0]
      APP_CONTROL_ConvertVoltageOutput();
 8001c78:	f000 f862 	bl	8001d40 <APP_CONTROL_ConvertVoltageOutput>

      if (*s_control_power.p_output_voltage < VOLTAGE_START_THRESHOLD)
 8001c7c:	4b1f      	ldr	r3, [pc, #124]	@ (8001cfc <APP_CONTROL_TaskUpdate+0x29c>)
 8001c7e:	695b      	ldr	r3, [r3, #20]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4924      	ldr	r1, [pc, #144]	@ (8001d14 <APP_CONTROL_TaskUpdate+0x2b4>)
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff fa25 	bl	80010d4 <__aeabi_fcmplt>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d100      	bne.n	8001c92 <APP_CONTROL_TaskUpdate+0x232>
        BSP_PWM_EnableTimer(s_control_power.p_pwm_control_1);

        s_control_power.u32_times_change_fre = 0;
        *s_control_power.p_state             = DISCHARGING;
      }
      break;
 8001c90:	e030      	b.n	8001cf4 <APP_CONTROL_TaskUpdate+0x294>
        BSP_PWM_EnableTimer(s_control_power.p_pwm_control_1);
 8001c92:	4b1a      	ldr	r3, [pc, #104]	@ (8001cfc <APP_CONTROL_TaskUpdate+0x29c>)
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f000 fdd2 	bl	8002840 <BSP_PWM_EnableTimer>
        s_control_power.u32_times_change_fre = 0;
 8001c9c:	4b17      	ldr	r3, [pc, #92]	@ (8001cfc <APP_CONTROL_TaskUpdate+0x29c>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	771a      	strb	r2, [r3, #28]
        *s_control_power.p_state             = DISCHARGING;
 8001ca2:	4b16      	ldr	r3, [pc, #88]	@ (8001cfc <APP_CONTROL_TaskUpdate+0x29c>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2206      	movs	r2, #6
 8001ca8:	701a      	strb	r2, [r3, #0]
      break;
 8001caa:	e023      	b.n	8001cf4 <APP_CONTROL_TaskUpdate+0x294>

    case DISCHARGING:

      // Read voltage feedback
      *s_control_power.p_output_voltage
 8001cac:	4b13      	ldr	r3, [pc, #76]	@ (8001cfc <APP_CONTROL_TaskUpdate+0x29c>)
 8001cae:	695c      	ldr	r4, [r3, #20]
          = ADS1115_ReadVoltage(ADS1115_VOLTAGE_CHANNEL);
 8001cb0:	2002      	movs	r0, #2
 8001cb2:	f002 f8f3 	bl	8003e9c <ADS1115_ReadVoltage>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	6023      	str	r3, [r4, #0]
      APP_CONTROL_ConvertVoltageOutput();
 8001cba:	f000 f841 	bl	8001d40 <APP_CONTROL_ConvertVoltageOutput>

      if (*s_control_power.p_output_voltage >= VOLTAGE_START_THRESHOLD)
 8001cbe:	4b0f      	ldr	r3, [pc, #60]	@ (8001cfc <APP_CONTROL_TaskUpdate+0x29c>)
 8001cc0:	695b      	ldr	r3, [r3, #20]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4913      	ldr	r1, [pc, #76]	@ (8001d14 <APP_CONTROL_TaskUpdate+0x2b4>)
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff fa18 	bl	80010fc <__aeabi_fcmpge>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d100      	bne.n	8001cd4 <APP_CONTROL_TaskUpdate+0x274>
        BSP_PWM_EnableTimer(s_control_power.p_pwm_control_1);

        s_control_power.u32_times_change_fre = 0;
        *s_control_power.p_state             = SOFT_START;
      }
      break;
 8001cd2:	e00f      	b.n	8001cf4 <APP_CONTROL_TaskUpdate+0x294>
        BSP_PWM_EnableTimer(s_control_power.p_pwm_control_1);
 8001cd4:	4b09      	ldr	r3, [pc, #36]	@ (8001cfc <APP_CONTROL_TaskUpdate+0x29c>)
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f000 fdb1 	bl	8002840 <BSP_PWM_EnableTimer>
        s_control_power.u32_times_change_fre = 0;
 8001cde:	4b07      	ldr	r3, [pc, #28]	@ (8001cfc <APP_CONTROL_TaskUpdate+0x29c>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	771a      	strb	r2, [r3, #28]
        *s_control_power.p_state             = SOFT_START;
 8001ce4:	4b05      	ldr	r3, [pc, #20]	@ (8001cfc <APP_CONTROL_TaskUpdate+0x29c>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2201      	movs	r2, #1
 8001cea:	701a      	strb	r2, [r3, #0]
      break;
 8001cec:	e002      	b.n	8001cf4 <APP_CONTROL_TaskUpdate+0x294>
    default:
      break;
 8001cee:	bf00      	nop
 8001cf0:	e000      	b.n	8001cf4 <APP_CONTROL_TaskUpdate+0x294>
      break;
 8001cf2:	bf00      	nop
  }
}
 8001cf4:	bf00      	nop
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd90      	pop	{r4, r7, pc}
 8001cfc:	20000430 	.word	0x20000430
 8001d00:	20000454 	.word	0x20000454
 8001d04:	42aa0000 	.word	0x42aa0000
 8001d08:	43848000 	.word	0x43848000
 8001d0c:	42680000 	.word	0x42680000
 8001d10:	20000450 	.word	0x20000450
 8001d14:	422c0000 	.word	0x422c0000

08001d18 <APP_CONTROL_TimeWaitDischarging>:
 * The function `APP_CONTROL_TimeWaitDischarging` decrements the variable
 * `u16_time_wait_discharging` if it is greater than 0.
 */
void
APP_CONTROL_TimeWaitDischarging (void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  if (u16_time_wait_discharging > 0)
 8001d1c:	4b06      	ldr	r3, [pc, #24]	@ (8001d38 <APP_CONTROL_TimeWaitDischarging+0x20>)
 8001d1e:	881b      	ldrh	r3, [r3, #0]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d005      	beq.n	8001d30 <APP_CONTROL_TimeWaitDischarging+0x18>
  {
    u16_time_wait_discharging--;
 8001d24:	4b04      	ldr	r3, [pc, #16]	@ (8001d38 <APP_CONTROL_TimeWaitDischarging+0x20>)
 8001d26:	881b      	ldrh	r3, [r3, #0]
 8001d28:	3b01      	subs	r3, #1
 8001d2a:	b29a      	uxth	r2, r3
 8001d2c:	4b02      	ldr	r3, [pc, #8]	@ (8001d38 <APP_CONTROL_TimeWaitDischarging+0x20>)
 8001d2e:	801a      	strh	r2, [r3, #0]
  }
}
 8001d30:	bf00      	nop
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bc80      	pop	{r7}
 8001d36:	4770      	bx	lr
 8001d38:	20000450 	.word	0x20000450
 8001d3c:	00000000 	.word	0x00000000

08001d40 <APP_CONTROL_ConvertVoltageOutput>:
 * The function `APP_CONTROL_ConvertVoltageOutput` converts the output voltage
 * value using a specific formula.
 */
static void
APP_CONTROL_ConvertVoltageOutput (void)
{
 8001d40:	b590      	push	{r4, r7, lr}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
  float value_temp                  = *s_control_power.p_output_voltage;
 8001d46:	4b1a      	ldr	r3, [pc, #104]	@ (8001db0 <APP_CONTROL_ConvertVoltageOutput+0x70>)
 8001d48:	695b      	ldr	r3, [r3, #20]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	607b      	str	r3, [r7, #4]
  *s_control_power.p_output_voltage = (value_temp / 3.09 + 3.3) * 13;
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f7fe fb74 	bl	800043c <__aeabi_f2d>
 8001d54:	a312      	add	r3, pc, #72	@ (adr r3, 8001da0 <APP_CONTROL_ConvertVoltageOutput+0x60>)
 8001d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d5a:	f7fe fcf1 	bl	8000740 <__aeabi_ddiv>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	460b      	mov	r3, r1
 8001d62:	4610      	mov	r0, r2
 8001d64:	4619      	mov	r1, r3
 8001d66:	a310      	add	r3, pc, #64	@ (adr r3, 8001da8 <APP_CONTROL_ConvertVoltageOutput+0x68>)
 8001d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d6c:	f7fe fa08 	bl	8000180 <__adddf3>
 8001d70:	4602      	mov	r2, r0
 8001d72:	460b      	mov	r3, r1
 8001d74:	4610      	mov	r0, r2
 8001d76:	4619      	mov	r1, r3
 8001d78:	f04f 0200 	mov.w	r2, #0
 8001d7c:	4b0d      	ldr	r3, [pc, #52]	@ (8001db4 <APP_CONTROL_ConvertVoltageOutput+0x74>)
 8001d7e:	f7fe fbb5 	bl	80004ec <__aeabi_dmul>
 8001d82:	4602      	mov	r2, r0
 8001d84:	460b      	mov	r3, r1
 8001d86:	490a      	ldr	r1, [pc, #40]	@ (8001db0 <APP_CONTROL_ConvertVoltageOutput+0x70>)
 8001d88:	694c      	ldr	r4, [r1, #20]
 8001d8a:	4610      	mov	r0, r2
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	f7fe fea5 	bl	8000adc <__aeabi_d2f>
 8001d92:	4603      	mov	r3, r0
 8001d94:	6023      	str	r3, [r4, #0]
}
 8001d96:	bf00      	nop
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd90      	pop	{r4, r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	eb851eb8 	.word	0xeb851eb8
 8001da4:	4008b851 	.word	0x4008b851
 8001da8:	66666666 	.word	0x66666666
 8001dac:	400a6666 	.word	0x400a6666
 8001db0:	20000430 	.word	0x20000430
 8001db4:	402a0000 	.word	0x402a0000

08001db8 <APP_CONTROL_RelayOn>:
 * The function `APP_CONTROL_RelayOn` turns on a relay by resetting the output
 * pin of a specific GPIO port.
 */
static void
APP_CONTROL_RelayOn (void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  LL_GPIO_ResetOutputPin(VOLTAGE_PROTECTION_GPIO_Port, VOLTAGE_PROTECTION_Pin);
 8001dbc:	4902      	ldr	r1, [pc, #8]	@ (8001dc8 <APP_CONTROL_RelayOn+0x10>)
 8001dbe:	4803      	ldr	r0, [pc, #12]	@ (8001dcc <APP_CONTROL_RelayOn+0x14>)
 8001dc0:	f7ff fdb5 	bl	800192e <LL_GPIO_ResetOutputPin>
}
 8001dc4:	bf00      	nop
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	04100010 	.word	0x04100010
 8001dcc:	40010c00 	.word	0x40010c00

08001dd0 <APP_CONTROL_RelayOff>:
 * The function `APP_CONTROL_RelayOff` turns off a relay by setting a specific
 * GPIO pin to a high voltage level.
 */
static void
APP_CONTROL_RelayOff (void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  LL_GPIO_SetOutputPin(VOLTAGE_PROTECTION_GPIO_Port, VOLTAGE_PROTECTION_Pin);
 8001dd4:	4902      	ldr	r1, [pc, #8]	@ (8001de0 <APP_CONTROL_RelayOff+0x10>)
 8001dd6:	4803      	ldr	r0, [pc, #12]	@ (8001de4 <APP_CONTROL_RelayOff+0x14>)
 8001dd8:	f7ff fd9a 	bl	8001910 <LL_GPIO_SetOutputPin>
}
 8001ddc:	bf00      	nop
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	04100010 	.word	0x04100010
 8001de4:	40010c00 	.word	0x40010c00

08001de8 <APP_CONTROL_ResetData>:
 * The function `APP_CONTROL_ResetData` resets certain data values related to
 * power control.
 */
static void
APP_CONTROL_ResetData (void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  s_control_power.u32_frequency_operation = 60000000;
 8001dec:	4b07      	ldr	r3, [pc, #28]	@ (8001e0c <APP_CONTROL_ResetData+0x24>)
 8001dee:	4a08      	ldr	r2, [pc, #32]	@ (8001e10 <APP_CONTROL_ResetData+0x28>)
 8001df0:	619a      	str	r2, [r3, #24]
  s_control_power.u32_times_change_fre    = 0;
 8001df2:	4b06      	ldr	r3, [pc, #24]	@ (8001e0c <APP_CONTROL_ResetData+0x24>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	771a      	strb	r2, [r3, #28]
  *s_control_power.p_output_voltage       = 0;
 8001df8:	4b04      	ldr	r3, [pc, #16]	@ (8001e0c <APP_CONTROL_ResetData+0x24>)
 8001dfa:	695b      	ldr	r3, [r3, #20]
 8001dfc:	f04f 0200 	mov.w	r2, #0
 8001e00:	601a      	str	r2, [r3, #0]
}
 8001e02:	bf00      	nop
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bc80      	pop	{r7}
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	20000430 	.word	0x20000430
 8001e10:	03938700 	.word	0x03938700

08001e14 <LL_GPIO_SetOutputPin>:
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	0a1b      	lsrs	r3, r3, #8
 8001e22:	b29a      	uxth	r2, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	611a      	str	r2, [r3, #16]
}
 8001e28:	bf00      	nop
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bc80      	pop	{r7}
 8001e30:	4770      	bx	lr

08001e32 <LL_GPIO_ResetOutputPin>:
{
 8001e32:	b480      	push	{r7}
 8001e34:	b083      	sub	sp, #12
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
 8001e3a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	0a1b      	lsrs	r3, r3, #8
 8001e40:	b29a      	uxth	r2, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	615a      	str	r2, [r3, #20]
}
 8001e46:	bf00      	nop
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bc80      	pop	{r7}
 8001e4e:	4770      	bx	lr

08001e50 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b085      	sub	sp, #20
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	60fb      	str	r3, [r7, #12]
  uint32_t pinmask = ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	0a1b      	lsrs	r3, r3, #8
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	60bb      	str	r3, [r7, #8]
  WRITE_REG(GPIOx->BSRR, ((odr & pinmask) << 16u) | (~odr & pinmask));
 8001e68:	68fa      	ldr	r2, [r7, #12]
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	041a      	lsls	r2, r3, #16
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	43d9      	mvns	r1, r3
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	400b      	ands	r3, r1
 8001e78:	431a      	orrs	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	611a      	str	r2, [r3, #16]
}
 8001e7e:	bf00      	nop
 8001e80:	3714      	adds	r7, #20
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bc80      	pop	{r7}
 8001e86:	4770      	bx	lr

08001e88 <APP_STATUS_LED_Init>:
 * The function initializes status LEDs by resetting GPIO pins, linking a
 * pointer to a variable, and resetting fields in a structure.
 */
void
APP_STATUS_LED_Init (void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  // Reset GPIO
  LL_GPIO_ResetOutputPin(LED_WAIT_GPIO_Port, LED_WAIT_Pin);
 8001e8c:	f240 1101 	movw	r1, #257	@ 0x101
 8001e90:	4810      	ldr	r0, [pc, #64]	@ (8001ed4 <APP_STATUS_LED_Init+0x4c>)
 8001e92:	f7ff ffce 	bl	8001e32 <LL_GPIO_ResetOutputPin>
  LL_GPIO_ResetOutputPin(LED_SOFT_START_GPIO_Port, LED_SOFT_START_Pin);
 8001e96:	f240 2102 	movw	r1, #514	@ 0x202
 8001e9a:	480e      	ldr	r0, [pc, #56]	@ (8001ed4 <APP_STATUS_LED_Init+0x4c>)
 8001e9c:	f7ff ffc9 	bl	8001e32 <LL_GPIO_ResetOutputPin>
  LL_GPIO_ResetOutputPin(LED_PROCESS_GPIO_Port, LED_PROCESS_Pin);
 8001ea0:	f240 4104 	movw	r1, #1028	@ 0x404
 8001ea4:	480b      	ldr	r0, [pc, #44]	@ (8001ed4 <APP_STATUS_LED_Init+0x4c>)
 8001ea6:	f7ff ffc4 	bl	8001e32 <LL_GPIO_ResetOutputPin>

  // Link pointer to variable
  s_status_led.p_status_led
      = (CONTROL_STATE_t *)&s_control_llc_data.s_state_data;
 8001eaa:	4b0b      	ldr	r3, [pc, #44]	@ (8001ed8 <APP_STATUS_LED_Init+0x50>)
 8001eac:	4a0b      	ldr	r2, [pc, #44]	@ (8001edc <APP_STATUS_LED_Init+0x54>)
 8001eae:	601a      	str	r2, [r3, #0]

  // Reset field of s_status_led
  s_status_led.u8_state_all_led           = 0;
 8001eb0:	4a09      	ldr	r2, [pc, #36]	@ (8001ed8 <APP_STATUS_LED_Init+0x50>)
 8001eb2:	7913      	ldrb	r3, [r2, #4]
 8001eb4:	f36f 0300 	bfc	r3, #0, #1
 8001eb8:	7113      	strb	r3, [r2, #4]
  s_status_led.u8_flag_enable_timer_100ms = 0;
 8001eba:	4a07      	ldr	r2, [pc, #28]	@ (8001ed8 <APP_STATUS_LED_Init+0x50>)
 8001ebc:	7913      	ldrb	r3, [r2, #4]
 8001ebe:	f36f 0341 	bfc	r3, #1, #1
 8001ec2:	7113      	strb	r3, [r2, #4]
  s_status_led.u8_flag_enable_timer_500ms = 0;
 8001ec4:	4a04      	ldr	r2, [pc, #16]	@ (8001ed8 <APP_STATUS_LED_Init+0x50>)
 8001ec6:	7913      	ldrb	r3, [r2, #4]
 8001ec8:	f36f 0382 	bfc	r3, #2, #1
 8001ecc:	7113      	strb	r3, [r2, #4]
}
 8001ece:	bf00      	nop
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	40010c00 	.word	0x40010c00
 8001ed8:	200004e8 	.word	0x200004e8
 8001edc:	20000454 	.word	0x20000454

08001ee0 <APP_STATUS_LED_CreateTimer>:
 * The function `APP_STATUS_LED_CreateTimer` creates timers for status LED
 * handling.
 */
void
APP_STATUS_LED_CreateTimer (void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  SCH_TIM_CreateTimer(&s_StatusLedTimerContext[0].timerHandle,
 8001ee4:	4904      	ldr	r1, [pc, #16]	@ (8001ef8 <APP_STATUS_LED_CreateTimer+0x18>)
 8001ee6:	4805      	ldr	r0, [pc, #20]	@ (8001efc <APP_STATUS_LED_CreateTimer+0x1c>)
 8001ee8:	f003 faea 	bl	80054c0 <SCH_TIM_CreateTimer>
                      &s_StatusLedTimerContext[0].timerProperty);
  SCH_TIM_CreateTimer(&s_StatusLedTimerContext[1].timerHandle,
 8001eec:	4904      	ldr	r1, [pc, #16]	@ (8001f00 <APP_STATUS_LED_CreateTimer+0x20>)
 8001eee:	4805      	ldr	r0, [pc, #20]	@ (8001f04 <APP_STATUS_LED_CreateTimer+0x24>)
 8001ef0:	f003 fae6 	bl	80054c0 <SCH_TIM_CreateTimer>
                      &s_StatusLedTimerContext[1].timerProperty);
}
 8001ef4:	bf00      	nop
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	200000bc 	.word	0x200000bc
 8001efc:	200000b8 	.word	0x200000b8
 8001f00:	200000c8 	.word	0x200000c8
 8001f04:	200000c4 	.word	0x200000c4

08001f08 <APP_STATUS_LED_CreateTask>:
/**
 * The function APP_STATUS_LED_CreateTask creates a task for the status LED.
 */
void
APP_STATUS_LED_CreateTask (void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  SCH_TASK_CreateTask(&s_StatusLedTaskContext.taskHandle,
 8001f0c:	4902      	ldr	r1, [pc, #8]	@ (8001f18 <APP_STATUS_LED_CreateTask+0x10>)
 8001f0e:	4803      	ldr	r0, [pc, #12]	@ (8001f1c <APP_STATUS_LED_CreateTask+0x14>)
 8001f10:	f003 fa98 	bl	8005444 <SCH_TASK_CreateTask>
                      &s_StatusLedTaskContext.taskProperty);
}
 8001f14:	bf00      	nop
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	200000ac 	.word	0x200000ac
 8001f1c:	200000a8 	.word	0x200000a8

08001f20 <APP_STATUS_LED_TaskUpdate>:
 * - **WAIT_DISCHARGING**: LED 3 toggles every 500 ms, others remain OFF.
 * - **WAIT_UNPLUGGED**: All LEDs toggle every 100 ms.
 */
static void
APP_STATUS_LED_TaskUpdate (void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  switch (*s_status_led.p_status_led)
 8001f24:	4b4a      	ldr	r3, [pc, #296]	@ (8002050 <APP_STATUS_LED_TaskUpdate+0x130>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	2b06      	cmp	r3, #6
 8001f2c:	f200 8088 	bhi.w	8002040 <APP_STATUS_LED_TaskUpdate+0x120>
 8001f30:	a201      	add	r2, pc, #4	@ (adr r2, 8001f38 <APP_STATUS_LED_TaskUpdate+0x18>)
 8001f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f36:	bf00      	nop
 8001f38:	08001f55 	.word	0x08001f55
 8001f3c:	08001f55 	.word	0x08001f55
 8001f40:	08001f93 	.word	0x08001f93
 8001f44:	08001f93 	.word	0x08001f93
 8001f48:	08001f93 	.word	0x08001f93
 8001f4c:	08001fcb 	.word	0x08001fcb
 8001f50:	08002003 	.word	0x08002003
  {
    case WAIT_INPUT_VOLTAGE:
    case SOFT_START:
      LL_GPIO_ResetOutputPin(LED_WAIT_GPIO_Port, LED_WAIT_Pin);
 8001f54:	f240 1101 	movw	r1, #257	@ 0x101
 8001f58:	483e      	ldr	r0, [pc, #248]	@ (8002054 <APP_STATUS_LED_TaskUpdate+0x134>)
 8001f5a:	f7ff ff6a 	bl	8001e32 <LL_GPIO_ResetOutputPin>
      LL_GPIO_ResetOutputPin(LED_SOFT_START_GPIO_Port, LED_SOFT_START_Pin);
 8001f5e:	f240 2102 	movw	r1, #514	@ 0x202
 8001f62:	483c      	ldr	r0, [pc, #240]	@ (8002054 <APP_STATUS_LED_TaskUpdate+0x134>)
 8001f64:	f7ff ff65 	bl	8001e32 <LL_GPIO_ResetOutputPin>
      LL_GPIO_ResetOutputPin(LED_PROCESS_GPIO_Port, LED_PROCESS_Pin);
 8001f68:	f240 4104 	movw	r1, #1028	@ 0x404
 8001f6c:	4839      	ldr	r0, [pc, #228]	@ (8002054 <APP_STATUS_LED_TaskUpdate+0x134>)
 8001f6e:	f7ff ff60 	bl	8001e32 <LL_GPIO_ResetOutputPin>
      s_status_led.u8_state_all_led = 0;
 8001f72:	4a37      	ldr	r2, [pc, #220]	@ (8002050 <APP_STATUS_LED_TaskUpdate+0x130>)
 8001f74:	7913      	ldrb	r3, [r2, #4]
 8001f76:	f36f 0300 	bfc	r3, #0, #1
 8001f7a:	7113      	strb	r3, [r2, #4]
      SCH_TIM_StopTimer(s_StatusLedTimerContext[0].timerHandle);
 8001f7c:	4b36      	ldr	r3, [pc, #216]	@ (8002058 <APP_STATUS_LED_TaskUpdate+0x138>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f003 fb01 	bl	8005588 <SCH_TIM_StopTimer>
      SCH_TIM_StopTimer(s_StatusLedTimerContext[1].timerHandle);
 8001f86:	4b34      	ldr	r3, [pc, #208]	@ (8002058 <APP_STATUS_LED_TaskUpdate+0x138>)
 8001f88:	7b1b      	ldrb	r3, [r3, #12]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f003 fafc 	bl	8005588 <SCH_TIM_StopTimer>
      break;
 8001f90:	e05b      	b.n	800204a <APP_STATUS_LED_TaskUpdate+0x12a>

    case CC_MODE_CHARGING:
    case CV_MODE_CHARGING:
    case WAIT_DISCHARGING:
      if (s_status_led.u8_flag_enable_timer_500ms == 0)
 8001f92:	4b2f      	ldr	r3, [pc, #188]	@ (8002050 <APP_STATUS_LED_TaskUpdate+0x130>)
 8001f94:	791b      	ldrb	r3, [r3, #4]
 8001f96:	f003 0304 	and.w	r3, r3, #4
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d151      	bne.n	8002044 <APP_STATUS_LED_TaskUpdate+0x124>
      {
        SCH_TIM_StopTimer(s_StatusLedTimerContext[0].timerHandle);
 8001fa0:	4b2d      	ldr	r3, [pc, #180]	@ (8002058 <APP_STATUS_LED_TaskUpdate+0x138>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f003 faef 	bl	8005588 <SCH_TIM_StopTimer>
        SCH_TIM_RestartTimer(s_StatusLedTimerContext[1].timerHandle);
 8001faa:	4b2b      	ldr	r3, [pc, #172]	@ (8002058 <APP_STATUS_LED_TaskUpdate+0x138>)
 8001fac:	7b1b      	ldrb	r3, [r3, #12]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f003 fac4 	bl	800553c <SCH_TIM_RestartTimer>
        s_status_led.u8_flag_enable_timer_100ms = 0;
 8001fb4:	4a26      	ldr	r2, [pc, #152]	@ (8002050 <APP_STATUS_LED_TaskUpdate+0x130>)
 8001fb6:	7913      	ldrb	r3, [r2, #4]
 8001fb8:	f36f 0341 	bfc	r3, #1, #1
 8001fbc:	7113      	strb	r3, [r2, #4]
        s_status_led.u8_flag_enable_timer_500ms = 1;
 8001fbe:	4a24      	ldr	r2, [pc, #144]	@ (8002050 <APP_STATUS_LED_TaskUpdate+0x130>)
 8001fc0:	7913      	ldrb	r3, [r2, #4]
 8001fc2:	f043 0304 	orr.w	r3, r3, #4
 8001fc6:	7113      	strb	r3, [r2, #4]
      }
      break;
 8001fc8:	e03c      	b.n	8002044 <APP_STATUS_LED_TaskUpdate+0x124>

    case WAIT_UNPLUGGED:
      if (s_status_led.u8_flag_enable_timer_100ms == 0)
 8001fca:	4b21      	ldr	r3, [pc, #132]	@ (8002050 <APP_STATUS_LED_TaskUpdate+0x130>)
 8001fcc:	791b      	ldrb	r3, [r3, #4]
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d137      	bne.n	8002048 <APP_STATUS_LED_TaskUpdate+0x128>
      {
        SCH_TIM_StopTimer(s_StatusLedTimerContext[1].timerHandle);
 8001fd8:	4b1f      	ldr	r3, [pc, #124]	@ (8002058 <APP_STATUS_LED_TaskUpdate+0x138>)
 8001fda:	7b1b      	ldrb	r3, [r3, #12]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f003 fad3 	bl	8005588 <SCH_TIM_StopTimer>
        SCH_TIM_RestartTimer(s_StatusLedTimerContext[0].timerHandle);
 8001fe2:	4b1d      	ldr	r3, [pc, #116]	@ (8002058 <APP_STATUS_LED_TaskUpdate+0x138>)
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f003 faa8 	bl	800553c <SCH_TIM_RestartTimer>
        s_status_led.u8_flag_enable_timer_100ms = 1;
 8001fec:	4a18      	ldr	r2, [pc, #96]	@ (8002050 <APP_STATUS_LED_TaskUpdate+0x130>)
 8001fee:	7913      	ldrb	r3, [r2, #4]
 8001ff0:	f043 0302 	orr.w	r3, r3, #2
 8001ff4:	7113      	strb	r3, [r2, #4]
        s_status_led.u8_flag_enable_timer_500ms = 0;
 8001ff6:	4a16      	ldr	r2, [pc, #88]	@ (8002050 <APP_STATUS_LED_TaskUpdate+0x130>)
 8001ff8:	7913      	ldrb	r3, [r2, #4]
 8001ffa:	f36f 0382 	bfc	r3, #2, #1
 8001ffe:	7113      	strb	r3, [r2, #4]
      }
      break;
 8002000:	e022      	b.n	8002048 <APP_STATUS_LED_TaskUpdate+0x128>

    case DISCHARGING:
      LL_GPIO_SetOutputPin(LED_WAIT_GPIO_Port, LED_WAIT_Pin);
 8002002:	f240 1101 	movw	r1, #257	@ 0x101
 8002006:	4813      	ldr	r0, [pc, #76]	@ (8002054 <APP_STATUS_LED_TaskUpdate+0x134>)
 8002008:	f7ff ff04 	bl	8001e14 <LL_GPIO_SetOutputPin>
      LL_GPIO_SetOutputPin(LED_SOFT_START_GPIO_Port, LED_SOFT_START_Pin);
 800200c:	f240 2102 	movw	r1, #514	@ 0x202
 8002010:	4810      	ldr	r0, [pc, #64]	@ (8002054 <APP_STATUS_LED_TaskUpdate+0x134>)
 8002012:	f7ff feff 	bl	8001e14 <LL_GPIO_SetOutputPin>
      LL_GPIO_SetOutputPin(LED_PROCESS_GPIO_Port, LED_PROCESS_Pin);
 8002016:	f240 4104 	movw	r1, #1028	@ 0x404
 800201a:	480e      	ldr	r0, [pc, #56]	@ (8002054 <APP_STATUS_LED_TaskUpdate+0x134>)
 800201c:	f7ff fefa 	bl	8001e14 <LL_GPIO_SetOutputPin>
      s_status_led.u8_state_all_led = 1;
 8002020:	4a0b      	ldr	r2, [pc, #44]	@ (8002050 <APP_STATUS_LED_TaskUpdate+0x130>)
 8002022:	7913      	ldrb	r3, [r2, #4]
 8002024:	f043 0301 	orr.w	r3, r3, #1
 8002028:	7113      	strb	r3, [r2, #4]
      SCH_TIM_StopTimer(s_StatusLedTimerContext[0].timerHandle);
 800202a:	4b0b      	ldr	r3, [pc, #44]	@ (8002058 <APP_STATUS_LED_TaskUpdate+0x138>)
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	4618      	mov	r0, r3
 8002030:	f003 faaa 	bl	8005588 <SCH_TIM_StopTimer>
      SCH_TIM_StopTimer(s_StatusLedTimerContext[1].timerHandle);
 8002034:	4b08      	ldr	r3, [pc, #32]	@ (8002058 <APP_STATUS_LED_TaskUpdate+0x138>)
 8002036:	7b1b      	ldrb	r3, [r3, #12]
 8002038:	4618      	mov	r0, r3
 800203a:	f003 faa5 	bl	8005588 <SCH_TIM_StopTimer>
      break;
 800203e:	e004      	b.n	800204a <APP_STATUS_LED_TaskUpdate+0x12a>

    default:
      break;
 8002040:	bf00      	nop
 8002042:	e002      	b.n	800204a <APP_STATUS_LED_TaskUpdate+0x12a>
      break;
 8002044:	bf00      	nop
 8002046:	e000      	b.n	800204a <APP_STATUS_LED_TaskUpdate+0x12a>
      break;
 8002048:	bf00      	nop
  }
}
 800204a:	bf00      	nop
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	200004e8 	.word	0x200004e8
 8002054:	40010c00 	.word	0x40010c00
 8002058:	200000b8 	.word	0x200000b8

0800205c <APP_STATUS_LED_100MS_TimerUpdate>:
 * The function `APP_STATUS_LED_100MS_TimerUpdate` toggles the state of three
 * LED pins based on the current state of `state_led`.
 */
static void
APP_STATUS_LED_100MS_TimerUpdate (void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  if (s_status_led.u8_state_all_led == 0)
 8002060:	4b18      	ldr	r3, [pc, #96]	@ (80020c4 <APP_STATUS_LED_100MS_TimerUpdate+0x68>)
 8002062:	791b      	ldrb	r3, [r3, #4]
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	b2db      	uxtb	r3, r3
 800206a:	2b00      	cmp	r3, #0
 800206c:	d114      	bne.n	8002098 <APP_STATUS_LED_100MS_TimerUpdate+0x3c>
  {
    LL_GPIO_ResetOutputPin(LED_WAIT_GPIO_Port, LED_WAIT_Pin);
 800206e:	f240 1101 	movw	r1, #257	@ 0x101
 8002072:	4815      	ldr	r0, [pc, #84]	@ (80020c8 <APP_STATUS_LED_100MS_TimerUpdate+0x6c>)
 8002074:	f7ff fedd 	bl	8001e32 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(LED_SOFT_START_GPIO_Port, LED_SOFT_START_Pin);
 8002078:	f240 2102 	movw	r1, #514	@ 0x202
 800207c:	4812      	ldr	r0, [pc, #72]	@ (80020c8 <APP_STATUS_LED_100MS_TimerUpdate+0x6c>)
 800207e:	f7ff fed8 	bl	8001e32 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(LED_PROCESS_GPIO_Port, LED_PROCESS_Pin);
 8002082:	f240 4104 	movw	r1, #1028	@ 0x404
 8002086:	4810      	ldr	r0, [pc, #64]	@ (80020c8 <APP_STATUS_LED_100MS_TimerUpdate+0x6c>)
 8002088:	f7ff fed3 	bl	8001e32 <LL_GPIO_ResetOutputPin>
    s_status_led.u8_state_all_led = 1;
 800208c:	4a0d      	ldr	r2, [pc, #52]	@ (80020c4 <APP_STATUS_LED_100MS_TimerUpdate+0x68>)
 800208e:	7913      	ldrb	r3, [r2, #4]
 8002090:	f043 0301 	orr.w	r3, r3, #1
 8002094:	7113      	strb	r3, [r2, #4]
    LL_GPIO_SetOutputPin(LED_WAIT_GPIO_Port, LED_WAIT_Pin);
    LL_GPIO_SetOutputPin(LED_SOFT_START_GPIO_Port, LED_SOFT_START_Pin);
    LL_GPIO_SetOutputPin(LED_PROCESS_GPIO_Port, LED_PROCESS_Pin);
    s_status_led.u8_state_all_led = 0;
  }
}
 8002096:	e013      	b.n	80020c0 <APP_STATUS_LED_100MS_TimerUpdate+0x64>
    LL_GPIO_SetOutputPin(LED_WAIT_GPIO_Port, LED_WAIT_Pin);
 8002098:	f240 1101 	movw	r1, #257	@ 0x101
 800209c:	480a      	ldr	r0, [pc, #40]	@ (80020c8 <APP_STATUS_LED_100MS_TimerUpdate+0x6c>)
 800209e:	f7ff feb9 	bl	8001e14 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(LED_SOFT_START_GPIO_Port, LED_SOFT_START_Pin);
 80020a2:	f240 2102 	movw	r1, #514	@ 0x202
 80020a6:	4808      	ldr	r0, [pc, #32]	@ (80020c8 <APP_STATUS_LED_100MS_TimerUpdate+0x6c>)
 80020a8:	f7ff feb4 	bl	8001e14 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(LED_PROCESS_GPIO_Port, LED_PROCESS_Pin);
 80020ac:	f240 4104 	movw	r1, #1028	@ 0x404
 80020b0:	4805      	ldr	r0, [pc, #20]	@ (80020c8 <APP_STATUS_LED_100MS_TimerUpdate+0x6c>)
 80020b2:	f7ff feaf 	bl	8001e14 <LL_GPIO_SetOutputPin>
    s_status_led.u8_state_all_led = 0;
 80020b6:	4a03      	ldr	r2, [pc, #12]	@ (80020c4 <APP_STATUS_LED_100MS_TimerUpdate+0x68>)
 80020b8:	7913      	ldrb	r3, [r2, #4]
 80020ba:	f36f 0300 	bfc	r3, #0, #1
 80020be:	7113      	strb	r3, [r2, #4]
}
 80020c0:	bf00      	nop
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	200004e8 	.word	0x200004e8
 80020c8:	40010c00 	.word	0x40010c00

080020cc <APP_STATUS_LED_500MS_TimerUpdate>:
 * The function `APP_STATUS_LED_500MS_TimerUpdate` toggles different LEDs based
 * on the status of the charging mode.
 */
static void
APP_STATUS_LED_500MS_TimerUpdate (void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  switch (*s_status_led.p_status_led)
 80020d0:	4b1f      	ldr	r3, [pc, #124]	@ (8002150 <APP_STATUS_LED_500MS_TimerUpdate+0x84>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	2b04      	cmp	r3, #4
 80020d8:	d026      	beq.n	8002128 <APP_STATUS_LED_500MS_TimerUpdate+0x5c>
 80020da:	2b04      	cmp	r3, #4
 80020dc:	dc34      	bgt.n	8002148 <APP_STATUS_LED_500MS_TimerUpdate+0x7c>
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d002      	beq.n	80020e8 <APP_STATUS_LED_500MS_TimerUpdate+0x1c>
 80020e2:	2b03      	cmp	r3, #3
 80020e4:	d010      	beq.n	8002108 <APP_STATUS_LED_500MS_TimerUpdate+0x3c>
      LL_GPIO_TogglePin(LED_PROCESS_GPIO_Port, LED_PROCESS_Pin);
      LL_GPIO_ResetOutputPin(LED_SOFT_START_GPIO_Port, LED_SOFT_START_Pin);
      LL_GPIO_ResetOutputPin(LED_WAIT_GPIO_Port, LED_WAIT_Pin);
      break;
    default:
      break;
 80020e6:	e02f      	b.n	8002148 <APP_STATUS_LED_500MS_TimerUpdate+0x7c>
      LL_GPIO_TogglePin(LED_WAIT_GPIO_Port, LED_WAIT_Pin);
 80020e8:	f240 1101 	movw	r1, #257	@ 0x101
 80020ec:	4819      	ldr	r0, [pc, #100]	@ (8002154 <APP_STATUS_LED_500MS_TimerUpdate+0x88>)
 80020ee:	f7ff feaf 	bl	8001e50 <LL_GPIO_TogglePin>
      LL_GPIO_ResetOutputPin(LED_SOFT_START_GPIO_Port, LED_SOFT_START_Pin);
 80020f2:	f240 2102 	movw	r1, #514	@ 0x202
 80020f6:	4817      	ldr	r0, [pc, #92]	@ (8002154 <APP_STATUS_LED_500MS_TimerUpdate+0x88>)
 80020f8:	f7ff fe9b 	bl	8001e32 <LL_GPIO_ResetOutputPin>
      LL_GPIO_ResetOutputPin(LED_PROCESS_GPIO_Port, LED_PROCESS_Pin);
 80020fc:	f240 4104 	movw	r1, #1028	@ 0x404
 8002100:	4814      	ldr	r0, [pc, #80]	@ (8002154 <APP_STATUS_LED_500MS_TimerUpdate+0x88>)
 8002102:	f7ff fe96 	bl	8001e32 <LL_GPIO_ResetOutputPin>
      break;
 8002106:	e020      	b.n	800214a <APP_STATUS_LED_500MS_TimerUpdate+0x7e>
      LL_GPIO_TogglePin(LED_SOFT_START_GPIO_Port, LED_SOFT_START_Pin);
 8002108:	f240 2102 	movw	r1, #514	@ 0x202
 800210c:	4811      	ldr	r0, [pc, #68]	@ (8002154 <APP_STATUS_LED_500MS_TimerUpdate+0x88>)
 800210e:	f7ff fe9f 	bl	8001e50 <LL_GPIO_TogglePin>
      LL_GPIO_ResetOutputPin(LED_WAIT_GPIO_Port, LED_WAIT_Pin);
 8002112:	f240 1101 	movw	r1, #257	@ 0x101
 8002116:	480f      	ldr	r0, [pc, #60]	@ (8002154 <APP_STATUS_LED_500MS_TimerUpdate+0x88>)
 8002118:	f7ff fe8b 	bl	8001e32 <LL_GPIO_ResetOutputPin>
      LL_GPIO_ResetOutputPin(LED_PROCESS_GPIO_Port, LED_PROCESS_Pin);
 800211c:	f240 4104 	movw	r1, #1028	@ 0x404
 8002120:	480c      	ldr	r0, [pc, #48]	@ (8002154 <APP_STATUS_LED_500MS_TimerUpdate+0x88>)
 8002122:	f7ff fe86 	bl	8001e32 <LL_GPIO_ResetOutputPin>
      break;
 8002126:	e010      	b.n	800214a <APP_STATUS_LED_500MS_TimerUpdate+0x7e>
      LL_GPIO_TogglePin(LED_PROCESS_GPIO_Port, LED_PROCESS_Pin);
 8002128:	f240 4104 	movw	r1, #1028	@ 0x404
 800212c:	4809      	ldr	r0, [pc, #36]	@ (8002154 <APP_STATUS_LED_500MS_TimerUpdate+0x88>)
 800212e:	f7ff fe8f 	bl	8001e50 <LL_GPIO_TogglePin>
      LL_GPIO_ResetOutputPin(LED_SOFT_START_GPIO_Port, LED_SOFT_START_Pin);
 8002132:	f240 2102 	movw	r1, #514	@ 0x202
 8002136:	4807      	ldr	r0, [pc, #28]	@ (8002154 <APP_STATUS_LED_500MS_TimerUpdate+0x88>)
 8002138:	f7ff fe7b 	bl	8001e32 <LL_GPIO_ResetOutputPin>
      LL_GPIO_ResetOutputPin(LED_WAIT_GPIO_Port, LED_WAIT_Pin);
 800213c:	f240 1101 	movw	r1, #257	@ 0x101
 8002140:	4804      	ldr	r0, [pc, #16]	@ (8002154 <APP_STATUS_LED_500MS_TimerUpdate+0x88>)
 8002142:	f7ff fe76 	bl	8001e32 <LL_GPIO_ResetOutputPin>
      break;
 8002146:	e000      	b.n	800214a <APP_STATUS_LED_500MS_TimerUpdate+0x7e>
      break;
 8002148:	bf00      	nop
  }
}
 800214a:	bf00      	nop
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	200004e8 	.word	0x200004e8
 8002154:	40010c00 	.word	0x40010c00

08002158 <LL_I2C_IsEnabled>:
  * @rmtoll CR1          PE            LL_I2C_IsEnabled
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsEnabled(I2C_TypeDef *I2Cx)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->CR1, I2C_CR1_PE) == (I2C_CR1_PE));
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0301 	and.w	r3, r3, #1
 8002168:	2b01      	cmp	r3, #1
 800216a:	bf0c      	ite	eq
 800216c:	2301      	moveq	r3, #1
 800216e:	2300      	movne	r3, #0
 8002170:	b2db      	uxtb	r3, r3
}
 8002172:	4618      	mov	r0, r3
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	bc80      	pop	{r7}
 800217a:	4770      	bx	lr

0800217c <LL_I2C_IsActiveFlag_TXE>:
  * @rmtoll SR1          TXE           LL_I2C_IsActiveFlag_TXE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXE(I2C_TypeDef *I2Cx)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_TXE) == (I2C_SR1_TXE));
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	695b      	ldr	r3, [r3, #20]
 8002188:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800218c:	2b80      	cmp	r3, #128	@ 0x80
 800218e:	bf0c      	ite	eq
 8002190:	2301      	moveq	r3, #1
 8002192:	2300      	movne	r3, #0
 8002194:	b2db      	uxtb	r3, r3
}
 8002196:	4618      	mov	r0, r3
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	bc80      	pop	{r7}
 800219e:	4770      	bx	lr

080021a0 <LL_I2C_IsActiveFlag_BTF>:
  * @rmtoll SR1          BTF           LL_I2C_IsActiveFlag_BTF
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_BTF(I2C_TypeDef *I2Cx)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_BTF) == (I2C_SR1_BTF));
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	695b      	ldr	r3, [r3, #20]
 80021ac:	f003 0304 	and.w	r3, r3, #4
 80021b0:	2b04      	cmp	r3, #4
 80021b2:	bf0c      	ite	eq
 80021b4:	2301      	moveq	r3, #1
 80021b6:	2300      	movne	r3, #0
 80021b8:	b2db      	uxtb	r3, r3
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	bc80      	pop	{r7}
 80021c2:	4770      	bx	lr

080021c4 <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll SR1          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(I2C_TypeDef *I2Cx)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_RXNE) == (I2C_SR1_RXNE));
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	695b      	ldr	r3, [r3, #20]
 80021d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021d4:	2b40      	cmp	r3, #64	@ 0x40
 80021d6:	bf0c      	ite	eq
 80021d8:	2301      	moveq	r3, #1
 80021da:	2300      	movne	r3, #0
 80021dc:	b2db      	uxtb	r3, r3
}
 80021de:	4618      	mov	r0, r3
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bc80      	pop	{r7}
 80021e6:	4770      	bx	lr

080021e8 <LL_I2C_IsActiveFlag_ADDR>:
  * @rmtoll SR1          ADDR          LL_I2C_IsActiveFlag_ADDR
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_ADDR(I2C_TypeDef *I2Cx)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_ADDR) == (I2C_SR1_ADDR));
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	695b      	ldr	r3, [r3, #20]
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	bf0c      	ite	eq
 80021fc:	2301      	moveq	r3, #1
 80021fe:	2300      	movne	r3, #0
 8002200:	b2db      	uxtb	r3, r3
}
 8002202:	4618      	mov	r0, r3
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	bc80      	pop	{r7}
 800220a:	4770      	bx	lr

0800220c <LL_I2C_ClearFlag_ADDR>:
  * @rmtoll SR1          ADDR          LL_I2C_ClearFlag_ADDR
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_ADDR(I2C_TypeDef *I2Cx)
{
 800220c:	b480      	push	{r7}
 800220e:	b085      	sub	sp, #20
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = I2Cx->SR1;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	695b      	ldr	r3, [r3, #20]
 8002218:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 800221a:	68fb      	ldr	r3, [r7, #12]
  tmpreg = I2Cx->SR2;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8002222:	68fb      	ldr	r3, [r7, #12]
}
 8002224:	bf00      	nop
 8002226:	3714      	adds	r7, #20
 8002228:	46bd      	mov	sp, r7
 800222a:	bc80      	pop	{r7}
 800222c:	4770      	bx	lr

0800222e <LL_I2C_GenerateStopCondition>:
  * @rmtoll CR1          STOP          LL_I2C_GenerateStopCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStopCondition(I2C_TypeDef *I2Cx)
{
 800222e:	b480      	push	{r7}
 8002230:	b083      	sub	sp, #12
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_STOP);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	601a      	str	r2, [r3, #0]
}
 8002242:	bf00      	nop
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	bc80      	pop	{r7}
 800224a:	4770      	bx	lr

0800224c <LL_I2C_ReceiveData8>:
  * @rmtoll DR           DR            LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x0 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->DR, I2C_DR_DR));
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	691b      	ldr	r3, [r3, #16]
 8002258:	b2db      	uxtb	r3, r3
}
 800225a:	4618      	mov	r0, r3
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	bc80      	pop	{r7}
 8002262:	4770      	bx	lr

08002264 <BSP_I2C_MasterTransmit7B>:
 * @param p_i2c Pointer to the I2C configuration data structure.
 * @return Status of the I2C operation.
 */
i2c_status_t
BSP_I2C_MasterTransmit7B (i2c_data_t *p_i2c)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  // Start Condition
  p_i2c->status = I2C_MasterStart((I2C_TypeDef *)p_i2c->i2c_reg);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4618      	mov	r0, r3
 8002272:	f000 f8f7 	bl	8002464 <I2C_MasterStart>
 8002276:	4603      	mov	r3, r0
 8002278:	461a      	mov	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	731a      	strb	r2, [r3, #12]
  if (p_i2c->status == I2C_TIMEOUT)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	7b1b      	ldrb	r3, [r3, #12]
 8002282:	b2db      	uxtb	r3, r3
 8002284:	2b00      	cmp	r3, #0
 8002286:	d101      	bne.n	800228c <BSP_I2C_MasterTransmit7B+0x28>
  {
    return I2C_TIMEOUT;
 8002288:	2300      	movs	r3, #0
 800228a:	e031      	b.n	80022f0 <BSP_I2C_MasterTransmit7B+0x8c>
  }

  // Transmit Address, Clear ADDR bit
  p_i2c->status = I2C_SetAddress7B((I2C_TypeDef *)p_i2c->i2c_reg,
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681a      	ldr	r2, [r3, #0]
                                   (uint16_t)p_i2c->address);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	89db      	ldrh	r3, [r3, #14]
 8002294:	b29b      	uxth	r3, r3
  p_i2c->status = I2C_SetAddress7B((I2C_TypeDef *)p_i2c->i2c_reg,
 8002296:	b2db      	uxtb	r3, r3
 8002298:	4619      	mov	r1, r3
 800229a:	4610      	mov	r0, r2
 800229c:	f000 f916 	bl	80024cc <I2C_SetAddress7B>
 80022a0:	4603      	mov	r3, r0
 80022a2:	461a      	mov	r2, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	731a      	strb	r2, [r3, #12]
  if (p_i2c->status == I2C_TIMEOUT)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	7b1b      	ldrb	r3, [r3, #12]
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d101      	bne.n	80022b6 <BSP_I2C_MasterTransmit7B+0x52>
  {
    return I2C_TIMEOUT;
 80022b2:	2300      	movs	r3, #0
 80022b4:	e01c      	b.n	80022f0 <BSP_I2C_MasterTransmit7B+0x8c>
  }

  // Transmit Data
  p_i2c->status = I2C_TransmitData7B((I2C_TypeDef *)p_i2c->i2c_reg,
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6818      	ldr	r0, [r3, #0]
                                     (uint32_t)p_i2c->size_buffer,
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6899      	ldr	r1, [r3, #8]
                                     (uint8_t *)p_i2c->buffer);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
  p_i2c->status = I2C_TransmitData7B((I2C_TypeDef *)p_i2c->i2c_reg,
 80022c2:	461a      	mov	r2, r3
 80022c4:	f000 f928 	bl	8002518 <I2C_TransmitData7B>
 80022c8:	4603      	mov	r3, r0
 80022ca:	461a      	mov	r2, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	731a      	strb	r2, [r3, #12]
  if (p_i2c->status == I2C_TIMEOUT)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	7b1b      	ldrb	r3, [r3, #12]
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d101      	bne.n	80022de <BSP_I2C_MasterTransmit7B+0x7a>
  {
    return I2C_TIMEOUT;
 80022da:	2300      	movs	r3, #0
 80022dc:	e008      	b.n	80022f0 <BSP_I2C_MasterTransmit7B+0x8c>
  }

  // Stop Condition
  I2C_MastterStop((I2C_TypeDef *)p_i2c->i2c_reg);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f000 f8e6 	bl	80024b4 <I2C_MastterStop>

  // Done Transmit Frame
  p_i2c->status = I2C_OK;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	731a      	strb	r2, [r3, #12]
  return I2C_OK;
 80022ee:	2301      	movs	r3, #1
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3708      	adds	r7, #8
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <BSP_I2C_MasterReceive7B>:
 * @param p_i2c Pointer to the I2C configuration data structure.
 * @return Status of the I2C operation.
 */
i2c_status_t
BSP_I2C_MasterReceive7B (i2c_data_t *p_i2c)
{
 80022f8:	b590      	push	{r4, r7, lr}
 80022fa:	b085      	sub	sp, #20
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  uint32_t remaining = p_i2c->size_buffer;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	60fb      	str	r3, [r7, #12]
  // Start Condition
  p_i2c->status = I2C_MasterStart((I2C_TypeDef *)p_i2c->i2c_reg);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4618      	mov	r0, r3
 800230c:	f000 f8aa 	bl	8002464 <I2C_MasterStart>
 8002310:	4603      	mov	r3, r0
 8002312:	461a      	mov	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	731a      	strb	r2, [r3, #12]
  if (p_i2c->status == I2C_TIMEOUT)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	7b1b      	ldrb	r3, [r3, #12]
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b00      	cmp	r3, #0
 8002320:	d101      	bne.n	8002326 <BSP_I2C_MasterReceive7B+0x2e>
  {
    return I2C_TIMEOUT;
 8002322:	2300      	movs	r3, #0
 8002324:	e089      	b.n	800243a <BSP_I2C_MasterReceive7B+0x142>
  }

  // Transmit Address, Clear ADDR bit
  I2C_SetAddress7B((I2C_TypeDef *)p_i2c->i2c_reg, (uint8_t)p_i2c->address);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	89db      	ldrh	r3, [r3, #14]
 800232e:	b29b      	uxth	r3, r3
 8002330:	b2db      	uxtb	r3, r3
 8002332:	4619      	mov	r1, r3
 8002334:	4610      	mov	r0, r2
 8002336:	f000 f8c9 	bl	80024cc <I2C_SetAddress7B>

  // Receive Data
  if (p_i2c->size_buffer == 1)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d04c      	beq.n	80023dc <BSP_I2C_MasterReceive7B+0xe4>
  {
    goto last_byte;
  }

  while (remaining > 2)
 8002342:	e027      	b.n	8002394 <BSP_I2C_MasterReceive7B+0x9c>
  {
    // Wait for RxNE to set
    p_i2c->status = I2C_WaitBitRXNE((I2C_TypeDef *)p_i2c->i2c_reg);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4618      	mov	r0, r3
 800234a:	f000 f935 	bl	80025b8 <I2C_WaitBitRXNE>
 800234e:	4603      	mov	r3, r0
 8002350:	461a      	mov	r2, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	731a      	strb	r2, [r3, #12]
    if (p_i2c->status == I2C_TIMEOUT)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	7b1b      	ldrb	r3, [r3, #12]
 800235a:	b2db      	uxtb	r3, r3
 800235c:	2b00      	cmp	r3, #0
 800235e:	d101      	bne.n	8002364 <BSP_I2C_MasterReceive7B+0x6c>
    {
      return I2C_TIMEOUT;
 8002360:	2300      	movs	r3, #0
 8002362:	e06a      	b.n	800243a <BSP_I2C_MasterReceive7B+0x142>
    }

    // Copy the data into the buffer
    p_i2c->buffer[p_i2c->size_buffer - remaining]
        = LL_I2C_ReceiveData8((I2C_TypeDef *)p_i2c->i2c_reg);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6818      	ldr	r0, [r3, #0]
    p_i2c->buffer[p_i2c->size_buffer - remaining]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685a      	ldr	r2, [r3, #4]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6899      	ldr	r1, [r3, #8]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	1acb      	subs	r3, r1, r3
 8002374:	18d4      	adds	r4, r2, r3
        = LL_I2C_ReceiveData8((I2C_TypeDef *)p_i2c->i2c_reg);
 8002376:	f7ff ff69 	bl	800224c <LL_I2C_ReceiveData8>
 800237a:	4603      	mov	r3, r0
 800237c:	7023      	strb	r3, [r4, #0]

    // Set the ACK bit to Acknowledge the data received
    p_i2c->i2c_reg->CR1 = (p_i2c->i2c_reg->CR1) | I2C_CR1_ACK_Msk;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800238c:	601a      	str	r2, [r3, #0]

    remaining--;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	3b01      	subs	r3, #1
 8002392:	60fb      	str	r3, [r7, #12]
  while (remaining > 2)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2b02      	cmp	r3, #2
 8002398:	d8d4      	bhi.n	8002344 <BSP_I2C_MasterReceive7B+0x4c>
  }
  // Read the SECOND LAST BYTE
  // Wait for RxNE to set
  p_i2c->status = I2C_WaitBitRXNE((I2C_TypeDef *)p_i2c->i2c_reg);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f000 f90a 	bl	80025b8 <I2C_WaitBitRXNE>
 80023a4:	4603      	mov	r3, r0
 80023a6:	461a      	mov	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	731a      	strb	r2, [r3, #12]
  if (p_i2c->status == I2C_TIMEOUT)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	7b1b      	ldrb	r3, [r3, #12]
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d101      	bne.n	80023ba <BSP_I2C_MasterReceive7B+0xc2>
  {
    return I2C_TIMEOUT;
 80023b6:	2300      	movs	r3, #0
 80023b8:	e03f      	b.n	800243a <BSP_I2C_MasterReceive7B+0x142>
  }

  // Copy the data into the buffer
  p_i2c->buffer[p_i2c->size_buffer - remaining]
      = LL_I2C_ReceiveData8((I2C_TypeDef *)p_i2c->i2c_reg);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6818      	ldr	r0, [r3, #0]
  p_i2c->buffer[p_i2c->size_buffer - remaining]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685a      	ldr	r2, [r3, #4]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6899      	ldr	r1, [r3, #8]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	1acb      	subs	r3, r1, r3
 80023ca:	18d4      	adds	r4, r2, r3
      = LL_I2C_ReceiveData8((I2C_TypeDef *)p_i2c->i2c_reg);
 80023cc:	f7ff ff3e 	bl	800224c <LL_I2C_ReceiveData8>
 80023d0:	4603      	mov	r3, r0
 80023d2:	7023      	strb	r3, [r4, #0]
  remaining--;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	3b01      	subs	r3, #1
 80023d8:	60fb      	str	r3, [r7, #12]
 80023da:	e000      	b.n	80023de <BSP_I2C_MasterReceive7B+0xe6>
    goto last_byte;
 80023dc:	bf00      	nop

last_byte:

  // Clear ACK bit
  p_i2c->i2c_reg->CR1 = (p_i2c->i2c_reg->CR1) & ~I2C_CR1_ACK_Msk;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023ec:	601a      	str	r2, [r3, #0]

  // Stop I2C
  I2C_MastterStop((I2C_TypeDef *)p_i2c->i2c_reg);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f000 f85e 	bl	80024b4 <I2C_MastterStop>

  // Wait for RxNE to set
  p_i2c->status = I2C_WaitBitRXNE((I2C_TypeDef *)p_i2c->i2c_reg);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f000 f8db 	bl	80025b8 <I2C_WaitBitRXNE>
 8002402:	4603      	mov	r3, r0
 8002404:	461a      	mov	r2, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	731a      	strb	r2, [r3, #12]
  if (p_i2c->status == I2C_TIMEOUT)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	7b1b      	ldrb	r3, [r3, #12]
 800240e:	b2db      	uxtb	r3, r3
 8002410:	2b00      	cmp	r3, #0
 8002412:	d101      	bne.n	8002418 <BSP_I2C_MasterReceive7B+0x120>
  {
    return I2C_TIMEOUT;
 8002414:	2300      	movs	r3, #0
 8002416:	e010      	b.n	800243a <BSP_I2C_MasterReceive7B+0x142>
  }

  // Copy the data into the buffer
  p_i2c->buffer[p_i2c->size_buffer - remaining]
      = LL_I2C_ReceiveData8((I2C_TypeDef *)p_i2c->i2c_reg);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6818      	ldr	r0, [r3, #0]
  p_i2c->buffer[p_i2c->size_buffer - remaining]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685a      	ldr	r2, [r3, #4]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6899      	ldr	r1, [r3, #8]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	1acb      	subs	r3, r1, r3
 8002428:	18d4      	adds	r4, r2, r3
      = LL_I2C_ReceiveData8((I2C_TypeDef *)p_i2c->i2c_reg);
 800242a:	f7ff ff0f 	bl	800224c <LL_I2C_ReceiveData8>
 800242e:	4603      	mov	r3, r0
 8002430:	7023      	strb	r3, [r4, #0]

  // Done Receive Frame
  p_i2c->status = I2C_OK;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2201      	movs	r2, #1
 8002436:	731a      	strb	r2, [r3, #12]
  return I2C_OK;
 8002438:	2301      	movs	r3, #1
}
 800243a:	4618      	mov	r0, r3
 800243c:	3714      	adds	r7, #20
 800243e:	46bd      	mov	sp, r7
 8002440:	bd90      	pop	{r4, r7, pc}
	...

08002444 <BSP_I2C_TimeOut>:
 * This function decrements the u32_timer_wait_set variable used for handling
 * I2C timeouts.
 */
void
BSP_I2C_TimeOut (void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  if (u32_timer_wait_set >= 0)
 8002448:	4b05      	ldr	r3, [pc, #20]	@ (8002460 <BSP_I2C_TimeOut+0x1c>)
 800244a:	681b      	ldr	r3, [r3, #0]
  {
    u32_timer_wait_set--;
 800244c:	4b04      	ldr	r3, [pc, #16]	@ (8002460 <BSP_I2C_TimeOut+0x1c>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	3b01      	subs	r3, #1
 8002452:	4a03      	ldr	r2, [pc, #12]	@ (8002460 <BSP_I2C_TimeOut+0x1c>)
 8002454:	6013      	str	r3, [r2, #0]
  }
}
 8002456:	bf00      	nop
 8002458:	46bd      	mov	sp, r7
 800245a:	bc80      	pop	{r7}
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	200004f0 	.word	0x200004f0

08002464 <I2C_MasterStart>:
 * @param _i2c_reg Pointer to the I2C peripheral instance.
 * @return Status of the I2C operation.
 */
static i2c_status_t
I2C_MasterStart (I2C_TypeDef *_i2c_reg)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  _i2c_reg->CR1 |= I2C_CR1_ACK_Msk;   // Enable the ACK
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	601a      	str	r2, [r3, #0]
  _i2c_reg->CR1 |= I2C_CR1_START_Msk; // Generate START
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	601a      	str	r2, [r3, #0]

  // Wait for PE bit to set
  u32_timer_wait_set = TIMEOUT_WAIT_SET;
 8002484:	4b0a      	ldr	r3, [pc, #40]	@ (80024b0 <I2C_MasterStart+0x4c>)
 8002486:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800248a:	601a      	str	r2, [r3, #0]
  while (LL_I2C_IsEnabled(_i2c_reg))
 800248c:	e005      	b.n	800249a <I2C_MasterStart+0x36>
  {
    if (u32_timer_wait_set == 0)
 800248e:	4b08      	ldr	r3, [pc, #32]	@ (80024b0 <I2C_MasterStart+0x4c>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <I2C_MasterStart+0x36>
    {
      return I2C_TIMEOUT;
 8002496:	2300      	movs	r3, #0
 8002498:	e006      	b.n	80024a8 <I2C_MasterStart+0x44>
  while (LL_I2C_IsEnabled(_i2c_reg))
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f7ff fe5c 	bl	8002158 <LL_I2C_IsEnabled>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d1f3      	bne.n	800248e <I2C_MasterStart+0x2a>
    }
  }
  return I2C_OK;
 80024a6:	2301      	movs	r3, #1
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3708      	adds	r7, #8
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	200004f0 	.word	0x200004f0

080024b4 <I2C_MastterStop>:
 *
 * @param _i2c_reg Pointer to the I2C peripheral instance.
 */
static void
I2C_MastterStop (I2C_TypeDef *_i2c_reg)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  LL_I2C_GenerateStopCondition(_i2c_reg);
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f7ff feb6 	bl	800222e <LL_I2C_GenerateStopCondition>
}
 80024c2:	bf00      	nop
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
	...

080024cc <I2C_SetAddress7B>:
 * @param _address 7-bit address of the I2C device.
 * @return Status of the I2C operation.
 */
static i2c_status_t
I2C_SetAddress7B (I2C_TypeDef *_i2c_reg, uint8_t _address)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	460b      	mov	r3, r1
 80024d6:	70fb      	strb	r3, [r7, #3]
  // Send the address
  I2C1->DR = _address;
 80024d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002510 <I2C_SetAddress7B+0x44>)
 80024da:	78fb      	ldrb	r3, [r7, #3]
 80024dc:	6113      	str	r3, [r2, #16]

  // Wait for ADDR bit to set
  u32_timer_wait_set = TIMEOUT_WAIT_SET;
 80024de:	4b0d      	ldr	r3, [pc, #52]	@ (8002514 <I2C_SetAddress7B+0x48>)
 80024e0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80024e4:	601a      	str	r2, [r3, #0]
  while (!LL_I2C_IsActiveFlag_ADDR(_i2c_reg))
 80024e6:	e005      	b.n	80024f4 <I2C_SetAddress7B+0x28>
  {
    if (u32_timer_wait_set == 0)
 80024e8:	4b0a      	ldr	r3, [pc, #40]	@ (8002514 <I2C_SetAddress7B+0x48>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d101      	bne.n	80024f4 <I2C_SetAddress7B+0x28>
    {
      return I2C_TIMEOUT;
 80024f0:	2300      	movs	r3, #0
 80024f2:	e009      	b.n	8002508 <I2C_SetAddress7B+0x3c>
  while (!LL_I2C_IsActiveFlag_ADDR(_i2c_reg))
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f7ff fe77 	bl	80021e8 <LL_I2C_IsActiveFlag_ADDR>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d0f3      	beq.n	80024e8 <I2C_SetAddress7B+0x1c>
    }
  }

  // Read SR1 and SR2 to clear the ADDR bit
  LL_I2C_ClearFlag_ADDR(_i2c_reg);
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f7ff fe83 	bl	800220c <LL_I2C_ClearFlag_ADDR>

  return I2C_OK;
 8002506:	2301      	movs	r3, #1
}
 8002508:	4618      	mov	r0, r3
 800250a:	3708      	adds	r7, #8
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	40005400 	.word	0x40005400
 8002514:	200004f0 	.word	0x200004f0

08002518 <I2C_TransmitData7B>:
 * @param _buffer  Pointer to the data buffer.
 * @return Status of the I2C operation.
 */
static i2c_status_t
I2C_TransmitData7B (I2C_TypeDef *_i2c_reg, uint32_t _size, uint8_t *_buffer)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	60b9      	str	r1, [r7, #8]
 8002522:	607a      	str	r2, [r7, #4]
  // Wait for TXE bit to set
  u32_timer_wait_set = TIMEOUT_WAIT_SET;
 8002524:	4b22      	ldr	r3, [pc, #136]	@ (80025b0 <I2C_TransmitData7B+0x98>)
 8002526:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800252a:	601a      	str	r2, [r3, #0]
  while (!LL_I2C_IsActiveFlag_TXE(_i2c_reg))
 800252c:	e005      	b.n	800253a <I2C_TransmitData7B+0x22>
  {
    if (u32_timer_wait_set == 0)
 800252e:	4b20      	ldr	r3, [pc, #128]	@ (80025b0 <I2C_TransmitData7B+0x98>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d101      	bne.n	800253a <I2C_TransmitData7B+0x22>
    {
      return I2C_TIMEOUT;
 8002536:	2300      	movs	r3, #0
 8002538:	e035      	b.n	80025a6 <I2C_TransmitData7B+0x8e>
  while (!LL_I2C_IsActiveFlag_TXE(_i2c_reg))
 800253a:	68f8      	ldr	r0, [r7, #12]
 800253c:	f7ff fe1e 	bl	800217c <LL_I2C_IsActiveFlag_TXE>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d0f3      	beq.n	800252e <I2C_TransmitData7B+0x16>
    }
  }

  while (_size > 0)
 8002546:	e019      	b.n	800257c <I2C_TransmitData7B+0x64>
  {
    // Wait for TXE bit to set
    u32_timer_wait_set = TIMEOUT_WAIT_SET;
 8002548:	4b19      	ldr	r3, [pc, #100]	@ (80025b0 <I2C_TransmitData7B+0x98>)
 800254a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800254e:	601a      	str	r2, [r3, #0]
    while (!LL_I2C_IsActiveFlag_TXE(_i2c_reg))
 8002550:	e005      	b.n	800255e <I2C_TransmitData7B+0x46>
    {
      if (u32_timer_wait_set == 0)
 8002552:	4b17      	ldr	r3, [pc, #92]	@ (80025b0 <I2C_TransmitData7B+0x98>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d101      	bne.n	800255e <I2C_TransmitData7B+0x46>
      {
        return I2C_TIMEOUT;
 800255a:	2300      	movs	r3, #0
 800255c:	e023      	b.n	80025a6 <I2C_TransmitData7B+0x8e>
    while (!LL_I2C_IsActiveFlag_TXE(_i2c_reg))
 800255e:	68f8      	ldr	r0, [r7, #12]
 8002560:	f7ff fe0c 	bl	800217c <LL_I2C_IsActiveFlag_TXE>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d0f3      	beq.n	8002552 <I2C_TransmitData7B+0x3a>
      }
    }

    // Transmit Data
    I2C1->DR = (uint32_t)*_buffer++;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	1c5a      	adds	r2, r3, #1
 800256e:	607a      	str	r2, [r7, #4]
 8002570:	781a      	ldrb	r2, [r3, #0]
 8002572:	4b10      	ldr	r3, [pc, #64]	@ (80025b4 <I2C_TransmitData7B+0x9c>)
 8002574:	611a      	str	r2, [r3, #16]
    _size--;
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	3b01      	subs	r3, #1
 800257a:	60bb      	str	r3, [r7, #8]
  while (_size > 0)
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d1e2      	bne.n	8002548 <I2C_TransmitData7B+0x30>
  }

  // Wait for BTF to set
  u32_timer_wait_set = TIMEOUT_WAIT_SET;
 8002582:	4b0b      	ldr	r3, [pc, #44]	@ (80025b0 <I2C_TransmitData7B+0x98>)
 8002584:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002588:	601a      	str	r2, [r3, #0]
  while (!LL_I2C_IsActiveFlag_BTF(_i2c_reg))
 800258a:	e005      	b.n	8002598 <I2C_TransmitData7B+0x80>
  {
    if (u32_timer_wait_set == 0)
 800258c:	4b08      	ldr	r3, [pc, #32]	@ (80025b0 <I2C_TransmitData7B+0x98>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d101      	bne.n	8002598 <I2C_TransmitData7B+0x80>
    {
      return I2C_TIMEOUT;
 8002594:	2300      	movs	r3, #0
 8002596:	e006      	b.n	80025a6 <I2C_TransmitData7B+0x8e>
  while (!LL_I2C_IsActiveFlag_BTF(_i2c_reg))
 8002598:	68f8      	ldr	r0, [r7, #12]
 800259a:	f7ff fe01 	bl	80021a0 <LL_I2C_IsActiveFlag_BTF>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d0f3      	beq.n	800258c <I2C_TransmitData7B+0x74>
    }
  }

  return I2C_OK;
 80025a4:	2301      	movs	r3, #1
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	200004f0 	.word	0x200004f0
 80025b4:	40005400 	.word	0x40005400

080025b8 <I2C_WaitBitRXNE>:
 * @param _i2c_reg Pointer to the I2C peripheral instance.
 * @return Status of the I2C operation.
 */
static i2c_status_t
I2C_WaitBitRXNE (I2C_TypeDef *_i2c_reg)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  u32_timer_wait_set = TIMEOUT_WAIT_SET;
 80025c0:	4b0a      	ldr	r3, [pc, #40]	@ (80025ec <I2C_WaitBitRXNE+0x34>)
 80025c2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80025c6:	601a      	str	r2, [r3, #0]
  while (!LL_I2C_IsActiveFlag_RXNE(_i2c_reg))
 80025c8:	e005      	b.n	80025d6 <I2C_WaitBitRXNE+0x1e>
  {
    if (u32_timer_wait_set == 0)
 80025ca:	4b08      	ldr	r3, [pc, #32]	@ (80025ec <I2C_WaitBitRXNE+0x34>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d101      	bne.n	80025d6 <I2C_WaitBitRXNE+0x1e>
    {
      return I2C_TIMEOUT;
 80025d2:	2300      	movs	r3, #0
 80025d4:	e006      	b.n	80025e4 <I2C_WaitBitRXNE+0x2c>
  while (!LL_I2C_IsActiveFlag_RXNE(_i2c_reg))
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f7ff fdf4 	bl	80021c4 <LL_I2C_IsActiveFlag_RXNE>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d0f3      	beq.n	80025ca <I2C_WaitBitRXNE+0x12>
    }
  }
  return I2C_OK;
 80025e2:	2301      	movs	r3, #1
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3708      	adds	r7, #8
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	200004f0 	.word	0x200004f0

080025f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	4603      	mov	r3, r0
 80025f8:	6039      	str	r1, [r7, #0]
 80025fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002600:	2b00      	cmp	r3, #0
 8002602:	db0a      	blt.n	800261a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	b2da      	uxtb	r2, r3
 8002608:	490c      	ldr	r1, [pc, #48]	@ (800263c <__NVIC_SetPriority+0x4c>)
 800260a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260e:	0112      	lsls	r2, r2, #4
 8002610:	b2d2      	uxtb	r2, r2
 8002612:	440b      	add	r3, r1
 8002614:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002618:	e00a      	b.n	8002630 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	b2da      	uxtb	r2, r3
 800261e:	4908      	ldr	r1, [pc, #32]	@ (8002640 <__NVIC_SetPriority+0x50>)
 8002620:	79fb      	ldrb	r3, [r7, #7]
 8002622:	f003 030f 	and.w	r3, r3, #15
 8002626:	3b04      	subs	r3, #4
 8002628:	0112      	lsls	r2, r2, #4
 800262a:	b2d2      	uxtb	r2, r2
 800262c:	440b      	add	r3, r1
 800262e:	761a      	strb	r2, [r3, #24]
}
 8002630:	bf00      	nop
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	bc80      	pop	{r7}
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	e000e100 	.word	0xe000e100
 8002640:	e000ed00 	.word	0xe000ed00

08002644 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	3b01      	subs	r3, #1
 8002650:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002654:	d301      	bcc.n	800265a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002656:	2301      	movs	r3, #1
 8002658:	e00f      	b.n	800267a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800265a:	4a0a      	ldr	r2, [pc, #40]	@ (8002684 <SysTick_Config+0x40>)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	3b01      	subs	r3, #1
 8002660:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002662:	210f      	movs	r1, #15
 8002664:	f04f 30ff 	mov.w	r0, #4294967295
 8002668:	f7ff ffc2 	bl	80025f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800266c:	4b05      	ldr	r3, [pc, #20]	@ (8002684 <SysTick_Config+0x40>)
 800266e:	2200      	movs	r2, #0
 8002670:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002672:	4b04      	ldr	r3, [pc, #16]	@ (8002684 <SysTick_Config+0x40>)
 8002674:	2207      	movs	r2, #7
 8002676:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3708      	adds	r7, #8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	e000e010 	.word	0xe000e010

08002688 <BSP_SYSTICK_TimerStart>:
 *
 * This function enables the SysTick timer.
 */
void
BSP_SYSTICK_TimerStart (void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0

  SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
 800268c:	4b04      	ldr	r3, [pc, #16]	@ (80026a0 <BSP_SYSTICK_TimerStart+0x18>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a03      	ldr	r2, [pc, #12]	@ (80026a0 <BSP_SYSTICK_TimerStart+0x18>)
 8002692:	f043 0301 	orr.w	r3, r3, #1
 8002696:	6013      	str	r3, [r2, #0]
}
 8002698:	bf00      	nop
 800269a:	46bd      	mov	sp, r7
 800269c:	bc80      	pop	{r7}
 800269e:	4770      	bx	lr
 80026a0:	e000e010 	.word	0xe000e010

080026a4 <BSP_SYSTICK_TimerInit>:
 * This function configures the SysTick timer to generate interrupts at a rate
 * of 1 millisecond, based on the system core clock.
 */
void
BSP_SYSTICK_TimerInit (void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
  SysTick_Config(SystemCoreClock / 1000);
 80026a8:	4b05      	ldr	r3, [pc, #20]	@ (80026c0 <BSP_SYSTICK_TimerInit+0x1c>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a05      	ldr	r2, [pc, #20]	@ (80026c4 <BSP_SYSTICK_TimerInit+0x20>)
 80026ae:	fba2 2303 	umull	r2, r3, r2, r3
 80026b2:	099b      	lsrs	r3, r3, #6
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7ff ffc5 	bl	8002644 <SysTick_Config>
}
 80026ba:	bf00      	nop
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	200000d4 	.word	0x200000d4
 80026c4:	10624dd3 	.word	0x10624dd3

080026c8 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f043 0201 	orr.w	r2, r3, #1
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	601a      	str	r2, [r3, #0]
}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bc80      	pop	{r7}
 80026e4:	4770      	bx	lr

080026e6 <LL_TIM_DisableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_DisableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableCounter(TIM_TypeDef *TIMx)
{
 80026e6:	b480      	push	{r7}
 80026e8:	b083      	sub	sp, #12
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f023 0201 	bic.w	r2, r3, #1
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	601a      	str	r2, [r3, #0]
}
 80026fa:	bf00      	nop
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	bc80      	pop	{r7}
 8002702:	4770      	bx	lr

08002704 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a1a      	ldr	r2, [r3, #32]
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	431a      	orrs	r2, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	621a      	str	r2, [r3, #32]
}
 800271a:	bf00      	nop
 800271c:	370c      	adds	r7, #12
 800271e:	46bd      	mov	sp, r7
 8002720:	bc80      	pop	{r7}
 8002722:	4770      	bx	lr

08002724 <LL_TIM_CC_DisableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a1a      	ldr	r2, [r3, #32]
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	43db      	mvns	r3, r3
 8002736:	401a      	ands	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	621a      	str	r2, [r3, #32]
}
 800273c:	bf00      	nop
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	bc80      	pop	{r7}
 8002744:	4770      	bx	lr
	...

08002748 <LL_TIM_OC_SetMode>:
  *         @arg @ref LL_TIM_OCMODE_PWM1
  *         @arg @ref LL_TIM_OCMODE_PWM2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetMode(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Mode)
{
 8002748:	b480      	push	{r7}
 800274a:	b087      	sub	sp, #28
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	2b01      	cmp	r3, #1
 8002758:	d01c      	beq.n	8002794 <LL_TIM_OC_SetMode+0x4c>
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	2b04      	cmp	r3, #4
 800275e:	d017      	beq.n	8002790 <LL_TIM_OC_SetMode+0x48>
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	2b10      	cmp	r3, #16
 8002764:	d012      	beq.n	800278c <LL_TIM_OC_SetMode+0x44>
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	2b40      	cmp	r3, #64	@ 0x40
 800276a:	d00d      	beq.n	8002788 <LL_TIM_OC_SetMode+0x40>
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002772:	d007      	beq.n	8002784 <LL_TIM_OC_SetMode+0x3c>
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800277a:	d101      	bne.n	8002780 <LL_TIM_OC_SetMode+0x38>
 800277c:	2305      	movs	r3, #5
 800277e:	e00a      	b.n	8002796 <LL_TIM_OC_SetMode+0x4e>
 8002780:	2306      	movs	r3, #6
 8002782:	e008      	b.n	8002796 <LL_TIM_OC_SetMode+0x4e>
 8002784:	2304      	movs	r3, #4
 8002786:	e006      	b.n	8002796 <LL_TIM_OC_SetMode+0x4e>
 8002788:	2303      	movs	r3, #3
 800278a:	e004      	b.n	8002796 <LL_TIM_OC_SetMode+0x4e>
 800278c:	2302      	movs	r3, #2
 800278e:	e002      	b.n	8002796 <LL_TIM_OC_SetMode+0x4e>
 8002790:	2301      	movs	r3, #1
 8002792:	e000      	b.n	8002796 <LL_TIM_OC_SetMode+0x4e>
 8002794:	2300      	movs	r3, #0
 8002796:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	3318      	adds	r3, #24
 800279c:	4619      	mov	r1, r3
 800279e:	7dfb      	ldrb	r3, [r7, #23]
 80027a0:	4a0d      	ldr	r2, [pc, #52]	@ (80027d8 <LL_TIM_OC_SetMode+0x90>)
 80027a2:	5cd3      	ldrb	r3, [r2, r3]
 80027a4:	440b      	add	r3, r1
 80027a6:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	7dfb      	ldrb	r3, [r7, #23]
 80027ae:	490b      	ldr	r1, [pc, #44]	@ (80027dc <LL_TIM_OC_SetMode+0x94>)
 80027b0:	5ccb      	ldrb	r3, [r1, r3]
 80027b2:	4619      	mov	r1, r3
 80027b4:	2373      	movs	r3, #115	@ 0x73
 80027b6:	408b      	lsls	r3, r1
 80027b8:	43db      	mvns	r3, r3
 80027ba:	401a      	ands	r2, r3
 80027bc:	7dfb      	ldrb	r3, [r7, #23]
 80027be:	4907      	ldr	r1, [pc, #28]	@ (80027dc <LL_TIM_OC_SetMode+0x94>)
 80027c0:	5ccb      	ldrb	r3, [r1, r3]
 80027c2:	4619      	mov	r1, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	408b      	lsls	r3, r1
 80027c8:	431a      	orrs	r2, r3
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	601a      	str	r2, [r3, #0]
}
 80027ce:	bf00      	nop
 80027d0:	371c      	adds	r7, #28
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bc80      	pop	{r7}
 80027d6:	4770      	bx	lr
 80027d8:	08009cdc 	.word	0x08009cdc
 80027dc:	08009ce4 	.word	0x08009ce4

080027e0 <LL_TIM_OC_SetDeadTime>:
  * @param  TIMx Timer instance
  * @param  DeadTime between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetDeadTime(TIM_TypeDef *TIMx, uint32_t DeadTime)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->BDTR, TIM_BDTR_DTG, DeadTime);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ee:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	431a      	orrs	r2, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	645a      	str	r2, [r3, #68]	@ 0x44
}
 80027fa:	bf00      	nop
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	bc80      	pop	{r7}
 8002802:	4770      	bx	lr

08002804 <LL_TIM_EnableAllOutputs>:
  * @rmtoll BDTR         MOE           LL_TIM_EnableAllOutputs
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableAllOutputs(TIM_TypeDef *TIMx)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002810:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	645a      	str	r2, [r3, #68]	@ 0x44
}
 8002818:	bf00      	nop
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	bc80      	pop	{r7}
 8002820:	4770      	bx	lr

08002822 <LL_TIM_DisableAllOutputs>:
  * @rmtoll BDTR         MOE           LL_TIM_DisableAllOutputs
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableAllOutputs(TIM_TypeDef *TIMx)
{
 8002822:	b480      	push	{r7}
 8002824:	b083      	sub	sp, #12
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800282e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	645a      	str	r2, [r3, #68]	@ 0x44
}
 8002836:	bf00      	nop
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	bc80      	pop	{r7}
 800283e:	4770      	bx	lr

08002840 <BSP_PWM_EnableTimer>:
 * (Pulse Width Modulation) signal, such as output type (positive, negative, or
 * both), channel number, and timer information. The function
 */
void
BSP_PWM_EnableTimer (pwm_cfg_t *pwm_cfg)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  uint32_t u32_mode;

  if ((pwm_cfg->output == PWM_POSITIVE)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	7c1b      	ldrb	r3, [r3, #16]
 800284c:	b2db      	uxtb	r3, r3
 800284e:	2b00      	cmp	r3, #0
 8002850:	d004      	beq.n	800285c <BSP_PWM_EnableTimer+0x1c>
      || (pwm_cfg->output == PWM_POSITIVE_NEGATIVE))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	7c1b      	ldrb	r3, [r3, #16]
 8002856:	b2db      	uxtb	r3, r3
 8002858:	2b01      	cmp	r3, #1
 800285a:	d11e      	bne.n	800289a <BSP_PWM_EnableTimer+0x5a>
  {
    if (pwm_cfg->channel == PWM_CHANNEL_1)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	2b01      	cmp	r3, #1
 8002862:	d102      	bne.n	800286a <BSP_PWM_EnableTimer+0x2a>
    {
      u32_mode = TIM_CCER_CC1E;
 8002864:	2301      	movs	r3, #1
 8002866:	60fb      	str	r3, [r7, #12]
 8002868:	e017      	b.n	800289a <BSP_PWM_EnableTimer+0x5a>
    }
    else if (pwm_cfg->channel == PWM_CHANNEL_2)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	2b10      	cmp	r3, #16
 8002870:	d102      	bne.n	8002878 <BSP_PWM_EnableTimer+0x38>
    {
      u32_mode = TIM_CCER_CC2E;
 8002872:	2310      	movs	r3, #16
 8002874:	60fb      	str	r3, [r7, #12]
 8002876:	e010      	b.n	800289a <BSP_PWM_EnableTimer+0x5a>
    }
    else if (pwm_cfg->channel == PWM_CHANNEL_3)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002880:	d103      	bne.n	800288a <BSP_PWM_EnableTimer+0x4a>
    {
      u32_mode = TIM_CCER_CC3E;
 8002882:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002886:	60fb      	str	r3, [r7, #12]
 8002888:	e007      	b.n	800289a <BSP_PWM_EnableTimer+0x5a>
    }
    else if (pwm_cfg->channel == PWM_CHANNEL_4)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002892:	d102      	bne.n	800289a <BSP_PWM_EnableTimer+0x5a>
    {
      u32_mode = TIM_CCER_CC4E;
 8002894:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002898:	60fb      	str	r3, [r7, #12]
    }
  }
  if (pwm_cfg->output == PWM_POSITIVE_NEGATIVE)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	7c1b      	ldrb	r3, [r3, #16]
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d11a      	bne.n	80028da <BSP_PWM_EnableTimer+0x9a>
  {
    if (pwm_cfg->channel == PWM_CHANNEL_1)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d104      	bne.n	80028b6 <BSP_PWM_EnableTimer+0x76>
    {
      u32_mode |= TIM_CCER_CC1NE;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f043 0304 	orr.w	r3, r3, #4
 80028b2:	60fb      	str	r3, [r7, #12]
 80028b4:	e011      	b.n	80028da <BSP_PWM_EnableTimer+0x9a>
    }
    else if (pwm_cfg->channel == PWM_CHANNEL_2)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	2b10      	cmp	r3, #16
 80028bc:	d104      	bne.n	80028c8 <BSP_PWM_EnableTimer+0x88>
    {
      u32_mode |= TIM_CCER_CC2NE;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80028c4:	60fb      	str	r3, [r7, #12]
 80028c6:	e008      	b.n	80028da <BSP_PWM_EnableTimer+0x9a>
    }
    else if (pwm_cfg->channel == PWM_CHANNEL_3)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028d0:	d103      	bne.n	80028da <BSP_PWM_EnableTimer+0x9a>
    {
      u32_mode |= TIM_CCER_CC3NE;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80028d8:	60fb      	str	r3, [r7, #12]
    }
  }

  // Configure Channel of Timer PWM Mode
  LL_TIM_OC_SetMode(
      (TIM_TypeDef *)pwm_cfg->p_tim, pwm_cfg->channel, LL_TIM_OCMODE_PWM1);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6818      	ldr	r0, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	68db      	ldr	r3, [r3, #12]
  LL_TIM_OC_SetMode(
 80028e2:	2260      	movs	r2, #96	@ 0x60
 80028e4:	4619      	mov	r1, r3
 80028e6:	f7ff ff2f 	bl	8002748 <LL_TIM_OC_SetMode>

  // Enable Channel of Timer
  LL_TIM_CC_EnableChannel((TIM_TypeDef *)pwm_cfg->p_tim, u32_mode);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68f9      	ldr	r1, [r7, #12]
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7ff ff07 	bl	8002704 <LL_TIM_CC_EnableChannel>

  // Enable Main output
  LL_TIM_EnableAllOutputs((TIM_TypeDef *)pwm_cfg->p_tim);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7ff ff82 	bl	8002804 <LL_TIM_EnableAllOutputs>

  // Enable Timer
  LL_TIM_EnableCounter((TIM_TypeDef *)pwm_cfg->p_tim);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff fedf 	bl	80026c8 <LL_TIM_EnableCounter>
}
 800290a:	bf00      	nop
 800290c:	3710      	adds	r7, #16
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <BSP_PWM_DisableTimer>:
 * configuration settings for a PWM (Pulse Width Modulation) timer, such as
 * output type, channel, and timer peripheral.
 */
void
BSP_PWM_DisableTimer (pwm_cfg_t *pwm_cfg)
{
 8002912:	b580      	push	{r7, lr}
 8002914:	b084      	sub	sp, #16
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
  uint32_t u32_mode;

  if ((pwm_cfg->output == PWM_POSITIVE)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	7c1b      	ldrb	r3, [r3, #16]
 800291e:	b2db      	uxtb	r3, r3
 8002920:	2b00      	cmp	r3, #0
 8002922:	d004      	beq.n	800292e <BSP_PWM_DisableTimer+0x1c>
      || (pwm_cfg->output == PWM_POSITIVE_NEGATIVE))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	7c1b      	ldrb	r3, [r3, #16]
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b01      	cmp	r3, #1
 800292c:	d11e      	bne.n	800296c <BSP_PWM_DisableTimer+0x5a>
  {
    if (pwm_cfg->channel == PWM_CHANNEL_1)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	2b01      	cmp	r3, #1
 8002934:	d102      	bne.n	800293c <BSP_PWM_DisableTimer+0x2a>
    {
      u32_mode = TIM_CCER_CC1E;
 8002936:	2301      	movs	r3, #1
 8002938:	60fb      	str	r3, [r7, #12]
 800293a:	e017      	b.n	800296c <BSP_PWM_DisableTimer+0x5a>
    }
    else if (pwm_cfg->channel == PWM_CHANNEL_2)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	2b10      	cmp	r3, #16
 8002942:	d102      	bne.n	800294a <BSP_PWM_DisableTimer+0x38>
    {
      u32_mode = TIM_CCER_CC2E;
 8002944:	2310      	movs	r3, #16
 8002946:	60fb      	str	r3, [r7, #12]
 8002948:	e010      	b.n	800296c <BSP_PWM_DisableTimer+0x5a>
    }
    else if (pwm_cfg->channel == PWM_CHANNEL_3)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002952:	d103      	bne.n	800295c <BSP_PWM_DisableTimer+0x4a>
    {
      u32_mode = TIM_CCER_CC3E;
 8002954:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002958:	60fb      	str	r3, [r7, #12]
 800295a:	e007      	b.n	800296c <BSP_PWM_DisableTimer+0x5a>
    }
    else if (pwm_cfg->channel == PWM_CHANNEL_4)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002964:	d102      	bne.n	800296c <BSP_PWM_DisableTimer+0x5a>
    {
      u32_mode = TIM_CCER_CC4E;
 8002966:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800296a:	60fb      	str	r3, [r7, #12]
    }
  }
  if (pwm_cfg->output == PWM_POSITIVE_NEGATIVE)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	7c1b      	ldrb	r3, [r3, #16]
 8002970:	b2db      	uxtb	r3, r3
 8002972:	2b01      	cmp	r3, #1
 8002974:	d11a      	bne.n	80029ac <BSP_PWM_DisableTimer+0x9a>
  {
    if (pwm_cfg->channel == PWM_CHANNEL_1)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	2b01      	cmp	r3, #1
 800297c:	d104      	bne.n	8002988 <BSP_PWM_DisableTimer+0x76>
    {
      u32_mode |= TIM_CCER_CC1NE;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f043 0304 	orr.w	r3, r3, #4
 8002984:	60fb      	str	r3, [r7, #12]
 8002986:	e011      	b.n	80029ac <BSP_PWM_DisableTimer+0x9a>
    }
    else if (pwm_cfg->channel == PWM_CHANNEL_2)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	2b10      	cmp	r3, #16
 800298e:	d104      	bne.n	800299a <BSP_PWM_DisableTimer+0x88>
    {
      u32_mode |= TIM_CCER_CC2NE;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002996:	60fb      	str	r3, [r7, #12]
 8002998:	e008      	b.n	80029ac <BSP_PWM_DisableTimer+0x9a>
    }
    else if (pwm_cfg->channel == PWM_CHANNEL_3)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029a2:	d103      	bne.n	80029ac <BSP_PWM_DisableTimer+0x9a>
    {
      u32_mode |= TIM_CCER_CC3NE;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80029aa:	60fb      	str	r3, [r7, #12]
    }
  }
  // Disable Channel of Timer
  LL_TIM_CC_DisableChannel((TIM_TypeDef *)pwm_cfg->p_tim, u32_mode);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	68f9      	ldr	r1, [r7, #12]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7ff feb6 	bl	8002724 <LL_TIM_CC_DisableChannel>

  // Disable Main output
  LL_TIM_DisableAllOutputs((TIM_TypeDef *)pwm_cfg->p_tim);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4618      	mov	r0, r3
 80029be:	f7ff ff30 	bl	8002822 <LL_TIM_DisableAllOutputs>

  // Disable Timer
  LL_TIM_DisableCounter((TIM_TypeDef *)pwm_cfg->p_tim);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7ff fe8d 	bl	80026e6 <LL_TIM_DisableCounter>
}
 80029cc:	bf00      	nop
 80029ce:	3710      	adds	r7, #16
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <BSP_PWM_SetParameterProcess>:
 * @note Ensure that the `pwm_cfg` structure is properly initialized before
 * calling this function.
 */
void
BSP_PWM_SetParameterProcess (pwm_cfg_t *pwm_cfg)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  // Set dead time for BDTR
  LL_TIM_OC_SetDeadTime((TIM_TypeDef *)pwm_cfg->p_tim, pwm_cfg->u8_deadTime);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	7c5b      	ldrb	r3, [r3, #17]
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	4619      	mov	r1, r3
 80029e8:	4610      	mov	r0, r2
 80029ea:	f7ff fef9 	bl	80027e0 <LL_TIM_OC_SetDeadTime>

  // Set value for PSC (Prescaler)
  pwm_cfg->p_tim->PSC = pwm_cfg->u16_prescaler;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	891b      	ldrh	r3, [r3, #8]
 80029f2:	b29a      	uxth	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	629a      	str	r2, [r3, #40]	@ 0x28

  // Set value for ARR (Auto-Reload Register)
  pwm_cfg->p_tim->ARR = pwm_cfg->u16_reg_auto_reload;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	889b      	ldrh	r3, [r3, #4]
 80029fe:	b29a      	uxth	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Set value for CRR (Compare Register)
  pwm_cfg->p_tim->CCR1 = pwm_cfg->u16_reg_compare;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	88db      	ldrh	r3, [r3, #6]
 8002a0a:	b29a      	uxth	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002a12:	bf00      	nop
 8002a14:	3708      	adds	r7, #8
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <LL_USART_IsActiveFlag_FE>:
  * @rmtoll SR           FE            LL_USART_IsActiveFlag_FE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_FE(const USART_TypeDef *USARTx)
{
 8002a1a:	b480      	push	{r7}
 8002a1c:	b083      	sub	sp, #12
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	bf0c      	ite	eq
 8002a2e:	2301      	moveq	r3, #1
 8002a30:	2300      	movne	r3, #0
 8002a32:	b2db      	uxtb	r3, r3
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bc80      	pop	{r7}
 8002a3c:	4770      	bx	lr

08002a3e <LL_USART_IsActiveFlag_NE>:
  * @rmtoll SR           NF            LL_USART_IsActiveFlag_NE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_NE(const USART_TypeDef *USARTx)
{
 8002a3e:	b480      	push	{r7}
 8002a40:	b083      	sub	sp, #12
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_NE) == (USART_SR_NE));
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0304 	and.w	r3, r3, #4
 8002a4e:	2b04      	cmp	r3, #4
 8002a50:	bf0c      	ite	eq
 8002a52:	2301      	moveq	r3, #1
 8002a54:	2300      	movne	r3, #0
 8002a56:	b2db      	uxtb	r3, r3
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bc80      	pop	{r7}
 8002a60:	4770      	bx	lr

08002a62 <LL_USART_IsActiveFlag_ORE>:
  * @rmtoll SR           ORE           LL_USART_IsActiveFlag_ORE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ORE(const USART_TypeDef *USARTx)
{
 8002a62:	b480      	push	{r7}
 8002a64:	b083      	sub	sp, #12
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0308 	and.w	r3, r3, #8
 8002a72:	2b08      	cmp	r3, #8
 8002a74:	bf0c      	ite	eq
 8002a76:	2301      	moveq	r3, #1
 8002a78:	2300      	movne	r3, #0
 8002a7a:	b2db      	uxtb	r3, r3
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bc80      	pop	{r7}
 8002a84:	4770      	bx	lr

08002a86 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(const USART_TypeDef *USARTx)
{
 8002a86:	b480      	push	{r7}
 8002a88:	b083      	sub	sp, #12
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0320 	and.w	r3, r3, #32
 8002a96:	2b20      	cmp	r3, #32
 8002a98:	bf0c      	ite	eq
 8002a9a:	2301      	moveq	r3, #1
 8002a9c:	2300      	movne	r3, #0
 8002a9e:	b2db      	uxtb	r3, r3
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bc80      	pop	{r7}
 8002aa8:	4770      	bx	lr

08002aaa <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 8002aaa:	b480      	push	{r7}
 8002aac:	b083      	sub	sp, #12
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002aba:	2b80      	cmp	r3, #128	@ 0x80
 8002abc:	bf0c      	ite	eq
 8002abe:	2301      	moveq	r3, #1
 8002ac0:	2300      	movne	r3, #0
 8002ac2:	b2db      	uxtb	r3, r3
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bc80      	pop	{r7}
 8002acc:	4770      	bx	lr

08002ace <LL_USART_ClearFlag_FE>:
  * @rmtoll SR           FE            LL_USART_ClearFlag_FE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_FE(USART_TypeDef *USARTx)
{
 8002ace:	b480      	push	{r7}
 8002ad0:	b085      	sub	sp, #20
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8002adc:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
}
 8002ae6:	bf00      	nop
 8002ae8:	3714      	adds	r7, #20
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bc80      	pop	{r7}
 8002aee:	4770      	bx	lr

08002af0 <LL_USART_ClearFlag_NE>:
  * @rmtoll SR           NF            LL_USART_ClearFlag_NE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_NE(USART_TypeDef *USARTx)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b085      	sub	sp, #20
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8002afe:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8002b06:	68fb      	ldr	r3, [r7, #12]
}
 8002b08:	bf00      	nop
 8002b0a:	3714      	adds	r7, #20
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bc80      	pop	{r7}
 8002b10:	4770      	bx	lr

08002b12 <LL_USART_ClearFlag_ORE>:
  * @rmtoll SR           ORE           LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 8002b12:	b480      	push	{r7}
 8002b14:	b085      	sub	sp, #20
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8002b20:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8002b28:	68fb      	ldr	r3, [r7, #12]
}
 8002b2a:	bf00      	nop
 8002b2c:	3714      	adds	r7, #20
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bc80      	pop	{r7}
 8002b32:	4770      	bx	lr

08002b34 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b089      	sub	sp, #36	@ 0x24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	330c      	adds	r3, #12
 8002b40:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	e853 3f00 	ldrex	r3, [r3]
 8002b48:	60bb      	str	r3, [r7, #8]
   return(result);
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	f043 0320 	orr.w	r3, r3, #32
 8002b50:	61fb      	str	r3, [r7, #28]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	330c      	adds	r3, #12
 8002b56:	69fa      	ldr	r2, [r7, #28]
 8002b58:	61ba      	str	r2, [r7, #24]
 8002b5a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b5c:	6979      	ldr	r1, [r7, #20]
 8002b5e:	69ba      	ldr	r2, [r7, #24]
 8002b60:	e841 2300 	strex	r3, r2, [r1]
 8002b64:	613b      	str	r3, [r7, #16]
   return(result);
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d1e7      	bne.n	8002b3c <LL_USART_EnableIT_RXNE+0x8>
}
 8002b6c:	bf00      	nop
 8002b6e:	bf00      	nop
 8002b70:	3724      	adds	r7, #36	@ 0x24
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bc80      	pop	{r7}
 8002b76:	4770      	bx	lr

08002b78 <LL_USART_EnableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b089      	sub	sp, #36	@ 0x24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	330c      	adds	r3, #12
 8002b84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	e853 3f00 	ldrex	r3, [r3]
 8002b8c:	60bb      	str	r3, [r7, #8]
   return(result);
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b94:	61fb      	str	r3, [r7, #28]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	330c      	adds	r3, #12
 8002b9a:	69fa      	ldr	r2, [r7, #28]
 8002b9c:	61ba      	str	r2, [r7, #24]
 8002b9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ba0:	6979      	ldr	r1, [r7, #20]
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	e841 2300 	strex	r3, r2, [r1]
 8002ba8:	613b      	str	r3, [r7, #16]
   return(result);
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d1e7      	bne.n	8002b80 <LL_USART_EnableIT_TXE+0x8>
}
 8002bb0:	bf00      	nop
 8002bb2:	bf00      	nop
 8002bb4:	3724      	adds	r7, #36	@ 0x24
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bc80      	pop	{r7}
 8002bba:	4770      	bx	lr

08002bbc <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b089      	sub	sp, #36	@ 0x24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	3314      	adds	r3, #20
 8002bc8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	e853 3f00 	ldrex	r3, [r3]
 8002bd0:	60bb      	str	r3, [r7, #8]
   return(result);
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	f043 0301 	orr.w	r3, r3, #1
 8002bd8:	61fb      	str	r3, [r7, #28]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	3314      	adds	r3, #20
 8002bde:	69fa      	ldr	r2, [r7, #28]
 8002be0:	61ba      	str	r2, [r7, #24]
 8002be2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002be4:	6979      	ldr	r1, [r7, #20]
 8002be6:	69ba      	ldr	r2, [r7, #24]
 8002be8:	e841 2300 	strex	r3, r2, [r1]
 8002bec:	613b      	str	r3, [r7, #16]
   return(result);
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d1e7      	bne.n	8002bc4 <LL_USART_EnableIT_ERROR+0x8>
}
 8002bf4:	bf00      	nop
 8002bf6:	bf00      	nop
 8002bf8:	3724      	adds	r7, #36	@ 0x24
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bc80      	pop	{r7}
 8002bfe:	4770      	bx	lr

08002c00 <LL_USART_DisableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_DisableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_RXNE(USART_TypeDef *USARTx)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b089      	sub	sp, #36	@ 0x24
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	330c      	adds	r3, #12
 8002c0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	e853 3f00 	ldrex	r3, [r3]
 8002c14:	60bb      	str	r3, [r7, #8]
   return(result);
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	f023 0320 	bic.w	r3, r3, #32
 8002c1c:	61fb      	str	r3, [r7, #28]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	330c      	adds	r3, #12
 8002c22:	69fa      	ldr	r2, [r7, #28]
 8002c24:	61ba      	str	r2, [r7, #24]
 8002c26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c28:	6979      	ldr	r1, [r7, #20]
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	e841 2300 	strex	r3, r2, [r1]
 8002c30:	613b      	str	r3, [r7, #16]
   return(result);
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d1e7      	bne.n	8002c08 <LL_USART_DisableIT_RXNE+0x8>
}
 8002c38:	bf00      	nop
 8002c3a:	bf00      	nop
 8002c3c:	3724      	adds	r7, #36	@ 0x24
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bc80      	pop	{r7}
 8002c42:	4770      	bx	lr

08002c44 <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b089      	sub	sp, #36	@ 0x24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	330c      	adds	r3, #12
 8002c50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	e853 3f00 	ldrex	r3, [r3]
 8002c58:	60bb      	str	r3, [r7, #8]
   return(result);
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002c60:	61fb      	str	r3, [r7, #28]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	330c      	adds	r3, #12
 8002c66:	69fa      	ldr	r2, [r7, #28]
 8002c68:	61ba      	str	r2, [r7, #24]
 8002c6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c6c:	6979      	ldr	r1, [r7, #20]
 8002c6e:	69ba      	ldr	r2, [r7, #24]
 8002c70:	e841 2300 	strex	r3, r2, [r1]
 8002c74:	613b      	str	r3, [r7, #16]
   return(result);
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d1e7      	bne.n	8002c4c <LL_USART_DisableIT_TXE+0x8>
}
 8002c7c:	bf00      	nop
 8002c7e:	bf00      	nop
 8002c80:	3724      	adds	r7, #36	@ 0x24
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bc80      	pop	{r7}
 8002c86:	4770      	bx	lr

08002c88 <LL_USART_IsEnabledIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_IsEnabledIT_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE(const USART_TypeDef *USARTx)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	f003 0320 	and.w	r3, r3, #32
 8002c98:	2b20      	cmp	r3, #32
 8002c9a:	bf0c      	ite	eq
 8002c9c:	2301      	moveq	r3, #1
 8002c9e:	2300      	movne	r3, #0
 8002ca0:	b2db      	uxtb	r3, r3
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bc80      	pop	{r7}
 8002caa:	4770      	bx	lr

08002cac <LL_USART_IsEnabledIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_IsEnabledIT_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXE(const USART_TypeDef *USARTx)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_TXEIE) == (USART_CR1_TXEIE));
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cbc:	2b80      	cmp	r3, #128	@ 0x80
 8002cbe:	bf0c      	ite	eq
 8002cc0:	2301      	moveq	r3, #1
 8002cc2:	2300      	movne	r3, #0
 8002cc4:	b2db      	uxtb	r3, r3
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bc80      	pop	{r7}
 8002cce:	4770      	bx	lr

08002cd0 <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	b2db      	uxtb	r3, r3
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bc80      	pop	{r7}
 8002ce6:	4770      	bx	lr

08002ce8 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8002cf4:	78fa      	ldrb	r2, [r7, #3]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	605a      	str	r2, [r3, #4]
}
 8002cfa:	bf00      	nop
 8002cfc:	370c      	adds	r7, #12
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bc80      	pop	{r7}
 8002d02:	4770      	bx	lr

08002d04 <BSP_UART_Config>:
 */
void
BSP_UART_Config (uart_cfg_t    *uartstdio_device,
                 USART_TypeDef *uart,
                 IRQn_Type      uart_irqn)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	71fb      	strb	r3, [r7, #7]
  uartstdio_device->p_uart      = uart;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	68ba      	ldr	r2, [r7, #8]
 8002d16:	621a      	str	r2, [r3, #32]
  uartstdio_device->e_uart_irqn = uart_irqn;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	79fa      	ldrb	r2, [r7, #7]
 8002d1c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  RING_BUFFER_Init((ring_buffer_t *)&uartstdio_device->s_tx_buffer);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	3310      	adds	r3, #16
 8002d24:	4618      	mov	r0, r3
 8002d26:	f002 fa7b 	bl	8005220 <RING_BUFFER_Init>
  RING_BUFFER_Init((ring_buffer_t *)&uartstdio_device->s_rx_buffer);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f002 fa77 	bl	8005220 <RING_BUFFER_Init>

  /**
   * Enable the UART Error Interrupt:
   * (Frame error, noise error, overrun error)
   */
  LL_USART_EnableIT_ERROR(uart);
 8002d32:	68b8      	ldr	r0, [r7, #8]
 8002d34:	f7ff ff42 	bl	8002bbc <LL_USART_EnableIT_ERROR>

  /* Enable the UART Data Register not empty Interrupt */
  LL_USART_EnableIT_RXNE(uart);
 8002d38:	68b8      	ldr	r0, [r7, #8]
 8002d3a:	f7ff fefb 	bl	8002b34 <LL_USART_EnableIT_RXNE>
}
 8002d3e:	bf00      	nop
 8002d40:	3710      	adds	r7, #16
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}

08002d46 <BSP_UART_IsAvailableDataReceive>:

uint8_t
BSP_UART_IsAvailableDataReceive (uart_cfg_t *uartstdio_device)
{
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b082      	sub	sp, #8
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
  if (RING_BUFFER_Is_Empty((ring_buffer_t *)&uartstdio_device->s_rx_buffer))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f002 fa8f 	bl	8005274 <RING_BUFFER_Is_Empty>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <BSP_UART_IsAvailableDataReceive+0x1a>
  {
    return 0;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	e000      	b.n	8002d62 <BSP_UART_IsAvailableDataReceive+0x1c>
  }
  return 1;
 8002d60:	2301      	movs	r3, #1
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3708      	adds	r7, #8
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <BSP_UART_SendChar>:
 * @return If the u32_uart_timeout reaches 0, the function will return without
 * sending the character.
 */
void
BSP_UART_SendChar (uart_cfg_t *uartstdio_device, char c)
{
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	b084      	sub	sp, #16
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
 8002d72:	460b      	mov	r3, r1
 8002d74:	70fb      	strb	r3, [r7, #3]
  uint32_t u32_uart_timeout = LIMIT_WAIT_BUFFER;
 8002d76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d7a:	60fb      	str	r3, [r7, #12]

  // Wait until there is space in the transmit buffer or u32_uart_timeout occurs
  while (RING_BUFFER_Is_Full((ring_buffer_t *)&uartstdio_device->s_tx_buffer))
 8002d7c:	e005      	b.n	8002d8a <BSP_UART_SendChar+0x20>
  {
    if (u32_uart_timeout == 0)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d021      	beq.n	8002dc8 <BSP_UART_SendChar+0x5e>
    {
      return;
    }
    u32_uart_timeout--;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	3b01      	subs	r3, #1
 8002d88:	60fb      	str	r3, [r7, #12]
  while (RING_BUFFER_Is_Full((ring_buffer_t *)&uartstdio_device->s_tx_buffer))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	3310      	adds	r3, #16
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f002 fa80 	bl	8005294 <RING_BUFFER_Is_Full>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1f1      	bne.n	8002d7e <BSP_UART_SendChar+0x14>
  }

  // Critical section to ensure atomic access to the buffer
  ATOMIC_BLOCK_START(uartstdio_device->p_uart);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a1b      	ldr	r3, [r3, #32]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7ff ff2e 	bl	8002c00 <LL_USART_DisableIT_RXNE>
  RING_BUFFER_Push_Data((ring_buffer_t *)&uartstdio_device->s_tx_buffer, c);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	3310      	adds	r3, #16
 8002da8:	78fa      	ldrb	r2, [r7, #3]
 8002daa:	4611      	mov	r1, r2
 8002dac:	4618      	mov	r0, r3
 8002dae:	f002 fa81 	bl	80052b4 <RING_BUFFER_Push_Data>
  ATOMIC_BLOCK_END(uartstdio_device->p_uart);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a1b      	ldr	r3, [r3, #32]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7ff febc 	bl	8002b34 <LL_USART_EnableIT_RXNE>

  // Enable Transmit Data Register Empty interrupt
  LL_USART_EnableIT_TXE(uartstdio_device->p_uart);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a1b      	ldr	r3, [r3, #32]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7ff fed9 	bl	8002b78 <LL_USART_EnableIT_TXE>
 8002dc6:	e000      	b.n	8002dca <BSP_UART_SendChar+0x60>
      return;
 8002dc8:	bf00      	nop
}
 8002dca:	3710      	adds	r7, #16
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <BSP_UART_SendString>:
 * @param s Pointer to the constant character array (string) to be sent via
 * UART.
 */
void
BSP_UART_SendString (uart_cfg_t *uartstdio_device, const char *s)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
  while (*s)
 8002dda:	e007      	b.n	8002dec <BSP_UART_SendString+0x1c>
  {
    BSP_UART_SendChar(uartstdio_device, *s++);
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	1c5a      	adds	r2, r3, #1
 8002de0:	603a      	str	r2, [r7, #0]
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	4619      	mov	r1, r3
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f7ff ffbf 	bl	8002d6a <BSP_UART_SendChar>
  while (*s)
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d1f3      	bne.n	8002ddc <BSP_UART_SendString+0xc>
  }
}
 8002df4:	bf00      	nop
 8002df6:	bf00      	nop
 8002df8:	3708      	adds	r7, #8
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <BSP_UART_ReadChar>:
 * from the buffer and returns it. If the buffer is empty, it returns the null
 * character '\0'.
 */
char
BSP_UART_ReadChar (uart_cfg_t *uartstdio_device)
{
 8002dfe:	b590      	push	{r4, r7, lr}
 8002e00:	b083      	sub	sp, #12
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
  register char c = '\0';
 8002e06:	2400      	movs	r4, #0
  if (!RING_BUFFER_Is_Empty((ring_buffer_t *)&uartstdio_device->s_rx_buffer))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f002 fa32 	bl	8005274 <RING_BUFFER_Is_Empty>
 8002e10:	4603      	mov	r3, r0
 8002e12:	f083 0301 	eor.w	r3, r3, #1
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d011      	beq.n	8002e40 <BSP_UART_ReadChar+0x42>
  {
    ATOMIC_BLOCK_START(uartstdio_device->p_uart);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a1b      	ldr	r3, [r3, #32]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7ff feed 	bl	8002c00 <LL_USART_DisableIT_RXNE>
    c = (char)RING_BUFFER_Pull_Data((ring_buffer_t *)&uartstdio_device->s_rx_buffer);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f002 fa69 	bl	8005300 <RING_BUFFER_Pull_Data>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	461c      	mov	r4, r3
    ATOMIC_BLOCK_END(uartstdio_device->p_uart);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a1b      	ldr	r3, [r3, #32]
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7ff fe7c 	bl	8002b34 <LL_USART_EnableIT_RXNE>
    return c;
 8002e3c:	4623      	mov	r3, r4
 8002e3e:	e000      	b.n	8002e42 <BSP_UART_ReadChar+0x44>
  }
  return c;
 8002e40:	4623      	mov	r3, r4
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd90      	pop	{r4, r7, pc}
	...

08002e4c <BSP_UART_TimeOut>:
 * The function `UART_u32_uart_TimeOut` decrements the variable
 * `u32_uart_timeout` if it is not equal to 0.
 */
void
BSP_UART_TimeOut (void)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	af00      	add	r7, sp, #0
  if (u32_uart_timeout != 0)
 8002e50:	4b06      	ldr	r3, [pc, #24]	@ (8002e6c <BSP_UART_TimeOut+0x20>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d004      	beq.n	8002e62 <BSP_UART_TimeOut+0x16>
  {
    u32_uart_timeout--;
 8002e58:	4b04      	ldr	r3, [pc, #16]	@ (8002e6c <BSP_UART_TimeOut+0x20>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	3b01      	subs	r3, #1
 8002e5e:	4a03      	ldr	r2, [pc, #12]	@ (8002e6c <BSP_UART_TimeOut+0x20>)
 8002e60:	6013      	str	r3, [r2, #0]
  }
}
 8002e62:	bf00      	nop
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bc80      	pop	{r7}
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	200004f4 	.word	0x200004f4

08002e70 <BSP_UART_ISR>:
 *
 * @param uartstdio_device Pointer to the UART configuration data structure.
 */
void
BSP_UART_ISR (uart_cfg_t *uartstdio_device)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  // If DR is not empty and the Rx Int is enabled
  if ((LL_USART_IsActiveFlag_RXNE(uartstdio_device->p_uart) != RESET)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a1b      	ldr	r3, [r3, #32]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7ff fe02 	bl	8002a86 <LL_USART_IsActiveFlag_RXNE>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d03d      	beq.n	8002f04 <BSP_UART_ISR+0x94>
      && (LL_USART_IsEnabledIT_RXNE(uartstdio_device->p_uart) != RESET))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7ff fefb 	bl	8002c88 <LL_USART_IsEnabledIT_RXNE>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d035      	beq.n	8002f04 <BSP_UART_ISR+0x94>
  {
    uint8_t c = LL_USART_ReceiveData8(uartstdio_device->p_uart);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a1b      	ldr	r3, [r3, #32]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7ff ff17 	bl	8002cd0 <LL_USART_ReceiveData8>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	73fb      	strb	r3, [r7, #15]

    // If there are errors, clear the flags
    if ((LL_USART_IsActiveFlag_ORE(uartstdio_device->p_uart) != RESET)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a1b      	ldr	r3, [r3, #32]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7ff fdd9 	bl	8002a62 <LL_USART_IsActiveFlag_ORE>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d10f      	bne.n	8002ed6 <BSP_UART_ISR+0x66>
        || (LL_USART_IsActiveFlag_FE(uartstdio_device->p_uart) != RESET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a1b      	ldr	r3, [r3, #32]
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7ff fdad 	bl	8002a1a <LL_USART_IsActiveFlag_FE>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d107      	bne.n	8002ed6 <BSP_UART_ISR+0x66>
        || (LL_USART_IsActiveFlag_NE(uartstdio_device->p_uart) != RESET))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a1b      	ldr	r3, [r3, #32]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7ff fdb7 	bl	8002a3e <LL_USART_IsActiveFlag_NE>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d00f      	beq.n	8002ef6 <BSP_UART_ISR+0x86>
    {
      LL_USART_ClearFlag_ORE(uartstdio_device->p_uart);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a1b      	ldr	r3, [r3, #32]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7ff fe19 	bl	8002b12 <LL_USART_ClearFlag_ORE>
      LL_USART_ClearFlag_FE(uartstdio_device->p_uart);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a1b      	ldr	r3, [r3, #32]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7ff fdf2 	bl	8002ace <LL_USART_ClearFlag_FE>
      LL_USART_ClearFlag_NE(uartstdio_device->p_uart);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a1b      	ldr	r3, [r3, #32]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7ff fdfe 	bl	8002af0 <LL_USART_ClearFlag_NE>
    }
    else
    {
      RING_BUFFER_Push_Data((ring_buffer_t *)&uartstdio_device->s_rx_buffer, c);
    }
    return;
 8002ef4:	e033      	b.n	8002f5e <BSP_UART_ISR+0xee>
      RING_BUFFER_Push_Data((ring_buffer_t *)&uartstdio_device->s_rx_buffer, c);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	7bfa      	ldrb	r2, [r7, #15]
 8002efa:	4611      	mov	r1, r2
 8002efc:	4618      	mov	r0, r3
 8002efe:	f002 f9d9 	bl	80052b4 <RING_BUFFER_Push_Data>
    return;
 8002f02:	e02c      	b.n	8002f5e <BSP_UART_ISR+0xee>
  }

  // If interrupt is caused due to Transmit Data Register Empty
  if ((LL_USART_IsActiveFlag_TXE(uartstdio_device->p_uart) != RESET)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6a1b      	ldr	r3, [r3, #32]
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7ff fdce 	bl	8002aaa <LL_USART_IsActiveFlag_TXE>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d024      	beq.n	8002f5e <BSP_UART_ISR+0xee>
      && (LL_USART_IsEnabledIT_TXE(uartstdio_device->p_uart) != RESET))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a1b      	ldr	r3, [r3, #32]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7ff fec7 	bl	8002cac <LL_USART_IsEnabledIT_TXE>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d01c      	beq.n	8002f5e <BSP_UART_ISR+0xee>
  {
    if (RING_BUFFER_Is_Empty((ring_buffer_t *)&uartstdio_device->s_tx_buffer))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	3310      	adds	r3, #16
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f002 f9a3 	bl	8005274 <RING_BUFFER_Is_Empty>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d005      	beq.n	8002f40 <BSP_UART_ISR+0xd0>
    {
      LL_USART_DisableIT_TXE(uartstdio_device->p_uart);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6a1b      	ldr	r3, [r3, #32]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7ff fe83 	bl	8002c44 <LL_USART_DisableIT_TXE>
    {
      uint8_t c
          = RING_BUFFER_Pull_Data((ring_buffer_t *)&uartstdio_device->s_tx_buffer);
      LL_USART_TransmitData8(uartstdio_device->p_uart, c);
    }
    return;
 8002f3e:	e00d      	b.n	8002f5c <BSP_UART_ISR+0xec>
          = RING_BUFFER_Pull_Data((ring_buffer_t *)&uartstdio_device->s_tx_buffer);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	3310      	adds	r3, #16
 8002f44:	4618      	mov	r0, r3
 8002f46:	f002 f9db 	bl	8005300 <RING_BUFFER_Pull_Data>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	73bb      	strb	r3, [r7, #14]
      LL_USART_TransmitData8(uartstdio_device->p_uart, c);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a1b      	ldr	r3, [r3, #32]
 8002f52:	7bba      	ldrb	r2, [r7, #14]
 8002f54:	4611      	mov	r1, r2
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7ff fec6 	bl	8002ce8 <LL_USART_TransmitData8>
    return;
 8002f5c:	bf00      	nop
  }
}
 8002f5e:	3710      	adds	r7, #16
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <__NVIC_SetPriorityGrouping>:
{
 8002f64:	b480      	push	{r7}
 8002f66:	b085      	sub	sp, #20
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f003 0307 	and.w	r3, r3, #7
 8002f72:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f74:	4b0c      	ldr	r3, [pc, #48]	@ (8002fa8 <__NVIC_SetPriorityGrouping+0x44>)
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f7a:	68ba      	ldr	r2, [r7, #8]
 8002f7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f80:	4013      	ands	r3, r2
 8002f82:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f96:	4a04      	ldr	r2, [pc, #16]	@ (8002fa8 <__NVIC_SetPriorityGrouping+0x44>)
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	60d3      	str	r3, [r2, #12]
}
 8002f9c:	bf00      	nop
 8002f9e:	3714      	adds	r7, #20
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bc80      	pop	{r7}
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	e000ed00 	.word	0xe000ed00

08002fac <__NVIC_GetPriorityGrouping>:
{
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fb0:	4b04      	ldr	r3, [pc, #16]	@ (8002fc4 <__NVIC_GetPriorityGrouping+0x18>)
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	0a1b      	lsrs	r3, r3, #8
 8002fb6:	f003 0307 	and.w	r3, r3, #7
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bc80      	pop	{r7}
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	e000ed00 	.word	0xe000ed00

08002fc8 <__NVIC_EnableIRQ>:
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	4603      	mov	r3, r0
 8002fd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	db0b      	blt.n	8002ff2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fda:	79fb      	ldrb	r3, [r7, #7]
 8002fdc:	f003 021f 	and.w	r2, r3, #31
 8002fe0:	4906      	ldr	r1, [pc, #24]	@ (8002ffc <__NVIC_EnableIRQ+0x34>)
 8002fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe6:	095b      	lsrs	r3, r3, #5
 8002fe8:	2001      	movs	r0, #1
 8002fea:	fa00 f202 	lsl.w	r2, r0, r2
 8002fee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002ff2:	bf00      	nop
 8002ff4:	370c      	adds	r7, #12
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bc80      	pop	{r7}
 8002ffa:	4770      	bx	lr
 8002ffc:	e000e100 	.word	0xe000e100

08003000 <__NVIC_SetPriority>:
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	4603      	mov	r3, r0
 8003008:	6039      	str	r1, [r7, #0]
 800300a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800300c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003010:	2b00      	cmp	r3, #0
 8003012:	db0a      	blt.n	800302a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	b2da      	uxtb	r2, r3
 8003018:	490c      	ldr	r1, [pc, #48]	@ (800304c <__NVIC_SetPriority+0x4c>)
 800301a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800301e:	0112      	lsls	r2, r2, #4
 8003020:	b2d2      	uxtb	r2, r2
 8003022:	440b      	add	r3, r1
 8003024:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003028:	e00a      	b.n	8003040 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	b2da      	uxtb	r2, r3
 800302e:	4908      	ldr	r1, [pc, #32]	@ (8003050 <__NVIC_SetPriority+0x50>)
 8003030:	79fb      	ldrb	r3, [r7, #7]
 8003032:	f003 030f 	and.w	r3, r3, #15
 8003036:	3b04      	subs	r3, #4
 8003038:	0112      	lsls	r2, r2, #4
 800303a:	b2d2      	uxtb	r2, r2
 800303c:	440b      	add	r3, r1
 800303e:	761a      	strb	r2, [r3, #24]
}
 8003040:	bf00      	nop
 8003042:	370c      	adds	r7, #12
 8003044:	46bd      	mov	sp, r7
 8003046:	bc80      	pop	{r7}
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	e000e100 	.word	0xe000e100
 8003050:	e000ed00 	.word	0xe000ed00

08003054 <NVIC_EncodePriority>:
{
 8003054:	b480      	push	{r7}
 8003056:	b089      	sub	sp, #36	@ 0x24
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f003 0307 	and.w	r3, r3, #7
 8003066:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	f1c3 0307 	rsb	r3, r3, #7
 800306e:	2b04      	cmp	r3, #4
 8003070:	bf28      	it	cs
 8003072:	2304      	movcs	r3, #4
 8003074:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	3304      	adds	r3, #4
 800307a:	2b06      	cmp	r3, #6
 800307c:	d902      	bls.n	8003084 <NVIC_EncodePriority+0x30>
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	3b03      	subs	r3, #3
 8003082:	e000      	b.n	8003086 <NVIC_EncodePriority+0x32>
 8003084:	2300      	movs	r3, #0
 8003086:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003088:	f04f 32ff 	mov.w	r2, #4294967295
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	fa02 f303 	lsl.w	r3, r2, r3
 8003092:	43da      	mvns	r2, r3
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	401a      	ands	r2, r3
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800309c:	f04f 31ff 	mov.w	r1, #4294967295
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	fa01 f303 	lsl.w	r3, r1, r3
 80030a6:	43d9      	mvns	r1, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030ac:	4313      	orrs	r3, r2
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3724      	adds	r7, #36	@ 0x24
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bc80      	pop	{r7}
 80030b6:	4770      	bx	lr

080030b8 <LL_I2C_EnableClockStretching>:
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	601a      	str	r2, [r3, #0]
}
 80030cc:	bf00      	nop
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bc80      	pop	{r7}
 80030d4:	4770      	bx	lr

080030d6 <LL_I2C_DisableGeneralCall>:
{
 80030d6:	b480      	push	{r7}
 80030d8:	b083      	sub	sp, #12
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	601a      	str	r2, [r3, #0]
}
 80030ea:	bf00      	nop
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bc80      	pop	{r7}
 80030f2:	4770      	bx	lr

080030f4 <LL_I2C_SetOwnAddress2>:
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	f023 02fe 	bic.w	r2, r3, #254	@ 0xfe
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	431a      	orrs	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	60da      	str	r2, [r3, #12]
}
 800310e:	bf00      	nop
 8003110:	370c      	adds	r7, #12
 8003112:	46bd      	mov	sp, r7
 8003114:	bc80      	pop	{r7}
 8003116:	4770      	bx	lr

08003118 <LL_I2C_DisableOwnAddress2>:
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	f023 0201 	bic.w	r2, r3, #1
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	60da      	str	r2, [r3, #12]
}
 800312c:	bf00      	nop
 800312e:	370c      	adds	r7, #12
 8003130:	46bd      	mov	sp, r7
 8003132:	bc80      	pop	{r7}
 8003134:	4770      	bx	lr
	...

08003138 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8003138:	b480      	push	{r7}
 800313a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800313c:	4b04      	ldr	r3, [pc, #16]	@ (8003150 <LL_RCC_HSE_Enable+0x18>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a03      	ldr	r2, [pc, #12]	@ (8003150 <LL_RCC_HSE_Enable+0x18>)
 8003142:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003146:	6013      	str	r3, [r2, #0]
}
 8003148:	bf00      	nop
 800314a:	46bd      	mov	sp, r7
 800314c:	bc80      	pop	{r7}
 800314e:	4770      	bx	lr
 8003150:	40021000 	.word	0x40021000

08003154 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8003158:	4b06      	ldr	r3, [pc, #24]	@ (8003174 <LL_RCC_HSE_IsReady+0x20>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003160:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003164:	bf0c      	ite	eq
 8003166:	2301      	moveq	r3, #1
 8003168:	2300      	movne	r3, #0
 800316a:	b2db      	uxtb	r3, r3
}
 800316c:	4618      	mov	r0, r3
 800316e:	46bd      	mov	sp, r7
 8003170:	bc80      	pop	{r7}
 8003172:	4770      	bx	lr
 8003174:	40021000 	.word	0x40021000

08003178 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003180:	4b06      	ldr	r3, [pc, #24]	@ (800319c <LL_RCC_SetSysClkSource+0x24>)
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f023 0203 	bic.w	r2, r3, #3
 8003188:	4904      	ldr	r1, [pc, #16]	@ (800319c <LL_RCC_SetSysClkSource+0x24>)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4313      	orrs	r3, r2
 800318e:	604b      	str	r3, [r1, #4]
}
 8003190:	bf00      	nop
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	bc80      	pop	{r7}
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	40021000 	.word	0x40021000

080031a0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80031a0:	b480      	push	{r7}
 80031a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80031a4:	4b03      	ldr	r3, [pc, #12]	@ (80031b4 <LL_RCC_GetSysClkSource+0x14>)
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f003 030c 	and.w	r3, r3, #12
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bc80      	pop	{r7}
 80031b2:	4770      	bx	lr
 80031b4:	40021000 	.word	0x40021000

080031b8 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80031c0:	4b06      	ldr	r3, [pc, #24]	@ (80031dc <LL_RCC_SetAHBPrescaler+0x24>)
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031c8:	4904      	ldr	r1, [pc, #16]	@ (80031dc <LL_RCC_SetAHBPrescaler+0x24>)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	604b      	str	r3, [r1, #4]
}
 80031d0:	bf00      	nop
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bc80      	pop	{r7}
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop
 80031dc:	40021000 	.word	0x40021000

080031e0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80031e8:	4b06      	ldr	r3, [pc, #24]	@ (8003204 <LL_RCC_SetAPB1Prescaler+0x24>)
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80031f0:	4904      	ldr	r1, [pc, #16]	@ (8003204 <LL_RCC_SetAPB1Prescaler+0x24>)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	604b      	str	r3, [r1, #4]
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bc80      	pop	{r7}
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	40021000 	.word	0x40021000

08003208 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003210:	4b06      	ldr	r3, [pc, #24]	@ (800322c <LL_RCC_SetAPB2Prescaler+0x24>)
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003218:	4904      	ldr	r1, [pc, #16]	@ (800322c <LL_RCC_SetAPB2Prescaler+0x24>)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4313      	orrs	r3, r2
 800321e:	604b      	str	r3, [r1, #4]
}
 8003220:	bf00      	nop
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	bc80      	pop	{r7}
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	40021000 	.word	0x40021000

08003230 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8003230:	b480      	push	{r7}
 8003232:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003234:	4b04      	ldr	r3, [pc, #16]	@ (8003248 <LL_RCC_PLL_Enable+0x18>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a03      	ldr	r2, [pc, #12]	@ (8003248 <LL_RCC_PLL_Enable+0x18>)
 800323a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800323e:	6013      	str	r3, [r2, #0]
}
 8003240:	bf00      	nop
 8003242:	46bd      	mov	sp, r7
 8003244:	bc80      	pop	{r7}
 8003246:	4770      	bx	lr
 8003248:	40021000 	.word	0x40021000

0800324c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8003250:	4b06      	ldr	r3, [pc, #24]	@ (800326c <LL_RCC_PLL_IsReady+0x20>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003258:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800325c:	bf0c      	ite	eq
 800325e:	2301      	moveq	r3, #1
 8003260:	2300      	movne	r3, #0
 8003262:	b2db      	uxtb	r3, r3
}
 8003264:	4618      	mov	r0, r3
 8003266:	46bd      	mov	sp, r7
 8003268:	bc80      	pop	{r7}
 800326a:	4770      	bx	lr
 800326c:	40021000 	.word	0x40021000

08003270 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 800327a:	4b08      	ldr	r3, [pc, #32]	@ (800329c <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	430b      	orrs	r3, r1
 800328c:	4903      	ldr	r1, [pc, #12]	@ (800329c <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 800328e:	4313      	orrs	r3, r2
 8003290:	604b      	str	r3, [r1, #4]
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 8003292:	bf00      	nop
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	bc80      	pop	{r7}
 800329a:	4770      	bx	lr
 800329c:	40021000 	.word	0x40021000

080032a0 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b085      	sub	sp, #20
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80032a8:	4b08      	ldr	r3, [pc, #32]	@ (80032cc <LL_APB1_GRP1_EnableClock+0x2c>)
 80032aa:	69da      	ldr	r2, [r3, #28]
 80032ac:	4907      	ldr	r1, [pc, #28]	@ (80032cc <LL_APB1_GRP1_EnableClock+0x2c>)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80032b4:	4b05      	ldr	r3, [pc, #20]	@ (80032cc <LL_APB1_GRP1_EnableClock+0x2c>)
 80032b6:	69da      	ldr	r2, [r3, #28]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4013      	ands	r3, r2
 80032bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80032be:	68fb      	ldr	r3, [r7, #12]
}
 80032c0:	bf00      	nop
 80032c2:	3714      	adds	r7, #20
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bc80      	pop	{r7}
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	40021000 	.word	0x40021000

080032d0 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b085      	sub	sp, #20
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80032d8:	4b08      	ldr	r3, [pc, #32]	@ (80032fc <LL_APB2_GRP1_EnableClock+0x2c>)
 80032da:	699a      	ldr	r2, [r3, #24]
 80032dc:	4907      	ldr	r1, [pc, #28]	@ (80032fc <LL_APB2_GRP1_EnableClock+0x2c>)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80032e4:	4b05      	ldr	r3, [pc, #20]	@ (80032fc <LL_APB2_GRP1_EnableClock+0x2c>)
 80032e6:	699a      	ldr	r2, [r3, #24]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	4013      	ands	r3, r2
 80032ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80032ee:	68fb      	ldr	r3, [r7, #12]
}
 80032f0:	bf00      	nop
 80032f2:	3714      	adds	r7, #20
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bc80      	pop	{r7}
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	40021000 	.word	0x40021000

08003300 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8003308:	4b06      	ldr	r3, [pc, #24]	@ (8003324 <LL_FLASH_SetLatency+0x24>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f023 0207 	bic.w	r2, r3, #7
 8003310:	4904      	ldr	r1, [pc, #16]	@ (8003324 <LL_FLASH_SetLatency+0x24>)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4313      	orrs	r3, r2
 8003316:	600b      	str	r3, [r1, #0]
}
 8003318:	bf00      	nop
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	bc80      	pop	{r7}
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	40022000 	.word	0x40022000

08003328 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8003328:	b480      	push	{r7}
 800332a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800332c:	4b03      	ldr	r3, [pc, #12]	@ (800333c <LL_FLASH_GetLatency+0x14>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0307 	and.w	r3, r3, #7
}
 8003334:	4618      	mov	r0, r3
 8003336:	46bd      	mov	sp, r7
 8003338:	bc80      	pop	{r7}
 800333a:	4770      	bx	lr
 800333c:	40022000 	.word	0x40022000

08003340 <LL_TIM_EnableARRPreload>:
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	601a      	str	r2, [r3, #0]
}
 8003354:	bf00      	nop
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	bc80      	pop	{r7}
 800335c:	4770      	bx	lr

0800335e <LL_TIM_DisableARRPreload>:
{
 800335e:	b480      	push	{r7}
 8003360:	b083      	sub	sp, #12
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	601a      	str	r2, [r3, #0]
}
 8003372:	bf00      	nop
 8003374:	370c      	adds	r7, #12
 8003376:	46bd      	mov	sp, r7
 8003378:	bc80      	pop	{r7}
 800337a:	4770      	bx	lr

0800337c <LL_TIM_OC_DisableFast>:
{
 800337c:	b480      	push	{r7}
 800337e:	b085      	sub	sp, #20
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	2b01      	cmp	r3, #1
 800338a:	d01c      	beq.n	80033c6 <LL_TIM_OC_DisableFast+0x4a>
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	2b04      	cmp	r3, #4
 8003390:	d017      	beq.n	80033c2 <LL_TIM_OC_DisableFast+0x46>
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	2b10      	cmp	r3, #16
 8003396:	d012      	beq.n	80033be <LL_TIM_OC_DisableFast+0x42>
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	2b40      	cmp	r3, #64	@ 0x40
 800339c:	d00d      	beq.n	80033ba <LL_TIM_OC_DisableFast+0x3e>
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033a4:	d007      	beq.n	80033b6 <LL_TIM_OC_DisableFast+0x3a>
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033ac:	d101      	bne.n	80033b2 <LL_TIM_OC_DisableFast+0x36>
 80033ae:	2305      	movs	r3, #5
 80033b0:	e00a      	b.n	80033c8 <LL_TIM_OC_DisableFast+0x4c>
 80033b2:	2306      	movs	r3, #6
 80033b4:	e008      	b.n	80033c8 <LL_TIM_OC_DisableFast+0x4c>
 80033b6:	2304      	movs	r3, #4
 80033b8:	e006      	b.n	80033c8 <LL_TIM_OC_DisableFast+0x4c>
 80033ba:	2303      	movs	r3, #3
 80033bc:	e004      	b.n	80033c8 <LL_TIM_OC_DisableFast+0x4c>
 80033be:	2302      	movs	r3, #2
 80033c0:	e002      	b.n	80033c8 <LL_TIM_OC_DisableFast+0x4c>
 80033c2:	2301      	movs	r3, #1
 80033c4:	e000      	b.n	80033c8 <LL_TIM_OC_DisableFast+0x4c>
 80033c6:	2300      	movs	r3, #0
 80033c8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	3318      	adds	r3, #24
 80033ce:	4619      	mov	r1, r3
 80033d0:	7bfb      	ldrb	r3, [r7, #15]
 80033d2:	4a0a      	ldr	r2, [pc, #40]	@ (80033fc <LL_TIM_OC_DisableFast+0x80>)
 80033d4:	5cd3      	ldrb	r3, [r2, r3]
 80033d6:	440b      	add	r3, r1
 80033d8:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	7bfb      	ldrb	r3, [r7, #15]
 80033e0:	4907      	ldr	r1, [pc, #28]	@ (8003400 <LL_TIM_OC_DisableFast+0x84>)
 80033e2:	5ccb      	ldrb	r3, [r1, r3]
 80033e4:	4619      	mov	r1, r3
 80033e6:	2304      	movs	r3, #4
 80033e8:	408b      	lsls	r3, r1
 80033ea:	43db      	mvns	r3, r3
 80033ec:	401a      	ands	r2, r3
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	601a      	str	r2, [r3, #0]
}
 80033f2:	bf00      	nop
 80033f4:	3714      	adds	r7, #20
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bc80      	pop	{r7}
 80033fa:	4770      	bx	lr
 80033fc:	08009cec 	.word	0x08009cec
 8003400:	08009cf4 	.word	0x08009cf4

08003404 <LL_TIM_OC_EnablePreload>:
{
 8003404:	b480      	push	{r7}
 8003406:	b085      	sub	sp, #20
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	2b01      	cmp	r3, #1
 8003412:	d01c      	beq.n	800344e <LL_TIM_OC_EnablePreload+0x4a>
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	2b04      	cmp	r3, #4
 8003418:	d017      	beq.n	800344a <LL_TIM_OC_EnablePreload+0x46>
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	2b10      	cmp	r3, #16
 800341e:	d012      	beq.n	8003446 <LL_TIM_OC_EnablePreload+0x42>
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	2b40      	cmp	r3, #64	@ 0x40
 8003424:	d00d      	beq.n	8003442 <LL_TIM_OC_EnablePreload+0x3e>
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800342c:	d007      	beq.n	800343e <LL_TIM_OC_EnablePreload+0x3a>
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003434:	d101      	bne.n	800343a <LL_TIM_OC_EnablePreload+0x36>
 8003436:	2305      	movs	r3, #5
 8003438:	e00a      	b.n	8003450 <LL_TIM_OC_EnablePreload+0x4c>
 800343a:	2306      	movs	r3, #6
 800343c:	e008      	b.n	8003450 <LL_TIM_OC_EnablePreload+0x4c>
 800343e:	2304      	movs	r3, #4
 8003440:	e006      	b.n	8003450 <LL_TIM_OC_EnablePreload+0x4c>
 8003442:	2303      	movs	r3, #3
 8003444:	e004      	b.n	8003450 <LL_TIM_OC_EnablePreload+0x4c>
 8003446:	2302      	movs	r3, #2
 8003448:	e002      	b.n	8003450 <LL_TIM_OC_EnablePreload+0x4c>
 800344a:	2301      	movs	r3, #1
 800344c:	e000      	b.n	8003450 <LL_TIM_OC_EnablePreload+0x4c>
 800344e:	2300      	movs	r3, #0
 8003450:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	3318      	adds	r3, #24
 8003456:	4619      	mov	r1, r3
 8003458:	7bfb      	ldrb	r3, [r7, #15]
 800345a:	4a0a      	ldr	r2, [pc, #40]	@ (8003484 <LL_TIM_OC_EnablePreload+0x80>)
 800345c:	5cd3      	ldrb	r3, [r2, r3]
 800345e:	440b      	add	r3, r1
 8003460:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	7bfb      	ldrb	r3, [r7, #15]
 8003468:	4907      	ldr	r1, [pc, #28]	@ (8003488 <LL_TIM_OC_EnablePreload+0x84>)
 800346a:	5ccb      	ldrb	r3, [r1, r3]
 800346c:	4619      	mov	r1, r3
 800346e:	2308      	movs	r3, #8
 8003470:	408b      	lsls	r3, r1
 8003472:	431a      	orrs	r2, r3
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	601a      	str	r2, [r3, #0]
}
 8003478:	bf00      	nop
 800347a:	3714      	adds	r7, #20
 800347c:	46bd      	mov	sp, r7
 800347e:	bc80      	pop	{r7}
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	08009cec 	.word	0x08009cec
 8003488:	08009cf4 	.word	0x08009cf4

0800348c <LL_TIM_SetClockSource>:
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800349e:	f023 0307 	bic.w	r3, r3, #7
 80034a2:	683a      	ldr	r2, [r7, #0]
 80034a4:	431a      	orrs	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	609a      	str	r2, [r3, #8]
}
 80034aa:	bf00      	nop
 80034ac:	370c      	adds	r7, #12
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bc80      	pop	{r7}
 80034b2:	4770      	bx	lr

080034b4 <LL_TIM_SetTriggerOutput>:
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	431a      	orrs	r2, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	605a      	str	r2, [r3, #4]
}
 80034ce:	bf00      	nop
 80034d0:	370c      	adds	r7, #12
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bc80      	pop	{r7}
 80034d6:	4770      	bx	lr

080034d8 <LL_TIM_DisableMasterSlaveMode>:
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	609a      	str	r2, [r3, #8]
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bc80      	pop	{r7}
 80034f4:	4770      	bx	lr

080034f6 <LL_USART_Enable>:
{
 80034f6:	b480      	push	{r7}
 80034f8:	b083      	sub	sp, #12
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	60da      	str	r2, [r3, #12]
}
 800350a:	bf00      	nop
 800350c:	370c      	adds	r7, #12
 800350e:	46bd      	mov	sp, r7
 8003510:	bc80      	pop	{r7}
 8003512:	4770      	bx	lr

08003514 <LL_USART_ConfigAsyncMode>:
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	691b      	ldr	r3, [r3, #16]
 8003520:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	695b      	ldr	r3, [r3, #20]
 800352c:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	615a      	str	r2, [r3, #20]
}
 8003534:	bf00      	nop
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	bc80      	pop	{r7}
 800353c:	4770      	bx	lr

0800353e <LL_GPIO_ResetOutputPin>:
{
 800353e:	b480      	push	{r7}
 8003540:	b083      	sub	sp, #12
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]
 8003546:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	0a1b      	lsrs	r3, r3, #8
 800354c:	b29a      	uxth	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	615a      	str	r2, [r3, #20]
}
 8003552:	bf00      	nop
 8003554:	370c      	adds	r7, #12
 8003556:	46bd      	mov	sp, r7
 8003558:	bc80      	pop	{r7}
 800355a:	4770      	bx	lr

0800355c <LL_GPIO_AF_RemapPartial_TIM1>:
  * @rmtoll MAPR          TIM1_REMAP           LL_GPIO_AF_RemapPartial_TIM1
  * @note  PARTIAL: Partial remap (ETR/PA12, CH1/PA8, CH2/PA9,  CH3/PA10, CH4/PA11, BKIN/PA6,  CH1N/PA7,  CH2N/PB0,  CH3N/PB1)
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_RemapPartial_TIM1(void)
{
 800355c:	b480      	push	{r7}
 800355e:	af00      	add	r7, sp, #0
  MODIFY_REG(AFIO->MAPR, (AFIO_MAPR_TIM1_REMAP | AFIO_MAPR_SWJ_CFG), (AFIO_MAPR_TIM1_REMAP_PARTIALREMAP | AFIO_MAPR_SWJ_CFG));
 8003560:	4b07      	ldr	r3, [pc, #28]	@ (8003580 <LL_GPIO_AF_RemapPartial_TIM1+0x24>)
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8003568:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800356c:	4a04      	ldr	r2, [pc, #16]	@ (8003580 <LL_GPIO_AF_RemapPartial_TIM1+0x24>)
 800356e:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8003572:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003576:	6053      	str	r3, [r2, #4]
}
 8003578:	bf00      	nop
 800357a:	46bd      	mov	sp, r7
 800357c:	bc80      	pop	{r7}
 800357e:	4770      	bx	lr
 8003580:	40010000 	.word	0x40010000

08003584 <LL_GPIO_AF_Remap_SWJ_NOJTAG>:
  * @rmtoll MAPR          SWJ_CFG           LL_GPIO_AF_Remap_SWJ_NOJTAG
  * @note  NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_Remap_SWJ_NOJTAG(void)
{
 8003584:	b480      	push	{r7}
 8003586:	af00      	add	r7, sp, #0
  MODIFY_REG(AFIO->MAPR, AFIO_MAPR_SWJ_CFG, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 8003588:	4b05      	ldr	r3, [pc, #20]	@ (80035a0 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x1c>)
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8003590:	4a03      	ldr	r2, [pc, #12]	@ (80035a0 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x1c>)
 8003592:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003596:	6053      	str	r3, [r2, #4]
}
 8003598:	bf00      	nop
 800359a:	46bd      	mov	sp, r7
 800359c:	bc80      	pop	{r7}
 800359e:	4770      	bx	lr
 80035a0:	40010000 	.word	0x40010000

080035a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 80035a8:	2001      	movs	r0, #1
 80035aa:	f7ff fe91 	bl	80032d0 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80035ae:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 80035b2:	f7ff fe75 	bl	80032a0 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035b6:	2003      	movs	r0, #3
 80035b8:	f7ff fcd4 	bl	8002f64 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 80035bc:	f7ff fcf6 	bl	8002fac <__NVIC_GetPriorityGrouping>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2200      	movs	r2, #0
 80035c4:	210f      	movs	r1, #15
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7ff fd44 	bl	8003054 <NVIC_EncodePriority>
 80035cc:	4603      	mov	r3, r0
 80035ce:	4619      	mov	r1, r3
 80035d0:	f04f 30ff 	mov.w	r0, #4294967295
 80035d4:	f7ff fd14 	bl	8003000 <__NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  LL_GPIO_AF_Remap_SWJ_NOJTAG();
 80035d8:	f7ff ffd4 	bl	8003584 <LL_GPIO_AF_Remap_SWJ_NOJTAG>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80035dc:	f000 f824 	bl	8003628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80035e0:	f000 fa5a 	bl	8003a98 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80035e4:	f000 f98a 	bl	80038fc <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80035e8:	f000 f8b0 	bl	800374c <MX_TIM1_Init>
  MX_I2C1_Init();
 80035ec:	f000 f85a 	bl	80036a4 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80035f0:	f000 f9ec 	bl	80039cc <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80035f4:	f000 f942 	bl	800387c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // Initialize Application
  APP_COMMAND_Init();
 80035f8:	f7fd fe44 	bl	8001284 <APP_COMMAND_Init>
  APP_CONTROL_Init();
 80035fc:	f7fe f9bc 	bl	8001978 <APP_CONTROL_Init>
  APP_STATUS_LED_Init();
 8003600:	f7fe fc42 	bl	8001e88 <APP_STATUS_LED_Init>

  // Initialize Scheduler
  SCH_Initialize();
 8003604:	f001 fed0 	bl	80053a8 <SCH_Initialize>

  // Create Timer
  APP_STATUS_LED_CreateTimer();
 8003608:	f7fe fc6a 	bl	8001ee0 <APP_STATUS_LED_CreateTimer>

  // Create Task
  APP_COMMAND_CreateTask();
 800360c:	f7fd fe52 	bl	80012b4 <APP_COMMAND_CreateTask>
  APP_CONTROL_CreateTask();
 8003610:	f7fe fa1a 	bl	8001a48 <APP_CONTROL_CreateTask>
  APP_CHECK_INPUT_VOLTAGE_CreateTask();
 8003614:	f7fe f8ac 	bl	8001770 <APP_CHECK_INPUT_VOLTAGE_CreateTask>
  APP_STATUS_LED_CreateTask();
 8003618:	f7fe fc76 	bl	8001f08 <APP_STATUS_LED_CreateTask>

  SCH_StartScheduler();
 800361c:	f002 f86c 	bl	80056f8 <SCH_StartScheduler>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    SCH_HandleScheduledTask();
 8003620:	f002 f870 	bl	8005704 <SCH_HandleScheduledTask>
 8003624:	e7fc      	b.n	8003620 <main+0x7c>
	...

08003628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 800362c:	2002      	movs	r0, #2
 800362e:	f7ff fe67 	bl	8003300 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 8003632:	bf00      	nop
 8003634:	f7ff fe78 	bl	8003328 <LL_FLASH_GetLatency>
 8003638:	4603      	mov	r3, r0
 800363a:	2b02      	cmp	r3, #2
 800363c:	d1fa      	bne.n	8003634 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSE_Enable();
 800363e:	f7ff fd7b 	bl	8003138 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8003642:	bf00      	nop
 8003644:	f7ff fd86 	bl	8003154 <LL_RCC_HSE_IsReady>
 8003648:	4603      	mov	r3, r0
 800364a:	2b01      	cmp	r3, #1
 800364c:	d1fa      	bne.n	8003644 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_2, LL_RCC_PLL_MUL_15);
 800364e:	f44f 1150 	mov.w	r1, #3407872	@ 0x340000
 8003652:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8003656:	f7ff fe0b 	bl	8003270 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 800365a:	f7ff fde9 	bl	8003230 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 800365e:	bf00      	nop
 8003660:	f7ff fdf4 	bl	800324c <LL_RCC_PLL_IsReady>
 8003664:	4603      	mov	r3, r0
 8003666:	2b01      	cmp	r3, #1
 8003668:	d1fa      	bne.n	8003660 <SystemClock_Config+0x38>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800366a:	2000      	movs	r0, #0
 800366c:	f7ff fda4 	bl	80031b8 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8003670:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8003674:	f7ff fdb4 	bl	80031e0 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8003678:	2000      	movs	r0, #0
 800367a:	f7ff fdc5 	bl	8003208 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 800367e:	2002      	movs	r0, #2
 8003680:	f7ff fd7a 	bl	8003178 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8003684:	bf00      	nop
 8003686:	f7ff fd8b 	bl	80031a0 <LL_RCC_GetSysClkSource>
 800368a:	4603      	mov	r3, r0
 800368c:	2b08      	cmp	r3, #8
 800368e:	d1fa      	bne.n	8003686 <SystemClock_Config+0x5e>
  {

  }
  LL_Init1msTick(60000000);
 8003690:	4803      	ldr	r0, [pc, #12]	@ (80036a0 <SystemClock_Config+0x78>)
 8003692:	f001 fb85 	bl	8004da0 <LL_Init1msTick>
  LL_SetSystemCoreClock(60000000);
 8003696:	4802      	ldr	r0, [pc, #8]	@ (80036a0 <SystemClock_Config+0x78>)
 8003698:	f001 fbb4 	bl	8004e04 <LL_SetSystemCoreClock>
}
 800369c:	bf00      	nop
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	03938700 	.word	0x03938700

080036a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b08c      	sub	sp, #48	@ 0x30
 80036a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 80036aa:	f107 0318 	add.w	r3, r7, #24
 80036ae:	2200      	movs	r2, #0
 80036b0:	601a      	str	r2, [r3, #0]
 80036b2:	605a      	str	r2, [r3, #4]
 80036b4:	609a      	str	r2, [r3, #8]
 80036b6:	60da      	str	r2, [r3, #12]
 80036b8:	611a      	str	r2, [r3, #16]
 80036ba:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036bc:	1d3b      	adds	r3, r7, #4
 80036be:	2200      	movs	r2, #0
 80036c0:	601a      	str	r2, [r3, #0]
 80036c2:	605a      	str	r2, [r3, #4]
 80036c4:	609a      	str	r2, [r3, #8]
 80036c6:	60da      	str	r2, [r3, #12]
 80036c8:	611a      	str	r2, [r3, #16]

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 80036ca:	2008      	movs	r0, #8
 80036cc:	f7ff fe00 	bl	80032d0 <LL_APB2_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80036d0:	f24c 03c0 	movw	r3, #49344	@ 0xc0c0
 80036d4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80036d6:	2309      	movs	r3, #9
 80036d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80036da:	2303      	movs	r3, #3
 80036dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80036de:	2304      	movs	r3, #4
 80036e0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036e2:	1d3b      	adds	r3, r7, #4
 80036e4:	4619      	mov	r1, r3
 80036e6:	4816      	ldr	r0, [pc, #88]	@ (8003740 <MX_I2C1_Init+0x9c>)
 80036e8:	f000 fcda 	bl	80040a0 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 80036ec:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80036f0:	f7ff fdd6 	bl	80032a0 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C1_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C1);
 80036f4:	4813      	ldr	r0, [pc, #76]	@ (8003744 <MX_I2C1_Init+0xa0>)
 80036f6:	f7ff fd0f 	bl	8003118 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 80036fa:	4812      	ldr	r0, [pc, #72]	@ (8003744 <MX_I2C1_Init+0xa0>)
 80036fc:	f7ff fceb 	bl	80030d6 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8003700:	4810      	ldr	r0, [pc, #64]	@ (8003744 <MX_I2C1_Init+0xa0>)
 8003702:	f7ff fcd9 	bl	80030b8 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8003706:	2300      	movs	r3, #0
 8003708:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 400000;
 800370a:	4b0f      	ldr	r3, [pc, #60]	@ (8003748 <MX_I2C1_Init+0xa4>)
 800370c:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 800370e:	2300      	movs	r3, #0
 8003710:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 0;
 8003712:	2300      	movs	r3, #0
 8003714:	627b      	str	r3, [r7, #36]	@ 0x24
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8003716:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800371a:	62bb      	str	r3, [r7, #40]	@ 0x28
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 800371c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003720:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8003722:	f107 0318 	add.w	r3, r7, #24
 8003726:	4619      	mov	r1, r3
 8003728:	4806      	ldr	r0, [pc, #24]	@ (8003744 <MX_I2C1_Init+0xa0>)
 800372a:	f000 fe0f 	bl	800434c <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0);
 800372e:	2100      	movs	r1, #0
 8003730:	4804      	ldr	r0, [pc, #16]	@ (8003744 <MX_I2C1_Init+0xa0>)
 8003732:	f7ff fcdf 	bl	80030f4 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003736:	bf00      	nop
 8003738:	3730      	adds	r7, #48	@ 0x30
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	40010c00 	.word	0x40010c00
 8003744:	40005400 	.word	0x40005400
 8003748:	00061a80 	.word	0x00061a80

0800374c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b098      	sub	sp, #96	@ 0x60
 8003750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8003752:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003756:	2200      	movs	r2, #0
 8003758:	601a      	str	r2, [r3, #0]
 800375a:	605a      	str	r2, [r3, #4]
 800375c:	609a      	str	r2, [r3, #8]
 800375e:	60da      	str	r2, [r3, #12]
 8003760:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8003762:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003766:	2220      	movs	r2, #32
 8003768:	2100      	movs	r1, #0
 800376a:	4618      	mov	r0, r3
 800376c:	f003 fc65 	bl	800703a <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8003770:	f107 0314 	add.w	r3, r7, #20
 8003774:	2200      	movs	r2, #0
 8003776:	601a      	str	r2, [r3, #0]
 8003778:	605a      	str	r2, [r3, #4]
 800377a:	609a      	str	r2, [r3, #8]
 800377c:	60da      	str	r2, [r3, #12]
 800377e:	611a      	str	r2, [r3, #16]
 8003780:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003782:	463b      	mov	r3, r7
 8003784:	2200      	movs	r2, #0
 8003786:	601a      	str	r2, [r3, #0]
 8003788:	605a      	str	r2, [r3, #4]
 800378a:	609a      	str	r2, [r3, #8]
 800378c:	60da      	str	r2, [r3, #12]
 800378e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8003790:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8003794:	f7ff fd9c 	bl	80032d0 <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8003798:	2300      	movs	r3, #0
 800379a:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800379e:	2300      	movs	r3, #0
 80037a0:	653b      	str	r3, [r7, #80]	@ 0x50
  TIM_InitStruct.Autoreload = 65535;
 80037a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80037a6:	657b      	str	r3, [r7, #84]	@ 0x54
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80037a8:	2300      	movs	r3, #0
 80037aa:	65bb      	str	r3, [r7, #88]	@ 0x58
  TIM_InitStruct.RepetitionCounter = 0;
 80037ac:	2300      	movs	r3, #0
 80037ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 80037b0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80037b4:	4619      	mov	r1, r3
 80037b6:	482e      	ldr	r0, [pc, #184]	@ (8003870 <MX_TIM1_Init+0x124>)
 80037b8:	f000 ff76 	bl	80046a8 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 80037bc:	482c      	ldr	r0, [pc, #176]	@ (8003870 <MX_TIM1_Init+0x124>)
 80037be:	f7ff fdce 	bl	800335e <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 80037c2:	2100      	movs	r1, #0
 80037c4:	482a      	ldr	r0, [pc, #168]	@ (8003870 <MX_TIM1_Init+0x124>)
 80037c6:	f7ff fe61 	bl	800348c <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 80037ca:	2101      	movs	r1, #1
 80037cc:	4828      	ldr	r0, [pc, #160]	@ (8003870 <MX_TIM1_Init+0x124>)
 80037ce:	f7ff fe19 	bl	8003404 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80037d2:	2360      	movs	r3, #96	@ 0x60
 80037d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80037d6:	2300      	movs	r3, #0
 80037d8:	633b      	str	r3, [r7, #48]	@ 0x30
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80037da:	2300      	movs	r3, #0
 80037dc:	637b      	str	r3, [r7, #52]	@ 0x34
  TIM_OC_InitStruct.CompareValue = 0;
 80037de:	2300      	movs	r3, #0
 80037e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80037e2:	2300      	movs	r3, #0
 80037e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 80037e6:	2300      	movs	r3, #0
 80037e8:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 80037ea:	2300      	movs	r3, #0
 80037ec:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 80037ee:	2300      	movs	r3, #0
 80037f0:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80037f2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80037f6:	461a      	mov	r2, r3
 80037f8:	2101      	movs	r1, #1
 80037fa:	481d      	ldr	r0, [pc, #116]	@ (8003870 <MX_TIM1_Init+0x124>)
 80037fc:	f000 ffb2 	bl	8004764 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 8003800:	2101      	movs	r1, #1
 8003802:	481b      	ldr	r0, [pc, #108]	@ (8003870 <MX_TIM1_Init+0x124>)
 8003804:	f7ff fdba 	bl	800337c <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8003808:	2100      	movs	r1, #0
 800380a:	4819      	ldr	r0, [pc, #100]	@ (8003870 <MX_TIM1_Init+0x124>)
 800380c:	f7ff fe52 	bl	80034b4 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8003810:	4817      	ldr	r0, [pc, #92]	@ (8003870 <MX_TIM1_Init+0x124>)
 8003812:	f7ff fe61 	bl	80034d8 <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8003816:	2300      	movs	r3, #0
 8003818:	617b      	str	r3, [r7, #20]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 800381a:	2300      	movs	r3, #0
 800381c:	61bb      	str	r3, [r7, #24]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 800381e:	2300      	movs	r3, #0
 8003820:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.DeadTime = 84;
 8003822:	2354      	movs	r3, #84	@ 0x54
 8003824:	f887 3020 	strb.w	r3, [r7, #32]
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8003828:	2300      	movs	r3, #0
 800382a:	847b      	strh	r3, [r7, #34]	@ 0x22
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 800382c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003830:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8003832:	2300      	movs	r3, #0
 8003834:	62bb      	str	r3, [r7, #40]	@ 0x28
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8003836:	f107 0314 	add.w	r3, r7, #20
 800383a:	4619      	mov	r1, r3
 800383c:	480c      	ldr	r0, [pc, #48]	@ (8003870 <MX_TIM1_Init+0x124>)
 800383e:	f000 ffd2 	bl	80047e6 <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8003842:	2004      	movs	r0, #4
 8003844:	f7ff fd44 	bl	80032d0 <LL_APB2_GRP1_EnableClock>
  /**TIM1 GPIO Configuration
  PA7   ------> TIM1_CH1N
  PA8   ------> TIM1_CH1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7|LL_GPIO_PIN_8;
 8003848:	4b0a      	ldr	r3, [pc, #40]	@ (8003874 <MX_TIM1_Init+0x128>)
 800384a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800384c:	2309      	movs	r3, #9
 800384e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003850:	2302      	movs	r3, #2
 8003852:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003854:	2300      	movs	r3, #0
 8003856:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003858:	463b      	mov	r3, r7
 800385a:	4619      	mov	r1, r3
 800385c:	4806      	ldr	r0, [pc, #24]	@ (8003878 <MX_TIM1_Init+0x12c>)
 800385e:	f000 fc1f 	bl	80040a0 <LL_GPIO_Init>

  LL_GPIO_AF_RemapPartial_TIM1();
 8003862:	f7ff fe7b 	bl	800355c <LL_GPIO_AF_RemapPartial_TIM1>

}
 8003866:	bf00      	nop
 8003868:	3760      	adds	r7, #96	@ 0x60
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	40012c00 	.word	0x40012c00
 8003874:	04018081 	.word	0x04018081
 8003878:	40010800 	.word	0x40010800

0800387c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b086      	sub	sp, #24
 8003880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8003882:	1d3b      	adds	r3, r7, #4
 8003884:	2200      	movs	r2, #0
 8003886:	601a      	str	r2, [r3, #0]
 8003888:	605a      	str	r2, [r3, #4]
 800388a:	609a      	str	r2, [r3, #8]
 800388c:	60da      	str	r2, [r3, #12]
 800388e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8003890:	2002      	movs	r0, #2
 8003892:	f7ff fd05 	bl	80032a0 <LL_APB1_GRP1_EnableClock>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8003896:	f7ff fb89 	bl	8002fac <__NVIC_GetPriorityGrouping>
 800389a:	4603      	mov	r3, r0
 800389c:	2200      	movs	r2, #0
 800389e:	2101      	movs	r1, #1
 80038a0:	4618      	mov	r0, r3
 80038a2:	f7ff fbd7 	bl	8003054 <NVIC_EncodePriority>
 80038a6:	4603      	mov	r3, r0
 80038a8:	4619      	mov	r1, r3
 80038aa:	201d      	movs	r0, #29
 80038ac:	f7ff fba8 	bl	8003000 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 80038b0:	201d      	movs	r0, #29
 80038b2:	f7ff fb89 	bl	8002fc8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 59;
 80038b6:	233b      	movs	r3, #59	@ 0x3b
 80038b8:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80038ba:	2300      	movs	r3, #0
 80038bc:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 499;
 80038be:	f240 13f3 	movw	r3, #499	@ 0x1f3
 80038c2:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80038c4:	2300      	movs	r3, #0
 80038c6:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 80038c8:	1d3b      	adds	r3, r7, #4
 80038ca:	4619      	mov	r1, r3
 80038cc:	480a      	ldr	r0, [pc, #40]	@ (80038f8 <MX_TIM3_Init+0x7c>)
 80038ce:	f000 feeb 	bl	80046a8 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM3);
 80038d2:	4809      	ldr	r0, [pc, #36]	@ (80038f8 <MX_TIM3_Init+0x7c>)
 80038d4:	f7ff fd34 	bl	8003340 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 80038d8:	2100      	movs	r1, #0
 80038da:	4807      	ldr	r0, [pc, #28]	@ (80038f8 <MX_TIM3_Init+0x7c>)
 80038dc:	f7ff fdd6 	bl	800348c <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 80038e0:	2100      	movs	r1, #0
 80038e2:	4805      	ldr	r0, [pc, #20]	@ (80038f8 <MX_TIM3_Init+0x7c>)
 80038e4:	f7ff fde6 	bl	80034b4 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 80038e8:	4803      	ldr	r0, [pc, #12]	@ (80038f8 <MX_TIM3_Init+0x7c>)
 80038ea:	f7ff fdf5 	bl	80034d8 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80038ee:	bf00      	nop
 80038f0:	3718      	adds	r7, #24
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	40000400 	.word	0x40000400

080038fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b08c      	sub	sp, #48	@ 0x30
 8003900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8003902:	f107 0314 	add.w	r3, r7, #20
 8003906:	2200      	movs	r2, #0
 8003908:	601a      	str	r2, [r3, #0]
 800390a:	605a      	str	r2, [r3, #4]
 800390c:	609a      	str	r2, [r3, #8]
 800390e:	60da      	str	r2, [r3, #12]
 8003910:	611a      	str	r2, [r3, #16]
 8003912:	615a      	str	r2, [r3, #20]
 8003914:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003916:	463b      	mov	r3, r7
 8003918:	2200      	movs	r2, #0
 800391a:	601a      	str	r2, [r3, #0]
 800391c:	605a      	str	r2, [r3, #4]
 800391e:	609a      	str	r2, [r3, #8]
 8003920:	60da      	str	r2, [r3, #12]
 8003922:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8003924:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003928:	f7ff fcd2 	bl	80032d0 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 800392c:	2004      	movs	r0, #4
 800392e:	f7ff fccf 	bl	80032d0 <LL_APB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8003932:	4b22      	ldr	r3, [pc, #136]	@ (80039bc <MX_USART1_UART_Init+0xc0>)
 8003934:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003936:	2309      	movs	r3, #9
 8003938:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800393a:	2303      	movs	r3, #3
 800393c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800393e:	2300      	movs	r3, #0
 8003940:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003942:	463b      	mov	r3, r7
 8003944:	4619      	mov	r1, r3
 8003946:	481e      	ldr	r0, [pc, #120]	@ (80039c0 <MX_USART1_UART_Init+0xc4>)
 8003948:	f000 fbaa 	bl	80040a0 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 800394c:	4b1d      	ldr	r3, [pc, #116]	@ (80039c4 <MX_USART1_UART_Init+0xc8>)
 800394e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8003950:	2304      	movs	r3, #4
 8003952:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003954:	463b      	mov	r3, r7
 8003956:	4619      	mov	r1, r3
 8003958:	4819      	ldr	r0, [pc, #100]	@ (80039c0 <MX_USART1_UART_Init+0xc4>)
 800395a:	f000 fba1 	bl	80040a0 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 800395e:	f7ff fb25 	bl	8002fac <__NVIC_GetPriorityGrouping>
 8003962:	4603      	mov	r3, r0
 8003964:	2200      	movs	r2, #0
 8003966:	2102      	movs	r1, #2
 8003968:	4618      	mov	r0, r3
 800396a:	f7ff fb73 	bl	8003054 <NVIC_EncodePriority>
 800396e:	4603      	mov	r3, r0
 8003970:	4619      	mov	r1, r3
 8003972:	2025      	movs	r0, #37	@ 0x25
 8003974:	f7ff fb44 	bl	8003000 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8003978:	2025      	movs	r0, #37	@ 0x25
 800397a:	f7ff fb25 	bl	8002fc8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800397e:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8003982:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8003984:	2300      	movs	r3, #0
 8003986:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8003988:	2300      	movs	r3, #0
 800398a:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800398c:	2300      	movs	r3, #0
 800398e:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8003990:	230c      	movs	r3, #12
 8003992:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8003994:	2300      	movs	r3, #0
 8003996:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8003998:	2300      	movs	r3, #0
 800399a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_USART_Init(USART1, &USART_InitStruct);
 800399c:	f107 0314 	add.w	r3, r7, #20
 80039a0:	4619      	mov	r1, r3
 80039a2:	4809      	ldr	r0, [pc, #36]	@ (80039c8 <MX_USART1_UART_Init+0xcc>)
 80039a4:	f001 f982 	bl	8004cac <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 80039a8:	4807      	ldr	r0, [pc, #28]	@ (80039c8 <MX_USART1_UART_Init+0xcc>)
 80039aa:	f7ff fdb3 	bl	8003514 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 80039ae:	4806      	ldr	r0, [pc, #24]	@ (80039c8 <MX_USART1_UART_Init+0xcc>)
 80039b0:	f7ff fda1 	bl	80034f6 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80039b4:	bf00      	nop
 80039b6:	3730      	adds	r7, #48	@ 0x30
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	04020002 	.word	0x04020002
 80039c0:	40010800 	.word	0x40010800
 80039c4:	04040004 	.word	0x04040004
 80039c8:	40013800 	.word	0x40013800

080039cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b08c      	sub	sp, #48	@ 0x30
 80039d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80039d2:	f107 0314 	add.w	r3, r7, #20
 80039d6:	2200      	movs	r2, #0
 80039d8:	601a      	str	r2, [r3, #0]
 80039da:	605a      	str	r2, [r3, #4]
 80039dc:	609a      	str	r2, [r3, #8]
 80039de:	60da      	str	r2, [r3, #12]
 80039e0:	611a      	str	r2, [r3, #16]
 80039e2:	615a      	str	r2, [r3, #20]
 80039e4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039e6:	463b      	mov	r3, r7
 80039e8:	2200      	movs	r2, #0
 80039ea:	601a      	str	r2, [r3, #0]
 80039ec:	605a      	str	r2, [r3, #4]
 80039ee:	609a      	str	r2, [r3, #8]
 80039f0:	60da      	str	r2, [r3, #12]
 80039f2:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 80039f4:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80039f8:	f7ff fc52 	bl	80032a0 <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80039fc:	2004      	movs	r0, #4
 80039fe:	f7ff fc67 	bl	80032d0 <LL_APB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8003a02:	f240 4304 	movw	r3, #1028	@ 0x404
 8003a06:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003a08:	2309      	movs	r3, #9
 8003a0a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003a10:	2300      	movs	r3, #0
 8003a12:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a14:	463b      	mov	r3, r7
 8003a16:	4619      	mov	r1, r3
 8003a18:	481d      	ldr	r0, [pc, #116]	@ (8003a90 <MX_USART2_UART_Init+0xc4>)
 8003a1a:	f000 fb41 	bl	80040a0 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8003a1e:	f640 0308 	movw	r3, #2056	@ 0x808
 8003a22:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8003a24:	2304      	movs	r3, #4
 8003a26:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a28:	463b      	mov	r3, r7
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	4818      	ldr	r0, [pc, #96]	@ (8003a90 <MX_USART2_UART_Init+0xc4>)
 8003a2e:	f000 fb37 	bl	80040a0 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 8003a32:	f7ff fabb 	bl	8002fac <__NVIC_GetPriorityGrouping>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2200      	movs	r2, #0
 8003a3a:	2102      	movs	r1, #2
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f7ff fb09 	bl	8003054 <NVIC_EncodePriority>
 8003a42:	4603      	mov	r3, r0
 8003a44:	4619      	mov	r1, r3
 8003a46:	2026      	movs	r0, #38	@ 0x26
 8003a48:	f7ff fada 	bl	8003000 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8003a4c:	2026      	movs	r0, #38	@ 0x26
 8003a4e:	f7ff fabb 	bl	8002fc8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8003a52:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8003a56:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8003a60:	2300      	movs	r3, #0
 8003a62:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8003a64:	230c      	movs	r3, #12
 8003a66:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_USART_Init(USART2, &USART_InitStruct);
 8003a70:	f107 0314 	add.w	r3, r7, #20
 8003a74:	4619      	mov	r1, r3
 8003a76:	4807      	ldr	r0, [pc, #28]	@ (8003a94 <MX_USART2_UART_Init+0xc8>)
 8003a78:	f001 f918 	bl	8004cac <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8003a7c:	4805      	ldr	r0, [pc, #20]	@ (8003a94 <MX_USART2_UART_Init+0xc8>)
 8003a7e:	f7ff fd49 	bl	8003514 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8003a82:	4804      	ldr	r0, [pc, #16]	@ (8003a94 <MX_USART2_UART_Init+0xc8>)
 8003a84:	f7ff fd37 	bl	80034f6 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003a88:	bf00      	nop
 8003a8a:	3730      	adds	r7, #48	@ 0x30
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	40010800 	.word	0x40010800
 8003a94:	40004400 	.word	0x40004400

08003a98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b086      	sub	sp, #24
 8003a9c:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a9e:	1d3b      	adds	r3, r7, #4
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	601a      	str	r2, [r3, #0]
 8003aa4:	605a      	str	r2, [r3, #4]
 8003aa6:	609a      	str	r2, [r3, #8]
 8003aa8:	60da      	str	r2, [r3, #12]
 8003aaa:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 8003aac:	2020      	movs	r0, #32
 8003aae:	f7ff fc0f 	bl	80032d0 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8003ab2:	2004      	movs	r0, #4
 8003ab4:	f7ff fc0c 	bl	80032d0 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8003ab8:	2008      	movs	r0, #8
 8003aba:	f7ff fc09 	bl	80032d0 <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, PFC_ON_OFF_Pin|LED_TEST_Pin);
 8003abe:	f244 2142 	movw	r1, #16962	@ 0x4242
 8003ac2:	4813      	ldr	r0, [pc, #76]	@ (8003b10 <MX_GPIO_Init+0x78>)
 8003ac4:	f7ff fd3b 	bl	800353e <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LED_WAIT_Pin|LED_SOFT_START_Pin|LED_PROCESS_Pin|VOLTAGE_PROTECTION_Pin
 8003ac8:	4912      	ldr	r1, [pc, #72]	@ (8003b14 <MX_GPIO_Init+0x7c>)
 8003aca:	4813      	ldr	r0, [pc, #76]	@ (8003b18 <MX_GPIO_Init+0x80>)
 8003acc:	f7ff fd37 	bl	800353e <LL_GPIO_ResetOutputPin>
                          |RS485_CONTROL_Pin);

  /**/
  GPIO_InitStruct.Pin = PFC_ON_OFF_Pin|LED_TEST_Pin;
 8003ad0:	f244 2342 	movw	r3, #16962	@ 0x4242
 8003ad4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003ada:	2302      	movs	r3, #2
 8003adc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ae2:	1d3b      	adds	r3, r7, #4
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	480a      	ldr	r0, [pc, #40]	@ (8003b10 <MX_GPIO_Init+0x78>)
 8003ae8:	f000 fada 	bl	80040a0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_WAIT_Pin|LED_SOFT_START_Pin|LED_PROCESS_Pin|VOLTAGE_PROTECTION_Pin
 8003aec:	4b09      	ldr	r3, [pc, #36]	@ (8003b14 <MX_GPIO_Init+0x7c>)
 8003aee:	607b      	str	r3, [r7, #4]
                          |RS485_CONTROL_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8003af0:	2301      	movs	r3, #1
 8003af2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003af4:	2302      	movs	r3, #2
 8003af6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003af8:	2300      	movs	r3, #0
 8003afa:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003afc:	1d3b      	adds	r3, r7, #4
 8003afe:	4619      	mov	r1, r3
 8003b00:	4805      	ldr	r0, [pc, #20]	@ (8003b18 <MX_GPIO_Init+0x80>)
 8003b02:	f000 facd 	bl	80040a0 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003b06:	bf00      	nop
 8003b08:	3718      	adds	r7, #24
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	40010800 	.word	0x40010800
 8003b14:	04300737 	.word	0x04300737
 8003b18:	40010c00 	.word	0x40010c00

08003b1c <BSP_BOARD_TimeOut>:
   *   PUBLIC FUNCTION
   *********************/

  // Call Function in "SysTick ISR"
  static inline void BSP_BOARD_TimeOut (void)
  {
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	af00      	add	r7, sp, #0
    BSP_UART_TimeOut();
 8003b20:	f7ff f994 	bl	8002e4c <BSP_UART_TimeOut>
    BSP_I2C_TimeOut();
 8003b24:	f7fe fc8e 	bl	8002444 <BSP_I2C_TimeOut>
  }
 8003b28:	bf00      	nop
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003b30:	bf00      	nop
 8003b32:	e7fd      	b.n	8003b30 <NMI_Handler+0x4>

08003b34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b34:	b480      	push	{r7}
 8003b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b38:	bf00      	nop
 8003b3a:	e7fd      	b.n	8003b38 <HardFault_Handler+0x4>

08003b3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b40:	bf00      	nop
 8003b42:	e7fd      	b.n	8003b40 <MemManage_Handler+0x4>

08003b44 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b44:	b480      	push	{r7}
 8003b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b48:	bf00      	nop
 8003b4a:	e7fd      	b.n	8003b48 <BusFault_Handler+0x4>

08003b4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b50:	bf00      	nop
 8003b52:	e7fd      	b.n	8003b50 <UsageFault_Handler+0x4>

08003b54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b54:	b480      	push	{r7}
 8003b56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b58:	bf00      	nop
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bc80      	pop	{r7}
 8003b5e:	4770      	bx	lr

08003b60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b60:	b480      	push	{r7}
 8003b62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b64:	bf00      	nop
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bc80      	pop	{r7}
 8003b6a:	4770      	bx	lr

08003b6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b70:	bf00      	nop
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bc80      	pop	{r7}
 8003b76:	4770      	bx	lr

08003b78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  BSP_BOARD_TimeOut();
 8003b7c:	f7ff ffce 	bl	8003b1c <BSP_BOARD_TimeOut>
  APP_CONTROL_TimeWaitDischarging();
 8003b80:	f7fe f8ca 	bl	8001d18 <APP_CONTROL_TimeWaitDischarging>
  SCH_RunSystemTickTimer();
 8003b84:	f001 fd24 	bl	80055d0 <SCH_RunSystemTickTimer>
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b88:	bf00      	nop
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  SCH_TASK_EnableTask(2);
 8003b90:	2002      	movs	r0, #2
 8003b92:	f001 fc33 	bl	80053fc <SCH_TASK_EnableTask>
  /* USER CODE END TIM3_IRQn 0 */
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003b96:	bf00      	nop
 8003b98:	bd80      	pop	{r7, pc}
	...

08003b9c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  BSP_UART_ISR((uart_cfg_t *)p_uart1);
 8003ba0:	4b03      	ldr	r3, [pc, #12]	@ (8003bb0 <USART1_IRQHandler+0x14>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f7ff f963 	bl	8002e70 <BSP_UART_ISR>
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003baa:	bf00      	nop
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	200000d0 	.word	0x200000d0

08003bb4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	af00      	add	r7, sp, #0

  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003bb8:	bf00      	nop
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bc80      	pop	{r7}
 8003bbe:	4770      	bx	lr

08003bc0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	af00      	add	r7, sp, #0
  return 1;
 8003bc4:	2301      	movs	r3, #1
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bc80      	pop	{r7}
 8003bcc:	4770      	bx	lr

08003bce <_kill>:

int _kill(int pid, int sig)
{
 8003bce:	b580      	push	{r7, lr}
 8003bd0:	b082      	sub	sp, #8
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
 8003bd6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003bd8:	f003 faa4 	bl	8007124 <__errno>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2216      	movs	r2, #22
 8003be0:	601a      	str	r2, [r3, #0]
  return -1;
 8003be2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3708      	adds	r7, #8
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}

08003bee <_exit>:

void _exit (int status)
{
 8003bee:	b580      	push	{r7, lr}
 8003bf0:	b082      	sub	sp, #8
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003bf6:	f04f 31ff 	mov.w	r1, #4294967295
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f7ff ffe7 	bl	8003bce <_kill>
  while (1) {}    /* Make sure we hang here */
 8003c00:	bf00      	nop
 8003c02:	e7fd      	b.n	8003c00 <_exit+0x12>

08003c04 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b086      	sub	sp, #24
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c10:	2300      	movs	r3, #0
 8003c12:	617b      	str	r3, [r7, #20]
 8003c14:	e00a      	b.n	8003c2c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003c16:	f3af 8000 	nop.w
 8003c1a:	4601      	mov	r1, r0
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	1c5a      	adds	r2, r3, #1
 8003c20:	60ba      	str	r2, [r7, #8]
 8003c22:	b2ca      	uxtb	r2, r1
 8003c24:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	3301      	adds	r3, #1
 8003c2a:	617b      	str	r3, [r7, #20]
 8003c2c:	697a      	ldr	r2, [r7, #20]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	dbf0      	blt.n	8003c16 <_read+0x12>
  }

  return len;
 8003c34:	687b      	ldr	r3, [r7, #4]
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3718      	adds	r7, #24
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003c3e:	b580      	push	{r7, lr}
 8003c40:	b086      	sub	sp, #24
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	60f8      	str	r0, [r7, #12]
 8003c46:	60b9      	str	r1, [r7, #8]
 8003c48:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	617b      	str	r3, [r7, #20]
 8003c4e:	e009      	b.n	8003c64 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	1c5a      	adds	r2, r3, #1
 8003c54:	60ba      	str	r2, [r7, #8]
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	3301      	adds	r3, #1
 8003c62:	617b      	str	r3, [r7, #20]
 8003c64:	697a      	ldr	r2, [r7, #20]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	dbf1      	blt.n	8003c50 <_write+0x12>
  }
  return len;
 8003c6c:	687b      	ldr	r3, [r7, #4]
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3718      	adds	r7, #24
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}

08003c76 <_close>:

int _close(int file)
{
 8003c76:	b480      	push	{r7}
 8003c78:	b083      	sub	sp, #12
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003c7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	370c      	adds	r7, #12
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bc80      	pop	{r7}
 8003c8a:	4770      	bx	lr

08003c8c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003c9c:	605a      	str	r2, [r3, #4]
  return 0;
 8003c9e:	2300      	movs	r3, #0
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bc80      	pop	{r7}
 8003ca8:	4770      	bx	lr

08003caa <_isatty>:

int _isatty(int file)
{
 8003caa:	b480      	push	{r7}
 8003cac:	b083      	sub	sp, #12
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003cb2:	2301      	movs	r3, #1
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bc80      	pop	{r7}
 8003cbc:	4770      	bx	lr

08003cbe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003cbe:	b480      	push	{r7}
 8003cc0:	b085      	sub	sp, #20
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	60f8      	str	r0, [r7, #12]
 8003cc6:	60b9      	str	r1, [r7, #8]
 8003cc8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003cca:	2300      	movs	r3, #0
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3714      	adds	r7, #20
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bc80      	pop	{r7}
 8003cd4:	4770      	bx	lr
	...

08003cd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b086      	sub	sp, #24
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ce0:	4a14      	ldr	r2, [pc, #80]	@ (8003d34 <_sbrk+0x5c>)
 8003ce2:	4b15      	ldr	r3, [pc, #84]	@ (8003d38 <_sbrk+0x60>)
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003cec:	4b13      	ldr	r3, [pc, #76]	@ (8003d3c <_sbrk+0x64>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d102      	bne.n	8003cfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003cf4:	4b11      	ldr	r3, [pc, #68]	@ (8003d3c <_sbrk+0x64>)
 8003cf6:	4a12      	ldr	r2, [pc, #72]	@ (8003d40 <_sbrk+0x68>)
 8003cf8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003cfa:	4b10      	ldr	r3, [pc, #64]	@ (8003d3c <_sbrk+0x64>)
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4413      	add	r3, r2
 8003d02:	693a      	ldr	r2, [r7, #16]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d207      	bcs.n	8003d18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d08:	f003 fa0c 	bl	8007124 <__errno>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	220c      	movs	r2, #12
 8003d10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d12:	f04f 33ff 	mov.w	r3, #4294967295
 8003d16:	e009      	b.n	8003d2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d18:	4b08      	ldr	r3, [pc, #32]	@ (8003d3c <_sbrk+0x64>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d1e:	4b07      	ldr	r3, [pc, #28]	@ (8003d3c <_sbrk+0x64>)
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4413      	add	r3, r2
 8003d26:	4a05      	ldr	r2, [pc, #20]	@ (8003d3c <_sbrk+0x64>)
 8003d28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3718      	adds	r7, #24
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	20005000 	.word	0x20005000
 8003d38:	00000400 	.word	0x00000400
 8003d3c:	200004f8 	.word	0x200004f8
 8003d40:	200006c8 	.word	0x200006c8

08003d44 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003d44:	b480      	push	{r7}
 8003d46:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003d48:	bf00      	nop
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bc80      	pop	{r7}
 8003d4e:	4770      	bx	lr

08003d50 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003d50:	f7ff fff8 	bl	8003d44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003d54:	480b      	ldr	r0, [pc, #44]	@ (8003d84 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003d56:	490c      	ldr	r1, [pc, #48]	@ (8003d88 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003d58:	4a0c      	ldr	r2, [pc, #48]	@ (8003d8c <LoopFillZerobss+0x16>)
  movs r3, #0
 8003d5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d5c:	e002      	b.n	8003d64 <LoopCopyDataInit>

08003d5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d62:	3304      	adds	r3, #4

08003d64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d68:	d3f9      	bcc.n	8003d5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d6a:	4a09      	ldr	r2, [pc, #36]	@ (8003d90 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003d6c:	4c09      	ldr	r4, [pc, #36]	@ (8003d94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003d6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d70:	e001      	b.n	8003d76 <LoopFillZerobss>

08003d72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d74:	3204      	adds	r2, #4

08003d76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d78:	d3fb      	bcc.n	8003d72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003d7a:	f003 f9d9 	bl	8007130 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003d7e:	f7ff fc11 	bl	80035a4 <main>
  bx lr
 8003d82:	4770      	bx	lr
  ldr r0, =_sdata
 8003d84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d88:	200002b4 	.word	0x200002b4
  ldr r2, =_sidata
 8003d8c:	0800a9d0 	.word	0x0800a9d0
  ldr r2, =_sbss
 8003d90:	200002b4 	.word	0x200002b4
  ldr r4, =_ebss
 8003d94:	200006c8 	.word	0x200006c8

08003d98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003d98:	e7fe      	b.n	8003d98 <ADC1_2_IRQHandler>
	...

08003d9c <ADS1115_GetData>:
 * @return The data reading from the specified channel. If a timeout occurs,
 * returns 0.
 */
uint16_t
ADS1115_GetData (ads1115_channel_t channel)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b082      	sub	sp, #8
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	4603      	mov	r3, r0
 8003da4:	71fb      	strb	r3, [r7, #7]
  i2c_1.buffer[0] = 0x01;
 8003da6:	4b3b      	ldr	r3, [pc, #236]	@ (8003e94 <ADS1115_GetData+0xf8>)
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	701a      	strb	r2, [r3, #0]
  switch (channel)
 8003dae:	79fb      	ldrb	r3, [r7, #7]
 8003db0:	2b03      	cmp	r3, #3
 8003db2:	d823      	bhi.n	8003dfc <ADS1115_GetData+0x60>
 8003db4:	a201      	add	r2, pc, #4	@ (adr r2, 8003dbc <ADS1115_GetData+0x20>)
 8003db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dba:	bf00      	nop
 8003dbc:	08003dcd 	.word	0x08003dcd
 8003dc0:	08003dd9 	.word	0x08003dd9
 8003dc4:	08003de5 	.word	0x08003de5
 8003dc8:	08003df1 	.word	0x08003df1
  {
    case DEV_ADS1115_CHANNEL_0:
      i2c_1.buffer[1] = 0xC1;
 8003dcc:	4b31      	ldr	r3, [pc, #196]	@ (8003e94 <ADS1115_GetData+0xf8>)
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	22c1      	movs	r2, #193	@ 0xc1
 8003dd4:	701a      	strb	r2, [r3, #0]
      break;
 8003dd6:	e011      	b.n	8003dfc <ADS1115_GetData+0x60>
    case DEV_ADS1115_CHANNEL_1:
      i2c_1.buffer[1] = 0xD1;
 8003dd8:	4b2e      	ldr	r3, [pc, #184]	@ (8003e94 <ADS1115_GetData+0xf8>)
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	3301      	adds	r3, #1
 8003dde:	22d1      	movs	r2, #209	@ 0xd1
 8003de0:	701a      	strb	r2, [r3, #0]
      break;
 8003de2:	e00b      	b.n	8003dfc <ADS1115_GetData+0x60>
    case DEV_ADS1115_CHANNEL_2:
      i2c_1.buffer[1] = 0xE1;
 8003de4:	4b2b      	ldr	r3, [pc, #172]	@ (8003e94 <ADS1115_GetData+0xf8>)
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	3301      	adds	r3, #1
 8003dea:	22e1      	movs	r2, #225	@ 0xe1
 8003dec:	701a      	strb	r2, [r3, #0]
      break;
 8003dee:	e005      	b.n	8003dfc <ADS1115_GetData+0x60>
    case DEV_ADS1115_CHANNEL_3:
      i2c_1.buffer[1] = 0xF1;
 8003df0:	4b28      	ldr	r3, [pc, #160]	@ (8003e94 <ADS1115_GetData+0xf8>)
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	3301      	adds	r3, #1
 8003df6:	22f1      	movs	r2, #241	@ 0xf1
 8003df8:	701a      	strb	r2, [r3, #0]
      break;
 8003dfa:	bf00      	nop
  }

  i2c_1.buffer[0]   = 0x83;
 8003dfc:	4b25      	ldr	r3, [pc, #148]	@ (8003e94 <ADS1115_GetData+0xf8>)
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	2283      	movs	r2, #131	@ 0x83
 8003e02:	701a      	strb	r2, [r3, #0]
  i2c_1.size_buffer = 3;
 8003e04:	4b23      	ldr	r3, [pc, #140]	@ (8003e94 <ADS1115_GetData+0xf8>)
 8003e06:	2203      	movs	r2, #3
 8003e08:	609a      	str	r2, [r3, #8]
  BSP_I2C_MasterTransmit7B((i2c_data_t *)&i2c_1);
 8003e0a:	4822      	ldr	r0, [pc, #136]	@ (8003e94 <ADS1115_GetData+0xf8>)
 8003e0c:	f7fe fa2a 	bl	8002264 <BSP_I2C_MasterTransmit7B>
  if (i2c_1.status == I2C_TIMEOUT)
 8003e10:	4b20      	ldr	r3, [pc, #128]	@ (8003e94 <ADS1115_GetData+0xf8>)
 8003e12:	7b1b      	ldrb	r3, [r3, #12]
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d101      	bne.n	8003e1e <ADS1115_GetData+0x82>
  {
    return 0;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	e035      	b.n	8003e8a <ADS1115_GetData+0xee>
  }

  i2c_1.buffer[0]   = 0x00;
 8003e1e:	4b1d      	ldr	r3, [pc, #116]	@ (8003e94 <ADS1115_GetData+0xf8>)
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	701a      	strb	r2, [r3, #0]
  i2c_1.size_buffer = 1;
 8003e26:	4b1b      	ldr	r3, [pc, #108]	@ (8003e94 <ADS1115_GetData+0xf8>)
 8003e28:	2201      	movs	r2, #1
 8003e2a:	609a      	str	r2, [r3, #8]
  BSP_I2C_MasterTransmit7B((i2c_data_t *)&i2c_1);
 8003e2c:	4819      	ldr	r0, [pc, #100]	@ (8003e94 <ADS1115_GetData+0xf8>)
 8003e2e:	f7fe fa19 	bl	8002264 <BSP_I2C_MasterTransmit7B>
  if (i2c_1.status == I2C_TIMEOUT)
 8003e32:	4b18      	ldr	r3, [pc, #96]	@ (8003e94 <ADS1115_GetData+0xf8>)
 8003e34:	7b1b      	ldrb	r3, [r3, #12]
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d101      	bne.n	8003e40 <ADS1115_GetData+0xa4>
  {
    return 0;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	e024      	b.n	8003e8a <ADS1115_GetData+0xee>
  }

  LL_mDelay(20);
 8003e40:	2014      	movs	r0, #20
 8003e42:	f000 ffbb 	bl	8004dbc <LL_mDelay>
  i2c_1.size_buffer = 2;
 8003e46:	4b13      	ldr	r3, [pc, #76]	@ (8003e94 <ADS1115_GetData+0xf8>)
 8003e48:	2202      	movs	r2, #2
 8003e4a:	609a      	str	r2, [r3, #8]
  BSP_I2C_MasterReceive7B((i2c_data_t *)&i2c_1);
 8003e4c:	4811      	ldr	r0, [pc, #68]	@ (8003e94 <ADS1115_GetData+0xf8>)
 8003e4e:	f7fe fa53 	bl	80022f8 <BSP_I2C_MasterReceive7B>

  data[channel].data_reading = (i2c_1.buffer[0] << 8 | i2c_1.buffer[1]);
 8003e52:	4b10      	ldr	r3, [pc, #64]	@ (8003e94 <ADS1115_GetData+0xf8>)
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	021b      	lsls	r3, r3, #8
 8003e5c:	b21a      	sxth	r2, r3
 8003e5e:	4b0d      	ldr	r3, [pc, #52]	@ (8003e94 <ADS1115_GetData+0xf8>)
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	3301      	adds	r3, #1
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	b21b      	sxth	r3, r3
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	b21a      	sxth	r2, r3
 8003e6e:	79fb      	ldrb	r3, [r7, #7]
 8003e70:	b291      	uxth	r1, r2
 8003e72:	4a09      	ldr	r2, [pc, #36]	@ (8003e98 <ADS1115_GetData+0xfc>)
 8003e74:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
  if (data[channel].data_reading < 0)
 8003e78:	79fb      	ldrb	r3, [r7, #7]
 8003e7a:	4a07      	ldr	r2, [pc, #28]	@ (8003e98 <ADS1115_GetData+0xfc>)
 8003e7c:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
  {
    data[channel].data_reading = 0;
  }

  return data[channel].data_reading;
 8003e80:	79fb      	ldrb	r3, [r7, #7]
 8003e82:	4a05      	ldr	r2, [pc, #20]	@ (8003e98 <ADS1115_GetData+0xfc>)
 8003e84:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 8003e88:	b29b      	uxth	r3, r3
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3708      	adds	r7, #8
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	200000d8 	.word	0x200000d8
 8003e98:	200004fc 	.word	0x200004fc

08003e9c <ADS1115_ReadVoltage>:
 * read from the specified channel after converting the raw data reading to
 * voltage using the ADC reference voltage and step size.
 */
float
ADS1115_ReadVoltage (ads1115_channel_t channel)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	71fb      	strb	r3, [r7, #7]
  /**< Read raw Data */
  ADS1115_GetData(channel);
 8003ea6:	79fb      	ldrb	r3, [r7, #7]
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f7ff ff77 	bl	8003d9c <ADS1115_GetData>

  /**< Calibrate ADC */

  /**< Convert voltage */
  data[0].voltage = (float)(data[0].data_reading * ADS1115_VREF) / ADS1115_STEP;
 8003eae:	4b0f      	ldr	r3, [pc, #60]	@ (8003eec <ADS1115_ReadVoltage+0x50>)
 8003eb0:	881b      	ldrh	r3, [r3, #0]
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f7fc ff1b 	bl	8000cf0 <__aeabi_i2f>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	490c      	ldr	r1, [pc, #48]	@ (8003ef0 <ADS1115_ReadVoltage+0x54>)
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f7fc ff6a 	bl	8000d98 <__aeabi_fmul>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	f04f 418f 	mov.w	r1, #1199570944	@ 0x47800000
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f7fd f818 	bl	8000f00 <__aeabi_fdiv>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	4b05      	ldr	r3, [pc, #20]	@ (8003eec <ADS1115_ReadVoltage+0x50>)
 8003ed6:	605a      	str	r2, [r3, #4]

  return data[channel].voltage;
 8003ed8:	79fb      	ldrb	r3, [r7, #7]
 8003eda:	4a04      	ldr	r2, [pc, #16]	@ (8003eec <ADS1115_ReadVoltage+0x50>)
 8003edc:	00db      	lsls	r3, r3, #3
 8003ede:	4413      	add	r3, r2
 8003ee0:	685b      	ldr	r3, [r3, #4]
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3708      	adds	r7, #8
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	200004fc 	.word	0x200004fc
 8003ef0:	4083126f 	.word	0x4083126f

08003ef4 <ADS1115_GetVoltage>:
 * calculated based on the input `value_adc` using the formula `(value_adc *
 * ADS1115_VREF) / ADS1115_STEP`.
 */
float
ADS1115_GetVoltage (uint16_t value_adc)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	4603      	mov	r3, r0
 8003efc:	80fb      	strh	r3, [r7, #6]
  /**< Convert voltage */
  float voltage = (float)(value_adc * ADS1115_VREF) / ADS1115_STEP;
 8003efe:	88fb      	ldrh	r3, [r7, #6]
 8003f00:	4618      	mov	r0, r3
 8003f02:	f7fc fef5 	bl	8000cf0 <__aeabi_i2f>
 8003f06:	4603      	mov	r3, r0
 8003f08:	4908      	ldr	r1, [pc, #32]	@ (8003f2c <ADS1115_GetVoltage+0x38>)
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f7fc ff44 	bl	8000d98 <__aeabi_fmul>
 8003f10:	4603      	mov	r3, r0
 8003f12:	f04f 418f 	mov.w	r1, #1199570944	@ 0x47800000
 8003f16:	4618      	mov	r0, r3
 8003f18:	f7fc fff2 	bl	8000f00 <__aeabi_fdiv>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	60fb      	str	r3, [r7, #12]
  return voltage;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	4618      	mov	r0, r3
 8003f24:	3710      	adds	r7, #16
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	4083126f 	.word	0x4083126f

08003f30 <LL_GPIO_SetPinMode>:
{
 8003f30:	b490      	push	{r4, r7}
 8003f32:	b088      	sub	sp, #32
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	461a      	mov	r2, r3
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	0e1b      	lsrs	r3, r3, #24
 8003f44:	4413      	add	r3, r2
 8003f46:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8003f48:	6822      	ldr	r2, [r4, #0]
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	fa93 f3a3 	rbit	r3, r3
 8003f54:	613b      	str	r3, [r7, #16]
  return result;
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	fab3 f383 	clz	r3, r3
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	210f      	movs	r1, #15
 8003f62:	fa01 f303 	lsl.w	r3, r1, r3
 8003f66:	43db      	mvns	r3, r3
 8003f68:	401a      	ands	r2, r3
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	fa93 f3a3 	rbit	r3, r3
 8003f74:	61bb      	str	r3, [r7, #24]
  return result;
 8003f76:	69bb      	ldr	r3, [r7, #24]
 8003f78:	fab3 f383 	clz	r3, r3
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	6879      	ldr	r1, [r7, #4]
 8003f82:	fa01 f303 	lsl.w	r3, r1, r3
 8003f86:	4313      	orrs	r3, r2
 8003f88:	6023      	str	r3, [r4, #0]
}
 8003f8a:	bf00      	nop
 8003f8c:	3720      	adds	r7, #32
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bc90      	pop	{r4, r7}
 8003f92:	4770      	bx	lr

08003f94 <LL_GPIO_SetPinSpeed>:
{
 8003f94:	b490      	push	{r4, r7}
 8003f96:	b088      	sub	sp, #32
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	0e1b      	lsrs	r3, r3, #24
 8003fa8:	4413      	add	r3, r2
 8003faa:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8003fac:	6822      	ldr	r2, [r4, #0]
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	fa93 f3a3 	rbit	r3, r3
 8003fb8:	613b      	str	r3, [r7, #16]
  return result;
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	fab3 f383 	clz	r3, r3
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	2103      	movs	r1, #3
 8003fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8003fca:	43db      	mvns	r3, r3
 8003fcc:	401a      	ands	r2, r3
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	fa93 f3a3 	rbit	r3, r3
 8003fd8:	61bb      	str	r3, [r7, #24]
  return result;
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	fab3 f383 	clz	r3, r3
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	6879      	ldr	r1, [r7, #4]
 8003fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8003fea:	4313      	orrs	r3, r2
 8003fec:	6023      	str	r3, [r4, #0]
}
 8003fee:	bf00      	nop
 8003ff0:	3720      	adds	r7, #32
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bc90      	pop	{r4, r7}
 8003ff6:	4770      	bx	lr

08003ff8 <LL_GPIO_SetPinOutputType>:
{
 8003ff8:	b490      	push	{r4, r7}
 8003ffa:	b088      	sub	sp, #32
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	461a      	mov	r2, r3
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	0e1b      	lsrs	r3, r3, #24
 800400c:	4413      	add	r3, r2
 800400e:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8004010:	6822      	ldr	r2, [r4, #0]
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	fa93 f3a3 	rbit	r3, r3
 800401c:	613b      	str	r3, [r7, #16]
  return result;
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	fab3 f383 	clz	r3, r3
 8004024:	b2db      	uxtb	r3, r3
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	2104      	movs	r1, #4
 800402a:	fa01 f303 	lsl.w	r3, r1, r3
 800402e:	43db      	mvns	r3, r3
 8004030:	401a      	ands	r2, r3
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	fa93 f3a3 	rbit	r3, r3
 800403c:	61bb      	str	r3, [r7, #24]
  return result;
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	fab3 f383 	clz	r3, r3
 8004044:	b2db      	uxtb	r3, r3
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	6879      	ldr	r1, [r7, #4]
 800404a:	fa01 f303 	lsl.w	r3, r1, r3
 800404e:	4313      	orrs	r3, r2
 8004050:	6023      	str	r3, [r4, #0]
}
 8004052:	bf00      	nop
 8004054:	3720      	adds	r7, #32
 8004056:	46bd      	mov	sp, r7
 8004058:	bc90      	pop	{r4, r7}
 800405a:	4770      	bx	lr

0800405c <LL_GPIO_SetPinPull>:
{
 800405c:	b480      	push	{r7}
 800405e:	b087      	sub	sp, #28
 8004060:	af00      	add	r7, sp, #0
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	68da      	ldr	r2, [r3, #12]
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	0a1b      	lsrs	r3, r3, #8
 8004070:	43db      	mvns	r3, r3
 8004072:	401a      	ands	r2, r3
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	0a1b      	lsrs	r3, r3, #8
 8004078:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	fa93 f3a3 	rbit	r3, r3
 8004080:	613b      	str	r3, [r7, #16]
  return result;
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	fab3 f383 	clz	r3, r3
 8004088:	b2db      	uxtb	r3, r3
 800408a:	4619      	mov	r1, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	408b      	lsls	r3, r1
 8004090:	431a      	orrs	r2, r3
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	60da      	str	r2, [r3, #12]
}
 8004096:	bf00      	nop
 8004098:	371c      	adds	r7, #28
 800409a:	46bd      	mov	sp, r7
 800409c:	bc80      	pop	{r7}
 800409e:	4770      	bx	lr

080040a0 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b088      	sub	sp, #32
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	021b      	lsls	r3, r3, #8
 80040b0:	0c1b      	lsrs	r3, r3, #16
 80040b2:	617b      	str	r3, [r7, #20]
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	fa93 f3a3 	rbit	r3, r3
 80040be:	60fb      	str	r3, [r7, #12]
  return result;
 80040c0:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 80040c2:	fab3 f383 	clz	r3, r3
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 80040ca:	e044      	b.n	8004156 <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 80040cc:	2201      	movs	r2, #1
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	409a      	lsls	r2, r3
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	4013      	ands	r3, r2
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d03a      	beq.n	8004150 <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	2b07      	cmp	r3, #7
 80040de:	d806      	bhi.n	80040ee <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 80040e0:	f240 1201 	movw	r2, #257	@ 0x101
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ea:	61bb      	str	r3, [r7, #24]
 80040ec:	e008      	b.n	8004100 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	3b08      	subs	r3, #8
 80040f2:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 80040f6:	fa02 f303 	lsl.w	r3, r2, r3
 80040fa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80040fe:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	2b08      	cmp	r3, #8
 8004106:	d106      	bne.n	8004116 <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	691b      	ldr	r3, [r3, #16]
 800410c:	461a      	mov	r2, r3
 800410e:	69b9      	ldr	r1, [r7, #24]
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f7ff ffa3 	bl	800405c <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	461a      	mov	r2, r3
 800411c:	69b9      	ldr	r1, [r7, #24]
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f7ff ff06 	bl	8003f30 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	2b01      	cmp	r3, #1
 800412a:	d003      	beq.n	8004134 <LL_GPIO_Init+0x94>
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	2b09      	cmp	r3, #9
 8004132:	d10d      	bne.n	8004150 <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	461a      	mov	r2, r3
 800413a:	69b9      	ldr	r1, [r7, #24]
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f7ff ff29 	bl	8003f94 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	461a      	mov	r2, r3
 8004148:	69b9      	ldr	r1, [r7, #24]
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f7ff ff54 	bl	8003ff8 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	3301      	adds	r3, #1
 8004154:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 8004156:	697a      	ldr	r2, [r7, #20]
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	fa22 f303 	lsr.w	r3, r2, r3
 800415e:	2b00      	cmp	r3, #0
 8004160:	d1b4      	bne.n	80040cc <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8004162:	2300      	movs	r3, #0
}
 8004164:	4618      	mov	r0, r3
 8004166:	3720      	adds	r7, #32
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <LL_I2C_Enable>:
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f043 0201 	orr.w	r2, r3, #1
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	601a      	str	r2, [r3, #0]
}
 8004180:	bf00      	nop
 8004182:	370c      	adds	r7, #12
 8004184:	46bd      	mov	sp, r7
 8004186:	bc80      	pop	{r7}
 8004188:	4770      	bx	lr

0800418a <LL_I2C_Disable>:
{
 800418a:	b480      	push	{r7}
 800418c:	b083      	sub	sp, #12
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f023 0201 	bic.w	r2, r3, #1
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	601a      	str	r2, [r3, #0]
}
 800419e:	bf00      	nop
 80041a0:	370c      	adds	r7, #12
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bc80      	pop	{r7}
 80041a6:	4770      	bx	lr

080041a8 <LL_I2C_SetOwnAddress1>:
{
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80041bc:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80041c0:	68b9      	ldr	r1, [r7, #8]
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	430a      	orrs	r2, r1
 80041c6:	431a      	orrs	r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	609a      	str	r2, [r3, #8]
}
 80041cc:	bf00      	nop
 80041ce:	3714      	adds	r7, #20
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bc80      	pop	{r7}
 80041d4:	4770      	bx	lr
	...

080041d8 <LL_I2C_ConfigSpeed>:
{
 80041d8:	b480      	push	{r7}
 80041da:	b087      	sub	sp, #28
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	607a      	str	r2, [r7, #4]
 80041e4:	603b      	str	r3, [r7, #0]
  uint32_t freqrange = 0x0U;
 80041e6:	2300      	movs	r3, #0
 80041e8:	613b      	str	r3, [r7, #16]
  uint32_t clockconfig = 0x0U;
 80041ea:	2300      	movs	r3, #0
 80041ec:	617b      	str	r3, [r7, #20]
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	4a41      	ldr	r2, [pc, #260]	@ (80042f8 <LL_I2C_ConfigSpeed+0x120>)
 80041f2:	fba2 2303 	umull	r2, r3, r2, r3
 80041f6:	0c9b      	lsrs	r3, r3, #18
 80041f8:	613b      	str	r3, [r7, #16]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	431a      	orrs	r2, r3
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	605a      	str	r2, [r3, #4]
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6a1b      	ldr	r3, [r3, #32]
 800420e:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4939      	ldr	r1, [pc, #228]	@ (80042fc <LL_I2C_ConfigSpeed+0x124>)
 8004216:	428b      	cmp	r3, r1
 8004218:	d802      	bhi.n	8004220 <LL_I2C_ConfigSpeed+0x48>
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	3301      	adds	r3, #1
 800421e:	e009      	b.n	8004234 <LL_I2C_ConfigSpeed+0x5c>
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8004226:	fb01 f303 	mul.w	r3, r1, r3
 800422a:	4935      	ldr	r1, [pc, #212]	@ (8004300 <LL_I2C_ConfigSpeed+0x128>)
 800422c:	fba1 1303 	umull	r1, r3, r1, r3
 8004230:	099b      	lsrs	r3, r3, #6
 8004232:	3301      	adds	r3, #1
 8004234:	431a      	orrs	r2, r3
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	621a      	str	r2, [r3, #32]
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a2f      	ldr	r2, [pc, #188]	@ (80042fc <LL_I2C_ConfigSpeed+0x124>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d939      	bls.n	80042b6 <LL_I2C_ConfigSpeed+0xde>
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d117      	bne.n	8004278 <LL_I2C_ConfigSpeed+0xa0>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	4613      	mov	r3, r2
 800424c:	005b      	lsls	r3, r3, #1
 800424e:	4413      	add	r3, r2
 8004250:	68ba      	ldr	r2, [r7, #8]
 8004252:	fbb2 f3f3 	udiv	r3, r2, r3
 8004256:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800425a:	2b00      	cmp	r3, #0
 800425c:	d009      	beq.n	8004272 <LL_I2C_ConfigSpeed+0x9a>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	4613      	mov	r3, r2
 8004262:	005b      	lsls	r3, r3, #1
 8004264:	4413      	add	r3, r2
 8004266:	68ba      	ldr	r2, [r7, #8]
 8004268:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800426c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004270:	e01d      	b.n	80042ae <LL_I2C_ConfigSpeed+0xd6>
 8004272:	f248 0301 	movw	r3, #32769	@ 0x8001
 8004276:	e01a      	b.n	80042ae <LL_I2C_ConfigSpeed+0xd6>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	4613      	mov	r3, r2
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	4413      	add	r3, r2
 8004280:	009a      	lsls	r2, r3, #2
 8004282:	4413      	add	r3, r2
 8004284:	68ba      	ldr	r2, [r7, #8]
 8004286:	fbb2 f3f3 	udiv	r3, r2, r3
 800428a:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800428e:	2b00      	cmp	r3, #0
 8004290:	d00b      	beq.n	80042aa <LL_I2C_ConfigSpeed+0xd2>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	4613      	mov	r3, r2
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	4413      	add	r3, r2
 800429a:	009a      	lsls	r2, r3, #2
 800429c:	4413      	add	r3, r2
 800429e:	68ba      	ldr	r2, [r7, #8]
 80042a0:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80042a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80042a8:	e001      	b.n	80042ae <LL_I2C_ConfigSpeed+0xd6>
 80042aa:	f248 0301 	movw	r3, #32769	@ 0x8001
 80042ae:	683a      	ldr	r2, [r7, #0]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	617b      	str	r3, [r7, #20]
 80042b4:	e011      	b.n	80042da <LL_I2C_ConfigSpeed+0x102>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	005b      	lsls	r3, r3, #1
 80042ba:	68ba      	ldr	r2, [r7, #8]
 80042bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80042c0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80042c4:	4013      	ands	r3, r2
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d005      	beq.n	80042d6 <LL_I2C_ConfigSpeed+0xfe>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 80042ce:	68ba      	ldr	r2, [r7, #8]
 80042d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042d4:	e000      	b.n	80042d8 <LL_I2C_ConfigSpeed+0x100>
 80042d6:	2304      	movs	r3, #4
 80042d8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	69db      	ldr	r3, [r3, #28]
 80042de:	f423 434f 	bic.w	r3, r3, #52992	@ 0xcf00
 80042e2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80042e6:	697a      	ldr	r2, [r7, #20]
 80042e8:	431a      	orrs	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	61da      	str	r2, [r3, #28]
}
 80042ee:	bf00      	nop
 80042f0:	371c      	adds	r7, #28
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bc80      	pop	{r7}
 80042f6:	4770      	bx	lr
 80042f8:	431bde83 	.word	0x431bde83
 80042fc:	000186a0 	.word	0x000186a0
 8004300:	10624dd3 	.word	0x10624dd3

08004304 <LL_I2C_SetMode>:
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f023 021a 	bic.w	r2, r3, #26
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	431a      	orrs	r2, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	601a      	str	r2, [r3, #0]
}
 800431e:	bf00      	nop
 8004320:	370c      	adds	r7, #12
 8004322:	46bd      	mov	sp, r7
 8004324:	bc80      	pop	{r7}
 8004326:	4770      	bx	lr

08004328 <LL_I2C_AcknowledgeNextData>:
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	431a      	orrs	r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	601a      	str	r2, [r3, #0]
}
 8004342:	bf00      	nop
 8004344:	370c      	adds	r7, #12
 8004346:	46bd      	mov	sp, r7
 8004348:	bc80      	pop	{r7}
 800434a:	4770      	bx	lr

0800434c <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b086      	sub	sp, #24
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f7ff ff17 	bl	800418a <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800435c:	f107 0308 	add.w	r3, r7, #8
 8004360:	4618      	mov	r0, r3
 8004362:	f000 f87b 	bl	800445c <LL_RCC_GetSystemClocksFreq>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 8004366:	6939      	ldr	r1, [r7, #16]
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	685a      	ldr	r2, [r3, #4]
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f7ff ff31 	bl	80041d8 <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	68d9      	ldr	r1, [r3, #12]
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	461a      	mov	r2, r3
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f7ff ff11 	bl	80041a8 <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4619      	mov	r1, r3
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f7ff ffb9 	bl	8004304 <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f7ff feea 	bl	800416c <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	691b      	ldr	r3, [r3, #16]
 800439c:	4619      	mov	r1, r3
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f7ff ffc2 	bl	8004328 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3718      	adds	r7, #24
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
	...

080043b0 <LL_RCC_GetSysClkSource>:
{
 80043b0:	b480      	push	{r7}
 80043b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80043b4:	4b03      	ldr	r3, [pc, #12]	@ (80043c4 <LL_RCC_GetSysClkSource+0x14>)
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	f003 030c 	and.w	r3, r3, #12
}
 80043bc:	4618      	mov	r0, r3
 80043be:	46bd      	mov	sp, r7
 80043c0:	bc80      	pop	{r7}
 80043c2:	4770      	bx	lr
 80043c4:	40021000 	.word	0x40021000

080043c8 <LL_RCC_GetAHBPrescaler>:
{
 80043c8:	b480      	push	{r7}
 80043ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80043cc:	4b03      	ldr	r3, [pc, #12]	@ (80043dc <LL_RCC_GetAHBPrescaler+0x14>)
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bc80      	pop	{r7}
 80043da:	4770      	bx	lr
 80043dc:	40021000 	.word	0x40021000

080043e0 <LL_RCC_GetAPB1Prescaler>:
{
 80043e0:	b480      	push	{r7}
 80043e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80043e4:	4b03      	ldr	r3, [pc, #12]	@ (80043f4 <LL_RCC_GetAPB1Prescaler+0x14>)
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bc80      	pop	{r7}
 80043f2:	4770      	bx	lr
 80043f4:	40021000 	.word	0x40021000

080043f8 <LL_RCC_GetAPB2Prescaler>:
{
 80043f8:	b480      	push	{r7}
 80043fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80043fc:	4b03      	ldr	r3, [pc, #12]	@ (800440c <LL_RCC_GetAPB2Prescaler+0x14>)
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8004404:	4618      	mov	r0, r3
 8004406:	46bd      	mov	sp, r7
 8004408:	bc80      	pop	{r7}
 800440a:	4770      	bx	lr
 800440c:	40021000 	.word	0x40021000

08004410 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004410:	b480      	push	{r7}
 8004412:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8004414:	4b03      	ldr	r3, [pc, #12]	@ (8004424 <LL_RCC_PLL_GetMainSource+0x14>)
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 800441c:	4618      	mov	r0, r3
 800441e:	46bd      	mov	sp, r7
 8004420:	bc80      	pop	{r7}
 8004422:	4770      	bx	lr
 8004424:	40021000 	.word	0x40021000

08004428 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8004428:	b480      	push	{r7}
 800442a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 800442c:	4b03      	ldr	r3, [pc, #12]	@ (800443c <LL_RCC_PLL_GetMultiplicator+0x14>)
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
}
 8004434:	4618      	mov	r0, r3
 8004436:	46bd      	mov	sp, r7
 8004438:	bc80      	pop	{r7}
 800443a:	4770      	bx	lr
 800443c:	40021000 	.word	0x40021000

08004440 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8004440:	b480      	push	{r7}
 8004442:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 8004444:	4b04      	ldr	r3, [pc, #16]	@ (8004458 <LL_RCC_PLL_GetPrediv+0x18>)
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	0c5b      	lsrs	r3, r3, #17
 800444a:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 800444e:	4618      	mov	r0, r3
 8004450:	46bd      	mov	sp, r7
 8004452:	bc80      	pop	{r7}
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	40021000 	.word	0x40021000

0800445c <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8004464:	f000 f820 	bl	80044a8 <RCC_GetSystemClockFreq>
 8004468:	4602      	mov	r2, r0
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4618      	mov	r0, r3
 8004474:	f000 f83e 	bl	80044f4 <RCC_GetHCLKClockFreq>
 8004478:	4602      	mov	r2, r0
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	4618      	mov	r0, r3
 8004484:	f000 f84c 	bl	8004520 <RCC_GetPCLK1ClockFreq>
 8004488:	4602      	mov	r2, r0
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	4618      	mov	r0, r3
 8004494:	f000 f858 	bl	8004548 <RCC_GetPCLK2ClockFreq>
 8004498:	4602      	mov	r2, r0
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	60da      	str	r2, [r3, #12]
}
 800449e:	bf00      	nop
 80044a0:	3708      	adds	r7, #8
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
	...

080044a8 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80044ae:	2300      	movs	r3, #0
 80044b0:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80044b2:	f7ff ff7d 	bl	80043b0 <LL_RCC_GetSysClkSource>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b08      	cmp	r3, #8
 80044ba:	d00c      	beq.n	80044d6 <RCC_GetSystemClockFreq+0x2e>
 80044bc:	2b08      	cmp	r3, #8
 80044be:	d80e      	bhi.n	80044de <RCC_GetSystemClockFreq+0x36>
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d002      	beq.n	80044ca <RCC_GetSystemClockFreq+0x22>
 80044c4:	2b04      	cmp	r3, #4
 80044c6:	d003      	beq.n	80044d0 <RCC_GetSystemClockFreq+0x28>
 80044c8:	e009      	b.n	80044de <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80044ca:	4b09      	ldr	r3, [pc, #36]	@ (80044f0 <RCC_GetSystemClockFreq+0x48>)
 80044cc:	607b      	str	r3, [r7, #4]
      break;
 80044ce:	e009      	b.n	80044e4 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80044d0:	4b07      	ldr	r3, [pc, #28]	@ (80044f0 <RCC_GetSystemClockFreq+0x48>)
 80044d2:	607b      	str	r3, [r7, #4]
      break;
 80044d4:	e006      	b.n	80044e4 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80044d6:	f000 f84b 	bl	8004570 <RCC_PLL_GetFreqDomain_SYS>
 80044da:	6078      	str	r0, [r7, #4]
      break;
 80044dc:	e002      	b.n	80044e4 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 80044de:	4b04      	ldr	r3, [pc, #16]	@ (80044f0 <RCC_GetSystemClockFreq+0x48>)
 80044e0:	607b      	str	r3, [r7, #4]
      break;
 80044e2:	bf00      	nop
  }

  return frequency;
 80044e4:	687b      	ldr	r3, [r7, #4]
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3708      	adds	r7, #8
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	007a1200 	.word	0x007a1200

080044f4 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80044fc:	f7ff ff64 	bl	80043c8 <LL_RCC_GetAHBPrescaler>
 8004500:	4603      	mov	r3, r0
 8004502:	091b      	lsrs	r3, r3, #4
 8004504:	f003 030f 	and.w	r3, r3, #15
 8004508:	4a04      	ldr	r2, [pc, #16]	@ (800451c <RCC_GetHCLKClockFreq+0x28>)
 800450a:	5cd3      	ldrb	r3, [r2, r3]
 800450c:	461a      	mov	r2, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	40d3      	lsrs	r3, r2
}
 8004512:	4618      	mov	r0, r3
 8004514:	3708      	adds	r7, #8
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	08009cfc 	.word	0x08009cfc

08004520 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b082      	sub	sp, #8
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8004528:	f7ff ff5a 	bl	80043e0 <LL_RCC_GetAPB1Prescaler>
 800452c:	4603      	mov	r3, r0
 800452e:	0a1b      	lsrs	r3, r3, #8
 8004530:	4a04      	ldr	r2, [pc, #16]	@ (8004544 <RCC_GetPCLK1ClockFreq+0x24>)
 8004532:	5cd3      	ldrb	r3, [r2, r3]
 8004534:	461a      	mov	r2, r3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	40d3      	lsrs	r3, r2
}
 800453a:	4618      	mov	r0, r3
 800453c:	3708      	adds	r7, #8
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	08009d0c 	.word	0x08009d0c

08004548 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8004550:	f7ff ff52 	bl	80043f8 <LL_RCC_GetAPB2Prescaler>
 8004554:	4603      	mov	r3, r0
 8004556:	0adb      	lsrs	r3, r3, #11
 8004558:	4a04      	ldr	r2, [pc, #16]	@ (800456c <RCC_GetPCLK2ClockFreq+0x24>)
 800455a:	5cd3      	ldrb	r3, [r2, r3]
 800455c:	461a      	mov	r2, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	40d3      	lsrs	r3, r2
}
 8004562:	4618      	mov	r0, r3
 8004564:	3708      	adds	r7, #8
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	08009d0c 	.word	0x08009d0c

08004570 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b082      	sub	sp, #8
 8004574:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8004576:	2300      	movs	r3, #0
 8004578:	607b      	str	r3, [r7, #4]
 800457a:	2300      	movs	r3, #0
 800457c:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 800457e:	f7ff ff47 	bl	8004410 <LL_RCC_PLL_GetMainSource>
 8004582:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d004      	beq.n	8004594 <RCC_PLL_GetFreqDomain_SYS+0x24>
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004590:	d003      	beq.n	800459a <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8004592:	e00b      	b.n	80045ac <RCC_PLL_GetFreqDomain_SYS+0x3c>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8004594:	4b0d      	ldr	r3, [pc, #52]	@ (80045cc <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8004596:	607b      	str	r3, [r7, #4]
      break;
 8004598:	e00b      	b.n	80045b2 <RCC_PLL_GetFreqDomain_SYS+0x42>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 800459a:	f7ff ff51 	bl	8004440 <LL_RCC_PLL_GetPrediv>
 800459e:	4603      	mov	r3, r0
 80045a0:	3301      	adds	r3, #1
 80045a2:	4a0b      	ldr	r2, [pc, #44]	@ (80045d0 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 80045a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045a8:	607b      	str	r3, [r7, #4]
      break;
 80045aa:	e002      	b.n	80045b2 <RCC_PLL_GetFreqDomain_SYS+0x42>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 80045ac:	4b07      	ldr	r3, [pc, #28]	@ (80045cc <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 80045ae:	607b      	str	r3, [r7, #4]
      break;
 80045b0:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 80045b2:	f7ff ff39 	bl	8004428 <LL_RCC_PLL_GetMultiplicator>
 80045b6:	4603      	mov	r3, r0
 80045b8:	0c9b      	lsrs	r3, r3, #18
 80045ba:	3302      	adds	r3, #2
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	fb02 f303 	mul.w	r3, r2, r3
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3708      	adds	r7, #8
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	003d0900 	.word	0x003d0900
 80045d0:	007a1200 	.word	0x007a1200

080045d4 <LL_TIM_SetPrescaler>:
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	683a      	ldr	r2, [r7, #0]
 80045e2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80045e4:	bf00      	nop
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bc80      	pop	{r7}
 80045ec:	4770      	bx	lr

080045ee <LL_TIM_SetAutoReload>:
{
 80045ee:	b480      	push	{r7}
 80045f0:	b083      	sub	sp, #12
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
 80045f6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	683a      	ldr	r2, [r7, #0]
 80045fc:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80045fe:	bf00      	nop
 8004600:	370c      	adds	r7, #12
 8004602:	46bd      	mov	sp, r7
 8004604:	bc80      	pop	{r7}
 8004606:	4770      	bx	lr

08004608 <LL_TIM_SetRepetitionCounter>:
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	683a      	ldr	r2, [r7, #0]
 8004616:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004618:	bf00      	nop
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	bc80      	pop	{r7}
 8004620:	4770      	bx	lr

08004622 <LL_TIM_OC_SetCompareCH1>:
{
 8004622:	b480      	push	{r7}
 8004624:	b083      	sub	sp, #12
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
 800462a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	683a      	ldr	r2, [r7, #0]
 8004630:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8004632:	bf00      	nop
 8004634:	370c      	adds	r7, #12
 8004636:	46bd      	mov	sp, r7
 8004638:	bc80      	pop	{r7}
 800463a:	4770      	bx	lr

0800463c <LL_TIM_OC_SetCompareCH2>:
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	683a      	ldr	r2, [r7, #0]
 800464a:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800464c:	bf00      	nop
 800464e:	370c      	adds	r7, #12
 8004650:	46bd      	mov	sp, r7
 8004652:	bc80      	pop	{r7}
 8004654:	4770      	bx	lr

08004656 <LL_TIM_OC_SetCompareCH3>:
{
 8004656:	b480      	push	{r7}
 8004658:	b083      	sub	sp, #12
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
 800465e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	683a      	ldr	r2, [r7, #0]
 8004664:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8004666:	bf00      	nop
 8004668:	370c      	adds	r7, #12
 800466a:	46bd      	mov	sp, r7
 800466c:	bc80      	pop	{r7}
 800466e:	4770      	bx	lr

08004670 <LL_TIM_OC_SetCompareCH4>:
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	683a      	ldr	r2, [r7, #0]
 800467e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8004680:	bf00      	nop
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	bc80      	pop	{r7}
 8004688:	4770      	bx	lr

0800468a <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800468a:	b480      	push	{r7}
 800468c:	b083      	sub	sp, #12
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	695b      	ldr	r3, [r3, #20]
 8004696:	f043 0201 	orr.w	r2, r3, #1
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	615a      	str	r2, [r3, #20]
}
 800469e:	bf00      	nop
 80046a0:	370c      	adds	r7, #12
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bc80      	pop	{r7}
 80046a6:	4770      	bx	lr

080046a8 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4a27      	ldr	r2, [pc, #156]	@ (8004758 <LL_TIM_Init+0xb0>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d00b      	beq.n	80046d8 <LL_TIM_Init+0x30>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046c6:	d007      	beq.n	80046d8 <LL_TIM_Init+0x30>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	4a24      	ldr	r2, [pc, #144]	@ (800475c <LL_TIM_Init+0xb4>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d003      	beq.n	80046d8 <LL_TIM_Init+0x30>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4a23      	ldr	r2, [pc, #140]	@ (8004760 <LL_TIM_Init+0xb8>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d106      	bne.n	80046e6 <LL_TIM_Init+0x3e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a1b      	ldr	r2, [pc, #108]	@ (8004758 <LL_TIM_Init+0xb0>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d00b      	beq.n	8004706 <LL_TIM_Init+0x5e>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046f4:	d007      	beq.n	8004706 <LL_TIM_Init+0x5e>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a18      	ldr	r2, [pc, #96]	@ (800475c <LL_TIM_Init+0xb4>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d003      	beq.n	8004706 <LL_TIM_Init+0x5e>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a17      	ldr	r2, [pc, #92]	@ (8004760 <LL_TIM_Init+0xb8>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d106      	bne.n	8004714 <LL_TIM_Init+0x6c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	4313      	orrs	r3, r2
 8004712:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	68fa      	ldr	r2, [r7, #12]
 8004718:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	4619      	mov	r1, r3
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f7ff ff64 	bl	80045ee <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	881b      	ldrh	r3, [r3, #0]
 800472a:	4619      	mov	r1, r3
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f7ff ff51 	bl	80045d4 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a08      	ldr	r2, [pc, #32]	@ (8004758 <LL_TIM_Init+0xb0>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d105      	bne.n	8004746 <LL_TIM_Init+0x9e>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	4619      	mov	r1, r3
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f7ff ff61 	bl	8004608 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f7ff ff9f 	bl	800468a <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	3710      	adds	r7, #16
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop
 8004758:	40012c00 	.word	0x40012c00
 800475c:	40000400 	.word	0x40000400
 8004760:	40000800 	.word	0x40000800

08004764 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b086      	sub	sp, #24
 8004768:	af00      	add	r7, sp, #0
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	60b9      	str	r1, [r7, #8]
 800476e:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800477a:	d027      	beq.n	80047cc <LL_TIM_OC_Init+0x68>
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004782:	d82a      	bhi.n	80047da <LL_TIM_OC_Init+0x76>
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800478a:	d018      	beq.n	80047be <LL_TIM_OC_Init+0x5a>
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004792:	d822      	bhi.n	80047da <LL_TIM_OC_Init+0x76>
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	2b01      	cmp	r3, #1
 8004798:	d003      	beq.n	80047a2 <LL_TIM_OC_Init+0x3e>
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	2b10      	cmp	r3, #16
 800479e:	d007      	beq.n	80047b0 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 80047a0:	e01b      	b.n	80047da <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80047a2:	6879      	ldr	r1, [r7, #4]
 80047a4:	68f8      	ldr	r0, [r7, #12]
 80047a6:	f000 f85f 	bl	8004868 <OC1Config>
 80047aa:	4603      	mov	r3, r0
 80047ac:	75fb      	strb	r3, [r7, #23]
      break;
 80047ae:	e015      	b.n	80047dc <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80047b0:	6879      	ldr	r1, [r7, #4]
 80047b2:	68f8      	ldr	r0, [r7, #12]
 80047b4:	f000 f8be 	bl	8004934 <OC2Config>
 80047b8:	4603      	mov	r3, r0
 80047ba:	75fb      	strb	r3, [r7, #23]
      break;
 80047bc:	e00e      	b.n	80047dc <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80047be:	6879      	ldr	r1, [r7, #4]
 80047c0:	68f8      	ldr	r0, [r7, #12]
 80047c2:	f000 f921 	bl	8004a08 <OC3Config>
 80047c6:	4603      	mov	r3, r0
 80047c8:	75fb      	strb	r3, [r7, #23]
      break;
 80047ca:	e007      	b.n	80047dc <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80047cc:	6879      	ldr	r1, [r7, #4]
 80047ce:	68f8      	ldr	r0, [r7, #12]
 80047d0:	f000 f984 	bl	8004adc <OC4Config>
 80047d4:	4603      	mov	r3, r0
 80047d6:	75fb      	strb	r3, [r7, #23]
      break;
 80047d8:	e000      	b.n	80047dc <LL_TIM_OC_Init+0x78>
      break;
 80047da:	bf00      	nop
  }

  return result;
 80047dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3718      	adds	r7, #24
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}

080047e6 <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, const LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 80047e6:	b480      	push	{r7}
 80047e8:	b085      	sub	sp, #20
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
 80047ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 80047f0:	2300      	movs	r3, #0
 80047f2:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80047fa:	683a      	ldr	r2, [r7, #0]
 80047fc:	7b12      	ldrb	r2, [r2, #12]
 80047fe:	4313      	orrs	r3, r2
 8004800:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	4313      	orrs	r3, r2
 800480e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	4313      	orrs	r3, r2
 800481c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4313      	orrs	r3, r2
 800482a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004832:	683a      	ldr	r2, [r7, #0]
 8004834:	89d2      	ldrh	r2, [r2, #14]
 8004836:	4313      	orrs	r3, r2
 8004838:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	4313      	orrs	r3, r2
 8004846:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	695b      	ldr	r3, [r3, #20]
 8004852:	4313      	orrs	r3, r2
 8004854:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	68fa      	ldr	r2, [r7, #12]
 800485a:	645a      	str	r2, [r3, #68]	@ 0x44

  return SUCCESS;
 800485c:	2300      	movs	r3, #0
}
 800485e:	4618      	mov	r0, r3
 8004860:	3714      	adds	r7, #20
 8004862:	46bd      	mov	sp, r7
 8004864:	bc80      	pop	{r7}
 8004866:	4770      	bx	lr

08004868 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b086      	sub	sp, #24
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a1b      	ldr	r3, [r3, #32]
 8004876:	f023 0201 	bic.w	r2, r3, #1
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a1b      	ldr	r3, [r3, #32]
 8004882:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	699b      	ldr	r3, [r3, #24]
 800488e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f023 0303 	bic.w	r3, r3, #3
 8004896:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	f023 0202 	bic.w	r2, r3, #2
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	691b      	ldr	r3, [r3, #16]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	f023 0201 	bic.w	r2, r3, #1
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	4313      	orrs	r3, r2
 80048c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a1a      	ldr	r2, [pc, #104]	@ (8004930 <OC1Config+0xc8>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d11e      	bne.n	8004908 <OC1Config+0xa0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	f023 0208 	bic.w	r2, r3, #8
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	695b      	ldr	r3, [r3, #20]
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	4313      	orrs	r3, r2
 80048d8:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	f023 0204 	bic.w	r2, r3, #4
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	4313      	orrs	r3, r2
 80048e8:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	699b      	ldr	r3, [r3, #24]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	69db      	ldr	r3, [r3, #28]
 8004902:	005b      	lsls	r3, r3, #1
 8004904:	4313      	orrs	r3, r2
 8004906:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	693a      	ldr	r2, [r7, #16]
 800490c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	68fa      	ldr	r2, [r7, #12]
 8004912:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	4619      	mov	r1, r3
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f7ff fe81 	bl	8004622 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	697a      	ldr	r2, [r7, #20]
 8004924:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004926:	2300      	movs	r3, #0
}
 8004928:	4618      	mov	r0, r3
 800492a:	3718      	adds	r7, #24
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}
 8004930:	40012c00 	.word	0x40012c00

08004934 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b086      	sub	sp, #24
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a1b      	ldr	r3, [r3, #32]
 8004942:	f023 0210 	bic.w	r2, r3, #16
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a1b      	ldr	r3, [r3, #32]
 800494e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	699b      	ldr	r3, [r3, #24]
 800495a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004962:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	021b      	lsls	r3, r3, #8
 8004970:	4313      	orrs	r3, r2
 8004972:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	f023 0220 	bic.w	r2, r3, #32
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	011b      	lsls	r3, r3, #4
 8004980:	4313      	orrs	r3, r2
 8004982:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	f023 0210 	bic.w	r2, r3, #16
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	011b      	lsls	r3, r3, #4
 8004990:	4313      	orrs	r3, r2
 8004992:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	4a1b      	ldr	r2, [pc, #108]	@ (8004a04 <OC2Config+0xd0>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d11f      	bne.n	80049dc <OC2Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	695b      	ldr	r3, [r3, #20]
 80049a6:	019b      	lsls	r3, r3, #6
 80049a8:	4313      	orrs	r3, r2
 80049aa:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	019b      	lsls	r3, r3, #6
 80049b8:	4313      	orrs	r3, r2
 80049ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	699b      	ldr	r3, [r3, #24]
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	4313      	orrs	r3, r2
 80049ca:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	69db      	ldr	r3, [r3, #28]
 80049d6:	00db      	lsls	r3, r3, #3
 80049d8:	4313      	orrs	r3, r2
 80049da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	693a      	ldr	r2, [r7, #16]
 80049e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	4619      	mov	r1, r3
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f7ff fe24 	bl	800463c <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	697a      	ldr	r2, [r7, #20]
 80049f8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80049fa:	2300      	movs	r3, #0
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3718      	adds	r7, #24
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	40012c00 	.word	0x40012c00

08004a08 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b086      	sub	sp, #24
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a1b      	ldr	r3, [r3, #32]
 8004a16:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a1b      	ldr	r3, [r3, #32]
 8004a22:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	69db      	ldr	r3, [r3, #28]
 8004a2e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f023 0303 	bic.w	r3, r3, #3
 8004a36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	691b      	ldr	r3, [r3, #16]
 8004a50:	021b      	lsls	r3, r3, #8
 8004a52:	4313      	orrs	r3, r2
 8004a54:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	021b      	lsls	r3, r3, #8
 8004a62:	4313      	orrs	r3, r2
 8004a64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4a1b      	ldr	r2, [pc, #108]	@ (8004ad8 <OC3Config+0xd0>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d11f      	bne.n	8004aae <OC3Config+0xa6>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	695b      	ldr	r3, [r3, #20]
 8004a78:	029b      	lsls	r3, r3, #10
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	029b      	lsls	r3, r3, #10
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	699b      	ldr	r3, [r3, #24]
 8004a98:	011b      	lsls	r3, r3, #4
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	69db      	ldr	r3, [r3, #28]
 8004aa8:	015b      	lsls	r3, r3, #5
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	693a      	ldr	r2, [r7, #16]
 8004ab2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	68fa      	ldr	r2, [r7, #12]
 8004ab8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	4619      	mov	r1, r3
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f7ff fdc8 	bl	8004656 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	697a      	ldr	r2, [r7, #20]
 8004aca:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3718      	adds	r7, #24
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	40012c00 	.word	0x40012c00

08004adc <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b086      	sub	sp, #24
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a1b      	ldr	r3, [r3, #32]
 8004aea:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a1b      	ldr	r3, [r3, #32]
 8004af6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	69db      	ldr	r3, [r3, #28]
 8004b02:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	021b      	lsls	r3, r3, #8
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	031b      	lsls	r3, r3, #12
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	031b      	lsls	r3, r3, #12
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	4a0f      	ldr	r2, [pc, #60]	@ (8004b7c <OC4Config+0xa0>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d107      	bne.n	8004b54 <OC4Config+0x78>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	699b      	ldr	r3, [r3, #24]
 8004b4e:	019b      	lsls	r3, r3, #6
 8004b50:	4313      	orrs	r3, r2
 8004b52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	697a      	ldr	r2, [r7, #20]
 8004b58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	68fa      	ldr	r2, [r7, #12]
 8004b5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	4619      	mov	r1, r3
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f7ff fd82 	bl	8004670 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	693a      	ldr	r2, [r7, #16]
 8004b70:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004b72:	2300      	movs	r3, #0
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3718      	adds	r7, #24
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	40012c00 	.word	0x40012c00

08004b80 <LL_USART_IsEnabled>:
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b94:	bf0c      	ite	eq
 8004b96:	2301      	moveq	r3, #1
 8004b98:	2300      	movne	r3, #0
 8004b9a:	b2db      	uxtb	r3, r3
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bc80      	pop	{r7}
 8004ba4:	4770      	bx	lr

08004ba6 <LL_USART_SetStopBitsLength>:
{
 8004ba6:	b480      	push	{r7}
 8004ba8:	b083      	sub	sp, #12
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
 8004bae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	431a      	orrs	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	611a      	str	r2, [r3, #16]
}
 8004bc0:	bf00      	nop
 8004bc2:	370c      	adds	r7, #12
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bc80      	pop	{r7}
 8004bc8:	4770      	bx	lr

08004bca <LL_USART_SetHWFlowCtrl>:
{
 8004bca:	b480      	push	{r7}
 8004bcc:	b083      	sub	sp, #12
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
 8004bd2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	695b      	ldr	r3, [r3, #20]
 8004bd8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	431a      	orrs	r2, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	615a      	str	r2, [r3, #20]
}
 8004be4:	bf00      	nop
 8004be6:	370c      	adds	r7, #12
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bc80      	pop	{r7}
 8004bec:	4770      	bx	lr
	...

08004bf0 <LL_USART_SetBaudRate>:
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b085      	sub	sp, #20
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	60f8      	str	r0, [r7, #12]
 8004bf8:	60b9      	str	r1, [r7, #8]
 8004bfa:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8004bfc:	68ba      	ldr	r2, [r7, #8]
 8004bfe:	4613      	mov	r3, r2
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	4413      	add	r3, r2
 8004c04:	009a      	lsls	r2, r3, #2
 8004c06:	441a      	add	r2, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c10:	4a25      	ldr	r2, [pc, #148]	@ (8004ca8 <LL_USART_SetBaudRate+0xb8>)
 8004c12:	fba2 2303 	umull	r2, r3, r2, r3
 8004c16:	095b      	lsrs	r3, r3, #5
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	011b      	lsls	r3, r3, #4
 8004c1c:	b299      	uxth	r1, r3
 8004c1e:	68ba      	ldr	r2, [r7, #8]
 8004c20:	4613      	mov	r3, r2
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	4413      	add	r3, r2
 8004c26:	009a      	lsls	r2, r3, #2
 8004c28:	441a      	add	r2, r3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c32:	4b1d      	ldr	r3, [pc, #116]	@ (8004ca8 <LL_USART_SetBaudRate+0xb8>)
 8004c34:	fba3 0302 	umull	r0, r3, r3, r2
 8004c38:	095b      	lsrs	r3, r3, #5
 8004c3a:	2064      	movs	r0, #100	@ 0x64
 8004c3c:	fb00 f303 	mul.w	r3, r0, r3
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	011b      	lsls	r3, r3, #4
 8004c44:	3332      	adds	r3, #50	@ 0x32
 8004c46:	4a18      	ldr	r2, [pc, #96]	@ (8004ca8 <LL_USART_SetBaudRate+0xb8>)
 8004c48:	fba2 2303 	umull	r2, r3, r2, r3
 8004c4c:	095b      	lsrs	r3, r3, #5
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	440b      	add	r3, r1
 8004c58:	b299      	uxth	r1, r3
 8004c5a:	68ba      	ldr	r2, [r7, #8]
 8004c5c:	4613      	mov	r3, r2
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	4413      	add	r3, r2
 8004c62:	009a      	lsls	r2, r3, #2
 8004c64:	441a      	add	r2, r3
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c6e:	4b0e      	ldr	r3, [pc, #56]	@ (8004ca8 <LL_USART_SetBaudRate+0xb8>)
 8004c70:	fba3 0302 	umull	r0, r3, r3, r2
 8004c74:	095b      	lsrs	r3, r3, #5
 8004c76:	2064      	movs	r0, #100	@ 0x64
 8004c78:	fb00 f303 	mul.w	r3, r0, r3
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	011b      	lsls	r3, r3, #4
 8004c80:	3332      	adds	r3, #50	@ 0x32
 8004c82:	4a09      	ldr	r2, [pc, #36]	@ (8004ca8 <LL_USART_SetBaudRate+0xb8>)
 8004c84:	fba2 2303 	umull	r2, r3, r2, r3
 8004c88:	095b      	lsrs	r3, r3, #5
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	f003 030f 	and.w	r3, r3, #15
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	440b      	add	r3, r1
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	461a      	mov	r2, r3
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	609a      	str	r2, [r3, #8]
}
 8004c9c:	bf00      	nop
 8004c9e:	3714      	adds	r7, #20
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bc80      	pop	{r7}
 8004ca4:	4770      	bx	lr
 8004ca6:	bf00      	nop
 8004ca8:	51eb851f 	.word	0x51eb851f

08004cac <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b088      	sub	sp, #32
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f7ff ff5e 	bl	8004b80 <LL_USART_IsEnabled>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d145      	bne.n	8004d56 <LL_USART_Init+0xaa>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004cd2:	f023 030c 	bic.w	r3, r3, #12
 8004cd6:	683a      	ldr	r2, [r7, #0]
 8004cd8:	6851      	ldr	r1, [r2, #4]
 8004cda:	683a      	ldr	r2, [r7, #0]
 8004cdc:	68d2      	ldr	r2, [r2, #12]
 8004cde:	4311      	orrs	r1, r2
 8004ce0:	683a      	ldr	r2, [r7, #0]
 8004ce2:	6912      	ldr	r2, [r2, #16]
 8004ce4:	430a      	orrs	r2, r1
 8004ce6:	431a      	orrs	r2, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f7ff ff57 	bl	8004ba6 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	695b      	ldr	r3, [r3, #20]
 8004cfc:	4619      	mov	r1, r3
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f7ff ff63 	bl	8004bca <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8004d04:	f107 0308 	add.w	r3, r7, #8
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f7ff fba7 	bl	800445c <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a13      	ldr	r2, [pc, #76]	@ (8004d60 <LL_USART_Init+0xb4>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d102      	bne.n	8004d1c <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	61bb      	str	r3, [r7, #24]
 8004d1a:	e00c      	b.n	8004d36 <LL_USART_Init+0x8a>
    }
    else if (USARTx == USART2)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4a11      	ldr	r2, [pc, #68]	@ (8004d64 <LL_USART_Init+0xb8>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d102      	bne.n	8004d2a <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	61bb      	str	r3, [r7, #24]
 8004d28:	e005      	b.n	8004d36 <LL_USART_Init+0x8a>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4a0e      	ldr	r2, [pc, #56]	@ (8004d68 <LL_USART_Init+0xbc>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d101      	bne.n	8004d36 <LL_USART_Init+0x8a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d00c      	beq.n	8004d56 <LL_USART_Init+0xaa>
        && (USART_InitStruct->BaudRate != 0U))
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d008      	beq.n	8004d56 <LL_USART_Init+0xaa>
    {
      status = SUCCESS;
 8004d44:	2300      	movs	r3, #0
 8004d46:	77fb      	strb	r3, [r7, #31]
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->BaudRate);
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	69b9      	ldr	r1, [r7, #24]
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f7ff ff4d 	bl	8004bf0 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8004d56:	7ffb      	ldrb	r3, [r7, #31]
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3720      	adds	r7, #32
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	40013800 	.word	0x40013800
 8004d64:	40004400 	.word	0x40004400
 8004d68:	40004800 	.word	0x40004800

08004d6c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d7e:	4a07      	ldr	r2, [pc, #28]	@ (8004d9c <LL_InitTick+0x30>)
 8004d80:	3b01      	subs	r3, #1
 8004d82:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8004d84:	4b05      	ldr	r3, [pc, #20]	@ (8004d9c <LL_InitTick+0x30>)
 8004d86:	2200      	movs	r2, #0
 8004d88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d8a:	4b04      	ldr	r3, [pc, #16]	@ (8004d9c <LL_InitTick+0x30>)
 8004d8c:	2205      	movs	r2, #5
 8004d8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8004d90:	bf00      	nop
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bc80      	pop	{r7}
 8004d98:	4770      	bx	lr
 8004d9a:	bf00      	nop
 8004d9c:	e000e010 	.word	0xe000e010

08004da0 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b082      	sub	sp, #8
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8004da8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f7ff ffdd 	bl	8004d6c <LL_InitTick>
}
 8004db2:	bf00      	nop
 8004db4:	3708      	adds	r7, #8
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
	...

08004dbc <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b085      	sub	sp, #20
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8004dc4:	4b0e      	ldr	r3, [pc, #56]	@ (8004e00 <LL_mDelay+0x44>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8004dca:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dd2:	d00c      	beq.n	8004dee <LL_mDelay+0x32>
  {
    Delay++;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	3301      	adds	r3, #1
 8004dd8:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8004dda:	e008      	b.n	8004dee <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8004ddc:	4b08      	ldr	r3, [pc, #32]	@ (8004e00 <LL_mDelay+0x44>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d002      	beq.n	8004dee <LL_mDelay+0x32>
    {
      Delay--;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	3b01      	subs	r3, #1
 8004dec:	607b      	str	r3, [r7, #4]
  while (Delay)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d1f3      	bne.n	8004ddc <LL_mDelay+0x20>
    }
  }
}
 8004df4:	bf00      	nop
 8004df6:	bf00      	nop
 8004df8:	3714      	adds	r7, #20
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bc80      	pop	{r7}
 8004dfe:	4770      	bx	lr
 8004e00:	e000e010 	.word	0xe000e010

08004e04 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b083      	sub	sp, #12
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8004e0c:	4a03      	ldr	r2, [pc, #12]	@ (8004e1c <LL_SetSystemCoreClock+0x18>)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6013      	str	r3, [r2, #0]
}
 8004e12:	bf00      	nop
 8004e14:	370c      	adds	r7, #12
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bc80      	pop	{r7}
 8004e1a:	4770      	bx	lr
 8004e1c:	200000d4 	.word	0x200000d4

08004e20 <CCF_Process>:
/**********************
 *    PUBLIC FUNCTIONS
 **********************/
uint32_t
CCF_Process (float current)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  float temp = -0.172233513 * current + 115.5723622;
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f7fb fb07 	bl	800043c <__aeabi_f2d>
 8004e2e:	a310      	add	r3, pc, #64	@ (adr r3, 8004e70 <CCF_Process+0x50>)
 8004e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e34:	f7fb fb5a 	bl	80004ec <__aeabi_dmul>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	460b      	mov	r3, r1
 8004e3c:	4610      	mov	r0, r2
 8004e3e:	4619      	mov	r1, r3
 8004e40:	a30d      	add	r3, pc, #52	@ (adr r3, 8004e78 <CCF_Process+0x58>)
 8004e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e46:	f7fb f99b 	bl	8000180 <__adddf3>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	460b      	mov	r3, r1
 8004e4e:	4610      	mov	r0, r2
 8004e50:	4619      	mov	r1, r3
 8004e52:	f7fb fe43 	bl	8000adc <__aeabi_d2f>
 8004e56:	4603      	mov	r3, r0
 8004e58:	60fb      	str	r3, [r7, #12]
  return (uint32_t)temp;
 8004e5a:	68f8      	ldr	r0, [r7, #12]
 8004e5c:	f7fc f962 	bl	8001124 <__aeabi_f2uiz>
 8004e60:	4603      	mov	r3, r0
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3710      	adds	r7, #16
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	f3af 8000 	nop.w
 8004e70:	6cce1abc 	.word	0x6cce1abc
 8004e74:	bfc60bbf 	.word	0xbfc60bbf
 8004e78:	95109ddd 	.word	0x95109ddd
 8004e7c:	405ce4a1 	.word	0x405ce4a1

08004e80 <FCP_PhaseStart>:
 *
 * @param time The time value used to determine the PWM parameters.
 */
void
FCP_PhaseStart (uint8_t time)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b082      	sub	sp, #8
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	4603      	mov	r3, r0
 8004e88:	71fb      	strb	r3, [r7, #7]
  time = time > 20 ? (time - 20) : 0;
 8004e8a:	79fb      	ldrb	r3, [r7, #7]
 8004e8c:	2b14      	cmp	r3, #20
 8004e8e:	bf38      	it	cc
 8004e90:	2314      	movcc	r3, #20
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	3b14      	subs	r3, #20
 8004e96:	71fb      	strb	r3, [r7, #7]

  // Set the prescaler value
  pwm_control_1->u16_prescaler = table_data_start[time].prescaler_timer - 1;
 8004e98:	79fb      	ldrb	r3, [r7, #7]
 8004e9a:	4a1f      	ldr	r2, [pc, #124]	@ (8004f18 <FCP_PhaseStart+0x98>)
 8004e9c:	00db      	lsls	r3, r3, #3
 8004e9e:	4413      	add	r3, r2
 8004ea0:	889b      	ldrh	r3, [r3, #4]
 8004ea2:	b29a      	uxth	r2, r3
 8004ea4:	4b1d      	ldr	r3, [pc, #116]	@ (8004f1c <FCP_PhaseStart+0x9c>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	3a01      	subs	r2, #1
 8004eaa:	b292      	uxth	r2, r2
 8004eac:	811a      	strh	r2, [r3, #8]
  // Set the auto-reload register value
  pwm_control_1->u16_reg_auto_reload
      = table_data_start[time].auto_reload_reg_timer - 1;
 8004eae:	79fb      	ldrb	r3, [r7, #7]
 8004eb0:	4a19      	ldr	r2, [pc, #100]	@ (8004f18 <FCP_PhaseStart+0x98>)
 8004eb2:	00db      	lsls	r3, r3, #3
 8004eb4:	4413      	add	r3, r2
 8004eb6:	88db      	ldrh	r3, [r3, #6]
 8004eb8:	b29a      	uxth	r2, r3
  pwm_control_1->u16_reg_auto_reload
 8004eba:	4b18      	ldr	r3, [pc, #96]	@ (8004f1c <FCP_PhaseStart+0x9c>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
      = table_data_start[time].auto_reload_reg_timer - 1;
 8004ebe:	3a01      	subs	r2, #1
 8004ec0:	b292      	uxth	r2, r2
 8004ec2:	809a      	strh	r2, [r3, #4]
  // Set the compare register value
  pwm_control_1->u16_reg_compare
      = table_data_start[time].auto_reload_reg_timer * DUTY_CYCLE / 100;
 8004ec4:	79fb      	ldrb	r3, [r7, #7]
 8004ec6:	4a14      	ldr	r2, [pc, #80]	@ (8004f18 <FCP_PhaseStart+0x98>)
 8004ec8:	00db      	lsls	r3, r3, #3
 8004eca:	4413      	add	r3, r2
 8004ecc:	88db      	ldrh	r3, [r3, #6]
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	0fda      	lsrs	r2, r3, #31
 8004ed2:	4413      	add	r3, r2
 8004ed4:	105b      	asrs	r3, r3, #1
 8004ed6:	461a      	mov	r2, r3
  pwm_control_1->u16_reg_compare
 8004ed8:	4b10      	ldr	r3, [pc, #64]	@ (8004f1c <FCP_PhaseStart+0x9c>)
 8004eda:	681b      	ldr	r3, [r3, #0]
      = table_data_start[time].auto_reload_reg_timer * DUTY_CYCLE / 100;
 8004edc:	b292      	uxth	r2, r2
 8004ede:	80da      	strh	r2, [r3, #6]

  // Apply the PWM parameters
  while (!(pwm_control_1->p_tim->CNT == pwm_control_1->p_tim->ARR))
 8004ee0:	bf00      	nop
 8004ee2:	4b0e      	ldr	r3, [pc, #56]	@ (8004f1c <FCP_PhaseStart+0x9c>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004eea:	4b0c      	ldr	r3, [pc, #48]	@ (8004f1c <FCP_PhaseStart+0x9c>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d1f5      	bne.n	8004ee2 <FCP_PhaseStart+0x62>
    ;
  calculate_DeadTime(table_data_start[time].frequency);
 8004ef6:	79fb      	ldrb	r3, [r7, #7]
 8004ef8:	4a07      	ldr	r2, [pc, #28]	@ (8004f18 <FCP_PhaseStart+0x98>)
 8004efa:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004efe:	4618      	mov	r0, r3
 8004f00:	f000 f8d2 	bl	80050a8 <calculate_DeadTime>
  BSP_PWM_SetParameterProcess(pwm_control_1);
 8004f04:	4b05      	ldr	r3, [pc, #20]	@ (8004f1c <FCP_PhaseStart+0x9c>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f7fd fd63 	bl	80029d4 <BSP_PWM_SetParameterProcess>
}
 8004f0e:	bf00      	nop
 8004f10:	3708      	adds	r7, #8
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	0800a49c 	.word	0x0800a49c
 8004f1c:	200000e8 	.word	0x200000e8

08004f20 <FCP_PhaseProcess>:
 *
 * @param frequency The frequency value used to determine the PWM parameters.
 */
void
FCP_PhaseProcess (uint32_t frequency)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b086      	sub	sp, #24
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  if (frequency > FRE_END_THRESHOLD)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4a53      	ldr	r2, [pc, #332]	@ (8005078 <FCP_PhaseProcess+0x158>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d91e      	bls.n	8004f6e <FCP_PhaseProcess+0x4e>
  {
    // Set the prescaler value
    pwm_control_1->u16_prescaler = PRE_END_THRESHOLD - 1;
 8004f30:	4b52      	ldr	r3, [pc, #328]	@ (800507c <FCP_PhaseProcess+0x15c>)
 8004f32:	f8b3 354c 	ldrh.w	r3, [r3, #1356]	@ 0x54c
 8004f36:	b29a      	uxth	r2, r3
 8004f38:	4b51      	ldr	r3, [pc, #324]	@ (8005080 <FCP_PhaseProcess+0x160>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	3a01      	subs	r2, #1
 8004f3e:	b292      	uxth	r2, r2
 8004f40:	811a      	strh	r2, [r3, #8]
    // Set the auto-reload register value
    pwm_control_1->u16_reg_auto_reload = REG_END_THRESHOLD - 1;
 8004f42:	4b4e      	ldr	r3, [pc, #312]	@ (800507c <FCP_PhaseProcess+0x15c>)
 8004f44:	f8b3 354e 	ldrh.w	r3, [r3, #1358]	@ 0x54e
 8004f48:	b29a      	uxth	r2, r3
 8004f4a:	4b4d      	ldr	r3, [pc, #308]	@ (8005080 <FCP_PhaseProcess+0x160>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	3a01      	subs	r2, #1
 8004f50:	b292      	uxth	r2, r2
 8004f52:	809a      	strh	r2, [r3, #4]
    // Set the compare register value
    pwm_control_1->u16_reg_compare = REG_END_THRESHOLD * DUTY_CYCLE / 100;
 8004f54:	4b49      	ldr	r3, [pc, #292]	@ (800507c <FCP_PhaseProcess+0x15c>)
 8004f56:	f8b3 354e 	ldrh.w	r3, [r3, #1358]	@ 0x54e
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	0fda      	lsrs	r2, r3, #31
 8004f5e:	4413      	add	r3, r2
 8004f60:	105b      	asrs	r3, r3, #1
 8004f62:	461a      	mov	r2, r3
 8004f64:	4b46      	ldr	r3, [pc, #280]	@ (8005080 <FCP_PhaseProcess+0x160>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	b292      	uxth	r2, r2
 8004f6a:	80da      	strh	r2, [r3, #6]
 8004f6c:	e06d      	b.n	800504a <FCP_PhaseProcess+0x12a>
  }
  else if (frequency < FRE_START_THRESHOLD)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a44      	ldr	r2, [pc, #272]	@ (8005084 <FCP_PhaseProcess+0x164>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d81b      	bhi.n	8004fae <FCP_PhaseProcess+0x8e>
  {
    // Set the prescaler value
    pwm_control_1->u16_prescaler = PRE_START_THRESHOLD - 1;
 8004f76:	4b41      	ldr	r3, [pc, #260]	@ (800507c <FCP_PhaseProcess+0x15c>)
 8004f78:	889b      	ldrh	r3, [r3, #4]
 8004f7a:	b29a      	uxth	r2, r3
 8004f7c:	4b40      	ldr	r3, [pc, #256]	@ (8005080 <FCP_PhaseProcess+0x160>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	3a01      	subs	r2, #1
 8004f82:	b292      	uxth	r2, r2
 8004f84:	811a      	strh	r2, [r3, #8]
    // Set the auto-reload register value
    pwm_control_1->u16_reg_auto_reload = REG_START_THRESHOLD - 1;
 8004f86:	4b3d      	ldr	r3, [pc, #244]	@ (800507c <FCP_PhaseProcess+0x15c>)
 8004f88:	88db      	ldrh	r3, [r3, #6]
 8004f8a:	b29a      	uxth	r2, r3
 8004f8c:	4b3c      	ldr	r3, [pc, #240]	@ (8005080 <FCP_PhaseProcess+0x160>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	3a01      	subs	r2, #1
 8004f92:	b292      	uxth	r2, r2
 8004f94:	809a      	strh	r2, [r3, #4]
    // Set the compare register value
    pwm_control_1->u16_reg_compare = REG_START_THRESHOLD * DUTY_CYCLE / 100;
 8004f96:	4b39      	ldr	r3, [pc, #228]	@ (800507c <FCP_PhaseProcess+0x15c>)
 8004f98:	88db      	ldrh	r3, [r3, #6]
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	0fda      	lsrs	r2, r3, #31
 8004f9e:	4413      	add	r3, r2
 8004fa0:	105b      	asrs	r3, r3, #1
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	4b36      	ldr	r3, [pc, #216]	@ (8005080 <FCP_PhaseProcess+0x160>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	b292      	uxth	r2, r2
 8004faa:	80da      	strh	r2, [r3, #6]
 8004fac:	e04d      	b.n	800504a <FCP_PhaseProcess+0x12a>
  }
  else
  {
    uint32_t i;
    int32_t  delta_1 = 0;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	613b      	str	r3, [r7, #16]
    int32_t  delta_2 = 0;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < SIZE_TABLE_DATA_PROCESS - 1; i++)
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	617b      	str	r3, [r7, #20]
 8004fba:	e043      	b.n	8005044 <FCP_PhaseProcess+0x124>
    {
      delta_1 = abs_32((int32_t)(frequency - table_data_process[i].frequency));
 8004fbc:	4a2f      	ldr	r2, [pc, #188]	@ (800507c <FCP_PhaseProcess+0x15c>)
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f000 f85d 	bl	8005088 <abs_32>
 8004fce:	6138      	str	r0, [r7, #16]
      delta_2
          = abs_32((int32_t)(frequency - table_data_process[i + 1].frequency));
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	3301      	adds	r3, #1
 8004fd4:	4a29      	ldr	r2, [pc, #164]	@ (800507c <FCP_PhaseProcess+0x15c>)
 8004fd6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f000 f852 	bl	8005088 <abs_32>
 8004fe4:	60f8      	str	r0, [r7, #12]

      if (delta_1 <= delta_2)
 8004fe6:	693a      	ldr	r2, [r7, #16]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	429a      	cmp	r2, r3
 8004fec:	dc27      	bgt.n	800503e <FCP_PhaseProcess+0x11e>
      {
        // Set the prescaler value
        pwm_control_1->u16_prescaler
            = table_data_process[i - 1].prescaler_timer - 1;
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	3b01      	subs	r3, #1
 8004ff2:	4a22      	ldr	r2, [pc, #136]	@ (800507c <FCP_PhaseProcess+0x15c>)
 8004ff4:	00db      	lsls	r3, r3, #3
 8004ff6:	4413      	add	r3, r2
 8004ff8:	889b      	ldrh	r3, [r3, #4]
 8004ffa:	b29a      	uxth	r2, r3
        pwm_control_1->u16_prescaler
 8004ffc:	4b20      	ldr	r3, [pc, #128]	@ (8005080 <FCP_PhaseProcess+0x160>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
            = table_data_process[i - 1].prescaler_timer - 1;
 8005000:	3a01      	subs	r2, #1
 8005002:	b292      	uxth	r2, r2
 8005004:	811a      	strh	r2, [r3, #8]
        // Set the auto-reload register value
        pwm_control_1->u16_reg_auto_reload
            = table_data_process[i - 1].auto_reload_reg_timer - 1;
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	3b01      	subs	r3, #1
 800500a:	4a1c      	ldr	r2, [pc, #112]	@ (800507c <FCP_PhaseProcess+0x15c>)
 800500c:	00db      	lsls	r3, r3, #3
 800500e:	4413      	add	r3, r2
 8005010:	88db      	ldrh	r3, [r3, #6]
 8005012:	b29a      	uxth	r2, r3
        pwm_control_1->u16_reg_auto_reload
 8005014:	4b1a      	ldr	r3, [pc, #104]	@ (8005080 <FCP_PhaseProcess+0x160>)
 8005016:	681b      	ldr	r3, [r3, #0]
            = table_data_process[i - 1].auto_reload_reg_timer - 1;
 8005018:	3a01      	subs	r2, #1
 800501a:	b292      	uxth	r2, r2
 800501c:	809a      	strh	r2, [r3, #4]
        // Set the compare register value
        pwm_control_1->u16_reg_compare
            = table_data_process[i - 1].auto_reload_reg_timer * DUTY_CYCLE
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	3b01      	subs	r3, #1
 8005022:	4a16      	ldr	r2, [pc, #88]	@ (800507c <FCP_PhaseProcess+0x15c>)
 8005024:	00db      	lsls	r3, r3, #3
 8005026:	4413      	add	r3, r2
 8005028:	88db      	ldrh	r3, [r3, #6]
 800502a:	b29b      	uxth	r3, r3
              / 100;
 800502c:	0fda      	lsrs	r2, r3, #31
 800502e:	4413      	add	r3, r2
 8005030:	105b      	asrs	r3, r3, #1
 8005032:	461a      	mov	r2, r3
        pwm_control_1->u16_reg_compare
 8005034:	4b12      	ldr	r3, [pc, #72]	@ (8005080 <FCP_PhaseProcess+0x160>)
 8005036:	681b      	ldr	r3, [r3, #0]
            = table_data_process[i - 1].auto_reload_reg_timer * DUTY_CYCLE
 8005038:	b292      	uxth	r2, r2
 800503a:	80da      	strh	r2, [r3, #6]
        break;
 800503c:	e005      	b.n	800504a <FCP_PhaseProcess+0x12a>
    for (i = 0; i < SIZE_TABLE_DATA_PROCESS - 1; i++)
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	3301      	adds	r3, #1
 8005042:	617b      	str	r3, [r7, #20]
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	2ba8      	cmp	r3, #168	@ 0xa8
 8005048:	d9b8      	bls.n	8004fbc <FCP_PhaseProcess+0x9c>
      }
    }
  }

  // Apply the PWM parameters
  while (!(pwm_control_1->p_tim->CNT == pwm_control_1->p_tim->ARR))
 800504a:	bf00      	nop
 800504c:	4b0c      	ldr	r3, [pc, #48]	@ (8005080 <FCP_PhaseProcess+0x160>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005054:	4b0a      	ldr	r3, [pc, #40]	@ (8005080 <FCP_PhaseProcess+0x160>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800505c:	429a      	cmp	r2, r3
 800505e:	d1f5      	bne.n	800504c <FCP_PhaseProcess+0x12c>
    ;
  calculate_DeadTime(frequency);
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f000 f821 	bl	80050a8 <calculate_DeadTime>
  BSP_PWM_SetParameterProcess(pwm_control_1);
 8005066:	4b06      	ldr	r3, [pc, #24]	@ (8005080 <FCP_PhaseProcess+0x160>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4618      	mov	r0, r3
 800506c:	f7fd fcb2 	bl	80029d4 <BSP_PWM_SetParameterProcess>
}
 8005070:	bf00      	nop
 8005072:	3718      	adds	r7, #24
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}
 8005078:	00020788 	.word	0x00020788
 800507c:	08009d14 	.word	0x08009d14
 8005080:	200000e8 	.word	0x200000e8
 8005084:	000128df 	.word	0x000128df

08005088 <abs_32>:
 * @param num The 32-bit integer for which the absolute value is to be computed.
 * @return The absolute value of the input 32-bit integer.
 */
static int32_t
abs_32 (int32_t num)
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  if (num >= 0)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2b00      	cmp	r3, #0
 8005094:	db01      	blt.n	800509a <abs_32+0x12>
  {
    return num;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	e001      	b.n	800509e <abs_32+0x16>
  }
  else
  {
    return -num;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	425b      	negs	r3, r3
  }
}
 800509e:	4618      	mov	r0, r3
 80050a0:	370c      	adds	r7, #12
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bc80      	pop	{r7}
 80050a6:	4770      	bx	lr

080050a8 <calculate_DeadTime>:
 * with this code snippet?
 */

static void
calculate_DeadTime (uint32_t frequency)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  double temp                = 3.0 * C_EQ * 200000 * L_m * 0.00000000006;
 80050b0:	a309      	add	r3, pc, #36	@ (adr r3, 80050d8 <calculate_DeadTime+0x30>)
 80050b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050b6:	e9c7 2302 	strd	r2, r3, [r7, #8]
  pwm_control_1->u8_deadTime = (uint8_t)temp + 1;
 80050ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80050be:	f7fb fced 	bl	8000a9c <__aeabi_d2uiz>
 80050c2:	4603      	mov	r3, r0
 80050c4:	b2da      	uxtb	r2, r3
 80050c6:	4b06      	ldr	r3, [pc, #24]	@ (80050e0 <calculate_DeadTime+0x38>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	3201      	adds	r2, #1
 80050cc:	b2d2      	uxtb	r2, r2
 80050ce:	745a      	strb	r2, [r3, #17]
}
 80050d0:	bf00      	nop
 80050d2:	3710      	adds	r7, #16
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}
 80050d8:	90ff9724 	.word	0x90ff9724
 80050dc:	4026fb7e 	.word	0x4026fb7e
 80050e0:	200000e8 	.word	0x200000e8

080050e4 <PIControl_Reset>:
 *
 * @param p_pi Pointer to the PI controller structure to be reset.
 */
void
PIControl_Reset (pi_control_t *p_pi)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  p_pi->f_p_part    = 0; /**< @brief Reset proportional part. */
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f04f 0200 	mov.w	r2, #0
 80050f2:	601a      	str	r2, [r3, #0]
  p_pi->f_i_part    = 0; /**< @brief Reset integral part. */
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f04f 0200 	mov.w	r2, #0
 80050fa:	605a      	str	r2, [r3, #4]
  p_pi->f_out       = 0; /**< @brief Reset current output. */
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f04f 0200 	mov.w	r2, #0
 8005102:	609a      	str	r2, [r3, #8]
  p_pi->f_pre_out   = 0; /**< @brief Reset previous output. */
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f04f 0200 	mov.w	r2, #0
 800510a:	60da      	str	r2, [r3, #12]
  p_pi->f_error     = 0; /**< @brief Reset current error. */
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f04f 0200 	mov.w	r2, #0
 8005112:	611a      	str	r2, [r3, #16]
  p_pi->f_pre_error = 0; /**< @brief Reset previous error. */
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f04f 0200 	mov.w	r2, #0
 800511a:	615a      	str	r2, [r3, #20]
  p_pi->f_setPoint  = 0; /**< @brief Reset set point. */
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f04f 0200 	mov.w	r2, #0
 8005122:	621a      	str	r2, [r3, #32]
}
 8005124:	bf00      	nop
 8005126:	370c      	adds	r7, #12
 8005128:	46bd      	mov	sp, r7
 800512a:	bc80      	pop	{r7}
 800512c:	4770      	bx	lr
	...

08005130 <PIControl_Process>:
 * @param f_new_value New input value (feedback).
 * @param p_pi Pointer to the PI controller structure.
 */
void
PIControl_Process (float f_new_value, pi_control_t *p_pi)
{
 8005130:	b5b0      	push	{r4, r5, r7, lr}
 8005132:	b082      	sub	sp, #8
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	6039      	str	r1, [r7, #0]
  /**< @brief Calculate current error. */
  p_pi->f_error = f_new_value - p_pi->f_setPoint;
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	6a1b      	ldr	r3, [r3, #32]
 800513e:	4619      	mov	r1, r3
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f7fb fd1f 	bl	8000b84 <__aeabi_fsub>
 8005146:	4603      	mov	r3, r0
 8005148:	461a      	mov	r2, r3
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	611a      	str	r2, [r3, #16]

  /**< @brief Calculate proportional part. */
  p_pi->f_p_part = p_pi->f_Kp * (p_pi->f_error - p_pi->f_pre_error);
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	699c      	ldr	r4, [r3, #24]
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	691a      	ldr	r2, [r3, #16]
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	695b      	ldr	r3, [r3, #20]
 800515a:	4619      	mov	r1, r3
 800515c:	4610      	mov	r0, r2
 800515e:	f7fb fd11 	bl	8000b84 <__aeabi_fsub>
 8005162:	4603      	mov	r3, r0
 8005164:	4619      	mov	r1, r3
 8005166:	4620      	mov	r0, r4
 8005168:	f7fb fe16 	bl	8000d98 <__aeabi_fmul>
 800516c:	4603      	mov	r3, r0
 800516e:	461a      	mov	r2, r3
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	601a      	str	r2, [r3, #0]

  /**< @brief Calculate integral part. */
  p_pi->f_i_part = 0.5 * p_pi->f_Ki * CONTROL_PI_TIME_SAMPLE
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	69db      	ldr	r3, [r3, #28]
 8005178:	4618      	mov	r0, r3
 800517a:	f7fb f95f 	bl	800043c <__aeabi_f2d>
 800517e:	f04f 0200 	mov.w	r2, #0
 8005182:	4b25      	ldr	r3, [pc, #148]	@ (8005218 <PIControl_Process+0xe8>)
 8005184:	f7fb f9b2 	bl	80004ec <__aeabi_dmul>
 8005188:	4602      	mov	r2, r0
 800518a:	460b      	mov	r3, r1
 800518c:	4610      	mov	r0, r2
 800518e:	4619      	mov	r1, r3
 8005190:	f04f 0200 	mov.w	r2, #0
 8005194:	4b21      	ldr	r3, [pc, #132]	@ (800521c <PIControl_Process+0xec>)
 8005196:	f7fb f9a9 	bl	80004ec <__aeabi_dmul>
 800519a:	4602      	mov	r2, r0
 800519c:	460b      	mov	r3, r1
 800519e:	4614      	mov	r4, r2
 80051a0:	461d      	mov	r5, r3
                   * (p_pi->f_error + p_pi->f_pre_error);
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	691a      	ldr	r2, [r3, #16]
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	695b      	ldr	r3, [r3, #20]
 80051aa:	4619      	mov	r1, r3
 80051ac:	4610      	mov	r0, r2
 80051ae:	f7fb fceb 	bl	8000b88 <__addsf3>
 80051b2:	4603      	mov	r3, r0
 80051b4:	4618      	mov	r0, r3
 80051b6:	f7fb f941 	bl	800043c <__aeabi_f2d>
 80051ba:	4602      	mov	r2, r0
 80051bc:	460b      	mov	r3, r1
 80051be:	4620      	mov	r0, r4
 80051c0:	4629      	mov	r1, r5
 80051c2:	f7fb f993 	bl	80004ec <__aeabi_dmul>
 80051c6:	4602      	mov	r2, r0
 80051c8:	460b      	mov	r3, r1
 80051ca:	4610      	mov	r0, r2
 80051cc:	4619      	mov	r1, r3
 80051ce:	f7fb fc85 	bl	8000adc <__aeabi_d2f>
 80051d2:	4602      	mov	r2, r0
  p_pi->f_i_part = 0.5 * p_pi->f_Ki * CONTROL_PI_TIME_SAMPLE
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	605a      	str	r2, [r3, #4]

  /**< @brief Calculate current output. */
  p_pi->f_out = p_pi->f_pre_out + p_pi->f_p_part + p_pi->f_i_part;
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	68da      	ldr	r2, [r3, #12]
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4619      	mov	r1, r3
 80051e2:	4610      	mov	r0, r2
 80051e4:	f7fb fcd0 	bl	8000b88 <__addsf3>
 80051e8:	4603      	mov	r3, r0
 80051ea:	461a      	mov	r2, r3
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	4619      	mov	r1, r3
 80051f2:	4610      	mov	r0, r2
 80051f4:	f7fb fcc8 	bl	8000b88 <__addsf3>
 80051f8:	4603      	mov	r3, r0
 80051fa:	461a      	mov	r2, r3
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	609a      	str	r2, [r3, #8]

  // Update previous error and output for next iteration
  p_pi->f_pre_error = p_pi->f_error; /**< @brief Update previous error. */
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	691a      	ldr	r2, [r3, #16]
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	615a      	str	r2, [r3, #20]
  p_pi->f_pre_out   = p_pi->f_out;   /**< @brief Update previous output. */
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	689a      	ldr	r2, [r3, #8]
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	60da      	str	r2, [r3, #12]
}
 8005210:	bf00      	nop
 8005212:	3708      	adds	r7, #8
 8005214:	46bd      	mov	sp, r7
 8005216:	bdb0      	pop	{r4, r5, r7, pc}
 8005218:	3fe00000 	.word	0x3fe00000
 800521c:	40240000 	.word	0x40240000

08005220 <RING_BUFFER_Init>:
 * @param rb The parameter `rb` is a pointer to a `ring_buffer_t` structure,
 * which is used to implement a queue data structure.
 */
void
RING_BUFFER_Init (ring_buffer_t *rb)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b082      	sub	sp, #8
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  rb->u8_buffer = (uint8_t *)malloc(RING_BUFFER_SIZE);
 8005228:	2080      	movs	r0, #128	@ 0x80
 800522a:	f000 fac9 	bl	80057c0 <malloc>
 800522e:	4603      	mov	r3, r0
 8005230:	461a      	mov	r2, r3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	601a      	str	r2, [r3, #0]
  rb->u32_in    = 0;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	605a      	str	r2, [r3, #4]
  rb->u32_out   = 0;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	609a      	str	r2, [r3, #8]
  rb->u32_count = 0;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	60da      	str	r2, [r3, #12]
}
 8005248:	bf00      	nop
 800524a:	3708      	adds	r7, #8
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}

08005250 <RING_BUFFER_Reset>:
 *
 * @param rb Pointer to the ring buffer to reset.
 */
void
RING_BUFFER_Reset (ring_buffer_t *rb)
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  rb->u32_in    = 0;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	605a      	str	r2, [r3, #4]
  rb->u32_out   = 0;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	609a      	str	r2, [r3, #8]
  rb->u32_count = 0;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	60da      	str	r2, [r3, #12]
}
 800526a:	bf00      	nop
 800526c:	370c      	adds	r7, #12
 800526e:	46bd      	mov	sp, r7
 8005270:	bc80      	pop	{r7}
 8005272:	4770      	bx	lr

08005274 <RING_BUFFER_Is_Empty>:
 * of elements in the ring buffer is 0, indicating that the buffer is empty, and
 * `false` otherwise.
 */
bool
RING_BUFFER_Is_Empty (ring_buffer_t *rb)
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  return (rb->u32_count == 0);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	2b00      	cmp	r3, #0
 8005282:	bf0c      	ite	eq
 8005284:	2301      	moveq	r3, #1
 8005286:	2300      	movne	r3, #0
 8005288:	b2db      	uxtb	r3, r3
}
 800528a:	4618      	mov	r0, r3
 800528c:	370c      	adds	r7, #12
 800528e:	46bd      	mov	sp, r7
 8005290:	bc80      	pop	{r7}
 8005292:	4770      	bx	lr

08005294 <RING_BUFFER_Is_Full>:
 * `true` or `false`, based on whether the count of elements in the ring buffer
 * `rb` is equal to the predefined size `RING_BUFFER_SIZE`.
 */
bool
RING_BUFFER_Is_Full (ring_buffer_t *rb)
{
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  return (rb->u32_count == (uint32_t)RING_BUFFER_SIZE);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	2b80      	cmp	r3, #128	@ 0x80
 80052a2:	bf0c      	ite	eq
 80052a4:	2301      	moveq	r3, #1
 80052a6:	2300      	movne	r3, #0
 80052a8:	b2db      	uxtb	r3, r3
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	370c      	adds	r7, #12
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bc80      	pop	{r7}
 80052b2:	4770      	bx	lr

080052b4 <RING_BUFFER_Push_Data>:
 * represents the data element that needs to be added to the ring buffer. It is
 * of type `char`, which means it can store a single character (1 byte) of data.
 */
void
RING_BUFFER_Push_Data (ring_buffer_t *rb, char element)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b082      	sub	sp, #8
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	460b      	mov	r3, r1
 80052be:	70fb      	strb	r3, [r7, #3]
  if (RING_BUFFER_Is_Full(rb))
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f7ff ffe7 	bl	8005294 <RING_BUFFER_Is_Full>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d002      	beq.n	80052d2 <RING_BUFFER_Push_Data+0x1e>
  {
    RING_BUFFER_Reset(rb);
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f7ff ffbf 	bl	8005250 <RING_BUFFER_Reset>
  }
  *(rb->u8_buffer + rb->u32_in) = element;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	4413      	add	r3, r2
 80052dc:	78fa      	ldrb	r2, [r7, #3]
 80052de:	701a      	strb	r2, [r3, #0]

  rb->u32_in = (rb->u32_in + 1) & ((uint32_t)RING_BUFFER_SIZE - 1);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	3301      	adds	r3, #1
 80052e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	605a      	str	r2, [r3, #4]
  rb->u32_count++;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	1c5a      	adds	r2, r3, #1
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	60da      	str	r2, [r3, #12]
}
 80052f8:	bf00      	nop
 80052fa:	3708      	adds	r7, #8
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <RING_BUFFER_Pull_Data>:
 * @return The function `RING_BUFFER_Pull_Data` is returning a `uint8_t` data value
 * from the ring buffer pointed to by the `rb` parameter.
 */
uint8_t
RING_BUFFER_Pull_Data (ring_buffer_t *rb)
{
 8005300:	b590      	push	{r4, r7, lr}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  if (RING_BUFFER_Is_Empty(rb))
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f7ff ffb3 	bl	8005274 <RING_BUFFER_Is_Empty>
 800530e:	4603      	mov	r3, r0
 8005310:	2b00      	cmp	r3, #0
 8005312:	d001      	beq.n	8005318 <RING_BUFFER_Pull_Data+0x18>
  {
    return 0xFF;
 8005314:	23ff      	movs	r3, #255	@ 0xff
 8005316:	e013      	b.n	8005340 <RING_BUFFER_Pull_Data+0x40>
  }
  register uint8_t data = *(rb->u8_buffer + rb->u32_out);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	4413      	add	r3, r2
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	b2dc      	uxtb	r4, r3

  rb->u32_out = (rb->u32_out + 1) & ((uint32_t)RING_BUFFER_SIZE - 1);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	3301      	adds	r3, #1
 800532c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	609a      	str	r2, [r3, #8]
  rb->u32_count--;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	1e5a      	subs	r2, r3, #1
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	60da      	str	r2, [r3, #12]

  return data;
 800533e:	4623      	mov	r3, r4
}
 8005340:	4618      	mov	r0, r3
 8005342:	370c      	adds	r7, #12
 8005344:	46bd      	mov	sp, r7
 8005346:	bd90      	pop	{r4, r7, pc}

08005348 <VCF_Process>:
/**********************
 *    PUBLIC FUNCTIONS
 **********************/
uint32_t
VCF_Process (float voltage)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  float temp = -0.172233513 * voltage + 115.5723622;
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f7fb f873 	bl	800043c <__aeabi_f2d>
 8005356:	a310      	add	r3, pc, #64	@ (adr r3, 8005398 <VCF_Process+0x50>)
 8005358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800535c:	f7fb f8c6 	bl	80004ec <__aeabi_dmul>
 8005360:	4602      	mov	r2, r0
 8005362:	460b      	mov	r3, r1
 8005364:	4610      	mov	r0, r2
 8005366:	4619      	mov	r1, r3
 8005368:	a30d      	add	r3, pc, #52	@ (adr r3, 80053a0 <VCF_Process+0x58>)
 800536a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800536e:	f7fa ff07 	bl	8000180 <__adddf3>
 8005372:	4602      	mov	r2, r0
 8005374:	460b      	mov	r3, r1
 8005376:	4610      	mov	r0, r2
 8005378:	4619      	mov	r1, r3
 800537a:	f7fb fbaf 	bl	8000adc <__aeabi_d2f>
 800537e:	4603      	mov	r3, r0
 8005380:	60fb      	str	r3, [r7, #12]
  return (uint32_t)temp;
 8005382:	68f8      	ldr	r0, [r7, #12]
 8005384:	f7fb fece 	bl	8001124 <__aeabi_f2uiz>
 8005388:	4603      	mov	r3, r0
}
 800538a:	4618      	mov	r0, r3
 800538c:	3710      	adds	r7, #16
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
 8005392:	bf00      	nop
 8005394:	f3af 8000 	nop.w
 8005398:	6cce1abc 	.word	0x6cce1abc
 800539c:	bfc60bbf 	.word	0xbfc60bbf
 80053a0:	95109ddd 	.word	0x95109ddd
 80053a4:	405ce4a1 	.word	0x405ce4a1

080053a8 <SCH_Initialize>:
 * scheduler context, including task and timer contexts, as well as soft timers.
 * It also initializes the SysTick timer for scheduler operations.
 */
void
SCH_Initialize (void)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	af00      	add	r7, sp, #0
  s_SystemTick         = RESET; /**< @brief Reset system tick counter. */
 80053ac:	4b0d      	ldr	r3, [pc, #52]	@ (80053e4 <SCH_Initialize+0x3c>)
 80053ae:	2200      	movs	r2, #0
 80053b0:	601a      	str	r2, [r3, #0]
  s_NumOfTaskScheduled = RESET; /**< @brief Reset number of scheduled tasks. */
 80053b2:	4b0d      	ldr	r3, [pc, #52]	@ (80053e8 <SCH_Initialize+0x40>)
 80053b4:	2200      	movs	r2, #0
 80053b6:	701a      	strb	r2, [r3, #0]
  s_NumOfTimers        = RESET; /**< @brief Reset number of timers. */
 80053b8:	4b0c      	ldr	r3, [pc, #48]	@ (80053ec <SCH_Initialize+0x44>)
 80053ba:	2200      	movs	r2, #0
 80053bc:	701a      	strb	r2, [r3, #0]

  /**< @brief Initialize Scheduler Context */

  /**< @brief Clear task context array. */
  memset((uint8_t *)&s_TaskContext[0],
 80053be:	2230      	movs	r2, #48	@ 0x30
 80053c0:	2100      	movs	r1, #0
 80053c2:	480b      	ldr	r0, [pc, #44]	@ (80053f0 <SCH_Initialize+0x48>)
 80053c4:	f001 fe39 	bl	800703a <memset>
         RESET,
         (sizeof(SCH_TaskContextTypedef) * MAX_TASK));

  /**< @brief Clear timer context array. */
  memset((uint8_t *)&s_TimerContext[0],
 80053c8:	2218      	movs	r2, #24
 80053ca:	2100      	movs	r1, #0
 80053cc:	4809      	ldr	r0, [pc, #36]	@ (80053f4 <SCH_Initialize+0x4c>)
 80053ce:	f001 fe34 	bl	800703a <memset>
         RESET,
         (sizeof(SCH_TimerContextTypedef) * MAX_TIMERS));

  /**< @brief Clear soft timers array. */
  memset((uint8_t *)&s_SoftTimers[0], RESET, (sizeof(uint32_t) * SCH_TIM_LAST));
 80053d2:	2208      	movs	r2, #8
 80053d4:	2100      	movs	r1, #0
 80053d6:	4808      	ldr	r0, [pc, #32]	@ (80053f8 <SCH_Initialize+0x50>)
 80053d8:	f001 fe2f 	bl	800703a <memset>

  /**< @brief Initialize SysTick timer. */
  BSP_SYSTICK_TimerInit();
 80053dc:	f7fd f962 	bl	80026a4 <BSP_SYSTICK_TimerInit>
}
 80053e0:	bf00      	nop
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	20000570 	.word	0x20000570
 80053e8:	20000550 	.word	0x20000550
 80053ec:	2000056c 	.word	0x2000056c
 80053f0:	20000520 	.word	0x20000520
 80053f4:	20000554 	.word	0x20000554
 80053f8:	20000574 	.word	0x20000574

080053fc <SCH_TASK_EnableTask>:
 * operation, which can be either `STS_ERROR` if the task index is out of range
 * or `STS_DONE` if the task is successfully enabled.
 */
status_t
SCH_TASK_EnableTask (SCH_TASK_HANDLE taskIndex)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b085      	sub	sp, #20
 8005400:	af00      	add	r7, sp, #0
 8005402:	4603      	mov	r3, r0
 8005404:	71fb      	strb	r3, [r7, #7]
  status_t status
 8005406:	2301      	movs	r3, #1
 8005408:	73fb      	strb	r3, [r7, #15]
      = STS_ERROR; /**< @brief Initialize status to indicate error. */

  if (taskIndex < s_NumOfTaskScheduled)
 800540a:	4b0c      	ldr	r3, [pc, #48]	@ (800543c <SCH_TASK_EnableTask+0x40>)
 800540c:	781b      	ldrb	r3, [r3, #0]
 800540e:	79fa      	ldrb	r2, [r7, #7]
 8005410:	429a      	cmp	r2, r3
 8005412:	d20c      	bcs.n	800542e <SCH_TASK_EnableTask+0x32>
  {
    /**< @brief Get Task Context */
    SCH_TaskContextTypedef *pTaskContext = &s_TaskContext[taskIndex];
 8005414:	79fa      	ldrb	r2, [r7, #7]
 8005416:	4613      	mov	r3, r2
 8005418:	005b      	lsls	r3, r3, #1
 800541a:	4413      	add	r3, r2
 800541c:	009b      	lsls	r3, r3, #2
 800541e:	4a08      	ldr	r2, [pc, #32]	@ (8005440 <SCH_TASK_EnableTask+0x44>)
 8005420:	4413      	add	r3, r2
 8005422:	60bb      	str	r3, [r7, #8]
    pTaskContext->taskFlag               = TRUE;
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	2201      	movs	r2, #1
 8005428:	805a      	strh	r2, [r3, #2]
    status                               = STS_DONE;
 800542a:	2300      	movs	r3, #0
 800542c:	73fb      	strb	r3, [r7, #15]
  }

  /**< @brief Return the status of the operation. */
  return status;
 800542e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005430:	4618      	mov	r0, r3
 8005432:	3714      	adds	r7, #20
 8005434:	46bd      	mov	sp, r7
 8005436:	bc80      	pop	{r7}
 8005438:	4770      	bx	lr
 800543a:	bf00      	nop
 800543c:	20000550 	.word	0x20000550
 8005440:	20000520 	.word	0x20000520

08005444 <SCH_TASK_CreateTask>:
 *         otherwise returns STS_ERROR.
 */
status_t
SCH_TASK_CreateTask (SCH_TASK_HANDLE         *pHandle,
                     SCH_TaskPropertyTypedef *pTaskProperty)
{
 8005444:	b480      	push	{r7}
 8005446:	b085      	sub	sp, #20
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	6039      	str	r1, [r7, #0]
  status_t status
 800544e:	2301      	movs	r3, #1
 8005450:	73fb      	strb	r3, [r7, #15]
      = STS_ERROR; /**< @brief Initialize status to indicate error. */

  /**< @brief Ensure valid parameters are provided */
  if (pHandle && pTaskProperty)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d029      	beq.n	80054ac <SCH_TASK_CreateTask+0x68>
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d026      	beq.n	80054ac <SCH_TASK_CreateTask+0x68>
  {
    /**< @brief Check if there's room for more tasks */
    if (s_NumOfTaskScheduled < (MAX_TASK - 1))
 800545e:	4b16      	ldr	r3, [pc, #88]	@ (80054b8 <SCH_TASK_CreateTask+0x74>)
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	2b02      	cmp	r3, #2
 8005464:	d822      	bhi.n	80054ac <SCH_TASK_CreateTask+0x68>
    {
      SCH_TaskContextTypedef *pTaskContext
          = &s_TaskContext[s_NumOfTaskScheduled];
 8005466:	4b14      	ldr	r3, [pc, #80]	@ (80054b8 <SCH_TASK_CreateTask+0x74>)
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	461a      	mov	r2, r3
      SCH_TaskContextTypedef *pTaskContext
 800546c:	4613      	mov	r3, r2
 800546e:	005b      	lsls	r3, r3, #1
 8005470:	4413      	add	r3, r2
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	4a11      	ldr	r2, [pc, #68]	@ (80054bc <SCH_TASK_CreateTask+0x78>)
 8005476:	4413      	add	r3, r2
 8005478:	60bb      	str	r3, [r7, #8]

      /**< @brief Set task properties in task context */
      pTaskContext->pTaskProperty = pTaskProperty;
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	683a      	ldr	r2, [r7, #0]
 800547e:	609a      	str	r2, [r3, #8]
      pTaskContext->taskFlag      = FALSE;
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	2200      	movs	r2, #0
 8005484:	805a      	strh	r2, [r3, #2]
      pTaskContext->taskTick      = pTaskProperty->taskTick;
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	689a      	ldr	r2, [r3, #8]
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	605a      	str	r2, [r3, #4]
      pTaskContext->taskState     = TASK_StateReady;
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	2201      	movs	r2, #1
 8005492:	701a      	strb	r2, [r3, #0]

      /**< @brief Provide task handle to caller */
      *pHandle = s_NumOfTaskScheduled;
 8005494:	4b08      	ldr	r3, [pc, #32]	@ (80054b8 <SCH_TASK_CreateTask+0x74>)
 8005496:	781a      	ldrb	r2, [r3, #0]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	701a      	strb	r2, [r3, #0]

      /**< @brief Increment task count */
      s_NumOfTaskScheduled++;
 800549c:	4b06      	ldr	r3, [pc, #24]	@ (80054b8 <SCH_TASK_CreateTask+0x74>)
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	3301      	adds	r3, #1
 80054a2:	b2da      	uxtb	r2, r3
 80054a4:	4b04      	ldr	r3, [pc, #16]	@ (80054b8 <SCH_TASK_CreateTask+0x74>)
 80054a6:	701a      	strb	r2, [r3, #0]

      /**< @brief Task registered successfully */
      status = STS_DONE;
 80054a8:	2300      	movs	r3, #0
 80054aa:	73fb      	strb	r3, [r7, #15]
    }
  }

  /**< @brief Return the status of the operation. */
  return status;
 80054ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3714      	adds	r7, #20
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bc80      	pop	{r7}
 80054b6:	4770      	bx	lr
 80054b8:	20000550 	.word	0x20000550
 80054bc:	20000520 	.word	0x20000520

080054c0 <SCH_TIM_CreateTimer>:
 * registered, otherwise returns STS_ERROR.
 */
status_t
SCH_TIM_CreateTimer (SCH_TIMER_HANDLE         *pHandle,
                     SCH_TimerPropertyTypedef *pTimerProperty)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b085      	sub	sp, #20
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
  status_t status
 80054ca:	2301      	movs	r3, #1
 80054cc:	73fb      	strb	r3, [r7, #15]
      = STS_ERROR; /**< @brief Initialize status to indicate error. */

  /**< @brief Ensure valid parameters are provided */
  if (pHandle && pTimerProperty)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d028      	beq.n	8005526 <SCH_TIM_CreateTimer+0x66>
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d025      	beq.n	8005526 <SCH_TIM_CreateTimer+0x66>
  {
    /**< @brief Check if there's room for more timers */
    if (s_NumOfTimers < (MAX_TIMERS - 1))
 80054da:	4b16      	ldr	r3, [pc, #88]	@ (8005534 <SCH_TIM_CreateTimer+0x74>)
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d121      	bne.n	8005526 <SCH_TIM_CreateTimer+0x66>
    {
      SCH_TimerContextTypedef *pTimerContext = &s_TimerContext[s_NumOfTimers];
 80054e2:	4b14      	ldr	r3, [pc, #80]	@ (8005534 <SCH_TIM_CreateTimer+0x74>)
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	461a      	mov	r2, r3
 80054e8:	4613      	mov	r3, r2
 80054ea:	005b      	lsls	r3, r3, #1
 80054ec:	4413      	add	r3, r2
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	4a11      	ldr	r2, [pc, #68]	@ (8005538 <SCH_TIM_CreateTimer+0x78>)
 80054f2:	4413      	add	r3, r2
 80054f4:	60bb      	str	r3, [r7, #8]

      /**< @brief Set timer properties in timer context */
      pTimerContext->pTimerProperty = pTimerProperty;
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	683a      	ldr	r2, [r7, #0]
 80054fa:	609a      	str	r2, [r3, #8]
      pTimerContext->timerState     = TIM_StateStop;
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	2200      	movs	r2, #0
 8005500:	701a      	strb	r2, [r3, #0]
      pTimerContext->timerFlag      = FALSE;
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	2200      	movs	r2, #0
 8005506:	805a      	strh	r2, [r3, #2]
      pTimerContext->timerTick      = RESET;
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	2200      	movs	r2, #0
 800550c:	605a      	str	r2, [r3, #4]

      /**< @brief Provide timer handle to caller */
      *pHandle = s_NumOfTimers;
 800550e:	4b09      	ldr	r3, [pc, #36]	@ (8005534 <SCH_TIM_CreateTimer+0x74>)
 8005510:	781a      	ldrb	r2, [r3, #0]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	701a      	strb	r2, [r3, #0]

      /**< @brief Increment timer count */
      s_NumOfTimers++;
 8005516:	4b07      	ldr	r3, [pc, #28]	@ (8005534 <SCH_TIM_CreateTimer+0x74>)
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	3301      	adds	r3, #1
 800551c:	b2da      	uxtb	r2, r3
 800551e:	4b05      	ldr	r3, [pc, #20]	@ (8005534 <SCH_TIM_CreateTimer+0x74>)
 8005520:	701a      	strb	r2, [r3, #0]

      /**< @brief Timer registered successfully */
      status = STS_DONE;
 8005522:	2300      	movs	r3, #0
 8005524:	73fb      	strb	r3, [r7, #15]
    }
  }

  /**< @brief Return the status of the operation. */
  return status;
 8005526:	7bfb      	ldrb	r3, [r7, #15]
}
 8005528:	4618      	mov	r0, r3
 800552a:	3714      	adds	r7, #20
 800552c:	46bd      	mov	sp, r7
 800552e:	bc80      	pop	{r7}
 8005530:	4770      	bx	lr
 8005532:	bf00      	nop
 8005534:	2000056c 	.word	0x2000056c
 8005538:	20000554 	.word	0x20000554

0800553c <SCH_TIM_RestartTimer>:
 * @return Returns STS_DONE if the timer was successfully restarted,
 *         otherwise returns STS_ERROR.
 */
status_t
SCH_TIM_RestartTimer (SCH_TIMER_HANDLE timerIndex)
{
 800553c:	b480      	push	{r7}
 800553e:	b085      	sub	sp, #20
 8005540:	af00      	add	r7, sp, #0
 8005542:	4603      	mov	r3, r0
 8005544:	71fb      	strb	r3, [r7, #7]
  status_t status
 8005546:	2301      	movs	r3, #1
 8005548:	73fb      	strb	r3, [r7, #15]
      = STS_ERROR; /**< @brief Initialize status to indicate error. */

  if (timerIndex < s_NumOfTimers)
 800554a:	4b0d      	ldr	r3, [pc, #52]	@ (8005580 <SCH_TIM_RestartTimer+0x44>)
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	79fa      	ldrb	r2, [r7, #7]
 8005550:	429a      	cmp	r2, r3
 8005552:	d20f      	bcs.n	8005574 <SCH_TIM_RestartTimer+0x38>
  {
    /**< @brief Get Timer Context */
    SCH_TimerContextTypedef *pTimerContext = &s_TimerContext[timerIndex];
 8005554:	79fa      	ldrb	r2, [r7, #7]
 8005556:	4613      	mov	r3, r2
 8005558:	005b      	lsls	r3, r3, #1
 800555a:	4413      	add	r3, r2
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	4a09      	ldr	r2, [pc, #36]	@ (8005584 <SCH_TIM_RestartTimer+0x48>)
 8005560:	4413      	add	r3, r2
 8005562:	60bb      	str	r3, [r7, #8]
    pTimerContext->timerTick               = RESET;
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	2200      	movs	r2, #0
 8005568:	605a      	str	r2, [r3, #4]
    pTimerContext->timerState              = TIM_StateRun;
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	2201      	movs	r2, #1
 800556e:	701a      	strb	r2, [r3, #0]
    status                                 = STS_DONE;
 8005570:	2300      	movs	r3, #0
 8005572:	73fb      	strb	r3, [r7, #15]
  }

  /**< @brief Return the status of the operation. */
  return status;
 8005574:	7bfb      	ldrb	r3, [r7, #15]
}
 8005576:	4618      	mov	r0, r3
 8005578:	3714      	adds	r7, #20
 800557a:	46bd      	mov	sp, r7
 800557c:	bc80      	pop	{r7}
 800557e:	4770      	bx	lr
 8005580:	2000056c 	.word	0x2000056c
 8005584:	20000554 	.word	0x20000554

08005588 <SCH_TIM_StopTimer>:
 * @return Returns STS_DONE if the timer was successfully stopped,
 *         otherwise returns STS_ERROR.
 */
status_t
SCH_TIM_StopTimer (SCH_TIMER_HANDLE timerIndex)
{
 8005588:	b480      	push	{r7}
 800558a:	b085      	sub	sp, #20
 800558c:	af00      	add	r7, sp, #0
 800558e:	4603      	mov	r3, r0
 8005590:	71fb      	strb	r3, [r7, #7]
  status_t status
 8005592:	2301      	movs	r3, #1
 8005594:	73fb      	strb	r3, [r7, #15]
      = STS_ERROR; /**< @brief Initialize status to indicate error. */

  if (timerIndex < s_NumOfTimers)
 8005596:	4b0c      	ldr	r3, [pc, #48]	@ (80055c8 <SCH_TIM_StopTimer+0x40>)
 8005598:	781b      	ldrb	r3, [r3, #0]
 800559a:	79fa      	ldrb	r2, [r7, #7]
 800559c:	429a      	cmp	r2, r3
 800559e:	d20c      	bcs.n	80055ba <SCH_TIM_StopTimer+0x32>
  {
    /**< @brief Get Timer Context */
    SCH_TimerContextTypedef *pTimerContext = &s_TimerContext[timerIndex];
 80055a0:	79fa      	ldrb	r2, [r7, #7]
 80055a2:	4613      	mov	r3, r2
 80055a4:	005b      	lsls	r3, r3, #1
 80055a6:	4413      	add	r3, r2
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	4a08      	ldr	r2, [pc, #32]	@ (80055cc <SCH_TIM_StopTimer+0x44>)
 80055ac:	4413      	add	r3, r2
 80055ae:	60bb      	str	r3, [r7, #8]
    pTimerContext->timerState              = TIM_StateStop;
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	2200      	movs	r2, #0
 80055b4:	701a      	strb	r2, [r3, #0]
    status                                 = STS_DONE;
 80055b6:	2300      	movs	r3, #0
 80055b8:	73fb      	strb	r3, [r7, #15]
  }

  /**< @brief Return the status of the operation. */
  return status;
 80055ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3714      	adds	r7, #20
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bc80      	pop	{r7}
 80055c4:	4770      	bx	lr
 80055c6:	bf00      	nop
 80055c8:	2000056c 	.word	0x2000056c
 80055cc:	20000554 	.word	0x20000554

080055d0 <SCH_RunSystemTickTimer>:
 * and timer ticks, checks if their periods have elapsed, and updates their
 * flags accordingly. Additionally, it decrements software timers.
 */
void
SCH_RunSystemTickTimer (void)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b085      	sub	sp, #20
 80055d4:	af00      	add	r7, sp, #0
  uint8_t                 timerIndex; /**< @brief Index variable for timers. */
  SCH_TimerContextTypedef
      *pTimerContext; /**< @brief Pointer to timer context. */

  /**< @brief Increment System Tick counter */
  s_SystemTick++;
 80055d6:	4b42      	ldr	r3, [pc, #264]	@ (80056e0 <SCH_RunSystemTickTimer+0x110>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	3301      	adds	r3, #1
 80055dc:	4a40      	ldr	r2, [pc, #256]	@ (80056e0 <SCH_RunSystemTickTimer+0x110>)
 80055de:	6013      	str	r3, [r2, #0]

  /**< @brief Check Status of periodic tasks */
  for (taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 80055e0:	2300      	movs	r3, #0
 80055e2:	73fb      	strb	r3, [r7, #15]
 80055e4:	e025      	b.n	8005632 <SCH_RunSystemTickTimer+0x62>
  {
    /**< @brief Get Task Context */
    pTaskContext = &s_TaskContext[taskIndex];
 80055e6:	7bfa      	ldrb	r2, [r7, #15]
 80055e8:	4613      	mov	r3, r2
 80055ea:	005b      	lsls	r3, r3, #1
 80055ec:	4413      	add	r3, r2
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	4a3c      	ldr	r2, [pc, #240]	@ (80056e4 <SCH_RunSystemTickTimer+0x114>)
 80055f2:	4413      	add	r3, r2
 80055f4:	607b      	str	r3, [r7, #4]

    /**< @brief Check type and State of the task */
    if ((SCH_TASK_SYNC == pTaskContext->pTaskProperty->taskType)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d115      	bne.n	800562c <SCH_RunSystemTickTimer+0x5c>
        && (TASK_StateReady == pTaskContext->taskState))
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	781b      	ldrb	r3, [r3, #0]
 8005604:	2b01      	cmp	r3, #1
 8005606:	d111      	bne.n	800562c <SCH_RunSystemTickTimer+0x5c>
    {
      /**< @brief Increment task tick */
      pTaskContext->taskTick += 1;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	1c5a      	adds	r2, r3, #1
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	605a      	str	r2, [r3, #4]

      /**< @brief Check if we reached task period */
      if (pTaskContext->taskTick >= pTaskContext->pTaskProperty->taskPeriodInMS)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	6892      	ldr	r2, [r2, #8]
 800561a:	8852      	ldrh	r2, [r2, #2]
 800561c:	4293      	cmp	r3, r2
 800561e:	d305      	bcc.n	800562c <SCH_RunSystemTickTimer+0x5c>
      {
        /**< @brief Reset Task tick timer */
        pTaskContext->taskTick = RESET;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	605a      	str	r2, [r3, #4]
        /**< @brief Enable Flag */
        pTaskContext->taskFlag = TRUE;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2201      	movs	r2, #1
 800562a:	805a      	strh	r2, [r3, #2]
  for (taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 800562c:	7bfb      	ldrb	r3, [r7, #15]
 800562e:	3301      	adds	r3, #1
 8005630:	73fb      	strb	r3, [r7, #15]
 8005632:	4b2d      	ldr	r3, [pc, #180]	@ (80056e8 <SCH_RunSystemTickTimer+0x118>)
 8005634:	781b      	ldrb	r3, [r3, #0]
 8005636:	7bfa      	ldrb	r2, [r7, #15]
 8005638:	429a      	cmp	r2, r3
 800563a:	d3d4      	bcc.n	80055e6 <SCH_RunSystemTickTimer+0x16>
      }
    }
  }

  /**< @brief Check Status of timers */
  for (timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 800563c:	2300      	movs	r3, #0
 800563e:	73bb      	strb	r3, [r7, #14]
 8005640:	e02b      	b.n	800569a <SCH_RunSystemTickTimer+0xca>
  {
    /**< @brief Get Timer Context */
    pTimerContext = &s_TimerContext[timerIndex];
 8005642:	7bba      	ldrb	r2, [r7, #14]
 8005644:	4613      	mov	r3, r2
 8005646:	005b      	lsls	r3, r3, #1
 8005648:	4413      	add	r3, r2
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	4a27      	ldr	r2, [pc, #156]	@ (80056ec <SCH_RunSystemTickTimer+0x11c>)
 800564e:	4413      	add	r3, r2
 8005650:	60bb      	str	r3, [r7, #8]

    /**< @brief Check type and State of the timer */
    if (TIM_StateRun == pTimerContext->timerState)
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	2b01      	cmp	r3, #1
 8005658:	d11c      	bne.n	8005694 <SCH_RunSystemTickTimer+0xc4>
    {
      /**< @brief Increment timer tick */
      pTimerContext->timerTick += 1;
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	1c5a      	adds	r2, r3, #1
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	605a      	str	r2, [r3, #4]

      /**< @brief Check if we reached timer period */
      if (pTimerContext->timerTick
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	685b      	ldr	r3, [r3, #4]
          >= pTimerContext->pTimerProperty->timerPeriodInMS)
 8005668:	68ba      	ldr	r2, [r7, #8]
 800566a:	6892      	ldr	r2, [r2, #8]
 800566c:	8852      	ldrh	r2, [r2, #2]
      if (pTimerContext->timerTick
 800566e:	4293      	cmp	r3, r2
 8005670:	d310      	bcc.n	8005694 <SCH_RunSystemTickTimer+0xc4>
      {
        /**< @brief Enable Flag */
        pTimerContext->timerFlag = TRUE;
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	2201      	movs	r2, #1
 8005676:	805a      	strh	r2, [r3, #2]
        /**< @brief Reset tick timer */
        pTimerContext->timerTick = RESET;
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	2200      	movs	r2, #0
 800567c:	605a      	str	r2, [r3, #4]
        /**< @brief Check timer type and change the state */
        pTimerContext->timerState
            = (SCH_TIMER_PERIODIC == pTimerContext->pTimerProperty->timerType)
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	781b      	ldrb	r3, [r3, #0]
                  ? TIM_StateRun
                  : TIM_StateStop;
 8005684:	2b02      	cmp	r3, #2
 8005686:	bf0c      	ite	eq
 8005688:	2301      	moveq	r3, #1
 800568a:	2300      	movne	r3, #0
 800568c:	b2db      	uxtb	r3, r3
 800568e:	461a      	mov	r2, r3
            = (SCH_TIMER_PERIODIC == pTimerContext->pTimerProperty->timerType)
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	701a      	strb	r2, [r3, #0]
  for (timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 8005694:	7bbb      	ldrb	r3, [r7, #14]
 8005696:	3301      	adds	r3, #1
 8005698:	73bb      	strb	r3, [r7, #14]
 800569a:	4b15      	ldr	r3, [pc, #84]	@ (80056f0 <SCH_RunSystemTickTimer+0x120>)
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	7bba      	ldrb	r2, [r7, #14]
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d3ce      	bcc.n	8005642 <SCH_RunSystemTickTimer+0x72>
      }
    }
  }

  /**< @brief Update software timers */
  for (timerIndex = 0; timerIndex < SCH_TIM_LAST; timerIndex++)
 80056a4:	2300      	movs	r3, #0
 80056a6:	73bb      	strb	r3, [r7, #14]
 80056a8:	e010      	b.n	80056cc <SCH_RunSystemTickTimer+0xfc>
  {
    if (s_SoftTimers[timerIndex] > 0)
 80056aa:	7bbb      	ldrb	r3, [r7, #14]
 80056ac:	4a11      	ldr	r2, [pc, #68]	@ (80056f4 <SCH_RunSystemTickTimer+0x124>)
 80056ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d007      	beq.n	80056c6 <SCH_RunSystemTickTimer+0xf6>
    {
      s_SoftTimers[timerIndex]--;
 80056b6:	7bbb      	ldrb	r3, [r7, #14]
 80056b8:	4a0e      	ldr	r2, [pc, #56]	@ (80056f4 <SCH_RunSystemTickTimer+0x124>)
 80056ba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80056be:	3a01      	subs	r2, #1
 80056c0:	490c      	ldr	r1, [pc, #48]	@ (80056f4 <SCH_RunSystemTickTimer+0x124>)
 80056c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (timerIndex = 0; timerIndex < SCH_TIM_LAST; timerIndex++)
 80056c6:	7bbb      	ldrb	r3, [r7, #14]
 80056c8:	3301      	adds	r3, #1
 80056ca:	73bb      	strb	r3, [r7, #14]
 80056cc:	7bbb      	ldrb	r3, [r7, #14]
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d9eb      	bls.n	80056aa <SCH_RunSystemTickTimer+0xda>
    }
  }
}
 80056d2:	bf00      	nop
 80056d4:	bf00      	nop
 80056d6:	3714      	adds	r7, #20
 80056d8:	46bd      	mov	sp, r7
 80056da:	bc80      	pop	{r7}
 80056dc:	4770      	bx	lr
 80056de:	bf00      	nop
 80056e0:	20000570 	.word	0x20000570
 80056e4:	20000520 	.word	0x20000520
 80056e8:	20000550 	.word	0x20000550
 80056ec:	20000554 	.word	0x20000554
 80056f0:	2000056c 	.word	0x2000056c
 80056f4:	20000574 	.word	0x20000574

080056f8 <SCH_StartScheduler>:
 * the system tick timer or performs any necessary operations to begin the
 * scheduling of tasks and timers.
 */
void
SCH_StartScheduler (void)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	af00      	add	r7, sp, #0
  /**< @brief Scheduler by initiating the system tick timer */
  SCH_START;
 80056fc:	f7fc ffc4 	bl	8002688 <BSP_SYSTICK_TimerStart>
}
 8005700:	bf00      	nop
 8005702:	bd80      	pop	{r7, pc}

08005704 <SCH_HandleScheduledTask>:
 * is set and it is in the ready state, its associated function is called.
 * Similarly, if a timer's flag is set, its callback function is invoked.
 */
void
SCH_HandleScheduledTask (void)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
  uint8_t                 timerIndex; /**< @brief Index variable for timers. */
  SCH_TimerContextTypedef
      *pTimerContext; /**< @brief Pointer to timer context. */

  /**< @brief Handle scheduled tasks */
  for (taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 800570a:	2300      	movs	r3, #0
 800570c:	73fb      	strb	r3, [r7, #15]
 800570e:	e01e      	b.n	800574e <SCH_HandleScheduledTask+0x4a>
  {
    /**< @brief Get Task Context */
    pTaskContext = &s_TaskContext[taskIndex];
 8005710:	7bfa      	ldrb	r2, [r7, #15]
 8005712:	4613      	mov	r3, r2
 8005714:	005b      	lsls	r3, r3, #1
 8005716:	4413      	add	r3, r2
 8005718:	009b      	lsls	r3, r3, #2
 800571a:	4a23      	ldr	r2, [pc, #140]	@ (80057a8 <SCH_HandleScheduledTask+0xa4>)
 800571c:	4413      	add	r3, r2
 800571e:	607b      	str	r3, [r7, #4]

    /**< @brief Check type and State of the task */
    if ((TRUE == pTaskContext->taskFlag)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	885b      	ldrh	r3, [r3, #2]
 8005724:	2b01      	cmp	r3, #1
 8005726:	d10f      	bne.n	8005748 <SCH_HandleScheduledTask+0x44>
        && (TASK_StateReady == pTaskContext->taskState))
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	781b      	ldrb	r3, [r3, #0]
 800572c:	2b01      	cmp	r3, #1
 800572e:	d10b      	bne.n	8005748 <SCH_HandleScheduledTask+0x44>
    {
      pTaskContext->taskFlag = FALSE;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	805a      	strh	r2, [r3, #2]
      /**< @brief Call task function if defined */
      if (pTaskContext->pTaskProperty->taskFunction)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d003      	beq.n	8005748 <SCH_HandleScheduledTask+0x44>
      {
        pTaskContext->pTaskProperty->taskFunction();
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	4798      	blx	r3
  for (taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 8005748:	7bfb      	ldrb	r3, [r7, #15]
 800574a:	3301      	adds	r3, #1
 800574c:	73fb      	strb	r3, [r7, #15]
 800574e:	4b17      	ldr	r3, [pc, #92]	@ (80057ac <SCH_HandleScheduledTask+0xa8>)
 8005750:	781b      	ldrb	r3, [r3, #0]
 8005752:	7bfa      	ldrb	r2, [r7, #15]
 8005754:	429a      	cmp	r2, r3
 8005756:	d3db      	bcc.n	8005710 <SCH_HandleScheduledTask+0xc>
      }
    }
  }

  /**< @brief Handle scheduled timers */
  for (timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 8005758:	2300      	movs	r3, #0
 800575a:	73bb      	strb	r3, [r7, #14]
 800575c:	e01a      	b.n	8005794 <SCH_HandleScheduledTask+0x90>
  {
    /**< @brief Get Timer Context */
    pTimerContext = &s_TimerContext[timerIndex];
 800575e:	7bba      	ldrb	r2, [r7, #14]
 8005760:	4613      	mov	r3, r2
 8005762:	005b      	lsls	r3, r3, #1
 8005764:	4413      	add	r3, r2
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	4a11      	ldr	r2, [pc, #68]	@ (80057b0 <SCH_HandleScheduledTask+0xac>)
 800576a:	4413      	add	r3, r2
 800576c:	60bb      	str	r3, [r7, #8]

    /**< @brief Check timer flag */
    if (TRUE == pTimerContext->timerFlag)
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	885b      	ldrh	r3, [r3, #2]
 8005772:	2b01      	cmp	r3, #1
 8005774:	d10b      	bne.n	800578e <SCH_HandleScheduledTask+0x8a>
    {
      pTimerContext->timerFlag = FALSE;
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	2200      	movs	r2, #0
 800577a:	805a      	strh	r2, [r3, #2]
      /**< @brief Call timer callback function if defined */
      if (pTimerContext->pTimerProperty->timerCallbackFunction)
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d003      	beq.n	800578e <SCH_HandleScheduledTask+0x8a>
      {
        pTimerContext->pTimerProperty->timerCallbackFunction();
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	4798      	blx	r3
  for (timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 800578e:	7bbb      	ldrb	r3, [r7, #14]
 8005790:	3301      	adds	r3, #1
 8005792:	73bb      	strb	r3, [r7, #14]
 8005794:	4b07      	ldr	r3, [pc, #28]	@ (80057b4 <SCH_HandleScheduledTask+0xb0>)
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	7bba      	ldrb	r2, [r7, #14]
 800579a:	429a      	cmp	r2, r3
 800579c:	d3df      	bcc.n	800575e <SCH_HandleScheduledTask+0x5a>
      }
    }
  }
}
 800579e:	bf00      	nop
 80057a0:	bf00      	nop
 80057a2:	3710      	adds	r7, #16
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}
 80057a8:	20000520 	.word	0x20000520
 80057ac:	20000550 	.word	0x20000550
 80057b0:	20000554 	.word	0x20000554
 80057b4:	2000056c 	.word	0x2000056c

080057b8 <atof>:
 80057b8:	2100      	movs	r1, #0
 80057ba:	f000 beb1 	b.w	8006520 <strtod>
	...

080057c0 <malloc>:
 80057c0:	4b02      	ldr	r3, [pc, #8]	@ (80057cc <malloc+0xc>)
 80057c2:	4601      	mov	r1, r0
 80057c4:	6818      	ldr	r0, [r3, #0]
 80057c6:	f000 b825 	b.w	8005814 <_malloc_r>
 80057ca:	bf00      	nop
 80057cc:	20000264 	.word	0x20000264

080057d0 <sbrk_aligned>:
 80057d0:	b570      	push	{r4, r5, r6, lr}
 80057d2:	4e0f      	ldr	r6, [pc, #60]	@ (8005810 <sbrk_aligned+0x40>)
 80057d4:	460c      	mov	r4, r1
 80057d6:	6831      	ldr	r1, [r6, #0]
 80057d8:	4605      	mov	r5, r0
 80057da:	b911      	cbnz	r1, 80057e2 <sbrk_aligned+0x12>
 80057dc:	f001 fc80 	bl	80070e0 <_sbrk_r>
 80057e0:	6030      	str	r0, [r6, #0]
 80057e2:	4621      	mov	r1, r4
 80057e4:	4628      	mov	r0, r5
 80057e6:	f001 fc7b 	bl	80070e0 <_sbrk_r>
 80057ea:	1c43      	adds	r3, r0, #1
 80057ec:	d103      	bne.n	80057f6 <sbrk_aligned+0x26>
 80057ee:	f04f 34ff 	mov.w	r4, #4294967295
 80057f2:	4620      	mov	r0, r4
 80057f4:	bd70      	pop	{r4, r5, r6, pc}
 80057f6:	1cc4      	adds	r4, r0, #3
 80057f8:	f024 0403 	bic.w	r4, r4, #3
 80057fc:	42a0      	cmp	r0, r4
 80057fe:	d0f8      	beq.n	80057f2 <sbrk_aligned+0x22>
 8005800:	1a21      	subs	r1, r4, r0
 8005802:	4628      	mov	r0, r5
 8005804:	f001 fc6c 	bl	80070e0 <_sbrk_r>
 8005808:	3001      	adds	r0, #1
 800580a:	d1f2      	bne.n	80057f2 <sbrk_aligned+0x22>
 800580c:	e7ef      	b.n	80057ee <sbrk_aligned+0x1e>
 800580e:	bf00      	nop
 8005810:	2000057c 	.word	0x2000057c

08005814 <_malloc_r>:
 8005814:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005818:	1ccd      	adds	r5, r1, #3
 800581a:	f025 0503 	bic.w	r5, r5, #3
 800581e:	3508      	adds	r5, #8
 8005820:	2d0c      	cmp	r5, #12
 8005822:	bf38      	it	cc
 8005824:	250c      	movcc	r5, #12
 8005826:	2d00      	cmp	r5, #0
 8005828:	4606      	mov	r6, r0
 800582a:	db01      	blt.n	8005830 <_malloc_r+0x1c>
 800582c:	42a9      	cmp	r1, r5
 800582e:	d904      	bls.n	800583a <_malloc_r+0x26>
 8005830:	230c      	movs	r3, #12
 8005832:	6033      	str	r3, [r6, #0]
 8005834:	2000      	movs	r0, #0
 8005836:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800583a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005910 <_malloc_r+0xfc>
 800583e:	f000 f869 	bl	8005914 <__malloc_lock>
 8005842:	f8d8 3000 	ldr.w	r3, [r8]
 8005846:	461c      	mov	r4, r3
 8005848:	bb44      	cbnz	r4, 800589c <_malloc_r+0x88>
 800584a:	4629      	mov	r1, r5
 800584c:	4630      	mov	r0, r6
 800584e:	f7ff ffbf 	bl	80057d0 <sbrk_aligned>
 8005852:	1c43      	adds	r3, r0, #1
 8005854:	4604      	mov	r4, r0
 8005856:	d158      	bne.n	800590a <_malloc_r+0xf6>
 8005858:	f8d8 4000 	ldr.w	r4, [r8]
 800585c:	4627      	mov	r7, r4
 800585e:	2f00      	cmp	r7, #0
 8005860:	d143      	bne.n	80058ea <_malloc_r+0xd6>
 8005862:	2c00      	cmp	r4, #0
 8005864:	d04b      	beq.n	80058fe <_malloc_r+0xea>
 8005866:	6823      	ldr	r3, [r4, #0]
 8005868:	4639      	mov	r1, r7
 800586a:	4630      	mov	r0, r6
 800586c:	eb04 0903 	add.w	r9, r4, r3
 8005870:	f001 fc36 	bl	80070e0 <_sbrk_r>
 8005874:	4581      	cmp	r9, r0
 8005876:	d142      	bne.n	80058fe <_malloc_r+0xea>
 8005878:	6821      	ldr	r1, [r4, #0]
 800587a:	4630      	mov	r0, r6
 800587c:	1a6d      	subs	r5, r5, r1
 800587e:	4629      	mov	r1, r5
 8005880:	f7ff ffa6 	bl	80057d0 <sbrk_aligned>
 8005884:	3001      	adds	r0, #1
 8005886:	d03a      	beq.n	80058fe <_malloc_r+0xea>
 8005888:	6823      	ldr	r3, [r4, #0]
 800588a:	442b      	add	r3, r5
 800588c:	6023      	str	r3, [r4, #0]
 800588e:	f8d8 3000 	ldr.w	r3, [r8]
 8005892:	685a      	ldr	r2, [r3, #4]
 8005894:	bb62      	cbnz	r2, 80058f0 <_malloc_r+0xdc>
 8005896:	f8c8 7000 	str.w	r7, [r8]
 800589a:	e00f      	b.n	80058bc <_malloc_r+0xa8>
 800589c:	6822      	ldr	r2, [r4, #0]
 800589e:	1b52      	subs	r2, r2, r5
 80058a0:	d420      	bmi.n	80058e4 <_malloc_r+0xd0>
 80058a2:	2a0b      	cmp	r2, #11
 80058a4:	d917      	bls.n	80058d6 <_malloc_r+0xc2>
 80058a6:	1961      	adds	r1, r4, r5
 80058a8:	42a3      	cmp	r3, r4
 80058aa:	6025      	str	r5, [r4, #0]
 80058ac:	bf18      	it	ne
 80058ae:	6059      	strne	r1, [r3, #4]
 80058b0:	6863      	ldr	r3, [r4, #4]
 80058b2:	bf08      	it	eq
 80058b4:	f8c8 1000 	streq.w	r1, [r8]
 80058b8:	5162      	str	r2, [r4, r5]
 80058ba:	604b      	str	r3, [r1, #4]
 80058bc:	4630      	mov	r0, r6
 80058be:	f000 f82f 	bl	8005920 <__malloc_unlock>
 80058c2:	f104 000b 	add.w	r0, r4, #11
 80058c6:	1d23      	adds	r3, r4, #4
 80058c8:	f020 0007 	bic.w	r0, r0, #7
 80058cc:	1ac2      	subs	r2, r0, r3
 80058ce:	bf1c      	itt	ne
 80058d0:	1a1b      	subne	r3, r3, r0
 80058d2:	50a3      	strne	r3, [r4, r2]
 80058d4:	e7af      	b.n	8005836 <_malloc_r+0x22>
 80058d6:	6862      	ldr	r2, [r4, #4]
 80058d8:	42a3      	cmp	r3, r4
 80058da:	bf0c      	ite	eq
 80058dc:	f8c8 2000 	streq.w	r2, [r8]
 80058e0:	605a      	strne	r2, [r3, #4]
 80058e2:	e7eb      	b.n	80058bc <_malloc_r+0xa8>
 80058e4:	4623      	mov	r3, r4
 80058e6:	6864      	ldr	r4, [r4, #4]
 80058e8:	e7ae      	b.n	8005848 <_malloc_r+0x34>
 80058ea:	463c      	mov	r4, r7
 80058ec:	687f      	ldr	r7, [r7, #4]
 80058ee:	e7b6      	b.n	800585e <_malloc_r+0x4a>
 80058f0:	461a      	mov	r2, r3
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	42a3      	cmp	r3, r4
 80058f6:	d1fb      	bne.n	80058f0 <_malloc_r+0xdc>
 80058f8:	2300      	movs	r3, #0
 80058fa:	6053      	str	r3, [r2, #4]
 80058fc:	e7de      	b.n	80058bc <_malloc_r+0xa8>
 80058fe:	230c      	movs	r3, #12
 8005900:	4630      	mov	r0, r6
 8005902:	6033      	str	r3, [r6, #0]
 8005904:	f000 f80c 	bl	8005920 <__malloc_unlock>
 8005908:	e794      	b.n	8005834 <_malloc_r+0x20>
 800590a:	6005      	str	r5, [r0, #0]
 800590c:	e7d6      	b.n	80058bc <_malloc_r+0xa8>
 800590e:	bf00      	nop
 8005910:	20000580 	.word	0x20000580

08005914 <__malloc_lock>:
 8005914:	4801      	ldr	r0, [pc, #4]	@ (800591c <__malloc_lock+0x8>)
 8005916:	f001 bc30 	b.w	800717a <__retarget_lock_acquire_recursive>
 800591a:	bf00      	nop
 800591c:	200006c4 	.word	0x200006c4

08005920 <__malloc_unlock>:
 8005920:	4801      	ldr	r0, [pc, #4]	@ (8005928 <__malloc_unlock+0x8>)
 8005922:	f001 bc2b 	b.w	800717c <__retarget_lock_release_recursive>
 8005926:	bf00      	nop
 8005928:	200006c4 	.word	0x200006c4

0800592c <sulp>:
 800592c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005930:	460f      	mov	r7, r1
 8005932:	4690      	mov	r8, r2
 8005934:	f003 f99e 	bl	8008c74 <__ulp>
 8005938:	4604      	mov	r4, r0
 800593a:	460d      	mov	r5, r1
 800593c:	f1b8 0f00 	cmp.w	r8, #0
 8005940:	d011      	beq.n	8005966 <sulp+0x3a>
 8005942:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005946:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800594a:	2b00      	cmp	r3, #0
 800594c:	dd0b      	ble.n	8005966 <sulp+0x3a>
 800594e:	2400      	movs	r4, #0
 8005950:	051b      	lsls	r3, r3, #20
 8005952:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8005956:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800595a:	4622      	mov	r2, r4
 800595c:	462b      	mov	r3, r5
 800595e:	f7fa fdc5 	bl	80004ec <__aeabi_dmul>
 8005962:	4604      	mov	r4, r0
 8005964:	460d      	mov	r5, r1
 8005966:	4620      	mov	r0, r4
 8005968:	4629      	mov	r1, r5
 800596a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08005970 <_strtod_l>:
 8005970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005974:	b09f      	sub	sp, #124	@ 0x7c
 8005976:	9217      	str	r2, [sp, #92]	@ 0x5c
 8005978:	2200      	movs	r2, #0
 800597a:	460c      	mov	r4, r1
 800597c:	921a      	str	r2, [sp, #104]	@ 0x68
 800597e:	f04f 0a00 	mov.w	sl, #0
 8005982:	f04f 0b00 	mov.w	fp, #0
 8005986:	460a      	mov	r2, r1
 8005988:	9005      	str	r0, [sp, #20]
 800598a:	9219      	str	r2, [sp, #100]	@ 0x64
 800598c:	7811      	ldrb	r1, [r2, #0]
 800598e:	292b      	cmp	r1, #43	@ 0x2b
 8005990:	d048      	beq.n	8005a24 <_strtod_l+0xb4>
 8005992:	d836      	bhi.n	8005a02 <_strtod_l+0x92>
 8005994:	290d      	cmp	r1, #13
 8005996:	d830      	bhi.n	80059fa <_strtod_l+0x8a>
 8005998:	2908      	cmp	r1, #8
 800599a:	d830      	bhi.n	80059fe <_strtod_l+0x8e>
 800599c:	2900      	cmp	r1, #0
 800599e:	d039      	beq.n	8005a14 <_strtod_l+0xa4>
 80059a0:	2200      	movs	r2, #0
 80059a2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80059a4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80059a6:	782a      	ldrb	r2, [r5, #0]
 80059a8:	2a30      	cmp	r2, #48	@ 0x30
 80059aa:	f040 80b1 	bne.w	8005b10 <_strtod_l+0x1a0>
 80059ae:	786a      	ldrb	r2, [r5, #1]
 80059b0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80059b4:	2a58      	cmp	r2, #88	@ 0x58
 80059b6:	d16c      	bne.n	8005a92 <_strtod_l+0x122>
 80059b8:	9302      	str	r3, [sp, #8]
 80059ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80059bc:	4a8e      	ldr	r2, [pc, #568]	@ (8005bf8 <_strtod_l+0x288>)
 80059be:	9301      	str	r3, [sp, #4]
 80059c0:	ab1a      	add	r3, sp, #104	@ 0x68
 80059c2:	9300      	str	r3, [sp, #0]
 80059c4:	9805      	ldr	r0, [sp, #20]
 80059c6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80059c8:	a919      	add	r1, sp, #100	@ 0x64
 80059ca:	f002 fafd 	bl	8007fc8 <__gethex>
 80059ce:	f010 060f 	ands.w	r6, r0, #15
 80059d2:	4604      	mov	r4, r0
 80059d4:	d005      	beq.n	80059e2 <_strtod_l+0x72>
 80059d6:	2e06      	cmp	r6, #6
 80059d8:	d126      	bne.n	8005a28 <_strtod_l+0xb8>
 80059da:	2300      	movs	r3, #0
 80059dc:	3501      	adds	r5, #1
 80059de:	9519      	str	r5, [sp, #100]	@ 0x64
 80059e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80059e2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	f040 8584 	bne.w	80064f2 <_strtod_l+0xb82>
 80059ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80059ec:	b1bb      	cbz	r3, 8005a1e <_strtod_l+0xae>
 80059ee:	4650      	mov	r0, sl
 80059f0:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 80059f4:	b01f      	add	sp, #124	@ 0x7c
 80059f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059fa:	2920      	cmp	r1, #32
 80059fc:	d1d0      	bne.n	80059a0 <_strtod_l+0x30>
 80059fe:	3201      	adds	r2, #1
 8005a00:	e7c3      	b.n	800598a <_strtod_l+0x1a>
 8005a02:	292d      	cmp	r1, #45	@ 0x2d
 8005a04:	d1cc      	bne.n	80059a0 <_strtod_l+0x30>
 8005a06:	2101      	movs	r1, #1
 8005a08:	910b      	str	r1, [sp, #44]	@ 0x2c
 8005a0a:	1c51      	adds	r1, r2, #1
 8005a0c:	9119      	str	r1, [sp, #100]	@ 0x64
 8005a0e:	7852      	ldrb	r2, [r2, #1]
 8005a10:	2a00      	cmp	r2, #0
 8005a12:	d1c7      	bne.n	80059a4 <_strtod_l+0x34>
 8005a14:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005a16:	9419      	str	r4, [sp, #100]	@ 0x64
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	f040 8568 	bne.w	80064ee <_strtod_l+0xb7e>
 8005a1e:	4650      	mov	r0, sl
 8005a20:	4659      	mov	r1, fp
 8005a22:	e7e7      	b.n	80059f4 <_strtod_l+0x84>
 8005a24:	2100      	movs	r1, #0
 8005a26:	e7ef      	b.n	8005a08 <_strtod_l+0x98>
 8005a28:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005a2a:	b13a      	cbz	r2, 8005a3c <_strtod_l+0xcc>
 8005a2c:	2135      	movs	r1, #53	@ 0x35
 8005a2e:	a81c      	add	r0, sp, #112	@ 0x70
 8005a30:	f003 fa10 	bl	8008e54 <__copybits>
 8005a34:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005a36:	9805      	ldr	r0, [sp, #20]
 8005a38:	f002 fdea 	bl	8008610 <_Bfree>
 8005a3c:	3e01      	subs	r6, #1
 8005a3e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8005a40:	2e04      	cmp	r6, #4
 8005a42:	d806      	bhi.n	8005a52 <_strtod_l+0xe2>
 8005a44:	e8df f006 	tbb	[pc, r6]
 8005a48:	201d0314 	.word	0x201d0314
 8005a4c:	14          	.byte	0x14
 8005a4d:	00          	.byte	0x00
 8005a4e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8005a52:	05e1      	lsls	r1, r4, #23
 8005a54:	bf48      	it	mi
 8005a56:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8005a5a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005a5e:	0d1b      	lsrs	r3, r3, #20
 8005a60:	051b      	lsls	r3, r3, #20
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d1bd      	bne.n	80059e2 <_strtod_l+0x72>
 8005a66:	f001 fb5d 	bl	8007124 <__errno>
 8005a6a:	2322      	movs	r3, #34	@ 0x22
 8005a6c:	6003      	str	r3, [r0, #0]
 8005a6e:	e7b8      	b.n	80059e2 <_strtod_l+0x72>
 8005a70:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8005a74:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8005a78:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005a7c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005a80:	e7e7      	b.n	8005a52 <_strtod_l+0xe2>
 8005a82:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8005bfc <_strtod_l+0x28c>
 8005a86:	e7e4      	b.n	8005a52 <_strtod_l+0xe2>
 8005a88:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8005a8c:	f04f 3aff 	mov.w	sl, #4294967295
 8005a90:	e7df      	b.n	8005a52 <_strtod_l+0xe2>
 8005a92:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005a94:	1c5a      	adds	r2, r3, #1
 8005a96:	9219      	str	r2, [sp, #100]	@ 0x64
 8005a98:	785b      	ldrb	r3, [r3, #1]
 8005a9a:	2b30      	cmp	r3, #48	@ 0x30
 8005a9c:	d0f9      	beq.n	8005a92 <_strtod_l+0x122>
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d09f      	beq.n	80059e2 <_strtod_l+0x72>
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	9309      	str	r3, [sp, #36]	@ 0x24
 8005aa6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005aa8:	220a      	movs	r2, #10
 8005aaa:	930c      	str	r3, [sp, #48]	@ 0x30
 8005aac:	2300      	movs	r3, #0
 8005aae:	461f      	mov	r7, r3
 8005ab0:	9308      	str	r3, [sp, #32]
 8005ab2:	930a      	str	r3, [sp, #40]	@ 0x28
 8005ab4:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8005ab6:	7805      	ldrb	r5, [r0, #0]
 8005ab8:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8005abc:	b2d9      	uxtb	r1, r3
 8005abe:	2909      	cmp	r1, #9
 8005ac0:	d928      	bls.n	8005b14 <_strtod_l+0x1a4>
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	494e      	ldr	r1, [pc, #312]	@ (8005c00 <_strtod_l+0x290>)
 8005ac6:	f001 fac0 	bl	800704a <strncmp>
 8005aca:	2800      	cmp	r0, #0
 8005acc:	d032      	beq.n	8005b34 <_strtod_l+0x1c4>
 8005ace:	2000      	movs	r0, #0
 8005ad0:	462a      	mov	r2, r5
 8005ad2:	4681      	mov	r9, r0
 8005ad4:	463d      	mov	r5, r7
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2a65      	cmp	r2, #101	@ 0x65
 8005ada:	d001      	beq.n	8005ae0 <_strtod_l+0x170>
 8005adc:	2a45      	cmp	r2, #69	@ 0x45
 8005ade:	d114      	bne.n	8005b0a <_strtod_l+0x19a>
 8005ae0:	b91d      	cbnz	r5, 8005aea <_strtod_l+0x17a>
 8005ae2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ae4:	4302      	orrs	r2, r0
 8005ae6:	d095      	beq.n	8005a14 <_strtod_l+0xa4>
 8005ae8:	2500      	movs	r5, #0
 8005aea:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8005aec:	1c62      	adds	r2, r4, #1
 8005aee:	9219      	str	r2, [sp, #100]	@ 0x64
 8005af0:	7862      	ldrb	r2, [r4, #1]
 8005af2:	2a2b      	cmp	r2, #43	@ 0x2b
 8005af4:	d077      	beq.n	8005be6 <_strtod_l+0x276>
 8005af6:	2a2d      	cmp	r2, #45	@ 0x2d
 8005af8:	d07b      	beq.n	8005bf2 <_strtod_l+0x282>
 8005afa:	f04f 0c00 	mov.w	ip, #0
 8005afe:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8005b02:	2909      	cmp	r1, #9
 8005b04:	f240 8082 	bls.w	8005c0c <_strtod_l+0x29c>
 8005b08:	9419      	str	r4, [sp, #100]	@ 0x64
 8005b0a:	f04f 0800 	mov.w	r8, #0
 8005b0e:	e0a2      	b.n	8005c56 <_strtod_l+0x2e6>
 8005b10:	2300      	movs	r3, #0
 8005b12:	e7c7      	b.n	8005aa4 <_strtod_l+0x134>
 8005b14:	2f08      	cmp	r7, #8
 8005b16:	bfd5      	itete	le
 8005b18:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8005b1a:	9908      	ldrgt	r1, [sp, #32]
 8005b1c:	fb02 3301 	mlale	r3, r2, r1, r3
 8005b20:	fb02 3301 	mlagt	r3, r2, r1, r3
 8005b24:	f100 0001 	add.w	r0, r0, #1
 8005b28:	bfd4      	ite	le
 8005b2a:	930a      	strle	r3, [sp, #40]	@ 0x28
 8005b2c:	9308      	strgt	r3, [sp, #32]
 8005b2e:	3701      	adds	r7, #1
 8005b30:	9019      	str	r0, [sp, #100]	@ 0x64
 8005b32:	e7bf      	b.n	8005ab4 <_strtod_l+0x144>
 8005b34:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005b36:	1c5a      	adds	r2, r3, #1
 8005b38:	9219      	str	r2, [sp, #100]	@ 0x64
 8005b3a:	785a      	ldrb	r2, [r3, #1]
 8005b3c:	b37f      	cbz	r7, 8005b9e <_strtod_l+0x22e>
 8005b3e:	4681      	mov	r9, r0
 8005b40:	463d      	mov	r5, r7
 8005b42:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8005b46:	2b09      	cmp	r3, #9
 8005b48:	d912      	bls.n	8005b70 <_strtod_l+0x200>
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e7c4      	b.n	8005ad8 <_strtod_l+0x168>
 8005b4e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005b50:	3001      	adds	r0, #1
 8005b52:	1c5a      	adds	r2, r3, #1
 8005b54:	9219      	str	r2, [sp, #100]	@ 0x64
 8005b56:	785a      	ldrb	r2, [r3, #1]
 8005b58:	2a30      	cmp	r2, #48	@ 0x30
 8005b5a:	d0f8      	beq.n	8005b4e <_strtod_l+0x1de>
 8005b5c:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8005b60:	2b08      	cmp	r3, #8
 8005b62:	f200 84cb 	bhi.w	80064fc <_strtod_l+0xb8c>
 8005b66:	4681      	mov	r9, r0
 8005b68:	2000      	movs	r0, #0
 8005b6a:	4605      	mov	r5, r0
 8005b6c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005b6e:	930c      	str	r3, [sp, #48]	@ 0x30
 8005b70:	3a30      	subs	r2, #48	@ 0x30
 8005b72:	f100 0301 	add.w	r3, r0, #1
 8005b76:	d02a      	beq.n	8005bce <_strtod_l+0x25e>
 8005b78:	4499      	add	r9, r3
 8005b7a:	210a      	movs	r1, #10
 8005b7c:	462b      	mov	r3, r5
 8005b7e:	eb00 0c05 	add.w	ip, r0, r5
 8005b82:	4563      	cmp	r3, ip
 8005b84:	d10d      	bne.n	8005ba2 <_strtod_l+0x232>
 8005b86:	1c69      	adds	r1, r5, #1
 8005b88:	4401      	add	r1, r0
 8005b8a:	4428      	add	r0, r5
 8005b8c:	2808      	cmp	r0, #8
 8005b8e:	dc16      	bgt.n	8005bbe <_strtod_l+0x24e>
 8005b90:	230a      	movs	r3, #10
 8005b92:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005b94:	fb03 2300 	mla	r3, r3, r0, r2
 8005b98:	930a      	str	r3, [sp, #40]	@ 0x28
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	e018      	b.n	8005bd0 <_strtod_l+0x260>
 8005b9e:	4638      	mov	r0, r7
 8005ba0:	e7da      	b.n	8005b58 <_strtod_l+0x1e8>
 8005ba2:	2b08      	cmp	r3, #8
 8005ba4:	f103 0301 	add.w	r3, r3, #1
 8005ba8:	dc03      	bgt.n	8005bb2 <_strtod_l+0x242>
 8005baa:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8005bac:	434e      	muls	r6, r1
 8005bae:	960a      	str	r6, [sp, #40]	@ 0x28
 8005bb0:	e7e7      	b.n	8005b82 <_strtod_l+0x212>
 8005bb2:	2b10      	cmp	r3, #16
 8005bb4:	bfde      	ittt	le
 8005bb6:	9e08      	ldrle	r6, [sp, #32]
 8005bb8:	434e      	mulle	r6, r1
 8005bba:	9608      	strle	r6, [sp, #32]
 8005bbc:	e7e1      	b.n	8005b82 <_strtod_l+0x212>
 8005bbe:	280f      	cmp	r0, #15
 8005bc0:	dceb      	bgt.n	8005b9a <_strtod_l+0x22a>
 8005bc2:	230a      	movs	r3, #10
 8005bc4:	9808      	ldr	r0, [sp, #32]
 8005bc6:	fb03 2300 	mla	r3, r3, r0, r2
 8005bca:	9308      	str	r3, [sp, #32]
 8005bcc:	e7e5      	b.n	8005b9a <_strtod_l+0x22a>
 8005bce:	4629      	mov	r1, r5
 8005bd0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005bd2:	460d      	mov	r5, r1
 8005bd4:	1c50      	adds	r0, r2, #1
 8005bd6:	9019      	str	r0, [sp, #100]	@ 0x64
 8005bd8:	7852      	ldrb	r2, [r2, #1]
 8005bda:	4618      	mov	r0, r3
 8005bdc:	e7b1      	b.n	8005b42 <_strtod_l+0x1d2>
 8005bde:	f04f 0900 	mov.w	r9, #0
 8005be2:	2301      	movs	r3, #1
 8005be4:	e77d      	b.n	8005ae2 <_strtod_l+0x172>
 8005be6:	f04f 0c00 	mov.w	ip, #0
 8005bea:	1ca2      	adds	r2, r4, #2
 8005bec:	9219      	str	r2, [sp, #100]	@ 0x64
 8005bee:	78a2      	ldrb	r2, [r4, #2]
 8005bf0:	e785      	b.n	8005afe <_strtod_l+0x18e>
 8005bf2:	f04f 0c01 	mov.w	ip, #1
 8005bf6:	e7f8      	b.n	8005bea <_strtod_l+0x27a>
 8005bf8:	0800a5b4 	.word	0x0800a5b4
 8005bfc:	7ff00000 	.word	0x7ff00000
 8005c00:	0800a59c 	.word	0x0800a59c
 8005c04:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005c06:	1c51      	adds	r1, r2, #1
 8005c08:	9119      	str	r1, [sp, #100]	@ 0x64
 8005c0a:	7852      	ldrb	r2, [r2, #1]
 8005c0c:	2a30      	cmp	r2, #48	@ 0x30
 8005c0e:	d0f9      	beq.n	8005c04 <_strtod_l+0x294>
 8005c10:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8005c14:	2908      	cmp	r1, #8
 8005c16:	f63f af78 	bhi.w	8005b0a <_strtod_l+0x19a>
 8005c1a:	f04f 080a 	mov.w	r8, #10
 8005c1e:	3a30      	subs	r2, #48	@ 0x30
 8005c20:	920e      	str	r2, [sp, #56]	@ 0x38
 8005c22:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005c24:	920f      	str	r2, [sp, #60]	@ 0x3c
 8005c26:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005c28:	1c56      	adds	r6, r2, #1
 8005c2a:	9619      	str	r6, [sp, #100]	@ 0x64
 8005c2c:	7852      	ldrb	r2, [r2, #1]
 8005c2e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8005c32:	f1be 0f09 	cmp.w	lr, #9
 8005c36:	d939      	bls.n	8005cac <_strtod_l+0x33c>
 8005c38:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005c3a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8005c3e:	1a76      	subs	r6, r6, r1
 8005c40:	2e08      	cmp	r6, #8
 8005c42:	dc03      	bgt.n	8005c4c <_strtod_l+0x2dc>
 8005c44:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005c46:	4588      	cmp	r8, r1
 8005c48:	bfa8      	it	ge
 8005c4a:	4688      	movge	r8, r1
 8005c4c:	f1bc 0f00 	cmp.w	ip, #0
 8005c50:	d001      	beq.n	8005c56 <_strtod_l+0x2e6>
 8005c52:	f1c8 0800 	rsb	r8, r8, #0
 8005c56:	2d00      	cmp	r5, #0
 8005c58:	d14e      	bne.n	8005cf8 <_strtod_l+0x388>
 8005c5a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005c5c:	4308      	orrs	r0, r1
 8005c5e:	f47f aec0 	bne.w	80059e2 <_strtod_l+0x72>
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	f47f aed6 	bne.w	8005a14 <_strtod_l+0xa4>
 8005c68:	2a69      	cmp	r2, #105	@ 0x69
 8005c6a:	d028      	beq.n	8005cbe <_strtod_l+0x34e>
 8005c6c:	dc25      	bgt.n	8005cba <_strtod_l+0x34a>
 8005c6e:	2a49      	cmp	r2, #73	@ 0x49
 8005c70:	d025      	beq.n	8005cbe <_strtod_l+0x34e>
 8005c72:	2a4e      	cmp	r2, #78	@ 0x4e
 8005c74:	f47f aece 	bne.w	8005a14 <_strtod_l+0xa4>
 8005c78:	499a      	ldr	r1, [pc, #616]	@ (8005ee4 <_strtod_l+0x574>)
 8005c7a:	a819      	add	r0, sp, #100	@ 0x64
 8005c7c:	f002 fbc6 	bl	800840c <__match>
 8005c80:	2800      	cmp	r0, #0
 8005c82:	f43f aec7 	beq.w	8005a14 <_strtod_l+0xa4>
 8005c86:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	2b28      	cmp	r3, #40	@ 0x28
 8005c8c:	d12e      	bne.n	8005cec <_strtod_l+0x37c>
 8005c8e:	4996      	ldr	r1, [pc, #600]	@ (8005ee8 <_strtod_l+0x578>)
 8005c90:	aa1c      	add	r2, sp, #112	@ 0x70
 8005c92:	a819      	add	r0, sp, #100	@ 0x64
 8005c94:	f002 fbce 	bl	8008434 <__hexnan>
 8005c98:	2805      	cmp	r0, #5
 8005c9a:	d127      	bne.n	8005cec <_strtod_l+0x37c>
 8005c9c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005c9e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8005ca2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8005ca6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8005caa:	e69a      	b.n	80059e2 <_strtod_l+0x72>
 8005cac:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005cae:	fb08 2101 	mla	r1, r8, r1, r2
 8005cb2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8005cb6:	920e      	str	r2, [sp, #56]	@ 0x38
 8005cb8:	e7b5      	b.n	8005c26 <_strtod_l+0x2b6>
 8005cba:	2a6e      	cmp	r2, #110	@ 0x6e
 8005cbc:	e7da      	b.n	8005c74 <_strtod_l+0x304>
 8005cbe:	498b      	ldr	r1, [pc, #556]	@ (8005eec <_strtod_l+0x57c>)
 8005cc0:	a819      	add	r0, sp, #100	@ 0x64
 8005cc2:	f002 fba3 	bl	800840c <__match>
 8005cc6:	2800      	cmp	r0, #0
 8005cc8:	f43f aea4 	beq.w	8005a14 <_strtod_l+0xa4>
 8005ccc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005cce:	4988      	ldr	r1, [pc, #544]	@ (8005ef0 <_strtod_l+0x580>)
 8005cd0:	3b01      	subs	r3, #1
 8005cd2:	a819      	add	r0, sp, #100	@ 0x64
 8005cd4:	9319      	str	r3, [sp, #100]	@ 0x64
 8005cd6:	f002 fb99 	bl	800840c <__match>
 8005cda:	b910      	cbnz	r0, 8005ce2 <_strtod_l+0x372>
 8005cdc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005cde:	3301      	adds	r3, #1
 8005ce0:	9319      	str	r3, [sp, #100]	@ 0x64
 8005ce2:	f04f 0a00 	mov.w	sl, #0
 8005ce6:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8005ef4 <_strtod_l+0x584>
 8005cea:	e67a      	b.n	80059e2 <_strtod_l+0x72>
 8005cec:	4882      	ldr	r0, [pc, #520]	@ (8005ef8 <_strtod_l+0x588>)
 8005cee:	f001 fa63 	bl	80071b8 <nan>
 8005cf2:	4682      	mov	sl, r0
 8005cf4:	468b      	mov	fp, r1
 8005cf6:	e674      	b.n	80059e2 <_strtod_l+0x72>
 8005cf8:	eba8 0309 	sub.w	r3, r8, r9
 8005cfc:	2f00      	cmp	r7, #0
 8005cfe:	bf08      	it	eq
 8005d00:	462f      	moveq	r7, r5
 8005d02:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005d04:	2d10      	cmp	r5, #16
 8005d06:	462c      	mov	r4, r5
 8005d08:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d0a:	bfa8      	it	ge
 8005d0c:	2410      	movge	r4, #16
 8005d0e:	f7fa fb73 	bl	80003f8 <__aeabi_ui2d>
 8005d12:	2d09      	cmp	r5, #9
 8005d14:	4682      	mov	sl, r0
 8005d16:	468b      	mov	fp, r1
 8005d18:	dc11      	bgt.n	8005d3e <_strtod_l+0x3ce>
 8005d1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	f43f ae60 	beq.w	80059e2 <_strtod_l+0x72>
 8005d22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d24:	dd76      	ble.n	8005e14 <_strtod_l+0x4a4>
 8005d26:	2b16      	cmp	r3, #22
 8005d28:	dc5d      	bgt.n	8005de6 <_strtod_l+0x476>
 8005d2a:	4974      	ldr	r1, [pc, #464]	@ (8005efc <_strtod_l+0x58c>)
 8005d2c:	4652      	mov	r2, sl
 8005d2e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005d32:	465b      	mov	r3, fp
 8005d34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d38:	f7fa fbd8 	bl	80004ec <__aeabi_dmul>
 8005d3c:	e7d9      	b.n	8005cf2 <_strtod_l+0x382>
 8005d3e:	4b6f      	ldr	r3, [pc, #444]	@ (8005efc <_strtod_l+0x58c>)
 8005d40:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005d44:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8005d48:	f7fa fbd0 	bl	80004ec <__aeabi_dmul>
 8005d4c:	4682      	mov	sl, r0
 8005d4e:	9808      	ldr	r0, [sp, #32]
 8005d50:	468b      	mov	fp, r1
 8005d52:	f7fa fb51 	bl	80003f8 <__aeabi_ui2d>
 8005d56:	4602      	mov	r2, r0
 8005d58:	460b      	mov	r3, r1
 8005d5a:	4650      	mov	r0, sl
 8005d5c:	4659      	mov	r1, fp
 8005d5e:	f7fa fa0f 	bl	8000180 <__adddf3>
 8005d62:	2d0f      	cmp	r5, #15
 8005d64:	4682      	mov	sl, r0
 8005d66:	468b      	mov	fp, r1
 8005d68:	ddd7      	ble.n	8005d1a <_strtod_l+0x3aa>
 8005d6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d6c:	1b2c      	subs	r4, r5, r4
 8005d6e:	441c      	add	r4, r3
 8005d70:	2c00      	cmp	r4, #0
 8005d72:	f340 8096 	ble.w	8005ea2 <_strtod_l+0x532>
 8005d76:	f014 030f 	ands.w	r3, r4, #15
 8005d7a:	d00a      	beq.n	8005d92 <_strtod_l+0x422>
 8005d7c:	495f      	ldr	r1, [pc, #380]	@ (8005efc <_strtod_l+0x58c>)
 8005d7e:	4652      	mov	r2, sl
 8005d80:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005d84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d88:	465b      	mov	r3, fp
 8005d8a:	f7fa fbaf 	bl	80004ec <__aeabi_dmul>
 8005d8e:	4682      	mov	sl, r0
 8005d90:	468b      	mov	fp, r1
 8005d92:	f034 040f 	bics.w	r4, r4, #15
 8005d96:	d073      	beq.n	8005e80 <_strtod_l+0x510>
 8005d98:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8005d9c:	dd48      	ble.n	8005e30 <_strtod_l+0x4c0>
 8005d9e:	2400      	movs	r4, #0
 8005da0:	46a0      	mov	r8, r4
 8005da2:	46a1      	mov	r9, r4
 8005da4:	940a      	str	r4, [sp, #40]	@ 0x28
 8005da6:	2322      	movs	r3, #34	@ 0x22
 8005da8:	f04f 0a00 	mov.w	sl, #0
 8005dac:	9a05      	ldr	r2, [sp, #20]
 8005dae:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8005ef4 <_strtod_l+0x584>
 8005db2:	6013      	str	r3, [r2, #0]
 8005db4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	f43f ae13 	beq.w	80059e2 <_strtod_l+0x72>
 8005dbc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005dbe:	9805      	ldr	r0, [sp, #20]
 8005dc0:	f002 fc26 	bl	8008610 <_Bfree>
 8005dc4:	4649      	mov	r1, r9
 8005dc6:	9805      	ldr	r0, [sp, #20]
 8005dc8:	f002 fc22 	bl	8008610 <_Bfree>
 8005dcc:	4641      	mov	r1, r8
 8005dce:	9805      	ldr	r0, [sp, #20]
 8005dd0:	f002 fc1e 	bl	8008610 <_Bfree>
 8005dd4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005dd6:	9805      	ldr	r0, [sp, #20]
 8005dd8:	f002 fc1a 	bl	8008610 <_Bfree>
 8005ddc:	4621      	mov	r1, r4
 8005dde:	9805      	ldr	r0, [sp, #20]
 8005de0:	f002 fc16 	bl	8008610 <_Bfree>
 8005de4:	e5fd      	b.n	80059e2 <_strtod_l+0x72>
 8005de6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005de8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8005dec:	4293      	cmp	r3, r2
 8005dee:	dbbc      	blt.n	8005d6a <_strtod_l+0x3fa>
 8005df0:	4c42      	ldr	r4, [pc, #264]	@ (8005efc <_strtod_l+0x58c>)
 8005df2:	f1c5 050f 	rsb	r5, r5, #15
 8005df6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005dfa:	4652      	mov	r2, sl
 8005dfc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e00:	465b      	mov	r3, fp
 8005e02:	f7fa fb73 	bl	80004ec <__aeabi_dmul>
 8005e06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e08:	1b5d      	subs	r5, r3, r5
 8005e0a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005e0e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005e12:	e791      	b.n	8005d38 <_strtod_l+0x3c8>
 8005e14:	3316      	adds	r3, #22
 8005e16:	dba8      	blt.n	8005d6a <_strtod_l+0x3fa>
 8005e18:	4b38      	ldr	r3, [pc, #224]	@ (8005efc <_strtod_l+0x58c>)
 8005e1a:	eba9 0808 	sub.w	r8, r9, r8
 8005e1e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8005e22:	4650      	mov	r0, sl
 8005e24:	e9d8 2300 	ldrd	r2, r3, [r8]
 8005e28:	4659      	mov	r1, fp
 8005e2a:	f7fa fc89 	bl	8000740 <__aeabi_ddiv>
 8005e2e:	e760      	b.n	8005cf2 <_strtod_l+0x382>
 8005e30:	4b33      	ldr	r3, [pc, #204]	@ (8005f00 <_strtod_l+0x590>)
 8005e32:	4650      	mov	r0, sl
 8005e34:	9308      	str	r3, [sp, #32]
 8005e36:	2300      	movs	r3, #0
 8005e38:	4659      	mov	r1, fp
 8005e3a:	461e      	mov	r6, r3
 8005e3c:	1124      	asrs	r4, r4, #4
 8005e3e:	2c01      	cmp	r4, #1
 8005e40:	dc21      	bgt.n	8005e86 <_strtod_l+0x516>
 8005e42:	b10b      	cbz	r3, 8005e48 <_strtod_l+0x4d8>
 8005e44:	4682      	mov	sl, r0
 8005e46:	468b      	mov	fp, r1
 8005e48:	492d      	ldr	r1, [pc, #180]	@ (8005f00 <_strtod_l+0x590>)
 8005e4a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8005e4e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8005e52:	4652      	mov	r2, sl
 8005e54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e58:	465b      	mov	r3, fp
 8005e5a:	f7fa fb47 	bl	80004ec <__aeabi_dmul>
 8005e5e:	4b25      	ldr	r3, [pc, #148]	@ (8005ef4 <_strtod_l+0x584>)
 8005e60:	460a      	mov	r2, r1
 8005e62:	400b      	ands	r3, r1
 8005e64:	4927      	ldr	r1, [pc, #156]	@ (8005f04 <_strtod_l+0x594>)
 8005e66:	4682      	mov	sl, r0
 8005e68:	428b      	cmp	r3, r1
 8005e6a:	d898      	bhi.n	8005d9e <_strtod_l+0x42e>
 8005e6c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8005e70:	428b      	cmp	r3, r1
 8005e72:	bf86      	itte	hi
 8005e74:	f04f 3aff 	movhi.w	sl, #4294967295
 8005e78:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8005f08 <_strtod_l+0x598>
 8005e7c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8005e80:	2300      	movs	r3, #0
 8005e82:	9308      	str	r3, [sp, #32]
 8005e84:	e07a      	b.n	8005f7c <_strtod_l+0x60c>
 8005e86:	07e2      	lsls	r2, r4, #31
 8005e88:	d505      	bpl.n	8005e96 <_strtod_l+0x526>
 8005e8a:	9b08      	ldr	r3, [sp, #32]
 8005e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e90:	f7fa fb2c 	bl	80004ec <__aeabi_dmul>
 8005e94:	2301      	movs	r3, #1
 8005e96:	9a08      	ldr	r2, [sp, #32]
 8005e98:	3601      	adds	r6, #1
 8005e9a:	3208      	adds	r2, #8
 8005e9c:	1064      	asrs	r4, r4, #1
 8005e9e:	9208      	str	r2, [sp, #32]
 8005ea0:	e7cd      	b.n	8005e3e <_strtod_l+0x4ce>
 8005ea2:	d0ed      	beq.n	8005e80 <_strtod_l+0x510>
 8005ea4:	4264      	negs	r4, r4
 8005ea6:	f014 020f 	ands.w	r2, r4, #15
 8005eaa:	d00a      	beq.n	8005ec2 <_strtod_l+0x552>
 8005eac:	4b13      	ldr	r3, [pc, #76]	@ (8005efc <_strtod_l+0x58c>)
 8005eae:	4650      	mov	r0, sl
 8005eb0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005eb4:	4659      	mov	r1, fp
 8005eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eba:	f7fa fc41 	bl	8000740 <__aeabi_ddiv>
 8005ebe:	4682      	mov	sl, r0
 8005ec0:	468b      	mov	fp, r1
 8005ec2:	1124      	asrs	r4, r4, #4
 8005ec4:	d0dc      	beq.n	8005e80 <_strtod_l+0x510>
 8005ec6:	2c1f      	cmp	r4, #31
 8005ec8:	dd20      	ble.n	8005f0c <_strtod_l+0x59c>
 8005eca:	2400      	movs	r4, #0
 8005ecc:	46a0      	mov	r8, r4
 8005ece:	46a1      	mov	r9, r4
 8005ed0:	940a      	str	r4, [sp, #40]	@ 0x28
 8005ed2:	2322      	movs	r3, #34	@ 0x22
 8005ed4:	9a05      	ldr	r2, [sp, #20]
 8005ed6:	f04f 0a00 	mov.w	sl, #0
 8005eda:	f04f 0b00 	mov.w	fp, #0
 8005ede:	6013      	str	r3, [r2, #0]
 8005ee0:	e768      	b.n	8005db4 <_strtod_l+0x444>
 8005ee2:	bf00      	nop
 8005ee4:	0800a5fd 	.word	0x0800a5fd
 8005ee8:	0800a5a0 	.word	0x0800a5a0
 8005eec:	0800a5f5 	.word	0x0800a5f5
 8005ef0:	0800a62f 	.word	0x0800a62f
 8005ef4:	7ff00000 	.word	0x7ff00000
 8005ef8:	0800a9bd 	.word	0x0800a9bd
 8005efc:	0800a7a8 	.word	0x0800a7a8
 8005f00:	0800a780 	.word	0x0800a780
 8005f04:	7ca00000 	.word	0x7ca00000
 8005f08:	7fefffff 	.word	0x7fefffff
 8005f0c:	f014 0310 	ands.w	r3, r4, #16
 8005f10:	bf18      	it	ne
 8005f12:	236a      	movne	r3, #106	@ 0x6a
 8005f14:	4650      	mov	r0, sl
 8005f16:	9308      	str	r3, [sp, #32]
 8005f18:	4659      	mov	r1, fp
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	4ea9      	ldr	r6, [pc, #676]	@ (80061c4 <_strtod_l+0x854>)
 8005f1e:	07e2      	lsls	r2, r4, #31
 8005f20:	d504      	bpl.n	8005f2c <_strtod_l+0x5bc>
 8005f22:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005f26:	f7fa fae1 	bl	80004ec <__aeabi_dmul>
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	1064      	asrs	r4, r4, #1
 8005f2e:	f106 0608 	add.w	r6, r6, #8
 8005f32:	d1f4      	bne.n	8005f1e <_strtod_l+0x5ae>
 8005f34:	b10b      	cbz	r3, 8005f3a <_strtod_l+0x5ca>
 8005f36:	4682      	mov	sl, r0
 8005f38:	468b      	mov	fp, r1
 8005f3a:	9b08      	ldr	r3, [sp, #32]
 8005f3c:	b1b3      	cbz	r3, 8005f6c <_strtod_l+0x5fc>
 8005f3e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8005f42:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	4659      	mov	r1, fp
 8005f4a:	dd0f      	ble.n	8005f6c <_strtod_l+0x5fc>
 8005f4c:	2b1f      	cmp	r3, #31
 8005f4e:	dd57      	ble.n	8006000 <_strtod_l+0x690>
 8005f50:	2b34      	cmp	r3, #52	@ 0x34
 8005f52:	bfd8      	it	le
 8005f54:	f04f 33ff 	movle.w	r3, #4294967295
 8005f58:	f04f 0a00 	mov.w	sl, #0
 8005f5c:	bfcf      	iteee	gt
 8005f5e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8005f62:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8005f66:	4093      	lslle	r3, r2
 8005f68:	ea03 0b01 	andle.w	fp, r3, r1
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	2300      	movs	r3, #0
 8005f70:	4650      	mov	r0, sl
 8005f72:	4659      	mov	r1, fp
 8005f74:	f7fa fd22 	bl	80009bc <__aeabi_dcmpeq>
 8005f78:	2800      	cmp	r0, #0
 8005f7a:	d1a6      	bne.n	8005eca <_strtod_l+0x55a>
 8005f7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f7e:	463a      	mov	r2, r7
 8005f80:	9300      	str	r3, [sp, #0]
 8005f82:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8005f84:	462b      	mov	r3, r5
 8005f86:	9805      	ldr	r0, [sp, #20]
 8005f88:	f002 fbaa 	bl	80086e0 <__s2b>
 8005f8c:	900a      	str	r0, [sp, #40]	@ 0x28
 8005f8e:	2800      	cmp	r0, #0
 8005f90:	f43f af05 	beq.w	8005d9e <_strtod_l+0x42e>
 8005f94:	2400      	movs	r4, #0
 8005f96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005f98:	eba9 0308 	sub.w	r3, r9, r8
 8005f9c:	2a00      	cmp	r2, #0
 8005f9e:	bfa8      	it	ge
 8005fa0:	2300      	movge	r3, #0
 8005fa2:	46a0      	mov	r8, r4
 8005fa4:	9312      	str	r3, [sp, #72]	@ 0x48
 8005fa6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8005faa:	9316      	str	r3, [sp, #88]	@ 0x58
 8005fac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005fae:	9805      	ldr	r0, [sp, #20]
 8005fb0:	6859      	ldr	r1, [r3, #4]
 8005fb2:	f002 faed 	bl	8008590 <_Balloc>
 8005fb6:	4681      	mov	r9, r0
 8005fb8:	2800      	cmp	r0, #0
 8005fba:	f43f aef4 	beq.w	8005da6 <_strtod_l+0x436>
 8005fbe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005fc0:	300c      	adds	r0, #12
 8005fc2:	691a      	ldr	r2, [r3, #16]
 8005fc4:	f103 010c 	add.w	r1, r3, #12
 8005fc8:	3202      	adds	r2, #2
 8005fca:	0092      	lsls	r2, r2, #2
 8005fcc:	f001 f8e5 	bl	800719a <memcpy>
 8005fd0:	ab1c      	add	r3, sp, #112	@ 0x70
 8005fd2:	9301      	str	r3, [sp, #4]
 8005fd4:	ab1b      	add	r3, sp, #108	@ 0x6c
 8005fd6:	9300      	str	r3, [sp, #0]
 8005fd8:	4652      	mov	r2, sl
 8005fda:	465b      	mov	r3, fp
 8005fdc:	9805      	ldr	r0, [sp, #20]
 8005fde:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8005fe2:	f002 feaf 	bl	8008d44 <__d2b>
 8005fe6:	901a      	str	r0, [sp, #104]	@ 0x68
 8005fe8:	2800      	cmp	r0, #0
 8005fea:	f43f aedc 	beq.w	8005da6 <_strtod_l+0x436>
 8005fee:	2101      	movs	r1, #1
 8005ff0:	9805      	ldr	r0, [sp, #20]
 8005ff2:	f002 fc0b 	bl	800880c <__i2b>
 8005ff6:	4680      	mov	r8, r0
 8005ff8:	b948      	cbnz	r0, 800600e <_strtod_l+0x69e>
 8005ffa:	f04f 0800 	mov.w	r8, #0
 8005ffe:	e6d2      	b.n	8005da6 <_strtod_l+0x436>
 8006000:	f04f 32ff 	mov.w	r2, #4294967295
 8006004:	fa02 f303 	lsl.w	r3, r2, r3
 8006008:	ea03 0a0a 	and.w	sl, r3, sl
 800600c:	e7ae      	b.n	8005f6c <_strtod_l+0x5fc>
 800600e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8006010:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006012:	2d00      	cmp	r5, #0
 8006014:	bfab      	itete	ge
 8006016:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8006018:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800601a:	18ef      	addge	r7, r5, r3
 800601c:	1b5e      	sublt	r6, r3, r5
 800601e:	9b08      	ldr	r3, [sp, #32]
 8006020:	bfa8      	it	ge
 8006022:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8006024:	eba5 0503 	sub.w	r5, r5, r3
 8006028:	4415      	add	r5, r2
 800602a:	4b67      	ldr	r3, [pc, #412]	@ (80061c8 <_strtod_l+0x858>)
 800602c:	f105 35ff 	add.w	r5, r5, #4294967295
 8006030:	bfb8      	it	lt
 8006032:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8006034:	429d      	cmp	r5, r3
 8006036:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800603a:	da50      	bge.n	80060de <_strtod_l+0x76e>
 800603c:	1b5b      	subs	r3, r3, r5
 800603e:	2b1f      	cmp	r3, #31
 8006040:	f04f 0101 	mov.w	r1, #1
 8006044:	eba2 0203 	sub.w	r2, r2, r3
 8006048:	dc3d      	bgt.n	80060c6 <_strtod_l+0x756>
 800604a:	fa01 f303 	lsl.w	r3, r1, r3
 800604e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006050:	2300      	movs	r3, #0
 8006052:	9310      	str	r3, [sp, #64]	@ 0x40
 8006054:	18bd      	adds	r5, r7, r2
 8006056:	9b08      	ldr	r3, [sp, #32]
 8006058:	42af      	cmp	r7, r5
 800605a:	4416      	add	r6, r2
 800605c:	441e      	add	r6, r3
 800605e:	463b      	mov	r3, r7
 8006060:	bfa8      	it	ge
 8006062:	462b      	movge	r3, r5
 8006064:	42b3      	cmp	r3, r6
 8006066:	bfa8      	it	ge
 8006068:	4633      	movge	r3, r6
 800606a:	2b00      	cmp	r3, #0
 800606c:	bfc2      	ittt	gt
 800606e:	1aed      	subgt	r5, r5, r3
 8006070:	1af6      	subgt	r6, r6, r3
 8006072:	1aff      	subgt	r7, r7, r3
 8006074:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006076:	2b00      	cmp	r3, #0
 8006078:	dd16      	ble.n	80060a8 <_strtod_l+0x738>
 800607a:	4641      	mov	r1, r8
 800607c:	461a      	mov	r2, r3
 800607e:	9805      	ldr	r0, [sp, #20]
 8006080:	f002 fc82 	bl	8008988 <__pow5mult>
 8006084:	4680      	mov	r8, r0
 8006086:	2800      	cmp	r0, #0
 8006088:	d0b7      	beq.n	8005ffa <_strtod_l+0x68a>
 800608a:	4601      	mov	r1, r0
 800608c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800608e:	9805      	ldr	r0, [sp, #20]
 8006090:	f002 fbd2 	bl	8008838 <__multiply>
 8006094:	900e      	str	r0, [sp, #56]	@ 0x38
 8006096:	2800      	cmp	r0, #0
 8006098:	f43f ae85 	beq.w	8005da6 <_strtod_l+0x436>
 800609c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800609e:	9805      	ldr	r0, [sp, #20]
 80060a0:	f002 fab6 	bl	8008610 <_Bfree>
 80060a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80060a6:	931a      	str	r3, [sp, #104]	@ 0x68
 80060a8:	2d00      	cmp	r5, #0
 80060aa:	dc1d      	bgt.n	80060e8 <_strtod_l+0x778>
 80060ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	dd23      	ble.n	80060fa <_strtod_l+0x78a>
 80060b2:	4649      	mov	r1, r9
 80060b4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80060b6:	9805      	ldr	r0, [sp, #20]
 80060b8:	f002 fc66 	bl	8008988 <__pow5mult>
 80060bc:	4681      	mov	r9, r0
 80060be:	b9e0      	cbnz	r0, 80060fa <_strtod_l+0x78a>
 80060c0:	f04f 0900 	mov.w	r9, #0
 80060c4:	e66f      	b.n	8005da6 <_strtod_l+0x436>
 80060c6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80060ca:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80060ce:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80060d2:	35e2      	adds	r5, #226	@ 0xe2
 80060d4:	fa01 f305 	lsl.w	r3, r1, r5
 80060d8:	9310      	str	r3, [sp, #64]	@ 0x40
 80060da:	9113      	str	r1, [sp, #76]	@ 0x4c
 80060dc:	e7ba      	b.n	8006054 <_strtod_l+0x6e4>
 80060de:	2300      	movs	r3, #0
 80060e0:	9310      	str	r3, [sp, #64]	@ 0x40
 80060e2:	2301      	movs	r3, #1
 80060e4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80060e6:	e7b5      	b.n	8006054 <_strtod_l+0x6e4>
 80060e8:	462a      	mov	r2, r5
 80060ea:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80060ec:	9805      	ldr	r0, [sp, #20]
 80060ee:	f002 fca5 	bl	8008a3c <__lshift>
 80060f2:	901a      	str	r0, [sp, #104]	@ 0x68
 80060f4:	2800      	cmp	r0, #0
 80060f6:	d1d9      	bne.n	80060ac <_strtod_l+0x73c>
 80060f8:	e655      	b.n	8005da6 <_strtod_l+0x436>
 80060fa:	2e00      	cmp	r6, #0
 80060fc:	dd07      	ble.n	800610e <_strtod_l+0x79e>
 80060fe:	4649      	mov	r1, r9
 8006100:	4632      	mov	r2, r6
 8006102:	9805      	ldr	r0, [sp, #20]
 8006104:	f002 fc9a 	bl	8008a3c <__lshift>
 8006108:	4681      	mov	r9, r0
 800610a:	2800      	cmp	r0, #0
 800610c:	d0d8      	beq.n	80060c0 <_strtod_l+0x750>
 800610e:	2f00      	cmp	r7, #0
 8006110:	dd08      	ble.n	8006124 <_strtod_l+0x7b4>
 8006112:	4641      	mov	r1, r8
 8006114:	463a      	mov	r2, r7
 8006116:	9805      	ldr	r0, [sp, #20]
 8006118:	f002 fc90 	bl	8008a3c <__lshift>
 800611c:	4680      	mov	r8, r0
 800611e:	2800      	cmp	r0, #0
 8006120:	f43f ae41 	beq.w	8005da6 <_strtod_l+0x436>
 8006124:	464a      	mov	r2, r9
 8006126:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006128:	9805      	ldr	r0, [sp, #20]
 800612a:	f002 fd0f 	bl	8008b4c <__mdiff>
 800612e:	4604      	mov	r4, r0
 8006130:	2800      	cmp	r0, #0
 8006132:	f43f ae38 	beq.w	8005da6 <_strtod_l+0x436>
 8006136:	68c3      	ldr	r3, [r0, #12]
 8006138:	4641      	mov	r1, r8
 800613a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800613c:	2300      	movs	r3, #0
 800613e:	60c3      	str	r3, [r0, #12]
 8006140:	f002 fce8 	bl	8008b14 <__mcmp>
 8006144:	2800      	cmp	r0, #0
 8006146:	da45      	bge.n	80061d4 <_strtod_l+0x864>
 8006148:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800614a:	ea53 030a 	orrs.w	r3, r3, sl
 800614e:	d16b      	bne.n	8006228 <_strtod_l+0x8b8>
 8006150:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006154:	2b00      	cmp	r3, #0
 8006156:	d167      	bne.n	8006228 <_strtod_l+0x8b8>
 8006158:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800615c:	0d1b      	lsrs	r3, r3, #20
 800615e:	051b      	lsls	r3, r3, #20
 8006160:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006164:	d960      	bls.n	8006228 <_strtod_l+0x8b8>
 8006166:	6963      	ldr	r3, [r4, #20]
 8006168:	b913      	cbnz	r3, 8006170 <_strtod_l+0x800>
 800616a:	6923      	ldr	r3, [r4, #16]
 800616c:	2b01      	cmp	r3, #1
 800616e:	dd5b      	ble.n	8006228 <_strtod_l+0x8b8>
 8006170:	4621      	mov	r1, r4
 8006172:	2201      	movs	r2, #1
 8006174:	9805      	ldr	r0, [sp, #20]
 8006176:	f002 fc61 	bl	8008a3c <__lshift>
 800617a:	4641      	mov	r1, r8
 800617c:	4604      	mov	r4, r0
 800617e:	f002 fcc9 	bl	8008b14 <__mcmp>
 8006182:	2800      	cmp	r0, #0
 8006184:	dd50      	ble.n	8006228 <_strtod_l+0x8b8>
 8006186:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800618a:	9a08      	ldr	r2, [sp, #32]
 800618c:	0d1b      	lsrs	r3, r3, #20
 800618e:	051b      	lsls	r3, r3, #20
 8006190:	2a00      	cmp	r2, #0
 8006192:	d06a      	beq.n	800626a <_strtod_l+0x8fa>
 8006194:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006198:	d867      	bhi.n	800626a <_strtod_l+0x8fa>
 800619a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800619e:	f67f ae98 	bls.w	8005ed2 <_strtod_l+0x562>
 80061a2:	4650      	mov	r0, sl
 80061a4:	4659      	mov	r1, fp
 80061a6:	4b09      	ldr	r3, [pc, #36]	@ (80061cc <_strtod_l+0x85c>)
 80061a8:	2200      	movs	r2, #0
 80061aa:	f7fa f99f 	bl	80004ec <__aeabi_dmul>
 80061ae:	4b08      	ldr	r3, [pc, #32]	@ (80061d0 <_strtod_l+0x860>)
 80061b0:	4682      	mov	sl, r0
 80061b2:	400b      	ands	r3, r1
 80061b4:	468b      	mov	fp, r1
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	f47f ae00 	bne.w	8005dbc <_strtod_l+0x44c>
 80061bc:	2322      	movs	r3, #34	@ 0x22
 80061be:	9a05      	ldr	r2, [sp, #20]
 80061c0:	6013      	str	r3, [r2, #0]
 80061c2:	e5fb      	b.n	8005dbc <_strtod_l+0x44c>
 80061c4:	0800a5c8 	.word	0x0800a5c8
 80061c8:	fffffc02 	.word	0xfffffc02
 80061cc:	39500000 	.word	0x39500000
 80061d0:	7ff00000 	.word	0x7ff00000
 80061d4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80061d8:	d165      	bne.n	80062a6 <_strtod_l+0x936>
 80061da:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80061dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80061e0:	b35a      	cbz	r2, 800623a <_strtod_l+0x8ca>
 80061e2:	4a99      	ldr	r2, [pc, #612]	@ (8006448 <_strtod_l+0xad8>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d12b      	bne.n	8006240 <_strtod_l+0x8d0>
 80061e8:	9b08      	ldr	r3, [sp, #32]
 80061ea:	4651      	mov	r1, sl
 80061ec:	b303      	cbz	r3, 8006230 <_strtod_l+0x8c0>
 80061ee:	465a      	mov	r2, fp
 80061f0:	4b96      	ldr	r3, [pc, #600]	@ (800644c <_strtod_l+0xadc>)
 80061f2:	4013      	ands	r3, r2
 80061f4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80061f8:	f04f 32ff 	mov.w	r2, #4294967295
 80061fc:	d81b      	bhi.n	8006236 <_strtod_l+0x8c6>
 80061fe:	0d1b      	lsrs	r3, r3, #20
 8006200:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006204:	fa02 f303 	lsl.w	r3, r2, r3
 8006208:	4299      	cmp	r1, r3
 800620a:	d119      	bne.n	8006240 <_strtod_l+0x8d0>
 800620c:	4b90      	ldr	r3, [pc, #576]	@ (8006450 <_strtod_l+0xae0>)
 800620e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006210:	429a      	cmp	r2, r3
 8006212:	d102      	bne.n	800621a <_strtod_l+0x8aa>
 8006214:	3101      	adds	r1, #1
 8006216:	f43f adc6 	beq.w	8005da6 <_strtod_l+0x436>
 800621a:	f04f 0a00 	mov.w	sl, #0
 800621e:	4b8b      	ldr	r3, [pc, #556]	@ (800644c <_strtod_l+0xadc>)
 8006220:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006222:	401a      	ands	r2, r3
 8006224:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8006228:	9b08      	ldr	r3, [sp, #32]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d1b9      	bne.n	80061a2 <_strtod_l+0x832>
 800622e:	e5c5      	b.n	8005dbc <_strtod_l+0x44c>
 8006230:	f04f 33ff 	mov.w	r3, #4294967295
 8006234:	e7e8      	b.n	8006208 <_strtod_l+0x898>
 8006236:	4613      	mov	r3, r2
 8006238:	e7e6      	b.n	8006208 <_strtod_l+0x898>
 800623a:	ea53 030a 	orrs.w	r3, r3, sl
 800623e:	d0a2      	beq.n	8006186 <_strtod_l+0x816>
 8006240:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006242:	b1db      	cbz	r3, 800627c <_strtod_l+0x90c>
 8006244:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006246:	4213      	tst	r3, r2
 8006248:	d0ee      	beq.n	8006228 <_strtod_l+0x8b8>
 800624a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800624c:	4650      	mov	r0, sl
 800624e:	4659      	mov	r1, fp
 8006250:	9a08      	ldr	r2, [sp, #32]
 8006252:	b1bb      	cbz	r3, 8006284 <_strtod_l+0x914>
 8006254:	f7ff fb6a 	bl	800592c <sulp>
 8006258:	4602      	mov	r2, r0
 800625a:	460b      	mov	r3, r1
 800625c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006260:	f7f9 ff8e 	bl	8000180 <__adddf3>
 8006264:	4682      	mov	sl, r0
 8006266:	468b      	mov	fp, r1
 8006268:	e7de      	b.n	8006228 <_strtod_l+0x8b8>
 800626a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800626e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006272:	f04f 3aff 	mov.w	sl, #4294967295
 8006276:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800627a:	e7d5      	b.n	8006228 <_strtod_l+0x8b8>
 800627c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800627e:	ea13 0f0a 	tst.w	r3, sl
 8006282:	e7e1      	b.n	8006248 <_strtod_l+0x8d8>
 8006284:	f7ff fb52 	bl	800592c <sulp>
 8006288:	4602      	mov	r2, r0
 800628a:	460b      	mov	r3, r1
 800628c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006290:	f7f9 ff74 	bl	800017c <__aeabi_dsub>
 8006294:	2200      	movs	r2, #0
 8006296:	2300      	movs	r3, #0
 8006298:	4682      	mov	sl, r0
 800629a:	468b      	mov	fp, r1
 800629c:	f7fa fb8e 	bl	80009bc <__aeabi_dcmpeq>
 80062a0:	2800      	cmp	r0, #0
 80062a2:	d0c1      	beq.n	8006228 <_strtod_l+0x8b8>
 80062a4:	e615      	b.n	8005ed2 <_strtod_l+0x562>
 80062a6:	4641      	mov	r1, r8
 80062a8:	4620      	mov	r0, r4
 80062aa:	f002 fda3 	bl	8008df4 <__ratio>
 80062ae:	2200      	movs	r2, #0
 80062b0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80062b4:	4606      	mov	r6, r0
 80062b6:	460f      	mov	r7, r1
 80062b8:	f7fa fb94 	bl	80009e4 <__aeabi_dcmple>
 80062bc:	2800      	cmp	r0, #0
 80062be:	d06d      	beq.n	800639c <_strtod_l+0xa2c>
 80062c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d178      	bne.n	80063b8 <_strtod_l+0xa48>
 80062c6:	f1ba 0f00 	cmp.w	sl, #0
 80062ca:	d156      	bne.n	800637a <_strtod_l+0xa0a>
 80062cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80062ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d158      	bne.n	8006388 <_strtod_l+0xa18>
 80062d6:	2200      	movs	r2, #0
 80062d8:	4630      	mov	r0, r6
 80062da:	4639      	mov	r1, r7
 80062dc:	4b5d      	ldr	r3, [pc, #372]	@ (8006454 <_strtod_l+0xae4>)
 80062de:	f7fa fb77 	bl	80009d0 <__aeabi_dcmplt>
 80062e2:	2800      	cmp	r0, #0
 80062e4:	d157      	bne.n	8006396 <_strtod_l+0xa26>
 80062e6:	4630      	mov	r0, r6
 80062e8:	4639      	mov	r1, r7
 80062ea:	2200      	movs	r2, #0
 80062ec:	4b5a      	ldr	r3, [pc, #360]	@ (8006458 <_strtod_l+0xae8>)
 80062ee:	f7fa f8fd 	bl	80004ec <__aeabi_dmul>
 80062f2:	4606      	mov	r6, r0
 80062f4:	460f      	mov	r7, r1
 80062f6:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80062fa:	9606      	str	r6, [sp, #24]
 80062fc:	9307      	str	r3, [sp, #28]
 80062fe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006302:	4d52      	ldr	r5, [pc, #328]	@ (800644c <_strtod_l+0xadc>)
 8006304:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006308:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800630a:	401d      	ands	r5, r3
 800630c:	4b53      	ldr	r3, [pc, #332]	@ (800645c <_strtod_l+0xaec>)
 800630e:	429d      	cmp	r5, r3
 8006310:	f040 80aa 	bne.w	8006468 <_strtod_l+0xaf8>
 8006314:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006316:	4650      	mov	r0, sl
 8006318:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800631c:	4659      	mov	r1, fp
 800631e:	f002 fca9 	bl	8008c74 <__ulp>
 8006322:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006326:	f7fa f8e1 	bl	80004ec <__aeabi_dmul>
 800632a:	4652      	mov	r2, sl
 800632c:	465b      	mov	r3, fp
 800632e:	f7f9 ff27 	bl	8000180 <__adddf3>
 8006332:	460b      	mov	r3, r1
 8006334:	4945      	ldr	r1, [pc, #276]	@ (800644c <_strtod_l+0xadc>)
 8006336:	4a4a      	ldr	r2, [pc, #296]	@ (8006460 <_strtod_l+0xaf0>)
 8006338:	4019      	ands	r1, r3
 800633a:	4291      	cmp	r1, r2
 800633c:	4682      	mov	sl, r0
 800633e:	d942      	bls.n	80063c6 <_strtod_l+0xa56>
 8006340:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006342:	4b43      	ldr	r3, [pc, #268]	@ (8006450 <_strtod_l+0xae0>)
 8006344:	429a      	cmp	r2, r3
 8006346:	d103      	bne.n	8006350 <_strtod_l+0x9e0>
 8006348:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800634a:	3301      	adds	r3, #1
 800634c:	f43f ad2b 	beq.w	8005da6 <_strtod_l+0x436>
 8006350:	f04f 3aff 	mov.w	sl, #4294967295
 8006354:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8006450 <_strtod_l+0xae0>
 8006358:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800635a:	9805      	ldr	r0, [sp, #20]
 800635c:	f002 f958 	bl	8008610 <_Bfree>
 8006360:	4649      	mov	r1, r9
 8006362:	9805      	ldr	r0, [sp, #20]
 8006364:	f002 f954 	bl	8008610 <_Bfree>
 8006368:	4641      	mov	r1, r8
 800636a:	9805      	ldr	r0, [sp, #20]
 800636c:	f002 f950 	bl	8008610 <_Bfree>
 8006370:	4621      	mov	r1, r4
 8006372:	9805      	ldr	r0, [sp, #20]
 8006374:	f002 f94c 	bl	8008610 <_Bfree>
 8006378:	e618      	b.n	8005fac <_strtod_l+0x63c>
 800637a:	f1ba 0f01 	cmp.w	sl, #1
 800637e:	d103      	bne.n	8006388 <_strtod_l+0xa18>
 8006380:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006382:	2b00      	cmp	r3, #0
 8006384:	f43f ada5 	beq.w	8005ed2 <_strtod_l+0x562>
 8006388:	2200      	movs	r2, #0
 800638a:	4b36      	ldr	r3, [pc, #216]	@ (8006464 <_strtod_l+0xaf4>)
 800638c:	2600      	movs	r6, #0
 800638e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006392:	4f30      	ldr	r7, [pc, #192]	@ (8006454 <_strtod_l+0xae4>)
 8006394:	e7b3      	b.n	80062fe <_strtod_l+0x98e>
 8006396:	2600      	movs	r6, #0
 8006398:	4f2f      	ldr	r7, [pc, #188]	@ (8006458 <_strtod_l+0xae8>)
 800639a:	e7ac      	b.n	80062f6 <_strtod_l+0x986>
 800639c:	4630      	mov	r0, r6
 800639e:	4639      	mov	r1, r7
 80063a0:	4b2d      	ldr	r3, [pc, #180]	@ (8006458 <_strtod_l+0xae8>)
 80063a2:	2200      	movs	r2, #0
 80063a4:	f7fa f8a2 	bl	80004ec <__aeabi_dmul>
 80063a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80063aa:	4606      	mov	r6, r0
 80063ac:	460f      	mov	r7, r1
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d0a1      	beq.n	80062f6 <_strtod_l+0x986>
 80063b2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80063b6:	e7a2      	b.n	80062fe <_strtod_l+0x98e>
 80063b8:	2200      	movs	r2, #0
 80063ba:	4b26      	ldr	r3, [pc, #152]	@ (8006454 <_strtod_l+0xae4>)
 80063bc:	4616      	mov	r6, r2
 80063be:	461f      	mov	r7, r3
 80063c0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80063c4:	e79b      	b.n	80062fe <_strtod_l+0x98e>
 80063c6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80063ca:	9b08      	ldr	r3, [sp, #32]
 80063cc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d1c1      	bne.n	8006358 <_strtod_l+0x9e8>
 80063d4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80063d8:	0d1b      	lsrs	r3, r3, #20
 80063da:	051b      	lsls	r3, r3, #20
 80063dc:	429d      	cmp	r5, r3
 80063de:	d1bb      	bne.n	8006358 <_strtod_l+0x9e8>
 80063e0:	4630      	mov	r0, r6
 80063e2:	4639      	mov	r1, r7
 80063e4:	f7fa febe 	bl	8001164 <__aeabi_d2lz>
 80063e8:	f7fa f852 	bl	8000490 <__aeabi_l2d>
 80063ec:	4602      	mov	r2, r0
 80063ee:	460b      	mov	r3, r1
 80063f0:	4630      	mov	r0, r6
 80063f2:	4639      	mov	r1, r7
 80063f4:	f7f9 fec2 	bl	800017c <__aeabi_dsub>
 80063f8:	460b      	mov	r3, r1
 80063fa:	4602      	mov	r2, r0
 80063fc:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8006400:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006404:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006406:	ea46 060a 	orr.w	r6, r6, sl
 800640a:	431e      	orrs	r6, r3
 800640c:	d069      	beq.n	80064e2 <_strtod_l+0xb72>
 800640e:	a30a      	add	r3, pc, #40	@ (adr r3, 8006438 <_strtod_l+0xac8>)
 8006410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006414:	f7fa fadc 	bl	80009d0 <__aeabi_dcmplt>
 8006418:	2800      	cmp	r0, #0
 800641a:	f47f accf 	bne.w	8005dbc <_strtod_l+0x44c>
 800641e:	a308      	add	r3, pc, #32	@ (adr r3, 8006440 <_strtod_l+0xad0>)
 8006420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006424:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006428:	f7fa faf0 	bl	8000a0c <__aeabi_dcmpgt>
 800642c:	2800      	cmp	r0, #0
 800642e:	d093      	beq.n	8006358 <_strtod_l+0x9e8>
 8006430:	e4c4      	b.n	8005dbc <_strtod_l+0x44c>
 8006432:	bf00      	nop
 8006434:	f3af 8000 	nop.w
 8006438:	94a03595 	.word	0x94a03595
 800643c:	3fdfffff 	.word	0x3fdfffff
 8006440:	35afe535 	.word	0x35afe535
 8006444:	3fe00000 	.word	0x3fe00000
 8006448:	000fffff 	.word	0x000fffff
 800644c:	7ff00000 	.word	0x7ff00000
 8006450:	7fefffff 	.word	0x7fefffff
 8006454:	3ff00000 	.word	0x3ff00000
 8006458:	3fe00000 	.word	0x3fe00000
 800645c:	7fe00000 	.word	0x7fe00000
 8006460:	7c9fffff 	.word	0x7c9fffff
 8006464:	bff00000 	.word	0xbff00000
 8006468:	9b08      	ldr	r3, [sp, #32]
 800646a:	b323      	cbz	r3, 80064b6 <_strtod_l+0xb46>
 800646c:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8006470:	d821      	bhi.n	80064b6 <_strtod_l+0xb46>
 8006472:	a327      	add	r3, pc, #156	@ (adr r3, 8006510 <_strtod_l+0xba0>)
 8006474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006478:	4630      	mov	r0, r6
 800647a:	4639      	mov	r1, r7
 800647c:	f7fa fab2 	bl	80009e4 <__aeabi_dcmple>
 8006480:	b1a0      	cbz	r0, 80064ac <_strtod_l+0xb3c>
 8006482:	4639      	mov	r1, r7
 8006484:	4630      	mov	r0, r6
 8006486:	f7fa fb09 	bl	8000a9c <__aeabi_d2uiz>
 800648a:	2801      	cmp	r0, #1
 800648c:	bf38      	it	cc
 800648e:	2001      	movcc	r0, #1
 8006490:	f7f9 ffb2 	bl	80003f8 <__aeabi_ui2d>
 8006494:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006496:	4606      	mov	r6, r0
 8006498:	460f      	mov	r7, r1
 800649a:	b9fb      	cbnz	r3, 80064dc <_strtod_l+0xb6c>
 800649c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80064a0:	9014      	str	r0, [sp, #80]	@ 0x50
 80064a2:	9315      	str	r3, [sp, #84]	@ 0x54
 80064a4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80064a8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80064ac:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80064ae:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80064b2:	1b5b      	subs	r3, r3, r5
 80064b4:	9311      	str	r3, [sp, #68]	@ 0x44
 80064b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80064ba:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80064be:	f002 fbd9 	bl	8008c74 <__ulp>
 80064c2:	4602      	mov	r2, r0
 80064c4:	460b      	mov	r3, r1
 80064c6:	4650      	mov	r0, sl
 80064c8:	4659      	mov	r1, fp
 80064ca:	f7fa f80f 	bl	80004ec <__aeabi_dmul>
 80064ce:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80064d2:	f7f9 fe55 	bl	8000180 <__adddf3>
 80064d6:	4682      	mov	sl, r0
 80064d8:	468b      	mov	fp, r1
 80064da:	e776      	b.n	80063ca <_strtod_l+0xa5a>
 80064dc:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80064e0:	e7e0      	b.n	80064a4 <_strtod_l+0xb34>
 80064e2:	a30d      	add	r3, pc, #52	@ (adr r3, 8006518 <_strtod_l+0xba8>)
 80064e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e8:	f7fa fa72 	bl	80009d0 <__aeabi_dcmplt>
 80064ec:	e79e      	b.n	800642c <_strtod_l+0xabc>
 80064ee:	2300      	movs	r3, #0
 80064f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80064f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80064f4:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80064f6:	6013      	str	r3, [r2, #0]
 80064f8:	f7ff ba77 	b.w	80059ea <_strtod_l+0x7a>
 80064fc:	2a65      	cmp	r2, #101	@ 0x65
 80064fe:	f43f ab6e 	beq.w	8005bde <_strtod_l+0x26e>
 8006502:	2a45      	cmp	r2, #69	@ 0x45
 8006504:	f43f ab6b 	beq.w	8005bde <_strtod_l+0x26e>
 8006508:	2301      	movs	r3, #1
 800650a:	f7ff bba6 	b.w	8005c5a <_strtod_l+0x2ea>
 800650e:	bf00      	nop
 8006510:	ffc00000 	.word	0xffc00000
 8006514:	41dfffff 	.word	0x41dfffff
 8006518:	94a03595 	.word	0x94a03595
 800651c:	3fcfffff 	.word	0x3fcfffff

08006520 <strtod>:
 8006520:	460a      	mov	r2, r1
 8006522:	4601      	mov	r1, r0
 8006524:	4802      	ldr	r0, [pc, #8]	@ (8006530 <strtod+0x10>)
 8006526:	4b03      	ldr	r3, [pc, #12]	@ (8006534 <strtod+0x14>)
 8006528:	6800      	ldr	r0, [r0, #0]
 800652a:	f7ff ba21 	b.w	8005970 <_strtod_l>
 800652e:	bf00      	nop
 8006530:	20000264 	.word	0x20000264
 8006534:	200000f8 	.word	0x200000f8

08006538 <__cvt>:
 8006538:	2b00      	cmp	r3, #0
 800653a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800653e:	461d      	mov	r5, r3
 8006540:	bfbb      	ittet	lt
 8006542:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8006546:	461d      	movlt	r5, r3
 8006548:	2300      	movge	r3, #0
 800654a:	232d      	movlt	r3, #45	@ 0x2d
 800654c:	b088      	sub	sp, #32
 800654e:	4614      	mov	r4, r2
 8006550:	bfb8      	it	lt
 8006552:	4614      	movlt	r4, r2
 8006554:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006556:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8006558:	7013      	strb	r3, [r2, #0]
 800655a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800655c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8006560:	f023 0820 	bic.w	r8, r3, #32
 8006564:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006568:	d005      	beq.n	8006576 <__cvt+0x3e>
 800656a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800656e:	d100      	bne.n	8006572 <__cvt+0x3a>
 8006570:	3601      	adds	r6, #1
 8006572:	2302      	movs	r3, #2
 8006574:	e000      	b.n	8006578 <__cvt+0x40>
 8006576:	2303      	movs	r3, #3
 8006578:	aa07      	add	r2, sp, #28
 800657a:	9204      	str	r2, [sp, #16]
 800657c:	aa06      	add	r2, sp, #24
 800657e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006582:	e9cd 3600 	strd	r3, r6, [sp]
 8006586:	4622      	mov	r2, r4
 8006588:	462b      	mov	r3, r5
 800658a:	f000 fea5 	bl	80072d8 <_dtoa_r>
 800658e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006592:	4607      	mov	r7, r0
 8006594:	d119      	bne.n	80065ca <__cvt+0x92>
 8006596:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006598:	07db      	lsls	r3, r3, #31
 800659a:	d50e      	bpl.n	80065ba <__cvt+0x82>
 800659c:	eb00 0906 	add.w	r9, r0, r6
 80065a0:	2200      	movs	r2, #0
 80065a2:	2300      	movs	r3, #0
 80065a4:	4620      	mov	r0, r4
 80065a6:	4629      	mov	r1, r5
 80065a8:	f7fa fa08 	bl	80009bc <__aeabi_dcmpeq>
 80065ac:	b108      	cbz	r0, 80065b2 <__cvt+0x7a>
 80065ae:	f8cd 901c 	str.w	r9, [sp, #28]
 80065b2:	2230      	movs	r2, #48	@ 0x30
 80065b4:	9b07      	ldr	r3, [sp, #28]
 80065b6:	454b      	cmp	r3, r9
 80065b8:	d31e      	bcc.n	80065f8 <__cvt+0xc0>
 80065ba:	4638      	mov	r0, r7
 80065bc:	9b07      	ldr	r3, [sp, #28]
 80065be:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80065c0:	1bdb      	subs	r3, r3, r7
 80065c2:	6013      	str	r3, [r2, #0]
 80065c4:	b008      	add	sp, #32
 80065c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065ca:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80065ce:	eb00 0906 	add.w	r9, r0, r6
 80065d2:	d1e5      	bne.n	80065a0 <__cvt+0x68>
 80065d4:	7803      	ldrb	r3, [r0, #0]
 80065d6:	2b30      	cmp	r3, #48	@ 0x30
 80065d8:	d10a      	bne.n	80065f0 <__cvt+0xb8>
 80065da:	2200      	movs	r2, #0
 80065dc:	2300      	movs	r3, #0
 80065de:	4620      	mov	r0, r4
 80065e0:	4629      	mov	r1, r5
 80065e2:	f7fa f9eb 	bl	80009bc <__aeabi_dcmpeq>
 80065e6:	b918      	cbnz	r0, 80065f0 <__cvt+0xb8>
 80065e8:	f1c6 0601 	rsb	r6, r6, #1
 80065ec:	f8ca 6000 	str.w	r6, [sl]
 80065f0:	f8da 3000 	ldr.w	r3, [sl]
 80065f4:	4499      	add	r9, r3
 80065f6:	e7d3      	b.n	80065a0 <__cvt+0x68>
 80065f8:	1c59      	adds	r1, r3, #1
 80065fa:	9107      	str	r1, [sp, #28]
 80065fc:	701a      	strb	r2, [r3, #0]
 80065fe:	e7d9      	b.n	80065b4 <__cvt+0x7c>

08006600 <__exponent>:
 8006600:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006602:	2900      	cmp	r1, #0
 8006604:	bfb6      	itet	lt
 8006606:	232d      	movlt	r3, #45	@ 0x2d
 8006608:	232b      	movge	r3, #43	@ 0x2b
 800660a:	4249      	neglt	r1, r1
 800660c:	2909      	cmp	r1, #9
 800660e:	7002      	strb	r2, [r0, #0]
 8006610:	7043      	strb	r3, [r0, #1]
 8006612:	dd29      	ble.n	8006668 <__exponent+0x68>
 8006614:	f10d 0307 	add.w	r3, sp, #7
 8006618:	461d      	mov	r5, r3
 800661a:	270a      	movs	r7, #10
 800661c:	fbb1 f6f7 	udiv	r6, r1, r7
 8006620:	461a      	mov	r2, r3
 8006622:	fb07 1416 	mls	r4, r7, r6, r1
 8006626:	3430      	adds	r4, #48	@ 0x30
 8006628:	f802 4c01 	strb.w	r4, [r2, #-1]
 800662c:	460c      	mov	r4, r1
 800662e:	2c63      	cmp	r4, #99	@ 0x63
 8006630:	4631      	mov	r1, r6
 8006632:	f103 33ff 	add.w	r3, r3, #4294967295
 8006636:	dcf1      	bgt.n	800661c <__exponent+0x1c>
 8006638:	3130      	adds	r1, #48	@ 0x30
 800663a:	1e94      	subs	r4, r2, #2
 800663c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006640:	4623      	mov	r3, r4
 8006642:	1c41      	adds	r1, r0, #1
 8006644:	42ab      	cmp	r3, r5
 8006646:	d30a      	bcc.n	800665e <__exponent+0x5e>
 8006648:	f10d 0309 	add.w	r3, sp, #9
 800664c:	1a9b      	subs	r3, r3, r2
 800664e:	42ac      	cmp	r4, r5
 8006650:	bf88      	it	hi
 8006652:	2300      	movhi	r3, #0
 8006654:	3302      	adds	r3, #2
 8006656:	4403      	add	r3, r0
 8006658:	1a18      	subs	r0, r3, r0
 800665a:	b003      	add	sp, #12
 800665c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800665e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006662:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006666:	e7ed      	b.n	8006644 <__exponent+0x44>
 8006668:	2330      	movs	r3, #48	@ 0x30
 800666a:	3130      	adds	r1, #48	@ 0x30
 800666c:	7083      	strb	r3, [r0, #2]
 800666e:	70c1      	strb	r1, [r0, #3]
 8006670:	1d03      	adds	r3, r0, #4
 8006672:	e7f1      	b.n	8006658 <__exponent+0x58>

08006674 <_printf_float>:
 8006674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006678:	b091      	sub	sp, #68	@ 0x44
 800667a:	460c      	mov	r4, r1
 800667c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8006680:	4616      	mov	r6, r2
 8006682:	461f      	mov	r7, r3
 8006684:	4605      	mov	r5, r0
 8006686:	f000 fcf3 	bl	8007070 <_localeconv_r>
 800668a:	6803      	ldr	r3, [r0, #0]
 800668c:	4618      	mov	r0, r3
 800668e:	9308      	str	r3, [sp, #32]
 8006690:	f7f9 fd68 	bl	8000164 <strlen>
 8006694:	2300      	movs	r3, #0
 8006696:	930e      	str	r3, [sp, #56]	@ 0x38
 8006698:	f8d8 3000 	ldr.w	r3, [r8]
 800669c:	9009      	str	r0, [sp, #36]	@ 0x24
 800669e:	3307      	adds	r3, #7
 80066a0:	f023 0307 	bic.w	r3, r3, #7
 80066a4:	f103 0208 	add.w	r2, r3, #8
 80066a8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80066ac:	f8d4 b000 	ldr.w	fp, [r4]
 80066b0:	f8c8 2000 	str.w	r2, [r8]
 80066b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80066b8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80066bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80066be:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80066c2:	f04f 32ff 	mov.w	r2, #4294967295
 80066c6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80066ca:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80066ce:	4b9c      	ldr	r3, [pc, #624]	@ (8006940 <_printf_float+0x2cc>)
 80066d0:	f7fa f9a6 	bl	8000a20 <__aeabi_dcmpun>
 80066d4:	bb70      	cbnz	r0, 8006734 <_printf_float+0xc0>
 80066d6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80066da:	f04f 32ff 	mov.w	r2, #4294967295
 80066de:	4b98      	ldr	r3, [pc, #608]	@ (8006940 <_printf_float+0x2cc>)
 80066e0:	f7fa f980 	bl	80009e4 <__aeabi_dcmple>
 80066e4:	bb30      	cbnz	r0, 8006734 <_printf_float+0xc0>
 80066e6:	2200      	movs	r2, #0
 80066e8:	2300      	movs	r3, #0
 80066ea:	4640      	mov	r0, r8
 80066ec:	4649      	mov	r1, r9
 80066ee:	f7fa f96f 	bl	80009d0 <__aeabi_dcmplt>
 80066f2:	b110      	cbz	r0, 80066fa <_printf_float+0x86>
 80066f4:	232d      	movs	r3, #45	@ 0x2d
 80066f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80066fa:	4a92      	ldr	r2, [pc, #584]	@ (8006944 <_printf_float+0x2d0>)
 80066fc:	4b92      	ldr	r3, [pc, #584]	@ (8006948 <_printf_float+0x2d4>)
 80066fe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006702:	bf94      	ite	ls
 8006704:	4690      	movls	r8, r2
 8006706:	4698      	movhi	r8, r3
 8006708:	2303      	movs	r3, #3
 800670a:	f04f 0900 	mov.w	r9, #0
 800670e:	6123      	str	r3, [r4, #16]
 8006710:	f02b 0304 	bic.w	r3, fp, #4
 8006714:	6023      	str	r3, [r4, #0]
 8006716:	4633      	mov	r3, r6
 8006718:	4621      	mov	r1, r4
 800671a:	4628      	mov	r0, r5
 800671c:	9700      	str	r7, [sp, #0]
 800671e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8006720:	f000 f9d4 	bl	8006acc <_printf_common>
 8006724:	3001      	adds	r0, #1
 8006726:	f040 8090 	bne.w	800684a <_printf_float+0x1d6>
 800672a:	f04f 30ff 	mov.w	r0, #4294967295
 800672e:	b011      	add	sp, #68	@ 0x44
 8006730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006734:	4642      	mov	r2, r8
 8006736:	464b      	mov	r3, r9
 8006738:	4640      	mov	r0, r8
 800673a:	4649      	mov	r1, r9
 800673c:	f7fa f970 	bl	8000a20 <__aeabi_dcmpun>
 8006740:	b148      	cbz	r0, 8006756 <_printf_float+0xe2>
 8006742:	464b      	mov	r3, r9
 8006744:	2b00      	cmp	r3, #0
 8006746:	bfb8      	it	lt
 8006748:	232d      	movlt	r3, #45	@ 0x2d
 800674a:	4a80      	ldr	r2, [pc, #512]	@ (800694c <_printf_float+0x2d8>)
 800674c:	bfb8      	it	lt
 800674e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006752:	4b7f      	ldr	r3, [pc, #508]	@ (8006950 <_printf_float+0x2dc>)
 8006754:	e7d3      	b.n	80066fe <_printf_float+0x8a>
 8006756:	6863      	ldr	r3, [r4, #4]
 8006758:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800675c:	1c5a      	adds	r2, r3, #1
 800675e:	d13f      	bne.n	80067e0 <_printf_float+0x16c>
 8006760:	2306      	movs	r3, #6
 8006762:	6063      	str	r3, [r4, #4]
 8006764:	2200      	movs	r2, #0
 8006766:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800676a:	6023      	str	r3, [r4, #0]
 800676c:	9206      	str	r2, [sp, #24]
 800676e:	aa0e      	add	r2, sp, #56	@ 0x38
 8006770:	e9cd a204 	strd	sl, r2, [sp, #16]
 8006774:	aa0d      	add	r2, sp, #52	@ 0x34
 8006776:	9203      	str	r2, [sp, #12]
 8006778:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800677c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006780:	6863      	ldr	r3, [r4, #4]
 8006782:	4642      	mov	r2, r8
 8006784:	9300      	str	r3, [sp, #0]
 8006786:	4628      	mov	r0, r5
 8006788:	464b      	mov	r3, r9
 800678a:	910a      	str	r1, [sp, #40]	@ 0x28
 800678c:	f7ff fed4 	bl	8006538 <__cvt>
 8006790:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006792:	4680      	mov	r8, r0
 8006794:	2947      	cmp	r1, #71	@ 0x47
 8006796:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006798:	d128      	bne.n	80067ec <_printf_float+0x178>
 800679a:	1cc8      	adds	r0, r1, #3
 800679c:	db02      	blt.n	80067a4 <_printf_float+0x130>
 800679e:	6863      	ldr	r3, [r4, #4]
 80067a0:	4299      	cmp	r1, r3
 80067a2:	dd40      	ble.n	8006826 <_printf_float+0x1b2>
 80067a4:	f1aa 0a02 	sub.w	sl, sl, #2
 80067a8:	fa5f fa8a 	uxtb.w	sl, sl
 80067ac:	4652      	mov	r2, sl
 80067ae:	3901      	subs	r1, #1
 80067b0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80067b4:	910d      	str	r1, [sp, #52]	@ 0x34
 80067b6:	f7ff ff23 	bl	8006600 <__exponent>
 80067ba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80067bc:	4681      	mov	r9, r0
 80067be:	1813      	adds	r3, r2, r0
 80067c0:	2a01      	cmp	r2, #1
 80067c2:	6123      	str	r3, [r4, #16]
 80067c4:	dc02      	bgt.n	80067cc <_printf_float+0x158>
 80067c6:	6822      	ldr	r2, [r4, #0]
 80067c8:	07d2      	lsls	r2, r2, #31
 80067ca:	d501      	bpl.n	80067d0 <_printf_float+0x15c>
 80067cc:	3301      	adds	r3, #1
 80067ce:	6123      	str	r3, [r4, #16]
 80067d0:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d09e      	beq.n	8006716 <_printf_float+0xa2>
 80067d8:	232d      	movs	r3, #45	@ 0x2d
 80067da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80067de:	e79a      	b.n	8006716 <_printf_float+0xa2>
 80067e0:	2947      	cmp	r1, #71	@ 0x47
 80067e2:	d1bf      	bne.n	8006764 <_printf_float+0xf0>
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d1bd      	bne.n	8006764 <_printf_float+0xf0>
 80067e8:	2301      	movs	r3, #1
 80067ea:	e7ba      	b.n	8006762 <_printf_float+0xee>
 80067ec:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80067f0:	d9dc      	bls.n	80067ac <_printf_float+0x138>
 80067f2:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80067f6:	d118      	bne.n	800682a <_printf_float+0x1b6>
 80067f8:	2900      	cmp	r1, #0
 80067fa:	6863      	ldr	r3, [r4, #4]
 80067fc:	dd0b      	ble.n	8006816 <_printf_float+0x1a2>
 80067fe:	6121      	str	r1, [r4, #16]
 8006800:	b913      	cbnz	r3, 8006808 <_printf_float+0x194>
 8006802:	6822      	ldr	r2, [r4, #0]
 8006804:	07d0      	lsls	r0, r2, #31
 8006806:	d502      	bpl.n	800680e <_printf_float+0x19a>
 8006808:	3301      	adds	r3, #1
 800680a:	440b      	add	r3, r1
 800680c:	6123      	str	r3, [r4, #16]
 800680e:	f04f 0900 	mov.w	r9, #0
 8006812:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006814:	e7dc      	b.n	80067d0 <_printf_float+0x15c>
 8006816:	b913      	cbnz	r3, 800681e <_printf_float+0x1aa>
 8006818:	6822      	ldr	r2, [r4, #0]
 800681a:	07d2      	lsls	r2, r2, #31
 800681c:	d501      	bpl.n	8006822 <_printf_float+0x1ae>
 800681e:	3302      	adds	r3, #2
 8006820:	e7f4      	b.n	800680c <_printf_float+0x198>
 8006822:	2301      	movs	r3, #1
 8006824:	e7f2      	b.n	800680c <_printf_float+0x198>
 8006826:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800682a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800682c:	4299      	cmp	r1, r3
 800682e:	db05      	blt.n	800683c <_printf_float+0x1c8>
 8006830:	6823      	ldr	r3, [r4, #0]
 8006832:	6121      	str	r1, [r4, #16]
 8006834:	07d8      	lsls	r0, r3, #31
 8006836:	d5ea      	bpl.n	800680e <_printf_float+0x19a>
 8006838:	1c4b      	adds	r3, r1, #1
 800683a:	e7e7      	b.n	800680c <_printf_float+0x198>
 800683c:	2900      	cmp	r1, #0
 800683e:	bfcc      	ite	gt
 8006840:	2201      	movgt	r2, #1
 8006842:	f1c1 0202 	rsble	r2, r1, #2
 8006846:	4413      	add	r3, r2
 8006848:	e7e0      	b.n	800680c <_printf_float+0x198>
 800684a:	6823      	ldr	r3, [r4, #0]
 800684c:	055a      	lsls	r2, r3, #21
 800684e:	d407      	bmi.n	8006860 <_printf_float+0x1ec>
 8006850:	6923      	ldr	r3, [r4, #16]
 8006852:	4642      	mov	r2, r8
 8006854:	4631      	mov	r1, r6
 8006856:	4628      	mov	r0, r5
 8006858:	47b8      	blx	r7
 800685a:	3001      	adds	r0, #1
 800685c:	d12b      	bne.n	80068b6 <_printf_float+0x242>
 800685e:	e764      	b.n	800672a <_printf_float+0xb6>
 8006860:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006864:	f240 80dc 	bls.w	8006a20 <_printf_float+0x3ac>
 8006868:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800686c:	2200      	movs	r2, #0
 800686e:	2300      	movs	r3, #0
 8006870:	f7fa f8a4 	bl	80009bc <__aeabi_dcmpeq>
 8006874:	2800      	cmp	r0, #0
 8006876:	d033      	beq.n	80068e0 <_printf_float+0x26c>
 8006878:	2301      	movs	r3, #1
 800687a:	4631      	mov	r1, r6
 800687c:	4628      	mov	r0, r5
 800687e:	4a35      	ldr	r2, [pc, #212]	@ (8006954 <_printf_float+0x2e0>)
 8006880:	47b8      	blx	r7
 8006882:	3001      	adds	r0, #1
 8006884:	f43f af51 	beq.w	800672a <_printf_float+0xb6>
 8006888:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800688c:	4543      	cmp	r3, r8
 800688e:	db02      	blt.n	8006896 <_printf_float+0x222>
 8006890:	6823      	ldr	r3, [r4, #0]
 8006892:	07d8      	lsls	r0, r3, #31
 8006894:	d50f      	bpl.n	80068b6 <_printf_float+0x242>
 8006896:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800689a:	4631      	mov	r1, r6
 800689c:	4628      	mov	r0, r5
 800689e:	47b8      	blx	r7
 80068a0:	3001      	adds	r0, #1
 80068a2:	f43f af42 	beq.w	800672a <_printf_float+0xb6>
 80068a6:	f04f 0900 	mov.w	r9, #0
 80068aa:	f108 38ff 	add.w	r8, r8, #4294967295
 80068ae:	f104 0a1a 	add.w	sl, r4, #26
 80068b2:	45c8      	cmp	r8, r9
 80068b4:	dc09      	bgt.n	80068ca <_printf_float+0x256>
 80068b6:	6823      	ldr	r3, [r4, #0]
 80068b8:	079b      	lsls	r3, r3, #30
 80068ba:	f100 8102 	bmi.w	8006ac2 <_printf_float+0x44e>
 80068be:	68e0      	ldr	r0, [r4, #12]
 80068c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80068c2:	4298      	cmp	r0, r3
 80068c4:	bfb8      	it	lt
 80068c6:	4618      	movlt	r0, r3
 80068c8:	e731      	b.n	800672e <_printf_float+0xba>
 80068ca:	2301      	movs	r3, #1
 80068cc:	4652      	mov	r2, sl
 80068ce:	4631      	mov	r1, r6
 80068d0:	4628      	mov	r0, r5
 80068d2:	47b8      	blx	r7
 80068d4:	3001      	adds	r0, #1
 80068d6:	f43f af28 	beq.w	800672a <_printf_float+0xb6>
 80068da:	f109 0901 	add.w	r9, r9, #1
 80068de:	e7e8      	b.n	80068b2 <_printf_float+0x23e>
 80068e0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	dc38      	bgt.n	8006958 <_printf_float+0x2e4>
 80068e6:	2301      	movs	r3, #1
 80068e8:	4631      	mov	r1, r6
 80068ea:	4628      	mov	r0, r5
 80068ec:	4a19      	ldr	r2, [pc, #100]	@ (8006954 <_printf_float+0x2e0>)
 80068ee:	47b8      	blx	r7
 80068f0:	3001      	adds	r0, #1
 80068f2:	f43f af1a 	beq.w	800672a <_printf_float+0xb6>
 80068f6:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80068fa:	ea59 0303 	orrs.w	r3, r9, r3
 80068fe:	d102      	bne.n	8006906 <_printf_float+0x292>
 8006900:	6823      	ldr	r3, [r4, #0]
 8006902:	07d9      	lsls	r1, r3, #31
 8006904:	d5d7      	bpl.n	80068b6 <_printf_float+0x242>
 8006906:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800690a:	4631      	mov	r1, r6
 800690c:	4628      	mov	r0, r5
 800690e:	47b8      	blx	r7
 8006910:	3001      	adds	r0, #1
 8006912:	f43f af0a 	beq.w	800672a <_printf_float+0xb6>
 8006916:	f04f 0a00 	mov.w	sl, #0
 800691a:	f104 0b1a 	add.w	fp, r4, #26
 800691e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006920:	425b      	negs	r3, r3
 8006922:	4553      	cmp	r3, sl
 8006924:	dc01      	bgt.n	800692a <_printf_float+0x2b6>
 8006926:	464b      	mov	r3, r9
 8006928:	e793      	b.n	8006852 <_printf_float+0x1de>
 800692a:	2301      	movs	r3, #1
 800692c:	465a      	mov	r2, fp
 800692e:	4631      	mov	r1, r6
 8006930:	4628      	mov	r0, r5
 8006932:	47b8      	blx	r7
 8006934:	3001      	adds	r0, #1
 8006936:	f43f aef8 	beq.w	800672a <_printf_float+0xb6>
 800693a:	f10a 0a01 	add.w	sl, sl, #1
 800693e:	e7ee      	b.n	800691e <_printf_float+0x2aa>
 8006940:	7fefffff 	.word	0x7fefffff
 8006944:	0800a5f0 	.word	0x0800a5f0
 8006948:	0800a5f4 	.word	0x0800a5f4
 800694c:	0800a5f8 	.word	0x0800a5f8
 8006950:	0800a5fc 	.word	0x0800a5fc
 8006954:	0800a600 	.word	0x0800a600
 8006958:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800695a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800695e:	4553      	cmp	r3, sl
 8006960:	bfa8      	it	ge
 8006962:	4653      	movge	r3, sl
 8006964:	2b00      	cmp	r3, #0
 8006966:	4699      	mov	r9, r3
 8006968:	dc36      	bgt.n	80069d8 <_printf_float+0x364>
 800696a:	f04f 0b00 	mov.w	fp, #0
 800696e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006972:	f104 021a 	add.w	r2, r4, #26
 8006976:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006978:	930a      	str	r3, [sp, #40]	@ 0x28
 800697a:	eba3 0309 	sub.w	r3, r3, r9
 800697e:	455b      	cmp	r3, fp
 8006980:	dc31      	bgt.n	80069e6 <_printf_float+0x372>
 8006982:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006984:	459a      	cmp	sl, r3
 8006986:	dc3a      	bgt.n	80069fe <_printf_float+0x38a>
 8006988:	6823      	ldr	r3, [r4, #0]
 800698a:	07da      	lsls	r2, r3, #31
 800698c:	d437      	bmi.n	80069fe <_printf_float+0x38a>
 800698e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006990:	ebaa 0903 	sub.w	r9, sl, r3
 8006994:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006996:	ebaa 0303 	sub.w	r3, sl, r3
 800699a:	4599      	cmp	r9, r3
 800699c:	bfa8      	it	ge
 800699e:	4699      	movge	r9, r3
 80069a0:	f1b9 0f00 	cmp.w	r9, #0
 80069a4:	dc33      	bgt.n	8006a0e <_printf_float+0x39a>
 80069a6:	f04f 0800 	mov.w	r8, #0
 80069aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80069ae:	f104 0b1a 	add.w	fp, r4, #26
 80069b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80069b4:	ebaa 0303 	sub.w	r3, sl, r3
 80069b8:	eba3 0309 	sub.w	r3, r3, r9
 80069bc:	4543      	cmp	r3, r8
 80069be:	f77f af7a 	ble.w	80068b6 <_printf_float+0x242>
 80069c2:	2301      	movs	r3, #1
 80069c4:	465a      	mov	r2, fp
 80069c6:	4631      	mov	r1, r6
 80069c8:	4628      	mov	r0, r5
 80069ca:	47b8      	blx	r7
 80069cc:	3001      	adds	r0, #1
 80069ce:	f43f aeac 	beq.w	800672a <_printf_float+0xb6>
 80069d2:	f108 0801 	add.w	r8, r8, #1
 80069d6:	e7ec      	b.n	80069b2 <_printf_float+0x33e>
 80069d8:	4642      	mov	r2, r8
 80069da:	4631      	mov	r1, r6
 80069dc:	4628      	mov	r0, r5
 80069de:	47b8      	blx	r7
 80069e0:	3001      	adds	r0, #1
 80069e2:	d1c2      	bne.n	800696a <_printf_float+0x2f6>
 80069e4:	e6a1      	b.n	800672a <_printf_float+0xb6>
 80069e6:	2301      	movs	r3, #1
 80069e8:	4631      	mov	r1, r6
 80069ea:	4628      	mov	r0, r5
 80069ec:	920a      	str	r2, [sp, #40]	@ 0x28
 80069ee:	47b8      	blx	r7
 80069f0:	3001      	adds	r0, #1
 80069f2:	f43f ae9a 	beq.w	800672a <_printf_float+0xb6>
 80069f6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80069f8:	f10b 0b01 	add.w	fp, fp, #1
 80069fc:	e7bb      	b.n	8006976 <_printf_float+0x302>
 80069fe:	4631      	mov	r1, r6
 8006a00:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006a04:	4628      	mov	r0, r5
 8006a06:	47b8      	blx	r7
 8006a08:	3001      	adds	r0, #1
 8006a0a:	d1c0      	bne.n	800698e <_printf_float+0x31a>
 8006a0c:	e68d      	b.n	800672a <_printf_float+0xb6>
 8006a0e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006a10:	464b      	mov	r3, r9
 8006a12:	4631      	mov	r1, r6
 8006a14:	4628      	mov	r0, r5
 8006a16:	4442      	add	r2, r8
 8006a18:	47b8      	blx	r7
 8006a1a:	3001      	adds	r0, #1
 8006a1c:	d1c3      	bne.n	80069a6 <_printf_float+0x332>
 8006a1e:	e684      	b.n	800672a <_printf_float+0xb6>
 8006a20:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006a24:	f1ba 0f01 	cmp.w	sl, #1
 8006a28:	dc01      	bgt.n	8006a2e <_printf_float+0x3ba>
 8006a2a:	07db      	lsls	r3, r3, #31
 8006a2c:	d536      	bpl.n	8006a9c <_printf_float+0x428>
 8006a2e:	2301      	movs	r3, #1
 8006a30:	4642      	mov	r2, r8
 8006a32:	4631      	mov	r1, r6
 8006a34:	4628      	mov	r0, r5
 8006a36:	47b8      	blx	r7
 8006a38:	3001      	adds	r0, #1
 8006a3a:	f43f ae76 	beq.w	800672a <_printf_float+0xb6>
 8006a3e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006a42:	4631      	mov	r1, r6
 8006a44:	4628      	mov	r0, r5
 8006a46:	47b8      	blx	r7
 8006a48:	3001      	adds	r0, #1
 8006a4a:	f43f ae6e 	beq.w	800672a <_printf_float+0xb6>
 8006a4e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006a52:	2200      	movs	r2, #0
 8006a54:	2300      	movs	r3, #0
 8006a56:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006a5a:	f7f9 ffaf 	bl	80009bc <__aeabi_dcmpeq>
 8006a5e:	b9c0      	cbnz	r0, 8006a92 <_printf_float+0x41e>
 8006a60:	4653      	mov	r3, sl
 8006a62:	f108 0201 	add.w	r2, r8, #1
 8006a66:	4631      	mov	r1, r6
 8006a68:	4628      	mov	r0, r5
 8006a6a:	47b8      	blx	r7
 8006a6c:	3001      	adds	r0, #1
 8006a6e:	d10c      	bne.n	8006a8a <_printf_float+0x416>
 8006a70:	e65b      	b.n	800672a <_printf_float+0xb6>
 8006a72:	2301      	movs	r3, #1
 8006a74:	465a      	mov	r2, fp
 8006a76:	4631      	mov	r1, r6
 8006a78:	4628      	mov	r0, r5
 8006a7a:	47b8      	blx	r7
 8006a7c:	3001      	adds	r0, #1
 8006a7e:	f43f ae54 	beq.w	800672a <_printf_float+0xb6>
 8006a82:	f108 0801 	add.w	r8, r8, #1
 8006a86:	45d0      	cmp	r8, sl
 8006a88:	dbf3      	blt.n	8006a72 <_printf_float+0x3fe>
 8006a8a:	464b      	mov	r3, r9
 8006a8c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006a90:	e6e0      	b.n	8006854 <_printf_float+0x1e0>
 8006a92:	f04f 0800 	mov.w	r8, #0
 8006a96:	f104 0b1a 	add.w	fp, r4, #26
 8006a9a:	e7f4      	b.n	8006a86 <_printf_float+0x412>
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	4642      	mov	r2, r8
 8006aa0:	e7e1      	b.n	8006a66 <_printf_float+0x3f2>
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	464a      	mov	r2, r9
 8006aa6:	4631      	mov	r1, r6
 8006aa8:	4628      	mov	r0, r5
 8006aaa:	47b8      	blx	r7
 8006aac:	3001      	adds	r0, #1
 8006aae:	f43f ae3c 	beq.w	800672a <_printf_float+0xb6>
 8006ab2:	f108 0801 	add.w	r8, r8, #1
 8006ab6:	68e3      	ldr	r3, [r4, #12]
 8006ab8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006aba:	1a5b      	subs	r3, r3, r1
 8006abc:	4543      	cmp	r3, r8
 8006abe:	dcf0      	bgt.n	8006aa2 <_printf_float+0x42e>
 8006ac0:	e6fd      	b.n	80068be <_printf_float+0x24a>
 8006ac2:	f04f 0800 	mov.w	r8, #0
 8006ac6:	f104 0919 	add.w	r9, r4, #25
 8006aca:	e7f4      	b.n	8006ab6 <_printf_float+0x442>

08006acc <_printf_common>:
 8006acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ad0:	4616      	mov	r6, r2
 8006ad2:	4698      	mov	r8, r3
 8006ad4:	688a      	ldr	r2, [r1, #8]
 8006ad6:	690b      	ldr	r3, [r1, #16]
 8006ad8:	4607      	mov	r7, r0
 8006ada:	4293      	cmp	r3, r2
 8006adc:	bfb8      	it	lt
 8006ade:	4613      	movlt	r3, r2
 8006ae0:	6033      	str	r3, [r6, #0]
 8006ae2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006ae6:	460c      	mov	r4, r1
 8006ae8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006aec:	b10a      	cbz	r2, 8006af2 <_printf_common+0x26>
 8006aee:	3301      	adds	r3, #1
 8006af0:	6033      	str	r3, [r6, #0]
 8006af2:	6823      	ldr	r3, [r4, #0]
 8006af4:	0699      	lsls	r1, r3, #26
 8006af6:	bf42      	ittt	mi
 8006af8:	6833      	ldrmi	r3, [r6, #0]
 8006afa:	3302      	addmi	r3, #2
 8006afc:	6033      	strmi	r3, [r6, #0]
 8006afe:	6825      	ldr	r5, [r4, #0]
 8006b00:	f015 0506 	ands.w	r5, r5, #6
 8006b04:	d106      	bne.n	8006b14 <_printf_common+0x48>
 8006b06:	f104 0a19 	add.w	sl, r4, #25
 8006b0a:	68e3      	ldr	r3, [r4, #12]
 8006b0c:	6832      	ldr	r2, [r6, #0]
 8006b0e:	1a9b      	subs	r3, r3, r2
 8006b10:	42ab      	cmp	r3, r5
 8006b12:	dc2b      	bgt.n	8006b6c <_printf_common+0xa0>
 8006b14:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006b18:	6822      	ldr	r2, [r4, #0]
 8006b1a:	3b00      	subs	r3, #0
 8006b1c:	bf18      	it	ne
 8006b1e:	2301      	movne	r3, #1
 8006b20:	0692      	lsls	r2, r2, #26
 8006b22:	d430      	bmi.n	8006b86 <_printf_common+0xba>
 8006b24:	4641      	mov	r1, r8
 8006b26:	4638      	mov	r0, r7
 8006b28:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006b2c:	47c8      	blx	r9
 8006b2e:	3001      	adds	r0, #1
 8006b30:	d023      	beq.n	8006b7a <_printf_common+0xae>
 8006b32:	6823      	ldr	r3, [r4, #0]
 8006b34:	6922      	ldr	r2, [r4, #16]
 8006b36:	f003 0306 	and.w	r3, r3, #6
 8006b3a:	2b04      	cmp	r3, #4
 8006b3c:	bf14      	ite	ne
 8006b3e:	2500      	movne	r5, #0
 8006b40:	6833      	ldreq	r3, [r6, #0]
 8006b42:	f04f 0600 	mov.w	r6, #0
 8006b46:	bf08      	it	eq
 8006b48:	68e5      	ldreq	r5, [r4, #12]
 8006b4a:	f104 041a 	add.w	r4, r4, #26
 8006b4e:	bf08      	it	eq
 8006b50:	1aed      	subeq	r5, r5, r3
 8006b52:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006b56:	bf08      	it	eq
 8006b58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	bfc4      	itt	gt
 8006b60:	1a9b      	subgt	r3, r3, r2
 8006b62:	18ed      	addgt	r5, r5, r3
 8006b64:	42b5      	cmp	r5, r6
 8006b66:	d11a      	bne.n	8006b9e <_printf_common+0xd2>
 8006b68:	2000      	movs	r0, #0
 8006b6a:	e008      	b.n	8006b7e <_printf_common+0xb2>
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	4652      	mov	r2, sl
 8006b70:	4641      	mov	r1, r8
 8006b72:	4638      	mov	r0, r7
 8006b74:	47c8      	blx	r9
 8006b76:	3001      	adds	r0, #1
 8006b78:	d103      	bne.n	8006b82 <_printf_common+0xb6>
 8006b7a:	f04f 30ff 	mov.w	r0, #4294967295
 8006b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b82:	3501      	adds	r5, #1
 8006b84:	e7c1      	b.n	8006b0a <_printf_common+0x3e>
 8006b86:	2030      	movs	r0, #48	@ 0x30
 8006b88:	18e1      	adds	r1, r4, r3
 8006b8a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006b8e:	1c5a      	adds	r2, r3, #1
 8006b90:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006b94:	4422      	add	r2, r4
 8006b96:	3302      	adds	r3, #2
 8006b98:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006b9c:	e7c2      	b.n	8006b24 <_printf_common+0x58>
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	4622      	mov	r2, r4
 8006ba2:	4641      	mov	r1, r8
 8006ba4:	4638      	mov	r0, r7
 8006ba6:	47c8      	blx	r9
 8006ba8:	3001      	adds	r0, #1
 8006baa:	d0e6      	beq.n	8006b7a <_printf_common+0xae>
 8006bac:	3601      	adds	r6, #1
 8006bae:	e7d9      	b.n	8006b64 <_printf_common+0x98>

08006bb0 <_printf_i>:
 8006bb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006bb4:	7e0f      	ldrb	r7, [r1, #24]
 8006bb6:	4691      	mov	r9, r2
 8006bb8:	2f78      	cmp	r7, #120	@ 0x78
 8006bba:	4680      	mov	r8, r0
 8006bbc:	460c      	mov	r4, r1
 8006bbe:	469a      	mov	sl, r3
 8006bc0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006bc2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006bc6:	d807      	bhi.n	8006bd8 <_printf_i+0x28>
 8006bc8:	2f62      	cmp	r7, #98	@ 0x62
 8006bca:	d80a      	bhi.n	8006be2 <_printf_i+0x32>
 8006bcc:	2f00      	cmp	r7, #0
 8006bce:	f000 80d3 	beq.w	8006d78 <_printf_i+0x1c8>
 8006bd2:	2f58      	cmp	r7, #88	@ 0x58
 8006bd4:	f000 80ba 	beq.w	8006d4c <_printf_i+0x19c>
 8006bd8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006bdc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006be0:	e03a      	b.n	8006c58 <_printf_i+0xa8>
 8006be2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006be6:	2b15      	cmp	r3, #21
 8006be8:	d8f6      	bhi.n	8006bd8 <_printf_i+0x28>
 8006bea:	a101      	add	r1, pc, #4	@ (adr r1, 8006bf0 <_printf_i+0x40>)
 8006bec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006bf0:	08006c49 	.word	0x08006c49
 8006bf4:	08006c5d 	.word	0x08006c5d
 8006bf8:	08006bd9 	.word	0x08006bd9
 8006bfc:	08006bd9 	.word	0x08006bd9
 8006c00:	08006bd9 	.word	0x08006bd9
 8006c04:	08006bd9 	.word	0x08006bd9
 8006c08:	08006c5d 	.word	0x08006c5d
 8006c0c:	08006bd9 	.word	0x08006bd9
 8006c10:	08006bd9 	.word	0x08006bd9
 8006c14:	08006bd9 	.word	0x08006bd9
 8006c18:	08006bd9 	.word	0x08006bd9
 8006c1c:	08006d5f 	.word	0x08006d5f
 8006c20:	08006c87 	.word	0x08006c87
 8006c24:	08006d19 	.word	0x08006d19
 8006c28:	08006bd9 	.word	0x08006bd9
 8006c2c:	08006bd9 	.word	0x08006bd9
 8006c30:	08006d81 	.word	0x08006d81
 8006c34:	08006bd9 	.word	0x08006bd9
 8006c38:	08006c87 	.word	0x08006c87
 8006c3c:	08006bd9 	.word	0x08006bd9
 8006c40:	08006bd9 	.word	0x08006bd9
 8006c44:	08006d21 	.word	0x08006d21
 8006c48:	6833      	ldr	r3, [r6, #0]
 8006c4a:	1d1a      	adds	r2, r3, #4
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	6032      	str	r2, [r6, #0]
 8006c50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006c54:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006c58:	2301      	movs	r3, #1
 8006c5a:	e09e      	b.n	8006d9a <_printf_i+0x1ea>
 8006c5c:	6833      	ldr	r3, [r6, #0]
 8006c5e:	6820      	ldr	r0, [r4, #0]
 8006c60:	1d19      	adds	r1, r3, #4
 8006c62:	6031      	str	r1, [r6, #0]
 8006c64:	0606      	lsls	r6, r0, #24
 8006c66:	d501      	bpl.n	8006c6c <_printf_i+0xbc>
 8006c68:	681d      	ldr	r5, [r3, #0]
 8006c6a:	e003      	b.n	8006c74 <_printf_i+0xc4>
 8006c6c:	0645      	lsls	r5, r0, #25
 8006c6e:	d5fb      	bpl.n	8006c68 <_printf_i+0xb8>
 8006c70:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006c74:	2d00      	cmp	r5, #0
 8006c76:	da03      	bge.n	8006c80 <_printf_i+0xd0>
 8006c78:	232d      	movs	r3, #45	@ 0x2d
 8006c7a:	426d      	negs	r5, r5
 8006c7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c80:	230a      	movs	r3, #10
 8006c82:	4859      	ldr	r0, [pc, #356]	@ (8006de8 <_printf_i+0x238>)
 8006c84:	e011      	b.n	8006caa <_printf_i+0xfa>
 8006c86:	6821      	ldr	r1, [r4, #0]
 8006c88:	6833      	ldr	r3, [r6, #0]
 8006c8a:	0608      	lsls	r0, r1, #24
 8006c8c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006c90:	d402      	bmi.n	8006c98 <_printf_i+0xe8>
 8006c92:	0649      	lsls	r1, r1, #25
 8006c94:	bf48      	it	mi
 8006c96:	b2ad      	uxthmi	r5, r5
 8006c98:	2f6f      	cmp	r7, #111	@ 0x6f
 8006c9a:	6033      	str	r3, [r6, #0]
 8006c9c:	bf14      	ite	ne
 8006c9e:	230a      	movne	r3, #10
 8006ca0:	2308      	moveq	r3, #8
 8006ca2:	4851      	ldr	r0, [pc, #324]	@ (8006de8 <_printf_i+0x238>)
 8006ca4:	2100      	movs	r1, #0
 8006ca6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006caa:	6866      	ldr	r6, [r4, #4]
 8006cac:	2e00      	cmp	r6, #0
 8006cae:	bfa8      	it	ge
 8006cb0:	6821      	ldrge	r1, [r4, #0]
 8006cb2:	60a6      	str	r6, [r4, #8]
 8006cb4:	bfa4      	itt	ge
 8006cb6:	f021 0104 	bicge.w	r1, r1, #4
 8006cba:	6021      	strge	r1, [r4, #0]
 8006cbc:	b90d      	cbnz	r5, 8006cc2 <_printf_i+0x112>
 8006cbe:	2e00      	cmp	r6, #0
 8006cc0:	d04b      	beq.n	8006d5a <_printf_i+0x1aa>
 8006cc2:	4616      	mov	r6, r2
 8006cc4:	fbb5 f1f3 	udiv	r1, r5, r3
 8006cc8:	fb03 5711 	mls	r7, r3, r1, r5
 8006ccc:	5dc7      	ldrb	r7, [r0, r7]
 8006cce:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006cd2:	462f      	mov	r7, r5
 8006cd4:	42bb      	cmp	r3, r7
 8006cd6:	460d      	mov	r5, r1
 8006cd8:	d9f4      	bls.n	8006cc4 <_printf_i+0x114>
 8006cda:	2b08      	cmp	r3, #8
 8006cdc:	d10b      	bne.n	8006cf6 <_printf_i+0x146>
 8006cde:	6823      	ldr	r3, [r4, #0]
 8006ce0:	07df      	lsls	r7, r3, #31
 8006ce2:	d508      	bpl.n	8006cf6 <_printf_i+0x146>
 8006ce4:	6923      	ldr	r3, [r4, #16]
 8006ce6:	6861      	ldr	r1, [r4, #4]
 8006ce8:	4299      	cmp	r1, r3
 8006cea:	bfde      	ittt	le
 8006cec:	2330      	movle	r3, #48	@ 0x30
 8006cee:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006cf2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006cf6:	1b92      	subs	r2, r2, r6
 8006cf8:	6122      	str	r2, [r4, #16]
 8006cfa:	464b      	mov	r3, r9
 8006cfc:	4621      	mov	r1, r4
 8006cfe:	4640      	mov	r0, r8
 8006d00:	f8cd a000 	str.w	sl, [sp]
 8006d04:	aa03      	add	r2, sp, #12
 8006d06:	f7ff fee1 	bl	8006acc <_printf_common>
 8006d0a:	3001      	adds	r0, #1
 8006d0c:	d14a      	bne.n	8006da4 <_printf_i+0x1f4>
 8006d0e:	f04f 30ff 	mov.w	r0, #4294967295
 8006d12:	b004      	add	sp, #16
 8006d14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d18:	6823      	ldr	r3, [r4, #0]
 8006d1a:	f043 0320 	orr.w	r3, r3, #32
 8006d1e:	6023      	str	r3, [r4, #0]
 8006d20:	2778      	movs	r7, #120	@ 0x78
 8006d22:	4832      	ldr	r0, [pc, #200]	@ (8006dec <_printf_i+0x23c>)
 8006d24:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006d28:	6823      	ldr	r3, [r4, #0]
 8006d2a:	6831      	ldr	r1, [r6, #0]
 8006d2c:	061f      	lsls	r7, r3, #24
 8006d2e:	f851 5b04 	ldr.w	r5, [r1], #4
 8006d32:	d402      	bmi.n	8006d3a <_printf_i+0x18a>
 8006d34:	065f      	lsls	r7, r3, #25
 8006d36:	bf48      	it	mi
 8006d38:	b2ad      	uxthmi	r5, r5
 8006d3a:	6031      	str	r1, [r6, #0]
 8006d3c:	07d9      	lsls	r1, r3, #31
 8006d3e:	bf44      	itt	mi
 8006d40:	f043 0320 	orrmi.w	r3, r3, #32
 8006d44:	6023      	strmi	r3, [r4, #0]
 8006d46:	b11d      	cbz	r5, 8006d50 <_printf_i+0x1a0>
 8006d48:	2310      	movs	r3, #16
 8006d4a:	e7ab      	b.n	8006ca4 <_printf_i+0xf4>
 8006d4c:	4826      	ldr	r0, [pc, #152]	@ (8006de8 <_printf_i+0x238>)
 8006d4e:	e7e9      	b.n	8006d24 <_printf_i+0x174>
 8006d50:	6823      	ldr	r3, [r4, #0]
 8006d52:	f023 0320 	bic.w	r3, r3, #32
 8006d56:	6023      	str	r3, [r4, #0]
 8006d58:	e7f6      	b.n	8006d48 <_printf_i+0x198>
 8006d5a:	4616      	mov	r6, r2
 8006d5c:	e7bd      	b.n	8006cda <_printf_i+0x12a>
 8006d5e:	6833      	ldr	r3, [r6, #0]
 8006d60:	6825      	ldr	r5, [r4, #0]
 8006d62:	1d18      	adds	r0, r3, #4
 8006d64:	6961      	ldr	r1, [r4, #20]
 8006d66:	6030      	str	r0, [r6, #0]
 8006d68:	062e      	lsls	r6, r5, #24
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	d501      	bpl.n	8006d72 <_printf_i+0x1c2>
 8006d6e:	6019      	str	r1, [r3, #0]
 8006d70:	e002      	b.n	8006d78 <_printf_i+0x1c8>
 8006d72:	0668      	lsls	r0, r5, #25
 8006d74:	d5fb      	bpl.n	8006d6e <_printf_i+0x1be>
 8006d76:	8019      	strh	r1, [r3, #0]
 8006d78:	2300      	movs	r3, #0
 8006d7a:	4616      	mov	r6, r2
 8006d7c:	6123      	str	r3, [r4, #16]
 8006d7e:	e7bc      	b.n	8006cfa <_printf_i+0x14a>
 8006d80:	6833      	ldr	r3, [r6, #0]
 8006d82:	2100      	movs	r1, #0
 8006d84:	1d1a      	adds	r2, r3, #4
 8006d86:	6032      	str	r2, [r6, #0]
 8006d88:	681e      	ldr	r6, [r3, #0]
 8006d8a:	6862      	ldr	r2, [r4, #4]
 8006d8c:	4630      	mov	r0, r6
 8006d8e:	f000 f9f6 	bl	800717e <memchr>
 8006d92:	b108      	cbz	r0, 8006d98 <_printf_i+0x1e8>
 8006d94:	1b80      	subs	r0, r0, r6
 8006d96:	6060      	str	r0, [r4, #4]
 8006d98:	6863      	ldr	r3, [r4, #4]
 8006d9a:	6123      	str	r3, [r4, #16]
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006da2:	e7aa      	b.n	8006cfa <_printf_i+0x14a>
 8006da4:	4632      	mov	r2, r6
 8006da6:	4649      	mov	r1, r9
 8006da8:	4640      	mov	r0, r8
 8006daa:	6923      	ldr	r3, [r4, #16]
 8006dac:	47d0      	blx	sl
 8006dae:	3001      	adds	r0, #1
 8006db0:	d0ad      	beq.n	8006d0e <_printf_i+0x15e>
 8006db2:	6823      	ldr	r3, [r4, #0]
 8006db4:	079b      	lsls	r3, r3, #30
 8006db6:	d413      	bmi.n	8006de0 <_printf_i+0x230>
 8006db8:	68e0      	ldr	r0, [r4, #12]
 8006dba:	9b03      	ldr	r3, [sp, #12]
 8006dbc:	4298      	cmp	r0, r3
 8006dbe:	bfb8      	it	lt
 8006dc0:	4618      	movlt	r0, r3
 8006dc2:	e7a6      	b.n	8006d12 <_printf_i+0x162>
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	4632      	mov	r2, r6
 8006dc8:	4649      	mov	r1, r9
 8006dca:	4640      	mov	r0, r8
 8006dcc:	47d0      	blx	sl
 8006dce:	3001      	adds	r0, #1
 8006dd0:	d09d      	beq.n	8006d0e <_printf_i+0x15e>
 8006dd2:	3501      	adds	r5, #1
 8006dd4:	68e3      	ldr	r3, [r4, #12]
 8006dd6:	9903      	ldr	r1, [sp, #12]
 8006dd8:	1a5b      	subs	r3, r3, r1
 8006dda:	42ab      	cmp	r3, r5
 8006ddc:	dcf2      	bgt.n	8006dc4 <_printf_i+0x214>
 8006dde:	e7eb      	b.n	8006db8 <_printf_i+0x208>
 8006de0:	2500      	movs	r5, #0
 8006de2:	f104 0619 	add.w	r6, r4, #25
 8006de6:	e7f5      	b.n	8006dd4 <_printf_i+0x224>
 8006de8:	0800a602 	.word	0x0800a602
 8006dec:	0800a613 	.word	0x0800a613

08006df0 <std>:
 8006df0:	2300      	movs	r3, #0
 8006df2:	b510      	push	{r4, lr}
 8006df4:	4604      	mov	r4, r0
 8006df6:	e9c0 3300 	strd	r3, r3, [r0]
 8006dfa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006dfe:	6083      	str	r3, [r0, #8]
 8006e00:	8181      	strh	r1, [r0, #12]
 8006e02:	6643      	str	r3, [r0, #100]	@ 0x64
 8006e04:	81c2      	strh	r2, [r0, #14]
 8006e06:	6183      	str	r3, [r0, #24]
 8006e08:	4619      	mov	r1, r3
 8006e0a:	2208      	movs	r2, #8
 8006e0c:	305c      	adds	r0, #92	@ 0x5c
 8006e0e:	f000 f914 	bl	800703a <memset>
 8006e12:	4b0d      	ldr	r3, [pc, #52]	@ (8006e48 <std+0x58>)
 8006e14:	6224      	str	r4, [r4, #32]
 8006e16:	6263      	str	r3, [r4, #36]	@ 0x24
 8006e18:	4b0c      	ldr	r3, [pc, #48]	@ (8006e4c <std+0x5c>)
 8006e1a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006e1c:	4b0c      	ldr	r3, [pc, #48]	@ (8006e50 <std+0x60>)
 8006e1e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006e20:	4b0c      	ldr	r3, [pc, #48]	@ (8006e54 <std+0x64>)
 8006e22:	6323      	str	r3, [r4, #48]	@ 0x30
 8006e24:	4b0c      	ldr	r3, [pc, #48]	@ (8006e58 <std+0x68>)
 8006e26:	429c      	cmp	r4, r3
 8006e28:	d006      	beq.n	8006e38 <std+0x48>
 8006e2a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006e2e:	4294      	cmp	r4, r2
 8006e30:	d002      	beq.n	8006e38 <std+0x48>
 8006e32:	33d0      	adds	r3, #208	@ 0xd0
 8006e34:	429c      	cmp	r4, r3
 8006e36:	d105      	bne.n	8006e44 <std+0x54>
 8006e38:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006e3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e40:	f000 b99a 	b.w	8007178 <__retarget_lock_init_recursive>
 8006e44:	bd10      	pop	{r4, pc}
 8006e46:	bf00      	nop
 8006e48:	08006fb5 	.word	0x08006fb5
 8006e4c:	08006fd7 	.word	0x08006fd7
 8006e50:	0800700f 	.word	0x0800700f
 8006e54:	08007033 	.word	0x08007033
 8006e58:	20000584 	.word	0x20000584

08006e5c <stdio_exit_handler>:
 8006e5c:	4a02      	ldr	r2, [pc, #8]	@ (8006e68 <stdio_exit_handler+0xc>)
 8006e5e:	4903      	ldr	r1, [pc, #12]	@ (8006e6c <stdio_exit_handler+0x10>)
 8006e60:	4803      	ldr	r0, [pc, #12]	@ (8006e70 <stdio_exit_handler+0x14>)
 8006e62:	f000 b869 	b.w	8006f38 <_fwalk_sglue>
 8006e66:	bf00      	nop
 8006e68:	200000ec 	.word	0x200000ec
 8006e6c:	080092a5 	.word	0x080092a5
 8006e70:	20000268 	.word	0x20000268

08006e74 <cleanup_stdio>:
 8006e74:	6841      	ldr	r1, [r0, #4]
 8006e76:	4b0c      	ldr	r3, [pc, #48]	@ (8006ea8 <cleanup_stdio+0x34>)
 8006e78:	b510      	push	{r4, lr}
 8006e7a:	4299      	cmp	r1, r3
 8006e7c:	4604      	mov	r4, r0
 8006e7e:	d001      	beq.n	8006e84 <cleanup_stdio+0x10>
 8006e80:	f002 fa10 	bl	80092a4 <_fflush_r>
 8006e84:	68a1      	ldr	r1, [r4, #8]
 8006e86:	4b09      	ldr	r3, [pc, #36]	@ (8006eac <cleanup_stdio+0x38>)
 8006e88:	4299      	cmp	r1, r3
 8006e8a:	d002      	beq.n	8006e92 <cleanup_stdio+0x1e>
 8006e8c:	4620      	mov	r0, r4
 8006e8e:	f002 fa09 	bl	80092a4 <_fflush_r>
 8006e92:	68e1      	ldr	r1, [r4, #12]
 8006e94:	4b06      	ldr	r3, [pc, #24]	@ (8006eb0 <cleanup_stdio+0x3c>)
 8006e96:	4299      	cmp	r1, r3
 8006e98:	d004      	beq.n	8006ea4 <cleanup_stdio+0x30>
 8006e9a:	4620      	mov	r0, r4
 8006e9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ea0:	f002 ba00 	b.w	80092a4 <_fflush_r>
 8006ea4:	bd10      	pop	{r4, pc}
 8006ea6:	bf00      	nop
 8006ea8:	20000584 	.word	0x20000584
 8006eac:	200005ec 	.word	0x200005ec
 8006eb0:	20000654 	.word	0x20000654

08006eb4 <global_stdio_init.part.0>:
 8006eb4:	b510      	push	{r4, lr}
 8006eb6:	4b0b      	ldr	r3, [pc, #44]	@ (8006ee4 <global_stdio_init.part.0+0x30>)
 8006eb8:	4c0b      	ldr	r4, [pc, #44]	@ (8006ee8 <global_stdio_init.part.0+0x34>)
 8006eba:	4a0c      	ldr	r2, [pc, #48]	@ (8006eec <global_stdio_init.part.0+0x38>)
 8006ebc:	4620      	mov	r0, r4
 8006ebe:	601a      	str	r2, [r3, #0]
 8006ec0:	2104      	movs	r1, #4
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	f7ff ff94 	bl	8006df0 <std>
 8006ec8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006ecc:	2201      	movs	r2, #1
 8006ece:	2109      	movs	r1, #9
 8006ed0:	f7ff ff8e 	bl	8006df0 <std>
 8006ed4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006ed8:	2202      	movs	r2, #2
 8006eda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ede:	2112      	movs	r1, #18
 8006ee0:	f7ff bf86 	b.w	8006df0 <std>
 8006ee4:	200006bc 	.word	0x200006bc
 8006ee8:	20000584 	.word	0x20000584
 8006eec:	08006e5d 	.word	0x08006e5d

08006ef0 <__sfp_lock_acquire>:
 8006ef0:	4801      	ldr	r0, [pc, #4]	@ (8006ef8 <__sfp_lock_acquire+0x8>)
 8006ef2:	f000 b942 	b.w	800717a <__retarget_lock_acquire_recursive>
 8006ef6:	bf00      	nop
 8006ef8:	200006c5 	.word	0x200006c5

08006efc <__sfp_lock_release>:
 8006efc:	4801      	ldr	r0, [pc, #4]	@ (8006f04 <__sfp_lock_release+0x8>)
 8006efe:	f000 b93d 	b.w	800717c <__retarget_lock_release_recursive>
 8006f02:	bf00      	nop
 8006f04:	200006c5 	.word	0x200006c5

08006f08 <__sinit>:
 8006f08:	b510      	push	{r4, lr}
 8006f0a:	4604      	mov	r4, r0
 8006f0c:	f7ff fff0 	bl	8006ef0 <__sfp_lock_acquire>
 8006f10:	6a23      	ldr	r3, [r4, #32]
 8006f12:	b11b      	cbz	r3, 8006f1c <__sinit+0x14>
 8006f14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f18:	f7ff bff0 	b.w	8006efc <__sfp_lock_release>
 8006f1c:	4b04      	ldr	r3, [pc, #16]	@ (8006f30 <__sinit+0x28>)
 8006f1e:	6223      	str	r3, [r4, #32]
 8006f20:	4b04      	ldr	r3, [pc, #16]	@ (8006f34 <__sinit+0x2c>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d1f5      	bne.n	8006f14 <__sinit+0xc>
 8006f28:	f7ff ffc4 	bl	8006eb4 <global_stdio_init.part.0>
 8006f2c:	e7f2      	b.n	8006f14 <__sinit+0xc>
 8006f2e:	bf00      	nop
 8006f30:	08006e75 	.word	0x08006e75
 8006f34:	200006bc 	.word	0x200006bc

08006f38 <_fwalk_sglue>:
 8006f38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f3c:	4607      	mov	r7, r0
 8006f3e:	4688      	mov	r8, r1
 8006f40:	4614      	mov	r4, r2
 8006f42:	2600      	movs	r6, #0
 8006f44:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006f48:	f1b9 0901 	subs.w	r9, r9, #1
 8006f4c:	d505      	bpl.n	8006f5a <_fwalk_sglue+0x22>
 8006f4e:	6824      	ldr	r4, [r4, #0]
 8006f50:	2c00      	cmp	r4, #0
 8006f52:	d1f7      	bne.n	8006f44 <_fwalk_sglue+0xc>
 8006f54:	4630      	mov	r0, r6
 8006f56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f5a:	89ab      	ldrh	r3, [r5, #12]
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d907      	bls.n	8006f70 <_fwalk_sglue+0x38>
 8006f60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f64:	3301      	adds	r3, #1
 8006f66:	d003      	beq.n	8006f70 <_fwalk_sglue+0x38>
 8006f68:	4629      	mov	r1, r5
 8006f6a:	4638      	mov	r0, r7
 8006f6c:	47c0      	blx	r8
 8006f6e:	4306      	orrs	r6, r0
 8006f70:	3568      	adds	r5, #104	@ 0x68
 8006f72:	e7e9      	b.n	8006f48 <_fwalk_sglue+0x10>

08006f74 <siprintf>:
 8006f74:	b40e      	push	{r1, r2, r3}
 8006f76:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006f7a:	b500      	push	{lr}
 8006f7c:	b09c      	sub	sp, #112	@ 0x70
 8006f7e:	ab1d      	add	r3, sp, #116	@ 0x74
 8006f80:	9002      	str	r0, [sp, #8]
 8006f82:	9006      	str	r0, [sp, #24]
 8006f84:	9107      	str	r1, [sp, #28]
 8006f86:	9104      	str	r1, [sp, #16]
 8006f88:	4808      	ldr	r0, [pc, #32]	@ (8006fac <siprintf+0x38>)
 8006f8a:	4909      	ldr	r1, [pc, #36]	@ (8006fb0 <siprintf+0x3c>)
 8006f8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f90:	9105      	str	r1, [sp, #20]
 8006f92:	6800      	ldr	r0, [r0, #0]
 8006f94:	a902      	add	r1, sp, #8
 8006f96:	9301      	str	r3, [sp, #4]
 8006f98:	f002 f808 	bl	8008fac <_svfiprintf_r>
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	9b02      	ldr	r3, [sp, #8]
 8006fa0:	701a      	strb	r2, [r3, #0]
 8006fa2:	b01c      	add	sp, #112	@ 0x70
 8006fa4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006fa8:	b003      	add	sp, #12
 8006faa:	4770      	bx	lr
 8006fac:	20000264 	.word	0x20000264
 8006fb0:	ffff0208 	.word	0xffff0208

08006fb4 <__sread>:
 8006fb4:	b510      	push	{r4, lr}
 8006fb6:	460c      	mov	r4, r1
 8006fb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fbc:	f000 f87e 	bl	80070bc <_read_r>
 8006fc0:	2800      	cmp	r0, #0
 8006fc2:	bfab      	itete	ge
 8006fc4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006fc6:	89a3      	ldrhlt	r3, [r4, #12]
 8006fc8:	181b      	addge	r3, r3, r0
 8006fca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006fce:	bfac      	ite	ge
 8006fd0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006fd2:	81a3      	strhlt	r3, [r4, #12]
 8006fd4:	bd10      	pop	{r4, pc}

08006fd6 <__swrite>:
 8006fd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fda:	461f      	mov	r7, r3
 8006fdc:	898b      	ldrh	r3, [r1, #12]
 8006fde:	4605      	mov	r5, r0
 8006fe0:	05db      	lsls	r3, r3, #23
 8006fe2:	460c      	mov	r4, r1
 8006fe4:	4616      	mov	r6, r2
 8006fe6:	d505      	bpl.n	8006ff4 <__swrite+0x1e>
 8006fe8:	2302      	movs	r3, #2
 8006fea:	2200      	movs	r2, #0
 8006fec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ff0:	f000 f852 	bl	8007098 <_lseek_r>
 8006ff4:	89a3      	ldrh	r3, [r4, #12]
 8006ff6:	4632      	mov	r2, r6
 8006ff8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006ffc:	81a3      	strh	r3, [r4, #12]
 8006ffe:	4628      	mov	r0, r5
 8007000:	463b      	mov	r3, r7
 8007002:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007006:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800700a:	f000 b879 	b.w	8007100 <_write_r>

0800700e <__sseek>:
 800700e:	b510      	push	{r4, lr}
 8007010:	460c      	mov	r4, r1
 8007012:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007016:	f000 f83f 	bl	8007098 <_lseek_r>
 800701a:	1c43      	adds	r3, r0, #1
 800701c:	89a3      	ldrh	r3, [r4, #12]
 800701e:	bf15      	itete	ne
 8007020:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007022:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007026:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800702a:	81a3      	strheq	r3, [r4, #12]
 800702c:	bf18      	it	ne
 800702e:	81a3      	strhne	r3, [r4, #12]
 8007030:	bd10      	pop	{r4, pc}

08007032 <__sclose>:
 8007032:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007036:	f000 b81f 	b.w	8007078 <_close_r>

0800703a <memset>:
 800703a:	4603      	mov	r3, r0
 800703c:	4402      	add	r2, r0
 800703e:	4293      	cmp	r3, r2
 8007040:	d100      	bne.n	8007044 <memset+0xa>
 8007042:	4770      	bx	lr
 8007044:	f803 1b01 	strb.w	r1, [r3], #1
 8007048:	e7f9      	b.n	800703e <memset+0x4>

0800704a <strncmp>:
 800704a:	b510      	push	{r4, lr}
 800704c:	b16a      	cbz	r2, 800706a <strncmp+0x20>
 800704e:	3901      	subs	r1, #1
 8007050:	1884      	adds	r4, r0, r2
 8007052:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007056:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800705a:	429a      	cmp	r2, r3
 800705c:	d103      	bne.n	8007066 <strncmp+0x1c>
 800705e:	42a0      	cmp	r0, r4
 8007060:	d001      	beq.n	8007066 <strncmp+0x1c>
 8007062:	2a00      	cmp	r2, #0
 8007064:	d1f5      	bne.n	8007052 <strncmp+0x8>
 8007066:	1ad0      	subs	r0, r2, r3
 8007068:	bd10      	pop	{r4, pc}
 800706a:	4610      	mov	r0, r2
 800706c:	e7fc      	b.n	8007068 <strncmp+0x1e>
	...

08007070 <_localeconv_r>:
 8007070:	4800      	ldr	r0, [pc, #0]	@ (8007074 <_localeconv_r+0x4>)
 8007072:	4770      	bx	lr
 8007074:	200001e8 	.word	0x200001e8

08007078 <_close_r>:
 8007078:	b538      	push	{r3, r4, r5, lr}
 800707a:	2300      	movs	r3, #0
 800707c:	4d05      	ldr	r5, [pc, #20]	@ (8007094 <_close_r+0x1c>)
 800707e:	4604      	mov	r4, r0
 8007080:	4608      	mov	r0, r1
 8007082:	602b      	str	r3, [r5, #0]
 8007084:	f7fc fdf7 	bl	8003c76 <_close>
 8007088:	1c43      	adds	r3, r0, #1
 800708a:	d102      	bne.n	8007092 <_close_r+0x1a>
 800708c:	682b      	ldr	r3, [r5, #0]
 800708e:	b103      	cbz	r3, 8007092 <_close_r+0x1a>
 8007090:	6023      	str	r3, [r4, #0]
 8007092:	bd38      	pop	{r3, r4, r5, pc}
 8007094:	200006c0 	.word	0x200006c0

08007098 <_lseek_r>:
 8007098:	b538      	push	{r3, r4, r5, lr}
 800709a:	4604      	mov	r4, r0
 800709c:	4608      	mov	r0, r1
 800709e:	4611      	mov	r1, r2
 80070a0:	2200      	movs	r2, #0
 80070a2:	4d05      	ldr	r5, [pc, #20]	@ (80070b8 <_lseek_r+0x20>)
 80070a4:	602a      	str	r2, [r5, #0]
 80070a6:	461a      	mov	r2, r3
 80070a8:	f7fc fe09 	bl	8003cbe <_lseek>
 80070ac:	1c43      	adds	r3, r0, #1
 80070ae:	d102      	bne.n	80070b6 <_lseek_r+0x1e>
 80070b0:	682b      	ldr	r3, [r5, #0]
 80070b2:	b103      	cbz	r3, 80070b6 <_lseek_r+0x1e>
 80070b4:	6023      	str	r3, [r4, #0]
 80070b6:	bd38      	pop	{r3, r4, r5, pc}
 80070b8:	200006c0 	.word	0x200006c0

080070bc <_read_r>:
 80070bc:	b538      	push	{r3, r4, r5, lr}
 80070be:	4604      	mov	r4, r0
 80070c0:	4608      	mov	r0, r1
 80070c2:	4611      	mov	r1, r2
 80070c4:	2200      	movs	r2, #0
 80070c6:	4d05      	ldr	r5, [pc, #20]	@ (80070dc <_read_r+0x20>)
 80070c8:	602a      	str	r2, [r5, #0]
 80070ca:	461a      	mov	r2, r3
 80070cc:	f7fc fd9a 	bl	8003c04 <_read>
 80070d0:	1c43      	adds	r3, r0, #1
 80070d2:	d102      	bne.n	80070da <_read_r+0x1e>
 80070d4:	682b      	ldr	r3, [r5, #0]
 80070d6:	b103      	cbz	r3, 80070da <_read_r+0x1e>
 80070d8:	6023      	str	r3, [r4, #0]
 80070da:	bd38      	pop	{r3, r4, r5, pc}
 80070dc:	200006c0 	.word	0x200006c0

080070e0 <_sbrk_r>:
 80070e0:	b538      	push	{r3, r4, r5, lr}
 80070e2:	2300      	movs	r3, #0
 80070e4:	4d05      	ldr	r5, [pc, #20]	@ (80070fc <_sbrk_r+0x1c>)
 80070e6:	4604      	mov	r4, r0
 80070e8:	4608      	mov	r0, r1
 80070ea:	602b      	str	r3, [r5, #0]
 80070ec:	f7fc fdf4 	bl	8003cd8 <_sbrk>
 80070f0:	1c43      	adds	r3, r0, #1
 80070f2:	d102      	bne.n	80070fa <_sbrk_r+0x1a>
 80070f4:	682b      	ldr	r3, [r5, #0]
 80070f6:	b103      	cbz	r3, 80070fa <_sbrk_r+0x1a>
 80070f8:	6023      	str	r3, [r4, #0]
 80070fa:	bd38      	pop	{r3, r4, r5, pc}
 80070fc:	200006c0 	.word	0x200006c0

08007100 <_write_r>:
 8007100:	b538      	push	{r3, r4, r5, lr}
 8007102:	4604      	mov	r4, r0
 8007104:	4608      	mov	r0, r1
 8007106:	4611      	mov	r1, r2
 8007108:	2200      	movs	r2, #0
 800710a:	4d05      	ldr	r5, [pc, #20]	@ (8007120 <_write_r+0x20>)
 800710c:	602a      	str	r2, [r5, #0]
 800710e:	461a      	mov	r2, r3
 8007110:	f7fc fd95 	bl	8003c3e <_write>
 8007114:	1c43      	adds	r3, r0, #1
 8007116:	d102      	bne.n	800711e <_write_r+0x1e>
 8007118:	682b      	ldr	r3, [r5, #0]
 800711a:	b103      	cbz	r3, 800711e <_write_r+0x1e>
 800711c:	6023      	str	r3, [r4, #0]
 800711e:	bd38      	pop	{r3, r4, r5, pc}
 8007120:	200006c0 	.word	0x200006c0

08007124 <__errno>:
 8007124:	4b01      	ldr	r3, [pc, #4]	@ (800712c <__errno+0x8>)
 8007126:	6818      	ldr	r0, [r3, #0]
 8007128:	4770      	bx	lr
 800712a:	bf00      	nop
 800712c:	20000264 	.word	0x20000264

08007130 <__libc_init_array>:
 8007130:	b570      	push	{r4, r5, r6, lr}
 8007132:	2600      	movs	r6, #0
 8007134:	4d0c      	ldr	r5, [pc, #48]	@ (8007168 <__libc_init_array+0x38>)
 8007136:	4c0d      	ldr	r4, [pc, #52]	@ (800716c <__libc_init_array+0x3c>)
 8007138:	1b64      	subs	r4, r4, r5
 800713a:	10a4      	asrs	r4, r4, #2
 800713c:	42a6      	cmp	r6, r4
 800713e:	d109      	bne.n	8007154 <__libc_init_array+0x24>
 8007140:	f002 fc0e 	bl	8009960 <_init>
 8007144:	2600      	movs	r6, #0
 8007146:	4d0a      	ldr	r5, [pc, #40]	@ (8007170 <__libc_init_array+0x40>)
 8007148:	4c0a      	ldr	r4, [pc, #40]	@ (8007174 <__libc_init_array+0x44>)
 800714a:	1b64      	subs	r4, r4, r5
 800714c:	10a4      	asrs	r4, r4, #2
 800714e:	42a6      	cmp	r6, r4
 8007150:	d105      	bne.n	800715e <__libc_init_array+0x2e>
 8007152:	bd70      	pop	{r4, r5, r6, pc}
 8007154:	f855 3b04 	ldr.w	r3, [r5], #4
 8007158:	4798      	blx	r3
 800715a:	3601      	adds	r6, #1
 800715c:	e7ee      	b.n	800713c <__libc_init_array+0xc>
 800715e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007162:	4798      	blx	r3
 8007164:	3601      	adds	r6, #1
 8007166:	e7f2      	b.n	800714e <__libc_init_array+0x1e>
 8007168:	0800a9c8 	.word	0x0800a9c8
 800716c:	0800a9c8 	.word	0x0800a9c8
 8007170:	0800a9c8 	.word	0x0800a9c8
 8007174:	0800a9cc 	.word	0x0800a9cc

08007178 <__retarget_lock_init_recursive>:
 8007178:	4770      	bx	lr

0800717a <__retarget_lock_acquire_recursive>:
 800717a:	4770      	bx	lr

0800717c <__retarget_lock_release_recursive>:
 800717c:	4770      	bx	lr

0800717e <memchr>:
 800717e:	4603      	mov	r3, r0
 8007180:	b510      	push	{r4, lr}
 8007182:	b2c9      	uxtb	r1, r1
 8007184:	4402      	add	r2, r0
 8007186:	4293      	cmp	r3, r2
 8007188:	4618      	mov	r0, r3
 800718a:	d101      	bne.n	8007190 <memchr+0x12>
 800718c:	2000      	movs	r0, #0
 800718e:	e003      	b.n	8007198 <memchr+0x1a>
 8007190:	7804      	ldrb	r4, [r0, #0]
 8007192:	3301      	adds	r3, #1
 8007194:	428c      	cmp	r4, r1
 8007196:	d1f6      	bne.n	8007186 <memchr+0x8>
 8007198:	bd10      	pop	{r4, pc}

0800719a <memcpy>:
 800719a:	440a      	add	r2, r1
 800719c:	4291      	cmp	r1, r2
 800719e:	f100 33ff 	add.w	r3, r0, #4294967295
 80071a2:	d100      	bne.n	80071a6 <memcpy+0xc>
 80071a4:	4770      	bx	lr
 80071a6:	b510      	push	{r4, lr}
 80071a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071ac:	4291      	cmp	r1, r2
 80071ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071b2:	d1f9      	bne.n	80071a8 <memcpy+0xe>
 80071b4:	bd10      	pop	{r4, pc}
	...

080071b8 <nan>:
 80071b8:	2000      	movs	r0, #0
 80071ba:	4901      	ldr	r1, [pc, #4]	@ (80071c0 <nan+0x8>)
 80071bc:	4770      	bx	lr
 80071be:	bf00      	nop
 80071c0:	7ff80000 	.word	0x7ff80000

080071c4 <quorem>:
 80071c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071c8:	6903      	ldr	r3, [r0, #16]
 80071ca:	690c      	ldr	r4, [r1, #16]
 80071cc:	4607      	mov	r7, r0
 80071ce:	42a3      	cmp	r3, r4
 80071d0:	db7e      	blt.n	80072d0 <quorem+0x10c>
 80071d2:	3c01      	subs	r4, #1
 80071d4:	00a3      	lsls	r3, r4, #2
 80071d6:	f100 0514 	add.w	r5, r0, #20
 80071da:	f101 0814 	add.w	r8, r1, #20
 80071de:	9300      	str	r3, [sp, #0]
 80071e0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80071e4:	9301      	str	r3, [sp, #4]
 80071e6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80071ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80071ee:	3301      	adds	r3, #1
 80071f0:	429a      	cmp	r2, r3
 80071f2:	fbb2 f6f3 	udiv	r6, r2, r3
 80071f6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80071fa:	d32e      	bcc.n	800725a <quorem+0x96>
 80071fc:	f04f 0a00 	mov.w	sl, #0
 8007200:	46c4      	mov	ip, r8
 8007202:	46ae      	mov	lr, r5
 8007204:	46d3      	mov	fp, sl
 8007206:	f85c 3b04 	ldr.w	r3, [ip], #4
 800720a:	b298      	uxth	r0, r3
 800720c:	fb06 a000 	mla	r0, r6, r0, sl
 8007210:	0c1b      	lsrs	r3, r3, #16
 8007212:	0c02      	lsrs	r2, r0, #16
 8007214:	fb06 2303 	mla	r3, r6, r3, r2
 8007218:	f8de 2000 	ldr.w	r2, [lr]
 800721c:	b280      	uxth	r0, r0
 800721e:	b292      	uxth	r2, r2
 8007220:	1a12      	subs	r2, r2, r0
 8007222:	445a      	add	r2, fp
 8007224:	f8de 0000 	ldr.w	r0, [lr]
 8007228:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800722c:	b29b      	uxth	r3, r3
 800722e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007232:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007236:	b292      	uxth	r2, r2
 8007238:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800723c:	45e1      	cmp	r9, ip
 800723e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007242:	f84e 2b04 	str.w	r2, [lr], #4
 8007246:	d2de      	bcs.n	8007206 <quorem+0x42>
 8007248:	9b00      	ldr	r3, [sp, #0]
 800724a:	58eb      	ldr	r3, [r5, r3]
 800724c:	b92b      	cbnz	r3, 800725a <quorem+0x96>
 800724e:	9b01      	ldr	r3, [sp, #4]
 8007250:	3b04      	subs	r3, #4
 8007252:	429d      	cmp	r5, r3
 8007254:	461a      	mov	r2, r3
 8007256:	d32f      	bcc.n	80072b8 <quorem+0xf4>
 8007258:	613c      	str	r4, [r7, #16]
 800725a:	4638      	mov	r0, r7
 800725c:	f001 fc5a 	bl	8008b14 <__mcmp>
 8007260:	2800      	cmp	r0, #0
 8007262:	db25      	blt.n	80072b0 <quorem+0xec>
 8007264:	4629      	mov	r1, r5
 8007266:	2000      	movs	r0, #0
 8007268:	f858 2b04 	ldr.w	r2, [r8], #4
 800726c:	f8d1 c000 	ldr.w	ip, [r1]
 8007270:	fa1f fe82 	uxth.w	lr, r2
 8007274:	fa1f f38c 	uxth.w	r3, ip
 8007278:	eba3 030e 	sub.w	r3, r3, lr
 800727c:	4403      	add	r3, r0
 800727e:	0c12      	lsrs	r2, r2, #16
 8007280:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007284:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007288:	b29b      	uxth	r3, r3
 800728a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800728e:	45c1      	cmp	r9, r8
 8007290:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007294:	f841 3b04 	str.w	r3, [r1], #4
 8007298:	d2e6      	bcs.n	8007268 <quorem+0xa4>
 800729a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800729e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80072a2:	b922      	cbnz	r2, 80072ae <quorem+0xea>
 80072a4:	3b04      	subs	r3, #4
 80072a6:	429d      	cmp	r5, r3
 80072a8:	461a      	mov	r2, r3
 80072aa:	d30b      	bcc.n	80072c4 <quorem+0x100>
 80072ac:	613c      	str	r4, [r7, #16]
 80072ae:	3601      	adds	r6, #1
 80072b0:	4630      	mov	r0, r6
 80072b2:	b003      	add	sp, #12
 80072b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072b8:	6812      	ldr	r2, [r2, #0]
 80072ba:	3b04      	subs	r3, #4
 80072bc:	2a00      	cmp	r2, #0
 80072be:	d1cb      	bne.n	8007258 <quorem+0x94>
 80072c0:	3c01      	subs	r4, #1
 80072c2:	e7c6      	b.n	8007252 <quorem+0x8e>
 80072c4:	6812      	ldr	r2, [r2, #0]
 80072c6:	3b04      	subs	r3, #4
 80072c8:	2a00      	cmp	r2, #0
 80072ca:	d1ef      	bne.n	80072ac <quorem+0xe8>
 80072cc:	3c01      	subs	r4, #1
 80072ce:	e7ea      	b.n	80072a6 <quorem+0xe2>
 80072d0:	2000      	movs	r0, #0
 80072d2:	e7ee      	b.n	80072b2 <quorem+0xee>
 80072d4:	0000      	movs	r0, r0
	...

080072d8 <_dtoa_r>:
 80072d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072dc:	4614      	mov	r4, r2
 80072de:	461d      	mov	r5, r3
 80072e0:	69c7      	ldr	r7, [r0, #28]
 80072e2:	b097      	sub	sp, #92	@ 0x5c
 80072e4:	4683      	mov	fp, r0
 80072e6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80072ea:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80072ec:	b97f      	cbnz	r7, 800730e <_dtoa_r+0x36>
 80072ee:	2010      	movs	r0, #16
 80072f0:	f7fe fa66 	bl	80057c0 <malloc>
 80072f4:	4602      	mov	r2, r0
 80072f6:	f8cb 001c 	str.w	r0, [fp, #28]
 80072fa:	b920      	cbnz	r0, 8007306 <_dtoa_r+0x2e>
 80072fc:	21ef      	movs	r1, #239	@ 0xef
 80072fe:	4ba8      	ldr	r3, [pc, #672]	@ (80075a0 <_dtoa_r+0x2c8>)
 8007300:	48a8      	ldr	r0, [pc, #672]	@ (80075a4 <_dtoa_r+0x2cc>)
 8007302:	f002 f811 	bl	8009328 <__assert_func>
 8007306:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800730a:	6007      	str	r7, [r0, #0]
 800730c:	60c7      	str	r7, [r0, #12]
 800730e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007312:	6819      	ldr	r1, [r3, #0]
 8007314:	b159      	cbz	r1, 800732e <_dtoa_r+0x56>
 8007316:	685a      	ldr	r2, [r3, #4]
 8007318:	2301      	movs	r3, #1
 800731a:	4093      	lsls	r3, r2
 800731c:	604a      	str	r2, [r1, #4]
 800731e:	608b      	str	r3, [r1, #8]
 8007320:	4658      	mov	r0, fp
 8007322:	f001 f975 	bl	8008610 <_Bfree>
 8007326:	2200      	movs	r2, #0
 8007328:	f8db 301c 	ldr.w	r3, [fp, #28]
 800732c:	601a      	str	r2, [r3, #0]
 800732e:	1e2b      	subs	r3, r5, #0
 8007330:	bfaf      	iteee	ge
 8007332:	2300      	movge	r3, #0
 8007334:	2201      	movlt	r2, #1
 8007336:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800733a:	9303      	strlt	r3, [sp, #12]
 800733c:	bfa8      	it	ge
 800733e:	6033      	strge	r3, [r6, #0]
 8007340:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007344:	4b98      	ldr	r3, [pc, #608]	@ (80075a8 <_dtoa_r+0x2d0>)
 8007346:	bfb8      	it	lt
 8007348:	6032      	strlt	r2, [r6, #0]
 800734a:	ea33 0308 	bics.w	r3, r3, r8
 800734e:	d112      	bne.n	8007376 <_dtoa_r+0x9e>
 8007350:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007354:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007356:	6013      	str	r3, [r2, #0]
 8007358:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800735c:	4323      	orrs	r3, r4
 800735e:	f000 8550 	beq.w	8007e02 <_dtoa_r+0xb2a>
 8007362:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007364:	f8df a244 	ldr.w	sl, [pc, #580]	@ 80075ac <_dtoa_r+0x2d4>
 8007368:	2b00      	cmp	r3, #0
 800736a:	f000 8552 	beq.w	8007e12 <_dtoa_r+0xb3a>
 800736e:	f10a 0303 	add.w	r3, sl, #3
 8007372:	f000 bd4c 	b.w	8007e0e <_dtoa_r+0xb36>
 8007376:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800737a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800737e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007382:	2200      	movs	r2, #0
 8007384:	2300      	movs	r3, #0
 8007386:	f7f9 fb19 	bl	80009bc <__aeabi_dcmpeq>
 800738a:	4607      	mov	r7, r0
 800738c:	b158      	cbz	r0, 80073a6 <_dtoa_r+0xce>
 800738e:	2301      	movs	r3, #1
 8007390:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007392:	6013      	str	r3, [r2, #0]
 8007394:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007396:	b113      	cbz	r3, 800739e <_dtoa_r+0xc6>
 8007398:	4b85      	ldr	r3, [pc, #532]	@ (80075b0 <_dtoa_r+0x2d8>)
 800739a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800739c:	6013      	str	r3, [r2, #0]
 800739e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80075b4 <_dtoa_r+0x2dc>
 80073a2:	f000 bd36 	b.w	8007e12 <_dtoa_r+0xb3a>
 80073a6:	ab14      	add	r3, sp, #80	@ 0x50
 80073a8:	9301      	str	r3, [sp, #4]
 80073aa:	ab15      	add	r3, sp, #84	@ 0x54
 80073ac:	9300      	str	r3, [sp, #0]
 80073ae:	4658      	mov	r0, fp
 80073b0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80073b4:	f001 fcc6 	bl	8008d44 <__d2b>
 80073b8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80073bc:	4681      	mov	r9, r0
 80073be:	2e00      	cmp	r6, #0
 80073c0:	d077      	beq.n	80074b2 <_dtoa_r+0x1da>
 80073c2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80073c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80073c8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80073cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80073d0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80073d4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80073d8:	9712      	str	r7, [sp, #72]	@ 0x48
 80073da:	4619      	mov	r1, r3
 80073dc:	2200      	movs	r2, #0
 80073de:	4b76      	ldr	r3, [pc, #472]	@ (80075b8 <_dtoa_r+0x2e0>)
 80073e0:	f7f8 fecc 	bl	800017c <__aeabi_dsub>
 80073e4:	a368      	add	r3, pc, #416	@ (adr r3, 8007588 <_dtoa_r+0x2b0>)
 80073e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ea:	f7f9 f87f 	bl	80004ec <__aeabi_dmul>
 80073ee:	a368      	add	r3, pc, #416	@ (adr r3, 8007590 <_dtoa_r+0x2b8>)
 80073f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f4:	f7f8 fec4 	bl	8000180 <__adddf3>
 80073f8:	4604      	mov	r4, r0
 80073fa:	4630      	mov	r0, r6
 80073fc:	460d      	mov	r5, r1
 80073fe:	f7f9 f80b 	bl	8000418 <__aeabi_i2d>
 8007402:	a365      	add	r3, pc, #404	@ (adr r3, 8007598 <_dtoa_r+0x2c0>)
 8007404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007408:	f7f9 f870 	bl	80004ec <__aeabi_dmul>
 800740c:	4602      	mov	r2, r0
 800740e:	460b      	mov	r3, r1
 8007410:	4620      	mov	r0, r4
 8007412:	4629      	mov	r1, r5
 8007414:	f7f8 feb4 	bl	8000180 <__adddf3>
 8007418:	4604      	mov	r4, r0
 800741a:	460d      	mov	r5, r1
 800741c:	f7f9 fb16 	bl	8000a4c <__aeabi_d2iz>
 8007420:	2200      	movs	r2, #0
 8007422:	4607      	mov	r7, r0
 8007424:	2300      	movs	r3, #0
 8007426:	4620      	mov	r0, r4
 8007428:	4629      	mov	r1, r5
 800742a:	f7f9 fad1 	bl	80009d0 <__aeabi_dcmplt>
 800742e:	b140      	cbz	r0, 8007442 <_dtoa_r+0x16a>
 8007430:	4638      	mov	r0, r7
 8007432:	f7f8 fff1 	bl	8000418 <__aeabi_i2d>
 8007436:	4622      	mov	r2, r4
 8007438:	462b      	mov	r3, r5
 800743a:	f7f9 fabf 	bl	80009bc <__aeabi_dcmpeq>
 800743e:	b900      	cbnz	r0, 8007442 <_dtoa_r+0x16a>
 8007440:	3f01      	subs	r7, #1
 8007442:	2f16      	cmp	r7, #22
 8007444:	d853      	bhi.n	80074ee <_dtoa_r+0x216>
 8007446:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800744a:	4b5c      	ldr	r3, [pc, #368]	@ (80075bc <_dtoa_r+0x2e4>)
 800744c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007454:	f7f9 fabc 	bl	80009d0 <__aeabi_dcmplt>
 8007458:	2800      	cmp	r0, #0
 800745a:	d04a      	beq.n	80074f2 <_dtoa_r+0x21a>
 800745c:	2300      	movs	r3, #0
 800745e:	3f01      	subs	r7, #1
 8007460:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007462:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007464:	1b9b      	subs	r3, r3, r6
 8007466:	1e5a      	subs	r2, r3, #1
 8007468:	bf46      	itte	mi
 800746a:	f1c3 0801 	rsbmi	r8, r3, #1
 800746e:	2300      	movmi	r3, #0
 8007470:	f04f 0800 	movpl.w	r8, #0
 8007474:	9209      	str	r2, [sp, #36]	@ 0x24
 8007476:	bf48      	it	mi
 8007478:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800747a:	2f00      	cmp	r7, #0
 800747c:	db3b      	blt.n	80074f6 <_dtoa_r+0x21e>
 800747e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007480:	970e      	str	r7, [sp, #56]	@ 0x38
 8007482:	443b      	add	r3, r7
 8007484:	9309      	str	r3, [sp, #36]	@ 0x24
 8007486:	2300      	movs	r3, #0
 8007488:	930a      	str	r3, [sp, #40]	@ 0x28
 800748a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800748c:	2b09      	cmp	r3, #9
 800748e:	d866      	bhi.n	800755e <_dtoa_r+0x286>
 8007490:	2b05      	cmp	r3, #5
 8007492:	bfc4      	itt	gt
 8007494:	3b04      	subgt	r3, #4
 8007496:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8007498:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800749a:	bfc8      	it	gt
 800749c:	2400      	movgt	r4, #0
 800749e:	f1a3 0302 	sub.w	r3, r3, #2
 80074a2:	bfd8      	it	le
 80074a4:	2401      	movle	r4, #1
 80074a6:	2b03      	cmp	r3, #3
 80074a8:	d864      	bhi.n	8007574 <_dtoa_r+0x29c>
 80074aa:	e8df f003 	tbb	[pc, r3]
 80074ae:	382b      	.short	0x382b
 80074b0:	5636      	.short	0x5636
 80074b2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80074b6:	441e      	add	r6, r3
 80074b8:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80074bc:	2b20      	cmp	r3, #32
 80074be:	bfc1      	itttt	gt
 80074c0:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80074c4:	fa08 f803 	lslgt.w	r8, r8, r3
 80074c8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80074cc:	fa24 f303 	lsrgt.w	r3, r4, r3
 80074d0:	bfd6      	itet	le
 80074d2:	f1c3 0320 	rsble	r3, r3, #32
 80074d6:	ea48 0003 	orrgt.w	r0, r8, r3
 80074da:	fa04 f003 	lslle.w	r0, r4, r3
 80074de:	f7f8 ff8b 	bl	80003f8 <__aeabi_ui2d>
 80074e2:	2201      	movs	r2, #1
 80074e4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80074e8:	3e01      	subs	r6, #1
 80074ea:	9212      	str	r2, [sp, #72]	@ 0x48
 80074ec:	e775      	b.n	80073da <_dtoa_r+0x102>
 80074ee:	2301      	movs	r3, #1
 80074f0:	e7b6      	b.n	8007460 <_dtoa_r+0x188>
 80074f2:	900f      	str	r0, [sp, #60]	@ 0x3c
 80074f4:	e7b5      	b.n	8007462 <_dtoa_r+0x18a>
 80074f6:	427b      	negs	r3, r7
 80074f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80074fa:	2300      	movs	r3, #0
 80074fc:	eba8 0807 	sub.w	r8, r8, r7
 8007500:	930e      	str	r3, [sp, #56]	@ 0x38
 8007502:	e7c2      	b.n	800748a <_dtoa_r+0x1b2>
 8007504:	2300      	movs	r3, #0
 8007506:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007508:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800750a:	2b00      	cmp	r3, #0
 800750c:	dc35      	bgt.n	800757a <_dtoa_r+0x2a2>
 800750e:	2301      	movs	r3, #1
 8007510:	461a      	mov	r2, r3
 8007512:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007516:	9221      	str	r2, [sp, #132]	@ 0x84
 8007518:	e00b      	b.n	8007532 <_dtoa_r+0x25a>
 800751a:	2301      	movs	r3, #1
 800751c:	e7f3      	b.n	8007506 <_dtoa_r+0x22e>
 800751e:	2300      	movs	r3, #0
 8007520:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007522:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007524:	18fb      	adds	r3, r7, r3
 8007526:	9308      	str	r3, [sp, #32]
 8007528:	3301      	adds	r3, #1
 800752a:	2b01      	cmp	r3, #1
 800752c:	9307      	str	r3, [sp, #28]
 800752e:	bfb8      	it	lt
 8007530:	2301      	movlt	r3, #1
 8007532:	2100      	movs	r1, #0
 8007534:	2204      	movs	r2, #4
 8007536:	f8db 001c 	ldr.w	r0, [fp, #28]
 800753a:	f102 0514 	add.w	r5, r2, #20
 800753e:	429d      	cmp	r5, r3
 8007540:	d91f      	bls.n	8007582 <_dtoa_r+0x2aa>
 8007542:	6041      	str	r1, [r0, #4]
 8007544:	4658      	mov	r0, fp
 8007546:	f001 f823 	bl	8008590 <_Balloc>
 800754a:	4682      	mov	sl, r0
 800754c:	2800      	cmp	r0, #0
 800754e:	d139      	bne.n	80075c4 <_dtoa_r+0x2ec>
 8007550:	4602      	mov	r2, r0
 8007552:	f240 11af 	movw	r1, #431	@ 0x1af
 8007556:	4b1a      	ldr	r3, [pc, #104]	@ (80075c0 <_dtoa_r+0x2e8>)
 8007558:	e6d2      	b.n	8007300 <_dtoa_r+0x28>
 800755a:	2301      	movs	r3, #1
 800755c:	e7e0      	b.n	8007520 <_dtoa_r+0x248>
 800755e:	2401      	movs	r4, #1
 8007560:	2300      	movs	r3, #0
 8007562:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007564:	9320      	str	r3, [sp, #128]	@ 0x80
 8007566:	f04f 33ff 	mov.w	r3, #4294967295
 800756a:	2200      	movs	r2, #0
 800756c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007570:	2312      	movs	r3, #18
 8007572:	e7d0      	b.n	8007516 <_dtoa_r+0x23e>
 8007574:	2301      	movs	r3, #1
 8007576:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007578:	e7f5      	b.n	8007566 <_dtoa_r+0x28e>
 800757a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800757c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007580:	e7d7      	b.n	8007532 <_dtoa_r+0x25a>
 8007582:	3101      	adds	r1, #1
 8007584:	0052      	lsls	r2, r2, #1
 8007586:	e7d8      	b.n	800753a <_dtoa_r+0x262>
 8007588:	636f4361 	.word	0x636f4361
 800758c:	3fd287a7 	.word	0x3fd287a7
 8007590:	8b60c8b3 	.word	0x8b60c8b3
 8007594:	3fc68a28 	.word	0x3fc68a28
 8007598:	509f79fb 	.word	0x509f79fb
 800759c:	3fd34413 	.word	0x3fd34413
 80075a0:	0800a639 	.word	0x0800a639
 80075a4:	0800a650 	.word	0x0800a650
 80075a8:	7ff00000 	.word	0x7ff00000
 80075ac:	0800a635 	.word	0x0800a635
 80075b0:	0800a601 	.word	0x0800a601
 80075b4:	0800a600 	.word	0x0800a600
 80075b8:	3ff80000 	.word	0x3ff80000
 80075bc:	0800a7a8 	.word	0x0800a7a8
 80075c0:	0800a6a8 	.word	0x0800a6a8
 80075c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80075c8:	6018      	str	r0, [r3, #0]
 80075ca:	9b07      	ldr	r3, [sp, #28]
 80075cc:	2b0e      	cmp	r3, #14
 80075ce:	f200 80a4 	bhi.w	800771a <_dtoa_r+0x442>
 80075d2:	2c00      	cmp	r4, #0
 80075d4:	f000 80a1 	beq.w	800771a <_dtoa_r+0x442>
 80075d8:	2f00      	cmp	r7, #0
 80075da:	dd33      	ble.n	8007644 <_dtoa_r+0x36c>
 80075dc:	4b86      	ldr	r3, [pc, #536]	@ (80077f8 <_dtoa_r+0x520>)
 80075de:	f007 020f 	and.w	r2, r7, #15
 80075e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80075e6:	05f8      	lsls	r0, r7, #23
 80075e8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80075ec:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80075f0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80075f4:	d516      	bpl.n	8007624 <_dtoa_r+0x34c>
 80075f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80075fa:	4b80      	ldr	r3, [pc, #512]	@ (80077fc <_dtoa_r+0x524>)
 80075fc:	2603      	movs	r6, #3
 80075fe:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007602:	f7f9 f89d 	bl	8000740 <__aeabi_ddiv>
 8007606:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800760a:	f004 040f 	and.w	r4, r4, #15
 800760e:	4d7b      	ldr	r5, [pc, #492]	@ (80077fc <_dtoa_r+0x524>)
 8007610:	b954      	cbnz	r4, 8007628 <_dtoa_r+0x350>
 8007612:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007616:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800761a:	f7f9 f891 	bl	8000740 <__aeabi_ddiv>
 800761e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007622:	e028      	b.n	8007676 <_dtoa_r+0x39e>
 8007624:	2602      	movs	r6, #2
 8007626:	e7f2      	b.n	800760e <_dtoa_r+0x336>
 8007628:	07e1      	lsls	r1, r4, #31
 800762a:	d508      	bpl.n	800763e <_dtoa_r+0x366>
 800762c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007630:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007634:	f7f8 ff5a 	bl	80004ec <__aeabi_dmul>
 8007638:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800763c:	3601      	adds	r6, #1
 800763e:	1064      	asrs	r4, r4, #1
 8007640:	3508      	adds	r5, #8
 8007642:	e7e5      	b.n	8007610 <_dtoa_r+0x338>
 8007644:	f000 80d2 	beq.w	80077ec <_dtoa_r+0x514>
 8007648:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800764c:	427c      	negs	r4, r7
 800764e:	4b6a      	ldr	r3, [pc, #424]	@ (80077f8 <_dtoa_r+0x520>)
 8007650:	f004 020f 	and.w	r2, r4, #15
 8007654:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800765c:	f7f8 ff46 	bl	80004ec <__aeabi_dmul>
 8007660:	2602      	movs	r6, #2
 8007662:	2300      	movs	r3, #0
 8007664:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007668:	4d64      	ldr	r5, [pc, #400]	@ (80077fc <_dtoa_r+0x524>)
 800766a:	1124      	asrs	r4, r4, #4
 800766c:	2c00      	cmp	r4, #0
 800766e:	f040 80b2 	bne.w	80077d6 <_dtoa_r+0x4fe>
 8007672:	2b00      	cmp	r3, #0
 8007674:	d1d3      	bne.n	800761e <_dtoa_r+0x346>
 8007676:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800767a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800767c:	2b00      	cmp	r3, #0
 800767e:	f000 80b7 	beq.w	80077f0 <_dtoa_r+0x518>
 8007682:	2200      	movs	r2, #0
 8007684:	4620      	mov	r0, r4
 8007686:	4629      	mov	r1, r5
 8007688:	4b5d      	ldr	r3, [pc, #372]	@ (8007800 <_dtoa_r+0x528>)
 800768a:	f7f9 f9a1 	bl	80009d0 <__aeabi_dcmplt>
 800768e:	2800      	cmp	r0, #0
 8007690:	f000 80ae 	beq.w	80077f0 <_dtoa_r+0x518>
 8007694:	9b07      	ldr	r3, [sp, #28]
 8007696:	2b00      	cmp	r3, #0
 8007698:	f000 80aa 	beq.w	80077f0 <_dtoa_r+0x518>
 800769c:	9b08      	ldr	r3, [sp, #32]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	dd37      	ble.n	8007712 <_dtoa_r+0x43a>
 80076a2:	1e7b      	subs	r3, r7, #1
 80076a4:	4620      	mov	r0, r4
 80076a6:	9304      	str	r3, [sp, #16]
 80076a8:	2200      	movs	r2, #0
 80076aa:	4629      	mov	r1, r5
 80076ac:	4b55      	ldr	r3, [pc, #340]	@ (8007804 <_dtoa_r+0x52c>)
 80076ae:	f7f8 ff1d 	bl	80004ec <__aeabi_dmul>
 80076b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80076b6:	9c08      	ldr	r4, [sp, #32]
 80076b8:	3601      	adds	r6, #1
 80076ba:	4630      	mov	r0, r6
 80076bc:	f7f8 feac 	bl	8000418 <__aeabi_i2d>
 80076c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80076c4:	f7f8 ff12 	bl	80004ec <__aeabi_dmul>
 80076c8:	2200      	movs	r2, #0
 80076ca:	4b4f      	ldr	r3, [pc, #316]	@ (8007808 <_dtoa_r+0x530>)
 80076cc:	f7f8 fd58 	bl	8000180 <__adddf3>
 80076d0:	4605      	mov	r5, r0
 80076d2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80076d6:	2c00      	cmp	r4, #0
 80076d8:	f040 809a 	bne.w	8007810 <_dtoa_r+0x538>
 80076dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076e0:	2200      	movs	r2, #0
 80076e2:	4b4a      	ldr	r3, [pc, #296]	@ (800780c <_dtoa_r+0x534>)
 80076e4:	f7f8 fd4a 	bl	800017c <__aeabi_dsub>
 80076e8:	4602      	mov	r2, r0
 80076ea:	460b      	mov	r3, r1
 80076ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80076f0:	462a      	mov	r2, r5
 80076f2:	4633      	mov	r3, r6
 80076f4:	f7f9 f98a 	bl	8000a0c <__aeabi_dcmpgt>
 80076f8:	2800      	cmp	r0, #0
 80076fa:	f040 828e 	bne.w	8007c1a <_dtoa_r+0x942>
 80076fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007702:	462a      	mov	r2, r5
 8007704:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007708:	f7f9 f962 	bl	80009d0 <__aeabi_dcmplt>
 800770c:	2800      	cmp	r0, #0
 800770e:	f040 8127 	bne.w	8007960 <_dtoa_r+0x688>
 8007712:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007716:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800771a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800771c:	2b00      	cmp	r3, #0
 800771e:	f2c0 8163 	blt.w	80079e8 <_dtoa_r+0x710>
 8007722:	2f0e      	cmp	r7, #14
 8007724:	f300 8160 	bgt.w	80079e8 <_dtoa_r+0x710>
 8007728:	4b33      	ldr	r3, [pc, #204]	@ (80077f8 <_dtoa_r+0x520>)
 800772a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800772e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007732:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007736:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007738:	2b00      	cmp	r3, #0
 800773a:	da03      	bge.n	8007744 <_dtoa_r+0x46c>
 800773c:	9b07      	ldr	r3, [sp, #28]
 800773e:	2b00      	cmp	r3, #0
 8007740:	f340 8100 	ble.w	8007944 <_dtoa_r+0x66c>
 8007744:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007748:	4656      	mov	r6, sl
 800774a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800774e:	4620      	mov	r0, r4
 8007750:	4629      	mov	r1, r5
 8007752:	f7f8 fff5 	bl	8000740 <__aeabi_ddiv>
 8007756:	f7f9 f979 	bl	8000a4c <__aeabi_d2iz>
 800775a:	4680      	mov	r8, r0
 800775c:	f7f8 fe5c 	bl	8000418 <__aeabi_i2d>
 8007760:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007764:	f7f8 fec2 	bl	80004ec <__aeabi_dmul>
 8007768:	4602      	mov	r2, r0
 800776a:	460b      	mov	r3, r1
 800776c:	4620      	mov	r0, r4
 800776e:	4629      	mov	r1, r5
 8007770:	f7f8 fd04 	bl	800017c <__aeabi_dsub>
 8007774:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007778:	9d07      	ldr	r5, [sp, #28]
 800777a:	f806 4b01 	strb.w	r4, [r6], #1
 800777e:	eba6 040a 	sub.w	r4, r6, sl
 8007782:	42a5      	cmp	r5, r4
 8007784:	4602      	mov	r2, r0
 8007786:	460b      	mov	r3, r1
 8007788:	f040 8116 	bne.w	80079b8 <_dtoa_r+0x6e0>
 800778c:	f7f8 fcf8 	bl	8000180 <__adddf3>
 8007790:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007794:	4604      	mov	r4, r0
 8007796:	460d      	mov	r5, r1
 8007798:	f7f9 f938 	bl	8000a0c <__aeabi_dcmpgt>
 800779c:	2800      	cmp	r0, #0
 800779e:	f040 80f8 	bne.w	8007992 <_dtoa_r+0x6ba>
 80077a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80077a6:	4620      	mov	r0, r4
 80077a8:	4629      	mov	r1, r5
 80077aa:	f7f9 f907 	bl	80009bc <__aeabi_dcmpeq>
 80077ae:	b118      	cbz	r0, 80077b8 <_dtoa_r+0x4e0>
 80077b0:	f018 0f01 	tst.w	r8, #1
 80077b4:	f040 80ed 	bne.w	8007992 <_dtoa_r+0x6ba>
 80077b8:	4649      	mov	r1, r9
 80077ba:	4658      	mov	r0, fp
 80077bc:	f000 ff28 	bl	8008610 <_Bfree>
 80077c0:	2300      	movs	r3, #0
 80077c2:	7033      	strb	r3, [r6, #0]
 80077c4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80077c6:	3701      	adds	r7, #1
 80077c8:	601f      	str	r7, [r3, #0]
 80077ca:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	f000 8320 	beq.w	8007e12 <_dtoa_r+0xb3a>
 80077d2:	601e      	str	r6, [r3, #0]
 80077d4:	e31d      	b.n	8007e12 <_dtoa_r+0xb3a>
 80077d6:	07e2      	lsls	r2, r4, #31
 80077d8:	d505      	bpl.n	80077e6 <_dtoa_r+0x50e>
 80077da:	e9d5 2300 	ldrd	r2, r3, [r5]
 80077de:	f7f8 fe85 	bl	80004ec <__aeabi_dmul>
 80077e2:	2301      	movs	r3, #1
 80077e4:	3601      	adds	r6, #1
 80077e6:	1064      	asrs	r4, r4, #1
 80077e8:	3508      	adds	r5, #8
 80077ea:	e73f      	b.n	800766c <_dtoa_r+0x394>
 80077ec:	2602      	movs	r6, #2
 80077ee:	e742      	b.n	8007676 <_dtoa_r+0x39e>
 80077f0:	9c07      	ldr	r4, [sp, #28]
 80077f2:	9704      	str	r7, [sp, #16]
 80077f4:	e761      	b.n	80076ba <_dtoa_r+0x3e2>
 80077f6:	bf00      	nop
 80077f8:	0800a7a8 	.word	0x0800a7a8
 80077fc:	0800a780 	.word	0x0800a780
 8007800:	3ff00000 	.word	0x3ff00000
 8007804:	40240000 	.word	0x40240000
 8007808:	401c0000 	.word	0x401c0000
 800780c:	40140000 	.word	0x40140000
 8007810:	4b70      	ldr	r3, [pc, #448]	@ (80079d4 <_dtoa_r+0x6fc>)
 8007812:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007814:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007818:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800781c:	4454      	add	r4, sl
 800781e:	2900      	cmp	r1, #0
 8007820:	d045      	beq.n	80078ae <_dtoa_r+0x5d6>
 8007822:	2000      	movs	r0, #0
 8007824:	496c      	ldr	r1, [pc, #432]	@ (80079d8 <_dtoa_r+0x700>)
 8007826:	f7f8 ff8b 	bl	8000740 <__aeabi_ddiv>
 800782a:	4633      	mov	r3, r6
 800782c:	462a      	mov	r2, r5
 800782e:	f7f8 fca5 	bl	800017c <__aeabi_dsub>
 8007832:	4656      	mov	r6, sl
 8007834:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007838:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800783c:	f7f9 f906 	bl	8000a4c <__aeabi_d2iz>
 8007840:	4605      	mov	r5, r0
 8007842:	f7f8 fde9 	bl	8000418 <__aeabi_i2d>
 8007846:	4602      	mov	r2, r0
 8007848:	460b      	mov	r3, r1
 800784a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800784e:	f7f8 fc95 	bl	800017c <__aeabi_dsub>
 8007852:	4602      	mov	r2, r0
 8007854:	460b      	mov	r3, r1
 8007856:	3530      	adds	r5, #48	@ 0x30
 8007858:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800785c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007860:	f806 5b01 	strb.w	r5, [r6], #1
 8007864:	f7f9 f8b4 	bl	80009d0 <__aeabi_dcmplt>
 8007868:	2800      	cmp	r0, #0
 800786a:	d163      	bne.n	8007934 <_dtoa_r+0x65c>
 800786c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007870:	2000      	movs	r0, #0
 8007872:	495a      	ldr	r1, [pc, #360]	@ (80079dc <_dtoa_r+0x704>)
 8007874:	f7f8 fc82 	bl	800017c <__aeabi_dsub>
 8007878:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800787c:	f7f9 f8a8 	bl	80009d0 <__aeabi_dcmplt>
 8007880:	2800      	cmp	r0, #0
 8007882:	f040 8087 	bne.w	8007994 <_dtoa_r+0x6bc>
 8007886:	42a6      	cmp	r6, r4
 8007888:	f43f af43 	beq.w	8007712 <_dtoa_r+0x43a>
 800788c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007890:	2200      	movs	r2, #0
 8007892:	4b53      	ldr	r3, [pc, #332]	@ (80079e0 <_dtoa_r+0x708>)
 8007894:	f7f8 fe2a 	bl	80004ec <__aeabi_dmul>
 8007898:	2200      	movs	r2, #0
 800789a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800789e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078a2:	4b4f      	ldr	r3, [pc, #316]	@ (80079e0 <_dtoa_r+0x708>)
 80078a4:	f7f8 fe22 	bl	80004ec <__aeabi_dmul>
 80078a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80078ac:	e7c4      	b.n	8007838 <_dtoa_r+0x560>
 80078ae:	4631      	mov	r1, r6
 80078b0:	4628      	mov	r0, r5
 80078b2:	f7f8 fe1b 	bl	80004ec <__aeabi_dmul>
 80078b6:	4656      	mov	r6, sl
 80078b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80078bc:	9413      	str	r4, [sp, #76]	@ 0x4c
 80078be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078c2:	f7f9 f8c3 	bl	8000a4c <__aeabi_d2iz>
 80078c6:	4605      	mov	r5, r0
 80078c8:	f7f8 fda6 	bl	8000418 <__aeabi_i2d>
 80078cc:	4602      	mov	r2, r0
 80078ce:	460b      	mov	r3, r1
 80078d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078d4:	f7f8 fc52 	bl	800017c <__aeabi_dsub>
 80078d8:	4602      	mov	r2, r0
 80078da:	460b      	mov	r3, r1
 80078dc:	3530      	adds	r5, #48	@ 0x30
 80078de:	f806 5b01 	strb.w	r5, [r6], #1
 80078e2:	42a6      	cmp	r6, r4
 80078e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80078e8:	f04f 0200 	mov.w	r2, #0
 80078ec:	d124      	bne.n	8007938 <_dtoa_r+0x660>
 80078ee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80078f2:	4b39      	ldr	r3, [pc, #228]	@ (80079d8 <_dtoa_r+0x700>)
 80078f4:	f7f8 fc44 	bl	8000180 <__adddf3>
 80078f8:	4602      	mov	r2, r0
 80078fa:	460b      	mov	r3, r1
 80078fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007900:	f7f9 f884 	bl	8000a0c <__aeabi_dcmpgt>
 8007904:	2800      	cmp	r0, #0
 8007906:	d145      	bne.n	8007994 <_dtoa_r+0x6bc>
 8007908:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800790c:	2000      	movs	r0, #0
 800790e:	4932      	ldr	r1, [pc, #200]	@ (80079d8 <_dtoa_r+0x700>)
 8007910:	f7f8 fc34 	bl	800017c <__aeabi_dsub>
 8007914:	4602      	mov	r2, r0
 8007916:	460b      	mov	r3, r1
 8007918:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800791c:	f7f9 f858 	bl	80009d0 <__aeabi_dcmplt>
 8007920:	2800      	cmp	r0, #0
 8007922:	f43f aef6 	beq.w	8007712 <_dtoa_r+0x43a>
 8007926:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007928:	1e73      	subs	r3, r6, #1
 800792a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800792c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007930:	2b30      	cmp	r3, #48	@ 0x30
 8007932:	d0f8      	beq.n	8007926 <_dtoa_r+0x64e>
 8007934:	9f04      	ldr	r7, [sp, #16]
 8007936:	e73f      	b.n	80077b8 <_dtoa_r+0x4e0>
 8007938:	4b29      	ldr	r3, [pc, #164]	@ (80079e0 <_dtoa_r+0x708>)
 800793a:	f7f8 fdd7 	bl	80004ec <__aeabi_dmul>
 800793e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007942:	e7bc      	b.n	80078be <_dtoa_r+0x5e6>
 8007944:	d10c      	bne.n	8007960 <_dtoa_r+0x688>
 8007946:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800794a:	2200      	movs	r2, #0
 800794c:	4b25      	ldr	r3, [pc, #148]	@ (80079e4 <_dtoa_r+0x70c>)
 800794e:	f7f8 fdcd 	bl	80004ec <__aeabi_dmul>
 8007952:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007956:	f7f9 f84f 	bl	80009f8 <__aeabi_dcmpge>
 800795a:	2800      	cmp	r0, #0
 800795c:	f000 815b 	beq.w	8007c16 <_dtoa_r+0x93e>
 8007960:	2400      	movs	r4, #0
 8007962:	4625      	mov	r5, r4
 8007964:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007966:	4656      	mov	r6, sl
 8007968:	43db      	mvns	r3, r3
 800796a:	9304      	str	r3, [sp, #16]
 800796c:	2700      	movs	r7, #0
 800796e:	4621      	mov	r1, r4
 8007970:	4658      	mov	r0, fp
 8007972:	f000 fe4d 	bl	8008610 <_Bfree>
 8007976:	2d00      	cmp	r5, #0
 8007978:	d0dc      	beq.n	8007934 <_dtoa_r+0x65c>
 800797a:	b12f      	cbz	r7, 8007988 <_dtoa_r+0x6b0>
 800797c:	42af      	cmp	r7, r5
 800797e:	d003      	beq.n	8007988 <_dtoa_r+0x6b0>
 8007980:	4639      	mov	r1, r7
 8007982:	4658      	mov	r0, fp
 8007984:	f000 fe44 	bl	8008610 <_Bfree>
 8007988:	4629      	mov	r1, r5
 800798a:	4658      	mov	r0, fp
 800798c:	f000 fe40 	bl	8008610 <_Bfree>
 8007990:	e7d0      	b.n	8007934 <_dtoa_r+0x65c>
 8007992:	9704      	str	r7, [sp, #16]
 8007994:	4633      	mov	r3, r6
 8007996:	461e      	mov	r6, r3
 8007998:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800799c:	2a39      	cmp	r2, #57	@ 0x39
 800799e:	d107      	bne.n	80079b0 <_dtoa_r+0x6d8>
 80079a0:	459a      	cmp	sl, r3
 80079a2:	d1f8      	bne.n	8007996 <_dtoa_r+0x6be>
 80079a4:	9a04      	ldr	r2, [sp, #16]
 80079a6:	3201      	adds	r2, #1
 80079a8:	9204      	str	r2, [sp, #16]
 80079aa:	2230      	movs	r2, #48	@ 0x30
 80079ac:	f88a 2000 	strb.w	r2, [sl]
 80079b0:	781a      	ldrb	r2, [r3, #0]
 80079b2:	3201      	adds	r2, #1
 80079b4:	701a      	strb	r2, [r3, #0]
 80079b6:	e7bd      	b.n	8007934 <_dtoa_r+0x65c>
 80079b8:	2200      	movs	r2, #0
 80079ba:	4b09      	ldr	r3, [pc, #36]	@ (80079e0 <_dtoa_r+0x708>)
 80079bc:	f7f8 fd96 	bl	80004ec <__aeabi_dmul>
 80079c0:	2200      	movs	r2, #0
 80079c2:	2300      	movs	r3, #0
 80079c4:	4604      	mov	r4, r0
 80079c6:	460d      	mov	r5, r1
 80079c8:	f7f8 fff8 	bl	80009bc <__aeabi_dcmpeq>
 80079cc:	2800      	cmp	r0, #0
 80079ce:	f43f aebc 	beq.w	800774a <_dtoa_r+0x472>
 80079d2:	e6f1      	b.n	80077b8 <_dtoa_r+0x4e0>
 80079d4:	0800a7a8 	.word	0x0800a7a8
 80079d8:	3fe00000 	.word	0x3fe00000
 80079dc:	3ff00000 	.word	0x3ff00000
 80079e0:	40240000 	.word	0x40240000
 80079e4:	40140000 	.word	0x40140000
 80079e8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80079ea:	2a00      	cmp	r2, #0
 80079ec:	f000 80db 	beq.w	8007ba6 <_dtoa_r+0x8ce>
 80079f0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80079f2:	2a01      	cmp	r2, #1
 80079f4:	f300 80bf 	bgt.w	8007b76 <_dtoa_r+0x89e>
 80079f8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80079fa:	2a00      	cmp	r2, #0
 80079fc:	f000 80b7 	beq.w	8007b6e <_dtoa_r+0x896>
 8007a00:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007a04:	4646      	mov	r6, r8
 8007a06:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007a08:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a0a:	2101      	movs	r1, #1
 8007a0c:	441a      	add	r2, r3
 8007a0e:	4658      	mov	r0, fp
 8007a10:	4498      	add	r8, r3
 8007a12:	9209      	str	r2, [sp, #36]	@ 0x24
 8007a14:	f000 fefa 	bl	800880c <__i2b>
 8007a18:	4605      	mov	r5, r0
 8007a1a:	b15e      	cbz	r6, 8007a34 <_dtoa_r+0x75c>
 8007a1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	dd08      	ble.n	8007a34 <_dtoa_r+0x75c>
 8007a22:	42b3      	cmp	r3, r6
 8007a24:	bfa8      	it	ge
 8007a26:	4633      	movge	r3, r6
 8007a28:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a2a:	eba8 0803 	sub.w	r8, r8, r3
 8007a2e:	1af6      	subs	r6, r6, r3
 8007a30:	1ad3      	subs	r3, r2, r3
 8007a32:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a36:	b1f3      	cbz	r3, 8007a76 <_dtoa_r+0x79e>
 8007a38:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	f000 80b7 	beq.w	8007bae <_dtoa_r+0x8d6>
 8007a40:	b18c      	cbz	r4, 8007a66 <_dtoa_r+0x78e>
 8007a42:	4629      	mov	r1, r5
 8007a44:	4622      	mov	r2, r4
 8007a46:	4658      	mov	r0, fp
 8007a48:	f000 ff9e 	bl	8008988 <__pow5mult>
 8007a4c:	464a      	mov	r2, r9
 8007a4e:	4601      	mov	r1, r0
 8007a50:	4605      	mov	r5, r0
 8007a52:	4658      	mov	r0, fp
 8007a54:	f000 fef0 	bl	8008838 <__multiply>
 8007a58:	4649      	mov	r1, r9
 8007a5a:	9004      	str	r0, [sp, #16]
 8007a5c:	4658      	mov	r0, fp
 8007a5e:	f000 fdd7 	bl	8008610 <_Bfree>
 8007a62:	9b04      	ldr	r3, [sp, #16]
 8007a64:	4699      	mov	r9, r3
 8007a66:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a68:	1b1a      	subs	r2, r3, r4
 8007a6a:	d004      	beq.n	8007a76 <_dtoa_r+0x79e>
 8007a6c:	4649      	mov	r1, r9
 8007a6e:	4658      	mov	r0, fp
 8007a70:	f000 ff8a 	bl	8008988 <__pow5mult>
 8007a74:	4681      	mov	r9, r0
 8007a76:	2101      	movs	r1, #1
 8007a78:	4658      	mov	r0, fp
 8007a7a:	f000 fec7 	bl	800880c <__i2b>
 8007a7e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a80:	4604      	mov	r4, r0
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	f000 81c9 	beq.w	8007e1a <_dtoa_r+0xb42>
 8007a88:	461a      	mov	r2, r3
 8007a8a:	4601      	mov	r1, r0
 8007a8c:	4658      	mov	r0, fp
 8007a8e:	f000 ff7b 	bl	8008988 <__pow5mult>
 8007a92:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007a94:	4604      	mov	r4, r0
 8007a96:	2b01      	cmp	r3, #1
 8007a98:	f300 808f 	bgt.w	8007bba <_dtoa_r+0x8e2>
 8007a9c:	9b02      	ldr	r3, [sp, #8]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	f040 8087 	bne.w	8007bb2 <_dtoa_r+0x8da>
 8007aa4:	9b03      	ldr	r3, [sp, #12]
 8007aa6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	f040 8083 	bne.w	8007bb6 <_dtoa_r+0x8de>
 8007ab0:	9b03      	ldr	r3, [sp, #12]
 8007ab2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007ab6:	0d1b      	lsrs	r3, r3, #20
 8007ab8:	051b      	lsls	r3, r3, #20
 8007aba:	b12b      	cbz	r3, 8007ac8 <_dtoa_r+0x7f0>
 8007abc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007abe:	f108 0801 	add.w	r8, r8, #1
 8007ac2:	3301      	adds	r3, #1
 8007ac4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	930a      	str	r3, [sp, #40]	@ 0x28
 8007aca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	f000 81aa 	beq.w	8007e26 <_dtoa_r+0xb4e>
 8007ad2:	6923      	ldr	r3, [r4, #16]
 8007ad4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007ad8:	6918      	ldr	r0, [r3, #16]
 8007ada:	f000 fe4b 	bl	8008774 <__hi0bits>
 8007ade:	f1c0 0020 	rsb	r0, r0, #32
 8007ae2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ae4:	4418      	add	r0, r3
 8007ae6:	f010 001f 	ands.w	r0, r0, #31
 8007aea:	d071      	beq.n	8007bd0 <_dtoa_r+0x8f8>
 8007aec:	f1c0 0320 	rsb	r3, r0, #32
 8007af0:	2b04      	cmp	r3, #4
 8007af2:	dd65      	ble.n	8007bc0 <_dtoa_r+0x8e8>
 8007af4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007af6:	f1c0 001c 	rsb	r0, r0, #28
 8007afa:	4403      	add	r3, r0
 8007afc:	4480      	add	r8, r0
 8007afe:	4406      	add	r6, r0
 8007b00:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b02:	f1b8 0f00 	cmp.w	r8, #0
 8007b06:	dd05      	ble.n	8007b14 <_dtoa_r+0x83c>
 8007b08:	4649      	mov	r1, r9
 8007b0a:	4642      	mov	r2, r8
 8007b0c:	4658      	mov	r0, fp
 8007b0e:	f000 ff95 	bl	8008a3c <__lshift>
 8007b12:	4681      	mov	r9, r0
 8007b14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	dd05      	ble.n	8007b26 <_dtoa_r+0x84e>
 8007b1a:	4621      	mov	r1, r4
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	4658      	mov	r0, fp
 8007b20:	f000 ff8c 	bl	8008a3c <__lshift>
 8007b24:	4604      	mov	r4, r0
 8007b26:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d053      	beq.n	8007bd4 <_dtoa_r+0x8fc>
 8007b2c:	4621      	mov	r1, r4
 8007b2e:	4648      	mov	r0, r9
 8007b30:	f000 fff0 	bl	8008b14 <__mcmp>
 8007b34:	2800      	cmp	r0, #0
 8007b36:	da4d      	bge.n	8007bd4 <_dtoa_r+0x8fc>
 8007b38:	1e7b      	subs	r3, r7, #1
 8007b3a:	4649      	mov	r1, r9
 8007b3c:	9304      	str	r3, [sp, #16]
 8007b3e:	220a      	movs	r2, #10
 8007b40:	2300      	movs	r3, #0
 8007b42:	4658      	mov	r0, fp
 8007b44:	f000 fd86 	bl	8008654 <__multadd>
 8007b48:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b4a:	4681      	mov	r9, r0
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	f000 816c 	beq.w	8007e2a <_dtoa_r+0xb52>
 8007b52:	2300      	movs	r3, #0
 8007b54:	4629      	mov	r1, r5
 8007b56:	220a      	movs	r2, #10
 8007b58:	4658      	mov	r0, fp
 8007b5a:	f000 fd7b 	bl	8008654 <__multadd>
 8007b5e:	9b08      	ldr	r3, [sp, #32]
 8007b60:	4605      	mov	r5, r0
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	dc61      	bgt.n	8007c2a <_dtoa_r+0x952>
 8007b66:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007b68:	2b02      	cmp	r3, #2
 8007b6a:	dc3b      	bgt.n	8007be4 <_dtoa_r+0x90c>
 8007b6c:	e05d      	b.n	8007c2a <_dtoa_r+0x952>
 8007b6e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007b70:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007b74:	e746      	b.n	8007a04 <_dtoa_r+0x72c>
 8007b76:	9b07      	ldr	r3, [sp, #28]
 8007b78:	1e5c      	subs	r4, r3, #1
 8007b7a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b7c:	42a3      	cmp	r3, r4
 8007b7e:	bfbf      	itttt	lt
 8007b80:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007b82:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8007b84:	1ae3      	sublt	r3, r4, r3
 8007b86:	18d2      	addlt	r2, r2, r3
 8007b88:	bfa8      	it	ge
 8007b8a:	1b1c      	subge	r4, r3, r4
 8007b8c:	9b07      	ldr	r3, [sp, #28]
 8007b8e:	bfbe      	ittt	lt
 8007b90:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007b92:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8007b94:	2400      	movlt	r4, #0
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	bfb5      	itete	lt
 8007b9a:	eba8 0603 	sublt.w	r6, r8, r3
 8007b9e:	4646      	movge	r6, r8
 8007ba0:	2300      	movlt	r3, #0
 8007ba2:	9b07      	ldrge	r3, [sp, #28]
 8007ba4:	e730      	b.n	8007a08 <_dtoa_r+0x730>
 8007ba6:	4646      	mov	r6, r8
 8007ba8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007baa:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007bac:	e735      	b.n	8007a1a <_dtoa_r+0x742>
 8007bae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007bb0:	e75c      	b.n	8007a6c <_dtoa_r+0x794>
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	e788      	b.n	8007ac8 <_dtoa_r+0x7f0>
 8007bb6:	9b02      	ldr	r3, [sp, #8]
 8007bb8:	e786      	b.n	8007ac8 <_dtoa_r+0x7f0>
 8007bba:	2300      	movs	r3, #0
 8007bbc:	930a      	str	r3, [sp, #40]	@ 0x28
 8007bbe:	e788      	b.n	8007ad2 <_dtoa_r+0x7fa>
 8007bc0:	d09f      	beq.n	8007b02 <_dtoa_r+0x82a>
 8007bc2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007bc4:	331c      	adds	r3, #28
 8007bc6:	441a      	add	r2, r3
 8007bc8:	4498      	add	r8, r3
 8007bca:	441e      	add	r6, r3
 8007bcc:	9209      	str	r2, [sp, #36]	@ 0x24
 8007bce:	e798      	b.n	8007b02 <_dtoa_r+0x82a>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	e7f6      	b.n	8007bc2 <_dtoa_r+0x8ea>
 8007bd4:	9b07      	ldr	r3, [sp, #28]
 8007bd6:	9704      	str	r7, [sp, #16]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	dc20      	bgt.n	8007c1e <_dtoa_r+0x946>
 8007bdc:	9308      	str	r3, [sp, #32]
 8007bde:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007be0:	2b02      	cmp	r3, #2
 8007be2:	dd1e      	ble.n	8007c22 <_dtoa_r+0x94a>
 8007be4:	9b08      	ldr	r3, [sp, #32]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	f47f aebc 	bne.w	8007964 <_dtoa_r+0x68c>
 8007bec:	4621      	mov	r1, r4
 8007bee:	2205      	movs	r2, #5
 8007bf0:	4658      	mov	r0, fp
 8007bf2:	f000 fd2f 	bl	8008654 <__multadd>
 8007bf6:	4601      	mov	r1, r0
 8007bf8:	4604      	mov	r4, r0
 8007bfa:	4648      	mov	r0, r9
 8007bfc:	f000 ff8a 	bl	8008b14 <__mcmp>
 8007c00:	2800      	cmp	r0, #0
 8007c02:	f77f aeaf 	ble.w	8007964 <_dtoa_r+0x68c>
 8007c06:	2331      	movs	r3, #49	@ 0x31
 8007c08:	4656      	mov	r6, sl
 8007c0a:	f806 3b01 	strb.w	r3, [r6], #1
 8007c0e:	9b04      	ldr	r3, [sp, #16]
 8007c10:	3301      	adds	r3, #1
 8007c12:	9304      	str	r3, [sp, #16]
 8007c14:	e6aa      	b.n	800796c <_dtoa_r+0x694>
 8007c16:	9c07      	ldr	r4, [sp, #28]
 8007c18:	9704      	str	r7, [sp, #16]
 8007c1a:	4625      	mov	r5, r4
 8007c1c:	e7f3      	b.n	8007c06 <_dtoa_r+0x92e>
 8007c1e:	9b07      	ldr	r3, [sp, #28]
 8007c20:	9308      	str	r3, [sp, #32]
 8007c22:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	f000 8104 	beq.w	8007e32 <_dtoa_r+0xb5a>
 8007c2a:	2e00      	cmp	r6, #0
 8007c2c:	dd05      	ble.n	8007c3a <_dtoa_r+0x962>
 8007c2e:	4629      	mov	r1, r5
 8007c30:	4632      	mov	r2, r6
 8007c32:	4658      	mov	r0, fp
 8007c34:	f000 ff02 	bl	8008a3c <__lshift>
 8007c38:	4605      	mov	r5, r0
 8007c3a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d05a      	beq.n	8007cf6 <_dtoa_r+0xa1e>
 8007c40:	4658      	mov	r0, fp
 8007c42:	6869      	ldr	r1, [r5, #4]
 8007c44:	f000 fca4 	bl	8008590 <_Balloc>
 8007c48:	4606      	mov	r6, r0
 8007c4a:	b928      	cbnz	r0, 8007c58 <_dtoa_r+0x980>
 8007c4c:	4602      	mov	r2, r0
 8007c4e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007c52:	4b83      	ldr	r3, [pc, #524]	@ (8007e60 <_dtoa_r+0xb88>)
 8007c54:	f7ff bb54 	b.w	8007300 <_dtoa_r+0x28>
 8007c58:	692a      	ldr	r2, [r5, #16]
 8007c5a:	f105 010c 	add.w	r1, r5, #12
 8007c5e:	3202      	adds	r2, #2
 8007c60:	0092      	lsls	r2, r2, #2
 8007c62:	300c      	adds	r0, #12
 8007c64:	f7ff fa99 	bl	800719a <memcpy>
 8007c68:	2201      	movs	r2, #1
 8007c6a:	4631      	mov	r1, r6
 8007c6c:	4658      	mov	r0, fp
 8007c6e:	f000 fee5 	bl	8008a3c <__lshift>
 8007c72:	462f      	mov	r7, r5
 8007c74:	4605      	mov	r5, r0
 8007c76:	f10a 0301 	add.w	r3, sl, #1
 8007c7a:	9307      	str	r3, [sp, #28]
 8007c7c:	9b08      	ldr	r3, [sp, #32]
 8007c7e:	4453      	add	r3, sl
 8007c80:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007c82:	9b02      	ldr	r3, [sp, #8]
 8007c84:	f003 0301 	and.w	r3, r3, #1
 8007c88:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c8a:	9b07      	ldr	r3, [sp, #28]
 8007c8c:	4621      	mov	r1, r4
 8007c8e:	3b01      	subs	r3, #1
 8007c90:	4648      	mov	r0, r9
 8007c92:	9302      	str	r3, [sp, #8]
 8007c94:	f7ff fa96 	bl	80071c4 <quorem>
 8007c98:	4639      	mov	r1, r7
 8007c9a:	9008      	str	r0, [sp, #32]
 8007c9c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007ca0:	4648      	mov	r0, r9
 8007ca2:	f000 ff37 	bl	8008b14 <__mcmp>
 8007ca6:	462a      	mov	r2, r5
 8007ca8:	9009      	str	r0, [sp, #36]	@ 0x24
 8007caa:	4621      	mov	r1, r4
 8007cac:	4658      	mov	r0, fp
 8007cae:	f000 ff4d 	bl	8008b4c <__mdiff>
 8007cb2:	68c2      	ldr	r2, [r0, #12]
 8007cb4:	4606      	mov	r6, r0
 8007cb6:	bb02      	cbnz	r2, 8007cfa <_dtoa_r+0xa22>
 8007cb8:	4601      	mov	r1, r0
 8007cba:	4648      	mov	r0, r9
 8007cbc:	f000 ff2a 	bl	8008b14 <__mcmp>
 8007cc0:	4602      	mov	r2, r0
 8007cc2:	4631      	mov	r1, r6
 8007cc4:	4658      	mov	r0, fp
 8007cc6:	920c      	str	r2, [sp, #48]	@ 0x30
 8007cc8:	f000 fca2 	bl	8008610 <_Bfree>
 8007ccc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007cce:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007cd0:	9e07      	ldr	r6, [sp, #28]
 8007cd2:	ea43 0102 	orr.w	r1, r3, r2
 8007cd6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007cd8:	4319      	orrs	r1, r3
 8007cda:	d110      	bne.n	8007cfe <_dtoa_r+0xa26>
 8007cdc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007ce0:	d029      	beq.n	8007d36 <_dtoa_r+0xa5e>
 8007ce2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	dd02      	ble.n	8007cee <_dtoa_r+0xa16>
 8007ce8:	9b08      	ldr	r3, [sp, #32]
 8007cea:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007cee:	9b02      	ldr	r3, [sp, #8]
 8007cf0:	f883 8000 	strb.w	r8, [r3]
 8007cf4:	e63b      	b.n	800796e <_dtoa_r+0x696>
 8007cf6:	4628      	mov	r0, r5
 8007cf8:	e7bb      	b.n	8007c72 <_dtoa_r+0x99a>
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	e7e1      	b.n	8007cc2 <_dtoa_r+0x9ea>
 8007cfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	db04      	blt.n	8007d0e <_dtoa_r+0xa36>
 8007d04:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8007d06:	430b      	orrs	r3, r1
 8007d08:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007d0a:	430b      	orrs	r3, r1
 8007d0c:	d120      	bne.n	8007d50 <_dtoa_r+0xa78>
 8007d0e:	2a00      	cmp	r2, #0
 8007d10:	dded      	ble.n	8007cee <_dtoa_r+0xa16>
 8007d12:	4649      	mov	r1, r9
 8007d14:	2201      	movs	r2, #1
 8007d16:	4658      	mov	r0, fp
 8007d18:	f000 fe90 	bl	8008a3c <__lshift>
 8007d1c:	4621      	mov	r1, r4
 8007d1e:	4681      	mov	r9, r0
 8007d20:	f000 fef8 	bl	8008b14 <__mcmp>
 8007d24:	2800      	cmp	r0, #0
 8007d26:	dc03      	bgt.n	8007d30 <_dtoa_r+0xa58>
 8007d28:	d1e1      	bne.n	8007cee <_dtoa_r+0xa16>
 8007d2a:	f018 0f01 	tst.w	r8, #1
 8007d2e:	d0de      	beq.n	8007cee <_dtoa_r+0xa16>
 8007d30:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007d34:	d1d8      	bne.n	8007ce8 <_dtoa_r+0xa10>
 8007d36:	2339      	movs	r3, #57	@ 0x39
 8007d38:	9a02      	ldr	r2, [sp, #8]
 8007d3a:	7013      	strb	r3, [r2, #0]
 8007d3c:	4633      	mov	r3, r6
 8007d3e:	461e      	mov	r6, r3
 8007d40:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007d44:	3b01      	subs	r3, #1
 8007d46:	2a39      	cmp	r2, #57	@ 0x39
 8007d48:	d052      	beq.n	8007df0 <_dtoa_r+0xb18>
 8007d4a:	3201      	adds	r2, #1
 8007d4c:	701a      	strb	r2, [r3, #0]
 8007d4e:	e60e      	b.n	800796e <_dtoa_r+0x696>
 8007d50:	2a00      	cmp	r2, #0
 8007d52:	dd07      	ble.n	8007d64 <_dtoa_r+0xa8c>
 8007d54:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007d58:	d0ed      	beq.n	8007d36 <_dtoa_r+0xa5e>
 8007d5a:	9a02      	ldr	r2, [sp, #8]
 8007d5c:	f108 0301 	add.w	r3, r8, #1
 8007d60:	7013      	strb	r3, [r2, #0]
 8007d62:	e604      	b.n	800796e <_dtoa_r+0x696>
 8007d64:	9b07      	ldr	r3, [sp, #28]
 8007d66:	9a07      	ldr	r2, [sp, #28]
 8007d68:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007d6c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d028      	beq.n	8007dc4 <_dtoa_r+0xaec>
 8007d72:	4649      	mov	r1, r9
 8007d74:	2300      	movs	r3, #0
 8007d76:	220a      	movs	r2, #10
 8007d78:	4658      	mov	r0, fp
 8007d7a:	f000 fc6b 	bl	8008654 <__multadd>
 8007d7e:	42af      	cmp	r7, r5
 8007d80:	4681      	mov	r9, r0
 8007d82:	f04f 0300 	mov.w	r3, #0
 8007d86:	f04f 020a 	mov.w	r2, #10
 8007d8a:	4639      	mov	r1, r7
 8007d8c:	4658      	mov	r0, fp
 8007d8e:	d107      	bne.n	8007da0 <_dtoa_r+0xac8>
 8007d90:	f000 fc60 	bl	8008654 <__multadd>
 8007d94:	4607      	mov	r7, r0
 8007d96:	4605      	mov	r5, r0
 8007d98:	9b07      	ldr	r3, [sp, #28]
 8007d9a:	3301      	adds	r3, #1
 8007d9c:	9307      	str	r3, [sp, #28]
 8007d9e:	e774      	b.n	8007c8a <_dtoa_r+0x9b2>
 8007da0:	f000 fc58 	bl	8008654 <__multadd>
 8007da4:	4629      	mov	r1, r5
 8007da6:	4607      	mov	r7, r0
 8007da8:	2300      	movs	r3, #0
 8007daa:	220a      	movs	r2, #10
 8007dac:	4658      	mov	r0, fp
 8007dae:	f000 fc51 	bl	8008654 <__multadd>
 8007db2:	4605      	mov	r5, r0
 8007db4:	e7f0      	b.n	8007d98 <_dtoa_r+0xac0>
 8007db6:	9b08      	ldr	r3, [sp, #32]
 8007db8:	2700      	movs	r7, #0
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	bfcc      	ite	gt
 8007dbe:	461e      	movgt	r6, r3
 8007dc0:	2601      	movle	r6, #1
 8007dc2:	4456      	add	r6, sl
 8007dc4:	4649      	mov	r1, r9
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	4658      	mov	r0, fp
 8007dca:	f000 fe37 	bl	8008a3c <__lshift>
 8007dce:	4621      	mov	r1, r4
 8007dd0:	4681      	mov	r9, r0
 8007dd2:	f000 fe9f 	bl	8008b14 <__mcmp>
 8007dd6:	2800      	cmp	r0, #0
 8007dd8:	dcb0      	bgt.n	8007d3c <_dtoa_r+0xa64>
 8007dda:	d102      	bne.n	8007de2 <_dtoa_r+0xb0a>
 8007ddc:	f018 0f01 	tst.w	r8, #1
 8007de0:	d1ac      	bne.n	8007d3c <_dtoa_r+0xa64>
 8007de2:	4633      	mov	r3, r6
 8007de4:	461e      	mov	r6, r3
 8007de6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007dea:	2a30      	cmp	r2, #48	@ 0x30
 8007dec:	d0fa      	beq.n	8007de4 <_dtoa_r+0xb0c>
 8007dee:	e5be      	b.n	800796e <_dtoa_r+0x696>
 8007df0:	459a      	cmp	sl, r3
 8007df2:	d1a4      	bne.n	8007d3e <_dtoa_r+0xa66>
 8007df4:	9b04      	ldr	r3, [sp, #16]
 8007df6:	3301      	adds	r3, #1
 8007df8:	9304      	str	r3, [sp, #16]
 8007dfa:	2331      	movs	r3, #49	@ 0x31
 8007dfc:	f88a 3000 	strb.w	r3, [sl]
 8007e00:	e5b5      	b.n	800796e <_dtoa_r+0x696>
 8007e02:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007e04:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007e64 <_dtoa_r+0xb8c>
 8007e08:	b11b      	cbz	r3, 8007e12 <_dtoa_r+0xb3a>
 8007e0a:	f10a 0308 	add.w	r3, sl, #8
 8007e0e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007e10:	6013      	str	r3, [r2, #0]
 8007e12:	4650      	mov	r0, sl
 8007e14:	b017      	add	sp, #92	@ 0x5c
 8007e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e1a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007e1c:	2b01      	cmp	r3, #1
 8007e1e:	f77f ae3d 	ble.w	8007a9c <_dtoa_r+0x7c4>
 8007e22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e24:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e26:	2001      	movs	r0, #1
 8007e28:	e65b      	b.n	8007ae2 <_dtoa_r+0x80a>
 8007e2a:	9b08      	ldr	r3, [sp, #32]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	f77f aed6 	ble.w	8007bde <_dtoa_r+0x906>
 8007e32:	4656      	mov	r6, sl
 8007e34:	4621      	mov	r1, r4
 8007e36:	4648      	mov	r0, r9
 8007e38:	f7ff f9c4 	bl	80071c4 <quorem>
 8007e3c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007e40:	9b08      	ldr	r3, [sp, #32]
 8007e42:	f806 8b01 	strb.w	r8, [r6], #1
 8007e46:	eba6 020a 	sub.w	r2, r6, sl
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	ddb3      	ble.n	8007db6 <_dtoa_r+0xade>
 8007e4e:	4649      	mov	r1, r9
 8007e50:	2300      	movs	r3, #0
 8007e52:	220a      	movs	r2, #10
 8007e54:	4658      	mov	r0, fp
 8007e56:	f000 fbfd 	bl	8008654 <__multadd>
 8007e5a:	4681      	mov	r9, r0
 8007e5c:	e7ea      	b.n	8007e34 <_dtoa_r+0xb5c>
 8007e5e:	bf00      	nop
 8007e60:	0800a6a8 	.word	0x0800a6a8
 8007e64:	0800a62c 	.word	0x0800a62c

08007e68 <_free_r>:
 8007e68:	b538      	push	{r3, r4, r5, lr}
 8007e6a:	4605      	mov	r5, r0
 8007e6c:	2900      	cmp	r1, #0
 8007e6e:	d040      	beq.n	8007ef2 <_free_r+0x8a>
 8007e70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e74:	1f0c      	subs	r4, r1, #4
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	bfb8      	it	lt
 8007e7a:	18e4      	addlt	r4, r4, r3
 8007e7c:	f7fd fd4a 	bl	8005914 <__malloc_lock>
 8007e80:	4a1c      	ldr	r2, [pc, #112]	@ (8007ef4 <_free_r+0x8c>)
 8007e82:	6813      	ldr	r3, [r2, #0]
 8007e84:	b933      	cbnz	r3, 8007e94 <_free_r+0x2c>
 8007e86:	6063      	str	r3, [r4, #4]
 8007e88:	6014      	str	r4, [r2, #0]
 8007e8a:	4628      	mov	r0, r5
 8007e8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e90:	f7fd bd46 	b.w	8005920 <__malloc_unlock>
 8007e94:	42a3      	cmp	r3, r4
 8007e96:	d908      	bls.n	8007eaa <_free_r+0x42>
 8007e98:	6820      	ldr	r0, [r4, #0]
 8007e9a:	1821      	adds	r1, r4, r0
 8007e9c:	428b      	cmp	r3, r1
 8007e9e:	bf01      	itttt	eq
 8007ea0:	6819      	ldreq	r1, [r3, #0]
 8007ea2:	685b      	ldreq	r3, [r3, #4]
 8007ea4:	1809      	addeq	r1, r1, r0
 8007ea6:	6021      	streq	r1, [r4, #0]
 8007ea8:	e7ed      	b.n	8007e86 <_free_r+0x1e>
 8007eaa:	461a      	mov	r2, r3
 8007eac:	685b      	ldr	r3, [r3, #4]
 8007eae:	b10b      	cbz	r3, 8007eb4 <_free_r+0x4c>
 8007eb0:	42a3      	cmp	r3, r4
 8007eb2:	d9fa      	bls.n	8007eaa <_free_r+0x42>
 8007eb4:	6811      	ldr	r1, [r2, #0]
 8007eb6:	1850      	adds	r0, r2, r1
 8007eb8:	42a0      	cmp	r0, r4
 8007eba:	d10b      	bne.n	8007ed4 <_free_r+0x6c>
 8007ebc:	6820      	ldr	r0, [r4, #0]
 8007ebe:	4401      	add	r1, r0
 8007ec0:	1850      	adds	r0, r2, r1
 8007ec2:	4283      	cmp	r3, r0
 8007ec4:	6011      	str	r1, [r2, #0]
 8007ec6:	d1e0      	bne.n	8007e8a <_free_r+0x22>
 8007ec8:	6818      	ldr	r0, [r3, #0]
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	4408      	add	r0, r1
 8007ece:	6010      	str	r0, [r2, #0]
 8007ed0:	6053      	str	r3, [r2, #4]
 8007ed2:	e7da      	b.n	8007e8a <_free_r+0x22>
 8007ed4:	d902      	bls.n	8007edc <_free_r+0x74>
 8007ed6:	230c      	movs	r3, #12
 8007ed8:	602b      	str	r3, [r5, #0]
 8007eda:	e7d6      	b.n	8007e8a <_free_r+0x22>
 8007edc:	6820      	ldr	r0, [r4, #0]
 8007ede:	1821      	adds	r1, r4, r0
 8007ee0:	428b      	cmp	r3, r1
 8007ee2:	bf01      	itttt	eq
 8007ee4:	6819      	ldreq	r1, [r3, #0]
 8007ee6:	685b      	ldreq	r3, [r3, #4]
 8007ee8:	1809      	addeq	r1, r1, r0
 8007eea:	6021      	streq	r1, [r4, #0]
 8007eec:	6063      	str	r3, [r4, #4]
 8007eee:	6054      	str	r4, [r2, #4]
 8007ef0:	e7cb      	b.n	8007e8a <_free_r+0x22>
 8007ef2:	bd38      	pop	{r3, r4, r5, pc}
 8007ef4:	20000580 	.word	0x20000580

08007ef8 <rshift>:
 8007ef8:	6903      	ldr	r3, [r0, #16]
 8007efa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007efe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007f02:	f100 0414 	add.w	r4, r0, #20
 8007f06:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007f0a:	dd46      	ble.n	8007f9a <rshift+0xa2>
 8007f0c:	f011 011f 	ands.w	r1, r1, #31
 8007f10:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007f14:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007f18:	d10c      	bne.n	8007f34 <rshift+0x3c>
 8007f1a:	4629      	mov	r1, r5
 8007f1c:	f100 0710 	add.w	r7, r0, #16
 8007f20:	42b1      	cmp	r1, r6
 8007f22:	d335      	bcc.n	8007f90 <rshift+0x98>
 8007f24:	1a9b      	subs	r3, r3, r2
 8007f26:	009b      	lsls	r3, r3, #2
 8007f28:	1eea      	subs	r2, r5, #3
 8007f2a:	4296      	cmp	r6, r2
 8007f2c:	bf38      	it	cc
 8007f2e:	2300      	movcc	r3, #0
 8007f30:	4423      	add	r3, r4
 8007f32:	e015      	b.n	8007f60 <rshift+0x68>
 8007f34:	46a1      	mov	r9, r4
 8007f36:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007f3a:	f1c1 0820 	rsb	r8, r1, #32
 8007f3e:	40cf      	lsrs	r7, r1
 8007f40:	f105 0e04 	add.w	lr, r5, #4
 8007f44:	4576      	cmp	r6, lr
 8007f46:	46f4      	mov	ip, lr
 8007f48:	d816      	bhi.n	8007f78 <rshift+0x80>
 8007f4a:	1a9a      	subs	r2, r3, r2
 8007f4c:	0092      	lsls	r2, r2, #2
 8007f4e:	3a04      	subs	r2, #4
 8007f50:	3501      	adds	r5, #1
 8007f52:	42ae      	cmp	r6, r5
 8007f54:	bf38      	it	cc
 8007f56:	2200      	movcc	r2, #0
 8007f58:	18a3      	adds	r3, r4, r2
 8007f5a:	50a7      	str	r7, [r4, r2]
 8007f5c:	b107      	cbz	r7, 8007f60 <rshift+0x68>
 8007f5e:	3304      	adds	r3, #4
 8007f60:	42a3      	cmp	r3, r4
 8007f62:	eba3 0204 	sub.w	r2, r3, r4
 8007f66:	bf08      	it	eq
 8007f68:	2300      	moveq	r3, #0
 8007f6a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007f6e:	6102      	str	r2, [r0, #16]
 8007f70:	bf08      	it	eq
 8007f72:	6143      	streq	r3, [r0, #20]
 8007f74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f78:	f8dc c000 	ldr.w	ip, [ip]
 8007f7c:	fa0c fc08 	lsl.w	ip, ip, r8
 8007f80:	ea4c 0707 	orr.w	r7, ip, r7
 8007f84:	f849 7b04 	str.w	r7, [r9], #4
 8007f88:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007f8c:	40cf      	lsrs	r7, r1
 8007f8e:	e7d9      	b.n	8007f44 <rshift+0x4c>
 8007f90:	f851 cb04 	ldr.w	ip, [r1], #4
 8007f94:	f847 cf04 	str.w	ip, [r7, #4]!
 8007f98:	e7c2      	b.n	8007f20 <rshift+0x28>
 8007f9a:	4623      	mov	r3, r4
 8007f9c:	e7e0      	b.n	8007f60 <rshift+0x68>

08007f9e <__hexdig_fun>:
 8007f9e:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8007fa2:	2b09      	cmp	r3, #9
 8007fa4:	d802      	bhi.n	8007fac <__hexdig_fun+0xe>
 8007fa6:	3820      	subs	r0, #32
 8007fa8:	b2c0      	uxtb	r0, r0
 8007faa:	4770      	bx	lr
 8007fac:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8007fb0:	2b05      	cmp	r3, #5
 8007fb2:	d801      	bhi.n	8007fb8 <__hexdig_fun+0x1a>
 8007fb4:	3847      	subs	r0, #71	@ 0x47
 8007fb6:	e7f7      	b.n	8007fa8 <__hexdig_fun+0xa>
 8007fb8:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8007fbc:	2b05      	cmp	r3, #5
 8007fbe:	d801      	bhi.n	8007fc4 <__hexdig_fun+0x26>
 8007fc0:	3827      	subs	r0, #39	@ 0x27
 8007fc2:	e7f1      	b.n	8007fa8 <__hexdig_fun+0xa>
 8007fc4:	2000      	movs	r0, #0
 8007fc6:	4770      	bx	lr

08007fc8 <__gethex>:
 8007fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fcc:	468a      	mov	sl, r1
 8007fce:	4690      	mov	r8, r2
 8007fd0:	b085      	sub	sp, #20
 8007fd2:	9302      	str	r3, [sp, #8]
 8007fd4:	680b      	ldr	r3, [r1, #0]
 8007fd6:	9001      	str	r0, [sp, #4]
 8007fd8:	1c9c      	adds	r4, r3, #2
 8007fda:	46a1      	mov	r9, r4
 8007fdc:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007fe0:	2830      	cmp	r0, #48	@ 0x30
 8007fe2:	d0fa      	beq.n	8007fda <__gethex+0x12>
 8007fe4:	eba9 0303 	sub.w	r3, r9, r3
 8007fe8:	f1a3 0b02 	sub.w	fp, r3, #2
 8007fec:	f7ff ffd7 	bl	8007f9e <__hexdig_fun>
 8007ff0:	4605      	mov	r5, r0
 8007ff2:	2800      	cmp	r0, #0
 8007ff4:	d168      	bne.n	80080c8 <__gethex+0x100>
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	4648      	mov	r0, r9
 8007ffa:	499f      	ldr	r1, [pc, #636]	@ (8008278 <__gethex+0x2b0>)
 8007ffc:	f7ff f825 	bl	800704a <strncmp>
 8008000:	4607      	mov	r7, r0
 8008002:	2800      	cmp	r0, #0
 8008004:	d167      	bne.n	80080d6 <__gethex+0x10e>
 8008006:	f899 0001 	ldrb.w	r0, [r9, #1]
 800800a:	4626      	mov	r6, r4
 800800c:	f7ff ffc7 	bl	8007f9e <__hexdig_fun>
 8008010:	2800      	cmp	r0, #0
 8008012:	d062      	beq.n	80080da <__gethex+0x112>
 8008014:	4623      	mov	r3, r4
 8008016:	7818      	ldrb	r0, [r3, #0]
 8008018:	4699      	mov	r9, r3
 800801a:	2830      	cmp	r0, #48	@ 0x30
 800801c:	f103 0301 	add.w	r3, r3, #1
 8008020:	d0f9      	beq.n	8008016 <__gethex+0x4e>
 8008022:	f7ff ffbc 	bl	8007f9e <__hexdig_fun>
 8008026:	fab0 f580 	clz	r5, r0
 800802a:	f04f 0b01 	mov.w	fp, #1
 800802e:	096d      	lsrs	r5, r5, #5
 8008030:	464a      	mov	r2, r9
 8008032:	4616      	mov	r6, r2
 8008034:	7830      	ldrb	r0, [r6, #0]
 8008036:	3201      	adds	r2, #1
 8008038:	f7ff ffb1 	bl	8007f9e <__hexdig_fun>
 800803c:	2800      	cmp	r0, #0
 800803e:	d1f8      	bne.n	8008032 <__gethex+0x6a>
 8008040:	2201      	movs	r2, #1
 8008042:	4630      	mov	r0, r6
 8008044:	498c      	ldr	r1, [pc, #560]	@ (8008278 <__gethex+0x2b0>)
 8008046:	f7ff f800 	bl	800704a <strncmp>
 800804a:	2800      	cmp	r0, #0
 800804c:	d13f      	bne.n	80080ce <__gethex+0x106>
 800804e:	b944      	cbnz	r4, 8008062 <__gethex+0x9a>
 8008050:	1c74      	adds	r4, r6, #1
 8008052:	4622      	mov	r2, r4
 8008054:	4616      	mov	r6, r2
 8008056:	7830      	ldrb	r0, [r6, #0]
 8008058:	3201      	adds	r2, #1
 800805a:	f7ff ffa0 	bl	8007f9e <__hexdig_fun>
 800805e:	2800      	cmp	r0, #0
 8008060:	d1f8      	bne.n	8008054 <__gethex+0x8c>
 8008062:	1ba4      	subs	r4, r4, r6
 8008064:	00a7      	lsls	r7, r4, #2
 8008066:	7833      	ldrb	r3, [r6, #0]
 8008068:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800806c:	2b50      	cmp	r3, #80	@ 0x50
 800806e:	d13e      	bne.n	80080ee <__gethex+0x126>
 8008070:	7873      	ldrb	r3, [r6, #1]
 8008072:	2b2b      	cmp	r3, #43	@ 0x2b
 8008074:	d033      	beq.n	80080de <__gethex+0x116>
 8008076:	2b2d      	cmp	r3, #45	@ 0x2d
 8008078:	d034      	beq.n	80080e4 <__gethex+0x11c>
 800807a:	2400      	movs	r4, #0
 800807c:	1c71      	adds	r1, r6, #1
 800807e:	7808      	ldrb	r0, [r1, #0]
 8008080:	f7ff ff8d 	bl	8007f9e <__hexdig_fun>
 8008084:	1e43      	subs	r3, r0, #1
 8008086:	b2db      	uxtb	r3, r3
 8008088:	2b18      	cmp	r3, #24
 800808a:	d830      	bhi.n	80080ee <__gethex+0x126>
 800808c:	f1a0 0210 	sub.w	r2, r0, #16
 8008090:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008094:	f7ff ff83 	bl	8007f9e <__hexdig_fun>
 8008098:	f100 3cff 	add.w	ip, r0, #4294967295
 800809c:	fa5f fc8c 	uxtb.w	ip, ip
 80080a0:	f1bc 0f18 	cmp.w	ip, #24
 80080a4:	f04f 030a 	mov.w	r3, #10
 80080a8:	d91e      	bls.n	80080e8 <__gethex+0x120>
 80080aa:	b104      	cbz	r4, 80080ae <__gethex+0xe6>
 80080ac:	4252      	negs	r2, r2
 80080ae:	4417      	add	r7, r2
 80080b0:	f8ca 1000 	str.w	r1, [sl]
 80080b4:	b1ed      	cbz	r5, 80080f2 <__gethex+0x12a>
 80080b6:	f1bb 0f00 	cmp.w	fp, #0
 80080ba:	bf0c      	ite	eq
 80080bc:	2506      	moveq	r5, #6
 80080be:	2500      	movne	r5, #0
 80080c0:	4628      	mov	r0, r5
 80080c2:	b005      	add	sp, #20
 80080c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080c8:	2500      	movs	r5, #0
 80080ca:	462c      	mov	r4, r5
 80080cc:	e7b0      	b.n	8008030 <__gethex+0x68>
 80080ce:	2c00      	cmp	r4, #0
 80080d0:	d1c7      	bne.n	8008062 <__gethex+0x9a>
 80080d2:	4627      	mov	r7, r4
 80080d4:	e7c7      	b.n	8008066 <__gethex+0x9e>
 80080d6:	464e      	mov	r6, r9
 80080d8:	462f      	mov	r7, r5
 80080da:	2501      	movs	r5, #1
 80080dc:	e7c3      	b.n	8008066 <__gethex+0x9e>
 80080de:	2400      	movs	r4, #0
 80080e0:	1cb1      	adds	r1, r6, #2
 80080e2:	e7cc      	b.n	800807e <__gethex+0xb6>
 80080e4:	2401      	movs	r4, #1
 80080e6:	e7fb      	b.n	80080e0 <__gethex+0x118>
 80080e8:	fb03 0002 	mla	r0, r3, r2, r0
 80080ec:	e7ce      	b.n	800808c <__gethex+0xc4>
 80080ee:	4631      	mov	r1, r6
 80080f0:	e7de      	b.n	80080b0 <__gethex+0xe8>
 80080f2:	4629      	mov	r1, r5
 80080f4:	eba6 0309 	sub.w	r3, r6, r9
 80080f8:	3b01      	subs	r3, #1
 80080fa:	2b07      	cmp	r3, #7
 80080fc:	dc0a      	bgt.n	8008114 <__gethex+0x14c>
 80080fe:	9801      	ldr	r0, [sp, #4]
 8008100:	f000 fa46 	bl	8008590 <_Balloc>
 8008104:	4604      	mov	r4, r0
 8008106:	b940      	cbnz	r0, 800811a <__gethex+0x152>
 8008108:	4602      	mov	r2, r0
 800810a:	21e4      	movs	r1, #228	@ 0xe4
 800810c:	4b5b      	ldr	r3, [pc, #364]	@ (800827c <__gethex+0x2b4>)
 800810e:	485c      	ldr	r0, [pc, #368]	@ (8008280 <__gethex+0x2b8>)
 8008110:	f001 f90a 	bl	8009328 <__assert_func>
 8008114:	3101      	adds	r1, #1
 8008116:	105b      	asrs	r3, r3, #1
 8008118:	e7ef      	b.n	80080fa <__gethex+0x132>
 800811a:	2300      	movs	r3, #0
 800811c:	f100 0a14 	add.w	sl, r0, #20
 8008120:	4655      	mov	r5, sl
 8008122:	469b      	mov	fp, r3
 8008124:	45b1      	cmp	r9, r6
 8008126:	d337      	bcc.n	8008198 <__gethex+0x1d0>
 8008128:	f845 bb04 	str.w	fp, [r5], #4
 800812c:	eba5 050a 	sub.w	r5, r5, sl
 8008130:	10ad      	asrs	r5, r5, #2
 8008132:	6125      	str	r5, [r4, #16]
 8008134:	4658      	mov	r0, fp
 8008136:	f000 fb1d 	bl	8008774 <__hi0bits>
 800813a:	016d      	lsls	r5, r5, #5
 800813c:	f8d8 6000 	ldr.w	r6, [r8]
 8008140:	1a2d      	subs	r5, r5, r0
 8008142:	42b5      	cmp	r5, r6
 8008144:	dd54      	ble.n	80081f0 <__gethex+0x228>
 8008146:	1bad      	subs	r5, r5, r6
 8008148:	4629      	mov	r1, r5
 800814a:	4620      	mov	r0, r4
 800814c:	f000 fea5 	bl	8008e9a <__any_on>
 8008150:	4681      	mov	r9, r0
 8008152:	b178      	cbz	r0, 8008174 <__gethex+0x1ac>
 8008154:	f04f 0901 	mov.w	r9, #1
 8008158:	1e6b      	subs	r3, r5, #1
 800815a:	1159      	asrs	r1, r3, #5
 800815c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008160:	f003 021f 	and.w	r2, r3, #31
 8008164:	fa09 f202 	lsl.w	r2, r9, r2
 8008168:	420a      	tst	r2, r1
 800816a:	d003      	beq.n	8008174 <__gethex+0x1ac>
 800816c:	454b      	cmp	r3, r9
 800816e:	dc36      	bgt.n	80081de <__gethex+0x216>
 8008170:	f04f 0902 	mov.w	r9, #2
 8008174:	4629      	mov	r1, r5
 8008176:	4620      	mov	r0, r4
 8008178:	f7ff febe 	bl	8007ef8 <rshift>
 800817c:	442f      	add	r7, r5
 800817e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008182:	42bb      	cmp	r3, r7
 8008184:	da42      	bge.n	800820c <__gethex+0x244>
 8008186:	4621      	mov	r1, r4
 8008188:	9801      	ldr	r0, [sp, #4]
 800818a:	f000 fa41 	bl	8008610 <_Bfree>
 800818e:	2300      	movs	r3, #0
 8008190:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008192:	25a3      	movs	r5, #163	@ 0xa3
 8008194:	6013      	str	r3, [r2, #0]
 8008196:	e793      	b.n	80080c0 <__gethex+0xf8>
 8008198:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800819c:	2a2e      	cmp	r2, #46	@ 0x2e
 800819e:	d012      	beq.n	80081c6 <__gethex+0x1fe>
 80081a0:	2b20      	cmp	r3, #32
 80081a2:	d104      	bne.n	80081ae <__gethex+0x1e6>
 80081a4:	f845 bb04 	str.w	fp, [r5], #4
 80081a8:	f04f 0b00 	mov.w	fp, #0
 80081ac:	465b      	mov	r3, fp
 80081ae:	7830      	ldrb	r0, [r6, #0]
 80081b0:	9303      	str	r3, [sp, #12]
 80081b2:	f7ff fef4 	bl	8007f9e <__hexdig_fun>
 80081b6:	9b03      	ldr	r3, [sp, #12]
 80081b8:	f000 000f 	and.w	r0, r0, #15
 80081bc:	4098      	lsls	r0, r3
 80081be:	ea4b 0b00 	orr.w	fp, fp, r0
 80081c2:	3304      	adds	r3, #4
 80081c4:	e7ae      	b.n	8008124 <__gethex+0x15c>
 80081c6:	45b1      	cmp	r9, r6
 80081c8:	d8ea      	bhi.n	80081a0 <__gethex+0x1d8>
 80081ca:	2201      	movs	r2, #1
 80081cc:	4630      	mov	r0, r6
 80081ce:	492a      	ldr	r1, [pc, #168]	@ (8008278 <__gethex+0x2b0>)
 80081d0:	9303      	str	r3, [sp, #12]
 80081d2:	f7fe ff3a 	bl	800704a <strncmp>
 80081d6:	9b03      	ldr	r3, [sp, #12]
 80081d8:	2800      	cmp	r0, #0
 80081da:	d1e1      	bne.n	80081a0 <__gethex+0x1d8>
 80081dc:	e7a2      	b.n	8008124 <__gethex+0x15c>
 80081de:	4620      	mov	r0, r4
 80081e0:	1ea9      	subs	r1, r5, #2
 80081e2:	f000 fe5a 	bl	8008e9a <__any_on>
 80081e6:	2800      	cmp	r0, #0
 80081e8:	d0c2      	beq.n	8008170 <__gethex+0x1a8>
 80081ea:	f04f 0903 	mov.w	r9, #3
 80081ee:	e7c1      	b.n	8008174 <__gethex+0x1ac>
 80081f0:	da09      	bge.n	8008206 <__gethex+0x23e>
 80081f2:	1b75      	subs	r5, r6, r5
 80081f4:	4621      	mov	r1, r4
 80081f6:	462a      	mov	r2, r5
 80081f8:	9801      	ldr	r0, [sp, #4]
 80081fa:	f000 fc1f 	bl	8008a3c <__lshift>
 80081fe:	4604      	mov	r4, r0
 8008200:	1b7f      	subs	r7, r7, r5
 8008202:	f100 0a14 	add.w	sl, r0, #20
 8008206:	f04f 0900 	mov.w	r9, #0
 800820a:	e7b8      	b.n	800817e <__gethex+0x1b6>
 800820c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008210:	42bd      	cmp	r5, r7
 8008212:	dd6f      	ble.n	80082f4 <__gethex+0x32c>
 8008214:	1bed      	subs	r5, r5, r7
 8008216:	42ae      	cmp	r6, r5
 8008218:	dc34      	bgt.n	8008284 <__gethex+0x2bc>
 800821a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800821e:	2b02      	cmp	r3, #2
 8008220:	d022      	beq.n	8008268 <__gethex+0x2a0>
 8008222:	2b03      	cmp	r3, #3
 8008224:	d024      	beq.n	8008270 <__gethex+0x2a8>
 8008226:	2b01      	cmp	r3, #1
 8008228:	d115      	bne.n	8008256 <__gethex+0x28e>
 800822a:	42ae      	cmp	r6, r5
 800822c:	d113      	bne.n	8008256 <__gethex+0x28e>
 800822e:	2e01      	cmp	r6, #1
 8008230:	d10b      	bne.n	800824a <__gethex+0x282>
 8008232:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008236:	9a02      	ldr	r2, [sp, #8]
 8008238:	2562      	movs	r5, #98	@ 0x62
 800823a:	6013      	str	r3, [r2, #0]
 800823c:	2301      	movs	r3, #1
 800823e:	6123      	str	r3, [r4, #16]
 8008240:	f8ca 3000 	str.w	r3, [sl]
 8008244:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008246:	601c      	str	r4, [r3, #0]
 8008248:	e73a      	b.n	80080c0 <__gethex+0xf8>
 800824a:	4620      	mov	r0, r4
 800824c:	1e71      	subs	r1, r6, #1
 800824e:	f000 fe24 	bl	8008e9a <__any_on>
 8008252:	2800      	cmp	r0, #0
 8008254:	d1ed      	bne.n	8008232 <__gethex+0x26a>
 8008256:	4621      	mov	r1, r4
 8008258:	9801      	ldr	r0, [sp, #4]
 800825a:	f000 f9d9 	bl	8008610 <_Bfree>
 800825e:	2300      	movs	r3, #0
 8008260:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008262:	2550      	movs	r5, #80	@ 0x50
 8008264:	6013      	str	r3, [r2, #0]
 8008266:	e72b      	b.n	80080c0 <__gethex+0xf8>
 8008268:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800826a:	2b00      	cmp	r3, #0
 800826c:	d1f3      	bne.n	8008256 <__gethex+0x28e>
 800826e:	e7e0      	b.n	8008232 <__gethex+0x26a>
 8008270:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008272:	2b00      	cmp	r3, #0
 8008274:	d1dd      	bne.n	8008232 <__gethex+0x26a>
 8008276:	e7ee      	b.n	8008256 <__gethex+0x28e>
 8008278:	0800a59c 	.word	0x0800a59c
 800827c:	0800a6a8 	.word	0x0800a6a8
 8008280:	0800a6b9 	.word	0x0800a6b9
 8008284:	1e6f      	subs	r7, r5, #1
 8008286:	f1b9 0f00 	cmp.w	r9, #0
 800828a:	d130      	bne.n	80082ee <__gethex+0x326>
 800828c:	b127      	cbz	r7, 8008298 <__gethex+0x2d0>
 800828e:	4639      	mov	r1, r7
 8008290:	4620      	mov	r0, r4
 8008292:	f000 fe02 	bl	8008e9a <__any_on>
 8008296:	4681      	mov	r9, r0
 8008298:	2301      	movs	r3, #1
 800829a:	4629      	mov	r1, r5
 800829c:	1b76      	subs	r6, r6, r5
 800829e:	2502      	movs	r5, #2
 80082a0:	117a      	asrs	r2, r7, #5
 80082a2:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80082a6:	f007 071f 	and.w	r7, r7, #31
 80082aa:	40bb      	lsls	r3, r7
 80082ac:	4213      	tst	r3, r2
 80082ae:	4620      	mov	r0, r4
 80082b0:	bf18      	it	ne
 80082b2:	f049 0902 	orrne.w	r9, r9, #2
 80082b6:	f7ff fe1f 	bl	8007ef8 <rshift>
 80082ba:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80082be:	f1b9 0f00 	cmp.w	r9, #0
 80082c2:	d047      	beq.n	8008354 <__gethex+0x38c>
 80082c4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80082c8:	2b02      	cmp	r3, #2
 80082ca:	d015      	beq.n	80082f8 <__gethex+0x330>
 80082cc:	2b03      	cmp	r3, #3
 80082ce:	d017      	beq.n	8008300 <__gethex+0x338>
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	d109      	bne.n	80082e8 <__gethex+0x320>
 80082d4:	f019 0f02 	tst.w	r9, #2
 80082d8:	d006      	beq.n	80082e8 <__gethex+0x320>
 80082da:	f8da 3000 	ldr.w	r3, [sl]
 80082de:	ea49 0903 	orr.w	r9, r9, r3
 80082e2:	f019 0f01 	tst.w	r9, #1
 80082e6:	d10e      	bne.n	8008306 <__gethex+0x33e>
 80082e8:	f045 0510 	orr.w	r5, r5, #16
 80082ec:	e032      	b.n	8008354 <__gethex+0x38c>
 80082ee:	f04f 0901 	mov.w	r9, #1
 80082f2:	e7d1      	b.n	8008298 <__gethex+0x2d0>
 80082f4:	2501      	movs	r5, #1
 80082f6:	e7e2      	b.n	80082be <__gethex+0x2f6>
 80082f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80082fa:	f1c3 0301 	rsb	r3, r3, #1
 80082fe:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008300:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008302:	2b00      	cmp	r3, #0
 8008304:	d0f0      	beq.n	80082e8 <__gethex+0x320>
 8008306:	f04f 0c00 	mov.w	ip, #0
 800830a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800830e:	f104 0314 	add.w	r3, r4, #20
 8008312:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008316:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800831a:	4618      	mov	r0, r3
 800831c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008320:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008324:	d01b      	beq.n	800835e <__gethex+0x396>
 8008326:	3201      	adds	r2, #1
 8008328:	6002      	str	r2, [r0, #0]
 800832a:	2d02      	cmp	r5, #2
 800832c:	f104 0314 	add.w	r3, r4, #20
 8008330:	d13c      	bne.n	80083ac <__gethex+0x3e4>
 8008332:	f8d8 2000 	ldr.w	r2, [r8]
 8008336:	3a01      	subs	r2, #1
 8008338:	42b2      	cmp	r2, r6
 800833a:	d109      	bne.n	8008350 <__gethex+0x388>
 800833c:	2201      	movs	r2, #1
 800833e:	1171      	asrs	r1, r6, #5
 8008340:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008344:	f006 061f 	and.w	r6, r6, #31
 8008348:	fa02 f606 	lsl.w	r6, r2, r6
 800834c:	421e      	tst	r6, r3
 800834e:	d13a      	bne.n	80083c6 <__gethex+0x3fe>
 8008350:	f045 0520 	orr.w	r5, r5, #32
 8008354:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008356:	601c      	str	r4, [r3, #0]
 8008358:	9b02      	ldr	r3, [sp, #8]
 800835a:	601f      	str	r7, [r3, #0]
 800835c:	e6b0      	b.n	80080c0 <__gethex+0xf8>
 800835e:	4299      	cmp	r1, r3
 8008360:	f843 cc04 	str.w	ip, [r3, #-4]
 8008364:	d8d9      	bhi.n	800831a <__gethex+0x352>
 8008366:	68a3      	ldr	r3, [r4, #8]
 8008368:	459b      	cmp	fp, r3
 800836a:	db17      	blt.n	800839c <__gethex+0x3d4>
 800836c:	6861      	ldr	r1, [r4, #4]
 800836e:	9801      	ldr	r0, [sp, #4]
 8008370:	3101      	adds	r1, #1
 8008372:	f000 f90d 	bl	8008590 <_Balloc>
 8008376:	4681      	mov	r9, r0
 8008378:	b918      	cbnz	r0, 8008382 <__gethex+0x3ba>
 800837a:	4602      	mov	r2, r0
 800837c:	2184      	movs	r1, #132	@ 0x84
 800837e:	4b19      	ldr	r3, [pc, #100]	@ (80083e4 <__gethex+0x41c>)
 8008380:	e6c5      	b.n	800810e <__gethex+0x146>
 8008382:	6922      	ldr	r2, [r4, #16]
 8008384:	f104 010c 	add.w	r1, r4, #12
 8008388:	3202      	adds	r2, #2
 800838a:	0092      	lsls	r2, r2, #2
 800838c:	300c      	adds	r0, #12
 800838e:	f7fe ff04 	bl	800719a <memcpy>
 8008392:	4621      	mov	r1, r4
 8008394:	9801      	ldr	r0, [sp, #4]
 8008396:	f000 f93b 	bl	8008610 <_Bfree>
 800839a:	464c      	mov	r4, r9
 800839c:	6923      	ldr	r3, [r4, #16]
 800839e:	1c5a      	adds	r2, r3, #1
 80083a0:	6122      	str	r2, [r4, #16]
 80083a2:	2201      	movs	r2, #1
 80083a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80083a8:	615a      	str	r2, [r3, #20]
 80083aa:	e7be      	b.n	800832a <__gethex+0x362>
 80083ac:	6922      	ldr	r2, [r4, #16]
 80083ae:	455a      	cmp	r2, fp
 80083b0:	dd0b      	ble.n	80083ca <__gethex+0x402>
 80083b2:	2101      	movs	r1, #1
 80083b4:	4620      	mov	r0, r4
 80083b6:	f7ff fd9f 	bl	8007ef8 <rshift>
 80083ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80083be:	3701      	adds	r7, #1
 80083c0:	42bb      	cmp	r3, r7
 80083c2:	f6ff aee0 	blt.w	8008186 <__gethex+0x1be>
 80083c6:	2501      	movs	r5, #1
 80083c8:	e7c2      	b.n	8008350 <__gethex+0x388>
 80083ca:	f016 061f 	ands.w	r6, r6, #31
 80083ce:	d0fa      	beq.n	80083c6 <__gethex+0x3fe>
 80083d0:	4453      	add	r3, sl
 80083d2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80083d6:	f000 f9cd 	bl	8008774 <__hi0bits>
 80083da:	f1c6 0620 	rsb	r6, r6, #32
 80083de:	42b0      	cmp	r0, r6
 80083e0:	dbe7      	blt.n	80083b2 <__gethex+0x3ea>
 80083e2:	e7f0      	b.n	80083c6 <__gethex+0x3fe>
 80083e4:	0800a6a8 	.word	0x0800a6a8

080083e8 <L_shift>:
 80083e8:	f1c2 0208 	rsb	r2, r2, #8
 80083ec:	0092      	lsls	r2, r2, #2
 80083ee:	b570      	push	{r4, r5, r6, lr}
 80083f0:	f1c2 0620 	rsb	r6, r2, #32
 80083f4:	6843      	ldr	r3, [r0, #4]
 80083f6:	6804      	ldr	r4, [r0, #0]
 80083f8:	fa03 f506 	lsl.w	r5, r3, r6
 80083fc:	432c      	orrs	r4, r5
 80083fe:	40d3      	lsrs	r3, r2
 8008400:	6004      	str	r4, [r0, #0]
 8008402:	f840 3f04 	str.w	r3, [r0, #4]!
 8008406:	4288      	cmp	r0, r1
 8008408:	d3f4      	bcc.n	80083f4 <L_shift+0xc>
 800840a:	bd70      	pop	{r4, r5, r6, pc}

0800840c <__match>:
 800840c:	b530      	push	{r4, r5, lr}
 800840e:	6803      	ldr	r3, [r0, #0]
 8008410:	3301      	adds	r3, #1
 8008412:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008416:	b914      	cbnz	r4, 800841e <__match+0x12>
 8008418:	6003      	str	r3, [r0, #0]
 800841a:	2001      	movs	r0, #1
 800841c:	bd30      	pop	{r4, r5, pc}
 800841e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008422:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8008426:	2d19      	cmp	r5, #25
 8008428:	bf98      	it	ls
 800842a:	3220      	addls	r2, #32
 800842c:	42a2      	cmp	r2, r4
 800842e:	d0f0      	beq.n	8008412 <__match+0x6>
 8008430:	2000      	movs	r0, #0
 8008432:	e7f3      	b.n	800841c <__match+0x10>

08008434 <__hexnan>:
 8008434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008438:	2500      	movs	r5, #0
 800843a:	680b      	ldr	r3, [r1, #0]
 800843c:	4682      	mov	sl, r0
 800843e:	115e      	asrs	r6, r3, #5
 8008440:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008444:	f013 031f 	ands.w	r3, r3, #31
 8008448:	bf18      	it	ne
 800844a:	3604      	addne	r6, #4
 800844c:	1f37      	subs	r7, r6, #4
 800844e:	4690      	mov	r8, r2
 8008450:	46b9      	mov	r9, r7
 8008452:	463c      	mov	r4, r7
 8008454:	46ab      	mov	fp, r5
 8008456:	b087      	sub	sp, #28
 8008458:	6801      	ldr	r1, [r0, #0]
 800845a:	9301      	str	r3, [sp, #4]
 800845c:	f846 5c04 	str.w	r5, [r6, #-4]
 8008460:	9502      	str	r5, [sp, #8]
 8008462:	784a      	ldrb	r2, [r1, #1]
 8008464:	1c4b      	adds	r3, r1, #1
 8008466:	9303      	str	r3, [sp, #12]
 8008468:	b342      	cbz	r2, 80084bc <__hexnan+0x88>
 800846a:	4610      	mov	r0, r2
 800846c:	9105      	str	r1, [sp, #20]
 800846e:	9204      	str	r2, [sp, #16]
 8008470:	f7ff fd95 	bl	8007f9e <__hexdig_fun>
 8008474:	2800      	cmp	r0, #0
 8008476:	d151      	bne.n	800851c <__hexnan+0xe8>
 8008478:	9a04      	ldr	r2, [sp, #16]
 800847a:	9905      	ldr	r1, [sp, #20]
 800847c:	2a20      	cmp	r2, #32
 800847e:	d818      	bhi.n	80084b2 <__hexnan+0x7e>
 8008480:	9b02      	ldr	r3, [sp, #8]
 8008482:	459b      	cmp	fp, r3
 8008484:	dd13      	ble.n	80084ae <__hexnan+0x7a>
 8008486:	454c      	cmp	r4, r9
 8008488:	d206      	bcs.n	8008498 <__hexnan+0x64>
 800848a:	2d07      	cmp	r5, #7
 800848c:	dc04      	bgt.n	8008498 <__hexnan+0x64>
 800848e:	462a      	mov	r2, r5
 8008490:	4649      	mov	r1, r9
 8008492:	4620      	mov	r0, r4
 8008494:	f7ff ffa8 	bl	80083e8 <L_shift>
 8008498:	4544      	cmp	r4, r8
 800849a:	d952      	bls.n	8008542 <__hexnan+0x10e>
 800849c:	2300      	movs	r3, #0
 800849e:	f1a4 0904 	sub.w	r9, r4, #4
 80084a2:	f844 3c04 	str.w	r3, [r4, #-4]
 80084a6:	461d      	mov	r5, r3
 80084a8:	464c      	mov	r4, r9
 80084aa:	f8cd b008 	str.w	fp, [sp, #8]
 80084ae:	9903      	ldr	r1, [sp, #12]
 80084b0:	e7d7      	b.n	8008462 <__hexnan+0x2e>
 80084b2:	2a29      	cmp	r2, #41	@ 0x29
 80084b4:	d157      	bne.n	8008566 <__hexnan+0x132>
 80084b6:	3102      	adds	r1, #2
 80084b8:	f8ca 1000 	str.w	r1, [sl]
 80084bc:	f1bb 0f00 	cmp.w	fp, #0
 80084c0:	d051      	beq.n	8008566 <__hexnan+0x132>
 80084c2:	454c      	cmp	r4, r9
 80084c4:	d206      	bcs.n	80084d4 <__hexnan+0xa0>
 80084c6:	2d07      	cmp	r5, #7
 80084c8:	dc04      	bgt.n	80084d4 <__hexnan+0xa0>
 80084ca:	462a      	mov	r2, r5
 80084cc:	4649      	mov	r1, r9
 80084ce:	4620      	mov	r0, r4
 80084d0:	f7ff ff8a 	bl	80083e8 <L_shift>
 80084d4:	4544      	cmp	r4, r8
 80084d6:	d936      	bls.n	8008546 <__hexnan+0x112>
 80084d8:	4623      	mov	r3, r4
 80084da:	f1a8 0204 	sub.w	r2, r8, #4
 80084de:	f853 1b04 	ldr.w	r1, [r3], #4
 80084e2:	429f      	cmp	r7, r3
 80084e4:	f842 1f04 	str.w	r1, [r2, #4]!
 80084e8:	d2f9      	bcs.n	80084de <__hexnan+0xaa>
 80084ea:	1b3b      	subs	r3, r7, r4
 80084ec:	f023 0303 	bic.w	r3, r3, #3
 80084f0:	3304      	adds	r3, #4
 80084f2:	3401      	adds	r4, #1
 80084f4:	3e03      	subs	r6, #3
 80084f6:	42b4      	cmp	r4, r6
 80084f8:	bf88      	it	hi
 80084fa:	2304      	movhi	r3, #4
 80084fc:	2200      	movs	r2, #0
 80084fe:	4443      	add	r3, r8
 8008500:	f843 2b04 	str.w	r2, [r3], #4
 8008504:	429f      	cmp	r7, r3
 8008506:	d2fb      	bcs.n	8008500 <__hexnan+0xcc>
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	b91b      	cbnz	r3, 8008514 <__hexnan+0xe0>
 800850c:	4547      	cmp	r7, r8
 800850e:	d128      	bne.n	8008562 <__hexnan+0x12e>
 8008510:	2301      	movs	r3, #1
 8008512:	603b      	str	r3, [r7, #0]
 8008514:	2005      	movs	r0, #5
 8008516:	b007      	add	sp, #28
 8008518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800851c:	3501      	adds	r5, #1
 800851e:	2d08      	cmp	r5, #8
 8008520:	f10b 0b01 	add.w	fp, fp, #1
 8008524:	dd06      	ble.n	8008534 <__hexnan+0x100>
 8008526:	4544      	cmp	r4, r8
 8008528:	d9c1      	bls.n	80084ae <__hexnan+0x7a>
 800852a:	2300      	movs	r3, #0
 800852c:	2501      	movs	r5, #1
 800852e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008532:	3c04      	subs	r4, #4
 8008534:	6822      	ldr	r2, [r4, #0]
 8008536:	f000 000f 	and.w	r0, r0, #15
 800853a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800853e:	6020      	str	r0, [r4, #0]
 8008540:	e7b5      	b.n	80084ae <__hexnan+0x7a>
 8008542:	2508      	movs	r5, #8
 8008544:	e7b3      	b.n	80084ae <__hexnan+0x7a>
 8008546:	9b01      	ldr	r3, [sp, #4]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d0dd      	beq.n	8008508 <__hexnan+0xd4>
 800854c:	f04f 32ff 	mov.w	r2, #4294967295
 8008550:	f1c3 0320 	rsb	r3, r3, #32
 8008554:	40da      	lsrs	r2, r3
 8008556:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800855a:	4013      	ands	r3, r2
 800855c:	f846 3c04 	str.w	r3, [r6, #-4]
 8008560:	e7d2      	b.n	8008508 <__hexnan+0xd4>
 8008562:	3f04      	subs	r7, #4
 8008564:	e7d0      	b.n	8008508 <__hexnan+0xd4>
 8008566:	2004      	movs	r0, #4
 8008568:	e7d5      	b.n	8008516 <__hexnan+0xe2>

0800856a <__ascii_mbtowc>:
 800856a:	b082      	sub	sp, #8
 800856c:	b901      	cbnz	r1, 8008570 <__ascii_mbtowc+0x6>
 800856e:	a901      	add	r1, sp, #4
 8008570:	b142      	cbz	r2, 8008584 <__ascii_mbtowc+0x1a>
 8008572:	b14b      	cbz	r3, 8008588 <__ascii_mbtowc+0x1e>
 8008574:	7813      	ldrb	r3, [r2, #0]
 8008576:	600b      	str	r3, [r1, #0]
 8008578:	7812      	ldrb	r2, [r2, #0]
 800857a:	1e10      	subs	r0, r2, #0
 800857c:	bf18      	it	ne
 800857e:	2001      	movne	r0, #1
 8008580:	b002      	add	sp, #8
 8008582:	4770      	bx	lr
 8008584:	4610      	mov	r0, r2
 8008586:	e7fb      	b.n	8008580 <__ascii_mbtowc+0x16>
 8008588:	f06f 0001 	mvn.w	r0, #1
 800858c:	e7f8      	b.n	8008580 <__ascii_mbtowc+0x16>
	...

08008590 <_Balloc>:
 8008590:	b570      	push	{r4, r5, r6, lr}
 8008592:	69c6      	ldr	r6, [r0, #28]
 8008594:	4604      	mov	r4, r0
 8008596:	460d      	mov	r5, r1
 8008598:	b976      	cbnz	r6, 80085b8 <_Balloc+0x28>
 800859a:	2010      	movs	r0, #16
 800859c:	f7fd f910 	bl	80057c0 <malloc>
 80085a0:	4602      	mov	r2, r0
 80085a2:	61e0      	str	r0, [r4, #28]
 80085a4:	b920      	cbnz	r0, 80085b0 <_Balloc+0x20>
 80085a6:	216b      	movs	r1, #107	@ 0x6b
 80085a8:	4b17      	ldr	r3, [pc, #92]	@ (8008608 <_Balloc+0x78>)
 80085aa:	4818      	ldr	r0, [pc, #96]	@ (800860c <_Balloc+0x7c>)
 80085ac:	f000 febc 	bl	8009328 <__assert_func>
 80085b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80085b4:	6006      	str	r6, [r0, #0]
 80085b6:	60c6      	str	r6, [r0, #12]
 80085b8:	69e6      	ldr	r6, [r4, #28]
 80085ba:	68f3      	ldr	r3, [r6, #12]
 80085bc:	b183      	cbz	r3, 80085e0 <_Balloc+0x50>
 80085be:	69e3      	ldr	r3, [r4, #28]
 80085c0:	68db      	ldr	r3, [r3, #12]
 80085c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80085c6:	b9b8      	cbnz	r0, 80085f8 <_Balloc+0x68>
 80085c8:	2101      	movs	r1, #1
 80085ca:	fa01 f605 	lsl.w	r6, r1, r5
 80085ce:	1d72      	adds	r2, r6, #5
 80085d0:	4620      	mov	r0, r4
 80085d2:	0092      	lsls	r2, r2, #2
 80085d4:	f000 fec6 	bl	8009364 <_calloc_r>
 80085d8:	b160      	cbz	r0, 80085f4 <_Balloc+0x64>
 80085da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80085de:	e00e      	b.n	80085fe <_Balloc+0x6e>
 80085e0:	2221      	movs	r2, #33	@ 0x21
 80085e2:	2104      	movs	r1, #4
 80085e4:	4620      	mov	r0, r4
 80085e6:	f000 febd 	bl	8009364 <_calloc_r>
 80085ea:	69e3      	ldr	r3, [r4, #28]
 80085ec:	60f0      	str	r0, [r6, #12]
 80085ee:	68db      	ldr	r3, [r3, #12]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d1e4      	bne.n	80085be <_Balloc+0x2e>
 80085f4:	2000      	movs	r0, #0
 80085f6:	bd70      	pop	{r4, r5, r6, pc}
 80085f8:	6802      	ldr	r2, [r0, #0]
 80085fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80085fe:	2300      	movs	r3, #0
 8008600:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008604:	e7f7      	b.n	80085f6 <_Balloc+0x66>
 8008606:	bf00      	nop
 8008608:	0800a639 	.word	0x0800a639
 800860c:	0800a719 	.word	0x0800a719

08008610 <_Bfree>:
 8008610:	b570      	push	{r4, r5, r6, lr}
 8008612:	69c6      	ldr	r6, [r0, #28]
 8008614:	4605      	mov	r5, r0
 8008616:	460c      	mov	r4, r1
 8008618:	b976      	cbnz	r6, 8008638 <_Bfree+0x28>
 800861a:	2010      	movs	r0, #16
 800861c:	f7fd f8d0 	bl	80057c0 <malloc>
 8008620:	4602      	mov	r2, r0
 8008622:	61e8      	str	r0, [r5, #28]
 8008624:	b920      	cbnz	r0, 8008630 <_Bfree+0x20>
 8008626:	218f      	movs	r1, #143	@ 0x8f
 8008628:	4b08      	ldr	r3, [pc, #32]	@ (800864c <_Bfree+0x3c>)
 800862a:	4809      	ldr	r0, [pc, #36]	@ (8008650 <_Bfree+0x40>)
 800862c:	f000 fe7c 	bl	8009328 <__assert_func>
 8008630:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008634:	6006      	str	r6, [r0, #0]
 8008636:	60c6      	str	r6, [r0, #12]
 8008638:	b13c      	cbz	r4, 800864a <_Bfree+0x3a>
 800863a:	69eb      	ldr	r3, [r5, #28]
 800863c:	6862      	ldr	r2, [r4, #4]
 800863e:	68db      	ldr	r3, [r3, #12]
 8008640:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008644:	6021      	str	r1, [r4, #0]
 8008646:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800864a:	bd70      	pop	{r4, r5, r6, pc}
 800864c:	0800a639 	.word	0x0800a639
 8008650:	0800a719 	.word	0x0800a719

08008654 <__multadd>:
 8008654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008658:	4607      	mov	r7, r0
 800865a:	460c      	mov	r4, r1
 800865c:	461e      	mov	r6, r3
 800865e:	2000      	movs	r0, #0
 8008660:	690d      	ldr	r5, [r1, #16]
 8008662:	f101 0c14 	add.w	ip, r1, #20
 8008666:	f8dc 3000 	ldr.w	r3, [ip]
 800866a:	3001      	adds	r0, #1
 800866c:	b299      	uxth	r1, r3
 800866e:	fb02 6101 	mla	r1, r2, r1, r6
 8008672:	0c1e      	lsrs	r6, r3, #16
 8008674:	0c0b      	lsrs	r3, r1, #16
 8008676:	fb02 3306 	mla	r3, r2, r6, r3
 800867a:	b289      	uxth	r1, r1
 800867c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008680:	4285      	cmp	r5, r0
 8008682:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008686:	f84c 1b04 	str.w	r1, [ip], #4
 800868a:	dcec      	bgt.n	8008666 <__multadd+0x12>
 800868c:	b30e      	cbz	r6, 80086d2 <__multadd+0x7e>
 800868e:	68a3      	ldr	r3, [r4, #8]
 8008690:	42ab      	cmp	r3, r5
 8008692:	dc19      	bgt.n	80086c8 <__multadd+0x74>
 8008694:	6861      	ldr	r1, [r4, #4]
 8008696:	4638      	mov	r0, r7
 8008698:	3101      	adds	r1, #1
 800869a:	f7ff ff79 	bl	8008590 <_Balloc>
 800869e:	4680      	mov	r8, r0
 80086a0:	b928      	cbnz	r0, 80086ae <__multadd+0x5a>
 80086a2:	4602      	mov	r2, r0
 80086a4:	21ba      	movs	r1, #186	@ 0xba
 80086a6:	4b0c      	ldr	r3, [pc, #48]	@ (80086d8 <__multadd+0x84>)
 80086a8:	480c      	ldr	r0, [pc, #48]	@ (80086dc <__multadd+0x88>)
 80086aa:	f000 fe3d 	bl	8009328 <__assert_func>
 80086ae:	6922      	ldr	r2, [r4, #16]
 80086b0:	f104 010c 	add.w	r1, r4, #12
 80086b4:	3202      	adds	r2, #2
 80086b6:	0092      	lsls	r2, r2, #2
 80086b8:	300c      	adds	r0, #12
 80086ba:	f7fe fd6e 	bl	800719a <memcpy>
 80086be:	4621      	mov	r1, r4
 80086c0:	4638      	mov	r0, r7
 80086c2:	f7ff ffa5 	bl	8008610 <_Bfree>
 80086c6:	4644      	mov	r4, r8
 80086c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80086cc:	3501      	adds	r5, #1
 80086ce:	615e      	str	r6, [r3, #20]
 80086d0:	6125      	str	r5, [r4, #16]
 80086d2:	4620      	mov	r0, r4
 80086d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086d8:	0800a6a8 	.word	0x0800a6a8
 80086dc:	0800a719 	.word	0x0800a719

080086e0 <__s2b>:
 80086e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086e4:	4615      	mov	r5, r2
 80086e6:	2209      	movs	r2, #9
 80086e8:	461f      	mov	r7, r3
 80086ea:	3308      	adds	r3, #8
 80086ec:	460c      	mov	r4, r1
 80086ee:	fb93 f3f2 	sdiv	r3, r3, r2
 80086f2:	4606      	mov	r6, r0
 80086f4:	2201      	movs	r2, #1
 80086f6:	2100      	movs	r1, #0
 80086f8:	429a      	cmp	r2, r3
 80086fa:	db09      	blt.n	8008710 <__s2b+0x30>
 80086fc:	4630      	mov	r0, r6
 80086fe:	f7ff ff47 	bl	8008590 <_Balloc>
 8008702:	b940      	cbnz	r0, 8008716 <__s2b+0x36>
 8008704:	4602      	mov	r2, r0
 8008706:	21d3      	movs	r1, #211	@ 0xd3
 8008708:	4b18      	ldr	r3, [pc, #96]	@ (800876c <__s2b+0x8c>)
 800870a:	4819      	ldr	r0, [pc, #100]	@ (8008770 <__s2b+0x90>)
 800870c:	f000 fe0c 	bl	8009328 <__assert_func>
 8008710:	0052      	lsls	r2, r2, #1
 8008712:	3101      	adds	r1, #1
 8008714:	e7f0      	b.n	80086f8 <__s2b+0x18>
 8008716:	9b08      	ldr	r3, [sp, #32]
 8008718:	2d09      	cmp	r5, #9
 800871a:	6143      	str	r3, [r0, #20]
 800871c:	f04f 0301 	mov.w	r3, #1
 8008720:	6103      	str	r3, [r0, #16]
 8008722:	dd16      	ble.n	8008752 <__s2b+0x72>
 8008724:	f104 0909 	add.w	r9, r4, #9
 8008728:	46c8      	mov	r8, r9
 800872a:	442c      	add	r4, r5
 800872c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008730:	4601      	mov	r1, r0
 8008732:	220a      	movs	r2, #10
 8008734:	4630      	mov	r0, r6
 8008736:	3b30      	subs	r3, #48	@ 0x30
 8008738:	f7ff ff8c 	bl	8008654 <__multadd>
 800873c:	45a0      	cmp	r8, r4
 800873e:	d1f5      	bne.n	800872c <__s2b+0x4c>
 8008740:	f1a5 0408 	sub.w	r4, r5, #8
 8008744:	444c      	add	r4, r9
 8008746:	1b2d      	subs	r5, r5, r4
 8008748:	1963      	adds	r3, r4, r5
 800874a:	42bb      	cmp	r3, r7
 800874c:	db04      	blt.n	8008758 <__s2b+0x78>
 800874e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008752:	2509      	movs	r5, #9
 8008754:	340a      	adds	r4, #10
 8008756:	e7f6      	b.n	8008746 <__s2b+0x66>
 8008758:	f814 3b01 	ldrb.w	r3, [r4], #1
 800875c:	4601      	mov	r1, r0
 800875e:	220a      	movs	r2, #10
 8008760:	4630      	mov	r0, r6
 8008762:	3b30      	subs	r3, #48	@ 0x30
 8008764:	f7ff ff76 	bl	8008654 <__multadd>
 8008768:	e7ee      	b.n	8008748 <__s2b+0x68>
 800876a:	bf00      	nop
 800876c:	0800a6a8 	.word	0x0800a6a8
 8008770:	0800a719 	.word	0x0800a719

08008774 <__hi0bits>:
 8008774:	4603      	mov	r3, r0
 8008776:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800877a:	bf3a      	itte	cc
 800877c:	0403      	lslcc	r3, r0, #16
 800877e:	2010      	movcc	r0, #16
 8008780:	2000      	movcs	r0, #0
 8008782:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008786:	bf3c      	itt	cc
 8008788:	021b      	lslcc	r3, r3, #8
 800878a:	3008      	addcc	r0, #8
 800878c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008790:	bf3c      	itt	cc
 8008792:	011b      	lslcc	r3, r3, #4
 8008794:	3004      	addcc	r0, #4
 8008796:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800879a:	bf3c      	itt	cc
 800879c:	009b      	lslcc	r3, r3, #2
 800879e:	3002      	addcc	r0, #2
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	db05      	blt.n	80087b0 <__hi0bits+0x3c>
 80087a4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80087a8:	f100 0001 	add.w	r0, r0, #1
 80087ac:	bf08      	it	eq
 80087ae:	2020      	moveq	r0, #32
 80087b0:	4770      	bx	lr

080087b2 <__lo0bits>:
 80087b2:	6803      	ldr	r3, [r0, #0]
 80087b4:	4602      	mov	r2, r0
 80087b6:	f013 0007 	ands.w	r0, r3, #7
 80087ba:	d00b      	beq.n	80087d4 <__lo0bits+0x22>
 80087bc:	07d9      	lsls	r1, r3, #31
 80087be:	d421      	bmi.n	8008804 <__lo0bits+0x52>
 80087c0:	0798      	lsls	r0, r3, #30
 80087c2:	bf49      	itett	mi
 80087c4:	085b      	lsrmi	r3, r3, #1
 80087c6:	089b      	lsrpl	r3, r3, #2
 80087c8:	2001      	movmi	r0, #1
 80087ca:	6013      	strmi	r3, [r2, #0]
 80087cc:	bf5c      	itt	pl
 80087ce:	2002      	movpl	r0, #2
 80087d0:	6013      	strpl	r3, [r2, #0]
 80087d2:	4770      	bx	lr
 80087d4:	b299      	uxth	r1, r3
 80087d6:	b909      	cbnz	r1, 80087dc <__lo0bits+0x2a>
 80087d8:	2010      	movs	r0, #16
 80087da:	0c1b      	lsrs	r3, r3, #16
 80087dc:	b2d9      	uxtb	r1, r3
 80087de:	b909      	cbnz	r1, 80087e4 <__lo0bits+0x32>
 80087e0:	3008      	adds	r0, #8
 80087e2:	0a1b      	lsrs	r3, r3, #8
 80087e4:	0719      	lsls	r1, r3, #28
 80087e6:	bf04      	itt	eq
 80087e8:	091b      	lsreq	r3, r3, #4
 80087ea:	3004      	addeq	r0, #4
 80087ec:	0799      	lsls	r1, r3, #30
 80087ee:	bf04      	itt	eq
 80087f0:	089b      	lsreq	r3, r3, #2
 80087f2:	3002      	addeq	r0, #2
 80087f4:	07d9      	lsls	r1, r3, #31
 80087f6:	d403      	bmi.n	8008800 <__lo0bits+0x4e>
 80087f8:	085b      	lsrs	r3, r3, #1
 80087fa:	f100 0001 	add.w	r0, r0, #1
 80087fe:	d003      	beq.n	8008808 <__lo0bits+0x56>
 8008800:	6013      	str	r3, [r2, #0]
 8008802:	4770      	bx	lr
 8008804:	2000      	movs	r0, #0
 8008806:	4770      	bx	lr
 8008808:	2020      	movs	r0, #32
 800880a:	4770      	bx	lr

0800880c <__i2b>:
 800880c:	b510      	push	{r4, lr}
 800880e:	460c      	mov	r4, r1
 8008810:	2101      	movs	r1, #1
 8008812:	f7ff febd 	bl	8008590 <_Balloc>
 8008816:	4602      	mov	r2, r0
 8008818:	b928      	cbnz	r0, 8008826 <__i2b+0x1a>
 800881a:	f240 1145 	movw	r1, #325	@ 0x145
 800881e:	4b04      	ldr	r3, [pc, #16]	@ (8008830 <__i2b+0x24>)
 8008820:	4804      	ldr	r0, [pc, #16]	@ (8008834 <__i2b+0x28>)
 8008822:	f000 fd81 	bl	8009328 <__assert_func>
 8008826:	2301      	movs	r3, #1
 8008828:	6144      	str	r4, [r0, #20]
 800882a:	6103      	str	r3, [r0, #16]
 800882c:	bd10      	pop	{r4, pc}
 800882e:	bf00      	nop
 8008830:	0800a6a8 	.word	0x0800a6a8
 8008834:	0800a719 	.word	0x0800a719

08008838 <__multiply>:
 8008838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800883c:	4614      	mov	r4, r2
 800883e:	690a      	ldr	r2, [r1, #16]
 8008840:	6923      	ldr	r3, [r4, #16]
 8008842:	460f      	mov	r7, r1
 8008844:	429a      	cmp	r2, r3
 8008846:	bfa2      	ittt	ge
 8008848:	4623      	movge	r3, r4
 800884a:	460c      	movge	r4, r1
 800884c:	461f      	movge	r7, r3
 800884e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008852:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008856:	68a3      	ldr	r3, [r4, #8]
 8008858:	6861      	ldr	r1, [r4, #4]
 800885a:	eb0a 0609 	add.w	r6, sl, r9
 800885e:	42b3      	cmp	r3, r6
 8008860:	b085      	sub	sp, #20
 8008862:	bfb8      	it	lt
 8008864:	3101      	addlt	r1, #1
 8008866:	f7ff fe93 	bl	8008590 <_Balloc>
 800886a:	b930      	cbnz	r0, 800887a <__multiply+0x42>
 800886c:	4602      	mov	r2, r0
 800886e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008872:	4b43      	ldr	r3, [pc, #268]	@ (8008980 <__multiply+0x148>)
 8008874:	4843      	ldr	r0, [pc, #268]	@ (8008984 <__multiply+0x14c>)
 8008876:	f000 fd57 	bl	8009328 <__assert_func>
 800887a:	f100 0514 	add.w	r5, r0, #20
 800887e:	462b      	mov	r3, r5
 8008880:	2200      	movs	r2, #0
 8008882:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008886:	4543      	cmp	r3, r8
 8008888:	d321      	bcc.n	80088ce <__multiply+0x96>
 800888a:	f107 0114 	add.w	r1, r7, #20
 800888e:	f104 0214 	add.w	r2, r4, #20
 8008892:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008896:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800889a:	9302      	str	r3, [sp, #8]
 800889c:	1b13      	subs	r3, r2, r4
 800889e:	3b15      	subs	r3, #21
 80088a0:	f023 0303 	bic.w	r3, r3, #3
 80088a4:	3304      	adds	r3, #4
 80088a6:	f104 0715 	add.w	r7, r4, #21
 80088aa:	42ba      	cmp	r2, r7
 80088ac:	bf38      	it	cc
 80088ae:	2304      	movcc	r3, #4
 80088b0:	9301      	str	r3, [sp, #4]
 80088b2:	9b02      	ldr	r3, [sp, #8]
 80088b4:	9103      	str	r1, [sp, #12]
 80088b6:	428b      	cmp	r3, r1
 80088b8:	d80c      	bhi.n	80088d4 <__multiply+0x9c>
 80088ba:	2e00      	cmp	r6, #0
 80088bc:	dd03      	ble.n	80088c6 <__multiply+0x8e>
 80088be:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d05a      	beq.n	800897c <__multiply+0x144>
 80088c6:	6106      	str	r6, [r0, #16]
 80088c8:	b005      	add	sp, #20
 80088ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088ce:	f843 2b04 	str.w	r2, [r3], #4
 80088d2:	e7d8      	b.n	8008886 <__multiply+0x4e>
 80088d4:	f8b1 a000 	ldrh.w	sl, [r1]
 80088d8:	f1ba 0f00 	cmp.w	sl, #0
 80088dc:	d023      	beq.n	8008926 <__multiply+0xee>
 80088de:	46a9      	mov	r9, r5
 80088e0:	f04f 0c00 	mov.w	ip, #0
 80088e4:	f104 0e14 	add.w	lr, r4, #20
 80088e8:	f85e 7b04 	ldr.w	r7, [lr], #4
 80088ec:	f8d9 3000 	ldr.w	r3, [r9]
 80088f0:	fa1f fb87 	uxth.w	fp, r7
 80088f4:	b29b      	uxth	r3, r3
 80088f6:	fb0a 330b 	mla	r3, sl, fp, r3
 80088fa:	4463      	add	r3, ip
 80088fc:	f8d9 c000 	ldr.w	ip, [r9]
 8008900:	0c3f      	lsrs	r7, r7, #16
 8008902:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008906:	fb0a c707 	mla	r7, sl, r7, ip
 800890a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800890e:	b29b      	uxth	r3, r3
 8008910:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008914:	4572      	cmp	r2, lr
 8008916:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800891a:	f849 3b04 	str.w	r3, [r9], #4
 800891e:	d8e3      	bhi.n	80088e8 <__multiply+0xb0>
 8008920:	9b01      	ldr	r3, [sp, #4]
 8008922:	f845 c003 	str.w	ip, [r5, r3]
 8008926:	9b03      	ldr	r3, [sp, #12]
 8008928:	3104      	adds	r1, #4
 800892a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800892e:	f1b9 0f00 	cmp.w	r9, #0
 8008932:	d021      	beq.n	8008978 <__multiply+0x140>
 8008934:	46ae      	mov	lr, r5
 8008936:	f04f 0a00 	mov.w	sl, #0
 800893a:	682b      	ldr	r3, [r5, #0]
 800893c:	f104 0c14 	add.w	ip, r4, #20
 8008940:	f8bc b000 	ldrh.w	fp, [ip]
 8008944:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008948:	b29b      	uxth	r3, r3
 800894a:	fb09 770b 	mla	r7, r9, fp, r7
 800894e:	4457      	add	r7, sl
 8008950:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008954:	f84e 3b04 	str.w	r3, [lr], #4
 8008958:	f85c 3b04 	ldr.w	r3, [ip], #4
 800895c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008960:	f8be 3000 	ldrh.w	r3, [lr]
 8008964:	4562      	cmp	r2, ip
 8008966:	fb09 330a 	mla	r3, r9, sl, r3
 800896a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800896e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008972:	d8e5      	bhi.n	8008940 <__multiply+0x108>
 8008974:	9f01      	ldr	r7, [sp, #4]
 8008976:	51eb      	str	r3, [r5, r7]
 8008978:	3504      	adds	r5, #4
 800897a:	e79a      	b.n	80088b2 <__multiply+0x7a>
 800897c:	3e01      	subs	r6, #1
 800897e:	e79c      	b.n	80088ba <__multiply+0x82>
 8008980:	0800a6a8 	.word	0x0800a6a8
 8008984:	0800a719 	.word	0x0800a719

08008988 <__pow5mult>:
 8008988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800898c:	4615      	mov	r5, r2
 800898e:	f012 0203 	ands.w	r2, r2, #3
 8008992:	4607      	mov	r7, r0
 8008994:	460e      	mov	r6, r1
 8008996:	d007      	beq.n	80089a8 <__pow5mult+0x20>
 8008998:	4c25      	ldr	r4, [pc, #148]	@ (8008a30 <__pow5mult+0xa8>)
 800899a:	3a01      	subs	r2, #1
 800899c:	2300      	movs	r3, #0
 800899e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80089a2:	f7ff fe57 	bl	8008654 <__multadd>
 80089a6:	4606      	mov	r6, r0
 80089a8:	10ad      	asrs	r5, r5, #2
 80089aa:	d03d      	beq.n	8008a28 <__pow5mult+0xa0>
 80089ac:	69fc      	ldr	r4, [r7, #28]
 80089ae:	b97c      	cbnz	r4, 80089d0 <__pow5mult+0x48>
 80089b0:	2010      	movs	r0, #16
 80089b2:	f7fc ff05 	bl	80057c0 <malloc>
 80089b6:	4602      	mov	r2, r0
 80089b8:	61f8      	str	r0, [r7, #28]
 80089ba:	b928      	cbnz	r0, 80089c8 <__pow5mult+0x40>
 80089bc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80089c0:	4b1c      	ldr	r3, [pc, #112]	@ (8008a34 <__pow5mult+0xac>)
 80089c2:	481d      	ldr	r0, [pc, #116]	@ (8008a38 <__pow5mult+0xb0>)
 80089c4:	f000 fcb0 	bl	8009328 <__assert_func>
 80089c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80089cc:	6004      	str	r4, [r0, #0]
 80089ce:	60c4      	str	r4, [r0, #12]
 80089d0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80089d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80089d8:	b94c      	cbnz	r4, 80089ee <__pow5mult+0x66>
 80089da:	f240 2171 	movw	r1, #625	@ 0x271
 80089de:	4638      	mov	r0, r7
 80089e0:	f7ff ff14 	bl	800880c <__i2b>
 80089e4:	2300      	movs	r3, #0
 80089e6:	4604      	mov	r4, r0
 80089e8:	f8c8 0008 	str.w	r0, [r8, #8]
 80089ec:	6003      	str	r3, [r0, #0]
 80089ee:	f04f 0900 	mov.w	r9, #0
 80089f2:	07eb      	lsls	r3, r5, #31
 80089f4:	d50a      	bpl.n	8008a0c <__pow5mult+0x84>
 80089f6:	4631      	mov	r1, r6
 80089f8:	4622      	mov	r2, r4
 80089fa:	4638      	mov	r0, r7
 80089fc:	f7ff ff1c 	bl	8008838 <__multiply>
 8008a00:	4680      	mov	r8, r0
 8008a02:	4631      	mov	r1, r6
 8008a04:	4638      	mov	r0, r7
 8008a06:	f7ff fe03 	bl	8008610 <_Bfree>
 8008a0a:	4646      	mov	r6, r8
 8008a0c:	106d      	asrs	r5, r5, #1
 8008a0e:	d00b      	beq.n	8008a28 <__pow5mult+0xa0>
 8008a10:	6820      	ldr	r0, [r4, #0]
 8008a12:	b938      	cbnz	r0, 8008a24 <__pow5mult+0x9c>
 8008a14:	4622      	mov	r2, r4
 8008a16:	4621      	mov	r1, r4
 8008a18:	4638      	mov	r0, r7
 8008a1a:	f7ff ff0d 	bl	8008838 <__multiply>
 8008a1e:	6020      	str	r0, [r4, #0]
 8008a20:	f8c0 9000 	str.w	r9, [r0]
 8008a24:	4604      	mov	r4, r0
 8008a26:	e7e4      	b.n	80089f2 <__pow5mult+0x6a>
 8008a28:	4630      	mov	r0, r6
 8008a2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a2e:	bf00      	nop
 8008a30:	0800a774 	.word	0x0800a774
 8008a34:	0800a639 	.word	0x0800a639
 8008a38:	0800a719 	.word	0x0800a719

08008a3c <__lshift>:
 8008a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a40:	460c      	mov	r4, r1
 8008a42:	4607      	mov	r7, r0
 8008a44:	4691      	mov	r9, r2
 8008a46:	6923      	ldr	r3, [r4, #16]
 8008a48:	6849      	ldr	r1, [r1, #4]
 8008a4a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008a4e:	68a3      	ldr	r3, [r4, #8]
 8008a50:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008a54:	f108 0601 	add.w	r6, r8, #1
 8008a58:	42b3      	cmp	r3, r6
 8008a5a:	db0b      	blt.n	8008a74 <__lshift+0x38>
 8008a5c:	4638      	mov	r0, r7
 8008a5e:	f7ff fd97 	bl	8008590 <_Balloc>
 8008a62:	4605      	mov	r5, r0
 8008a64:	b948      	cbnz	r0, 8008a7a <__lshift+0x3e>
 8008a66:	4602      	mov	r2, r0
 8008a68:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008a6c:	4b27      	ldr	r3, [pc, #156]	@ (8008b0c <__lshift+0xd0>)
 8008a6e:	4828      	ldr	r0, [pc, #160]	@ (8008b10 <__lshift+0xd4>)
 8008a70:	f000 fc5a 	bl	8009328 <__assert_func>
 8008a74:	3101      	adds	r1, #1
 8008a76:	005b      	lsls	r3, r3, #1
 8008a78:	e7ee      	b.n	8008a58 <__lshift+0x1c>
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	f100 0114 	add.w	r1, r0, #20
 8008a80:	f100 0210 	add.w	r2, r0, #16
 8008a84:	4618      	mov	r0, r3
 8008a86:	4553      	cmp	r3, sl
 8008a88:	db33      	blt.n	8008af2 <__lshift+0xb6>
 8008a8a:	6920      	ldr	r0, [r4, #16]
 8008a8c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008a90:	f104 0314 	add.w	r3, r4, #20
 8008a94:	f019 091f 	ands.w	r9, r9, #31
 8008a98:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008a9c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008aa0:	d02b      	beq.n	8008afa <__lshift+0xbe>
 8008aa2:	468a      	mov	sl, r1
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	f1c9 0e20 	rsb	lr, r9, #32
 8008aaa:	6818      	ldr	r0, [r3, #0]
 8008aac:	fa00 f009 	lsl.w	r0, r0, r9
 8008ab0:	4310      	orrs	r0, r2
 8008ab2:	f84a 0b04 	str.w	r0, [sl], #4
 8008ab6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008aba:	459c      	cmp	ip, r3
 8008abc:	fa22 f20e 	lsr.w	r2, r2, lr
 8008ac0:	d8f3      	bhi.n	8008aaa <__lshift+0x6e>
 8008ac2:	ebac 0304 	sub.w	r3, ip, r4
 8008ac6:	3b15      	subs	r3, #21
 8008ac8:	f023 0303 	bic.w	r3, r3, #3
 8008acc:	3304      	adds	r3, #4
 8008ace:	f104 0015 	add.w	r0, r4, #21
 8008ad2:	4584      	cmp	ip, r0
 8008ad4:	bf38      	it	cc
 8008ad6:	2304      	movcc	r3, #4
 8008ad8:	50ca      	str	r2, [r1, r3]
 8008ada:	b10a      	cbz	r2, 8008ae0 <__lshift+0xa4>
 8008adc:	f108 0602 	add.w	r6, r8, #2
 8008ae0:	3e01      	subs	r6, #1
 8008ae2:	4638      	mov	r0, r7
 8008ae4:	4621      	mov	r1, r4
 8008ae6:	612e      	str	r6, [r5, #16]
 8008ae8:	f7ff fd92 	bl	8008610 <_Bfree>
 8008aec:	4628      	mov	r0, r5
 8008aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008af2:	f842 0f04 	str.w	r0, [r2, #4]!
 8008af6:	3301      	adds	r3, #1
 8008af8:	e7c5      	b.n	8008a86 <__lshift+0x4a>
 8008afa:	3904      	subs	r1, #4
 8008afc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b00:	459c      	cmp	ip, r3
 8008b02:	f841 2f04 	str.w	r2, [r1, #4]!
 8008b06:	d8f9      	bhi.n	8008afc <__lshift+0xc0>
 8008b08:	e7ea      	b.n	8008ae0 <__lshift+0xa4>
 8008b0a:	bf00      	nop
 8008b0c:	0800a6a8 	.word	0x0800a6a8
 8008b10:	0800a719 	.word	0x0800a719

08008b14 <__mcmp>:
 8008b14:	4603      	mov	r3, r0
 8008b16:	690a      	ldr	r2, [r1, #16]
 8008b18:	6900      	ldr	r0, [r0, #16]
 8008b1a:	b530      	push	{r4, r5, lr}
 8008b1c:	1a80      	subs	r0, r0, r2
 8008b1e:	d10e      	bne.n	8008b3e <__mcmp+0x2a>
 8008b20:	3314      	adds	r3, #20
 8008b22:	3114      	adds	r1, #20
 8008b24:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008b28:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008b2c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008b30:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008b34:	4295      	cmp	r5, r2
 8008b36:	d003      	beq.n	8008b40 <__mcmp+0x2c>
 8008b38:	d205      	bcs.n	8008b46 <__mcmp+0x32>
 8008b3a:	f04f 30ff 	mov.w	r0, #4294967295
 8008b3e:	bd30      	pop	{r4, r5, pc}
 8008b40:	42a3      	cmp	r3, r4
 8008b42:	d3f3      	bcc.n	8008b2c <__mcmp+0x18>
 8008b44:	e7fb      	b.n	8008b3e <__mcmp+0x2a>
 8008b46:	2001      	movs	r0, #1
 8008b48:	e7f9      	b.n	8008b3e <__mcmp+0x2a>
	...

08008b4c <__mdiff>:
 8008b4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b50:	4689      	mov	r9, r1
 8008b52:	4606      	mov	r6, r0
 8008b54:	4611      	mov	r1, r2
 8008b56:	4648      	mov	r0, r9
 8008b58:	4614      	mov	r4, r2
 8008b5a:	f7ff ffdb 	bl	8008b14 <__mcmp>
 8008b5e:	1e05      	subs	r5, r0, #0
 8008b60:	d112      	bne.n	8008b88 <__mdiff+0x3c>
 8008b62:	4629      	mov	r1, r5
 8008b64:	4630      	mov	r0, r6
 8008b66:	f7ff fd13 	bl	8008590 <_Balloc>
 8008b6a:	4602      	mov	r2, r0
 8008b6c:	b928      	cbnz	r0, 8008b7a <__mdiff+0x2e>
 8008b6e:	f240 2137 	movw	r1, #567	@ 0x237
 8008b72:	4b3e      	ldr	r3, [pc, #248]	@ (8008c6c <__mdiff+0x120>)
 8008b74:	483e      	ldr	r0, [pc, #248]	@ (8008c70 <__mdiff+0x124>)
 8008b76:	f000 fbd7 	bl	8009328 <__assert_func>
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008b80:	4610      	mov	r0, r2
 8008b82:	b003      	add	sp, #12
 8008b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b88:	bfbc      	itt	lt
 8008b8a:	464b      	movlt	r3, r9
 8008b8c:	46a1      	movlt	r9, r4
 8008b8e:	4630      	mov	r0, r6
 8008b90:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008b94:	bfba      	itte	lt
 8008b96:	461c      	movlt	r4, r3
 8008b98:	2501      	movlt	r5, #1
 8008b9a:	2500      	movge	r5, #0
 8008b9c:	f7ff fcf8 	bl	8008590 <_Balloc>
 8008ba0:	4602      	mov	r2, r0
 8008ba2:	b918      	cbnz	r0, 8008bac <__mdiff+0x60>
 8008ba4:	f240 2145 	movw	r1, #581	@ 0x245
 8008ba8:	4b30      	ldr	r3, [pc, #192]	@ (8008c6c <__mdiff+0x120>)
 8008baa:	e7e3      	b.n	8008b74 <__mdiff+0x28>
 8008bac:	f100 0b14 	add.w	fp, r0, #20
 8008bb0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008bb4:	f109 0310 	add.w	r3, r9, #16
 8008bb8:	60c5      	str	r5, [r0, #12]
 8008bba:	f04f 0c00 	mov.w	ip, #0
 8008bbe:	f109 0514 	add.w	r5, r9, #20
 8008bc2:	46d9      	mov	r9, fp
 8008bc4:	6926      	ldr	r6, [r4, #16]
 8008bc6:	f104 0e14 	add.w	lr, r4, #20
 8008bca:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008bce:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008bd2:	9301      	str	r3, [sp, #4]
 8008bd4:	9b01      	ldr	r3, [sp, #4]
 8008bd6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008bda:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008bde:	b281      	uxth	r1, r0
 8008be0:	9301      	str	r3, [sp, #4]
 8008be2:	fa1f f38a 	uxth.w	r3, sl
 8008be6:	1a5b      	subs	r3, r3, r1
 8008be8:	0c00      	lsrs	r0, r0, #16
 8008bea:	4463      	add	r3, ip
 8008bec:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008bf0:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008bf4:	b29b      	uxth	r3, r3
 8008bf6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008bfa:	4576      	cmp	r6, lr
 8008bfc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008c00:	f849 3b04 	str.w	r3, [r9], #4
 8008c04:	d8e6      	bhi.n	8008bd4 <__mdiff+0x88>
 8008c06:	1b33      	subs	r3, r6, r4
 8008c08:	3b15      	subs	r3, #21
 8008c0a:	f023 0303 	bic.w	r3, r3, #3
 8008c0e:	3415      	adds	r4, #21
 8008c10:	3304      	adds	r3, #4
 8008c12:	42a6      	cmp	r6, r4
 8008c14:	bf38      	it	cc
 8008c16:	2304      	movcc	r3, #4
 8008c18:	441d      	add	r5, r3
 8008c1a:	445b      	add	r3, fp
 8008c1c:	461e      	mov	r6, r3
 8008c1e:	462c      	mov	r4, r5
 8008c20:	4544      	cmp	r4, r8
 8008c22:	d30e      	bcc.n	8008c42 <__mdiff+0xf6>
 8008c24:	f108 0103 	add.w	r1, r8, #3
 8008c28:	1b49      	subs	r1, r1, r5
 8008c2a:	f021 0103 	bic.w	r1, r1, #3
 8008c2e:	3d03      	subs	r5, #3
 8008c30:	45a8      	cmp	r8, r5
 8008c32:	bf38      	it	cc
 8008c34:	2100      	movcc	r1, #0
 8008c36:	440b      	add	r3, r1
 8008c38:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008c3c:	b199      	cbz	r1, 8008c66 <__mdiff+0x11a>
 8008c3e:	6117      	str	r7, [r2, #16]
 8008c40:	e79e      	b.n	8008b80 <__mdiff+0x34>
 8008c42:	46e6      	mov	lr, ip
 8008c44:	f854 1b04 	ldr.w	r1, [r4], #4
 8008c48:	fa1f fc81 	uxth.w	ip, r1
 8008c4c:	44f4      	add	ip, lr
 8008c4e:	0c08      	lsrs	r0, r1, #16
 8008c50:	4471      	add	r1, lr
 8008c52:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008c56:	b289      	uxth	r1, r1
 8008c58:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008c5c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008c60:	f846 1b04 	str.w	r1, [r6], #4
 8008c64:	e7dc      	b.n	8008c20 <__mdiff+0xd4>
 8008c66:	3f01      	subs	r7, #1
 8008c68:	e7e6      	b.n	8008c38 <__mdiff+0xec>
 8008c6a:	bf00      	nop
 8008c6c:	0800a6a8 	.word	0x0800a6a8
 8008c70:	0800a719 	.word	0x0800a719

08008c74 <__ulp>:
 8008c74:	4b0e      	ldr	r3, [pc, #56]	@ (8008cb0 <__ulp+0x3c>)
 8008c76:	400b      	ands	r3, r1
 8008c78:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	dc08      	bgt.n	8008c92 <__ulp+0x1e>
 8008c80:	425b      	negs	r3, r3
 8008c82:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008c86:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008c8a:	da04      	bge.n	8008c96 <__ulp+0x22>
 8008c8c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008c90:	4113      	asrs	r3, r2
 8008c92:	2200      	movs	r2, #0
 8008c94:	e008      	b.n	8008ca8 <__ulp+0x34>
 8008c96:	f1a2 0314 	sub.w	r3, r2, #20
 8008c9a:	2b1e      	cmp	r3, #30
 8008c9c:	bfd6      	itet	le
 8008c9e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008ca2:	2201      	movgt	r2, #1
 8008ca4:	40da      	lsrle	r2, r3
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	4619      	mov	r1, r3
 8008caa:	4610      	mov	r0, r2
 8008cac:	4770      	bx	lr
 8008cae:	bf00      	nop
 8008cb0:	7ff00000 	.word	0x7ff00000

08008cb4 <__b2d>:
 8008cb4:	6902      	ldr	r2, [r0, #16]
 8008cb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cb8:	f100 0614 	add.w	r6, r0, #20
 8008cbc:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8008cc0:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8008cc4:	4f1e      	ldr	r7, [pc, #120]	@ (8008d40 <__b2d+0x8c>)
 8008cc6:	4620      	mov	r0, r4
 8008cc8:	f7ff fd54 	bl	8008774 <__hi0bits>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	f1c0 0020 	rsb	r0, r0, #32
 8008cd2:	2b0a      	cmp	r3, #10
 8008cd4:	f1a2 0504 	sub.w	r5, r2, #4
 8008cd8:	6008      	str	r0, [r1, #0]
 8008cda:	dc12      	bgt.n	8008d02 <__b2d+0x4e>
 8008cdc:	42ae      	cmp	r6, r5
 8008cde:	bf2c      	ite	cs
 8008ce0:	2200      	movcs	r2, #0
 8008ce2:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8008ce6:	f1c3 0c0b 	rsb	ip, r3, #11
 8008cea:	3315      	adds	r3, #21
 8008cec:	fa24 fe0c 	lsr.w	lr, r4, ip
 8008cf0:	fa04 f303 	lsl.w	r3, r4, r3
 8008cf4:	fa22 f20c 	lsr.w	r2, r2, ip
 8008cf8:	ea4e 0107 	orr.w	r1, lr, r7
 8008cfc:	431a      	orrs	r2, r3
 8008cfe:	4610      	mov	r0, r2
 8008d00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d02:	42ae      	cmp	r6, r5
 8008d04:	bf36      	itet	cc
 8008d06:	f1a2 0508 	subcc.w	r5, r2, #8
 8008d0a:	2200      	movcs	r2, #0
 8008d0c:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8008d10:	3b0b      	subs	r3, #11
 8008d12:	d012      	beq.n	8008d3a <__b2d+0x86>
 8008d14:	f1c3 0720 	rsb	r7, r3, #32
 8008d18:	fa22 f107 	lsr.w	r1, r2, r7
 8008d1c:	409c      	lsls	r4, r3
 8008d1e:	430c      	orrs	r4, r1
 8008d20:	42b5      	cmp	r5, r6
 8008d22:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8008d26:	bf94      	ite	ls
 8008d28:	2400      	movls	r4, #0
 8008d2a:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8008d2e:	409a      	lsls	r2, r3
 8008d30:	40fc      	lsrs	r4, r7
 8008d32:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8008d36:	4322      	orrs	r2, r4
 8008d38:	e7e1      	b.n	8008cfe <__b2d+0x4a>
 8008d3a:	ea44 0107 	orr.w	r1, r4, r7
 8008d3e:	e7de      	b.n	8008cfe <__b2d+0x4a>
 8008d40:	3ff00000 	.word	0x3ff00000

08008d44 <__d2b>:
 8008d44:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8008d48:	2101      	movs	r1, #1
 8008d4a:	4690      	mov	r8, r2
 8008d4c:	4699      	mov	r9, r3
 8008d4e:	9e08      	ldr	r6, [sp, #32]
 8008d50:	f7ff fc1e 	bl	8008590 <_Balloc>
 8008d54:	4604      	mov	r4, r0
 8008d56:	b930      	cbnz	r0, 8008d66 <__d2b+0x22>
 8008d58:	4602      	mov	r2, r0
 8008d5a:	f240 310f 	movw	r1, #783	@ 0x30f
 8008d5e:	4b23      	ldr	r3, [pc, #140]	@ (8008dec <__d2b+0xa8>)
 8008d60:	4823      	ldr	r0, [pc, #140]	@ (8008df0 <__d2b+0xac>)
 8008d62:	f000 fae1 	bl	8009328 <__assert_func>
 8008d66:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008d6a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008d6e:	b10d      	cbz	r5, 8008d74 <__d2b+0x30>
 8008d70:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008d74:	9301      	str	r3, [sp, #4]
 8008d76:	f1b8 0300 	subs.w	r3, r8, #0
 8008d7a:	d024      	beq.n	8008dc6 <__d2b+0x82>
 8008d7c:	4668      	mov	r0, sp
 8008d7e:	9300      	str	r3, [sp, #0]
 8008d80:	f7ff fd17 	bl	80087b2 <__lo0bits>
 8008d84:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008d88:	b1d8      	cbz	r0, 8008dc2 <__d2b+0x7e>
 8008d8a:	f1c0 0320 	rsb	r3, r0, #32
 8008d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d92:	430b      	orrs	r3, r1
 8008d94:	40c2      	lsrs	r2, r0
 8008d96:	6163      	str	r3, [r4, #20]
 8008d98:	9201      	str	r2, [sp, #4]
 8008d9a:	9b01      	ldr	r3, [sp, #4]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	bf0c      	ite	eq
 8008da0:	2201      	moveq	r2, #1
 8008da2:	2202      	movne	r2, #2
 8008da4:	61a3      	str	r3, [r4, #24]
 8008da6:	6122      	str	r2, [r4, #16]
 8008da8:	b1ad      	cbz	r5, 8008dd6 <__d2b+0x92>
 8008daa:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008dae:	4405      	add	r5, r0
 8008db0:	6035      	str	r5, [r6, #0]
 8008db2:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008db6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008db8:	6018      	str	r0, [r3, #0]
 8008dba:	4620      	mov	r0, r4
 8008dbc:	b002      	add	sp, #8
 8008dbe:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8008dc2:	6161      	str	r1, [r4, #20]
 8008dc4:	e7e9      	b.n	8008d9a <__d2b+0x56>
 8008dc6:	a801      	add	r0, sp, #4
 8008dc8:	f7ff fcf3 	bl	80087b2 <__lo0bits>
 8008dcc:	9b01      	ldr	r3, [sp, #4]
 8008dce:	2201      	movs	r2, #1
 8008dd0:	6163      	str	r3, [r4, #20]
 8008dd2:	3020      	adds	r0, #32
 8008dd4:	e7e7      	b.n	8008da6 <__d2b+0x62>
 8008dd6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008dda:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008dde:	6030      	str	r0, [r6, #0]
 8008de0:	6918      	ldr	r0, [r3, #16]
 8008de2:	f7ff fcc7 	bl	8008774 <__hi0bits>
 8008de6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008dea:	e7e4      	b.n	8008db6 <__d2b+0x72>
 8008dec:	0800a6a8 	.word	0x0800a6a8
 8008df0:	0800a719 	.word	0x0800a719

08008df4 <__ratio>:
 8008df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008df8:	b085      	sub	sp, #20
 8008dfa:	e9cd 1000 	strd	r1, r0, [sp]
 8008dfe:	a902      	add	r1, sp, #8
 8008e00:	f7ff ff58 	bl	8008cb4 <__b2d>
 8008e04:	468b      	mov	fp, r1
 8008e06:	4606      	mov	r6, r0
 8008e08:	460f      	mov	r7, r1
 8008e0a:	9800      	ldr	r0, [sp, #0]
 8008e0c:	a903      	add	r1, sp, #12
 8008e0e:	f7ff ff51 	bl	8008cb4 <__b2d>
 8008e12:	460d      	mov	r5, r1
 8008e14:	9b01      	ldr	r3, [sp, #4]
 8008e16:	4689      	mov	r9, r1
 8008e18:	6919      	ldr	r1, [r3, #16]
 8008e1a:	9b00      	ldr	r3, [sp, #0]
 8008e1c:	4604      	mov	r4, r0
 8008e1e:	691b      	ldr	r3, [r3, #16]
 8008e20:	4630      	mov	r0, r6
 8008e22:	1ac9      	subs	r1, r1, r3
 8008e24:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008e28:	1a9b      	subs	r3, r3, r2
 8008e2a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	bfcd      	iteet	gt
 8008e32:	463a      	movgt	r2, r7
 8008e34:	462a      	movle	r2, r5
 8008e36:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008e3a:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8008e3e:	bfd8      	it	le
 8008e40:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008e44:	464b      	mov	r3, r9
 8008e46:	4622      	mov	r2, r4
 8008e48:	4659      	mov	r1, fp
 8008e4a:	f7f7 fc79 	bl	8000740 <__aeabi_ddiv>
 8008e4e:	b005      	add	sp, #20
 8008e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008e54 <__copybits>:
 8008e54:	3901      	subs	r1, #1
 8008e56:	b570      	push	{r4, r5, r6, lr}
 8008e58:	1149      	asrs	r1, r1, #5
 8008e5a:	6914      	ldr	r4, [r2, #16]
 8008e5c:	3101      	adds	r1, #1
 8008e5e:	f102 0314 	add.w	r3, r2, #20
 8008e62:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008e66:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008e6a:	1f05      	subs	r5, r0, #4
 8008e6c:	42a3      	cmp	r3, r4
 8008e6e:	d30c      	bcc.n	8008e8a <__copybits+0x36>
 8008e70:	1aa3      	subs	r3, r4, r2
 8008e72:	3b11      	subs	r3, #17
 8008e74:	f023 0303 	bic.w	r3, r3, #3
 8008e78:	3211      	adds	r2, #17
 8008e7a:	42a2      	cmp	r2, r4
 8008e7c:	bf88      	it	hi
 8008e7e:	2300      	movhi	r3, #0
 8008e80:	4418      	add	r0, r3
 8008e82:	2300      	movs	r3, #0
 8008e84:	4288      	cmp	r0, r1
 8008e86:	d305      	bcc.n	8008e94 <__copybits+0x40>
 8008e88:	bd70      	pop	{r4, r5, r6, pc}
 8008e8a:	f853 6b04 	ldr.w	r6, [r3], #4
 8008e8e:	f845 6f04 	str.w	r6, [r5, #4]!
 8008e92:	e7eb      	b.n	8008e6c <__copybits+0x18>
 8008e94:	f840 3b04 	str.w	r3, [r0], #4
 8008e98:	e7f4      	b.n	8008e84 <__copybits+0x30>

08008e9a <__any_on>:
 8008e9a:	f100 0214 	add.w	r2, r0, #20
 8008e9e:	6900      	ldr	r0, [r0, #16]
 8008ea0:	114b      	asrs	r3, r1, #5
 8008ea2:	4298      	cmp	r0, r3
 8008ea4:	b510      	push	{r4, lr}
 8008ea6:	db11      	blt.n	8008ecc <__any_on+0x32>
 8008ea8:	dd0a      	ble.n	8008ec0 <__any_on+0x26>
 8008eaa:	f011 011f 	ands.w	r1, r1, #31
 8008eae:	d007      	beq.n	8008ec0 <__any_on+0x26>
 8008eb0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008eb4:	fa24 f001 	lsr.w	r0, r4, r1
 8008eb8:	fa00 f101 	lsl.w	r1, r0, r1
 8008ebc:	428c      	cmp	r4, r1
 8008ebe:	d10b      	bne.n	8008ed8 <__any_on+0x3e>
 8008ec0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d803      	bhi.n	8008ed0 <__any_on+0x36>
 8008ec8:	2000      	movs	r0, #0
 8008eca:	bd10      	pop	{r4, pc}
 8008ecc:	4603      	mov	r3, r0
 8008ece:	e7f7      	b.n	8008ec0 <__any_on+0x26>
 8008ed0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008ed4:	2900      	cmp	r1, #0
 8008ed6:	d0f5      	beq.n	8008ec4 <__any_on+0x2a>
 8008ed8:	2001      	movs	r0, #1
 8008eda:	e7f6      	b.n	8008eca <__any_on+0x30>

08008edc <__ascii_wctomb>:
 8008edc:	4603      	mov	r3, r0
 8008ede:	4608      	mov	r0, r1
 8008ee0:	b141      	cbz	r1, 8008ef4 <__ascii_wctomb+0x18>
 8008ee2:	2aff      	cmp	r2, #255	@ 0xff
 8008ee4:	d904      	bls.n	8008ef0 <__ascii_wctomb+0x14>
 8008ee6:	228a      	movs	r2, #138	@ 0x8a
 8008ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8008eec:	601a      	str	r2, [r3, #0]
 8008eee:	4770      	bx	lr
 8008ef0:	2001      	movs	r0, #1
 8008ef2:	700a      	strb	r2, [r1, #0]
 8008ef4:	4770      	bx	lr

08008ef6 <__ssputs_r>:
 8008ef6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008efa:	461f      	mov	r7, r3
 8008efc:	688e      	ldr	r6, [r1, #8]
 8008efe:	4682      	mov	sl, r0
 8008f00:	42be      	cmp	r6, r7
 8008f02:	460c      	mov	r4, r1
 8008f04:	4690      	mov	r8, r2
 8008f06:	680b      	ldr	r3, [r1, #0]
 8008f08:	d82d      	bhi.n	8008f66 <__ssputs_r+0x70>
 8008f0a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008f0e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008f12:	d026      	beq.n	8008f62 <__ssputs_r+0x6c>
 8008f14:	6965      	ldr	r5, [r4, #20]
 8008f16:	6909      	ldr	r1, [r1, #16]
 8008f18:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008f1c:	eba3 0901 	sub.w	r9, r3, r1
 8008f20:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008f24:	1c7b      	adds	r3, r7, #1
 8008f26:	444b      	add	r3, r9
 8008f28:	106d      	asrs	r5, r5, #1
 8008f2a:	429d      	cmp	r5, r3
 8008f2c:	bf38      	it	cc
 8008f2e:	461d      	movcc	r5, r3
 8008f30:	0553      	lsls	r3, r2, #21
 8008f32:	d527      	bpl.n	8008f84 <__ssputs_r+0x8e>
 8008f34:	4629      	mov	r1, r5
 8008f36:	f7fc fc6d 	bl	8005814 <_malloc_r>
 8008f3a:	4606      	mov	r6, r0
 8008f3c:	b360      	cbz	r0, 8008f98 <__ssputs_r+0xa2>
 8008f3e:	464a      	mov	r2, r9
 8008f40:	6921      	ldr	r1, [r4, #16]
 8008f42:	f7fe f92a 	bl	800719a <memcpy>
 8008f46:	89a3      	ldrh	r3, [r4, #12]
 8008f48:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008f4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f50:	81a3      	strh	r3, [r4, #12]
 8008f52:	6126      	str	r6, [r4, #16]
 8008f54:	444e      	add	r6, r9
 8008f56:	6026      	str	r6, [r4, #0]
 8008f58:	463e      	mov	r6, r7
 8008f5a:	6165      	str	r5, [r4, #20]
 8008f5c:	eba5 0509 	sub.w	r5, r5, r9
 8008f60:	60a5      	str	r5, [r4, #8]
 8008f62:	42be      	cmp	r6, r7
 8008f64:	d900      	bls.n	8008f68 <__ssputs_r+0x72>
 8008f66:	463e      	mov	r6, r7
 8008f68:	4632      	mov	r2, r6
 8008f6a:	4641      	mov	r1, r8
 8008f6c:	6820      	ldr	r0, [r4, #0]
 8008f6e:	f000 f9c1 	bl	80092f4 <memmove>
 8008f72:	2000      	movs	r0, #0
 8008f74:	68a3      	ldr	r3, [r4, #8]
 8008f76:	1b9b      	subs	r3, r3, r6
 8008f78:	60a3      	str	r3, [r4, #8]
 8008f7a:	6823      	ldr	r3, [r4, #0]
 8008f7c:	4433      	add	r3, r6
 8008f7e:	6023      	str	r3, [r4, #0]
 8008f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f84:	462a      	mov	r2, r5
 8008f86:	f000 fa01 	bl	800938c <_realloc_r>
 8008f8a:	4606      	mov	r6, r0
 8008f8c:	2800      	cmp	r0, #0
 8008f8e:	d1e0      	bne.n	8008f52 <__ssputs_r+0x5c>
 8008f90:	4650      	mov	r0, sl
 8008f92:	6921      	ldr	r1, [r4, #16]
 8008f94:	f7fe ff68 	bl	8007e68 <_free_r>
 8008f98:	230c      	movs	r3, #12
 8008f9a:	f8ca 3000 	str.w	r3, [sl]
 8008f9e:	89a3      	ldrh	r3, [r4, #12]
 8008fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8008fa4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008fa8:	81a3      	strh	r3, [r4, #12]
 8008faa:	e7e9      	b.n	8008f80 <__ssputs_r+0x8a>

08008fac <_svfiprintf_r>:
 8008fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fb0:	4698      	mov	r8, r3
 8008fb2:	898b      	ldrh	r3, [r1, #12]
 8008fb4:	4607      	mov	r7, r0
 8008fb6:	061b      	lsls	r3, r3, #24
 8008fb8:	460d      	mov	r5, r1
 8008fba:	4614      	mov	r4, r2
 8008fbc:	b09d      	sub	sp, #116	@ 0x74
 8008fbe:	d510      	bpl.n	8008fe2 <_svfiprintf_r+0x36>
 8008fc0:	690b      	ldr	r3, [r1, #16]
 8008fc2:	b973      	cbnz	r3, 8008fe2 <_svfiprintf_r+0x36>
 8008fc4:	2140      	movs	r1, #64	@ 0x40
 8008fc6:	f7fc fc25 	bl	8005814 <_malloc_r>
 8008fca:	6028      	str	r0, [r5, #0]
 8008fcc:	6128      	str	r0, [r5, #16]
 8008fce:	b930      	cbnz	r0, 8008fde <_svfiprintf_r+0x32>
 8008fd0:	230c      	movs	r3, #12
 8008fd2:	603b      	str	r3, [r7, #0]
 8008fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8008fd8:	b01d      	add	sp, #116	@ 0x74
 8008fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fde:	2340      	movs	r3, #64	@ 0x40
 8008fe0:	616b      	str	r3, [r5, #20]
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008fe6:	2320      	movs	r3, #32
 8008fe8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008fec:	2330      	movs	r3, #48	@ 0x30
 8008fee:	f04f 0901 	mov.w	r9, #1
 8008ff2:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ff6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8009190 <_svfiprintf_r+0x1e4>
 8008ffa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008ffe:	4623      	mov	r3, r4
 8009000:	469a      	mov	sl, r3
 8009002:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009006:	b10a      	cbz	r2, 800900c <_svfiprintf_r+0x60>
 8009008:	2a25      	cmp	r2, #37	@ 0x25
 800900a:	d1f9      	bne.n	8009000 <_svfiprintf_r+0x54>
 800900c:	ebba 0b04 	subs.w	fp, sl, r4
 8009010:	d00b      	beq.n	800902a <_svfiprintf_r+0x7e>
 8009012:	465b      	mov	r3, fp
 8009014:	4622      	mov	r2, r4
 8009016:	4629      	mov	r1, r5
 8009018:	4638      	mov	r0, r7
 800901a:	f7ff ff6c 	bl	8008ef6 <__ssputs_r>
 800901e:	3001      	adds	r0, #1
 8009020:	f000 80a7 	beq.w	8009172 <_svfiprintf_r+0x1c6>
 8009024:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009026:	445a      	add	r2, fp
 8009028:	9209      	str	r2, [sp, #36]	@ 0x24
 800902a:	f89a 3000 	ldrb.w	r3, [sl]
 800902e:	2b00      	cmp	r3, #0
 8009030:	f000 809f 	beq.w	8009172 <_svfiprintf_r+0x1c6>
 8009034:	2300      	movs	r3, #0
 8009036:	f04f 32ff 	mov.w	r2, #4294967295
 800903a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800903e:	f10a 0a01 	add.w	sl, sl, #1
 8009042:	9304      	str	r3, [sp, #16]
 8009044:	9307      	str	r3, [sp, #28]
 8009046:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800904a:	931a      	str	r3, [sp, #104]	@ 0x68
 800904c:	4654      	mov	r4, sl
 800904e:	2205      	movs	r2, #5
 8009050:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009054:	484e      	ldr	r0, [pc, #312]	@ (8009190 <_svfiprintf_r+0x1e4>)
 8009056:	f7fe f892 	bl	800717e <memchr>
 800905a:	9a04      	ldr	r2, [sp, #16]
 800905c:	b9d8      	cbnz	r0, 8009096 <_svfiprintf_r+0xea>
 800905e:	06d0      	lsls	r0, r2, #27
 8009060:	bf44      	itt	mi
 8009062:	2320      	movmi	r3, #32
 8009064:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009068:	0711      	lsls	r1, r2, #28
 800906a:	bf44      	itt	mi
 800906c:	232b      	movmi	r3, #43	@ 0x2b
 800906e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009072:	f89a 3000 	ldrb.w	r3, [sl]
 8009076:	2b2a      	cmp	r3, #42	@ 0x2a
 8009078:	d015      	beq.n	80090a6 <_svfiprintf_r+0xfa>
 800907a:	4654      	mov	r4, sl
 800907c:	2000      	movs	r0, #0
 800907e:	f04f 0c0a 	mov.w	ip, #10
 8009082:	9a07      	ldr	r2, [sp, #28]
 8009084:	4621      	mov	r1, r4
 8009086:	f811 3b01 	ldrb.w	r3, [r1], #1
 800908a:	3b30      	subs	r3, #48	@ 0x30
 800908c:	2b09      	cmp	r3, #9
 800908e:	d94b      	bls.n	8009128 <_svfiprintf_r+0x17c>
 8009090:	b1b0      	cbz	r0, 80090c0 <_svfiprintf_r+0x114>
 8009092:	9207      	str	r2, [sp, #28]
 8009094:	e014      	b.n	80090c0 <_svfiprintf_r+0x114>
 8009096:	eba0 0308 	sub.w	r3, r0, r8
 800909a:	fa09 f303 	lsl.w	r3, r9, r3
 800909e:	4313      	orrs	r3, r2
 80090a0:	46a2      	mov	sl, r4
 80090a2:	9304      	str	r3, [sp, #16]
 80090a4:	e7d2      	b.n	800904c <_svfiprintf_r+0xa0>
 80090a6:	9b03      	ldr	r3, [sp, #12]
 80090a8:	1d19      	adds	r1, r3, #4
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	9103      	str	r1, [sp, #12]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	bfbb      	ittet	lt
 80090b2:	425b      	neglt	r3, r3
 80090b4:	f042 0202 	orrlt.w	r2, r2, #2
 80090b8:	9307      	strge	r3, [sp, #28]
 80090ba:	9307      	strlt	r3, [sp, #28]
 80090bc:	bfb8      	it	lt
 80090be:	9204      	strlt	r2, [sp, #16]
 80090c0:	7823      	ldrb	r3, [r4, #0]
 80090c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80090c4:	d10a      	bne.n	80090dc <_svfiprintf_r+0x130>
 80090c6:	7863      	ldrb	r3, [r4, #1]
 80090c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80090ca:	d132      	bne.n	8009132 <_svfiprintf_r+0x186>
 80090cc:	9b03      	ldr	r3, [sp, #12]
 80090ce:	3402      	adds	r4, #2
 80090d0:	1d1a      	adds	r2, r3, #4
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	9203      	str	r2, [sp, #12]
 80090d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80090da:	9305      	str	r3, [sp, #20]
 80090dc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8009194 <_svfiprintf_r+0x1e8>
 80090e0:	2203      	movs	r2, #3
 80090e2:	4650      	mov	r0, sl
 80090e4:	7821      	ldrb	r1, [r4, #0]
 80090e6:	f7fe f84a 	bl	800717e <memchr>
 80090ea:	b138      	cbz	r0, 80090fc <_svfiprintf_r+0x150>
 80090ec:	2240      	movs	r2, #64	@ 0x40
 80090ee:	9b04      	ldr	r3, [sp, #16]
 80090f0:	eba0 000a 	sub.w	r0, r0, sl
 80090f4:	4082      	lsls	r2, r0
 80090f6:	4313      	orrs	r3, r2
 80090f8:	3401      	adds	r4, #1
 80090fa:	9304      	str	r3, [sp, #16]
 80090fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009100:	2206      	movs	r2, #6
 8009102:	4825      	ldr	r0, [pc, #148]	@ (8009198 <_svfiprintf_r+0x1ec>)
 8009104:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009108:	f7fe f839 	bl	800717e <memchr>
 800910c:	2800      	cmp	r0, #0
 800910e:	d036      	beq.n	800917e <_svfiprintf_r+0x1d2>
 8009110:	4b22      	ldr	r3, [pc, #136]	@ (800919c <_svfiprintf_r+0x1f0>)
 8009112:	bb1b      	cbnz	r3, 800915c <_svfiprintf_r+0x1b0>
 8009114:	9b03      	ldr	r3, [sp, #12]
 8009116:	3307      	adds	r3, #7
 8009118:	f023 0307 	bic.w	r3, r3, #7
 800911c:	3308      	adds	r3, #8
 800911e:	9303      	str	r3, [sp, #12]
 8009120:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009122:	4433      	add	r3, r6
 8009124:	9309      	str	r3, [sp, #36]	@ 0x24
 8009126:	e76a      	b.n	8008ffe <_svfiprintf_r+0x52>
 8009128:	460c      	mov	r4, r1
 800912a:	2001      	movs	r0, #1
 800912c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009130:	e7a8      	b.n	8009084 <_svfiprintf_r+0xd8>
 8009132:	2300      	movs	r3, #0
 8009134:	f04f 0c0a 	mov.w	ip, #10
 8009138:	4619      	mov	r1, r3
 800913a:	3401      	adds	r4, #1
 800913c:	9305      	str	r3, [sp, #20]
 800913e:	4620      	mov	r0, r4
 8009140:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009144:	3a30      	subs	r2, #48	@ 0x30
 8009146:	2a09      	cmp	r2, #9
 8009148:	d903      	bls.n	8009152 <_svfiprintf_r+0x1a6>
 800914a:	2b00      	cmp	r3, #0
 800914c:	d0c6      	beq.n	80090dc <_svfiprintf_r+0x130>
 800914e:	9105      	str	r1, [sp, #20]
 8009150:	e7c4      	b.n	80090dc <_svfiprintf_r+0x130>
 8009152:	4604      	mov	r4, r0
 8009154:	2301      	movs	r3, #1
 8009156:	fb0c 2101 	mla	r1, ip, r1, r2
 800915a:	e7f0      	b.n	800913e <_svfiprintf_r+0x192>
 800915c:	ab03      	add	r3, sp, #12
 800915e:	9300      	str	r3, [sp, #0]
 8009160:	462a      	mov	r2, r5
 8009162:	4638      	mov	r0, r7
 8009164:	4b0e      	ldr	r3, [pc, #56]	@ (80091a0 <_svfiprintf_r+0x1f4>)
 8009166:	a904      	add	r1, sp, #16
 8009168:	f7fd fa84 	bl	8006674 <_printf_float>
 800916c:	1c42      	adds	r2, r0, #1
 800916e:	4606      	mov	r6, r0
 8009170:	d1d6      	bne.n	8009120 <_svfiprintf_r+0x174>
 8009172:	89ab      	ldrh	r3, [r5, #12]
 8009174:	065b      	lsls	r3, r3, #25
 8009176:	f53f af2d 	bmi.w	8008fd4 <_svfiprintf_r+0x28>
 800917a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800917c:	e72c      	b.n	8008fd8 <_svfiprintf_r+0x2c>
 800917e:	ab03      	add	r3, sp, #12
 8009180:	9300      	str	r3, [sp, #0]
 8009182:	462a      	mov	r2, r5
 8009184:	4638      	mov	r0, r7
 8009186:	4b06      	ldr	r3, [pc, #24]	@ (80091a0 <_svfiprintf_r+0x1f4>)
 8009188:	a904      	add	r1, sp, #16
 800918a:	f7fd fd11 	bl	8006bb0 <_printf_i>
 800918e:	e7ed      	b.n	800916c <_svfiprintf_r+0x1c0>
 8009190:	0800a971 	.word	0x0800a971
 8009194:	0800a977 	.word	0x0800a977
 8009198:	0800a97b 	.word	0x0800a97b
 800919c:	08006675 	.word	0x08006675
 80091a0:	08008ef7 	.word	0x08008ef7

080091a4 <__sflush_r>:
 80091a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80091a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091aa:	0716      	lsls	r6, r2, #28
 80091ac:	4605      	mov	r5, r0
 80091ae:	460c      	mov	r4, r1
 80091b0:	d454      	bmi.n	800925c <__sflush_r+0xb8>
 80091b2:	684b      	ldr	r3, [r1, #4]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	dc02      	bgt.n	80091be <__sflush_r+0x1a>
 80091b8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	dd48      	ble.n	8009250 <__sflush_r+0xac>
 80091be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80091c0:	2e00      	cmp	r6, #0
 80091c2:	d045      	beq.n	8009250 <__sflush_r+0xac>
 80091c4:	2300      	movs	r3, #0
 80091c6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80091ca:	682f      	ldr	r7, [r5, #0]
 80091cc:	6a21      	ldr	r1, [r4, #32]
 80091ce:	602b      	str	r3, [r5, #0]
 80091d0:	d030      	beq.n	8009234 <__sflush_r+0x90>
 80091d2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80091d4:	89a3      	ldrh	r3, [r4, #12]
 80091d6:	0759      	lsls	r1, r3, #29
 80091d8:	d505      	bpl.n	80091e6 <__sflush_r+0x42>
 80091da:	6863      	ldr	r3, [r4, #4]
 80091dc:	1ad2      	subs	r2, r2, r3
 80091de:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80091e0:	b10b      	cbz	r3, 80091e6 <__sflush_r+0x42>
 80091e2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80091e4:	1ad2      	subs	r2, r2, r3
 80091e6:	2300      	movs	r3, #0
 80091e8:	4628      	mov	r0, r5
 80091ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80091ec:	6a21      	ldr	r1, [r4, #32]
 80091ee:	47b0      	blx	r6
 80091f0:	1c43      	adds	r3, r0, #1
 80091f2:	89a3      	ldrh	r3, [r4, #12]
 80091f4:	d106      	bne.n	8009204 <__sflush_r+0x60>
 80091f6:	6829      	ldr	r1, [r5, #0]
 80091f8:	291d      	cmp	r1, #29
 80091fa:	d82b      	bhi.n	8009254 <__sflush_r+0xb0>
 80091fc:	4a28      	ldr	r2, [pc, #160]	@ (80092a0 <__sflush_r+0xfc>)
 80091fe:	410a      	asrs	r2, r1
 8009200:	07d6      	lsls	r6, r2, #31
 8009202:	d427      	bmi.n	8009254 <__sflush_r+0xb0>
 8009204:	2200      	movs	r2, #0
 8009206:	6062      	str	r2, [r4, #4]
 8009208:	6922      	ldr	r2, [r4, #16]
 800920a:	04d9      	lsls	r1, r3, #19
 800920c:	6022      	str	r2, [r4, #0]
 800920e:	d504      	bpl.n	800921a <__sflush_r+0x76>
 8009210:	1c42      	adds	r2, r0, #1
 8009212:	d101      	bne.n	8009218 <__sflush_r+0x74>
 8009214:	682b      	ldr	r3, [r5, #0]
 8009216:	b903      	cbnz	r3, 800921a <__sflush_r+0x76>
 8009218:	6560      	str	r0, [r4, #84]	@ 0x54
 800921a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800921c:	602f      	str	r7, [r5, #0]
 800921e:	b1b9      	cbz	r1, 8009250 <__sflush_r+0xac>
 8009220:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009224:	4299      	cmp	r1, r3
 8009226:	d002      	beq.n	800922e <__sflush_r+0x8a>
 8009228:	4628      	mov	r0, r5
 800922a:	f7fe fe1d 	bl	8007e68 <_free_r>
 800922e:	2300      	movs	r3, #0
 8009230:	6363      	str	r3, [r4, #52]	@ 0x34
 8009232:	e00d      	b.n	8009250 <__sflush_r+0xac>
 8009234:	2301      	movs	r3, #1
 8009236:	4628      	mov	r0, r5
 8009238:	47b0      	blx	r6
 800923a:	4602      	mov	r2, r0
 800923c:	1c50      	adds	r0, r2, #1
 800923e:	d1c9      	bne.n	80091d4 <__sflush_r+0x30>
 8009240:	682b      	ldr	r3, [r5, #0]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d0c6      	beq.n	80091d4 <__sflush_r+0x30>
 8009246:	2b1d      	cmp	r3, #29
 8009248:	d001      	beq.n	800924e <__sflush_r+0xaa>
 800924a:	2b16      	cmp	r3, #22
 800924c:	d11d      	bne.n	800928a <__sflush_r+0xe6>
 800924e:	602f      	str	r7, [r5, #0]
 8009250:	2000      	movs	r0, #0
 8009252:	e021      	b.n	8009298 <__sflush_r+0xf4>
 8009254:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009258:	b21b      	sxth	r3, r3
 800925a:	e01a      	b.n	8009292 <__sflush_r+0xee>
 800925c:	690f      	ldr	r7, [r1, #16]
 800925e:	2f00      	cmp	r7, #0
 8009260:	d0f6      	beq.n	8009250 <__sflush_r+0xac>
 8009262:	0793      	lsls	r3, r2, #30
 8009264:	bf18      	it	ne
 8009266:	2300      	movne	r3, #0
 8009268:	680e      	ldr	r6, [r1, #0]
 800926a:	bf08      	it	eq
 800926c:	694b      	ldreq	r3, [r1, #20]
 800926e:	1bf6      	subs	r6, r6, r7
 8009270:	600f      	str	r7, [r1, #0]
 8009272:	608b      	str	r3, [r1, #8]
 8009274:	2e00      	cmp	r6, #0
 8009276:	ddeb      	ble.n	8009250 <__sflush_r+0xac>
 8009278:	4633      	mov	r3, r6
 800927a:	463a      	mov	r2, r7
 800927c:	4628      	mov	r0, r5
 800927e:	6a21      	ldr	r1, [r4, #32]
 8009280:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8009284:	47e0      	blx	ip
 8009286:	2800      	cmp	r0, #0
 8009288:	dc07      	bgt.n	800929a <__sflush_r+0xf6>
 800928a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800928e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009292:	f04f 30ff 	mov.w	r0, #4294967295
 8009296:	81a3      	strh	r3, [r4, #12]
 8009298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800929a:	4407      	add	r7, r0
 800929c:	1a36      	subs	r6, r6, r0
 800929e:	e7e9      	b.n	8009274 <__sflush_r+0xd0>
 80092a0:	dfbffffe 	.word	0xdfbffffe

080092a4 <_fflush_r>:
 80092a4:	b538      	push	{r3, r4, r5, lr}
 80092a6:	690b      	ldr	r3, [r1, #16]
 80092a8:	4605      	mov	r5, r0
 80092aa:	460c      	mov	r4, r1
 80092ac:	b913      	cbnz	r3, 80092b4 <_fflush_r+0x10>
 80092ae:	2500      	movs	r5, #0
 80092b0:	4628      	mov	r0, r5
 80092b2:	bd38      	pop	{r3, r4, r5, pc}
 80092b4:	b118      	cbz	r0, 80092be <_fflush_r+0x1a>
 80092b6:	6a03      	ldr	r3, [r0, #32]
 80092b8:	b90b      	cbnz	r3, 80092be <_fflush_r+0x1a>
 80092ba:	f7fd fe25 	bl	8006f08 <__sinit>
 80092be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d0f3      	beq.n	80092ae <_fflush_r+0xa>
 80092c6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80092c8:	07d0      	lsls	r0, r2, #31
 80092ca:	d404      	bmi.n	80092d6 <_fflush_r+0x32>
 80092cc:	0599      	lsls	r1, r3, #22
 80092ce:	d402      	bmi.n	80092d6 <_fflush_r+0x32>
 80092d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80092d2:	f7fd ff52 	bl	800717a <__retarget_lock_acquire_recursive>
 80092d6:	4628      	mov	r0, r5
 80092d8:	4621      	mov	r1, r4
 80092da:	f7ff ff63 	bl	80091a4 <__sflush_r>
 80092de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80092e0:	4605      	mov	r5, r0
 80092e2:	07da      	lsls	r2, r3, #31
 80092e4:	d4e4      	bmi.n	80092b0 <_fflush_r+0xc>
 80092e6:	89a3      	ldrh	r3, [r4, #12]
 80092e8:	059b      	lsls	r3, r3, #22
 80092ea:	d4e1      	bmi.n	80092b0 <_fflush_r+0xc>
 80092ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80092ee:	f7fd ff45 	bl	800717c <__retarget_lock_release_recursive>
 80092f2:	e7dd      	b.n	80092b0 <_fflush_r+0xc>

080092f4 <memmove>:
 80092f4:	4288      	cmp	r0, r1
 80092f6:	b510      	push	{r4, lr}
 80092f8:	eb01 0402 	add.w	r4, r1, r2
 80092fc:	d902      	bls.n	8009304 <memmove+0x10>
 80092fe:	4284      	cmp	r4, r0
 8009300:	4623      	mov	r3, r4
 8009302:	d807      	bhi.n	8009314 <memmove+0x20>
 8009304:	1e43      	subs	r3, r0, #1
 8009306:	42a1      	cmp	r1, r4
 8009308:	d008      	beq.n	800931c <memmove+0x28>
 800930a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800930e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009312:	e7f8      	b.n	8009306 <memmove+0x12>
 8009314:	4601      	mov	r1, r0
 8009316:	4402      	add	r2, r0
 8009318:	428a      	cmp	r2, r1
 800931a:	d100      	bne.n	800931e <memmove+0x2a>
 800931c:	bd10      	pop	{r4, pc}
 800931e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009322:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009326:	e7f7      	b.n	8009318 <memmove+0x24>

08009328 <__assert_func>:
 8009328:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800932a:	4614      	mov	r4, r2
 800932c:	461a      	mov	r2, r3
 800932e:	4b09      	ldr	r3, [pc, #36]	@ (8009354 <__assert_func+0x2c>)
 8009330:	4605      	mov	r5, r0
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	68d8      	ldr	r0, [r3, #12]
 8009336:	b954      	cbnz	r4, 800934e <__assert_func+0x26>
 8009338:	4b07      	ldr	r3, [pc, #28]	@ (8009358 <__assert_func+0x30>)
 800933a:	461c      	mov	r4, r3
 800933c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009340:	9100      	str	r1, [sp, #0]
 8009342:	462b      	mov	r3, r5
 8009344:	4905      	ldr	r1, [pc, #20]	@ (800935c <__assert_func+0x34>)
 8009346:	f000 f84f 	bl	80093e8 <fiprintf>
 800934a:	f000 f85f 	bl	800940c <abort>
 800934e:	4b04      	ldr	r3, [pc, #16]	@ (8009360 <__assert_func+0x38>)
 8009350:	e7f4      	b.n	800933c <__assert_func+0x14>
 8009352:	bf00      	nop
 8009354:	20000264 	.word	0x20000264
 8009358:	0800a9bd 	.word	0x0800a9bd
 800935c:	0800a98f 	.word	0x0800a98f
 8009360:	0800a982 	.word	0x0800a982

08009364 <_calloc_r>:
 8009364:	b570      	push	{r4, r5, r6, lr}
 8009366:	fba1 5402 	umull	r5, r4, r1, r2
 800936a:	b93c      	cbnz	r4, 800937c <_calloc_r+0x18>
 800936c:	4629      	mov	r1, r5
 800936e:	f7fc fa51 	bl	8005814 <_malloc_r>
 8009372:	4606      	mov	r6, r0
 8009374:	b928      	cbnz	r0, 8009382 <_calloc_r+0x1e>
 8009376:	2600      	movs	r6, #0
 8009378:	4630      	mov	r0, r6
 800937a:	bd70      	pop	{r4, r5, r6, pc}
 800937c:	220c      	movs	r2, #12
 800937e:	6002      	str	r2, [r0, #0]
 8009380:	e7f9      	b.n	8009376 <_calloc_r+0x12>
 8009382:	462a      	mov	r2, r5
 8009384:	4621      	mov	r1, r4
 8009386:	f7fd fe58 	bl	800703a <memset>
 800938a:	e7f5      	b.n	8009378 <_calloc_r+0x14>

0800938c <_realloc_r>:
 800938c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009390:	4680      	mov	r8, r0
 8009392:	4615      	mov	r5, r2
 8009394:	460c      	mov	r4, r1
 8009396:	b921      	cbnz	r1, 80093a2 <_realloc_r+0x16>
 8009398:	4611      	mov	r1, r2
 800939a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800939e:	f7fc ba39 	b.w	8005814 <_malloc_r>
 80093a2:	b92a      	cbnz	r2, 80093b0 <_realloc_r+0x24>
 80093a4:	f7fe fd60 	bl	8007e68 <_free_r>
 80093a8:	2400      	movs	r4, #0
 80093aa:	4620      	mov	r0, r4
 80093ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093b0:	f000 f833 	bl	800941a <_malloc_usable_size_r>
 80093b4:	4285      	cmp	r5, r0
 80093b6:	4606      	mov	r6, r0
 80093b8:	d802      	bhi.n	80093c0 <_realloc_r+0x34>
 80093ba:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80093be:	d8f4      	bhi.n	80093aa <_realloc_r+0x1e>
 80093c0:	4629      	mov	r1, r5
 80093c2:	4640      	mov	r0, r8
 80093c4:	f7fc fa26 	bl	8005814 <_malloc_r>
 80093c8:	4607      	mov	r7, r0
 80093ca:	2800      	cmp	r0, #0
 80093cc:	d0ec      	beq.n	80093a8 <_realloc_r+0x1c>
 80093ce:	42b5      	cmp	r5, r6
 80093d0:	462a      	mov	r2, r5
 80093d2:	4621      	mov	r1, r4
 80093d4:	bf28      	it	cs
 80093d6:	4632      	movcs	r2, r6
 80093d8:	f7fd fedf 	bl	800719a <memcpy>
 80093dc:	4621      	mov	r1, r4
 80093de:	4640      	mov	r0, r8
 80093e0:	f7fe fd42 	bl	8007e68 <_free_r>
 80093e4:	463c      	mov	r4, r7
 80093e6:	e7e0      	b.n	80093aa <_realloc_r+0x1e>

080093e8 <fiprintf>:
 80093e8:	b40e      	push	{r1, r2, r3}
 80093ea:	b503      	push	{r0, r1, lr}
 80093ec:	4601      	mov	r1, r0
 80093ee:	ab03      	add	r3, sp, #12
 80093f0:	4805      	ldr	r0, [pc, #20]	@ (8009408 <fiprintf+0x20>)
 80093f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80093f6:	6800      	ldr	r0, [r0, #0]
 80093f8:	9301      	str	r3, [sp, #4]
 80093fa:	f000 f83d 	bl	8009478 <_vfiprintf_r>
 80093fe:	b002      	add	sp, #8
 8009400:	f85d eb04 	ldr.w	lr, [sp], #4
 8009404:	b003      	add	sp, #12
 8009406:	4770      	bx	lr
 8009408:	20000264 	.word	0x20000264

0800940c <abort>:
 800940c:	2006      	movs	r0, #6
 800940e:	b508      	push	{r3, lr}
 8009410:	f000 fa06 	bl	8009820 <raise>
 8009414:	2001      	movs	r0, #1
 8009416:	f7fa fbea 	bl	8003bee <_exit>

0800941a <_malloc_usable_size_r>:
 800941a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800941e:	1f18      	subs	r0, r3, #4
 8009420:	2b00      	cmp	r3, #0
 8009422:	bfbc      	itt	lt
 8009424:	580b      	ldrlt	r3, [r1, r0]
 8009426:	18c0      	addlt	r0, r0, r3
 8009428:	4770      	bx	lr

0800942a <__sfputc_r>:
 800942a:	6893      	ldr	r3, [r2, #8]
 800942c:	b410      	push	{r4}
 800942e:	3b01      	subs	r3, #1
 8009430:	2b00      	cmp	r3, #0
 8009432:	6093      	str	r3, [r2, #8]
 8009434:	da07      	bge.n	8009446 <__sfputc_r+0x1c>
 8009436:	6994      	ldr	r4, [r2, #24]
 8009438:	42a3      	cmp	r3, r4
 800943a:	db01      	blt.n	8009440 <__sfputc_r+0x16>
 800943c:	290a      	cmp	r1, #10
 800943e:	d102      	bne.n	8009446 <__sfputc_r+0x1c>
 8009440:	bc10      	pop	{r4}
 8009442:	f000 b931 	b.w	80096a8 <__swbuf_r>
 8009446:	6813      	ldr	r3, [r2, #0]
 8009448:	1c58      	adds	r0, r3, #1
 800944a:	6010      	str	r0, [r2, #0]
 800944c:	7019      	strb	r1, [r3, #0]
 800944e:	4608      	mov	r0, r1
 8009450:	bc10      	pop	{r4}
 8009452:	4770      	bx	lr

08009454 <__sfputs_r>:
 8009454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009456:	4606      	mov	r6, r0
 8009458:	460f      	mov	r7, r1
 800945a:	4614      	mov	r4, r2
 800945c:	18d5      	adds	r5, r2, r3
 800945e:	42ac      	cmp	r4, r5
 8009460:	d101      	bne.n	8009466 <__sfputs_r+0x12>
 8009462:	2000      	movs	r0, #0
 8009464:	e007      	b.n	8009476 <__sfputs_r+0x22>
 8009466:	463a      	mov	r2, r7
 8009468:	4630      	mov	r0, r6
 800946a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800946e:	f7ff ffdc 	bl	800942a <__sfputc_r>
 8009472:	1c43      	adds	r3, r0, #1
 8009474:	d1f3      	bne.n	800945e <__sfputs_r+0xa>
 8009476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009478 <_vfiprintf_r>:
 8009478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800947c:	460d      	mov	r5, r1
 800947e:	4614      	mov	r4, r2
 8009480:	4698      	mov	r8, r3
 8009482:	4606      	mov	r6, r0
 8009484:	b09d      	sub	sp, #116	@ 0x74
 8009486:	b118      	cbz	r0, 8009490 <_vfiprintf_r+0x18>
 8009488:	6a03      	ldr	r3, [r0, #32]
 800948a:	b90b      	cbnz	r3, 8009490 <_vfiprintf_r+0x18>
 800948c:	f7fd fd3c 	bl	8006f08 <__sinit>
 8009490:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009492:	07d9      	lsls	r1, r3, #31
 8009494:	d405      	bmi.n	80094a2 <_vfiprintf_r+0x2a>
 8009496:	89ab      	ldrh	r3, [r5, #12]
 8009498:	059a      	lsls	r2, r3, #22
 800949a:	d402      	bmi.n	80094a2 <_vfiprintf_r+0x2a>
 800949c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800949e:	f7fd fe6c 	bl	800717a <__retarget_lock_acquire_recursive>
 80094a2:	89ab      	ldrh	r3, [r5, #12]
 80094a4:	071b      	lsls	r3, r3, #28
 80094a6:	d501      	bpl.n	80094ac <_vfiprintf_r+0x34>
 80094a8:	692b      	ldr	r3, [r5, #16]
 80094aa:	b99b      	cbnz	r3, 80094d4 <_vfiprintf_r+0x5c>
 80094ac:	4629      	mov	r1, r5
 80094ae:	4630      	mov	r0, r6
 80094b0:	f000 f938 	bl	8009724 <__swsetup_r>
 80094b4:	b170      	cbz	r0, 80094d4 <_vfiprintf_r+0x5c>
 80094b6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80094b8:	07dc      	lsls	r4, r3, #31
 80094ba:	d504      	bpl.n	80094c6 <_vfiprintf_r+0x4e>
 80094bc:	f04f 30ff 	mov.w	r0, #4294967295
 80094c0:	b01d      	add	sp, #116	@ 0x74
 80094c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094c6:	89ab      	ldrh	r3, [r5, #12]
 80094c8:	0598      	lsls	r0, r3, #22
 80094ca:	d4f7      	bmi.n	80094bc <_vfiprintf_r+0x44>
 80094cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80094ce:	f7fd fe55 	bl	800717c <__retarget_lock_release_recursive>
 80094d2:	e7f3      	b.n	80094bc <_vfiprintf_r+0x44>
 80094d4:	2300      	movs	r3, #0
 80094d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80094d8:	2320      	movs	r3, #32
 80094da:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80094de:	2330      	movs	r3, #48	@ 0x30
 80094e0:	f04f 0901 	mov.w	r9, #1
 80094e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80094e8:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8009694 <_vfiprintf_r+0x21c>
 80094ec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80094f0:	4623      	mov	r3, r4
 80094f2:	469a      	mov	sl, r3
 80094f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80094f8:	b10a      	cbz	r2, 80094fe <_vfiprintf_r+0x86>
 80094fa:	2a25      	cmp	r2, #37	@ 0x25
 80094fc:	d1f9      	bne.n	80094f2 <_vfiprintf_r+0x7a>
 80094fe:	ebba 0b04 	subs.w	fp, sl, r4
 8009502:	d00b      	beq.n	800951c <_vfiprintf_r+0xa4>
 8009504:	465b      	mov	r3, fp
 8009506:	4622      	mov	r2, r4
 8009508:	4629      	mov	r1, r5
 800950a:	4630      	mov	r0, r6
 800950c:	f7ff ffa2 	bl	8009454 <__sfputs_r>
 8009510:	3001      	adds	r0, #1
 8009512:	f000 80a7 	beq.w	8009664 <_vfiprintf_r+0x1ec>
 8009516:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009518:	445a      	add	r2, fp
 800951a:	9209      	str	r2, [sp, #36]	@ 0x24
 800951c:	f89a 3000 	ldrb.w	r3, [sl]
 8009520:	2b00      	cmp	r3, #0
 8009522:	f000 809f 	beq.w	8009664 <_vfiprintf_r+0x1ec>
 8009526:	2300      	movs	r3, #0
 8009528:	f04f 32ff 	mov.w	r2, #4294967295
 800952c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009530:	f10a 0a01 	add.w	sl, sl, #1
 8009534:	9304      	str	r3, [sp, #16]
 8009536:	9307      	str	r3, [sp, #28]
 8009538:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800953c:	931a      	str	r3, [sp, #104]	@ 0x68
 800953e:	4654      	mov	r4, sl
 8009540:	2205      	movs	r2, #5
 8009542:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009546:	4853      	ldr	r0, [pc, #332]	@ (8009694 <_vfiprintf_r+0x21c>)
 8009548:	f7fd fe19 	bl	800717e <memchr>
 800954c:	9a04      	ldr	r2, [sp, #16]
 800954e:	b9d8      	cbnz	r0, 8009588 <_vfiprintf_r+0x110>
 8009550:	06d1      	lsls	r1, r2, #27
 8009552:	bf44      	itt	mi
 8009554:	2320      	movmi	r3, #32
 8009556:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800955a:	0713      	lsls	r3, r2, #28
 800955c:	bf44      	itt	mi
 800955e:	232b      	movmi	r3, #43	@ 0x2b
 8009560:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009564:	f89a 3000 	ldrb.w	r3, [sl]
 8009568:	2b2a      	cmp	r3, #42	@ 0x2a
 800956a:	d015      	beq.n	8009598 <_vfiprintf_r+0x120>
 800956c:	4654      	mov	r4, sl
 800956e:	2000      	movs	r0, #0
 8009570:	f04f 0c0a 	mov.w	ip, #10
 8009574:	9a07      	ldr	r2, [sp, #28]
 8009576:	4621      	mov	r1, r4
 8009578:	f811 3b01 	ldrb.w	r3, [r1], #1
 800957c:	3b30      	subs	r3, #48	@ 0x30
 800957e:	2b09      	cmp	r3, #9
 8009580:	d94b      	bls.n	800961a <_vfiprintf_r+0x1a2>
 8009582:	b1b0      	cbz	r0, 80095b2 <_vfiprintf_r+0x13a>
 8009584:	9207      	str	r2, [sp, #28]
 8009586:	e014      	b.n	80095b2 <_vfiprintf_r+0x13a>
 8009588:	eba0 0308 	sub.w	r3, r0, r8
 800958c:	fa09 f303 	lsl.w	r3, r9, r3
 8009590:	4313      	orrs	r3, r2
 8009592:	46a2      	mov	sl, r4
 8009594:	9304      	str	r3, [sp, #16]
 8009596:	e7d2      	b.n	800953e <_vfiprintf_r+0xc6>
 8009598:	9b03      	ldr	r3, [sp, #12]
 800959a:	1d19      	adds	r1, r3, #4
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	9103      	str	r1, [sp, #12]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	bfbb      	ittet	lt
 80095a4:	425b      	neglt	r3, r3
 80095a6:	f042 0202 	orrlt.w	r2, r2, #2
 80095aa:	9307      	strge	r3, [sp, #28]
 80095ac:	9307      	strlt	r3, [sp, #28]
 80095ae:	bfb8      	it	lt
 80095b0:	9204      	strlt	r2, [sp, #16]
 80095b2:	7823      	ldrb	r3, [r4, #0]
 80095b4:	2b2e      	cmp	r3, #46	@ 0x2e
 80095b6:	d10a      	bne.n	80095ce <_vfiprintf_r+0x156>
 80095b8:	7863      	ldrb	r3, [r4, #1]
 80095ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80095bc:	d132      	bne.n	8009624 <_vfiprintf_r+0x1ac>
 80095be:	9b03      	ldr	r3, [sp, #12]
 80095c0:	3402      	adds	r4, #2
 80095c2:	1d1a      	adds	r2, r3, #4
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	9203      	str	r2, [sp, #12]
 80095c8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80095cc:	9305      	str	r3, [sp, #20]
 80095ce:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8009698 <_vfiprintf_r+0x220>
 80095d2:	2203      	movs	r2, #3
 80095d4:	4650      	mov	r0, sl
 80095d6:	7821      	ldrb	r1, [r4, #0]
 80095d8:	f7fd fdd1 	bl	800717e <memchr>
 80095dc:	b138      	cbz	r0, 80095ee <_vfiprintf_r+0x176>
 80095de:	2240      	movs	r2, #64	@ 0x40
 80095e0:	9b04      	ldr	r3, [sp, #16]
 80095e2:	eba0 000a 	sub.w	r0, r0, sl
 80095e6:	4082      	lsls	r2, r0
 80095e8:	4313      	orrs	r3, r2
 80095ea:	3401      	adds	r4, #1
 80095ec:	9304      	str	r3, [sp, #16]
 80095ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095f2:	2206      	movs	r2, #6
 80095f4:	4829      	ldr	r0, [pc, #164]	@ (800969c <_vfiprintf_r+0x224>)
 80095f6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80095fa:	f7fd fdc0 	bl	800717e <memchr>
 80095fe:	2800      	cmp	r0, #0
 8009600:	d03f      	beq.n	8009682 <_vfiprintf_r+0x20a>
 8009602:	4b27      	ldr	r3, [pc, #156]	@ (80096a0 <_vfiprintf_r+0x228>)
 8009604:	bb1b      	cbnz	r3, 800964e <_vfiprintf_r+0x1d6>
 8009606:	9b03      	ldr	r3, [sp, #12]
 8009608:	3307      	adds	r3, #7
 800960a:	f023 0307 	bic.w	r3, r3, #7
 800960e:	3308      	adds	r3, #8
 8009610:	9303      	str	r3, [sp, #12]
 8009612:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009614:	443b      	add	r3, r7
 8009616:	9309      	str	r3, [sp, #36]	@ 0x24
 8009618:	e76a      	b.n	80094f0 <_vfiprintf_r+0x78>
 800961a:	460c      	mov	r4, r1
 800961c:	2001      	movs	r0, #1
 800961e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009622:	e7a8      	b.n	8009576 <_vfiprintf_r+0xfe>
 8009624:	2300      	movs	r3, #0
 8009626:	f04f 0c0a 	mov.w	ip, #10
 800962a:	4619      	mov	r1, r3
 800962c:	3401      	adds	r4, #1
 800962e:	9305      	str	r3, [sp, #20]
 8009630:	4620      	mov	r0, r4
 8009632:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009636:	3a30      	subs	r2, #48	@ 0x30
 8009638:	2a09      	cmp	r2, #9
 800963a:	d903      	bls.n	8009644 <_vfiprintf_r+0x1cc>
 800963c:	2b00      	cmp	r3, #0
 800963e:	d0c6      	beq.n	80095ce <_vfiprintf_r+0x156>
 8009640:	9105      	str	r1, [sp, #20]
 8009642:	e7c4      	b.n	80095ce <_vfiprintf_r+0x156>
 8009644:	4604      	mov	r4, r0
 8009646:	2301      	movs	r3, #1
 8009648:	fb0c 2101 	mla	r1, ip, r1, r2
 800964c:	e7f0      	b.n	8009630 <_vfiprintf_r+0x1b8>
 800964e:	ab03      	add	r3, sp, #12
 8009650:	9300      	str	r3, [sp, #0]
 8009652:	462a      	mov	r2, r5
 8009654:	4630      	mov	r0, r6
 8009656:	4b13      	ldr	r3, [pc, #76]	@ (80096a4 <_vfiprintf_r+0x22c>)
 8009658:	a904      	add	r1, sp, #16
 800965a:	f7fd f80b 	bl	8006674 <_printf_float>
 800965e:	4607      	mov	r7, r0
 8009660:	1c78      	adds	r0, r7, #1
 8009662:	d1d6      	bne.n	8009612 <_vfiprintf_r+0x19a>
 8009664:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009666:	07d9      	lsls	r1, r3, #31
 8009668:	d405      	bmi.n	8009676 <_vfiprintf_r+0x1fe>
 800966a:	89ab      	ldrh	r3, [r5, #12]
 800966c:	059a      	lsls	r2, r3, #22
 800966e:	d402      	bmi.n	8009676 <_vfiprintf_r+0x1fe>
 8009670:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009672:	f7fd fd83 	bl	800717c <__retarget_lock_release_recursive>
 8009676:	89ab      	ldrh	r3, [r5, #12]
 8009678:	065b      	lsls	r3, r3, #25
 800967a:	f53f af1f 	bmi.w	80094bc <_vfiprintf_r+0x44>
 800967e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009680:	e71e      	b.n	80094c0 <_vfiprintf_r+0x48>
 8009682:	ab03      	add	r3, sp, #12
 8009684:	9300      	str	r3, [sp, #0]
 8009686:	462a      	mov	r2, r5
 8009688:	4630      	mov	r0, r6
 800968a:	4b06      	ldr	r3, [pc, #24]	@ (80096a4 <_vfiprintf_r+0x22c>)
 800968c:	a904      	add	r1, sp, #16
 800968e:	f7fd fa8f 	bl	8006bb0 <_printf_i>
 8009692:	e7e4      	b.n	800965e <_vfiprintf_r+0x1e6>
 8009694:	0800a971 	.word	0x0800a971
 8009698:	0800a977 	.word	0x0800a977
 800969c:	0800a97b 	.word	0x0800a97b
 80096a0:	08006675 	.word	0x08006675
 80096a4:	08009455 	.word	0x08009455

080096a8 <__swbuf_r>:
 80096a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096aa:	460e      	mov	r6, r1
 80096ac:	4614      	mov	r4, r2
 80096ae:	4605      	mov	r5, r0
 80096b0:	b118      	cbz	r0, 80096ba <__swbuf_r+0x12>
 80096b2:	6a03      	ldr	r3, [r0, #32]
 80096b4:	b90b      	cbnz	r3, 80096ba <__swbuf_r+0x12>
 80096b6:	f7fd fc27 	bl	8006f08 <__sinit>
 80096ba:	69a3      	ldr	r3, [r4, #24]
 80096bc:	60a3      	str	r3, [r4, #8]
 80096be:	89a3      	ldrh	r3, [r4, #12]
 80096c0:	071a      	lsls	r2, r3, #28
 80096c2:	d501      	bpl.n	80096c8 <__swbuf_r+0x20>
 80096c4:	6923      	ldr	r3, [r4, #16]
 80096c6:	b943      	cbnz	r3, 80096da <__swbuf_r+0x32>
 80096c8:	4621      	mov	r1, r4
 80096ca:	4628      	mov	r0, r5
 80096cc:	f000 f82a 	bl	8009724 <__swsetup_r>
 80096d0:	b118      	cbz	r0, 80096da <__swbuf_r+0x32>
 80096d2:	f04f 37ff 	mov.w	r7, #4294967295
 80096d6:	4638      	mov	r0, r7
 80096d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096da:	6823      	ldr	r3, [r4, #0]
 80096dc:	6922      	ldr	r2, [r4, #16]
 80096de:	b2f6      	uxtb	r6, r6
 80096e0:	1a98      	subs	r0, r3, r2
 80096e2:	6963      	ldr	r3, [r4, #20]
 80096e4:	4637      	mov	r7, r6
 80096e6:	4283      	cmp	r3, r0
 80096e8:	dc05      	bgt.n	80096f6 <__swbuf_r+0x4e>
 80096ea:	4621      	mov	r1, r4
 80096ec:	4628      	mov	r0, r5
 80096ee:	f7ff fdd9 	bl	80092a4 <_fflush_r>
 80096f2:	2800      	cmp	r0, #0
 80096f4:	d1ed      	bne.n	80096d2 <__swbuf_r+0x2a>
 80096f6:	68a3      	ldr	r3, [r4, #8]
 80096f8:	3b01      	subs	r3, #1
 80096fa:	60a3      	str	r3, [r4, #8]
 80096fc:	6823      	ldr	r3, [r4, #0]
 80096fe:	1c5a      	adds	r2, r3, #1
 8009700:	6022      	str	r2, [r4, #0]
 8009702:	701e      	strb	r6, [r3, #0]
 8009704:	6962      	ldr	r2, [r4, #20]
 8009706:	1c43      	adds	r3, r0, #1
 8009708:	429a      	cmp	r2, r3
 800970a:	d004      	beq.n	8009716 <__swbuf_r+0x6e>
 800970c:	89a3      	ldrh	r3, [r4, #12]
 800970e:	07db      	lsls	r3, r3, #31
 8009710:	d5e1      	bpl.n	80096d6 <__swbuf_r+0x2e>
 8009712:	2e0a      	cmp	r6, #10
 8009714:	d1df      	bne.n	80096d6 <__swbuf_r+0x2e>
 8009716:	4621      	mov	r1, r4
 8009718:	4628      	mov	r0, r5
 800971a:	f7ff fdc3 	bl	80092a4 <_fflush_r>
 800971e:	2800      	cmp	r0, #0
 8009720:	d0d9      	beq.n	80096d6 <__swbuf_r+0x2e>
 8009722:	e7d6      	b.n	80096d2 <__swbuf_r+0x2a>

08009724 <__swsetup_r>:
 8009724:	b538      	push	{r3, r4, r5, lr}
 8009726:	4b29      	ldr	r3, [pc, #164]	@ (80097cc <__swsetup_r+0xa8>)
 8009728:	4605      	mov	r5, r0
 800972a:	6818      	ldr	r0, [r3, #0]
 800972c:	460c      	mov	r4, r1
 800972e:	b118      	cbz	r0, 8009738 <__swsetup_r+0x14>
 8009730:	6a03      	ldr	r3, [r0, #32]
 8009732:	b90b      	cbnz	r3, 8009738 <__swsetup_r+0x14>
 8009734:	f7fd fbe8 	bl	8006f08 <__sinit>
 8009738:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800973c:	0719      	lsls	r1, r3, #28
 800973e:	d422      	bmi.n	8009786 <__swsetup_r+0x62>
 8009740:	06da      	lsls	r2, r3, #27
 8009742:	d407      	bmi.n	8009754 <__swsetup_r+0x30>
 8009744:	2209      	movs	r2, #9
 8009746:	602a      	str	r2, [r5, #0]
 8009748:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800974c:	f04f 30ff 	mov.w	r0, #4294967295
 8009750:	81a3      	strh	r3, [r4, #12]
 8009752:	e033      	b.n	80097bc <__swsetup_r+0x98>
 8009754:	0758      	lsls	r0, r3, #29
 8009756:	d512      	bpl.n	800977e <__swsetup_r+0x5a>
 8009758:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800975a:	b141      	cbz	r1, 800976e <__swsetup_r+0x4a>
 800975c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009760:	4299      	cmp	r1, r3
 8009762:	d002      	beq.n	800976a <__swsetup_r+0x46>
 8009764:	4628      	mov	r0, r5
 8009766:	f7fe fb7f 	bl	8007e68 <_free_r>
 800976a:	2300      	movs	r3, #0
 800976c:	6363      	str	r3, [r4, #52]	@ 0x34
 800976e:	89a3      	ldrh	r3, [r4, #12]
 8009770:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009774:	81a3      	strh	r3, [r4, #12]
 8009776:	2300      	movs	r3, #0
 8009778:	6063      	str	r3, [r4, #4]
 800977a:	6923      	ldr	r3, [r4, #16]
 800977c:	6023      	str	r3, [r4, #0]
 800977e:	89a3      	ldrh	r3, [r4, #12]
 8009780:	f043 0308 	orr.w	r3, r3, #8
 8009784:	81a3      	strh	r3, [r4, #12]
 8009786:	6923      	ldr	r3, [r4, #16]
 8009788:	b94b      	cbnz	r3, 800979e <__swsetup_r+0x7a>
 800978a:	89a3      	ldrh	r3, [r4, #12]
 800978c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009790:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009794:	d003      	beq.n	800979e <__swsetup_r+0x7a>
 8009796:	4621      	mov	r1, r4
 8009798:	4628      	mov	r0, r5
 800979a:	f000 f882 	bl	80098a2 <__smakebuf_r>
 800979e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097a2:	f013 0201 	ands.w	r2, r3, #1
 80097a6:	d00a      	beq.n	80097be <__swsetup_r+0x9a>
 80097a8:	2200      	movs	r2, #0
 80097aa:	60a2      	str	r2, [r4, #8]
 80097ac:	6962      	ldr	r2, [r4, #20]
 80097ae:	4252      	negs	r2, r2
 80097b0:	61a2      	str	r2, [r4, #24]
 80097b2:	6922      	ldr	r2, [r4, #16]
 80097b4:	b942      	cbnz	r2, 80097c8 <__swsetup_r+0xa4>
 80097b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80097ba:	d1c5      	bne.n	8009748 <__swsetup_r+0x24>
 80097bc:	bd38      	pop	{r3, r4, r5, pc}
 80097be:	0799      	lsls	r1, r3, #30
 80097c0:	bf58      	it	pl
 80097c2:	6962      	ldrpl	r2, [r4, #20]
 80097c4:	60a2      	str	r2, [r4, #8]
 80097c6:	e7f4      	b.n	80097b2 <__swsetup_r+0x8e>
 80097c8:	2000      	movs	r0, #0
 80097ca:	e7f7      	b.n	80097bc <__swsetup_r+0x98>
 80097cc:	20000264 	.word	0x20000264

080097d0 <_raise_r>:
 80097d0:	291f      	cmp	r1, #31
 80097d2:	b538      	push	{r3, r4, r5, lr}
 80097d4:	4605      	mov	r5, r0
 80097d6:	460c      	mov	r4, r1
 80097d8:	d904      	bls.n	80097e4 <_raise_r+0x14>
 80097da:	2316      	movs	r3, #22
 80097dc:	6003      	str	r3, [r0, #0]
 80097de:	f04f 30ff 	mov.w	r0, #4294967295
 80097e2:	bd38      	pop	{r3, r4, r5, pc}
 80097e4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80097e6:	b112      	cbz	r2, 80097ee <_raise_r+0x1e>
 80097e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80097ec:	b94b      	cbnz	r3, 8009802 <_raise_r+0x32>
 80097ee:	4628      	mov	r0, r5
 80097f0:	f000 f830 	bl	8009854 <_getpid_r>
 80097f4:	4622      	mov	r2, r4
 80097f6:	4601      	mov	r1, r0
 80097f8:	4628      	mov	r0, r5
 80097fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80097fe:	f000 b817 	b.w	8009830 <_kill_r>
 8009802:	2b01      	cmp	r3, #1
 8009804:	d00a      	beq.n	800981c <_raise_r+0x4c>
 8009806:	1c59      	adds	r1, r3, #1
 8009808:	d103      	bne.n	8009812 <_raise_r+0x42>
 800980a:	2316      	movs	r3, #22
 800980c:	6003      	str	r3, [r0, #0]
 800980e:	2001      	movs	r0, #1
 8009810:	e7e7      	b.n	80097e2 <_raise_r+0x12>
 8009812:	2100      	movs	r1, #0
 8009814:	4620      	mov	r0, r4
 8009816:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800981a:	4798      	blx	r3
 800981c:	2000      	movs	r0, #0
 800981e:	e7e0      	b.n	80097e2 <_raise_r+0x12>

08009820 <raise>:
 8009820:	4b02      	ldr	r3, [pc, #8]	@ (800982c <raise+0xc>)
 8009822:	4601      	mov	r1, r0
 8009824:	6818      	ldr	r0, [r3, #0]
 8009826:	f7ff bfd3 	b.w	80097d0 <_raise_r>
 800982a:	bf00      	nop
 800982c:	20000264 	.word	0x20000264

08009830 <_kill_r>:
 8009830:	b538      	push	{r3, r4, r5, lr}
 8009832:	2300      	movs	r3, #0
 8009834:	4d06      	ldr	r5, [pc, #24]	@ (8009850 <_kill_r+0x20>)
 8009836:	4604      	mov	r4, r0
 8009838:	4608      	mov	r0, r1
 800983a:	4611      	mov	r1, r2
 800983c:	602b      	str	r3, [r5, #0]
 800983e:	f7fa f9c6 	bl	8003bce <_kill>
 8009842:	1c43      	adds	r3, r0, #1
 8009844:	d102      	bne.n	800984c <_kill_r+0x1c>
 8009846:	682b      	ldr	r3, [r5, #0]
 8009848:	b103      	cbz	r3, 800984c <_kill_r+0x1c>
 800984a:	6023      	str	r3, [r4, #0]
 800984c:	bd38      	pop	{r3, r4, r5, pc}
 800984e:	bf00      	nop
 8009850:	200006c0 	.word	0x200006c0

08009854 <_getpid_r>:
 8009854:	f7fa b9b4 	b.w	8003bc0 <_getpid>

08009858 <__swhatbuf_r>:
 8009858:	b570      	push	{r4, r5, r6, lr}
 800985a:	460c      	mov	r4, r1
 800985c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009860:	4615      	mov	r5, r2
 8009862:	2900      	cmp	r1, #0
 8009864:	461e      	mov	r6, r3
 8009866:	b096      	sub	sp, #88	@ 0x58
 8009868:	da0c      	bge.n	8009884 <__swhatbuf_r+0x2c>
 800986a:	89a3      	ldrh	r3, [r4, #12]
 800986c:	2100      	movs	r1, #0
 800986e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009872:	bf14      	ite	ne
 8009874:	2340      	movne	r3, #64	@ 0x40
 8009876:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800987a:	2000      	movs	r0, #0
 800987c:	6031      	str	r1, [r6, #0]
 800987e:	602b      	str	r3, [r5, #0]
 8009880:	b016      	add	sp, #88	@ 0x58
 8009882:	bd70      	pop	{r4, r5, r6, pc}
 8009884:	466a      	mov	r2, sp
 8009886:	f000 f849 	bl	800991c <_fstat_r>
 800988a:	2800      	cmp	r0, #0
 800988c:	dbed      	blt.n	800986a <__swhatbuf_r+0x12>
 800988e:	9901      	ldr	r1, [sp, #4]
 8009890:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009894:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009898:	4259      	negs	r1, r3
 800989a:	4159      	adcs	r1, r3
 800989c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80098a0:	e7eb      	b.n	800987a <__swhatbuf_r+0x22>

080098a2 <__smakebuf_r>:
 80098a2:	898b      	ldrh	r3, [r1, #12]
 80098a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80098a6:	079d      	lsls	r5, r3, #30
 80098a8:	4606      	mov	r6, r0
 80098aa:	460c      	mov	r4, r1
 80098ac:	d507      	bpl.n	80098be <__smakebuf_r+0x1c>
 80098ae:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80098b2:	6023      	str	r3, [r4, #0]
 80098b4:	6123      	str	r3, [r4, #16]
 80098b6:	2301      	movs	r3, #1
 80098b8:	6163      	str	r3, [r4, #20]
 80098ba:	b003      	add	sp, #12
 80098bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098be:	466a      	mov	r2, sp
 80098c0:	ab01      	add	r3, sp, #4
 80098c2:	f7ff ffc9 	bl	8009858 <__swhatbuf_r>
 80098c6:	9f00      	ldr	r7, [sp, #0]
 80098c8:	4605      	mov	r5, r0
 80098ca:	4639      	mov	r1, r7
 80098cc:	4630      	mov	r0, r6
 80098ce:	f7fb ffa1 	bl	8005814 <_malloc_r>
 80098d2:	b948      	cbnz	r0, 80098e8 <__smakebuf_r+0x46>
 80098d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098d8:	059a      	lsls	r2, r3, #22
 80098da:	d4ee      	bmi.n	80098ba <__smakebuf_r+0x18>
 80098dc:	f023 0303 	bic.w	r3, r3, #3
 80098e0:	f043 0302 	orr.w	r3, r3, #2
 80098e4:	81a3      	strh	r3, [r4, #12]
 80098e6:	e7e2      	b.n	80098ae <__smakebuf_r+0xc>
 80098e8:	89a3      	ldrh	r3, [r4, #12]
 80098ea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80098ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80098f2:	81a3      	strh	r3, [r4, #12]
 80098f4:	9b01      	ldr	r3, [sp, #4]
 80098f6:	6020      	str	r0, [r4, #0]
 80098f8:	b15b      	cbz	r3, 8009912 <__smakebuf_r+0x70>
 80098fa:	4630      	mov	r0, r6
 80098fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009900:	f000 f81e 	bl	8009940 <_isatty_r>
 8009904:	b128      	cbz	r0, 8009912 <__smakebuf_r+0x70>
 8009906:	89a3      	ldrh	r3, [r4, #12]
 8009908:	f023 0303 	bic.w	r3, r3, #3
 800990c:	f043 0301 	orr.w	r3, r3, #1
 8009910:	81a3      	strh	r3, [r4, #12]
 8009912:	89a3      	ldrh	r3, [r4, #12]
 8009914:	431d      	orrs	r5, r3
 8009916:	81a5      	strh	r5, [r4, #12]
 8009918:	e7cf      	b.n	80098ba <__smakebuf_r+0x18>
	...

0800991c <_fstat_r>:
 800991c:	b538      	push	{r3, r4, r5, lr}
 800991e:	2300      	movs	r3, #0
 8009920:	4d06      	ldr	r5, [pc, #24]	@ (800993c <_fstat_r+0x20>)
 8009922:	4604      	mov	r4, r0
 8009924:	4608      	mov	r0, r1
 8009926:	4611      	mov	r1, r2
 8009928:	602b      	str	r3, [r5, #0]
 800992a:	f7fa f9af 	bl	8003c8c <_fstat>
 800992e:	1c43      	adds	r3, r0, #1
 8009930:	d102      	bne.n	8009938 <_fstat_r+0x1c>
 8009932:	682b      	ldr	r3, [r5, #0]
 8009934:	b103      	cbz	r3, 8009938 <_fstat_r+0x1c>
 8009936:	6023      	str	r3, [r4, #0]
 8009938:	bd38      	pop	{r3, r4, r5, pc}
 800993a:	bf00      	nop
 800993c:	200006c0 	.word	0x200006c0

08009940 <_isatty_r>:
 8009940:	b538      	push	{r3, r4, r5, lr}
 8009942:	2300      	movs	r3, #0
 8009944:	4d05      	ldr	r5, [pc, #20]	@ (800995c <_isatty_r+0x1c>)
 8009946:	4604      	mov	r4, r0
 8009948:	4608      	mov	r0, r1
 800994a:	602b      	str	r3, [r5, #0]
 800994c:	f7fa f9ad 	bl	8003caa <_isatty>
 8009950:	1c43      	adds	r3, r0, #1
 8009952:	d102      	bne.n	800995a <_isatty_r+0x1a>
 8009954:	682b      	ldr	r3, [r5, #0]
 8009956:	b103      	cbz	r3, 800995a <_isatty_r+0x1a>
 8009958:	6023      	str	r3, [r4, #0]
 800995a:	bd38      	pop	{r3, r4, r5, pc}
 800995c:	200006c0 	.word	0x200006c0

08009960 <_init>:
 8009960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009962:	bf00      	nop
 8009964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009966:	bc08      	pop	{r3}
 8009968:	469e      	mov	lr, r3
 800996a:	4770      	bx	lr

0800996c <_fini>:
 800996c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800996e:	bf00      	nop
 8009970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009972:	bc08      	pop	{r3}
 8009974:	469e      	mov	lr, r3
 8009976:	4770      	bx	lr
