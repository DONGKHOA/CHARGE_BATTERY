
CMD_Line.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001384  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08001524  08001524  00002524  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001544  08001544  0000300c  2**0
                  CONTENTS
  4 .ARM          00000008  08001544  08001544  00002544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800154c  0800154c  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800154c  0800154c  0000254c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001550  08001550  00002550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001554  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000475c  2000000c  08001560  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004768  08001560  00003768  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008c93  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000221e  00000000  00000000  0000bccf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00002be0  00000000  00000000  0000deed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000528  00000000  00000000  00010ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007c7  00000000  00000000  00010ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00010d7d  00000000  00000000  000117bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008e39  00000000  00000000  0002253c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0006e904  00000000  00000000  0002b375  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00099c79  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000ca4  00000000  00000000  00099cbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  0009a960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000000c 	.word	0x2000000c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800150c 	.word	0x0800150c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000010 	.word	0x20000010
 80001dc:	0800150c 	.word	0x0800150c

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <LL_USART_EnableIT_RXNE>:
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80004d0:	f100 030c 	add.w	r3, r0, #12
 80004d4:	e853 3f00 	ldrex	r3, [r3]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80004d8:	f043 0320 	orr.w	r3, r3, #32
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80004dc:	f100 010c 	add.w	r1, r0, #12
 80004e0:	e841 3200 	strex	r2, r3, [r1]
 80004e4:	2a00      	cmp	r2, #0
 80004e6:	d1f3      	bne.n	80004d0 <LL_USART_EnableIT_RXNE>
}
 80004e8:	4770      	bx	lr

080004ea <UARTConfig>:
 * determines whether echo functionality should be enabled for the UART communication. If `enable_echo`
 * is set to `true`, the UART will echo back received characters. If set to `false`, the UART will not
 * echo
 */
void UARTConfig(uart_cfg_t *uartstdio_device, USART_TypeDef * uart, IRQn_Type uart_irqn, bool enable_echo)
{
 80004ea:	b410      	push	{r4}
 80004ec:	4604      	mov	r4, r0
 80004ee:	4608      	mov	r0, r1
	uartstdio_device->uart = uart;
	uartstdio_device->uart_irqn = uart_irqn;
	uartstdio_device->enableEcho = enable_echo;
 80004f0:	f884 321d 	strb.w	r3, [r4, #541]	@ 0x21d
 * @param rb The parameter `rb` is a pointer to a `ring_buffer_t` structure, which is used to implement
 * a queue data structure.
 */
static inline void QUEUE_Init(ring_buffer_t *rb)
{
    rb->in = 0;
 80004f4:	2300      	movs	r3, #0
 80004f6:	f8c4 320c 	str.w	r3, [r4, #524]	@ 0x20c
	uartstdio_device->uart = uart;
 80004fa:	f8c4 1218 	str.w	r1, [r4, #536]	@ 0x218
    rb->out = 0;
 80004fe:	f8c4 3210 	str.w	r3, [r4, #528]	@ 0x210
	uartstdio_device->uart_irqn = uart_irqn;
 8000502:	f884 221c 	strb.w	r2, [r4, #540]	@ 0x21c
    rb->count = 0;
 8000506:	f8c4 3214 	str.w	r3, [r4, #532]	@ 0x214
    rb->in = 0;
 800050a:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
    rb->out = 0;
 800050e:	f8c4 3104 	str.w	r3, [r4, #260]	@ 0x104
    rb->count = 0;
 8000512:	f8c4 3108 	str.w	r3, [r4, #264]	@ 0x108
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000516:	f100 0314 	add.w	r3, r0, #20
 800051a:	e853 3f00 	ldrex	r3, [r3]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 800051e:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000522:	f100 0114 	add.w	r1, r0, #20
 8000526:	e841 3200 	strex	r2, r3, [r1]
 800052a:	2a00      	cmp	r2, #0
 800052c:	d1f3      	bne.n	8000516 <UARTConfig+0x2c>
}
 800052e:	f85d 4b04 	ldr.w	r4, [sp], #4
	LL_USART_EnableIT_RXNE(uart);
 8000532:	f7ff bfcd 	b.w	80004d0 <LL_USART_EnableIT_RXNE>

08000536 <UART_ISR>:
 *********************/

void UART_ISR (uart_cfg_t *uartstdio_device)
{
    /* if DR is not empty and the Rx Int is enabled */
    if ((LL_USART_IsActiveFlag_RXNE(uartstdio_device->uart) != RESET) &&
 8000536:	f8d0 3218 	ldr.w	r3, [r0, #536]	@ 0x218
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 800053a:	681a      	ldr	r2, [r3, #0]
 800053c:	0691      	lsls	r1, r2, #26
 800053e:	d514      	bpl.n	800056a <UART_ISR+0x34>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE(const USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 8000540:	68da      	ldr	r2, [r3, #12]
 8000542:	0692      	lsls	r2, r2, #26
 8000544:	d511      	bpl.n	800056a <UART_ISR+0x34>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8000546:	685a      	ldr	r2, [r3, #4]
 8000548:	685b      	ldr	r3, [r3, #4]
	*(rb->buffer + rb->in) = element;
 800054a:	f8d0 2100 	ldr.w	r2, [r0, #256]	@ 0x100
 800054e:	b2db      	uxtb	r3, r3
 8000550:	5483      	strb	r3, [r0, r2]
    rb->in = (rb->in + 1) & ((uint32_t)UART_BUFFER_SIZE - 1);
 8000552:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 8000556:	3301      	adds	r3, #1
 8000558:	b2db      	uxtb	r3, r3
 800055a:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
    rb->count++;
 800055e:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 8000562:	3301      	adds	r3, #1
 8000564:	f8c0 3108 	str.w	r3, [r0, #264]	@ 0x108
}
 8000568:	4770      	bx	lr
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 800056a:	681a      	ldr	r2, [r3, #0]
        QUEUE_Push_Data ((ring_buffer_t *)&uartstdio_device->rx_buffer, c);
        return;
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if ((LL_USART_IsActiveFlag_TXE(uartstdio_device->uart) != RESET) &&
 800056c:	0611      	lsls	r1, r2, #24
 800056e:	d511      	bpl.n	8000594 <UART_ISR+0x5e>
  return (READ_BIT(USARTx->CR1, USART_CR1_TXEIE) == (USART_CR1_TXEIE));
 8000570:	68da      	ldr	r2, [r3, #12]
 8000572:	0612      	lsls	r2, r2, #24
 8000574:	d50e      	bpl.n	8000594 <UART_ISR+0x5e>
	return (rb->count == 0);
 8000576:	f8d0 2214 	ldr.w	r2, [r0, #532]	@ 0x214
    			(LL_USART_IsEnabledIT_TXE(uartstdio_device->uart) != RESET))
    {
    	if (QUEUE_Is_Empty ((ring_buffer_t *)&uartstdio_device->tx_buffer))
 800057a:	b95a      	cbnz	r2, 8000594 <UART_ISR+0x5e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800057c:	f103 020c 	add.w	r2, r3, #12
 8000580:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8000584:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000588:	f103 000c 	add.w	r0, r3, #12
 800058c:	e840 2100 	strex	r1, r2, [r0]
 8000590:	2900      	cmp	r1, #0
 8000592:	d1f3      	bne.n	800057c <UART_ISR+0x46>
//    		uint8_t c;
//    		LL_USART_TransmitData8(uartstdio_device->uart, c);
    	}
        return;
    }
}
 8000594:	4770      	bx	lr
	...

08000598 <LL_AHB1_GRP1_EnableClock>:
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000598:	4b05      	ldr	r3, [pc, #20]	@ (80005b0 <LL_AHB1_GRP1_EnableClock+0x18>)
 800059a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800059c:	4302      	orrs	r2, r0
 800059e:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80005a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
{
 80005a2:	b082      	sub	sp, #8
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80005a4:	4003      	ands	r3, r0
 80005a6:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80005a8:	9b01      	ldr	r3, [sp, #4]
}
 80005aa:	b002      	add	sp, #8
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	40023800 	.word	0x40023800

080005b4 <NVIC_EncodePriority.constprop.0>:
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005b4:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005b8:	f1c0 0207 	rsb	r2, r0, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005bc:	1d03      	adds	r3, r0, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005be:	2a04      	cmp	r2, #4
 80005c0:	bf28      	it	cs
 80005c2:	2204      	movcs	r2, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005c4:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005c6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ca:	fa03 f302 	lsl.w	r3, r3, r2
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005ce:	bf8c      	ite	hi
 80005d0:	3803      	subhi	r0, #3
 80005d2:	2000      	movls	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005d4:	ea21 0103 	bic.w	r1, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 80005d8:	fa01 f000 	lsl.w	r0, r1, r0
 80005dc:	4770      	bx	lr
	...

080005e0 <SystemClock_Config>:
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80005e0:	4b2d      	ldr	r3, [pc, #180]	@ (8000698 <SystemClock_Config+0xb8>)
 80005e2:	681a      	ldr	r2, [r3, #0]
 80005e4:	f022 0207 	bic.w	r2, r2, #7
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e8:	b510      	push	{r4, lr}
 80005ea:	601a      	str	r2, [r3, #0]
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80005ec:	681a      	ldr	r2, [r3, #0]
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 80005ee:	0754      	lsls	r4, r2, #29
 80005f0:	d1fc      	bne.n	80005ec <SystemClock_Config+0xc>
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 80005f2:	4a2a      	ldr	r2, [pc, #168]	@ (800069c <SystemClock_Config+0xbc>)
 80005f4:	6813      	ldr	r3, [r2, #0]
 80005f6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005fa:	6013      	str	r3, [r2, #0]
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80005fc:	4b28      	ldr	r3, [pc, #160]	@ (80006a0 <SystemClock_Config+0xc0>)
 80005fe:	681a      	ldr	r2, [r3, #0]
 8000600:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 8000604:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000608:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800060a:	681a      	ldr	r2, [r3, #0]
 800060c:	f042 0201 	orr.w	r2, r2, #1
 8000610:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000612:	681a      	ldr	r2, [r3, #0]
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
  LL_RCC_HSI_SetCalibTrimming(16);
  LL_RCC_HSI_Enable();

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000614:	0790      	lsls	r0, r2, #30
 8000616:	d5fc      	bpl.n	8000612 <SystemClock_Config+0x32>
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8000618:	6859      	ldr	r1, [r3, #4]
 800061a:	4a22      	ldr	r2, [pc, #136]	@ (80006a4 <SystemClock_Config+0xc4>)
 800061c:	400a      	ands	r2, r1
 800061e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000622:	f042 0208 	orr.w	r2, r2, #8
 8000626:	605a      	str	r2, [r3, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8000628:	685a      	ldr	r2, [r3, #4]
 800062a:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 800062e:	605a      	str	r2, [r3, #4]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000630:	681a      	ldr	r2, [r3, #0]
 8000632:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8000636:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000638:	4b19      	ldr	r3, [pc, #100]	@ (80006a0 <SystemClock_Config+0xc0>)
 800063a:	681a      	ldr	r2, [r3, #0]
  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_8, 64, LL_RCC_PLLP_DIV_2);
  LL_RCC_PLL_Enable();

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 800063c:	0191      	lsls	r1, r2, #6
 800063e:	d5fc      	bpl.n	800063a <SystemClock_Config+0x5a>
  * @rmtoll CSR   VOS       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 8000640:	4916      	ldr	r1, [pc, #88]	@ (800069c <SystemClock_Config+0xbc>)
 8000642:	684a      	ldr	r2, [r1, #4]
  {

  }
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 8000644:	0452      	lsls	r2, r2, #17
 8000646:	d5fc      	bpl.n	8000642 <SystemClock_Config+0x62>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000648:	689a      	ldr	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800064a:	4c15      	ldr	r4, [pc, #84]	@ (80006a0 <SystemClock_Config+0xc0>)
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800064c:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8000650:	f042 0290 	orr.w	r2, r2, #144	@ 0x90
 8000654:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000656:	689a      	ldr	r2, [r3, #8]
 8000658:	f422 52e0 	bic.w	r2, r2, #7168	@ 0x1c00
 800065c:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800065e:	689a      	ldr	r2, [r3, #8]
 8000660:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8000664:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000666:	689a      	ldr	r2, [r3, #8]
 8000668:	f022 0203 	bic.w	r2, r2, #3
 800066c:	f042 0202 	orr.w	r2, r2, #2
 8000670:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000672:	68a3      	ldr	r3, [r4, #8]
 8000674:	f003 030c 	and.w	r3, r3, #12
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000678:	2b08      	cmp	r3, #8
 800067a:	d1fa      	bne.n	8000672 <SystemClock_Config+0x92>
  {

  }
  LL_Init1msTick(16000000);
 800067c:	480a      	ldr	r0, [pc, #40]	@ (80006a8 <SystemClock_Config+0xc8>)
 800067e:	f000 fa5f 	bl	8000b40 <LL_Init1msTick>
  LL_SetSystemCoreClock(16000000);
 8000682:	4809      	ldr	r0, [pc, #36]	@ (80006a8 <SystemClock_Config+0xc8>)
 8000684:	f000 fa6a 	bl	8000b5c <LL_SetSystemCoreClock>
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 8000688:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 800068c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000690:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
}
 8000694:	bd10      	pop	{r4, pc}
 8000696:	bf00      	nop
 8000698:	40023c00 	.word	0x40023c00
 800069c:	40007000 	.word	0x40007000
 80006a0:	40023800 	.word	0x40023800
 80006a4:	ffbf8000 	.word	0xffbf8000
 80006a8:	00f42400 	.word	0x00f42400

080006ac <main>:
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80006ac:	4c40      	ldr	r4, [pc, #256]	@ (80007b0 <main+0x104>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006ae:	4d41      	ldr	r5, [pc, #260]	@ (80007b4 <main+0x108>)
 80006b0:	6c63      	ldr	r3, [r4, #68]	@ 0x44
{
 80006b2:	b500      	push	{lr}
 80006b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006b8:	6463      	str	r3, [r4, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80006ba:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80006bc:	b091      	sub	sp, #68	@ 0x44
 80006be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006c2:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80006c4:	9b01      	ldr	r3, [sp, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80006c6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80006c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006cc:	6423      	str	r3, [r4, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80006ce:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80006d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006d4:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80006d6:	9b00      	ldr	r3, [sp, #0]
 80006d8:	68ea      	ldr	r2, [r5, #12]
  reg_value  =  (reg_value                                   |
 80006da:	4b37      	ldr	r3, [pc, #220]	@ (80007b8 <main+0x10c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006dc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80006e0:	0412      	lsls	r2, r2, #16
 80006e2:	0c12      	lsrs	r2, r2, #16
  reg_value  =  (reg_value                                   |
 80006e4:	4313      	orrs	r3, r2
  SCB->AIRCR =  reg_value;
 80006e6:	60eb      	str	r3, [r5, #12]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006e8:	68e8      	ldr	r0, [r5, #12]
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 80006ea:	210f      	movs	r1, #15
 80006ec:	f3c0 2002 	ubfx	r0, r0, #8, #3
 80006f0:	f7ff ff60 	bl	80005b4 <NVIC_EncodePriority.constprop.0>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f4:	0100      	lsls	r0, r0, #4
 80006f6:	b2c0      	uxtb	r0, r0
 80006f8:	f885 0023 	strb.w	r0, [r5, #35]	@ 0x23
  SystemClock_Config();
 80006fc:	f7ff ff70 	bl	80005e0 <SystemClock_Config>
{
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8000700:	2080      	movs	r0, #128	@ 0x80
 8000702:	f7ff ff49 	bl	8000598 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000706:	2001      	movs	r0, #1
 8000708:	f7ff ff46 	bl	8000598 <LL_AHB1_GRP1_EnableClock>
  LL_USART_InitTypeDef USART_InitStruct = {0};
 800070c:	2100      	movs	r1, #0
 800070e:	221c      	movs	r2, #28
 8000710:	a809      	add	r0, sp, #36	@ 0x24
 8000712:	f000 fecf 	bl	80014b4 <memset>
  SET_BIT(RCC->APB1ENR, Periphs);
 8000716:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000718:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800071c:	6423      	str	r3, [r4, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800071e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000720:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000724:	9302      	str	r3, [sp, #8]
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000726:	2001      	movs	r0, #1
  (void)tmpreg;
 8000728:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800072a:	260c      	movs	r6, #12
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800072c:	f7ff ff34 	bl	8000598 <LL_AHB1_GRP1_EnableClock>
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000730:	2302      	movs	r3, #2
 8000732:	e9cd 6303 	strd	r6, r3, [sp, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000736:	2400      	movs	r4, #0
 8000738:	2303      	movs	r3, #3
 800073a:	e9cd 3405 	strd	r3, r4, [sp, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800073e:	eb0d 0106 	add.w	r1, sp, r6
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000742:	2307      	movs	r3, #7
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000744:	481d      	ldr	r0, [pc, #116]	@ (80007bc <main+0x110>)
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000746:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000748:	9407      	str	r4, [sp, #28]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800074a:	f000 f87e 	bl	800084a <LL_GPIO_Init>
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800074e:	68e8      	ldr	r0, [r5, #12]
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8000750:	2101      	movs	r1, #1
 8000752:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8000756:	f7ff ff2d 	bl	80005b4 <NVIC_EncodePriority.constprop.0>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800075a:	4b19      	ldr	r3, [pc, #100]	@ (80007c0 <main+0x114>)
 800075c:	0100      	lsls	r0, r0, #4
 800075e:	b2c0      	uxtb	r0, r0
 8000760:	f883 0326 	strb.w	r0, [r3, #806]	@ 0x326
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000764:	2240      	movs	r2, #64	@ 0x40
 8000766:	605a      	str	r2, [r3, #4]
  USART_InitStruct.BaudRate = 115200;
 8000768:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800076c:	e9cd 3409 	strd	r3, r4, [sp, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000770:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000774:	e9cd 640d 	strd	r6, r4, [sp, #52]	@ 0x34
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000778:	940f      	str	r4, [sp, #60]	@ 0x3c
  LL_USART_Init(USART2, &USART_InitStruct);
 800077a:	4c12      	ldr	r4, [pc, #72]	@ (80007c4 <main+0x118>)
 800077c:	a909      	add	r1, sp, #36	@ 0x24
 800077e:	4620      	mov	r0, r4
 8000780:	f000 f96c 	bl	8000a5c <LL_USART_Init>
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000784:	6923      	ldr	r3, [r4, #16]
  UARTConfig(&uart_cfg_2, USART2, USART2_IRQn, true);
 8000786:	4810      	ldr	r0, [pc, #64]	@ (80007c8 <main+0x11c>)
 8000788:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 800078c:	6123      	str	r3, [r4, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800078e:	6963      	ldr	r3, [r4, #20]
 8000790:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8000794:	6163      	str	r3, [r4, #20]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000796:	68e3      	ldr	r3, [r4, #12]
 8000798:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800079c:	60e3      	str	r3, [r4, #12]
 800079e:	2226      	movs	r2, #38	@ 0x26
 80007a0:	2301      	movs	r3, #1
 80007a2:	4621      	mov	r1, r4
 80007a4:	f7ff fea1 	bl	80004ea <UARTConfig>
  vTaskStartScheduler();
 80007a8:	f000 fb1c 	bl	8000de4 <vTaskStartScheduler>
  while (1)
 80007ac:	e7fe      	b.n	80007ac <main+0x100>
 80007ae:	bf00      	nop
 80007b0:	40023800 	.word	0x40023800
 80007b4:	e000ed00 	.word	0xe000ed00
 80007b8:	05fa0300 	.word	0x05fa0300
 80007bc:	40020000 	.word	0x40020000
 80007c0:	e000e100 	.word	0xe000e100
 80007c4:	40004400 	.word	0x40004400
 80007c8:	20000028 	.word	0x20000028

080007cc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007cc:	e7fe      	b.n	80007cc <NMI_Handler>

080007ce <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ce:	e7fe      	b.n	80007ce <HardFault_Handler>

080007d0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007d0:	e7fe      	b.n	80007d0 <MemManage_Handler>

080007d2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007d2:	e7fe      	b.n	80007d2 <BusFault_Handler>

080007d4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007d4:	e7fe      	b.n	80007d4 <UsageFault_Handler>

080007d6 <DebugMon_Handler>:
}

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 80007d6:	4770      	bx	lr

080007d8 <USART2_IRQHandler>:
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */
	UART_ISR(&uart_cfg_2);
 80007d8:	4801      	ldr	r0, [pc, #4]	@ (80007e0 <USART2_IRQHandler+0x8>)
 80007da:	f7ff beac 	b.w	8000536 <UART_ISR>
 80007de:	bf00      	nop
 80007e0:	20000028 	.word	0x20000028

080007e4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007e4:	4a03      	ldr	r2, [pc, #12]	@ (80007f4 <SystemInit+0x10>)
 80007e6:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80007ea:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007ee:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007f2:	4770      	bx	lr
 80007f4:	e000ed00 	.word	0xe000ed00

080007f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80007f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000830 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80007fc:	f7ff fff2 	bl	80007e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000800:	480c      	ldr	r0, [pc, #48]	@ (8000834 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000802:	490d      	ldr	r1, [pc, #52]	@ (8000838 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000804:	4a0d      	ldr	r2, [pc, #52]	@ (800083c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000806:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000808:	e002      	b.n	8000810 <LoopCopyDataInit>

0800080a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800080a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800080c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800080e:	3304      	adds	r3, #4

08000810 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000810:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000812:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000814:	d3f9      	bcc.n	800080a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000816:	4a0a      	ldr	r2, [pc, #40]	@ (8000840 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000818:	4c0a      	ldr	r4, [pc, #40]	@ (8000844 <LoopFillZerobss+0x22>)
  movs r3, #0
 800081a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800081c:	e001      	b.n	8000822 <LoopFillZerobss>

0800081e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800081e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000820:	3204      	adds	r2, #4

08000822 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000822:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000824:	d3fb      	bcc.n	800081e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000826:	f000 fe4d 	bl	80014c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800082a:	f7ff ff3f 	bl	80006ac <main>
  bx  lr    
 800082e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000830:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000834:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000838:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800083c:	08001554 	.word	0x08001554
  ldr r2, =_sbss
 8000840:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000844:	20004768 	.word	0x20004768

08000848 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000848:	e7fe      	b.n	8000848 <ADC_IRQHandler>

0800084a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800084a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800084e:	4602      	mov	r2, r0
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8000850:	680d      	ldr	r5, [r1, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000852:	fa95 f4a5 	rbit	r4, r5
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8000856:	f04f 0c01 	mov.w	ip, #1
  return __builtin_clz(value);
 800085a:	fab4 f484 	clz	r4, r4
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800085e:	2703      	movs	r7, #3
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8000860:	f04f 0e0f 	mov.w	lr, #15
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000864:	fa35 f004 	lsrs.w	r0, r5, r4
 8000868:	d101      	bne.n	800086e <LL_GPIO_Init+0x24>
    }
    pinpos++;
  }

  return (SUCCESS);
}
 800086a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800086e:	fa0c f304 	lsl.w	r3, ip, r4
    if (currentpin)
 8000872:	402b      	ands	r3, r5
 8000874:	d06a      	beq.n	800094c <LL_GPIO_Init+0x102>
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000876:	6848      	ldr	r0, [r1, #4]
 8000878:	1e46      	subs	r6, r0, #1
 800087a:	2e01      	cmp	r6, #1
 800087c:	d81e      	bhi.n	80008bc <LL_GPIO_Init+0x72>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800087e:	fa93 f8a3 	rbit	r8, r3
 8000882:	fa93 f9a3 	rbit	r9, r3
  return __builtin_clz(value);
 8000886:	fab8 f888 	clz	r8, r8
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800088a:	6896      	ldr	r6, [r2, #8]
 800088c:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8000890:	fa07 f808 	lsl.w	r8, r7, r8
 8000894:	ea26 0808 	bic.w	r8, r6, r8
 8000898:	fab9 f989 	clz	r9, r9
 800089c:	688e      	ldr	r6, [r1, #8]
 800089e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80008a2:	fa06 f609 	lsl.w	r6, r6, r9
 80008a6:	ea46 0608 	orr.w	r6, r6, r8
 80008aa:	6096      	str	r6, [r2, #8]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80008ac:	6856      	ldr	r6, [r2, #4]
 80008ae:	ea26 0803 	bic.w	r8, r6, r3
 80008b2:	68ce      	ldr	r6, [r1, #12]
 80008b4:	435e      	muls	r6, r3
 80008b6:	ea48 0606 	orr.w	r6, r8, r6
 80008ba:	6056      	str	r6, [r2, #4]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008bc:	fa93 f8a3 	rbit	r8, r3
  return __builtin_clz(value);
 80008c0:	fab8 f888 	clz	r8, r8
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80008c4:	68d6      	ldr	r6, [r2, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008c6:	fa93 f9a3 	rbit	r9, r3
 80008ca:	ea4f 0848 	mov.w	r8, r8, lsl #1
 80008ce:	fa07 f808 	lsl.w	r8, r7, r8
 80008d2:	ea26 0808 	bic.w	r8, r6, r8
  return __builtin_clz(value);
 80008d6:	fab9 f989 	clz	r9, r9
 80008da:	690e      	ldr	r6, [r1, #16]
 80008dc:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80008e0:	fa06 f609 	lsl.w	r6, r6, r9
 80008e4:	ea46 0608 	orr.w	r6, r6, r8
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80008e8:	2802      	cmp	r0, #2
 80008ea:	60d6      	str	r6, [r2, #12]
 80008ec:	d11b      	bne.n	8000926 <LL_GPIO_Init+0xdc>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008ee:	fa93 f6a3 	rbit	r6, r3
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80008f2:	f8d1 9014 	ldr.w	r9, [r1, #20]
  if (value == 0U)
 80008f6:	b35e      	cbz	r6, 8000950 <LL_GPIO_Init+0x106>
  return __builtin_clz(value);
 80008f8:	fab6 fa86 	clz	sl, r6
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80008fc:	f1ba 0f07 	cmp.w	sl, #7
 8000900:	dc26      	bgt.n	8000950 <LL_GPIO_Init+0x106>
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8000902:	f8d2 8020 	ldr.w	r8, [r2, #32]
 8000906:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800090a:	f04f 0b0f 	mov.w	fp, #15
 800090e:	fab6 f686 	clz	r6, r6
 8000912:	fa0b fa0a 	lsl.w	sl, fp, sl
 8000916:	00b6      	lsls	r6, r6, #2
 8000918:	ea28 080a 	bic.w	r8, r8, sl
 800091c:	fa09 f606 	lsl.w	r6, r9, r6
 8000920:	ea46 0608 	orr.w	r6, r6, r8
 8000924:	6216      	str	r6, [r2, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000926:	fa93 f6a3 	rbit	r6, r3
  return __builtin_clz(value);
 800092a:	fab6 f686 	clz	r6, r6
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800092e:	f8d2 8000 	ldr.w	r8, [r2]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000932:	fa93 f3a3 	rbit	r3, r3
 8000936:	0076      	lsls	r6, r6, #1
  return __builtin_clz(value);
 8000938:	fab3 f383 	clz	r3, r3
 800093c:	fa07 f606 	lsl.w	r6, r7, r6
 8000940:	005b      	lsls	r3, r3, #1
 8000942:	ea28 0606 	bic.w	r6, r8, r6
 8000946:	4098      	lsls	r0, r3
 8000948:	4330      	orrs	r0, r6
 800094a:	6010      	str	r0, [r2, #0]
    pinpos++;
 800094c:	3401      	adds	r4, #1
 800094e:	e789      	b.n	8000864 <LL_GPIO_Init+0x1a>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8000950:	0a1e      	lsrs	r6, r3, #8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000952:	fa96 faa6 	rbit	sl, r6
  return __builtin_clz(value);
 8000956:	faba fa8a 	clz	sl, sl
 800095a:	f8d2 8024 	ldr.w	r8, [r2, #36]	@ 0x24
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800095e:	fa96 f6a6 	rbit	r6, r6
 8000962:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
  return __builtin_clz(value);
 8000966:	fab6 f686 	clz	r6, r6
 800096a:	00b6      	lsls	r6, r6, #2
 800096c:	fa0e fa0a 	lsl.w	sl, lr, sl
 8000970:	ea28 080a 	bic.w	r8, r8, sl
 8000974:	fa09 f906 	lsl.w	r9, r9, r6
 8000978:	ea49 0608 	orr.w	r6, r9, r8
 800097c:	6256      	str	r6, [r2, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800097e:	e7d2      	b.n	8000926 <LL_GPIO_Init+0xdc>

08000980 <RCC_GetHCLKClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8000980:	4b03      	ldr	r3, [pc, #12]	@ (8000990 <RCC_GetHCLKClockFreq+0x10>)
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8000982:	4a04      	ldr	r2, [pc, #16]	@ (8000994 <RCC_GetHCLKClockFreq+0x14>)
 8000984:	689b      	ldr	r3, [r3, #8]
 8000986:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800098a:	5cd3      	ldrb	r3, [r2, r3]
}
 800098c:	40d8      	lsrs	r0, r3
 800098e:	4770      	bx	lr
 8000990:	40023800 	.word	0x40023800
 8000994:	0800152c 	.word	0x0800152c

08000998 <RCC_GetPCLK1ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8000998:	4b03      	ldr	r3, [pc, #12]	@ (80009a8 <RCC_GetPCLK1ClockFreq+0x10>)
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800099a:	4a04      	ldr	r2, [pc, #16]	@ (80009ac <RCC_GetPCLK1ClockFreq+0x14>)
 800099c:	689b      	ldr	r3, [r3, #8]
 800099e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80009a2:	5cd3      	ldrb	r3, [r2, r3]
}
 80009a4:	40d8      	lsrs	r0, r3
 80009a6:	4770      	bx	lr
 80009a8:	40023800 	.word	0x40023800
 80009ac:	08001524 	.word	0x08001524

080009b0 <RCC_GetPCLK2ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80009b0:	4b03      	ldr	r3, [pc, #12]	@ (80009c0 <RCC_GetPCLK2ClockFreq+0x10>)
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80009b2:	4a04      	ldr	r2, [pc, #16]	@ (80009c4 <RCC_GetPCLK2ClockFreq+0x14>)
 80009b4:	689b      	ldr	r3, [r3, #8]
 80009b6:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80009ba:	5cd3      	ldrb	r3, [r2, r3]
}
 80009bc:	40d8      	lsrs	r0, r3
 80009be:	4770      	bx	lr
 80009c0:	40023800 	.word	0x40023800
 80009c4:	08001524 	.word	0x08001524

080009c8 <RCC_PLL_GetFreqDomain_SYS>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80009c8:	4a0e      	ldr	r2, [pc, #56]	@ (8000a04 <RCC_PLL_GetFreqDomain_SYS+0x3c>)
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80009ca:	490f      	ldr	r1, [pc, #60]	@ (8000a08 <RCC_PLL_GetFreqDomain_SYS+0x40>)
 80009cc:	6853      	ldr	r3, [r2, #4]
 80009ce:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80009d2:	4b0e      	ldr	r3, [pc, #56]	@ (8000a0c <RCC_PLL_GetFreqDomain_SYS+0x44>)
 80009d4:	bf08      	it	eq
 80009d6:	460b      	moveq	r3, r1
    default:
      pllinputfreq = HSI_VALUE;
      break;
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80009d8:	2808      	cmp	r0, #8
 80009da:	d110      	bne.n	80009fe <RCC_PLL_GetFreqDomain_SYS+0x36>
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80009dc:	6850      	ldr	r0, [r2, #4]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80009de:	6851      	ldr	r1, [r2, #4]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80009e0:	6852      	ldr	r2, [r2, #4]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80009e2:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80009e6:	fbb3 f0f0 	udiv	r0, r3, r0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80009ea:	f3c1 1388 	ubfx	r3, r1, #6, #9
 80009ee:	4358      	muls	r0, r3
 80009f0:	f3c2 4301 	ubfx	r3, r2, #16, #2
 80009f4:	3301      	adds	r3, #1
 80009f6:	005b      	lsls	r3, r3, #1
 80009f8:	fbb0 f0f3 	udiv	r0, r0, r3
 80009fc:	4770      	bx	lr
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 80009fe:	2000      	movs	r0, #0
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
}
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	40023800 	.word	0x40023800
 8000a08:	00f42400 	.word	0x00f42400
 8000a0c:	007a1200 	.word	0x007a1200

08000a10 <RCC_GetSystemClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000a10:	4b06      	ldr	r3, [pc, #24]	@ (8000a2c <RCC_GetSystemClockFreq+0x1c>)
 8000a12:	6898      	ldr	r0, [r3, #8]
 8000a14:	f000 000c 	and.w	r0, r0, #12
  switch (LL_RCC_GetSysClkSource())
 8000a18:	2804      	cmp	r0, #4
 8000a1a:	d003      	beq.n	8000a24 <RCC_GetSystemClockFreq+0x14>
 8000a1c:	2808      	cmp	r0, #8
 8000a1e:	d103      	bne.n	8000a28 <RCC_GetSystemClockFreq+0x18>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8000a20:	f7ff bfd2 	b.w	80009c8 <RCC_PLL_GetFreqDomain_SYS>
  switch (LL_RCC_GetSysClkSource())
 8000a24:	4802      	ldr	r0, [pc, #8]	@ (8000a30 <RCC_GetSystemClockFreq+0x20>)
 8000a26:	4770      	bx	lr
      frequency = HSI_VALUE;
 8000a28:	4802      	ldr	r0, [pc, #8]	@ (8000a34 <RCC_GetSystemClockFreq+0x24>)
}
 8000a2a:	4770      	bx	lr
 8000a2c:	40023800 	.word	0x40023800
 8000a30:	007a1200 	.word	0x007a1200
 8000a34:	00f42400 	.word	0x00f42400

08000a38 <LL_RCC_GetSystemClocksFreq>:
{
 8000a38:	b510      	push	{r4, lr}
 8000a3a:	4604      	mov	r4, r0
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8000a3c:	f7ff ffe8 	bl	8000a10 <RCC_GetSystemClockFreq>
 8000a40:	6020      	str	r0, [r4, #0]
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8000a42:	f7ff ff9d 	bl	8000980 <RCC_GetHCLKClockFreq>
 8000a46:	6060      	str	r0, [r4, #4]
 8000a48:	4601      	mov	r1, r0
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8000a4a:	f7ff ffa5 	bl	8000998 <RCC_GetPCLK1ClockFreq>
 8000a4e:	60a0      	str	r0, [r4, #8]
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8000a50:	4608      	mov	r0, r1
 8000a52:	f7ff ffad 	bl	80009b0 <RCC_GetPCLK2ClockFreq>
 8000a56:	60e0      	str	r0, [r4, #12]
}
 8000a58:	bd10      	pop	{r4, pc}
	...

08000a5c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8000a5c:	b530      	push	{r4, r5, lr}
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8000a5e:	68c3      	ldr	r3, [r0, #12]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8000a60:	049b      	lsls	r3, r3, #18
{
 8000a62:	b085      	sub	sp, #20
 8000a64:	4604      	mov	r4, r0
 8000a66:	460d      	mov	r5, r1
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8000a68:	d502      	bpl.n	8000a70 <LL_USART_Init+0x14>
  ErrorStatus status = ERROR;
 8000a6a:	2001      	movs	r0, #1
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 8000a6c:	b005      	add	sp, #20
 8000a6e:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(USARTx->CR1,
 8000a70:	684b      	ldr	r3, [r1, #4]
 8000a72:	68c9      	ldr	r1, [r1, #12]
 8000a74:	68c2      	ldr	r2, [r0, #12]
 8000a76:	430b      	orrs	r3, r1
 8000a78:	6929      	ldr	r1, [r5, #16]
 8000a7a:	430b      	orrs	r3, r1
 8000a7c:	69a9      	ldr	r1, [r5, #24]
 8000a7e:	f422 4216 	bic.w	r2, r2, #38400	@ 0x9600
 8000a82:	430b      	orrs	r3, r1
 8000a84:	f022 020c 	bic.w	r2, r2, #12
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	60c3      	str	r3, [r0, #12]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8000a8c:	6903      	ldr	r3, [r0, #16]
 8000a8e:	68aa      	ldr	r2, [r5, #8]
 8000a90:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000a94:	4313      	orrs	r3, r2
 8000a96:	6103      	str	r3, [r0, #16]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8000a98:	6943      	ldr	r3, [r0, #20]
 8000a9a:	696a      	ldr	r2, [r5, #20]
 8000a9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	6143      	str	r3, [r0, #20]
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8000aa4:	4668      	mov	r0, sp
 8000aa6:	f7ff ffc7 	bl	8000a38 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8000aaa:	4b22      	ldr	r3, [pc, #136]	@ (8000b34 <LL_USART_Init+0xd8>)
 8000aac:	429c      	cmp	r4, r3
 8000aae:	d128      	bne.n	8000b02 <LL_USART_Init+0xa6>
      periphclk = rcc_clocks.PCLK2_Frequency;
 8000ab0:	9803      	ldr	r0, [sp, #12]
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8000ab2:	2800      	cmp	r0, #0
 8000ab4:	d0d9      	beq.n	8000a6a <LL_USART_Init+0xe>
        && (USART_InitStruct->BaudRate != 0U))
 8000ab6:	682b      	ldr	r3, [r5, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d0d6      	beq.n	8000a6a <LL_USART_Init+0xe>
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8000abc:	69aa      	ldr	r2, [r5, #24]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8000abe:	2119      	movs	r1, #25
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8000ac0:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8000ac4:	fba0 0101 	umull	r0, r1, r0, r1
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8000ac8:	d124      	bne.n	8000b14 <LL_USART_Init+0xb8>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8000aca:	18da      	adds	r2, r3, r3
 8000acc:	f04f 0500 	mov.w	r5, #0
 8000ad0:	eb45 0305 	adc.w	r3, r5, r5
 8000ad4:	f7ff fb84 	bl	80001e0 <__aeabi_uldivmod>
 8000ad8:	2264      	movs	r2, #100	@ 0x64
 8000ada:	fbb0 f1f2 	udiv	r1, r0, r2
 8000ade:	fb02 0311 	mls	r3, r2, r1, r0
 8000ae2:	00db      	lsls	r3, r3, #3
 8000ae4:	3332      	adds	r3, #50	@ 0x32
 8000ae6:	fbb3 f3f2 	udiv	r3, r3, r2
 8000aea:	f003 0207 	and.w	r2, r3, #7
 8000aee:	005b      	lsls	r3, r3, #1
 8000af0:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8000af4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8000af8:	4413      	add	r3, r2
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8000afa:	b29b      	uxth	r3, r3
 8000afc:	60a3      	str	r3, [r4, #8]
      status = SUCCESS;
 8000afe:	2000      	movs	r0, #0
 8000b00:	e7b4      	b.n	8000a6c <LL_USART_Init+0x10>
    else if (USARTx == USART2)
 8000b02:	4b0d      	ldr	r3, [pc, #52]	@ (8000b38 <LL_USART_Init+0xdc>)
 8000b04:	429c      	cmp	r4, r3
 8000b06:	d101      	bne.n	8000b0c <LL_USART_Init+0xb0>
      periphclk = rcc_clocks.PCLK1_Frequency;
 8000b08:	9802      	ldr	r0, [sp, #8]
 8000b0a:	e7d2      	b.n	8000ab2 <LL_USART_Init+0x56>
    else if (USARTx == USART6)
 8000b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b3c <LL_USART_Init+0xe0>)
 8000b0e:	429c      	cmp	r4, r3
 8000b10:	d1ab      	bne.n	8000a6a <LL_USART_Init+0xe>
 8000b12:	e7cd      	b.n	8000ab0 <LL_USART_Init+0x54>
 8000b14:	009a      	lsls	r2, r3, #2
 8000b16:	0f9b      	lsrs	r3, r3, #30
 8000b18:	f7ff fb62 	bl	80001e0 <__aeabi_uldivmod>
 8000b1c:	2264      	movs	r2, #100	@ 0x64
 8000b1e:	fbb0 f1f2 	udiv	r1, r0, r2
 8000b22:	fb02 0311 	mls	r3, r2, r1, r0
 8000b26:	011b      	lsls	r3, r3, #4
 8000b28:	3332      	adds	r3, #50	@ 0x32
 8000b2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8000b2e:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8000b32:	e7e2      	b.n	8000afa <LL_USART_Init+0x9e>
 8000b34:	40011000 	.word	0x40011000
 8000b38:	40004400 	.word	0x40004400
 8000b3c:	40011400 	.word	0x40011400

08000b40 <LL_Init1msTick>:
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8000b40:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b44:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b48:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8000b4c:	2200      	movs	r2, #0
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8000b4e:	3801      	subs	r0, #1
 8000b50:	6158      	str	r0, [r3, #20]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8000b52:	619a      	str	r2, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b54:	2205      	movs	r2, #5
 8000b56:	611a      	str	r2, [r3, #16]
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
}
 8000b58:	4770      	bx	lr
	...

08000b5c <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8000b5c:	4b01      	ldr	r3, [pc, #4]	@ (8000b64 <LL_SetSystemCoreClock+0x8>)
 8000b5e:	6018      	str	r0, [r3, #0]
}
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	20000000 	.word	0x20000000

08000b68 <vListInitialise>:
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8000b68:	f100 0308 	add.w	r3, r0, #8

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000b6c:	f04f 32ff 	mov.w	r2, #4294967295

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 8000b70:	e9c0 2302 	strd	r2, r3, [r0, #8]
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8000b74:	6043      	str	r3, [r0, #4]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8000b76:	6103      	str	r3, [r0, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	6003      	str	r3, [r0, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 8000b7c:	4770      	bx	lr

08000b7e <vListInitialiseItem>:
void vListInitialiseItem( ListItem_t * const pxItem )
{
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	6103      	str	r3, [r0, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 8000b82:	4770      	bx	lr

08000b84 <uxListRemove>:

    traceENTER_uxListRemove( pxItemToRemove );



    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000b84:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000b88:	6903      	ldr	r3, [r0, #16]
    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000b8a:	608a      	str	r2, [r1, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000b8c:	6051      	str	r1, [r2, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000b8e:	6859      	ldr	r1, [r3, #4]
 8000b90:	4281      	cmp	r1, r0
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000b92:	bf08      	it	eq
 8000b94:	605a      	streq	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000b96:	2200      	movs	r2, #0
 8000b98:	6102      	str	r2, [r0, #16]
    ( pxList->uxNumberOfItems )--;
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	3a01      	subs	r2, #1
 8000b9e:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 8000ba0:	6818      	ldr	r0, [r3, #0]
}
 8000ba2:	4770      	bx	lr

08000ba4 <prvResetNextTaskUnblockTime>:
#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000ba4:	4a06      	ldr	r2, [pc, #24]	@ (8000bc0 <prvResetNextTaskUnblockTime+0x1c>)
 8000ba6:	6813      	ldr	r3, [r2, #0]
 8000ba8:	6819      	ldr	r1, [r3, #0]
 8000baa:	4b06      	ldr	r3, [pc, #24]	@ (8000bc4 <prvResetNextTaskUnblockTime+0x20>)
 8000bac:	b919      	cbnz	r1, 8000bb6 <prvResetNextTaskUnblockTime+0x12>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8000bae:	f04f 32ff 	mov.w	r2, #4294967295
    {
        /* The new current delayed list is not empty, get the value of
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8000bb2:	601a      	str	r2, [r3, #0]
    }
}
 8000bb4:	4770      	bx	lr
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8000bb6:	6812      	ldr	r2, [r2, #0]
 8000bb8:	68d2      	ldr	r2, [r2, #12]
 8000bba:	6812      	ldr	r2, [r2, #0]
 8000bbc:	e7f9      	b.n	8000bb2 <prvResetNextTaskUnblockTime+0xe>
 8000bbe:	bf00      	nop
 8000bc0:	200002b8 	.word	0x200002b8
 8000bc4:	20000250 	.word	0x20000250

08000bc8 <prvIdleTask>:
{
 8000bc8:	b580      	push	{r7, lr}
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000bca:	4c15      	ldr	r4, [pc, #84]	@ (8000c20 <prvIdleTask+0x58>)
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8000bcc:	4f15      	ldr	r7, [pc, #84]	@ (8000c24 <prvIdleTask+0x5c>)
                        --uxCurrentNumberOfTasks;
 8000bce:	4e16      	ldr	r6, [pc, #88]	@ (8000c28 <prvIdleTask+0x60>)
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000bd0:	6823      	ldr	r3, [r4, #0]
 8000bd2:	b973      	cbnz	r3, 8000bf2 <prvIdleTask+0x2a>
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8000bd4:	4b15      	ldr	r3, [pc, #84]	@ (8000c2c <prvIdleTask+0x64>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	d9f8      	bls.n	8000bce <prvIdleTask+0x6>
                taskYIELD();
 8000bdc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000be0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000be4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8000be8:	f3bf 8f4f 	dsb	sy
 8000bec:	f3bf 8f6f 	isb	sy
 8000bf0:	e7ed      	b.n	8000bce <prvIdleTask+0x6>
                taskENTER_CRITICAL();
 8000bf2:	f000 faff 	bl	80011f4 <vPortEnterCritical>
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	68dd      	ldr	r5, [r3, #12]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000bfa:	1d28      	adds	r0, r5, #4
 8000bfc:	f7ff ffc2 	bl	8000b84 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8000c00:	6833      	ldr	r3, [r6, #0]
 8000c02:	3b01      	subs	r3, #1
 8000c04:	6033      	str	r3, [r6, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8000c06:	6823      	ldr	r3, [r4, #0]
 8000c08:	3b01      	subs	r3, #1
 8000c0a:	6023      	str	r3, [r4, #0]
                taskEXIT_CRITICAL();
 8000c0c:	f000 fb02 	bl	8001214 <vPortExitCritical>
            vPortFreeStack( pxTCB->pxStack );
 8000c10:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8000c12:	f000 fc05 	bl	8001420 <vPortFree>
            vPortFree( pxTCB );
 8000c16:	4628      	mov	r0, r5
 8000c18:	f000 fc02 	bl	8001420 <vPortFree>
    }
 8000c1c:	e7d8      	b.n	8000bd0 <prvIdleTask+0x8>
 8000c1e:	bf00      	nop
 8000c20:	20000288 	.word	0x20000288
 8000c24:	2000028c 	.word	0x2000028c
 8000c28:	20000270 	.word	0x20000270
 8000c2c:	200002e4 	.word	0x200002e4

08000c30 <xTaskCreate>:
    {
 8000c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) );
 8000c34:	ea4f 0a82 	mov.w	sl, r2, lsl #2
    {
 8000c38:	4607      	mov	r7, r0
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) );
 8000c3a:	4650      	mov	r0, sl
    {
 8000c3c:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 8000c40:	460e      	mov	r6, r1
 8000c42:	4698      	mov	r8, r3
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) );
 8000c44:	f000 fb70 	bl	8001328 <pvPortMalloc>
            if( pxStack != NULL )
 8000c48:	4605      	mov	r5, r0
 8000c4a:	b918      	cbnz	r0, 8000c54 <xTaskCreate+0x24>
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295
    }
 8000c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8000c54:	2054      	movs	r0, #84	@ 0x54
 8000c56:	f000 fb67 	bl	8001328 <pvPortMalloc>
                if( pxNewTCB != NULL )
 8000c5a:	4604      	mov	r4, r0
 8000c5c:	2800      	cmp	r0, #0
 8000c5e:	f000 808d 	beq.w	8000d7c <xTaskCreate+0x14c>
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8000c62:	2254      	movs	r2, #84	@ 0x54
 8000c64:	2100      	movs	r1, #0
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000c66:	f1aa 0a04 	sub.w	sl, sl, #4
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8000c6a:	f000 fc23 	bl	80014b4 <memset>
                    pxNewTCB->pxStack = pxStack;
 8000c6e:	6325      	str	r5, [r4, #48]	@ 0x30
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000c70:	4455      	add	r5, sl
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8000c72:	f025 0507 	bic.w	r5, r5, #7
    if( pcName != NULL )
 8000c76:	b16e      	cbz	r6, 8000c94 <xTaskCreate+0x64>
 8000c78:	1e73      	subs	r3, r6, #1
 8000c7a:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 8000c7e:	360f      	adds	r6, #15
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000c80:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8000c84:	f802 1f01 	strb.w	r1, [r2, #1]!
            if( pcName[ x ] == ( char ) 0x00 )
 8000c88:	b109      	cbz	r1, 8000c8e <xTaskCreate+0x5e>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000c8a:	42b3      	cmp	r3, r6
 8000c8c:	d1f8      	bne.n	8000c80 <xTaskCreate+0x50>
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8000c8e:	2300      	movs	r3, #0
 8000c90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000c94:	9e08      	ldr	r6, [sp, #32]
 8000c96:	2e04      	cmp	r6, #4
 8000c98:	bf28      	it	cs
 8000c9a:	2604      	movcs	r6, #4
    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000c9c:	f104 0a04 	add.w	sl, r4, #4
    pxNewTCB->uxPriority = uxPriority;
 8000ca0:	62e6      	str	r6, [r4, #44]	@ 0x2c
        pxNewTCB->uxBasePriority = uxPriority;
 8000ca2:	6466      	str	r6, [r4, #68]	@ 0x44
    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000ca4:	4650      	mov	r0, sl
 8000ca6:	f7ff ff6a 	bl	8000b7e <vListInitialiseItem>
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8000caa:	f1c6 0605 	rsb	r6, r6, #5
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000cae:	f104 0018 	add.w	r0, r4, #24
 8000cb2:	f7ff ff64 	bl	8000b7e <vListInitialiseItem>
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000cb6:	6124      	str	r4, [r4, #16]
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8000cb8:	61a6      	str	r6, [r4, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000cba:	6264      	str	r4, [r4, #36]	@ 0x24
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000cbc:	4642      	mov	r2, r8
 8000cbe:	4639      	mov	r1, r7
 8000cc0:	4628      	mov	r0, r5
 8000cc2:	f000 fa6d 	bl	80011a0 <pxPortInitialiseStack>
 8000cc6:	6020      	str	r0, [r4, #0]
    if( pxCreatedTask != NULL )
 8000cc8:	f1b9 0f00 	cmp.w	r9, #0
 8000ccc:	d001      	beq.n	8000cd2 <xTaskCreate+0xa2>
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000cce:	f8c9 4000 	str.w	r4, [r9]
        taskENTER_CRITICAL();
 8000cd2:	f000 fa8f 	bl	80011f4 <vPortEnterCritical>
            uxCurrentNumberOfTasks++;
 8000cd6:	4b36      	ldr	r3, [pc, #216]	@ (8000db0 <xTaskCreate+0x180>)
            if( pxCurrentTCB == NULL )
 8000cd8:	4e36      	ldr	r6, [pc, #216]	@ (8000db4 <xTaskCreate+0x184>)
            uxCurrentNumberOfTasks++;
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	4f36      	ldr	r7, [pc, #216]	@ (8000db8 <xTaskCreate+0x188>)
 8000cde:	3201      	adds	r2, #1
 8000ce0:	601a      	str	r2, [r3, #0]
            if( pxCurrentTCB == NULL )
 8000ce2:	6835      	ldr	r5, [r6, #0]
 8000ce4:	2d00      	cmp	r5, #0
 8000ce6:	d14d      	bne.n	8000d84 <xTaskCreate+0x154>
                pxCurrentTCB = pxNewTCB;
 8000ce8:	6034      	str	r4, [r6, #0]
                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d11f      	bne.n	8000d30 <xTaskCreate+0x100>
 8000cf0:	46b8      	mov	r8, r7
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8000cf2:	4640      	mov	r0, r8
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000cf4:	3501      	adds	r5, #1
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8000cf6:	f7ff ff37 	bl	8000b68 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000cfa:	2d05      	cmp	r5, #5
 8000cfc:	f108 0814 	add.w	r8, r8, #20
 8000d00:	d1f7      	bne.n	8000cf2 <xTaskCreate+0xc2>
    vListInitialise( &xDelayedTaskList1 );
 8000d02:	f8df 80dc 	ldr.w	r8, [pc, #220]	@ 8000de0 <xTaskCreate+0x1b0>
    vListInitialise( &xDelayedTaskList2 );
 8000d06:	4d2d      	ldr	r5, [pc, #180]	@ (8000dbc <xTaskCreate+0x18c>)
    vListInitialise( &xDelayedTaskList1 );
 8000d08:	4640      	mov	r0, r8
 8000d0a:	f7ff ff2d 	bl	8000b68 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8000d0e:	4628      	mov	r0, r5
 8000d10:	f7ff ff2a 	bl	8000b68 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8000d14:	482a      	ldr	r0, [pc, #168]	@ (8000dc0 <xTaskCreate+0x190>)
 8000d16:	f7ff ff27 	bl	8000b68 <vListInitialise>
        vListInitialise( &xTasksWaitingTermination );
 8000d1a:	482a      	ldr	r0, [pc, #168]	@ (8000dc4 <xTaskCreate+0x194>)
 8000d1c:	f7ff ff24 	bl	8000b68 <vListInitialise>
        vListInitialise( &xSuspendedTaskList );
 8000d20:	4829      	ldr	r0, [pc, #164]	@ (8000dc8 <xTaskCreate+0x198>)
 8000d22:	f7ff ff21 	bl	8000b68 <vListInitialise>
    pxDelayedTaskList = &xDelayedTaskList1;
 8000d26:	4b29      	ldr	r3, [pc, #164]	@ (8000dcc <xTaskCreate+0x19c>)
 8000d28:	f8c3 8000 	str.w	r8, [r3]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8000d2c:	4b28      	ldr	r3, [pc, #160]	@ (8000dd0 <xTaskCreate+0x1a0>)
 8000d2e:	601d      	str	r5, [r3, #0]
            uxTaskNumber++;
 8000d30:	4a28      	ldr	r2, [pc, #160]	@ (8000dd4 <xTaskCreate+0x1a4>)
            prvAddTaskToReadyList( pxNewTCB );
 8000d32:	4929      	ldr	r1, [pc, #164]	@ (8000dd8 <xTaskCreate+0x1a8>)
            uxTaskNumber++;
 8000d34:	6813      	ldr	r3, [r2, #0]
            prvAddTaskToReadyList( pxNewTCB );
 8000d36:	6808      	ldr	r0, [r1, #0]
            uxTaskNumber++;
 8000d38:	3301      	adds	r3, #1
 8000d3a:	6013      	str	r3, [r2, #0]
            prvAddTaskToReadyList( pxNewTCB );
 8000d3c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8000d3e:	2201      	movs	r2, #1
 8000d40:	409a      	lsls	r2, r3
 8000d42:	4302      	orrs	r2, r0
 8000d44:	600a      	str	r2, [r1, #0]
 8000d46:	2214      	movs	r2, #20
 8000d48:	4353      	muls	r3, r2
 8000d4a:	18f9      	adds	r1, r7, r3
 8000d4c:	684a      	ldr	r2, [r1, #4]
 8000d4e:	60a2      	str	r2, [r4, #8]
 8000d50:	6890      	ldr	r0, [r2, #8]
 8000d52:	60e0      	str	r0, [r4, #12]
 8000d54:	f8c0 a004 	str.w	sl, [r0, #4]
 8000d58:	f8c2 a008 	str.w	sl, [r2, #8]
 8000d5c:	58fa      	ldr	r2, [r7, r3]
 8000d5e:	6161      	str	r1, [r4, #20]
 8000d60:	3201      	adds	r2, #1
 8000d62:	50fa      	str	r2, [r7, r3]
        taskEXIT_CRITICAL();
 8000d64:	f000 fa56 	bl	8001214 <vPortExitCritical>
        if( xSchedulerRunning != pdFALSE )
 8000d68:	4b1c      	ldr	r3, [pc, #112]	@ (8000ddc <xTaskCreate+0x1ac>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	b123      	cbz	r3, 8000d78 <xTaskCreate+0x148>
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8000d6e:	6833      	ldr	r3, [r6, #0]
 8000d70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000d72:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8000d74:	429a      	cmp	r2, r3
 8000d76:	d310      	bcc.n	8000d9a <xTaskCreate+0x16a>
            xReturn = pdPASS;
 8000d78:	2001      	movs	r0, #1
 8000d7a:	e769      	b.n	8000c50 <xTaskCreate+0x20>
                    vPortFreeStack( pxStack );
 8000d7c:	4628      	mov	r0, r5
 8000d7e:	f000 fb4f 	bl	8001420 <vPortFree>
        if( pxNewTCB != NULL )
 8000d82:	e763      	b.n	8000c4c <xTaskCreate+0x1c>
                if( xSchedulerRunning == pdFALSE )
 8000d84:	4b15      	ldr	r3, [pc, #84]	@ (8000ddc <xTaskCreate+0x1ac>)
 8000d86:	681a      	ldr	r2, [r3, #0]
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000d88:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
                if( xSchedulerRunning == pdFALSE )
 8000d8a:	2a00      	cmp	r2, #0
 8000d8c:	d1d0      	bne.n	8000d30 <xTaskCreate+0x100>
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000d8e:	6832      	ldr	r2, [r6, #0]
 8000d90:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8000d92:	429a      	cmp	r2, r3
                        pxCurrentTCB = pxNewTCB;
 8000d94:	bf98      	it	ls
 8000d96:	6034      	strls	r4, [r6, #0]
 8000d98:	e7ca      	b.n	8000d30 <xTaskCreate+0x100>
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8000d9a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000d9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000da2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8000da6:	f3bf 8f4f 	dsb	sy
 8000daa:	f3bf 8f6f 	isb	sy
 8000dae:	e7e3      	b.n	8000d78 <xTaskCreate+0x148>
 8000db0:	20000270 	.word	0x20000270
 8000db4:	20000348 	.word	0x20000348
 8000db8:	200002e4 	.word	0x200002e4
 8000dbc:	200002bc 	.word	0x200002bc
 8000dc0:	200002a0 	.word	0x200002a0
 8000dc4:	2000028c 	.word	0x2000028c
 8000dc8:	20000274 	.word	0x20000274
 8000dcc:	200002b8 	.word	0x200002b8
 8000dd0:	200002b4 	.word	0x200002b4
 8000dd4:	20000254 	.word	0x20000254
 8000dd8:	20000268 	.word	0x20000268
 8000ddc:	20000264 	.word	0x20000264
 8000de0:	200002d0 	.word	0x200002d0

08000de4 <vTaskStartScheduler>:
{
 8000de4:	b510      	push	{r4, lr}
 8000de6:	b086      	sub	sp, #24
 8000de8:	ab02      	add	r3, sp, #8
 8000dea:	4a14      	ldr	r2, [pc, #80]	@ (8000e3c <vTaskStartScheduler+0x58>)
 8000dec:	4619      	mov	r1, r3
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8000dee:	f812 4b01 	ldrb.w	r4, [r2], #1
 8000df2:	f803 4b01 	strb.w	r4, [r3], #1
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8000df6:	2c00      	cmp	r4, #0
 8000df8:	d1f9      	bne.n	8000dee <vTaskStartScheduler+0xa>
            xReturn = xTaskCreate( pxIdleTaskFunction,
 8000dfa:	4b11      	ldr	r3, [pc, #68]	@ (8000e40 <vTaskStartScheduler+0x5c>)
 8000dfc:	4811      	ldr	r0, [pc, #68]	@ (8000e44 <vTaskStartScheduler+0x60>)
 8000dfe:	e9cd 4300 	strd	r4, r3, [sp]
 8000e02:	2280      	movs	r2, #128	@ 0x80
 8000e04:	4623      	mov	r3, r4
 8000e06:	f7ff ff13 	bl	8000c30 <xTaskCreate>
        if( xReturn == pdFAIL )
 8000e0a:	b198      	cbz	r0, 8000e34 <vTaskStartScheduler+0x50>
    if( xReturn == pdPASS )
 8000e0c:	2801      	cmp	r0, #1
 8000e0e:	d111      	bne.n	8000e34 <vTaskStartScheduler+0x50>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 8000e10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000e14:	f383 8811 	msr	BASEPRI, r3
 8000e18:	f3bf 8f6f 	isb	sy
 8000e1c:	f3bf 8f4f 	dsb	sy
        xNextTaskUnblockTime = portMAX_DELAY;
 8000e20:	4b09      	ldr	r3, [pc, #36]	@ (8000e48 <vTaskStartScheduler+0x64>)
 8000e22:	f04f 32ff 	mov.w	r2, #4294967295
 8000e26:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8000e28:	4b08      	ldr	r3, [pc, #32]	@ (8000e4c <vTaskStartScheduler+0x68>)
 8000e2a:	6018      	str	r0, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000e2c:	4b08      	ldr	r3, [pc, #32]	@ (8000e50 <vTaskStartScheduler+0x6c>)
 8000e2e:	601c      	str	r4, [r3, #0]
        ( void ) xPortStartScheduler();
 8000e30:	f000 fa52 	bl	80012d8 <xPortStartScheduler>
    ( void ) uxTopUsedPriority;
 8000e34:	4b07      	ldr	r3, [pc, #28]	@ (8000e54 <vTaskStartScheduler+0x70>)
 8000e36:	681b      	ldr	r3, [r3, #0]
}
 8000e38:	b006      	add	sp, #24
 8000e3a:	bd10      	pop	{r4, pc}
 8000e3c:	0800153c 	.word	0x0800153c
 8000e40:	2000024c 	.word	0x2000024c
 8000e44:	08000bc9 	.word	0x08000bc9
 8000e48:	20000250 	.word	0x20000250
 8000e4c:	20000264 	.word	0x20000264
 8000e50:	2000026c 	.word	0x2000026c
 8000e54:	20000004 	.word	0x20000004

08000e58 <vTaskSuspendAll>:
        ++uxSchedulerSuspended;
 8000e58:	4a02      	ldr	r2, [pc, #8]	@ (8000e64 <vTaskSuspendAll+0xc>)
 8000e5a:	6813      	ldr	r3, [r2, #0]
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	6013      	str	r3, [r2, #0]
}
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	20000248 	.word	0x20000248

08000e68 <xTaskIncrementTick>:
{
 8000e68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8000e6c:	4b48      	ldr	r3, [pc, #288]	@ (8000f90 <xTaskIncrementTick+0x128>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	f040 8087 	bne.w	8000f84 <xTaskIncrementTick+0x11c>
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8000e76:	4b47      	ldr	r3, [pc, #284]	@ (8000f94 <xTaskIncrementTick+0x12c>)
 8000e78:	681c      	ldr	r4, [r3, #0]
 8000e7a:	3401      	adds	r4, #1
        xTickCount = xConstTickCount;
 8000e7c:	601c      	str	r4, [r3, #0]
        if( xConstTickCount == ( TickType_t ) 0U )
 8000e7e:	b95c      	cbnz	r4, 8000e98 <xTaskIncrementTick+0x30>
            taskSWITCH_DELAYED_LISTS();
 8000e80:	4a45      	ldr	r2, [pc, #276]	@ (8000f98 <xTaskIncrementTick+0x130>)
 8000e82:	4b46      	ldr	r3, [pc, #280]	@ (8000f9c <xTaskIncrementTick+0x134>)
 8000e84:	6811      	ldr	r1, [r2, #0]
 8000e86:	6818      	ldr	r0, [r3, #0]
 8000e88:	6010      	str	r0, [r2, #0]
 8000e8a:	4a45      	ldr	r2, [pc, #276]	@ (8000fa0 <xTaskIncrementTick+0x138>)
 8000e8c:	6019      	str	r1, [r3, #0]
 8000e8e:	6813      	ldr	r3, [r2, #0]
 8000e90:	3301      	adds	r3, #1
 8000e92:	6013      	str	r3, [r2, #0]
 8000e94:	f7ff fe86 	bl	8000ba4 <prvResetNextTaskUnblockTime>
        if( xConstTickCount >= xNextTaskUnblockTime )
 8000e98:	f8df c114 	ldr.w	ip, [pc, #276]	@ 8000fb0 <xTaskIncrementTick+0x148>
 8000e9c:	4a41      	ldr	r2, [pc, #260]	@ (8000fa4 <xTaskIncrementTick+0x13c>)
 8000e9e:	f8dc 3000 	ldr.w	r3, [ip]
 8000ea2:	f8df 9110 	ldr.w	r9, [pc, #272]	@ 8000fb4 <xTaskIncrementTick+0x14c>
 8000ea6:	429c      	cmp	r4, r3
    BaseType_t xSwitchRequired = pdFALSE;
 8000ea8:	f04f 0000 	mov.w	r0, #0
        if( xConstTickCount >= xNextTaskUnblockTime )
 8000eac:	d20f      	bcs.n	8000ece <xTaskIncrementTick+0x66>
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8000eae:	f8d9 3000 	ldr.w	r3, [r9]
 8000eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000eb4:	2114      	movs	r1, #20
 8000eb6:	434b      	muls	r3, r1
 8000eb8:	58d3      	ldr	r3, [r2, r3]
                    xSwitchRequired = pdTRUE;
 8000eba:	2b02      	cmp	r3, #2
                if( xYieldPendings[ 0 ] != pdFALSE )
 8000ebc:	4b3a      	ldr	r3, [pc, #232]	@ (8000fa8 <xTaskIncrementTick+0x140>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
                    xSwitchRequired = pdTRUE;
 8000ec0:	bf28      	it	cs
 8000ec2:	2001      	movcs	r0, #1
                    xSwitchRequired = pdTRUE;
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	bf18      	it	ne
 8000ec8:	2001      	movne	r0, #1
}
 8000eca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000ece:	f8df 80c8 	ldr.w	r8, [pc, #200]	@ 8000f98 <xTaskIncrementTick+0x130>
                    prvAddTaskToReadyList( pxTCB );
 8000ed2:	f8df e0e4 	ldr.w	lr, [pc, #228]	@ 8000fb8 <xTaskIncrementTick+0x150>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000ed6:	f8d8 3000 	ldr.w	r3, [r8]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	b923      	cbnz	r3, 8000ee8 <xTaskIncrementTick+0x80>
                    xNextTaskUnblockTime = portMAX_DELAY;
 8000ede:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee2:	f8cc 3000 	str.w	r3, [ip]
                    break;
 8000ee6:	e7e2      	b.n	8000eae <xTaskIncrementTick+0x46>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8000ee8:	f8d8 3000 	ldr.w	r3, [r8]
 8000eec:	68db      	ldr	r3, [r3, #12]
 8000eee:	68db      	ldr	r3, [r3, #12]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000ef0:	6859      	ldr	r1, [r3, #4]
                    if( xConstTickCount < xItemValue )
 8000ef2:	428c      	cmp	r4, r1
 8000ef4:	d202      	bcs.n	8000efc <xTaskIncrementTick+0x94>
                        xNextTaskUnblockTime = xItemValue;
 8000ef6:	f8cc 1000 	str.w	r1, [ip]
                        break;
 8000efa:	e7d8      	b.n	8000eae <xTaskIncrementTick+0x46>
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8000efc:	e9d3 1602 	ldrd	r1, r6, [r3, #8]
 8000f00:	695d      	ldr	r5, [r3, #20]
 8000f02:	608e      	str	r6, [r1, #8]
 8000f04:	6071      	str	r1, [r6, #4]
 8000f06:	6869      	ldr	r1, [r5, #4]
 8000f08:	1d1f      	adds	r7, r3, #4
 8000f0a:	42b9      	cmp	r1, r7
 8000f0c:	f04f 0100 	mov.w	r1, #0
 8000f10:	bf08      	it	eq
 8000f12:	606e      	streq	r6, [r5, #4]
 8000f14:	6159      	str	r1, [r3, #20]
 8000f16:	6829      	ldr	r1, [r5, #0]
 8000f18:	3901      	subs	r1, #1
 8000f1a:	6029      	str	r1, [r5, #0]
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000f1c:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
 8000f1e:	b17d      	cbz	r5, 8000f40 <xTaskIncrementTick+0xd8>
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8000f20:	e9d3 1607 	ldrd	r1, r6, [r3, #28]
 8000f24:	608e      	str	r6, [r1, #8]
 8000f26:	6071      	str	r1, [r6, #4]
 8000f28:	6869      	ldr	r1, [r5, #4]
 8000f2a:	f103 0a18 	add.w	sl, r3, #24
 8000f2e:	4551      	cmp	r1, sl
 8000f30:	f04f 0100 	mov.w	r1, #0
 8000f34:	bf08      	it	eq
 8000f36:	606e      	streq	r6, [r5, #4]
 8000f38:	6299      	str	r1, [r3, #40]	@ 0x28
 8000f3a:	6829      	ldr	r1, [r5, #0]
 8000f3c:	3901      	subs	r1, #1
 8000f3e:	6029      	str	r1, [r5, #0]
                    prvAddTaskToReadyList( pxTCB );
 8000f40:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000f42:	f8de 6000 	ldr.w	r6, [lr]
 8000f46:	2501      	movs	r5, #1
 8000f48:	408d      	lsls	r5, r1
 8000f4a:	4335      	orrs	r5, r6
 8000f4c:	f8ce 5000 	str.w	r5, [lr]
 8000f50:	2514      	movs	r5, #20
 8000f52:	434d      	muls	r5, r1
 8000f54:	eb02 0a05 	add.w	sl, r2, r5
 8000f58:	f8da 6004 	ldr.w	r6, [sl, #4]
 8000f5c:	609e      	str	r6, [r3, #8]
 8000f5e:	f8d6 b008 	ldr.w	fp, [r6, #8]
 8000f62:	f8c3 b00c 	str.w	fp, [r3, #12]
 8000f66:	f8cb 7004 	str.w	r7, [fp, #4]
 8000f6a:	60b7      	str	r7, [r6, #8]
 8000f6c:	f8c3 a014 	str.w	sl, [r3, #20]
 8000f70:	5953      	ldr	r3, [r2, r5]
 8000f72:	3301      	adds	r3, #1
 8000f74:	5153      	str	r3, [r2, r5]
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8000f76:	f8d9 3000 	ldr.w	r3, [r9]
 8000f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                                xSwitchRequired = pdTRUE;
 8000f7c:	4299      	cmp	r1, r3
 8000f7e:	bf88      	it	hi
 8000f80:	2001      	movhi	r0, #1
 8000f82:	e7a8      	b.n	8000ed6 <xTaskIncrementTick+0x6e>
        ++xPendedTicks;
 8000f84:	4a09      	ldr	r2, [pc, #36]	@ (8000fac <xTaskIncrementTick+0x144>)
 8000f86:	6813      	ldr	r3, [r2, #0]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	6013      	str	r3, [r2, #0]
    BaseType_t xSwitchRequired = pdFALSE;
 8000f8c:	2000      	movs	r0, #0
 8000f8e:	e79c      	b.n	8000eca <xTaskIncrementTick+0x62>
 8000f90:	20000248 	.word	0x20000248
 8000f94:	2000026c 	.word	0x2000026c
 8000f98:	200002b8 	.word	0x200002b8
 8000f9c:	200002b4 	.word	0x200002b4
 8000fa0:	20000258 	.word	0x20000258
 8000fa4:	200002e4 	.word	0x200002e4
 8000fa8:	2000025c 	.word	0x2000025c
 8000fac:	20000260 	.word	0x20000260
 8000fb0:	20000250 	.word	0x20000250
 8000fb4:	20000348 	.word	0x20000348
 8000fb8:	20000268 	.word	0x20000268

08000fbc <xTaskResumeAll>:
{
 8000fbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        taskENTER_CRITICAL();
 8000fc0:	f000 f918 	bl	80011f4 <vPortEnterCritical>
            --uxSchedulerSuspended;
 8000fc4:	4b3f      	ldr	r3, [pc, #252]	@ (80010c4 <xTaskResumeAll+0x108>)
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	3a01      	subs	r2, #1
 8000fca:	601a      	str	r2, [r3, #0]
            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	b12b      	cbz	r3, 8000fdc <xTaskResumeAll+0x20>
    BaseType_t xAlreadyYielded = pdFALSE;
 8000fd0:	2400      	movs	r4, #0
        taskEXIT_CRITICAL();
 8000fd2:	f000 f91f 	bl	8001214 <vPortExitCritical>
}
 8000fd6:	4620      	mov	r0, r4
 8000fd8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000fdc:	4a3a      	ldr	r2, [pc, #232]	@ (80010c8 <xTaskResumeAll+0x10c>)
 8000fde:	6812      	ldr	r2, [r2, #0]
 8000fe0:	2a00      	cmp	r2, #0
 8000fe2:	d0f5      	beq.n	8000fd0 <xTaskResumeAll+0x14>
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000fe4:	4e39      	ldr	r6, [pc, #228]	@ (80010cc <xTaskResumeAll+0x110>)
                        prvAddTaskToReadyList( pxTCB );
 8000fe6:	4f3a      	ldr	r7, [pc, #232]	@ (80010d0 <xTaskResumeAll+0x114>)
 8000fe8:	4a3a      	ldr	r2, [pc, #232]	@ (80010d4 <xTaskResumeAll+0x118>)
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8000fea:	f8df 80f4 	ldr.w	r8, [pc, #244]	@ 80010e0 <xTaskResumeAll+0x124>
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8000fee:	f8df 90ec 	ldr.w	r9, [pc, #236]	@ 80010dc <xTaskResumeAll+0x120>
                        prvAddTaskToReadyList( pxTCB );
 8000ff2:	f04f 0c01 	mov.w	ip, #1
 8000ff6:	f04f 0e14 	mov.w	lr, #20
 8000ffa:	e03f      	b.n	800107c <xTaskResumeAll+0xc0>
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8000ffc:	68f3      	ldr	r3, [r6, #12]
 8000ffe:	68db      	ldr	r3, [r3, #12]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001000:	e9d3 1407 	ldrd	r1, r4, [r3, #28]
 8001004:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8001006:	608c      	str	r4, [r1, #8]
 8001008:	6061      	str	r1, [r4, #4]
 800100a:	6841      	ldr	r1, [r0, #4]
 800100c:	f103 0518 	add.w	r5, r3, #24
 8001010:	42a9      	cmp	r1, r5
 8001012:	f04f 0100 	mov.w	r1, #0
 8001016:	bf08      	it	eq
 8001018:	6044      	streq	r4, [r0, #4]
 800101a:	6299      	str	r1, [r3, #40]	@ 0x28
 800101c:	6801      	ldr	r1, [r0, #0]
 800101e:	3901      	subs	r1, #1
 8001020:	6001      	str	r1, [r0, #0]
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001022:	e9d3 1402 	ldrd	r1, r4, [r3, #8]
 8001026:	6958      	ldr	r0, [r3, #20]
 8001028:	608c      	str	r4, [r1, #8]
 800102a:	6061      	str	r1, [r4, #4]
 800102c:	6841      	ldr	r1, [r0, #4]
 800102e:	1d1d      	adds	r5, r3, #4
 8001030:	42a9      	cmp	r1, r5
 8001032:	6801      	ldr	r1, [r0, #0]
 8001034:	bf08      	it	eq
 8001036:	6044      	streq	r4, [r0, #4]
 8001038:	3901      	subs	r1, #1
 800103a:	6001      	str	r1, [r0, #0]
                        prvAddTaskToReadyList( pxTCB );
 800103c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800103e:	683c      	ldr	r4, [r7, #0]
 8001040:	fa0c f001 	lsl.w	r0, ip, r1
 8001044:	4320      	orrs	r0, r4
 8001046:	6038      	str	r0, [r7, #0]
 8001048:	fb0e f001 	mul.w	r0, lr, r1
 800104c:	eb02 0a00 	add.w	sl, r2, r0
 8001050:	f8da 4004 	ldr.w	r4, [sl, #4]
 8001054:	609c      	str	r4, [r3, #8]
 8001056:	f8d4 b008 	ldr.w	fp, [r4, #8]
 800105a:	f8c3 b00c 	str.w	fp, [r3, #12]
 800105e:	f8cb 5004 	str.w	r5, [fp, #4]
 8001062:	60a5      	str	r5, [r4, #8]
 8001064:	5814      	ldr	r4, [r2, r0]
 8001066:	f8c3 a014 	str.w	sl, [r3, #20]
 800106a:	3401      	adds	r4, #1
 800106c:	5014      	str	r4, [r2, r0]
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800106e:	f8d8 0000 	ldr.w	r0, [r8]
 8001072:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 8001074:	4281      	cmp	r1, r0
 8001076:	d901      	bls.n	800107c <xTaskResumeAll+0xc0>
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8001078:	f8c9 c000 	str.w	ip, [r9]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800107c:	6831      	ldr	r1, [r6, #0]
 800107e:	2900      	cmp	r1, #0
 8001080:	d1bc      	bne.n	8000ffc <xTaskResumeAll+0x40>
                    if( pxTCB != NULL )
 8001082:	b10b      	cbz	r3, 8001088 <xTaskResumeAll+0xcc>
                        prvResetNextTaskUnblockTime();
 8001084:	f7ff fd8e 	bl	8000ba4 <prvResetNextTaskUnblockTime>
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001088:	4d13      	ldr	r5, [pc, #76]	@ (80010d8 <xTaskResumeAll+0x11c>)
 800108a:	682c      	ldr	r4, [r5, #0]
                        if( xPendedCounts > ( TickType_t ) 0U )
 800108c:	b144      	cbz	r4, 80010a0 <xTaskResumeAll+0xe4>
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 800108e:	4e13      	ldr	r6, [pc, #76]	@ (80010dc <xTaskResumeAll+0x120>)
 8001090:	2701      	movs	r7, #1
                                if( xTaskIncrementTick() != pdFALSE )
 8001092:	f7ff fee9 	bl	8000e68 <xTaskIncrementTick>
 8001096:	b100      	cbz	r0, 800109a <xTaskResumeAll+0xde>
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8001098:	6037      	str	r7, [r6, #0]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 800109a:	3c01      	subs	r4, #1
 800109c:	d1f9      	bne.n	8001092 <xTaskResumeAll+0xd6>
                            xPendedTicks = 0;
 800109e:	602c      	str	r4, [r5, #0]
                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 80010a0:	4b0e      	ldr	r3, [pc, #56]	@ (80010dc <xTaskResumeAll+0x120>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d093      	beq.n	8000fd0 <xTaskResumeAll+0x14>
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 80010a8:	4b0d      	ldr	r3, [pc, #52]	@ (80010e0 <xTaskResumeAll+0x124>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80010b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80010b4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80010b8:	f3bf 8f4f 	dsb	sy
 80010bc:	f3bf 8f6f 	isb	sy
                            xAlreadyYielded = pdTRUE;
 80010c0:	2401      	movs	r4, #1
 80010c2:	e786      	b.n	8000fd2 <xTaskResumeAll+0x16>
 80010c4:	20000248 	.word	0x20000248
 80010c8:	20000270 	.word	0x20000270
 80010cc:	200002a0 	.word	0x200002a0
 80010d0:	20000268 	.word	0x20000268
 80010d4:	200002e4 	.word	0x200002e4
 80010d8:	20000260 	.word	0x20000260
 80010dc:	2000025c 	.word	0x2000025c
 80010e0:	20000348 	.word	0x20000348

080010e4 <vTaskSwitchContext>:
        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 80010e4:	4b12      	ldr	r3, [pc, #72]	@ (8001130 <vTaskSwitchContext+0x4c>)
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	4b12      	ldr	r3, [pc, #72]	@ (8001134 <vTaskSwitchContext+0x50>)
    {
 80010ea:	b530      	push	{r4, r5, lr}
        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 80010ec:	b112      	cbz	r2, 80010f4 <vTaskSwitchContext+0x10>
            xYieldPendings[ 0 ] = pdTRUE;
 80010ee:	2201      	movs	r2, #1
 80010f0:	601a      	str	r2, [r3, #0]
    }
 80010f2:	bd30      	pop	{r4, r5, pc}
            xYieldPendings[ 0 ] = pdFALSE;
 80010f4:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 80010f6:	4b10      	ldr	r3, [pc, #64]	@ (8001138 <vTaskSwitchContext+0x54>)
 80010f8:	681b      	ldr	r3, [r3, #0]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80010fa:	fab3 f383 	clz	r3, r3
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	490e      	ldr	r1, [pc, #56]	@ (800113c <vTaskSwitchContext+0x58>)
 8001102:	f1c3 031f 	rsb	r3, r3, #31
 8001106:	2414      	movs	r4, #20
 8001108:	fb04 f203 	mul.w	r2, r4, r3
 800110c:	1888      	adds	r0, r1, r2
 800110e:	3208      	adds	r2, #8
 8001110:	6845      	ldr	r5, [r0, #4]
 8001112:	686d      	ldr	r5, [r5, #4]
 8001114:	6045      	str	r5, [r0, #4]
 8001116:	440a      	add	r2, r1
 8001118:	4295      	cmp	r5, r2
 800111a:	bf04      	itt	eq
 800111c:	68c2      	ldreq	r2, [r0, #12]
 800111e:	6042      	streq	r2, [r0, #4]
 8001120:	fb04 1103 	mla	r1, r4, r3, r1
 8001124:	684b      	ldr	r3, [r1, #4]
 8001126:	68da      	ldr	r2, [r3, #12]
 8001128:	4b05      	ldr	r3, [pc, #20]	@ (8001140 <vTaskSwitchContext+0x5c>)
 800112a:	601a      	str	r2, [r3, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 800112c:	681b      	ldr	r3, [r3, #0]
    }
 800112e:	e7e0      	b.n	80010f2 <vTaskSwitchContext+0xe>
 8001130:	20000248 	.word	0x20000248
 8001134:	2000025c 	.word	0x2000025c
 8001138:	20000268 	.word	0x20000268
 800113c:	200002e4 	.word	0x200002e4
 8001140:	20000348 	.word	0x20000348

08001144 <prvTaskExitError>:
    return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001144:	b082      	sub	sp, #8
    volatile uint32_t ulDummy = 0;
 8001146:	2300      	movs	r3, #0
 8001148:	9301      	str	r3, [sp, #4]
    __asm volatile
 800114a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800114e:	f383 8811 	msr	BASEPRI, r3
 8001152:	f3bf 8f6f 	isb	sy
 8001156:	f3bf 8f4f 	dsb	sy
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800115a:	9b01      	ldr	r3, [sp, #4]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d0fc      	beq.n	800115a <prvTaskExitError+0x16>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8001160:	b002      	add	sp, #8
 8001162:	4770      	bx	lr

08001164 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8001164:	4808      	ldr	r0, [pc, #32]	@ (8001188 <prvPortStartFirstTask+0x24>)
 8001166:	6800      	ldr	r0, [r0, #0]
 8001168:	6800      	ldr	r0, [r0, #0]
 800116a:	f380 8808 	msr	MSP, r0
 800116e:	f04f 0000 	mov.w	r0, #0
 8001172:	f380 8814 	msr	CONTROL, r0
 8001176:	b662      	cpsie	i
 8001178:	b661      	cpsie	f
 800117a:	f3bf 8f4f 	dsb	sy
 800117e:	f3bf 8f6f 	isb	sy
 8001182:	df00      	svc	0
 8001184:	bf00      	nop
 8001186:	0000      	.short	0x0000
 8001188:	e000ed08 	.word	0xe000ed08

0800118c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 800118c:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800119c <vPortEnableVFP+0x10>
 8001190:	6801      	ldr	r1, [r0, #0]
 8001192:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8001196:	6001      	str	r1, [r0, #0]
 8001198:	4770      	bx	lr
 800119a:	0000      	.short	0x0000
 800119c:	e000ed88 	.word	0xe000ed88

080011a0 <pxPortInitialiseStack>:
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80011a0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80011a4:	f840 3c04 	str.w	r3, [r0, #-4]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80011a8:	4b07      	ldr	r3, [pc, #28]	@ (80011c8 <pxPortInitialiseStack+0x28>)
 80011aa:	f840 3c0c 	str.w	r3, [r0, #-12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80011ae:	f021 0101 	bic.w	r1, r1, #1
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80011b2:	f06f 0302 	mvn.w	r3, #2
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80011b6:	f840 1c08 	str.w	r1, [r0, #-8]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80011ba:	f840 2c20 	str.w	r2, [r0, #-32]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80011be:	f840 3c24 	str.w	r3, [r0, #-36]
}
 80011c2:	3844      	subs	r0, #68	@ 0x44
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	08001145 	.word	0x08001145
 80011cc:	00000000 	.word	0x00000000

080011d0 <vPortSVCHandler>:
    __asm volatile (
 80011d0:	4b07      	ldr	r3, [pc, #28]	@ (80011f0 <pxCurrentTCBConst2>)
 80011d2:	6819      	ldr	r1, [r3, #0]
 80011d4:	6808      	ldr	r0, [r1, #0]
 80011d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011da:	f380 8809 	msr	PSP, r0
 80011de:	f3bf 8f6f 	isb	sy
 80011e2:	f04f 0000 	mov.w	r0, #0
 80011e6:	f380 8811 	msr	BASEPRI, r0
 80011ea:	4770      	bx	lr
 80011ec:	f3af 8000 	nop.w

080011f0 <pxCurrentTCBConst2>:
 80011f0:	20000348 	.word	0x20000348

080011f4 <vPortEnterCritical>:
 80011f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80011f8:	f383 8811 	msr	BASEPRI, r3
 80011fc:	f3bf 8f6f 	isb	sy
 8001200:	f3bf 8f4f 	dsb	sy
    uxCriticalNesting++;
 8001204:	4a02      	ldr	r2, [pc, #8]	@ (8001210 <vPortEnterCritical+0x1c>)
 8001206:	6813      	ldr	r3, [r2, #0]
 8001208:	3301      	adds	r3, #1
 800120a:	6013      	str	r3, [r2, #0]
}
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	20000008 	.word	0x20000008

08001214 <vPortExitCritical>:
    uxCriticalNesting--;
 8001214:	4a03      	ldr	r2, [pc, #12]	@ (8001224 <vPortExitCritical+0x10>)
 8001216:	6813      	ldr	r3, [r2, #0]
 8001218:	3b01      	subs	r3, #1
 800121a:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 800121c:	b90b      	cbnz	r3, 8001222 <vPortExitCritical+0xe>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 800121e:	f383 8811 	msr	BASEPRI, r3
}
 8001222:	4770      	bx	lr
 8001224:	20000008 	.word	0x20000008
	...

08001230 <xPortPendSVHandler>:
    __asm volatile
 8001230:	f3ef 8009 	mrs	r0, PSP
 8001234:	f3bf 8f6f 	isb	sy
 8001238:	4b15      	ldr	r3, [pc, #84]	@ (8001290 <pxCurrentTCBConst>)
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	f01e 0f10 	tst.w	lr, #16
 8001240:	bf08      	it	eq
 8001242:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001246:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800124a:	6010      	str	r0, [r2, #0]
 800124c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001250:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8001254:	f380 8811 	msr	BASEPRI, r0
 8001258:	f3bf 8f4f 	dsb	sy
 800125c:	f3bf 8f6f 	isb	sy
 8001260:	f7ff ff40 	bl	80010e4 <vTaskSwitchContext>
 8001264:	f04f 0000 	mov.w	r0, #0
 8001268:	f380 8811 	msr	BASEPRI, r0
 800126c:	bc09      	pop	{r0, r3}
 800126e:	6819      	ldr	r1, [r3, #0]
 8001270:	6808      	ldr	r0, [r1, #0]
 8001272:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001276:	f01e 0f10 	tst.w	lr, #16
 800127a:	bf08      	it	eq
 800127c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001280:	f380 8809 	msr	PSP, r0
 8001284:	f3bf 8f6f 	isb	sy
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	f3af 8000 	nop.w

08001290 <pxCurrentTCBConst>:
 8001290:	20000348 	.word	0x20000348

08001294 <xPortSysTickHandler>:
{
 8001294:	b508      	push	{r3, lr}
    __asm volatile
 8001296:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800129a:	f383 8811 	msr	BASEPRI, r3
 800129e:	f3bf 8f6f 	isb	sy
 80012a2:	f3bf 8f4f 	dsb	sy
        if( xTaskIncrementTick() != pdFALSE )
 80012a6:	f7ff fddf 	bl	8000e68 <xTaskIncrementTick>
 80012aa:	b128      	cbz	r0, 80012b8 <xPortSysTickHandler+0x24>
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80012ac:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80012b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80012b4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
    __asm volatile
 80012b8:	2300      	movs	r3, #0
 80012ba:	f383 8811 	msr	BASEPRI, r3
}
 80012be:	bd08      	pop	{r3, pc}

080012c0 <vPortSetupTimerInterrupt>:
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80012c0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80012c4:	2200      	movs	r2, #0
 80012c6:	611a      	str	r2, [r3, #16]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80012c8:	619a      	str	r2, [r3, #24]
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80012ca:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 80012ce:	615a      	str	r2, [r3, #20]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80012d0:	2207      	movs	r2, #7
 80012d2:	611a      	str	r2, [r3, #16]
}
 80012d4:	4770      	bx	lr
	...

080012d8 <xPortStartScheduler>:
{
 80012d8:	b538      	push	{r3, r4, r5, lr}
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80012da:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
    portNVIC_SHPR2_REG = 0;
 80012de:	2500      	movs	r5, #0
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80012e0:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 80012e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80012e8:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80012ec:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 80012f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80012f4:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
    portNVIC_SHPR2_REG = 0;
 80012f8:	f8c4 5d1c 	str.w	r5, [r4, #3356]	@ 0xd1c
    vPortSetupTimerInterrupt();
 80012fc:	f7ff ffe0 	bl	80012c0 <vPortSetupTimerInterrupt>
    uxCriticalNesting = 0;
 8001300:	4b08      	ldr	r3, [pc, #32]	@ (8001324 <xPortStartScheduler+0x4c>)
 8001302:	601d      	str	r5, [r3, #0]
    vPortEnableVFP();
 8001304:	f7ff ff42 	bl	800118c <vPortEnableVFP>
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001308:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 800130c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8001310:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
    prvPortStartFirstTask();
 8001314:	f7ff ff26 	bl	8001164 <prvPortStartFirstTask>
    vTaskSwitchContext();
 8001318:	f7ff fee4 	bl	80010e4 <vTaskSwitchContext>
    prvTaskExitError();
 800131c:	f7ff ff12 	bl	8001144 <prvTaskExitError>
}
 8001320:	4628      	mov	r0, r5
 8001322:	bd38      	pop	{r3, r4, r5, pc}
 8001324:	20000008 	.word	0x20000008

08001328 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8001328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 800132a:	1e43      	subs	r3, r0, #1
 800132c:	330a      	adds	r3, #10
 800132e:	d863      	bhi.n	80013f8 <pvPortMalloc+0xd0>
        {
            xWantedSize += xHeapStructSize;

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001330:	f010 0307 	ands.w	r3, r0, #7
            xWantedSize += xHeapStructSize;
 8001334:	f100 0408 	add.w	r4, r0, #8
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001338:	d005      	beq.n	8001346 <pvPortMalloc+0x1e>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800133a:	f1a3 0209 	sub.w	r2, r3, #9
 800133e:	42a2      	cmp	r2, r4
 8001340:	d35a      	bcc.n	80013f8 <pvPortMalloc+0xd0>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8001342:	3010      	adds	r0, #16
 8001344:	1ac4      	subs	r4, r0, r3

    vTaskSuspendAll();
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8001346:	4d30      	ldr	r5, [pc, #192]	@ (8001408 <pvPortMalloc+0xe0>)
    vTaskSuspendAll();
 8001348:	f7ff fd86 	bl	8000e58 <vTaskSuspendAll>
        if( pxEnd == NULL )
 800134c:	682b      	ldr	r3, [r5, #0]
 800134e:	b9f3      	cbnz	r3, 800138e <pvPortMalloc+0x66>
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8001350:	4a2e      	ldr	r2, [pc, #184]	@ (800140c <pvPortMalloc+0xe4>)
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 8001352:	482f      	ldr	r0, [pc, #188]	@ (8001410 <pvPortMalloc+0xe8>)
    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001354:	0753      	lsls	r3, r2, #29
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 8001356:	bf1f      	itttt	ne
 8001358:	1dd1      	addne	r1, r2, #7
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800135a:	f021 0107 	bicne.w	r1, r1, #7
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 800135e:	f502 4288 	addne.w	r2, r2, #17408	@ 0x4400
 8001362:	1a53      	subne	r3, r2, r1
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001364:	bf0c      	ite	eq
 8001366:	f44f 4388 	moveq.w	r3, #17408	@ 0x4400
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800136a:	460a      	movne	r2, r1
    xStart.xBlockSize = ( size_t ) 0;

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 800136c:	4413      	add	r3, r2
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 800136e:	3b08      	subs	r3, #8
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8001370:	f023 0307 	bic.w	r3, r3, #7
    xStart.xBlockSize = ( size_t ) 0;
 8001374:	2100      	movs	r1, #0
 8001376:	6041      	str	r1, [r0, #4]
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 8001378:	6002      	str	r2, [r0, #0]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
    pxEnd->xBlockSize = 0;
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 800137a:	e9c3 1100 	strd	r1, r1, [r3]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800137e:	1a99      	subs	r1, r3, r2
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8001380:	e9c2 3100 	strd	r3, r1, [r2]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8001384:	602b      	str	r3, [r5, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001386:	4b23      	ldr	r3, [pc, #140]	@ (8001414 <pvPortMalloc+0xec>)
 8001388:	6019      	str	r1, [r3, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800138a:	4b23      	ldr	r3, [pc, #140]	@ (8001418 <pvPortMalloc+0xf0>)
 800138c:	6019      	str	r1, [r3, #0]
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 800138e:	2c00      	cmp	r4, #0
 8001390:	dd37      	ble.n	8001402 <pvPortMalloc+0xda>
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001392:	4e21      	ldr	r6, [pc, #132]	@ (8001418 <pvPortMalloc+0xf0>)
 8001394:	6831      	ldr	r1, [r6, #0]
 8001396:	42a1      	cmp	r1, r4
 8001398:	d333      	bcc.n	8001402 <pvPortMalloc+0xda>
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 800139a:	4a1d      	ldr	r2, [pc, #116]	@ (8001410 <pvPortMalloc+0xe8>)
 800139c:	6813      	ldr	r3, [r2, #0]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 800139e:	6858      	ldr	r0, [r3, #4]
 80013a0:	42a0      	cmp	r0, r4
 80013a2:	d201      	bcs.n	80013a8 <pvPortMalloc+0x80>
 80013a4:	681f      	ldr	r7, [r3, #0]
 80013a6:	bb4f      	cbnz	r7, 80013fc <pvPortMalloc+0xd4>
                if( pxBlock != pxEnd )
 80013a8:	682d      	ldr	r5, [r5, #0]
 80013aa:	429d      	cmp	r5, r3
 80013ac:	d029      	beq.n	8001402 <pvPortMalloc+0xda>
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 80013ae:	6815      	ldr	r5, [r2, #0]
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80013b0:	f8d3 c000 	ldr.w	ip, [r3]
 80013b4:	f8c2 c000 	str.w	ip, [r2]
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80013b8:	1b00      	subs	r0, r0, r4
 80013ba:	2810      	cmp	r0, #16
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 80013bc:	f105 0508 	add.w	r5, r5, #8
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80013c0:	d905      	bls.n	80013ce <pvPortMalloc+0xa6>
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80013c2:	191f      	adds	r7, r3, r4
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80013c4:	6078      	str	r0, [r7, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80013c6:	605c      	str	r4, [r3, #4]
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 80013c8:	f843 c004 	str.w	ip, [r3, r4]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 80013cc:	6017      	str	r7, [r2, #0]
                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80013ce:	6858      	ldr	r0, [r3, #4]
 80013d0:	1a0a      	subs	r2, r1, r0
                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80013d2:	4910      	ldr	r1, [pc, #64]	@ (8001414 <pvPortMalloc+0xec>)
                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80013d4:	6032      	str	r2, [r6, #0]
                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80013d6:	680c      	ldr	r4, [r1, #0]
 80013d8:	42a2      	cmp	r2, r4
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80013da:	bf38      	it	cc
 80013dc:	600a      	strcc	r2, [r1, #0]
                    pxBlock->pxNextFreeBlock = NULL;
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80013e2:	4a0e      	ldr	r2, [pc, #56]	@ (800141c <pvPortMalloc+0xf4>)
                    heapALLOCATE_BLOCK( pxBlock );
 80013e4:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80013e8:	6058      	str	r0, [r3, #4]
                    xNumberOfSuccessfulAllocations++;
 80013ea:	6813      	ldr	r3, [r2, #0]
 80013ec:	3301      	adds	r3, #1
 80013ee:	6013      	str	r3, [r2, #0]
    ( void ) xTaskResumeAll();
 80013f0:	f7ff fde4 	bl	8000fbc <xTaskResumeAll>
}
 80013f4:	4628      	mov	r0, r5
 80013f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013f8:	2400      	movs	r4, #0
 80013fa:	e7a4      	b.n	8001346 <pvPortMalloc+0x1e>
 80013fc:	461a      	mov	r2, r3
 80013fe:	463b      	mov	r3, r7
 8001400:	e7cd      	b.n	800139e <pvPortMalloc+0x76>
    void * pvReturn = NULL;
 8001402:	2500      	movs	r5, #0
 8001404:	e7f4      	b.n	80013f0 <pvPortMalloc+0xc8>
 8001406:	bf00      	nop
 8001408:	2000035c 	.word	0x2000035c
 800140c:	20000368 	.word	0x20000368
 8001410:	20000360 	.word	0x20000360
 8001414:	20000354 	.word	0x20000354
 8001418:	20000358 	.word	0x20000358
 800141c:	20000350 	.word	0x20000350

08001420 <vPortFree>:
{
 8001420:	b538      	push	{r3, r4, r5, lr}
    if( pv != NULL )
 8001422:	4605      	mov	r5, r0
 8001424:	2800      	cmp	r0, #0
 8001426:	d03b      	beq.n	80014a0 <vPortFree+0x80>
        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8001428:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800142c:	2b00      	cmp	r3, #0
 800142e:	da37      	bge.n	80014a0 <vPortFree+0x80>
            if( pxLink->pxNextFreeBlock == NULL )
 8001430:	f850 2c08 	ldr.w	r2, [r0, #-8]
 8001434:	2a00      	cmp	r2, #0
 8001436:	d133      	bne.n	80014a0 <vPortFree+0x80>
                heapFREE_BLOCK( pxLink );
 8001438:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800143c:	f840 3c04 	str.w	r3, [r0, #-4]
        puc -= xHeapStructSize;
 8001440:	f1a0 0408 	sub.w	r4, r0, #8
                vTaskSuspendAll();
 8001444:	f7ff fd08 	bl	8000e58 <vTaskSuspendAll>
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8001448:	4a16      	ldr	r2, [pc, #88]	@ (80014a4 <vPortFree+0x84>)
 800144a:	f855 1c04 	ldr.w	r1, [r5, #-4]
 800144e:	6813      	ldr	r3, [r2, #0]
 8001450:	440b      	add	r3, r1
 8001452:	6013      	str	r3, [r2, #0]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8001454:	4b14      	ldr	r3, [pc, #80]	@ (80014a8 <vPortFree+0x88>)
 8001456:	461a      	mov	r2, r3
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	429c      	cmp	r4, r3
 800145c:	d8fb      	bhi.n	8001456 <vPortFree+0x36>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800145e:	6850      	ldr	r0, [r2, #4]
 8001460:	1815      	adds	r5, r2, r0
 8001462:	42ac      	cmp	r4, r5
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001464:	bf02      	ittt	eq
 8001466:	1809      	addeq	r1, r1, r0
 8001468:	4614      	moveq	r4, r2
 800146a:	6051      	streq	r1, [r2, #4]

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 800146c:	6860      	ldr	r0, [r4, #4]
 800146e:	1821      	adds	r1, r4, r0
 8001470:	428b      	cmp	r3, r1
 8001472:	d113      	bne.n	800149c <vPortFree+0x7c>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8001474:	490d      	ldr	r1, [pc, #52]	@ (80014ac <vPortFree+0x8c>)
 8001476:	6809      	ldr	r1, [r1, #0]
 8001478:	428b      	cmp	r3, r1
 800147a:	d003      	beq.n	8001484 <vPortFree+0x64>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 800147c:	6859      	ldr	r1, [r3, #4]
 800147e:	4401      	add	r1, r0
 8001480:	6061      	str	r1, [r4, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8001482:	6819      	ldr	r1, [r3, #0]
 8001484:	6021      	str	r1, [r4, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8001486:	42a2      	cmp	r2, r4
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 8001488:	bf18      	it	ne
 800148a:	6014      	strne	r4, [r2, #0]
                    xNumberOfSuccessfulFrees++;
 800148c:	4a08      	ldr	r2, [pc, #32]	@ (80014b0 <vPortFree+0x90>)
 800148e:	6813      	ldr	r3, [r2, #0]
 8001490:	3301      	adds	r3, #1
 8001492:	6013      	str	r3, [r2, #0]
}
 8001494:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                ( void ) xTaskResumeAll();
 8001498:	f7ff bd90 	b.w	8000fbc <xTaskResumeAll>
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 800149c:	4619      	mov	r1, r3
 800149e:	e7f1      	b.n	8001484 <vPortFree+0x64>
}
 80014a0:	bd38      	pop	{r3, r4, r5, pc}
 80014a2:	bf00      	nop
 80014a4:	20000358 	.word	0x20000358
 80014a8:	20000360 	.word	0x20000360
 80014ac:	2000035c 	.word	0x2000035c
 80014b0:	2000034c 	.word	0x2000034c

080014b4 <memset>:
 80014b4:	4402      	add	r2, r0
 80014b6:	4603      	mov	r3, r0
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d100      	bne.n	80014be <memset+0xa>
 80014bc:	4770      	bx	lr
 80014be:	f803 1b01 	strb.w	r1, [r3], #1
 80014c2:	e7f9      	b.n	80014b8 <memset+0x4>

080014c4 <__libc_init_array>:
 80014c4:	b570      	push	{r4, r5, r6, lr}
 80014c6:	4d0d      	ldr	r5, [pc, #52]	@ (80014fc <__libc_init_array+0x38>)
 80014c8:	4c0d      	ldr	r4, [pc, #52]	@ (8001500 <__libc_init_array+0x3c>)
 80014ca:	1b64      	subs	r4, r4, r5
 80014cc:	10a4      	asrs	r4, r4, #2
 80014ce:	2600      	movs	r6, #0
 80014d0:	42a6      	cmp	r6, r4
 80014d2:	d109      	bne.n	80014e8 <__libc_init_array+0x24>
 80014d4:	4d0b      	ldr	r5, [pc, #44]	@ (8001504 <__libc_init_array+0x40>)
 80014d6:	4c0c      	ldr	r4, [pc, #48]	@ (8001508 <__libc_init_array+0x44>)
 80014d8:	f000 f818 	bl	800150c <_init>
 80014dc:	1b64      	subs	r4, r4, r5
 80014de:	10a4      	asrs	r4, r4, #2
 80014e0:	2600      	movs	r6, #0
 80014e2:	42a6      	cmp	r6, r4
 80014e4:	d105      	bne.n	80014f2 <__libc_init_array+0x2e>
 80014e6:	bd70      	pop	{r4, r5, r6, pc}
 80014e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80014ec:	4798      	blx	r3
 80014ee:	3601      	adds	r6, #1
 80014f0:	e7ee      	b.n	80014d0 <__libc_init_array+0xc>
 80014f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80014f6:	4798      	blx	r3
 80014f8:	3601      	adds	r6, #1
 80014fa:	e7f2      	b.n	80014e2 <__libc_init_array+0x1e>
 80014fc:	0800154c 	.word	0x0800154c
 8001500:	0800154c 	.word	0x0800154c
 8001504:	0800154c 	.word	0x0800154c
 8001508:	08001550 	.word	0x08001550

0800150c <_init>:
 800150c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800150e:	bf00      	nop
 8001510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001512:	bc08      	pop	{r3}
 8001514:	469e      	mov	lr, r3
 8001516:	4770      	bx	lr

08001518 <_fini>:
 8001518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800151a:	bf00      	nop
 800151c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800151e:	bc08      	pop	{r3}
 8001520:	469e      	mov	lr, r3
 8001522:	4770      	bx	lr
